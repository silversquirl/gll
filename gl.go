//go:generate go run ./cmd/gllgen/
package gll

/*
#cgo LDFLAGS: -lGL
#include <stdint.h>
#include <sys/types.h>

#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef struct __GLsync *GLsync;

void gllCall_glAccum(void *_func, uint32_t op, float value) {
	((void (*)(uint32_t op, float value))_func)(op, value);
}
void gllCall_glAccumxOES(void *_func, uint32_t op, int32_t value) {
	((void (*)(uint32_t op, int32_t value))_func)(op, value);
}
void gllCall_glActiveProgramEXT(void *_func, uint32_t program) {
	((void (*)(uint32_t program))_func)(program);
}
void gllCall_glActiveShaderProgram(void *_func, uint32_t pipeline, uint32_t program) {
	((void (*)(uint32_t pipeline, uint32_t program))_func)(pipeline, program);
}
void gllCall_glActiveShaderProgramEXT(void *_func, uint32_t pipeline, uint32_t program) {
	((void (*)(uint32_t pipeline, uint32_t program))_func)(pipeline, program);
}
void gllCall_glActiveStencilFaceEXT(void *_func, uint32_t face) {
	((void (*)(uint32_t face))_func)(face);
}
void gllCall_glActiveTexture(void *_func, uint32_t texture) {
	((void (*)(uint32_t texture))_func)(texture);
}
void gllCall_glActiveTextureARB(void *_func, uint32_t texture) {
	((void (*)(uint32_t texture))_func)(texture);
}
void gllCall_glActiveVaryingNV(void *_func, uint32_t program, uint8_t *name) {
	((void (*)(uint32_t program, uint8_t *name))_func)(program, name);
}
void gllCall_glAlphaFragmentOp1ATI(void *_func, uint32_t op, uint32_t dst, uint32_t dstMod, uint32_t arg1, uint32_t arg1Rep, uint32_t arg1Mod) {
	((void (*)(uint32_t op, uint32_t dst, uint32_t dstMod, uint32_t arg1, uint32_t arg1Rep, uint32_t arg1Mod))_func)(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
}
void gllCall_glAlphaFragmentOp2ATI(void *_func, uint32_t op, uint32_t dst, uint32_t dstMod, uint32_t arg1, uint32_t arg1Rep, uint32_t arg1Mod, uint32_t arg2, uint32_t arg2Rep, uint32_t arg2Mod) {
	((void (*)(uint32_t op, uint32_t dst, uint32_t dstMod, uint32_t arg1, uint32_t arg1Rep, uint32_t arg1Mod, uint32_t arg2, uint32_t arg2Rep, uint32_t arg2Mod))_func)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}
void gllCall_glAlphaFragmentOp3ATI(void *_func, uint32_t op, uint32_t dst, uint32_t dstMod, uint32_t arg1, uint32_t arg1Rep, uint32_t arg1Mod, uint32_t arg2, uint32_t arg2Rep, uint32_t arg2Mod, uint32_t arg3, uint32_t arg3Rep, uint32_t arg3Mod) {
	((void (*)(uint32_t op, uint32_t dst, uint32_t dstMod, uint32_t arg1, uint32_t arg1Rep, uint32_t arg1Mod, uint32_t arg2, uint32_t arg2Rep, uint32_t arg2Mod, uint32_t arg3, uint32_t arg3Rep, uint32_t arg3Mod))_func)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}
void gllCall_glAlphaFunc(void *_func, uint32_t func, float ref) {
	((void (*)(uint32_t func, float ref))_func)(func, ref);
}
void gllCall_glAlphaFuncQCOM(void *_func, uint32_t func, float ref) {
	((void (*)(uint32_t func, float ref))_func)(func, ref);
}
void gllCall_glAlphaFuncx(void *_func, uint32_t func, int32_t ref) {
	((void (*)(uint32_t func, int32_t ref))_func)(func, ref);
}
void gllCall_glAlphaFuncxOES(void *_func, uint32_t func, int32_t ref) {
	((void (*)(uint32_t func, int32_t ref))_func)(func, ref);
}
void gllCall_glAlphaToCoverageDitherControlNV(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glApplyFramebufferAttachmentCMAAINTEL(void *_func) {
	((void (*)())_func)();
}
void gllCall_glApplyTextureEXT(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
_Bool gllCall_glAcquireKeyedMutexWin32EXT(void *_func, uint32_t memory, uint64_t key, uint32_t timeout) {
	return ((_Bool (*)(uint32_t memory, uint64_t key, uint32_t timeout))_func)(memory, key, timeout);
}
_Bool gllCall_glAreProgramsResidentNV(void *_func, int32_t n, uint32_t *programs, _Bool *residences) {
	return ((_Bool (*)(int32_t n, uint32_t *programs, _Bool *residences))_func)(n, programs, residences);
}
_Bool gllCall_glAreTexturesResident(void *_func, int32_t n, uint32_t *textures, _Bool *residences) {
	return ((_Bool (*)(int32_t n, uint32_t *textures, _Bool *residences))_func)(n, textures, residences);
}
_Bool gllCall_glAreTexturesResidentEXT(void *_func, int32_t n, uint32_t *textures, _Bool *residences) {
	return ((_Bool (*)(int32_t n, uint32_t *textures, _Bool *residences))_func)(n, textures, residences);
}
void gllCall_glArrayElement(void *_func, int32_t i) {
	((void (*)(int32_t i))_func)(i);
}
void gllCall_glArrayElementEXT(void *_func, int32_t i) {
	((void (*)(int32_t i))_func)(i);
}
void gllCall_glArrayObjectATI(void *_func, uint32_t array, int32_t size, uint32_t type, int32_t stride, uint32_t buffer, uint32_t offset) {
	((void (*)(uint32_t array, int32_t size, uint32_t type, int32_t stride, uint32_t buffer, uint32_t offset))_func)(array, size, type, stride, buffer, offset);
}
uint32_t gllCall_glAsyncCopyBufferSubDataNVX(void *_func, int32_t waitSemaphoreCount, uint32_t *waitSemaphoreArray, uint64_t *fenceValueArray, uint32_t readGpu, uint32_t writeGpuMask, uint32_t readBuffer, uint32_t writeBuffer, intptr_t readOffset, intptr_t writeOffset, ssize_t size, int32_t signalSemaphoreCount, uint32_t *signalSemaphoreArray, uint64_t *signalValueArray) {
	return ((uint32_t (*)(int32_t waitSemaphoreCount, uint32_t *waitSemaphoreArray, uint64_t *fenceValueArray, uint32_t readGpu, uint32_t writeGpuMask, uint32_t readBuffer, uint32_t writeBuffer, intptr_t readOffset, intptr_t writeOffset, ssize_t size, int32_t signalSemaphoreCount, uint32_t *signalSemaphoreArray, uint64_t *signalValueArray))_func)(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
}
uint32_t gllCall_glAsyncCopyImageSubDataNVX(void *_func, int32_t waitSemaphoreCount, uint32_t *waitSemaphoreArray, uint64_t *waitValueArray, uint32_t srcGpu, uint32_t dstGpuMask, uint32_t srcName, uint32_t srcTarget, int32_t srcLevel, int32_t srcX, int32_t srcY, int32_t srcZ, uint32_t dstName, uint32_t dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t srcWidth, int32_t srcHeight, int32_t srcDepth, int32_t signalSemaphoreCount, uint32_t *signalSemaphoreArray, uint64_t *signalValueArray) {
	return ((uint32_t (*)(int32_t waitSemaphoreCount, uint32_t *waitSemaphoreArray, uint64_t *waitValueArray, uint32_t srcGpu, uint32_t dstGpuMask, uint32_t srcName, uint32_t srcTarget, int32_t srcLevel, int32_t srcX, int32_t srcY, int32_t srcZ, uint32_t dstName, uint32_t dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t srcWidth, int32_t srcHeight, int32_t srcDepth, int32_t signalSemaphoreCount, uint32_t *signalSemaphoreArray, uint64_t *signalValueArray))_func)(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
}
void gllCall_glAsyncMarkerSGIX(void *_func, uint32_t marker) {
	((void (*)(uint32_t marker))_func)(marker);
}
void gllCall_glAttachObjectARB(void *_func, GLhandleARB containerObj, GLhandleARB obj) {
	((void (*)(GLhandleARB containerObj, GLhandleARB obj))_func)(containerObj, obj);
}
void gllCall_glAttachShader(void *_func, uint32_t program, uint32_t shader) {
	((void (*)(uint32_t program, uint32_t shader))_func)(program, shader);
}
void gllCall_glBegin(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glBeginConditionalRender(void *_func, uint32_t id, uint32_t mode) {
	((void (*)(uint32_t id, uint32_t mode))_func)(id, mode);
}
void gllCall_glBeginConditionalRenderNV(void *_func, uint32_t id, uint32_t mode) {
	((void (*)(uint32_t id, uint32_t mode))_func)(id, mode);
}
void gllCall_glBeginConditionalRenderNVX(void *_func, uint32_t id) {
	((void (*)(uint32_t id))_func)(id);
}
void gllCall_glBeginFragmentShaderATI(void *_func) {
	((void (*)())_func)();
}
void gllCall_glBeginOcclusionQueryNV(void *_func, uint32_t id) {
	((void (*)(uint32_t id))_func)(id);
}
void gllCall_glBeginPerfMonitorAMD(void *_func, uint32_t monitor) {
	((void (*)(uint32_t monitor))_func)(monitor);
}
void gllCall_glBeginPerfQueryINTEL(void *_func, uint32_t queryHandle) {
	((void (*)(uint32_t queryHandle))_func)(queryHandle);
}
void gllCall_glBeginQuery(void *_func, uint32_t target, uint32_t id) {
	((void (*)(uint32_t target, uint32_t id))_func)(target, id);
}
void gllCall_glBeginQueryARB(void *_func, uint32_t target, uint32_t id) {
	((void (*)(uint32_t target, uint32_t id))_func)(target, id);
}
void gllCall_glBeginQueryEXT(void *_func, uint32_t target, uint32_t id) {
	((void (*)(uint32_t target, uint32_t id))_func)(target, id);
}
void gllCall_glBeginQueryIndexed(void *_func, uint32_t target, uint32_t index, uint32_t id) {
	((void (*)(uint32_t target, uint32_t index, uint32_t id))_func)(target, index, id);
}
void gllCall_glBeginTransformFeedback(void *_func, uint32_t primitiveMode) {
	((void (*)(uint32_t primitiveMode))_func)(primitiveMode);
}
void gllCall_glBeginTransformFeedbackEXT(void *_func, uint32_t primitiveMode) {
	((void (*)(uint32_t primitiveMode))_func)(primitiveMode);
}
void gllCall_glBeginTransformFeedbackNV(void *_func, uint32_t primitiveMode) {
	((void (*)(uint32_t primitiveMode))_func)(primitiveMode);
}
void gllCall_glBeginVertexShaderEXT(void *_func) {
	((void (*)())_func)();
}
void gllCall_glBeginVideoCaptureNV(void *_func, uint32_t video_capture_slot) {
	((void (*)(uint32_t video_capture_slot))_func)(video_capture_slot);
}
void gllCall_glBindAttribLocation(void *_func, uint32_t program, uint32_t index, uint8_t *name) {
	((void (*)(uint32_t program, uint32_t index, uint8_t *name))_func)(program, index, name);
}
void gllCall_glBindAttribLocationARB(void *_func, GLhandleARB programObj, uint32_t index, uint8_t *name) {
	((void (*)(GLhandleARB programObj, uint32_t index, uint8_t *name))_func)(programObj, index, name);
}
void gllCall_glBindBuffer(void *_func, uint32_t target, uint32_t buffer) {
	((void (*)(uint32_t target, uint32_t buffer))_func)(target, buffer);
}
void gllCall_glBindBufferARB(void *_func, uint32_t target, uint32_t buffer) {
	((void (*)(uint32_t target, uint32_t buffer))_func)(target, buffer);
}
void gllCall_glBindBufferBase(void *_func, uint32_t target, uint32_t index, uint32_t buffer) {
	((void (*)(uint32_t target, uint32_t index, uint32_t buffer))_func)(target, index, buffer);
}
void gllCall_glBindBufferBaseEXT(void *_func, uint32_t target, uint32_t index, uint32_t buffer) {
	((void (*)(uint32_t target, uint32_t index, uint32_t buffer))_func)(target, index, buffer);
}
void gllCall_glBindBufferBaseNV(void *_func, uint32_t target, uint32_t index, uint32_t buffer) {
	((void (*)(uint32_t target, uint32_t index, uint32_t buffer))_func)(target, index, buffer);
}
void gllCall_glBindBufferOffsetEXT(void *_func, uint32_t target, uint32_t index, uint32_t buffer, intptr_t offset) {
	((void (*)(uint32_t target, uint32_t index, uint32_t buffer, intptr_t offset))_func)(target, index, buffer, offset);
}
void gllCall_glBindBufferOffsetNV(void *_func, uint32_t target, uint32_t index, uint32_t buffer, intptr_t offset) {
	((void (*)(uint32_t target, uint32_t index, uint32_t buffer, intptr_t offset))_func)(target, index, buffer, offset);
}
void gllCall_glBindBufferRange(void *_func, uint32_t target, uint32_t index, uint32_t buffer, intptr_t offset, ssize_t size) {
	((void (*)(uint32_t target, uint32_t index, uint32_t buffer, intptr_t offset, ssize_t size))_func)(target, index, buffer, offset, size);
}
void gllCall_glBindBufferRangeEXT(void *_func, uint32_t target, uint32_t index, uint32_t buffer, intptr_t offset, ssize_t size) {
	((void (*)(uint32_t target, uint32_t index, uint32_t buffer, intptr_t offset, ssize_t size))_func)(target, index, buffer, offset, size);
}
void gllCall_glBindBufferRangeNV(void *_func, uint32_t target, uint32_t index, uint32_t buffer, intptr_t offset, ssize_t size) {
	((void (*)(uint32_t target, uint32_t index, uint32_t buffer, intptr_t offset, ssize_t size))_func)(target, index, buffer, offset, size);
}
void gllCall_glBindBuffersBase(void *_func, uint32_t target, uint32_t first, int32_t count, uint32_t *buffers) {
	((void (*)(uint32_t target, uint32_t first, int32_t count, uint32_t *buffers))_func)(target, first, count, buffers);
}
void gllCall_glBindBuffersRange(void *_func, uint32_t target, uint32_t first, int32_t count, uint32_t *buffers, intptr_t *offsets, ssize_t *sizes) {
	((void (*)(uint32_t target, uint32_t first, int32_t count, uint32_t *buffers, intptr_t *offsets, ssize_t *sizes))_func)(target, first, count, buffers, offsets, sizes);
}
void gllCall_glBindFragDataLocation(void *_func, uint32_t program, uint32_t color, uint8_t *name) {
	((void (*)(uint32_t program, uint32_t color, uint8_t *name))_func)(program, color, name);
}
void gllCall_glBindFragDataLocationEXT(void *_func, uint32_t program, uint32_t color, uint8_t *name) {
	((void (*)(uint32_t program, uint32_t color, uint8_t *name))_func)(program, color, name);
}
void gllCall_glBindFragDataLocationIndexed(void *_func, uint32_t program, uint32_t colorNumber, uint32_t index, uint8_t *name) {
	((void (*)(uint32_t program, uint32_t colorNumber, uint32_t index, uint8_t *name))_func)(program, colorNumber, index, name);
}
void gllCall_glBindFragDataLocationIndexedEXT(void *_func, uint32_t program, uint32_t colorNumber, uint32_t index, uint8_t *name) {
	((void (*)(uint32_t program, uint32_t colorNumber, uint32_t index, uint8_t *name))_func)(program, colorNumber, index, name);
}
void gllCall_glBindFragmentShaderATI(void *_func, uint32_t id) {
	((void (*)(uint32_t id))_func)(id);
}
void gllCall_glBindFramebuffer(void *_func, uint32_t target, uint32_t framebuffer) {
	((void (*)(uint32_t target, uint32_t framebuffer))_func)(target, framebuffer);
}
void gllCall_glBindFramebufferEXT(void *_func, uint32_t target, uint32_t framebuffer) {
	((void (*)(uint32_t target, uint32_t framebuffer))_func)(target, framebuffer);
}
void gllCall_glBindFramebufferOES(void *_func, uint32_t target, uint32_t framebuffer) {
	((void (*)(uint32_t target, uint32_t framebuffer))_func)(target, framebuffer);
}
void gllCall_glBindImageTexture(void *_func, uint32_t unit, uint32_t texture, int32_t level, _Bool layered, int32_t layer, uint32_t access, uint32_t format) {
	((void (*)(uint32_t unit, uint32_t texture, int32_t level, _Bool layered, int32_t layer, uint32_t access, uint32_t format))_func)(unit, texture, level, layered, layer, access, format);
}
void gllCall_glBindImageTextureEXT(void *_func, uint32_t index, uint32_t texture, int32_t level, _Bool layered, int32_t layer, uint32_t access, int32_t format) {
	((void (*)(uint32_t index, uint32_t texture, int32_t level, _Bool layered, int32_t layer, uint32_t access, int32_t format))_func)(index, texture, level, layered, layer, access, format);
}
void gllCall_glBindImageTextures(void *_func, uint32_t first, int32_t count, uint32_t *textures) {
	((void (*)(uint32_t first, int32_t count, uint32_t *textures))_func)(first, count, textures);
}
uint32_t gllCall_glBindLightParameterEXT(void *_func, uint32_t light, uint32_t value) {
	return ((uint32_t (*)(uint32_t light, uint32_t value))_func)(light, value);
}
uint32_t gllCall_glBindMaterialParameterEXT(void *_func, uint32_t face, uint32_t value) {
	return ((uint32_t (*)(uint32_t face, uint32_t value))_func)(face, value);
}
void gllCall_glBindMultiTextureEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t texture) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t texture))_func)(texunit, target, texture);
}
uint32_t gllCall_glBindParameterEXT(void *_func, uint32_t value) {
	return ((uint32_t (*)(uint32_t value))_func)(value);
}
void gllCall_glBindProgramARB(void *_func, uint32_t target, uint32_t program) {
	((void (*)(uint32_t target, uint32_t program))_func)(target, program);
}
void gllCall_glBindProgramNV(void *_func, uint32_t target, uint32_t id) {
	((void (*)(uint32_t target, uint32_t id))_func)(target, id);
}
void gllCall_glBindProgramPipeline(void *_func, uint32_t pipeline) {
	((void (*)(uint32_t pipeline))_func)(pipeline);
}
void gllCall_glBindProgramPipelineEXT(void *_func, uint32_t pipeline) {
	((void (*)(uint32_t pipeline))_func)(pipeline);
}
void gllCall_glBindRenderbuffer(void *_func, uint32_t target, uint32_t renderbuffer) {
	((void (*)(uint32_t target, uint32_t renderbuffer))_func)(target, renderbuffer);
}
void gllCall_glBindRenderbufferEXT(void *_func, uint32_t target, uint32_t renderbuffer) {
	((void (*)(uint32_t target, uint32_t renderbuffer))_func)(target, renderbuffer);
}
void gllCall_glBindRenderbufferOES(void *_func, uint32_t target, uint32_t renderbuffer) {
	((void (*)(uint32_t target, uint32_t renderbuffer))_func)(target, renderbuffer);
}
void gllCall_glBindSampler(void *_func, uint32_t unit, uint32_t sampler) {
	((void (*)(uint32_t unit, uint32_t sampler))_func)(unit, sampler);
}
void gllCall_glBindSamplers(void *_func, uint32_t first, int32_t count, uint32_t *samplers) {
	((void (*)(uint32_t first, int32_t count, uint32_t *samplers))_func)(first, count, samplers);
}
void gllCall_glBindShadingRateImageNV(void *_func, uint32_t texture) {
	((void (*)(uint32_t texture))_func)(texture);
}
uint32_t gllCall_glBindTexGenParameterEXT(void *_func, uint32_t unit, uint32_t coord, uint32_t value) {
	return ((uint32_t (*)(uint32_t unit, uint32_t coord, uint32_t value))_func)(unit, coord, value);
}
void gllCall_glBindTexture(void *_func, uint32_t target, uint32_t texture) {
	((void (*)(uint32_t target, uint32_t texture))_func)(target, texture);
}
void gllCall_glBindTextureEXT(void *_func, uint32_t target, uint32_t texture) {
	((void (*)(uint32_t target, uint32_t texture))_func)(target, texture);
}
void gllCall_glBindTextureUnit(void *_func, uint32_t unit, uint32_t texture) {
	((void (*)(uint32_t unit, uint32_t texture))_func)(unit, texture);
}
uint32_t gllCall_glBindTextureUnitParameterEXT(void *_func, uint32_t unit, uint32_t value) {
	return ((uint32_t (*)(uint32_t unit, uint32_t value))_func)(unit, value);
}
void gllCall_glBindTextures(void *_func, uint32_t first, int32_t count, uint32_t *textures) {
	((void (*)(uint32_t first, int32_t count, uint32_t *textures))_func)(first, count, textures);
}
void gllCall_glBindTransformFeedback(void *_func, uint32_t target, uint32_t id) {
	((void (*)(uint32_t target, uint32_t id))_func)(target, id);
}
void gllCall_glBindTransformFeedbackNV(void *_func, uint32_t target, uint32_t id) {
	((void (*)(uint32_t target, uint32_t id))_func)(target, id);
}
void gllCall_glBindVertexArray(void *_func, uint32_t array) {
	((void (*)(uint32_t array))_func)(array);
}
void gllCall_glBindVertexArrayAPPLE(void *_func, uint32_t array) {
	((void (*)(uint32_t array))_func)(array);
}
void gllCall_glBindVertexArrayOES(void *_func, uint32_t array) {
	((void (*)(uint32_t array))_func)(array);
}
void gllCall_glBindVertexBuffer(void *_func, uint32_t bindingindex, uint32_t buffer, intptr_t offset, int32_t stride) {
	((void (*)(uint32_t bindingindex, uint32_t buffer, intptr_t offset, int32_t stride))_func)(bindingindex, buffer, offset, stride);
}
void gllCall_glBindVertexBuffers(void *_func, uint32_t first, int32_t count, uint32_t *buffers, intptr_t *offsets, int32_t *strides) {
	((void (*)(uint32_t first, int32_t count, uint32_t *buffers, intptr_t *offsets, int32_t *strides))_func)(first, count, buffers, offsets, strides);
}
void gllCall_glBindVertexShaderEXT(void *_func, uint32_t id) {
	((void (*)(uint32_t id))_func)(id);
}
void gllCall_glBindVideoCaptureStreamBufferNV(void *_func, uint32_t video_capture_slot, uint32_t stream, uint32_t frame_region, intptr_t offset) {
	((void (*)(uint32_t video_capture_slot, uint32_t stream, uint32_t frame_region, intptr_t offset))_func)(video_capture_slot, stream, frame_region, offset);
}
void gllCall_glBindVideoCaptureStreamTextureNV(void *_func, uint32_t video_capture_slot, uint32_t stream, uint32_t frame_region, uint32_t target, uint32_t texture) {
	((void (*)(uint32_t video_capture_slot, uint32_t stream, uint32_t frame_region, uint32_t target, uint32_t texture))_func)(video_capture_slot, stream, frame_region, target, texture);
}
void gllCall_glBinormal3bEXT(void *_func, int8_t bx, int8_t by, int8_t bz) {
	((void (*)(int8_t bx, int8_t by, int8_t bz))_func)(bx, by, bz);
}
void gllCall_glBinormal3bvEXT(void *_func, int8_t *v) {
	((void (*)(int8_t *v))_func)(v);
}
void gllCall_glBinormal3dEXT(void *_func, double bx, double by, double bz) {
	((void (*)(double bx, double by, double bz))_func)(bx, by, bz);
}
void gllCall_glBinormal3dvEXT(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glBinormal3fEXT(void *_func, float bx, float by, float bz) {
	((void (*)(float bx, float by, float bz))_func)(bx, by, bz);
}
void gllCall_glBinormal3fvEXT(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glBinormal3iEXT(void *_func, int32_t bx, int32_t by, int32_t bz) {
	((void (*)(int32_t bx, int32_t by, int32_t bz))_func)(bx, by, bz);
}
void gllCall_glBinormal3ivEXT(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glBinormal3sEXT(void *_func, int16_t bx, int16_t by, int16_t bz) {
	((void (*)(int16_t bx, int16_t by, int16_t bz))_func)(bx, by, bz);
}
void gllCall_glBinormal3svEXT(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glBinormalPointerEXT(void *_func, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(uint32_t type, int32_t stride, void *pointer))_func)(type, stride, pointer);
}
void gllCall_glBitmap(void *_func, int32_t width, int32_t height, float xorig, float yorig, float xmove, float ymove, uint8_t *bitmap) {
	((void (*)(int32_t width, int32_t height, float xorig, float yorig, float xmove, float ymove, uint8_t *bitmap))_func)(width, height, xorig, yorig, xmove, ymove, bitmap);
}
void gllCall_glBitmapxOES(void *_func, int32_t width, int32_t height, int32_t xorig, int32_t yorig, int32_t xmove, int32_t ymove, uint8_t *bitmap) {
	((void (*)(int32_t width, int32_t height, int32_t xorig, int32_t yorig, int32_t xmove, int32_t ymove, uint8_t *bitmap))_func)(width, height, xorig, yorig, xmove, ymove, bitmap);
}
void gllCall_glBlendBarrier(void *_func) {
	((void (*)())_func)();
}
void gllCall_glBlendBarrierKHR(void *_func) {
	((void (*)())_func)();
}
void gllCall_glBlendBarrierNV(void *_func) {
	((void (*)())_func)();
}
void gllCall_glBlendColor(void *_func, float red, float green, float blue, float alpha) {
	((void (*)(float red, float green, float blue, float alpha))_func)(red, green, blue, alpha);
}
void gllCall_glBlendColorEXT(void *_func, float red, float green, float blue, float alpha) {
	((void (*)(float red, float green, float blue, float alpha))_func)(red, green, blue, alpha);
}
void gllCall_glBlendColorxOES(void *_func, int32_t red, int32_t green, int32_t blue, int32_t alpha) {
	((void (*)(int32_t red, int32_t green, int32_t blue, int32_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glBlendEquation(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glBlendEquationEXT(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glBlendEquationIndexedAMD(void *_func, uint32_t buf, uint32_t mode) {
	((void (*)(uint32_t buf, uint32_t mode))_func)(buf, mode);
}
void gllCall_glBlendEquationOES(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glBlendEquationSeparate(void *_func, uint32_t modeRGB, uint32_t modeAlpha) {
	((void (*)(uint32_t modeRGB, uint32_t modeAlpha))_func)(modeRGB, modeAlpha);
}
void gllCall_glBlendEquationSeparateEXT(void *_func, uint32_t modeRGB, uint32_t modeAlpha) {
	((void (*)(uint32_t modeRGB, uint32_t modeAlpha))_func)(modeRGB, modeAlpha);
}
void gllCall_glBlendEquationSeparateIndexedAMD(void *_func, uint32_t buf, uint32_t modeRGB, uint32_t modeAlpha) {
	((void (*)(uint32_t buf, uint32_t modeRGB, uint32_t modeAlpha))_func)(buf, modeRGB, modeAlpha);
}
void gllCall_glBlendEquationSeparateOES(void *_func, uint32_t modeRGB, uint32_t modeAlpha) {
	((void (*)(uint32_t modeRGB, uint32_t modeAlpha))_func)(modeRGB, modeAlpha);
}
void gllCall_glBlendEquationSeparatei(void *_func, uint32_t buf, uint32_t modeRGB, uint32_t modeAlpha) {
	((void (*)(uint32_t buf, uint32_t modeRGB, uint32_t modeAlpha))_func)(buf, modeRGB, modeAlpha);
}
void gllCall_glBlendEquationSeparateiARB(void *_func, uint32_t buf, uint32_t modeRGB, uint32_t modeAlpha) {
	((void (*)(uint32_t buf, uint32_t modeRGB, uint32_t modeAlpha))_func)(buf, modeRGB, modeAlpha);
}
void gllCall_glBlendEquationSeparateiEXT(void *_func, uint32_t buf, uint32_t modeRGB, uint32_t modeAlpha) {
	((void (*)(uint32_t buf, uint32_t modeRGB, uint32_t modeAlpha))_func)(buf, modeRGB, modeAlpha);
}
void gllCall_glBlendEquationSeparateiOES(void *_func, uint32_t buf, uint32_t modeRGB, uint32_t modeAlpha) {
	((void (*)(uint32_t buf, uint32_t modeRGB, uint32_t modeAlpha))_func)(buf, modeRGB, modeAlpha);
}
void gllCall_glBlendEquationi(void *_func, uint32_t buf, uint32_t mode) {
	((void (*)(uint32_t buf, uint32_t mode))_func)(buf, mode);
}
void gllCall_glBlendEquationiARB(void *_func, uint32_t buf, uint32_t mode) {
	((void (*)(uint32_t buf, uint32_t mode))_func)(buf, mode);
}
void gllCall_glBlendEquationiEXT(void *_func, uint32_t buf, uint32_t mode) {
	((void (*)(uint32_t buf, uint32_t mode))_func)(buf, mode);
}
void gllCall_glBlendEquationiOES(void *_func, uint32_t buf, uint32_t mode) {
	((void (*)(uint32_t buf, uint32_t mode))_func)(buf, mode);
}
void gllCall_glBlendFunc(void *_func, uint32_t sfactor, uint32_t dfactor) {
	((void (*)(uint32_t sfactor, uint32_t dfactor))_func)(sfactor, dfactor);
}
void gllCall_glBlendFuncIndexedAMD(void *_func, uint32_t buf, uint32_t src, uint32_t dst) {
	((void (*)(uint32_t buf, uint32_t src, uint32_t dst))_func)(buf, src, dst);
}
void gllCall_glBlendFuncSeparate(void *_func, uint32_t sfactorRGB, uint32_t dfactorRGB, uint32_t sfactorAlpha, uint32_t dfactorAlpha) {
	((void (*)(uint32_t sfactorRGB, uint32_t dfactorRGB, uint32_t sfactorAlpha, uint32_t dfactorAlpha))_func)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
void gllCall_glBlendFuncSeparateEXT(void *_func, uint32_t sfactorRGB, uint32_t dfactorRGB, uint32_t sfactorAlpha, uint32_t dfactorAlpha) {
	((void (*)(uint32_t sfactorRGB, uint32_t dfactorRGB, uint32_t sfactorAlpha, uint32_t dfactorAlpha))_func)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
void gllCall_glBlendFuncSeparateINGR(void *_func, uint32_t sfactorRGB, uint32_t dfactorRGB, uint32_t sfactorAlpha, uint32_t dfactorAlpha) {
	((void (*)(uint32_t sfactorRGB, uint32_t dfactorRGB, uint32_t sfactorAlpha, uint32_t dfactorAlpha))_func)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
void gllCall_glBlendFuncSeparateIndexedAMD(void *_func, uint32_t buf, uint32_t srcRGB, uint32_t dstRGB, uint32_t srcAlpha, uint32_t dstAlpha) {
	((void (*)(uint32_t buf, uint32_t srcRGB, uint32_t dstRGB, uint32_t srcAlpha, uint32_t dstAlpha))_func)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
void gllCall_glBlendFuncSeparateOES(void *_func, uint32_t srcRGB, uint32_t dstRGB, uint32_t srcAlpha, uint32_t dstAlpha) {
	((void (*)(uint32_t srcRGB, uint32_t dstRGB, uint32_t srcAlpha, uint32_t dstAlpha))_func)(srcRGB, dstRGB, srcAlpha, dstAlpha);
}
void gllCall_glBlendFuncSeparatei(void *_func, uint32_t buf, uint32_t srcRGB, uint32_t dstRGB, uint32_t srcAlpha, uint32_t dstAlpha) {
	((void (*)(uint32_t buf, uint32_t srcRGB, uint32_t dstRGB, uint32_t srcAlpha, uint32_t dstAlpha))_func)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
void gllCall_glBlendFuncSeparateiARB(void *_func, uint32_t buf, uint32_t srcRGB, uint32_t dstRGB, uint32_t srcAlpha, uint32_t dstAlpha) {
	((void (*)(uint32_t buf, uint32_t srcRGB, uint32_t dstRGB, uint32_t srcAlpha, uint32_t dstAlpha))_func)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
void gllCall_glBlendFuncSeparateiEXT(void *_func, uint32_t buf, uint32_t srcRGB, uint32_t dstRGB, uint32_t srcAlpha, uint32_t dstAlpha) {
	((void (*)(uint32_t buf, uint32_t srcRGB, uint32_t dstRGB, uint32_t srcAlpha, uint32_t dstAlpha))_func)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
void gllCall_glBlendFuncSeparateiOES(void *_func, uint32_t buf, uint32_t srcRGB, uint32_t dstRGB, uint32_t srcAlpha, uint32_t dstAlpha) {
	((void (*)(uint32_t buf, uint32_t srcRGB, uint32_t dstRGB, uint32_t srcAlpha, uint32_t dstAlpha))_func)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
void gllCall_glBlendFunci(void *_func, uint32_t buf, uint32_t src, uint32_t dst) {
	((void (*)(uint32_t buf, uint32_t src, uint32_t dst))_func)(buf, src, dst);
}
void gllCall_glBlendFunciARB(void *_func, uint32_t buf, uint32_t src, uint32_t dst) {
	((void (*)(uint32_t buf, uint32_t src, uint32_t dst))_func)(buf, src, dst);
}
void gllCall_glBlendFunciEXT(void *_func, uint32_t buf, uint32_t src, uint32_t dst) {
	((void (*)(uint32_t buf, uint32_t src, uint32_t dst))_func)(buf, src, dst);
}
void gllCall_glBlendFunciOES(void *_func, uint32_t buf, uint32_t src, uint32_t dst) {
	((void (*)(uint32_t buf, uint32_t src, uint32_t dst))_func)(buf, src, dst);
}
void gllCall_glBlendParameteriNV(void *_func, uint32_t pname, int32_t value) {
	((void (*)(uint32_t pname, int32_t value))_func)(pname, value);
}
void gllCall_glBlitFramebuffer(void *_func, int32_t srcX0, int32_t srcY0, int32_t srcX1, int32_t srcY1, int32_t dstX0, int32_t dstY0, int32_t dstX1, int32_t dstY1, uint32_t mask, uint32_t filter) {
	((void (*)(int32_t srcX0, int32_t srcY0, int32_t srcX1, int32_t srcY1, int32_t dstX0, int32_t dstY0, int32_t dstX1, int32_t dstY1, uint32_t mask, uint32_t filter))_func)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
void gllCall_glBlitFramebufferANGLE(void *_func, int32_t srcX0, int32_t srcY0, int32_t srcX1, int32_t srcY1, int32_t dstX0, int32_t dstY0, int32_t dstX1, int32_t dstY1, uint32_t mask, uint32_t filter) {
	((void (*)(int32_t srcX0, int32_t srcY0, int32_t srcX1, int32_t srcY1, int32_t dstX0, int32_t dstY0, int32_t dstX1, int32_t dstY1, uint32_t mask, uint32_t filter))_func)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
void gllCall_glBlitFramebufferEXT(void *_func, int32_t srcX0, int32_t srcY0, int32_t srcX1, int32_t srcY1, int32_t dstX0, int32_t dstY0, int32_t dstX1, int32_t dstY1, uint32_t mask, uint32_t filter) {
	((void (*)(int32_t srcX0, int32_t srcY0, int32_t srcX1, int32_t srcY1, int32_t dstX0, int32_t dstY0, int32_t dstX1, int32_t dstY1, uint32_t mask, uint32_t filter))_func)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
void gllCall_glBlitFramebufferNV(void *_func, int32_t srcX0, int32_t srcY0, int32_t srcX1, int32_t srcY1, int32_t dstX0, int32_t dstY0, int32_t dstX1, int32_t dstY1, uint32_t mask, uint32_t filter) {
	((void (*)(int32_t srcX0, int32_t srcY0, int32_t srcX1, int32_t srcY1, int32_t dstX0, int32_t dstY0, int32_t dstX1, int32_t dstY1, uint32_t mask, uint32_t filter))_func)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
void gllCall_glBlitNamedFramebuffer(void *_func, uint32_t readFramebuffer, uint32_t drawFramebuffer, int32_t srcX0, int32_t srcY0, int32_t srcX1, int32_t srcY1, int32_t dstX0, int32_t dstY0, int32_t dstX1, int32_t dstY1, uint32_t mask, uint32_t filter) {
	((void (*)(uint32_t readFramebuffer, uint32_t drawFramebuffer, int32_t srcX0, int32_t srcY0, int32_t srcX1, int32_t srcY1, int32_t dstX0, int32_t dstY0, int32_t dstX1, int32_t dstY1, uint32_t mask, uint32_t filter))_func)(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
void gllCall_glBufferAddressRangeNV(void *_func, uint32_t pname, uint32_t index, uint64_t address, ssize_t length) {
	((void (*)(uint32_t pname, uint32_t index, uint64_t address, ssize_t length))_func)(pname, index, address, length);
}
void gllCall_glBufferAttachMemoryNV(void *_func, uint32_t target, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t target, uint32_t memory, uint64_t offset))_func)(target, memory, offset);
}
void gllCall_glBufferData(void *_func, uint32_t target, ssize_t size, void *data, uint32_t usage) {
	((void (*)(uint32_t target, ssize_t size, void *data, uint32_t usage))_func)(target, size, data, usage);
}
void gllCall_glBufferDataARB(void *_func, uint32_t target, ssize_t size, void *data, uint32_t usage) {
	((void (*)(uint32_t target, ssize_t size, void *data, uint32_t usage))_func)(target, size, data, usage);
}
void gllCall_glBufferPageCommitmentARB(void *_func, uint32_t target, intptr_t offset, ssize_t size, _Bool commit) {
	((void (*)(uint32_t target, intptr_t offset, ssize_t size, _Bool commit))_func)(target, offset, size, commit);
}
void gllCall_glBufferPageCommitmentMemNV(void *_func, uint32_t target, intptr_t offset, ssize_t size, uint32_t memory, uint64_t memOffset, _Bool commit) {
	((void (*)(uint32_t target, intptr_t offset, ssize_t size, uint32_t memory, uint64_t memOffset, _Bool commit))_func)(target, offset, size, memory, memOffset, commit);
}
void gllCall_glBufferParameteriAPPLE(void *_func, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t target, uint32_t pname, int32_t param))_func)(target, pname, param);
}
void gllCall_glBufferStorage(void *_func, uint32_t target, ssize_t size, void *data, uint32_t flags) {
	((void (*)(uint32_t target, ssize_t size, void *data, uint32_t flags))_func)(target, size, data, flags);
}
void gllCall_glBufferStorageEXT(void *_func, uint32_t target, ssize_t size, void *data, uint32_t flags) {
	((void (*)(uint32_t target, ssize_t size, void *data, uint32_t flags))_func)(target, size, data, flags);
}
void gllCall_glBufferStorageMemEXT(void *_func, uint32_t target, ssize_t size, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t target, ssize_t size, uint32_t memory, uint64_t offset))_func)(target, size, memory, offset);
}
void gllCall_glBufferSubData(void *_func, uint32_t target, intptr_t offset, ssize_t size, void *data) {
	((void (*)(uint32_t target, intptr_t offset, ssize_t size, void *data))_func)(target, offset, size, data);
}
void gllCall_glBufferSubDataARB(void *_func, uint32_t target, intptr_t offset, ssize_t size, void *data) {
	((void (*)(uint32_t target, intptr_t offset, ssize_t size, void *data))_func)(target, offset, size, data);
}
void gllCall_glCallCommandListNV(void *_func, uint32_t list) {
	((void (*)(uint32_t list))_func)(list);
}
void gllCall_glCallList(void *_func, uint32_t list) {
	((void (*)(uint32_t list))_func)(list);
}
void gllCall_glCallLists(void *_func, int32_t n, uint32_t type, void *lists) {
	((void (*)(int32_t n, uint32_t type, void *lists))_func)(n, type, lists);
}
uint32_t gllCall_glCheckFramebufferStatus(void *_func, uint32_t target) {
	return ((uint32_t (*)(uint32_t target))_func)(target);
}
uint32_t gllCall_glCheckFramebufferStatusEXT(void *_func, uint32_t target) {
	return ((uint32_t (*)(uint32_t target))_func)(target);
}
uint32_t gllCall_glCheckFramebufferStatusOES(void *_func, uint32_t target) {
	return ((uint32_t (*)(uint32_t target))_func)(target);
}
uint32_t gllCall_glCheckNamedFramebufferStatus(void *_func, uint32_t framebuffer, uint32_t target) {
	return ((uint32_t (*)(uint32_t framebuffer, uint32_t target))_func)(framebuffer, target);
}
uint32_t gllCall_glCheckNamedFramebufferStatusEXT(void *_func, uint32_t framebuffer, uint32_t target) {
	return ((uint32_t (*)(uint32_t framebuffer, uint32_t target))_func)(framebuffer, target);
}
void gllCall_glClampColor(void *_func, uint32_t target, uint32_t clamp) {
	((void (*)(uint32_t target, uint32_t clamp))_func)(target, clamp);
}
void gllCall_glClampColorARB(void *_func, uint32_t target, uint32_t clamp) {
	((void (*)(uint32_t target, uint32_t clamp))_func)(target, clamp);
}
void gllCall_glClear(void *_func, uint32_t mask) {
	((void (*)(uint32_t mask))_func)(mask);
}
void gllCall_glClearAccum(void *_func, float red, float green, float blue, float alpha) {
	((void (*)(float red, float green, float blue, float alpha))_func)(red, green, blue, alpha);
}
void gllCall_glClearAccumxOES(void *_func, int32_t red, int32_t green, int32_t blue, int32_t alpha) {
	((void (*)(int32_t red, int32_t green, int32_t blue, int32_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glClearBufferData(void *_func, uint32_t target, uint32_t internalformat, uint32_t format, uint32_t type, void *data) {
	((void (*)(uint32_t target, uint32_t internalformat, uint32_t format, uint32_t type, void *data))_func)(target, internalformat, format, type, data);
}
void gllCall_glClearBufferSubData(void *_func, uint32_t target, uint32_t internalformat, intptr_t offset, ssize_t size, uint32_t format, uint32_t type, void *data) {
	((void (*)(uint32_t target, uint32_t internalformat, intptr_t offset, ssize_t size, uint32_t format, uint32_t type, void *data))_func)(target, internalformat, offset, size, format, type, data);
}
void gllCall_glClearBufferfi(void *_func, uint32_t buffer, int32_t drawbuffer, float depth, int32_t stencil) {
	((void (*)(uint32_t buffer, int32_t drawbuffer, float depth, int32_t stencil))_func)(buffer, drawbuffer, depth, stencil);
}
void gllCall_glClearBufferfv(void *_func, uint32_t buffer, int32_t drawbuffer, float *value) {
	((void (*)(uint32_t buffer, int32_t drawbuffer, float *value))_func)(buffer, drawbuffer, value);
}
void gllCall_glClearBufferiv(void *_func, uint32_t buffer, int32_t drawbuffer, int32_t *value) {
	((void (*)(uint32_t buffer, int32_t drawbuffer, int32_t *value))_func)(buffer, drawbuffer, value);
}
void gllCall_glClearBufferuiv(void *_func, uint32_t buffer, int32_t drawbuffer, uint32_t *value) {
	((void (*)(uint32_t buffer, int32_t drawbuffer, uint32_t *value))_func)(buffer, drawbuffer, value);
}
void gllCall_glClearColor(void *_func, float red, float green, float blue, float alpha) {
	((void (*)(float red, float green, float blue, float alpha))_func)(red, green, blue, alpha);
}
void gllCall_glClearColorIiEXT(void *_func, int32_t red, int32_t green, int32_t blue, int32_t alpha) {
	((void (*)(int32_t red, int32_t green, int32_t blue, int32_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glClearColorIuiEXT(void *_func, uint32_t red, uint32_t green, uint32_t blue, uint32_t alpha) {
	((void (*)(uint32_t red, uint32_t green, uint32_t blue, uint32_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glClearColorx(void *_func, int32_t red, int32_t green, int32_t blue, int32_t alpha) {
	((void (*)(int32_t red, int32_t green, int32_t blue, int32_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glClearColorxOES(void *_func, int32_t red, int32_t green, int32_t blue, int32_t alpha) {
	((void (*)(int32_t red, int32_t green, int32_t blue, int32_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glClearDepth(void *_func, double depth) {
	((void (*)(double depth))_func)(depth);
}
void gllCall_glClearDepthdNV(void *_func, double depth) {
	((void (*)(double depth))_func)(depth);
}
void gllCall_glClearDepthf(void *_func, float d) {
	((void (*)(float d))_func)(d);
}
void gllCall_glClearDepthfOES(void *_func, float depth) {
	((void (*)(float depth))_func)(depth);
}
void gllCall_glClearDepthx(void *_func, int32_t depth) {
	((void (*)(int32_t depth))_func)(depth);
}
void gllCall_glClearDepthxOES(void *_func, int32_t depth) {
	((void (*)(int32_t depth))_func)(depth);
}
void gllCall_glClearIndex(void *_func, float c) {
	((void (*)(float c))_func)(c);
}
void gllCall_glClearNamedBufferData(void *_func, uint32_t buffer, uint32_t internalformat, uint32_t format, uint32_t type, void *data) {
	((void (*)(uint32_t buffer, uint32_t internalformat, uint32_t format, uint32_t type, void *data))_func)(buffer, internalformat, format, type, data);
}
void gllCall_glClearNamedBufferDataEXT(void *_func, uint32_t buffer, uint32_t internalformat, uint32_t format, uint32_t type, void *data) {
	((void (*)(uint32_t buffer, uint32_t internalformat, uint32_t format, uint32_t type, void *data))_func)(buffer, internalformat, format, type, data);
}
void gllCall_glClearNamedBufferSubData(void *_func, uint32_t buffer, uint32_t internalformat, intptr_t offset, ssize_t size, uint32_t format, uint32_t type, void *data) {
	((void (*)(uint32_t buffer, uint32_t internalformat, intptr_t offset, ssize_t size, uint32_t format, uint32_t type, void *data))_func)(buffer, internalformat, offset, size, format, type, data);
}
void gllCall_glClearNamedBufferSubDataEXT(void *_func, uint32_t buffer, uint32_t internalformat, ssize_t offset, ssize_t size, uint32_t format, uint32_t type, void *data) {
	((void (*)(uint32_t buffer, uint32_t internalformat, ssize_t offset, ssize_t size, uint32_t format, uint32_t type, void *data))_func)(buffer, internalformat, offset, size, format, type, data);
}
void gllCall_glClearNamedFramebufferfi(void *_func, uint32_t framebuffer, uint32_t buffer, int32_t drawbuffer, float depth, int32_t stencil) {
	((void (*)(uint32_t framebuffer, uint32_t buffer, int32_t drawbuffer, float depth, int32_t stencil))_func)(framebuffer, buffer, drawbuffer, depth, stencil);
}
void gllCall_glClearNamedFramebufferfv(void *_func, uint32_t framebuffer, uint32_t buffer, int32_t drawbuffer, float *value) {
	((void (*)(uint32_t framebuffer, uint32_t buffer, int32_t drawbuffer, float *value))_func)(framebuffer, buffer, drawbuffer, value);
}
void gllCall_glClearNamedFramebufferiv(void *_func, uint32_t framebuffer, uint32_t buffer, int32_t drawbuffer, int32_t *value) {
	((void (*)(uint32_t framebuffer, uint32_t buffer, int32_t drawbuffer, int32_t *value))_func)(framebuffer, buffer, drawbuffer, value);
}
void gllCall_glClearNamedFramebufferuiv(void *_func, uint32_t framebuffer, uint32_t buffer, int32_t drawbuffer, uint32_t *value) {
	((void (*)(uint32_t framebuffer, uint32_t buffer, int32_t drawbuffer, uint32_t *value))_func)(framebuffer, buffer, drawbuffer, value);
}
void gllCall_glClearPixelLocalStorageuiEXT(void *_func, int32_t offset, int32_t n, uint32_t *values) {
	((void (*)(int32_t offset, int32_t n, uint32_t *values))_func)(offset, n, values);
}
void gllCall_glClearStencil(void *_func, int32_t s) {
	((void (*)(int32_t s))_func)(s);
}
void gllCall_glClearTexImage(void *_func, uint32_t texture, int32_t level, uint32_t format, uint32_t type, void *data) {
	((void (*)(uint32_t texture, int32_t level, uint32_t format, uint32_t type, void *data))_func)(texture, level, format, type, data);
}
void gllCall_glClearTexImageEXT(void *_func, uint32_t texture, int32_t level, uint32_t format, uint32_t type, void *data) {
	((void (*)(uint32_t texture, int32_t level, uint32_t format, uint32_t type, void *data))_func)(texture, level, format, type, data);
}
void gllCall_glClearTexSubImage(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *data) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *data))_func)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}
void gllCall_glClearTexSubImageEXT(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *data) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *data))_func)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}
void gllCall_glClientActiveTexture(void *_func, uint32_t texture) {
	((void (*)(uint32_t texture))_func)(texture);
}
void gllCall_glClientActiveTextureARB(void *_func, uint32_t texture) {
	((void (*)(uint32_t texture))_func)(texture);
}
void gllCall_glClientActiveVertexStreamATI(void *_func, uint32_t stream) {
	((void (*)(uint32_t stream))_func)(stream);
}
void gllCall_glClientAttribDefaultEXT(void *_func, uint32_t mask) {
	((void (*)(uint32_t mask))_func)(mask);
}
void gllCall_glClientWaitSemaphoreui64NVX(void *_func, int32_t fenceObjectCount, uint32_t *semaphoreArray, uint64_t *fenceValueArray) {
	((void (*)(int32_t fenceObjectCount, uint32_t *semaphoreArray, uint64_t *fenceValueArray))_func)(fenceObjectCount, semaphoreArray, fenceValueArray);
}
uint32_t gllCall_glClientWaitSync(void *_func, GLsync sync, uint32_t flags, uint64_t timeout) {
	return ((uint32_t (*)(GLsync sync, uint32_t flags, uint64_t timeout))_func)(sync, flags, timeout);
}
uint32_t gllCall_glClientWaitSyncAPPLE(void *_func, GLsync sync, uint32_t flags, uint64_t timeout) {
	return ((uint32_t (*)(GLsync sync, uint32_t flags, uint64_t timeout))_func)(sync, flags, timeout);
}
void gllCall_glClipControl(void *_func, uint32_t origin, uint32_t depth) {
	((void (*)(uint32_t origin, uint32_t depth))_func)(origin, depth);
}
void gllCall_glClipControlEXT(void *_func, uint32_t origin, uint32_t depth) {
	((void (*)(uint32_t origin, uint32_t depth))_func)(origin, depth);
}
void gllCall_glClipPlane(void *_func, uint32_t plane, double *equation) {
	((void (*)(uint32_t plane, double *equation))_func)(plane, equation);
}
void gllCall_glClipPlanef(void *_func, uint32_t p, float *eqn) {
	((void (*)(uint32_t p, float *eqn))_func)(p, eqn);
}
void gllCall_glClipPlanefIMG(void *_func, uint32_t p, float *eqn) {
	((void (*)(uint32_t p, float *eqn))_func)(p, eqn);
}
void gllCall_glClipPlanefOES(void *_func, uint32_t plane, float *equation) {
	((void (*)(uint32_t plane, float *equation))_func)(plane, equation);
}
void gllCall_glClipPlanex(void *_func, uint32_t plane, int32_t *equation) {
	((void (*)(uint32_t plane, int32_t *equation))_func)(plane, equation);
}
void gllCall_glClipPlanexIMG(void *_func, uint32_t p, int32_t *eqn) {
	((void (*)(uint32_t p, int32_t *eqn))_func)(p, eqn);
}
void gllCall_glClipPlanexOES(void *_func, uint32_t plane, int32_t *equation) {
	((void (*)(uint32_t plane, int32_t *equation))_func)(plane, equation);
}
void gllCall_glColor3b(void *_func, int8_t red, int8_t green, int8_t blue) {
	((void (*)(int8_t red, int8_t green, int8_t blue))_func)(red, green, blue);
}
void gllCall_glColor3bv(void *_func, int8_t *v) {
	((void (*)(int8_t *v))_func)(v);
}
void gllCall_glColor3d(void *_func, double red, double green, double blue) {
	((void (*)(double red, double green, double blue))_func)(red, green, blue);
}
void gllCall_glColor3dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glColor3f(void *_func, float red, float green, float blue) {
	((void (*)(float red, float green, float blue))_func)(red, green, blue);
}
void gllCall_glColor3fVertex3fSUN(void *_func, float r, float g, float b, float x, float y, float z) {
	((void (*)(float r, float g, float b, float x, float y, float z))_func)(r, g, b, x, y, z);
}
void gllCall_glColor3fVertex3fvSUN(void *_func, float *c, float *v) {
	((void (*)(float *c, float *v))_func)(c, v);
}
void gllCall_glColor3fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glColor3hNV(void *_func, uint16_t red, uint16_t green, uint16_t blue) {
	((void (*)(uint16_t red, uint16_t green, uint16_t blue))_func)(red, green, blue);
}
void gllCall_glColor3hvNV(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glColor3i(void *_func, int32_t red, int32_t green, int32_t blue) {
	((void (*)(int32_t red, int32_t green, int32_t blue))_func)(red, green, blue);
}
void gllCall_glColor3iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glColor3s(void *_func, int16_t red, int16_t green, int16_t blue) {
	((void (*)(int16_t red, int16_t green, int16_t blue))_func)(red, green, blue);
}
void gllCall_glColor3sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glColor3ub(void *_func, uint8_t red, uint8_t green, uint8_t blue) {
	((void (*)(uint8_t red, uint8_t green, uint8_t blue))_func)(red, green, blue);
}
void gllCall_glColor3ubv(void *_func, uint8_t *v) {
	((void (*)(uint8_t *v))_func)(v);
}
void gllCall_glColor3ui(void *_func, uint32_t red, uint32_t green, uint32_t blue) {
	((void (*)(uint32_t red, uint32_t green, uint32_t blue))_func)(red, green, blue);
}
void gllCall_glColor3uiv(void *_func, uint32_t *v) {
	((void (*)(uint32_t *v))_func)(v);
}
void gllCall_glColor3us(void *_func, uint16_t red, uint16_t green, uint16_t blue) {
	((void (*)(uint16_t red, uint16_t green, uint16_t blue))_func)(red, green, blue);
}
void gllCall_glColor3usv(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glColor3xOES(void *_func, int32_t red, int32_t green, int32_t blue) {
	((void (*)(int32_t red, int32_t green, int32_t blue))_func)(red, green, blue);
}
void gllCall_glColor3xvOES(void *_func, int32_t *components) {
	((void (*)(int32_t *components))_func)(components);
}
void gllCall_glColor4b(void *_func, int8_t red, int8_t green, int8_t blue, int8_t alpha) {
	((void (*)(int8_t red, int8_t green, int8_t blue, int8_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glColor4bv(void *_func, int8_t *v) {
	((void (*)(int8_t *v))_func)(v);
}
void gllCall_glColor4d(void *_func, double red, double green, double blue, double alpha) {
	((void (*)(double red, double green, double blue, double alpha))_func)(red, green, blue, alpha);
}
void gllCall_glColor4dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glColor4f(void *_func, float red, float green, float blue, float alpha) {
	((void (*)(float red, float green, float blue, float alpha))_func)(red, green, blue, alpha);
}
void gllCall_glColor4fNormal3fVertex3fSUN(void *_func, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) {
	((void (*)(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z))_func)(r, g, b, a, nx, ny, nz, x, y, z);
}
void gllCall_glColor4fNormal3fVertex3fvSUN(void *_func, float *c, float *n, float *v) {
	((void (*)(float *c, float *n, float *v))_func)(c, n, v);
}
void gllCall_glColor4fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glColor4hNV(void *_func, uint16_t red, uint16_t green, uint16_t blue, uint16_t alpha) {
	((void (*)(uint16_t red, uint16_t green, uint16_t blue, uint16_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glColor4hvNV(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glColor4i(void *_func, int32_t red, int32_t green, int32_t blue, int32_t alpha) {
	((void (*)(int32_t red, int32_t green, int32_t blue, int32_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glColor4iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glColor4s(void *_func, int16_t red, int16_t green, int16_t blue, int16_t alpha) {
	((void (*)(int16_t red, int16_t green, int16_t blue, int16_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glColor4sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glColor4ub(void *_func, uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha) {
	((void (*)(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glColor4ubVertex2fSUN(void *_func, uint8_t r, uint8_t g, uint8_t b, uint8_t a, float x, float y) {
	((void (*)(uint8_t r, uint8_t g, uint8_t b, uint8_t a, float x, float y))_func)(r, g, b, a, x, y);
}
void gllCall_glColor4ubVertex2fvSUN(void *_func, uint8_t *c, float *v) {
	((void (*)(uint8_t *c, float *v))_func)(c, v);
}
void gllCall_glColor4ubVertex3fSUN(void *_func, uint8_t r, uint8_t g, uint8_t b, uint8_t a, float x, float y, float z) {
	((void (*)(uint8_t r, uint8_t g, uint8_t b, uint8_t a, float x, float y, float z))_func)(r, g, b, a, x, y, z);
}
void gllCall_glColor4ubVertex3fvSUN(void *_func, uint8_t *c, float *v) {
	((void (*)(uint8_t *c, float *v))_func)(c, v);
}
void gllCall_glColor4ubv(void *_func, uint8_t *v) {
	((void (*)(uint8_t *v))_func)(v);
}
void gllCall_glColor4ui(void *_func, uint32_t red, uint32_t green, uint32_t blue, uint32_t alpha) {
	((void (*)(uint32_t red, uint32_t green, uint32_t blue, uint32_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glColor4uiv(void *_func, uint32_t *v) {
	((void (*)(uint32_t *v))_func)(v);
}
void gllCall_glColor4us(void *_func, uint16_t red, uint16_t green, uint16_t blue, uint16_t alpha) {
	((void (*)(uint16_t red, uint16_t green, uint16_t blue, uint16_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glColor4usv(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glColor4x(void *_func, int32_t red, int32_t green, int32_t blue, int32_t alpha) {
	((void (*)(int32_t red, int32_t green, int32_t blue, int32_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glColor4xOES(void *_func, int32_t red, int32_t green, int32_t blue, int32_t alpha) {
	((void (*)(int32_t red, int32_t green, int32_t blue, int32_t alpha))_func)(red, green, blue, alpha);
}
void gllCall_glColor4xvOES(void *_func, int32_t *components) {
	((void (*)(int32_t *components))_func)(components);
}
void gllCall_glColorFormatNV(void *_func, int32_t size, uint32_t type, int32_t stride) {
	((void (*)(int32_t size, uint32_t type, int32_t stride))_func)(size, type, stride);
}
void gllCall_glColorFragmentOp1ATI(void *_func, uint32_t op, uint32_t dst, uint32_t dstMask, uint32_t dstMod, uint32_t arg1, uint32_t arg1Rep, uint32_t arg1Mod) {
	((void (*)(uint32_t op, uint32_t dst, uint32_t dstMask, uint32_t dstMod, uint32_t arg1, uint32_t arg1Rep, uint32_t arg1Mod))_func)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
}
void gllCall_glColorFragmentOp2ATI(void *_func, uint32_t op, uint32_t dst, uint32_t dstMask, uint32_t dstMod, uint32_t arg1, uint32_t arg1Rep, uint32_t arg1Mod, uint32_t arg2, uint32_t arg2Rep, uint32_t arg2Mod) {
	((void (*)(uint32_t op, uint32_t dst, uint32_t dstMask, uint32_t dstMod, uint32_t arg1, uint32_t arg1Rep, uint32_t arg1Mod, uint32_t arg2, uint32_t arg2Rep, uint32_t arg2Mod))_func)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}
void gllCall_glColorFragmentOp3ATI(void *_func, uint32_t op, uint32_t dst, uint32_t dstMask, uint32_t dstMod, uint32_t arg1, uint32_t arg1Rep, uint32_t arg1Mod, uint32_t arg2, uint32_t arg2Rep, uint32_t arg2Mod, uint32_t arg3, uint32_t arg3Rep, uint32_t arg3Mod) {
	((void (*)(uint32_t op, uint32_t dst, uint32_t dstMask, uint32_t dstMod, uint32_t arg1, uint32_t arg1Rep, uint32_t arg1Mod, uint32_t arg2, uint32_t arg2Rep, uint32_t arg2Mod, uint32_t arg3, uint32_t arg3Rep, uint32_t arg3Mod))_func)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}
void gllCall_glColorMask(void *_func, _Bool red, _Bool green, _Bool blue, _Bool alpha) {
	((void (*)(_Bool red, _Bool green, _Bool blue, _Bool alpha))_func)(red, green, blue, alpha);
}
void gllCall_glColorMaskIndexedEXT(void *_func, uint32_t index, _Bool r, _Bool g, _Bool b, _Bool a) {
	((void (*)(uint32_t index, _Bool r, _Bool g, _Bool b, _Bool a))_func)(index, r, g, b, a);
}
void gllCall_glColorMaski(void *_func, uint32_t index, _Bool r, _Bool g, _Bool b, _Bool a) {
	((void (*)(uint32_t index, _Bool r, _Bool g, _Bool b, _Bool a))_func)(index, r, g, b, a);
}
void gllCall_glColorMaskiEXT(void *_func, uint32_t index, _Bool r, _Bool g, _Bool b, _Bool a) {
	((void (*)(uint32_t index, _Bool r, _Bool g, _Bool b, _Bool a))_func)(index, r, g, b, a);
}
void gllCall_glColorMaskiOES(void *_func, uint32_t index, _Bool r, _Bool g, _Bool b, _Bool a) {
	((void (*)(uint32_t index, _Bool r, _Bool g, _Bool b, _Bool a))_func)(index, r, g, b, a);
}
void gllCall_glColorMaterial(void *_func, uint32_t face, uint32_t mode) {
	((void (*)(uint32_t face, uint32_t mode))_func)(face, mode);
}
void gllCall_glColorP3ui(void *_func, uint32_t type, uint32_t color) {
	((void (*)(uint32_t type, uint32_t color))_func)(type, color);
}
void gllCall_glColorP3uiv(void *_func, uint32_t type, uint32_t *color) {
	((void (*)(uint32_t type, uint32_t *color))_func)(type, color);
}
void gllCall_glColorP4ui(void *_func, uint32_t type, uint32_t color) {
	((void (*)(uint32_t type, uint32_t color))_func)(type, color);
}
void gllCall_glColorP4uiv(void *_func, uint32_t type, uint32_t *color) {
	((void (*)(uint32_t type, uint32_t *color))_func)(type, color);
}
void gllCall_glColorPointer(void *_func, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(size, type, stride, pointer);
}
void gllCall_glColorPointerEXT(void *_func, int32_t size, uint32_t type, int32_t stride, int32_t count, void *pointer) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, int32_t count, void *pointer))_func)(size, type, stride, count, pointer);
}
void gllCall_glColorPointerListIBM(void *_func, int32_t size, uint32_t type, int32_t stride, void **pointer, int32_t ptrstride) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, void **pointer, int32_t ptrstride))_func)(size, type, stride, pointer, ptrstride);
}
void gllCall_glColorPointervINTEL(void *_func, int32_t size, uint32_t type, void **pointer) {
	((void (*)(int32_t size, uint32_t type, void **pointer))_func)(size, type, pointer);
}
void gllCall_glColorSubTable(void *_func, uint32_t target, int32_t start, int32_t count, uint32_t format, uint32_t type, void *data) {
	((void (*)(uint32_t target, int32_t start, int32_t count, uint32_t format, uint32_t type, void *data))_func)(target, start, count, format, type, data);
}
void gllCall_glColorSubTableEXT(void *_func, uint32_t target, int32_t start, int32_t count, uint32_t format, uint32_t type, void *data) {
	((void (*)(uint32_t target, int32_t start, int32_t count, uint32_t format, uint32_t type, void *data))_func)(target, start, count, format, type, data);
}
void gllCall_glColorTable(void *_func, uint32_t target, uint32_t internalformat, int32_t width, uint32_t format, uint32_t type, void *table) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t width, uint32_t format, uint32_t type, void *table))_func)(target, internalformat, width, format, type, table);
}
void gllCall_glColorTableEXT(void *_func, uint32_t target, uint32_t internalFormat, int32_t width, uint32_t format, uint32_t type, void *table) {
	((void (*)(uint32_t target, uint32_t internalFormat, int32_t width, uint32_t format, uint32_t type, void *table))_func)(target, internalFormat, width, format, type, table);
}
void gllCall_glColorTableParameterfv(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glColorTableParameterfvSGI(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glColorTableParameteriv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glColorTableParameterivSGI(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glColorTableSGI(void *_func, uint32_t target, uint32_t internalformat, int32_t width, uint32_t format, uint32_t type, void *table) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t width, uint32_t format, uint32_t type, void *table))_func)(target, internalformat, width, format, type, table);
}
void gllCall_glCombinerInputNV(void *_func, uint32_t stage, uint32_t portion, uint32_t variable, uint32_t input, uint32_t mapping, uint32_t componentUsage) {
	((void (*)(uint32_t stage, uint32_t portion, uint32_t variable, uint32_t input, uint32_t mapping, uint32_t componentUsage))_func)(stage, portion, variable, input, mapping, componentUsage);
}
void gllCall_glCombinerOutputNV(void *_func, uint32_t stage, uint32_t portion, uint32_t abOutput, uint32_t cdOutput, uint32_t sumOutput, uint32_t scale, uint32_t bias, _Bool abDotProduct, _Bool cdDotProduct, _Bool muxSum) {
	((void (*)(uint32_t stage, uint32_t portion, uint32_t abOutput, uint32_t cdOutput, uint32_t sumOutput, uint32_t scale, uint32_t bias, _Bool abDotProduct, _Bool cdDotProduct, _Bool muxSum))_func)(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
}
void gllCall_glCombinerParameterfNV(void *_func, uint32_t pname, float param) {
	((void (*)(uint32_t pname, float param))_func)(pname, param);
}
void gllCall_glCombinerParameterfvNV(void *_func, uint32_t pname, float *params) {
	((void (*)(uint32_t pname, float *params))_func)(pname, params);
}
void gllCall_glCombinerParameteriNV(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glCombinerParameterivNV(void *_func, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pname, int32_t *params))_func)(pname, params);
}
void gllCall_glCombinerStageParameterfvNV(void *_func, uint32_t stage, uint32_t pname, float *params) {
	((void (*)(uint32_t stage, uint32_t pname, float *params))_func)(stage, pname, params);
}
void gllCall_glCommandListSegmentsNV(void *_func, uint32_t list, uint32_t segments) {
	((void (*)(uint32_t list, uint32_t segments))_func)(list, segments);
}
void gllCall_glCompileCommandListNV(void *_func, uint32_t list) {
	((void (*)(uint32_t list))_func)(list);
}
void gllCall_glCompileShader(void *_func, uint32_t shader) {
	((void (*)(uint32_t shader))_func)(shader);
}
void gllCall_glCompileShaderARB(void *_func, GLhandleARB shaderObj) {
	((void (*)(GLhandleARB shaderObj))_func)(shaderObj);
}
void gllCall_glCompileShaderIncludeARB(void *_func, uint32_t shader, int32_t count, uint8_t **path, int32_t *length) {
	((void (*)(uint32_t shader, int32_t count, uint8_t **path, int32_t *length))_func)(shader, count, path, length);
}
void gllCall_glCompressedMultiTexImage1DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t border, int32_t imageSize, void *bits) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t border, int32_t imageSize, void *bits))_func)(texunit, target, level, internalformat, width, border, imageSize, bits);
}
void gllCall_glCompressedMultiTexImage2DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t border, int32_t imageSize, void *bits) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t border, int32_t imageSize, void *bits))_func)(texunit, target, level, internalformat, width, height, border, imageSize, bits);
}
void gllCall_glCompressedMultiTexImage3DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, int32_t imageSize, void *bits) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, int32_t imageSize, void *bits))_func)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
}
void gllCall_glCompressedMultiTexSubImage1DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, int32_t imageSize, void *bits) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, int32_t imageSize, void *bits))_func)(texunit, target, level, xoffset, width, format, imageSize, bits);
}
void gllCall_glCompressedMultiTexSubImage2DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, int32_t imageSize, void *bits) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, int32_t imageSize, void *bits))_func)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}
void gllCall_glCompressedMultiTexSubImage3DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, int32_t imageSize, void *bits) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, int32_t imageSize, void *bits))_func)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
}
void gllCall_glCompressedTexImage1D(void *_func, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t border, int32_t imageSize, void *data) {
	((void (*)(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t border, int32_t imageSize, void *data))_func)(target, level, internalformat, width, border, imageSize, data);
}
void gllCall_glCompressedTexImage1DARB(void *_func, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t border, int32_t imageSize, void *data) {
	((void (*)(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t border, int32_t imageSize, void *data))_func)(target, level, internalformat, width, border, imageSize, data);
}
void gllCall_glCompressedTexImage2D(void *_func, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t border, int32_t imageSize, void *data) {
	((void (*)(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t border, int32_t imageSize, void *data))_func)(target, level, internalformat, width, height, border, imageSize, data);
}
void gllCall_glCompressedTexImage2DARB(void *_func, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t border, int32_t imageSize, void *data) {
	((void (*)(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t border, int32_t imageSize, void *data))_func)(target, level, internalformat, width, height, border, imageSize, data);
}
void gllCall_glCompressedTexImage3D(void *_func, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, int32_t imageSize, void *data) {
	((void (*)(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, int32_t imageSize, void *data))_func)(target, level, internalformat, width, height, depth, border, imageSize, data);
}
void gllCall_glCompressedTexImage3DARB(void *_func, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, int32_t imageSize, void *data) {
	((void (*)(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, int32_t imageSize, void *data))_func)(target, level, internalformat, width, height, depth, border, imageSize, data);
}
void gllCall_glCompressedTexImage3DOES(void *_func, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, int32_t imageSize, void *data) {
	((void (*)(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, int32_t imageSize, void *data))_func)(target, level, internalformat, width, height, depth, border, imageSize, data);
}
void gllCall_glCompressedTexSubImage1D(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, int32_t imageSize, void *data) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, int32_t imageSize, void *data))_func)(target, level, xoffset, width, format, imageSize, data);
}
void gllCall_glCompressedTexSubImage1DARB(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, int32_t imageSize, void *data) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, int32_t imageSize, void *data))_func)(target, level, xoffset, width, format, imageSize, data);
}
void gllCall_glCompressedTexSubImage2D(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, int32_t imageSize, void *data) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, int32_t imageSize, void *data))_func)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}
void gllCall_glCompressedTexSubImage2DARB(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, int32_t imageSize, void *data) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, int32_t imageSize, void *data))_func)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}
void gllCall_glCompressedTexSubImage3D(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, int32_t imageSize, void *data) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, int32_t imageSize, void *data))_func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
void gllCall_glCompressedTexSubImage3DARB(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, int32_t imageSize, void *data) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, int32_t imageSize, void *data))_func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
void gllCall_glCompressedTexSubImage3DOES(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, int32_t imageSize, void *data) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, int32_t imageSize, void *data))_func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
void gllCall_glCompressedTextureImage1DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t border, int32_t imageSize, void *bits) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t border, int32_t imageSize, void *bits))_func)(texture, target, level, internalformat, width, border, imageSize, bits);
}
void gllCall_glCompressedTextureImage2DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t border, int32_t imageSize, void *bits) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t border, int32_t imageSize, void *bits))_func)(texture, target, level, internalformat, width, height, border, imageSize, bits);
}
void gllCall_glCompressedTextureImage3DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, int32_t imageSize, void *bits) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, int32_t imageSize, void *bits))_func)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
}
void gllCall_glCompressedTextureSubImage1D(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t width, uint32_t format, int32_t imageSize, void *data) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t width, uint32_t format, int32_t imageSize, void *data))_func)(texture, level, xoffset, width, format, imageSize, data);
}
void gllCall_glCompressedTextureSubImage1DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, int32_t imageSize, void *bits) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, int32_t imageSize, void *bits))_func)(texture, target, level, xoffset, width, format, imageSize, bits);
}
void gllCall_glCompressedTextureSubImage2D(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, int32_t imageSize, void *data) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, int32_t imageSize, void *data))_func)(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
}
void gllCall_glCompressedTextureSubImage2DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, int32_t imageSize, void *bits) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, int32_t imageSize, void *bits))_func)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}
void gllCall_glCompressedTextureSubImage3D(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, int32_t imageSize, void *data) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, int32_t imageSize, void *data))_func)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
void gllCall_glCompressedTextureSubImage3DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, int32_t imageSize, void *bits) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, int32_t imageSize, void *bits))_func)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
}
void gllCall_glConservativeRasterParameterfNV(void *_func, uint32_t pname, float value) {
	((void (*)(uint32_t pname, float value))_func)(pname, value);
}
void gllCall_glConservativeRasterParameteriNV(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glConvolutionFilter1D(void *_func, uint32_t target, uint32_t internalformat, int32_t width, uint32_t format, uint32_t type, void *image) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t width, uint32_t format, uint32_t type, void *image))_func)(target, internalformat, width, format, type, image);
}
void gllCall_glConvolutionFilter1DEXT(void *_func, uint32_t target, uint32_t internalformat, int32_t width, uint32_t format, uint32_t type, void *image) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t width, uint32_t format, uint32_t type, void *image))_func)(target, internalformat, width, format, type, image);
}
void gllCall_glConvolutionFilter2D(void *_func, uint32_t target, uint32_t internalformat, int32_t width, int32_t height, uint32_t format, uint32_t type, void *image) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t width, int32_t height, uint32_t format, uint32_t type, void *image))_func)(target, internalformat, width, height, format, type, image);
}
void gllCall_glConvolutionFilter2DEXT(void *_func, uint32_t target, uint32_t internalformat, int32_t width, int32_t height, uint32_t format, uint32_t type, void *image) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t width, int32_t height, uint32_t format, uint32_t type, void *image))_func)(target, internalformat, width, height, format, type, image);
}
void gllCall_glConvolutionParameterf(void *_func, uint32_t target, uint32_t pname, float params) {
	((void (*)(uint32_t target, uint32_t pname, float params))_func)(target, pname, params);
}
void gllCall_glConvolutionParameterfEXT(void *_func, uint32_t target, uint32_t pname, float params) {
	((void (*)(uint32_t target, uint32_t pname, float params))_func)(target, pname, params);
}
void gllCall_glConvolutionParameterfv(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glConvolutionParameterfvEXT(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glConvolutionParameteri(void *_func, uint32_t target, uint32_t pname, int32_t params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t params))_func)(target, pname, params);
}
void gllCall_glConvolutionParameteriEXT(void *_func, uint32_t target, uint32_t pname, int32_t params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t params))_func)(target, pname, params);
}
void gllCall_glConvolutionParameteriv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glConvolutionParameterivEXT(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glConvolutionParameterxOES(void *_func, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t target, uint32_t pname, int32_t param))_func)(target, pname, param);
}
void gllCall_glConvolutionParameterxvOES(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glCopyBufferSubData(void *_func, uint32_t readTarget, uint32_t writeTarget, intptr_t readOffset, intptr_t writeOffset, ssize_t size) {
	((void (*)(uint32_t readTarget, uint32_t writeTarget, intptr_t readOffset, intptr_t writeOffset, ssize_t size))_func)(readTarget, writeTarget, readOffset, writeOffset, size);
}
void gllCall_glCopyBufferSubDataNV(void *_func, uint32_t readTarget, uint32_t writeTarget, intptr_t readOffset, intptr_t writeOffset, ssize_t size) {
	((void (*)(uint32_t readTarget, uint32_t writeTarget, intptr_t readOffset, intptr_t writeOffset, ssize_t size))_func)(readTarget, writeTarget, readOffset, writeOffset, size);
}
void gllCall_glCopyColorSubTable(void *_func, uint32_t target, int32_t start, int32_t x, int32_t y, int32_t width) {
	((void (*)(uint32_t target, int32_t start, int32_t x, int32_t y, int32_t width))_func)(target, start, x, y, width);
}
void gllCall_glCopyColorSubTableEXT(void *_func, uint32_t target, int32_t start, int32_t x, int32_t y, int32_t width) {
	((void (*)(uint32_t target, int32_t start, int32_t x, int32_t y, int32_t width))_func)(target, start, x, y, width);
}
void gllCall_glCopyColorTable(void *_func, uint32_t target, uint32_t internalformat, int32_t x, int32_t y, int32_t width) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t x, int32_t y, int32_t width))_func)(target, internalformat, x, y, width);
}
void gllCall_glCopyColorTableSGI(void *_func, uint32_t target, uint32_t internalformat, int32_t x, int32_t y, int32_t width) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t x, int32_t y, int32_t width))_func)(target, internalformat, x, y, width);
}
void gllCall_glCopyConvolutionFilter1D(void *_func, uint32_t target, uint32_t internalformat, int32_t x, int32_t y, int32_t width) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t x, int32_t y, int32_t width))_func)(target, internalformat, x, y, width);
}
void gllCall_glCopyConvolutionFilter1DEXT(void *_func, uint32_t target, uint32_t internalformat, int32_t x, int32_t y, int32_t width) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t x, int32_t y, int32_t width))_func)(target, internalformat, x, y, width);
}
void gllCall_glCopyConvolutionFilter2D(void *_func, uint32_t target, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t height))_func)(target, internalformat, x, y, width, height);
}
void gllCall_glCopyConvolutionFilter2DEXT(void *_func, uint32_t target, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t height))_func)(target, internalformat, x, y, width, height);
}
void gllCall_glCopyImageSubData(void *_func, uint32_t srcName, uint32_t srcTarget, int32_t srcLevel, int32_t srcX, int32_t srcY, int32_t srcZ, uint32_t dstName, uint32_t dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t srcWidth, int32_t srcHeight, int32_t srcDepth) {
	((void (*)(uint32_t srcName, uint32_t srcTarget, int32_t srcLevel, int32_t srcX, int32_t srcY, int32_t srcZ, uint32_t dstName, uint32_t dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t srcWidth, int32_t srcHeight, int32_t srcDepth))_func)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
void gllCall_glCopyImageSubDataEXT(void *_func, uint32_t srcName, uint32_t srcTarget, int32_t srcLevel, int32_t srcX, int32_t srcY, int32_t srcZ, uint32_t dstName, uint32_t dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t srcWidth, int32_t srcHeight, int32_t srcDepth) {
	((void (*)(uint32_t srcName, uint32_t srcTarget, int32_t srcLevel, int32_t srcX, int32_t srcY, int32_t srcZ, uint32_t dstName, uint32_t dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t srcWidth, int32_t srcHeight, int32_t srcDepth))_func)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
void gllCall_glCopyImageSubDataNV(void *_func, uint32_t srcName, uint32_t srcTarget, int32_t srcLevel, int32_t srcX, int32_t srcY, int32_t srcZ, uint32_t dstName, uint32_t dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t width, int32_t height, int32_t depth) {
	((void (*)(uint32_t srcName, uint32_t srcTarget, int32_t srcLevel, int32_t srcX, int32_t srcY, int32_t srcZ, uint32_t dstName, uint32_t dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t width, int32_t height, int32_t depth))_func)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}
void gllCall_glCopyImageSubDataOES(void *_func, uint32_t srcName, uint32_t srcTarget, int32_t srcLevel, int32_t srcX, int32_t srcY, int32_t srcZ, uint32_t dstName, uint32_t dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t srcWidth, int32_t srcHeight, int32_t srcDepth) {
	((void (*)(uint32_t srcName, uint32_t srcTarget, int32_t srcLevel, int32_t srcX, int32_t srcY, int32_t srcZ, uint32_t dstName, uint32_t dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t srcWidth, int32_t srcHeight, int32_t srcDepth))_func)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
void gllCall_glCopyMultiTexImage1DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t border) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t border))_func)(texunit, target, level, internalformat, x, y, width, border);
}
void gllCall_glCopyMultiTexImage2DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t height, int32_t border) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t height, int32_t border))_func)(texunit, target, level, internalformat, x, y, width, height, border);
}
void gllCall_glCopyMultiTexSubImage1DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t x, int32_t y, int32_t width) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t x, int32_t y, int32_t width))_func)(texunit, target, level, xoffset, x, y, width);
}
void gllCall_glCopyMultiTexSubImage2DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t x, int32_t y, int32_t width, int32_t height))_func)(texunit, target, level, xoffset, yoffset, x, y, width, height);
}
void gllCall_glCopyMultiTexSubImage3DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t x, int32_t y, int32_t width, int32_t height))_func)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
void gllCall_glCopyNamedBufferSubData(void *_func, uint32_t readBuffer, uint32_t writeBuffer, intptr_t readOffset, intptr_t writeOffset, ssize_t size) {
	((void (*)(uint32_t readBuffer, uint32_t writeBuffer, intptr_t readOffset, intptr_t writeOffset, ssize_t size))_func)(readBuffer, writeBuffer, readOffset, writeOffset, size);
}
void gllCall_glCopyPathNV(void *_func, uint32_t resultPath, uint32_t srcPath) {
	((void (*)(uint32_t resultPath, uint32_t srcPath))_func)(resultPath, srcPath);
}
void gllCall_glCopyPixels(void *_func, int32_t x, int32_t y, int32_t width, int32_t height, uint32_t type) {
	((void (*)(int32_t x, int32_t y, int32_t width, int32_t height, uint32_t type))_func)(x, y, width, height, type);
}
void gllCall_glCopyTexImage1D(void *_func, uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t border) {
	((void (*)(uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t border))_func)(target, level, internalformat, x, y, width, border);
}
void gllCall_glCopyTexImage1DEXT(void *_func, uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t border) {
	((void (*)(uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t border))_func)(target, level, internalformat, x, y, width, border);
}
void gllCall_glCopyTexImage2D(void *_func, uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t height, int32_t border) {
	((void (*)(uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t height, int32_t border))_func)(target, level, internalformat, x, y, width, height, border);
}
void gllCall_glCopyTexImage2DEXT(void *_func, uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t height, int32_t border) {
	((void (*)(uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t height, int32_t border))_func)(target, level, internalformat, x, y, width, height, border);
}
void gllCall_glCopyTexSubImage1D(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t x, int32_t y, int32_t width) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t x, int32_t y, int32_t width))_func)(target, level, xoffset, x, y, width);
}
void gllCall_glCopyTexSubImage1DEXT(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t x, int32_t y, int32_t width) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t x, int32_t y, int32_t width))_func)(target, level, xoffset, x, y, width);
}
void gllCall_glCopyTexSubImage2D(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t x, int32_t y, int32_t width, int32_t height))_func)(target, level, xoffset, yoffset, x, y, width, height);
}
void gllCall_glCopyTexSubImage2DEXT(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t x, int32_t y, int32_t width, int32_t height))_func)(target, level, xoffset, yoffset, x, y, width, height);
}
void gllCall_glCopyTexSubImage3D(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t x, int32_t y, int32_t width, int32_t height))_func)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
void gllCall_glCopyTexSubImage3DEXT(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t x, int32_t y, int32_t width, int32_t height))_func)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
void gllCall_glCopyTexSubImage3DOES(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t x, int32_t y, int32_t width, int32_t height))_func)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
void gllCall_glCopyTextureImage1DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t border) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t border))_func)(texture, target, level, internalformat, x, y, width, border);
}
void gllCall_glCopyTextureImage2DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t height, int32_t border) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, uint32_t internalformat, int32_t x, int32_t y, int32_t width, int32_t height, int32_t border))_func)(texture, target, level, internalformat, x, y, width, height, border);
}
void gllCall_glCopyTextureLevelsAPPLE(void *_func, uint32_t destinationTexture, uint32_t sourceTexture, int32_t sourceBaseLevel, int32_t sourceLevelCount) {
	((void (*)(uint32_t destinationTexture, uint32_t sourceTexture, int32_t sourceBaseLevel, int32_t sourceLevelCount))_func)(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
}
void gllCall_glCopyTextureSubImage1D(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t x, int32_t y, int32_t width) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t x, int32_t y, int32_t width))_func)(texture, level, xoffset, x, y, width);
}
void gllCall_glCopyTextureSubImage1DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t x, int32_t y, int32_t width) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t x, int32_t y, int32_t width))_func)(texture, target, level, xoffset, x, y, width);
}
void gllCall_glCopyTextureSubImage2D(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t x, int32_t y, int32_t width, int32_t height))_func)(texture, level, xoffset, yoffset, x, y, width, height);
}
void gllCall_glCopyTextureSubImage2DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t x, int32_t y, int32_t width, int32_t height))_func)(texture, target, level, xoffset, yoffset, x, y, width, height);
}
void gllCall_glCopyTextureSubImage3D(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t x, int32_t y, int32_t width, int32_t height))_func)(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
}
void gllCall_glCopyTextureSubImage3DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t x, int32_t y, int32_t width, int32_t height))_func)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
void gllCall_glCoverFillPathInstancedNV(void *_func, int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, uint32_t coverMode, uint32_t transformType, float *transformValues) {
	((void (*)(int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, uint32_t coverMode, uint32_t transformType, float *transformValues))_func)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}
void gllCall_glCoverFillPathNV(void *_func, uint32_t path, uint32_t coverMode) {
	((void (*)(uint32_t path, uint32_t coverMode))_func)(path, coverMode);
}
void gllCall_glCoverStrokePathInstancedNV(void *_func, int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, uint32_t coverMode, uint32_t transformType, float *transformValues) {
	((void (*)(int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, uint32_t coverMode, uint32_t transformType, float *transformValues))_func)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}
void gllCall_glCoverStrokePathNV(void *_func, uint32_t path, uint32_t coverMode) {
	((void (*)(uint32_t path, uint32_t coverMode))_func)(path, coverMode);
}
void gllCall_glCoverageMaskNV(void *_func, _Bool mask) {
	((void (*)(_Bool mask))_func)(mask);
}
void gllCall_glCoverageModulationNV(void *_func, uint32_t components) {
	((void (*)(uint32_t components))_func)(components);
}
void gllCall_glCoverageModulationTableNV(void *_func, int32_t n, float *v) {
	((void (*)(int32_t n, float *v))_func)(n, v);
}
void gllCall_glCoverageOperationNV(void *_func, uint32_t operation) {
	((void (*)(uint32_t operation))_func)(operation);
}
void gllCall_glCreateBuffers(void *_func, int32_t n, uint32_t *buffers) {
	((void (*)(int32_t n, uint32_t *buffers))_func)(n, buffers);
}
void gllCall_glCreateCommandListsNV(void *_func, int32_t n, uint32_t *lists) {
	((void (*)(int32_t n, uint32_t *lists))_func)(n, lists);
}
void gllCall_glCreateFramebuffers(void *_func, int32_t n, uint32_t *framebuffers) {
	((void (*)(int32_t n, uint32_t *framebuffers))_func)(n, framebuffers);
}
void gllCall_glCreateMemoryObjectsEXT(void *_func, int32_t n, uint32_t *memoryObjects) {
	((void (*)(int32_t n, uint32_t *memoryObjects))_func)(n, memoryObjects);
}
void gllCall_glCreatePerfQueryINTEL(void *_func, uint32_t queryId, uint32_t *queryHandle) {
	((void (*)(uint32_t queryId, uint32_t *queryHandle))_func)(queryId, queryHandle);
}
uint32_t gllCall_glCreateProgram(void *_func) {
	return ((uint32_t (*)())_func)();
}
GLhandleARB gllCall_glCreateProgramObjectARB(void *_func) {
	return ((GLhandleARB (*)())_func)();
}
void gllCall_glCreateProgramPipelines(void *_func, int32_t n, uint32_t *pipelines) {
	((void (*)(int32_t n, uint32_t *pipelines))_func)(n, pipelines);
}
uint32_t gllCall_glCreateProgressFenceNVX(void *_func) {
	return ((uint32_t (*)())_func)();
}
void gllCall_glCreateQueries(void *_func, uint32_t target, int32_t n, uint32_t *ids) {
	((void (*)(uint32_t target, int32_t n, uint32_t *ids))_func)(target, n, ids);
}
void gllCall_glCreateRenderbuffers(void *_func, int32_t n, uint32_t *renderbuffers) {
	((void (*)(int32_t n, uint32_t *renderbuffers))_func)(n, renderbuffers);
}
void gllCall_glCreateSamplers(void *_func, int32_t n, uint32_t *samplers) {
	((void (*)(int32_t n, uint32_t *samplers))_func)(n, samplers);
}
void gllCall_glCreateSemaphoresNV(void *_func, int32_t n, uint32_t *semaphores) {
	((void (*)(int32_t n, uint32_t *semaphores))_func)(n, semaphores);
}
uint32_t gllCall_glCreateShader(void *_func, uint32_t type) {
	return ((uint32_t (*)(uint32_t type))_func)(type);
}
GLhandleARB gllCall_glCreateShaderObjectARB(void *_func, uint32_t shaderType) {
	return ((GLhandleARB (*)(uint32_t shaderType))_func)(shaderType);
}
uint32_t gllCall_glCreateShaderProgramEXT(void *_func, uint32_t type, uint8_t *string) {
	return ((uint32_t (*)(uint32_t type, uint8_t *string))_func)(type, string);
}
uint32_t gllCall_glCreateShaderProgramv(void *_func, uint32_t type, int32_t count, uint8_t **strings) {
	return ((uint32_t (*)(uint32_t type, int32_t count, uint8_t **strings))_func)(type, count, strings);
}
uint32_t gllCall_glCreateShaderProgramvEXT(void *_func, uint32_t type, int32_t count, uint8_t **strings) {
	return ((uint32_t (*)(uint32_t type, int32_t count, uint8_t **strings))_func)(type, count, strings);
}
void gllCall_glCreateStatesNV(void *_func, int32_t n, uint32_t *states) {
	((void (*)(int32_t n, uint32_t *states))_func)(n, states);
}
void gllCall_glCreateTextures(void *_func, uint32_t target, int32_t n, uint32_t *textures) {
	((void (*)(uint32_t target, int32_t n, uint32_t *textures))_func)(target, n, textures);
}
void gllCall_glCreateTransformFeedbacks(void *_func, int32_t n, uint32_t *ids) {
	((void (*)(int32_t n, uint32_t *ids))_func)(n, ids);
}
void gllCall_glCreateVertexArrays(void *_func, int32_t n, uint32_t *arrays) {
	((void (*)(int32_t n, uint32_t *arrays))_func)(n, arrays);
}
void gllCall_glCullFace(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glCullParameterdvEXT(void *_func, uint32_t pname, double *params) {
	((void (*)(uint32_t pname, double *params))_func)(pname, params);
}
void gllCall_glCullParameterfvEXT(void *_func, uint32_t pname, float *params) {
	((void (*)(uint32_t pname, float *params))_func)(pname, params);
}
void gllCall_glCurrentPaletteMatrixARB(void *_func, int32_t index) {
	((void (*)(int32_t index))_func)(index);
}
void gllCall_glCurrentPaletteMatrixOES(void *_func, uint32_t matrixpaletteindex) {
	((void (*)(uint32_t matrixpaletteindex))_func)(matrixpaletteindex);
}
void gllCall_glDebugMessageControl(void *_func, uint32_t source, uint32_t type, uint32_t severity, int32_t count, uint32_t *ids, _Bool enabled) {
	((void (*)(uint32_t source, uint32_t type, uint32_t severity, int32_t count, uint32_t *ids, _Bool enabled))_func)(source, type, severity, count, ids, enabled);
}
void gllCall_glDebugMessageControlARB(void *_func, uint32_t source, uint32_t type, uint32_t severity, int32_t count, uint32_t *ids, _Bool enabled) {
	((void (*)(uint32_t source, uint32_t type, uint32_t severity, int32_t count, uint32_t *ids, _Bool enabled))_func)(source, type, severity, count, ids, enabled);
}
void gllCall_glDebugMessageControlKHR(void *_func, uint32_t source, uint32_t type, uint32_t severity, int32_t count, uint32_t *ids, _Bool enabled) {
	((void (*)(uint32_t source, uint32_t type, uint32_t severity, int32_t count, uint32_t *ids, _Bool enabled))_func)(source, type, severity, count, ids, enabled);
}
void gllCall_glDebugMessageEnableAMD(void *_func, uint32_t category, uint32_t severity, int32_t count, uint32_t *ids, _Bool enabled) {
	((void (*)(uint32_t category, uint32_t severity, int32_t count, uint32_t *ids, _Bool enabled))_func)(category, severity, count, ids, enabled);
}
void gllCall_glDebugMessageInsert(void *_func, uint32_t source, uint32_t type, uint32_t id, uint32_t severity, int32_t length, uint8_t *buf) {
	((void (*)(uint32_t source, uint32_t type, uint32_t id, uint32_t severity, int32_t length, uint8_t *buf))_func)(source, type, id, severity, length, buf);
}
void gllCall_glDebugMessageInsertAMD(void *_func, uint32_t category, uint32_t severity, uint32_t id, int32_t length, uint8_t *buf) {
	((void (*)(uint32_t category, uint32_t severity, uint32_t id, int32_t length, uint8_t *buf))_func)(category, severity, id, length, buf);
}
void gllCall_glDebugMessageInsertARB(void *_func, uint32_t source, uint32_t type, uint32_t id, uint32_t severity, int32_t length, uint8_t *buf) {
	((void (*)(uint32_t source, uint32_t type, uint32_t id, uint32_t severity, int32_t length, uint8_t *buf))_func)(source, type, id, severity, length, buf);
}
void gllCall_glDebugMessageInsertKHR(void *_func, uint32_t source, uint32_t type, uint32_t id, uint32_t severity, int32_t length, uint8_t *buf) {
	((void (*)(uint32_t source, uint32_t type, uint32_t id, uint32_t severity, int32_t length, uint8_t *buf))_func)(source, type, id, severity, length, buf);
}
void gllCall_glDeformSGIX(void *_func, uint32_t mask) {
	((void (*)(uint32_t mask))_func)(mask);
}
void gllCall_glDeformationMap3dSGIX(void *_func, uint32_t target, double u1, double u2, int32_t ustride, int32_t uorder, double v1, double v2, int32_t vstride, int32_t vorder, double w1, double w2, int32_t wstride, int32_t worder, double *points) {
	((void (*)(uint32_t target, double u1, double u2, int32_t ustride, int32_t uorder, double v1, double v2, int32_t vstride, int32_t vorder, double w1, double w2, int32_t wstride, int32_t worder, double *points))_func)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}
void gllCall_glDeformationMap3fSGIX(void *_func, uint32_t target, float u1, float u2, int32_t ustride, int32_t uorder, float v1, float v2, int32_t vstride, int32_t vorder, float w1, float w2, int32_t wstride, int32_t worder, float *points) {
	((void (*)(uint32_t target, float u1, float u2, int32_t ustride, int32_t uorder, float v1, float v2, int32_t vstride, int32_t vorder, float w1, float w2, int32_t wstride, int32_t worder, float *points))_func)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}
void gllCall_glDeleteAsyncMarkersSGIX(void *_func, uint32_t marker, int32_t range) {
	((void (*)(uint32_t marker, int32_t range))_func)(marker, range);
}
void gllCall_glDeleteBuffers(void *_func, int32_t n, uint32_t *buffers) {
	((void (*)(int32_t n, uint32_t *buffers))_func)(n, buffers);
}
void gllCall_glDeleteBuffersARB(void *_func, int32_t n, uint32_t *buffers) {
	((void (*)(int32_t n, uint32_t *buffers))_func)(n, buffers);
}
void gllCall_glDeleteCommandListsNV(void *_func, int32_t n, uint32_t *lists) {
	((void (*)(int32_t n, uint32_t *lists))_func)(n, lists);
}
void gllCall_glDeleteFencesAPPLE(void *_func, int32_t n, uint32_t *fences) {
	((void (*)(int32_t n, uint32_t *fences))_func)(n, fences);
}
void gllCall_glDeleteFencesNV(void *_func, int32_t n, uint32_t *fences) {
	((void (*)(int32_t n, uint32_t *fences))_func)(n, fences);
}
void gllCall_glDeleteFragmentShaderATI(void *_func, uint32_t id) {
	((void (*)(uint32_t id))_func)(id);
}
void gllCall_glDeleteFramebuffers(void *_func, int32_t n, uint32_t *framebuffers) {
	((void (*)(int32_t n, uint32_t *framebuffers))_func)(n, framebuffers);
}
void gllCall_glDeleteFramebuffersEXT(void *_func, int32_t n, uint32_t *framebuffers) {
	((void (*)(int32_t n, uint32_t *framebuffers))_func)(n, framebuffers);
}
void gllCall_glDeleteFramebuffersOES(void *_func, int32_t n, uint32_t *framebuffers) {
	((void (*)(int32_t n, uint32_t *framebuffers))_func)(n, framebuffers);
}
void gllCall_glDeleteLists(void *_func, uint32_t list, int32_t range) {
	((void (*)(uint32_t list, int32_t range))_func)(list, range);
}
void gllCall_glDeleteMemoryObjectsEXT(void *_func, int32_t n, uint32_t *memoryObjects) {
	((void (*)(int32_t n, uint32_t *memoryObjects))_func)(n, memoryObjects);
}
void gllCall_glDeleteNamedStringARB(void *_func, int32_t namelen, uint8_t *name) {
	((void (*)(int32_t namelen, uint8_t *name))_func)(namelen, name);
}
void gllCall_glDeleteNamesAMD(void *_func, uint32_t identifier, uint32_t num, uint32_t *names) {
	((void (*)(uint32_t identifier, uint32_t num, uint32_t *names))_func)(identifier, num, names);
}
void gllCall_glDeleteObjectARB(void *_func, GLhandleARB obj) {
	((void (*)(GLhandleARB obj))_func)(obj);
}
void gllCall_glDeleteOcclusionQueriesNV(void *_func, int32_t n, uint32_t *ids) {
	((void (*)(int32_t n, uint32_t *ids))_func)(n, ids);
}
void gllCall_glDeletePathsNV(void *_func, uint32_t path, int32_t range) {
	((void (*)(uint32_t path, int32_t range))_func)(path, range);
}
void gllCall_glDeletePerfMonitorsAMD(void *_func, int32_t n, uint32_t *monitors) {
	((void (*)(int32_t n, uint32_t *monitors))_func)(n, monitors);
}
void gllCall_glDeletePerfQueryINTEL(void *_func, uint32_t queryHandle) {
	((void (*)(uint32_t queryHandle))_func)(queryHandle);
}
void gllCall_glDeleteProgram(void *_func, uint32_t program) {
	((void (*)(uint32_t program))_func)(program);
}
void gllCall_glDeleteProgramPipelines(void *_func, int32_t n, uint32_t *pipelines) {
	((void (*)(int32_t n, uint32_t *pipelines))_func)(n, pipelines);
}
void gllCall_glDeleteProgramPipelinesEXT(void *_func, int32_t n, uint32_t *pipelines) {
	((void (*)(int32_t n, uint32_t *pipelines))_func)(n, pipelines);
}
void gllCall_glDeleteProgramsARB(void *_func, int32_t n, uint32_t *programs) {
	((void (*)(int32_t n, uint32_t *programs))_func)(n, programs);
}
void gllCall_glDeleteProgramsNV(void *_func, int32_t n, uint32_t *programs) {
	((void (*)(int32_t n, uint32_t *programs))_func)(n, programs);
}
void gllCall_glDeleteQueries(void *_func, int32_t n, uint32_t *ids) {
	((void (*)(int32_t n, uint32_t *ids))_func)(n, ids);
}
void gllCall_glDeleteQueriesARB(void *_func, int32_t n, uint32_t *ids) {
	((void (*)(int32_t n, uint32_t *ids))_func)(n, ids);
}
void gllCall_glDeleteQueriesEXT(void *_func, int32_t n, uint32_t *ids) {
	((void (*)(int32_t n, uint32_t *ids))_func)(n, ids);
}
void gllCall_glDeleteQueryResourceTagNV(void *_func, int32_t n, int32_t *tagIds) {
	((void (*)(int32_t n, int32_t *tagIds))_func)(n, tagIds);
}
void gllCall_glDeleteRenderbuffers(void *_func, int32_t n, uint32_t *renderbuffers) {
	((void (*)(int32_t n, uint32_t *renderbuffers))_func)(n, renderbuffers);
}
void gllCall_glDeleteRenderbuffersEXT(void *_func, int32_t n, uint32_t *renderbuffers) {
	((void (*)(int32_t n, uint32_t *renderbuffers))_func)(n, renderbuffers);
}
void gllCall_glDeleteRenderbuffersOES(void *_func, int32_t n, uint32_t *renderbuffers) {
	((void (*)(int32_t n, uint32_t *renderbuffers))_func)(n, renderbuffers);
}
void gllCall_glDeleteSamplers(void *_func, int32_t count, uint32_t *samplers) {
	((void (*)(int32_t count, uint32_t *samplers))_func)(count, samplers);
}
void gllCall_glDeleteSemaphoresEXT(void *_func, int32_t n, uint32_t *semaphores) {
	((void (*)(int32_t n, uint32_t *semaphores))_func)(n, semaphores);
}
void gllCall_glDeleteShader(void *_func, uint32_t shader) {
	((void (*)(uint32_t shader))_func)(shader);
}
void gllCall_glDeleteStatesNV(void *_func, int32_t n, uint32_t *states) {
	((void (*)(int32_t n, uint32_t *states))_func)(n, states);
}
void gllCall_glDeleteSync(void *_func, GLsync sync) {
	((void (*)(GLsync sync))_func)(sync);
}
void gllCall_glDeleteSyncAPPLE(void *_func, GLsync sync) {
	((void (*)(GLsync sync))_func)(sync);
}
void gllCall_glDeleteTextures(void *_func, int32_t n, uint32_t *textures) {
	((void (*)(int32_t n, uint32_t *textures))_func)(n, textures);
}
void gllCall_glDeleteTexturesEXT(void *_func, int32_t n, uint32_t *textures) {
	((void (*)(int32_t n, uint32_t *textures))_func)(n, textures);
}
void gllCall_glDeleteTransformFeedbacks(void *_func, int32_t n, uint32_t *ids) {
	((void (*)(int32_t n, uint32_t *ids))_func)(n, ids);
}
void gllCall_glDeleteTransformFeedbacksNV(void *_func, int32_t n, uint32_t *ids) {
	((void (*)(int32_t n, uint32_t *ids))_func)(n, ids);
}
void gllCall_glDeleteVertexArrays(void *_func, int32_t n, uint32_t *arrays) {
	((void (*)(int32_t n, uint32_t *arrays))_func)(n, arrays);
}
void gllCall_glDeleteVertexArraysAPPLE(void *_func, int32_t n, uint32_t *arrays) {
	((void (*)(int32_t n, uint32_t *arrays))_func)(n, arrays);
}
void gllCall_glDeleteVertexArraysOES(void *_func, int32_t n, uint32_t *arrays) {
	((void (*)(int32_t n, uint32_t *arrays))_func)(n, arrays);
}
void gllCall_glDeleteVertexShaderEXT(void *_func, uint32_t id) {
	((void (*)(uint32_t id))_func)(id);
}
void gllCall_glDepthBoundsEXT(void *_func, double zmin, double zmax) {
	((void (*)(double zmin, double zmax))_func)(zmin, zmax);
}
void gllCall_glDepthBoundsdNV(void *_func, double zmin, double zmax) {
	((void (*)(double zmin, double zmax))_func)(zmin, zmax);
}
void gllCall_glDepthFunc(void *_func, uint32_t func) {
	((void (*)(uint32_t func))_func)(func);
}
void gllCall_glDepthMask(void *_func, _Bool flag) {
	((void (*)(_Bool flag))_func)(flag);
}
void gllCall_glDepthRange(void *_func, double n, double f) {
	((void (*)(double n, double f))_func)(n, f);
}
void gllCall_glDepthRangeArraydvNV(void *_func, uint32_t first, int32_t count, double *v) {
	((void (*)(uint32_t first, int32_t count, double *v))_func)(first, count, v);
}
void gllCall_glDepthRangeArrayfvNV(void *_func, uint32_t first, int32_t count, float *v) {
	((void (*)(uint32_t first, int32_t count, float *v))_func)(first, count, v);
}
void gllCall_glDepthRangeArrayfvOES(void *_func, uint32_t first, int32_t count, float *v) {
	((void (*)(uint32_t first, int32_t count, float *v))_func)(first, count, v);
}
void gllCall_glDepthRangeArrayv(void *_func, uint32_t first, int32_t count, double *v) {
	((void (*)(uint32_t first, int32_t count, double *v))_func)(first, count, v);
}
void gllCall_glDepthRangeIndexed(void *_func, uint32_t index, double n, double f) {
	((void (*)(uint32_t index, double n, double f))_func)(index, n, f);
}
void gllCall_glDepthRangeIndexeddNV(void *_func, uint32_t index, double n, double f) {
	((void (*)(uint32_t index, double n, double f))_func)(index, n, f);
}
void gllCall_glDepthRangeIndexedfNV(void *_func, uint32_t index, float n, float f) {
	((void (*)(uint32_t index, float n, float f))_func)(index, n, f);
}
void gllCall_glDepthRangeIndexedfOES(void *_func, uint32_t index, float n, float f) {
	((void (*)(uint32_t index, float n, float f))_func)(index, n, f);
}
void gllCall_glDepthRangedNV(void *_func, double zNear, double zFar) {
	((void (*)(double zNear, double zFar))_func)(zNear, zFar);
}
void gllCall_glDepthRangef(void *_func, float n, float f) {
	((void (*)(float n, float f))_func)(n, f);
}
void gllCall_glDepthRangefOES(void *_func, float n, float f) {
	((void (*)(float n, float f))_func)(n, f);
}
void gllCall_glDepthRangex(void *_func, int32_t n, int32_t f) {
	((void (*)(int32_t n, int32_t f))_func)(n, f);
}
void gllCall_glDepthRangexOES(void *_func, int32_t n, int32_t f) {
	((void (*)(int32_t n, int32_t f))_func)(n, f);
}
void gllCall_glDetachObjectARB(void *_func, GLhandleARB containerObj, GLhandleARB attachedObj) {
	((void (*)(GLhandleARB containerObj, GLhandleARB attachedObj))_func)(containerObj, attachedObj);
}
void gllCall_glDetachShader(void *_func, uint32_t program, uint32_t shader) {
	((void (*)(uint32_t program, uint32_t shader))_func)(program, shader);
}
void gllCall_glDetailTexFuncSGIS(void *_func, uint32_t target, int32_t n, float *points) {
	((void (*)(uint32_t target, int32_t n, float *points))_func)(target, n, points);
}
void gllCall_glDisable(void *_func, uint32_t cap) {
	((void (*)(uint32_t cap))_func)(cap);
}
void gllCall_glDisableClientState(void *_func, uint32_t array) {
	((void (*)(uint32_t array))_func)(array);
}
void gllCall_glDisableClientStateIndexedEXT(void *_func, uint32_t array, uint32_t index) {
	((void (*)(uint32_t array, uint32_t index))_func)(array, index);
}
void gllCall_glDisableClientStateiEXT(void *_func, uint32_t array, uint32_t index) {
	((void (*)(uint32_t array, uint32_t index))_func)(array, index);
}
void gllCall_glDisableDriverControlQCOM(void *_func, uint32_t driverControl) {
	((void (*)(uint32_t driverControl))_func)(driverControl);
}
void gllCall_glDisableIndexedEXT(void *_func, uint32_t target, uint32_t index) {
	((void (*)(uint32_t target, uint32_t index))_func)(target, index);
}
void gllCall_glDisableVariantClientStateEXT(void *_func, uint32_t id) {
	((void (*)(uint32_t id))_func)(id);
}
void gllCall_glDisableVertexArrayAttrib(void *_func, uint32_t vaobj, uint32_t index) {
	((void (*)(uint32_t vaobj, uint32_t index))_func)(vaobj, index);
}
void gllCall_glDisableVertexArrayAttribEXT(void *_func, uint32_t vaobj, uint32_t index) {
	((void (*)(uint32_t vaobj, uint32_t index))_func)(vaobj, index);
}
void gllCall_glDisableVertexArrayEXT(void *_func, uint32_t vaobj, uint32_t array) {
	((void (*)(uint32_t vaobj, uint32_t array))_func)(vaobj, array);
}
void gllCall_glDisableVertexAttribAPPLE(void *_func, uint32_t index, uint32_t pname) {
	((void (*)(uint32_t index, uint32_t pname))_func)(index, pname);
}
void gllCall_glDisableVertexAttribArray(void *_func, uint32_t index) {
	((void (*)(uint32_t index))_func)(index);
}
void gllCall_glDisableVertexAttribArrayARB(void *_func, uint32_t index) {
	((void (*)(uint32_t index))_func)(index);
}
void gllCall_glDisablei(void *_func, uint32_t target, uint32_t index) {
	((void (*)(uint32_t target, uint32_t index))_func)(target, index);
}
void gllCall_glDisableiEXT(void *_func, uint32_t target, uint32_t index) {
	((void (*)(uint32_t target, uint32_t index))_func)(target, index);
}
void gllCall_glDisableiNV(void *_func, uint32_t target, uint32_t index) {
	((void (*)(uint32_t target, uint32_t index))_func)(target, index);
}
void gllCall_glDisableiOES(void *_func, uint32_t target, uint32_t index) {
	((void (*)(uint32_t target, uint32_t index))_func)(target, index);
}
void gllCall_glDiscardFramebufferEXT(void *_func, uint32_t target, int32_t numAttachments, uint32_t *attachments) {
	((void (*)(uint32_t target, int32_t numAttachments, uint32_t *attachments))_func)(target, numAttachments, attachments);
}
void gllCall_glDispatchCompute(void *_func, uint32_t num_groups_x, uint32_t num_groups_y, uint32_t num_groups_z) {
	((void (*)(uint32_t num_groups_x, uint32_t num_groups_y, uint32_t num_groups_z))_func)(num_groups_x, num_groups_y, num_groups_z);
}
void gllCall_glDispatchComputeGroupSizeARB(void *_func, uint32_t num_groups_x, uint32_t num_groups_y, uint32_t num_groups_z, uint32_t group_size_x, uint32_t group_size_y, uint32_t group_size_z) {
	((void (*)(uint32_t num_groups_x, uint32_t num_groups_y, uint32_t num_groups_z, uint32_t group_size_x, uint32_t group_size_y, uint32_t group_size_z))_func)(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
}
void gllCall_glDispatchComputeIndirect(void *_func, intptr_t indirect) {
	((void (*)(intptr_t indirect))_func)(indirect);
}
void gllCall_glDrawArrays(void *_func, uint32_t mode, int32_t first, int32_t count) {
	((void (*)(uint32_t mode, int32_t first, int32_t count))_func)(mode, first, count);
}
void gllCall_glDrawArraysEXT(void *_func, uint32_t mode, int32_t first, int32_t count) {
	((void (*)(uint32_t mode, int32_t first, int32_t count))_func)(mode, first, count);
}
void gllCall_glDrawArraysIndirect(void *_func, uint32_t mode, void *indirect) {
	((void (*)(uint32_t mode, void *indirect))_func)(mode, indirect);
}
void gllCall_glDrawArraysInstanced(void *_func, uint32_t mode, int32_t first, int32_t count, int32_t instancecount) {
	((void (*)(uint32_t mode, int32_t first, int32_t count, int32_t instancecount))_func)(mode, first, count, instancecount);
}
void gllCall_glDrawArraysInstancedANGLE(void *_func, uint32_t mode, int32_t first, int32_t count, int32_t primcount) {
	((void (*)(uint32_t mode, int32_t first, int32_t count, int32_t primcount))_func)(mode, first, count, primcount);
}
void gllCall_glDrawArraysInstancedARB(void *_func, uint32_t mode, int32_t first, int32_t count, int32_t primcount) {
	((void (*)(uint32_t mode, int32_t first, int32_t count, int32_t primcount))_func)(mode, first, count, primcount);
}
void gllCall_glDrawArraysInstancedBaseInstance(void *_func, uint32_t mode, int32_t first, int32_t count, int32_t instancecount, uint32_t baseinstance) {
	((void (*)(uint32_t mode, int32_t first, int32_t count, int32_t instancecount, uint32_t baseinstance))_func)(mode, first, count, instancecount, baseinstance);
}
void gllCall_glDrawArraysInstancedBaseInstanceEXT(void *_func, uint32_t mode, int32_t first, int32_t count, int32_t instancecount, uint32_t baseinstance) {
	((void (*)(uint32_t mode, int32_t first, int32_t count, int32_t instancecount, uint32_t baseinstance))_func)(mode, first, count, instancecount, baseinstance);
}
void gllCall_glDrawArraysInstancedEXT(void *_func, uint32_t mode, int32_t start, int32_t count, int32_t primcount) {
	((void (*)(uint32_t mode, int32_t start, int32_t count, int32_t primcount))_func)(mode, start, count, primcount);
}
void gllCall_glDrawArraysInstancedNV(void *_func, uint32_t mode, int32_t first, int32_t count, int32_t primcount) {
	((void (*)(uint32_t mode, int32_t first, int32_t count, int32_t primcount))_func)(mode, first, count, primcount);
}
void gllCall_glDrawBuffer(void *_func, uint32_t buf) {
	((void (*)(uint32_t buf))_func)(buf);
}
void gllCall_glDrawBuffers(void *_func, int32_t n, uint32_t *bufs) {
	((void (*)(int32_t n, uint32_t *bufs))_func)(n, bufs);
}
void gllCall_glDrawBuffersARB(void *_func, int32_t n, uint32_t *bufs) {
	((void (*)(int32_t n, uint32_t *bufs))_func)(n, bufs);
}
void gllCall_glDrawBuffersATI(void *_func, int32_t n, uint32_t *bufs) {
	((void (*)(int32_t n, uint32_t *bufs))_func)(n, bufs);
}
void gllCall_glDrawBuffersEXT(void *_func, int32_t n, uint32_t *bufs) {
	((void (*)(int32_t n, uint32_t *bufs))_func)(n, bufs);
}
void gllCall_glDrawBuffersIndexedEXT(void *_func, int32_t n, uint32_t *location, int32_t *indices) {
	((void (*)(int32_t n, uint32_t *location, int32_t *indices))_func)(n, location, indices);
}
void gllCall_glDrawBuffersNV(void *_func, int32_t n, uint32_t *bufs) {
	((void (*)(int32_t n, uint32_t *bufs))_func)(n, bufs);
}
void gllCall_glDrawCommandsAddressNV(void *_func, uint32_t primitiveMode, uint64_t *indirects, int32_t *sizes, uint32_t count) {
	((void (*)(uint32_t primitiveMode, uint64_t *indirects, int32_t *sizes, uint32_t count))_func)(primitiveMode, indirects, sizes, count);
}
void gllCall_glDrawCommandsNV(void *_func, uint32_t primitiveMode, uint32_t buffer, intptr_t *indirects, int32_t *sizes, uint32_t count) {
	((void (*)(uint32_t primitiveMode, uint32_t buffer, intptr_t *indirects, int32_t *sizes, uint32_t count))_func)(primitiveMode, buffer, indirects, sizes, count);
}
void gllCall_glDrawCommandsStatesAddressNV(void *_func, uint64_t *indirects, int32_t *sizes, uint32_t *states, uint32_t *fbos, uint32_t count) {
	((void (*)(uint64_t *indirects, int32_t *sizes, uint32_t *states, uint32_t *fbos, uint32_t count))_func)(indirects, sizes, states, fbos, count);
}
void gllCall_glDrawCommandsStatesNV(void *_func, uint32_t buffer, intptr_t *indirects, int32_t *sizes, uint32_t *states, uint32_t *fbos, uint32_t count) {
	((void (*)(uint32_t buffer, intptr_t *indirects, int32_t *sizes, uint32_t *states, uint32_t *fbos, uint32_t count))_func)(buffer, indirects, sizes, states, fbos, count);
}
void gllCall_glDrawElementArrayAPPLE(void *_func, uint32_t mode, int32_t first, int32_t count) {
	((void (*)(uint32_t mode, int32_t first, int32_t count))_func)(mode, first, count);
}
void gllCall_glDrawElementArrayATI(void *_func, uint32_t mode, int32_t count) {
	((void (*)(uint32_t mode, int32_t count))_func)(mode, count);
}
void gllCall_glDrawElements(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices))_func)(mode, count, type, indices);
}
void gllCall_glDrawElementsBaseVertex(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t basevertex) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t basevertex))_func)(mode, count, type, indices, basevertex);
}
void gllCall_glDrawElementsBaseVertexEXT(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t basevertex) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t basevertex))_func)(mode, count, type, indices, basevertex);
}
void gllCall_glDrawElementsBaseVertexOES(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t basevertex) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t basevertex))_func)(mode, count, type, indices, basevertex);
}
void gllCall_glDrawElementsIndirect(void *_func, uint32_t mode, uint32_t type, void *indirect) {
	((void (*)(uint32_t mode, uint32_t type, void *indirect))_func)(mode, type, indirect);
}
void gllCall_glDrawElementsInstanced(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount))_func)(mode, count, type, indices, instancecount);
}
void gllCall_glDrawElementsInstancedANGLE(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t primcount) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t primcount))_func)(mode, count, type, indices, primcount);
}
void gllCall_glDrawElementsInstancedARB(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t primcount) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t primcount))_func)(mode, count, type, indices, primcount);
}
void gllCall_glDrawElementsInstancedBaseInstance(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount, uint32_t baseinstance) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount, uint32_t baseinstance))_func)(mode, count, type, indices, instancecount, baseinstance);
}
void gllCall_glDrawElementsInstancedBaseInstanceEXT(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount, uint32_t baseinstance) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount, uint32_t baseinstance))_func)(mode, count, type, indices, instancecount, baseinstance);
}
void gllCall_glDrawElementsInstancedBaseVertex(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount, int32_t basevertex) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount, int32_t basevertex))_func)(mode, count, type, indices, instancecount, basevertex);
}
void gllCall_glDrawElementsInstancedBaseVertexBaseInstance(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount, int32_t basevertex, uint32_t baseinstance) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount, int32_t basevertex, uint32_t baseinstance))_func)(mode, count, type, indices, instancecount, basevertex, baseinstance);
}
void gllCall_glDrawElementsInstancedBaseVertexBaseInstanceEXT(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount, int32_t basevertex, uint32_t baseinstance) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount, int32_t basevertex, uint32_t baseinstance))_func)(mode, count, type, indices, instancecount, basevertex, baseinstance);
}
void gllCall_glDrawElementsInstancedBaseVertexEXT(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount, int32_t basevertex) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount, int32_t basevertex))_func)(mode, count, type, indices, instancecount, basevertex);
}
void gllCall_glDrawElementsInstancedBaseVertexOES(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount, int32_t basevertex) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t instancecount, int32_t basevertex))_func)(mode, count, type, indices, instancecount, basevertex);
}
void gllCall_glDrawElementsInstancedEXT(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t primcount) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t primcount))_func)(mode, count, type, indices, primcount);
}
void gllCall_glDrawElementsInstancedNV(void *_func, uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t primcount) {
	((void (*)(uint32_t mode, int32_t count, uint32_t type, void *indices, int32_t primcount))_func)(mode, count, type, indices, primcount);
}
void gllCall_glDrawMeshArraysSUN(void *_func, uint32_t mode, int32_t first, int32_t count, int32_t width) {
	((void (*)(uint32_t mode, int32_t first, int32_t count, int32_t width))_func)(mode, first, count, width);
}
void gllCall_glDrawMeshTasksNV(void *_func, uint32_t first, uint32_t count) {
	((void (*)(uint32_t first, uint32_t count))_func)(first, count);
}
void gllCall_glDrawMeshTasksIndirectNV(void *_func, intptr_t indirect) {
	((void (*)(intptr_t indirect))_func)(indirect);
}
void gllCall_glDrawPixels(void *_func, int32_t width, int32_t height, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(int32_t width, int32_t height, uint32_t format, uint32_t type, void *pixels))_func)(width, height, format, type, pixels);
}
void gllCall_glDrawRangeElementArrayAPPLE(void *_func, uint32_t mode, uint32_t start, uint32_t end, int32_t first, int32_t count) {
	((void (*)(uint32_t mode, uint32_t start, uint32_t end, int32_t first, int32_t count))_func)(mode, start, end, first, count);
}
void gllCall_glDrawRangeElementArrayATI(void *_func, uint32_t mode, uint32_t start, uint32_t end, int32_t count) {
	((void (*)(uint32_t mode, uint32_t start, uint32_t end, int32_t count))_func)(mode, start, end, count);
}
void gllCall_glDrawRangeElements(void *_func, uint32_t mode, uint32_t start, uint32_t end, int32_t count, uint32_t type, void *indices) {
	((void (*)(uint32_t mode, uint32_t start, uint32_t end, int32_t count, uint32_t type, void *indices))_func)(mode, start, end, count, type, indices);
}
void gllCall_glDrawRangeElementsBaseVertex(void *_func, uint32_t mode, uint32_t start, uint32_t end, int32_t count, uint32_t type, void *indices, int32_t basevertex) {
	((void (*)(uint32_t mode, uint32_t start, uint32_t end, int32_t count, uint32_t type, void *indices, int32_t basevertex))_func)(mode, start, end, count, type, indices, basevertex);
}
void gllCall_glDrawRangeElementsBaseVertexEXT(void *_func, uint32_t mode, uint32_t start, uint32_t end, int32_t count, uint32_t type, void *indices, int32_t basevertex) {
	((void (*)(uint32_t mode, uint32_t start, uint32_t end, int32_t count, uint32_t type, void *indices, int32_t basevertex))_func)(mode, start, end, count, type, indices, basevertex);
}
void gllCall_glDrawRangeElementsBaseVertexOES(void *_func, uint32_t mode, uint32_t start, uint32_t end, int32_t count, uint32_t type, void *indices, int32_t basevertex) {
	((void (*)(uint32_t mode, uint32_t start, uint32_t end, int32_t count, uint32_t type, void *indices, int32_t basevertex))_func)(mode, start, end, count, type, indices, basevertex);
}
void gllCall_glDrawRangeElementsEXT(void *_func, uint32_t mode, uint32_t start, uint32_t end, int32_t count, uint32_t type, void *indices) {
	((void (*)(uint32_t mode, uint32_t start, uint32_t end, int32_t count, uint32_t type, void *indices))_func)(mode, start, end, count, type, indices);
}
void gllCall_glDrawTexfOES(void *_func, float x, float y, float z, float width, float height) {
	((void (*)(float x, float y, float z, float width, float height))_func)(x, y, z, width, height);
}
void gllCall_glDrawTexfvOES(void *_func, float *coords) {
	((void (*)(float *coords))_func)(coords);
}
void gllCall_glDrawTexiOES(void *_func, int32_t x, int32_t y, int32_t z, int32_t width, int32_t height) {
	((void (*)(int32_t x, int32_t y, int32_t z, int32_t width, int32_t height))_func)(x, y, z, width, height);
}
void gllCall_glDrawTexivOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glDrawTexsOES(void *_func, int16_t x, int16_t y, int16_t z, int16_t width, int16_t height) {
	((void (*)(int16_t x, int16_t y, int16_t z, int16_t width, int16_t height))_func)(x, y, z, width, height);
}
void gllCall_glDrawTexsvOES(void *_func, int16_t *coords) {
	((void (*)(int16_t *coords))_func)(coords);
}
void gllCall_glDrawTextureNV(void *_func, uint32_t texture, uint32_t sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1) {
	((void (*)(uint32_t texture, uint32_t sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1))_func)(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}
void gllCall_glDrawTexxOES(void *_func, int32_t x, int32_t y, int32_t z, int32_t width, int32_t height) {
	((void (*)(int32_t x, int32_t y, int32_t z, int32_t width, int32_t height))_func)(x, y, z, width, height);
}
void gllCall_glDrawTexxvOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glDrawTransformFeedback(void *_func, uint32_t mode, uint32_t id) {
	((void (*)(uint32_t mode, uint32_t id))_func)(mode, id);
}
void gllCall_glDrawTransformFeedbackEXT(void *_func, uint32_t mode, uint32_t id) {
	((void (*)(uint32_t mode, uint32_t id))_func)(mode, id);
}
void gllCall_glDrawTransformFeedbackInstanced(void *_func, uint32_t mode, uint32_t id, int32_t instancecount) {
	((void (*)(uint32_t mode, uint32_t id, int32_t instancecount))_func)(mode, id, instancecount);
}
void gllCall_glDrawTransformFeedbackInstancedEXT(void *_func, uint32_t mode, uint32_t id, int32_t instancecount) {
	((void (*)(uint32_t mode, uint32_t id, int32_t instancecount))_func)(mode, id, instancecount);
}
void gllCall_glDrawTransformFeedbackNV(void *_func, uint32_t mode, uint32_t id) {
	((void (*)(uint32_t mode, uint32_t id))_func)(mode, id);
}
void gllCall_glDrawTransformFeedbackStream(void *_func, uint32_t mode, uint32_t id, uint32_t stream) {
	((void (*)(uint32_t mode, uint32_t id, uint32_t stream))_func)(mode, id, stream);
}
void gllCall_glDrawTransformFeedbackStreamInstanced(void *_func, uint32_t mode, uint32_t id, uint32_t stream, int32_t instancecount) {
	((void (*)(uint32_t mode, uint32_t id, uint32_t stream, int32_t instancecount))_func)(mode, id, stream, instancecount);
}
void gllCall_glEdgeFlag(void *_func, _Bool flag) {
	((void (*)(_Bool flag))_func)(flag);
}
void gllCall_glEdgeFlagFormatNV(void *_func, int32_t stride) {
	((void (*)(int32_t stride))_func)(stride);
}
void gllCall_glEdgeFlagPointer(void *_func, int32_t stride, void *pointer) {
	((void (*)(int32_t stride, void *pointer))_func)(stride, pointer);
}
void gllCall_glEdgeFlagPointerEXT(void *_func, int32_t stride, int32_t count, _Bool *pointer) {
	((void (*)(int32_t stride, int32_t count, _Bool *pointer))_func)(stride, count, pointer);
}
void gllCall_glEdgeFlagPointerListIBM(void *_func, int32_t stride, _Bool **pointer, int32_t ptrstride) {
	((void (*)(int32_t stride, _Bool **pointer, int32_t ptrstride))_func)(stride, pointer, ptrstride);
}
void gllCall_glEdgeFlagv(void *_func, _Bool *flag) {
	((void (*)(_Bool *flag))_func)(flag);
}
void gllCall_glElementPointerAPPLE(void *_func, uint32_t type, void *pointer) {
	((void (*)(uint32_t type, void *pointer))_func)(type, pointer);
}
void gllCall_glElementPointerATI(void *_func, uint32_t type, void *pointer) {
	((void (*)(uint32_t type, void *pointer))_func)(type, pointer);
}
void gllCall_glEnable(void *_func, uint32_t cap) {
	((void (*)(uint32_t cap))_func)(cap);
}
void gllCall_glEnableClientState(void *_func, uint32_t array) {
	((void (*)(uint32_t array))_func)(array);
}
void gllCall_glEnableClientStateIndexedEXT(void *_func, uint32_t array, uint32_t index) {
	((void (*)(uint32_t array, uint32_t index))_func)(array, index);
}
void gllCall_glEnableClientStateiEXT(void *_func, uint32_t array, uint32_t index) {
	((void (*)(uint32_t array, uint32_t index))_func)(array, index);
}
void gllCall_glEnableDriverControlQCOM(void *_func, uint32_t driverControl) {
	((void (*)(uint32_t driverControl))_func)(driverControl);
}
void gllCall_glEnableIndexedEXT(void *_func, uint32_t target, uint32_t index) {
	((void (*)(uint32_t target, uint32_t index))_func)(target, index);
}
void gllCall_glEnableVariantClientStateEXT(void *_func, uint32_t id) {
	((void (*)(uint32_t id))_func)(id);
}
void gllCall_glEnableVertexArrayAttrib(void *_func, uint32_t vaobj, uint32_t index) {
	((void (*)(uint32_t vaobj, uint32_t index))_func)(vaobj, index);
}
void gllCall_glEnableVertexArrayAttribEXT(void *_func, uint32_t vaobj, uint32_t index) {
	((void (*)(uint32_t vaobj, uint32_t index))_func)(vaobj, index);
}
void gllCall_glEnableVertexArrayEXT(void *_func, uint32_t vaobj, uint32_t array) {
	((void (*)(uint32_t vaobj, uint32_t array))_func)(vaobj, array);
}
void gllCall_glEnableVertexAttribAPPLE(void *_func, uint32_t index, uint32_t pname) {
	((void (*)(uint32_t index, uint32_t pname))_func)(index, pname);
}
void gllCall_glEnableVertexAttribArray(void *_func, uint32_t index) {
	((void (*)(uint32_t index))_func)(index);
}
void gllCall_glEnableVertexAttribArrayARB(void *_func, uint32_t index) {
	((void (*)(uint32_t index))_func)(index);
}
void gllCall_glEnablei(void *_func, uint32_t target, uint32_t index) {
	((void (*)(uint32_t target, uint32_t index))_func)(target, index);
}
void gllCall_glEnableiEXT(void *_func, uint32_t target, uint32_t index) {
	((void (*)(uint32_t target, uint32_t index))_func)(target, index);
}
void gllCall_glEnableiNV(void *_func, uint32_t target, uint32_t index) {
	((void (*)(uint32_t target, uint32_t index))_func)(target, index);
}
void gllCall_glEnableiOES(void *_func, uint32_t target, uint32_t index) {
	((void (*)(uint32_t target, uint32_t index))_func)(target, index);
}
void gllCall_glEnd(void *_func) {
	((void (*)())_func)();
}
void gllCall_glEndConditionalRender(void *_func) {
	((void (*)())_func)();
}
void gllCall_glEndConditionalRenderNV(void *_func) {
	((void (*)())_func)();
}
void gllCall_glEndConditionalRenderNVX(void *_func) {
	((void (*)())_func)();
}
void gllCall_glEndFragmentShaderATI(void *_func) {
	((void (*)())_func)();
}
void gllCall_glEndList(void *_func) {
	((void (*)())_func)();
}
void gllCall_glEndOcclusionQueryNV(void *_func) {
	((void (*)())_func)();
}
void gllCall_glEndPerfMonitorAMD(void *_func, uint32_t monitor) {
	((void (*)(uint32_t monitor))_func)(monitor);
}
void gllCall_glEndPerfQueryINTEL(void *_func, uint32_t queryHandle) {
	((void (*)(uint32_t queryHandle))_func)(queryHandle);
}
void gllCall_glEndQuery(void *_func, uint32_t target) {
	((void (*)(uint32_t target))_func)(target);
}
void gllCall_glEndQueryARB(void *_func, uint32_t target) {
	((void (*)(uint32_t target))_func)(target);
}
void gllCall_glEndQueryEXT(void *_func, uint32_t target) {
	((void (*)(uint32_t target))_func)(target);
}
void gllCall_glEndQueryIndexed(void *_func, uint32_t target, uint32_t index) {
	((void (*)(uint32_t target, uint32_t index))_func)(target, index);
}
void gllCall_glEndTilingQCOM(void *_func, uint32_t preserveMask) {
	((void (*)(uint32_t preserveMask))_func)(preserveMask);
}
void gllCall_glEndTransformFeedback(void *_func) {
	((void (*)())_func)();
}
void gllCall_glEndTransformFeedbackEXT(void *_func) {
	((void (*)())_func)();
}
void gllCall_glEndTransformFeedbackNV(void *_func) {
	((void (*)())_func)();
}
void gllCall_glEndVertexShaderEXT(void *_func) {
	((void (*)())_func)();
}
void gllCall_glEndVideoCaptureNV(void *_func, uint32_t video_capture_slot) {
	((void (*)(uint32_t video_capture_slot))_func)(video_capture_slot);
}
void gllCall_glEvalCoord1d(void *_func, double u) {
	((void (*)(double u))_func)(u);
}
void gllCall_glEvalCoord1dv(void *_func, double *u) {
	((void (*)(double *u))_func)(u);
}
void gllCall_glEvalCoord1f(void *_func, float u) {
	((void (*)(float u))_func)(u);
}
void gllCall_glEvalCoord1fv(void *_func, float *u) {
	((void (*)(float *u))_func)(u);
}
void gllCall_glEvalCoord1xOES(void *_func, int32_t u) {
	((void (*)(int32_t u))_func)(u);
}
void gllCall_glEvalCoord1xvOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glEvalCoord2d(void *_func, double u, double v) {
	((void (*)(double u, double v))_func)(u, v);
}
void gllCall_glEvalCoord2dv(void *_func, double *u) {
	((void (*)(double *u))_func)(u);
}
void gllCall_glEvalCoord2f(void *_func, float u, float v) {
	((void (*)(float u, float v))_func)(u, v);
}
void gllCall_glEvalCoord2fv(void *_func, float *u) {
	((void (*)(float *u))_func)(u);
}
void gllCall_glEvalCoord2xOES(void *_func, int32_t u, int32_t v) {
	((void (*)(int32_t u, int32_t v))_func)(u, v);
}
void gllCall_glEvalCoord2xvOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glEvalMapsNV(void *_func, uint32_t target, uint32_t mode) {
	((void (*)(uint32_t target, uint32_t mode))_func)(target, mode);
}
void gllCall_glEvalMesh1(void *_func, uint32_t mode, int32_t i1, int32_t i2) {
	((void (*)(uint32_t mode, int32_t i1, int32_t i2))_func)(mode, i1, i2);
}
void gllCall_glEvalMesh2(void *_func, uint32_t mode, int32_t i1, int32_t i2, int32_t j1, int32_t j2) {
	((void (*)(uint32_t mode, int32_t i1, int32_t i2, int32_t j1, int32_t j2))_func)(mode, i1, i2, j1, j2);
}
void gllCall_glEvalPoint1(void *_func, int32_t i) {
	((void (*)(int32_t i))_func)(i);
}
void gllCall_glEvalPoint2(void *_func, int32_t i, int32_t j) {
	((void (*)(int32_t i, int32_t j))_func)(i, j);
}
void gllCall_glEvaluateDepthValuesARB(void *_func) {
	((void (*)())_func)();
}
void gllCall_glExecuteProgramNV(void *_func, uint32_t target, uint32_t id, float *params) {
	((void (*)(uint32_t target, uint32_t id, float *params))_func)(target, id, params);
}
void gllCall_glExtGetBufferPointervQCOM(void *_func, uint32_t target, void **params) {
	((void (*)(uint32_t target, void **params))_func)(target, params);
}
void gllCall_glExtGetBuffersQCOM(void *_func, uint32_t *buffers, int32_t maxBuffers, int32_t *numBuffers) {
	((void (*)(uint32_t *buffers, int32_t maxBuffers, int32_t *numBuffers))_func)(buffers, maxBuffers, numBuffers);
}
void gllCall_glExtGetFramebuffersQCOM(void *_func, uint32_t *framebuffers, int32_t maxFramebuffers, int32_t *numFramebuffers) {
	((void (*)(uint32_t *framebuffers, int32_t maxFramebuffers, int32_t *numFramebuffers))_func)(framebuffers, maxFramebuffers, numFramebuffers);
}
void gllCall_glExtGetProgramBinarySourceQCOM(void *_func, uint32_t program, uint32_t shadertype, uint8_t *source, int32_t *length) {
	((void (*)(uint32_t program, uint32_t shadertype, uint8_t *source, int32_t *length))_func)(program, shadertype, source, length);
}
void gllCall_glExtGetProgramsQCOM(void *_func, uint32_t *programs, int32_t maxPrograms, int32_t *numPrograms) {
	((void (*)(uint32_t *programs, int32_t maxPrograms, int32_t *numPrograms))_func)(programs, maxPrograms, numPrograms);
}
void gllCall_glExtGetRenderbuffersQCOM(void *_func, uint32_t *renderbuffers, int32_t maxRenderbuffers, int32_t *numRenderbuffers) {
	((void (*)(uint32_t *renderbuffers, int32_t maxRenderbuffers, int32_t *numRenderbuffers))_func)(renderbuffers, maxRenderbuffers, numRenderbuffers);
}
void gllCall_glExtGetShadersQCOM(void *_func, uint32_t *shaders, int32_t maxShaders, int32_t *numShaders) {
	((void (*)(uint32_t *shaders, int32_t maxShaders, int32_t *numShaders))_func)(shaders, maxShaders, numShaders);
}
void gllCall_glExtGetTexLevelParameterivQCOM(void *_func, uint32_t texture, uint32_t face, int32_t level, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texture, uint32_t face, int32_t level, uint32_t pname, int32_t *params))_func)(texture, face, level, pname, params);
}
void gllCall_glExtGetTexSubImageQCOM(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *texels) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *texels))_func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
}
void gllCall_glExtGetTexturesQCOM(void *_func, uint32_t *textures, int32_t maxTextures, int32_t *numTextures) {
	((void (*)(uint32_t *textures, int32_t maxTextures, int32_t *numTextures))_func)(textures, maxTextures, numTextures);
}
_Bool gllCall_glExtIsProgramBinaryQCOM(void *_func, uint32_t program) {
	return ((_Bool (*)(uint32_t program))_func)(program);
}
void gllCall_glExtTexObjectStateOverrideiQCOM(void *_func, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t target, uint32_t pname, int32_t param))_func)(target, pname, param);
}
void gllCall_glExtractComponentEXT(void *_func, uint32_t res, uint32_t src, uint32_t num) {
	((void (*)(uint32_t res, uint32_t src, uint32_t num))_func)(res, src, num);
}
void gllCall_glFeedbackBuffer(void *_func, int32_t size, uint32_t type, float *buffer) {
	((void (*)(int32_t size, uint32_t type, float *buffer))_func)(size, type, buffer);
}
void gllCall_glFeedbackBufferxOES(void *_func, int32_t n, uint32_t type, int32_t *buffer) {
	((void (*)(int32_t n, uint32_t type, int32_t *buffer))_func)(n, type, buffer);
}
GLsync gllCall_glFenceSync(void *_func, uint32_t condition, uint32_t flags) {
	return ((GLsync (*)(uint32_t condition, uint32_t flags))_func)(condition, flags);
}
GLsync gllCall_glFenceSyncAPPLE(void *_func, uint32_t condition, uint32_t flags) {
	return ((GLsync (*)(uint32_t condition, uint32_t flags))_func)(condition, flags);
}
void gllCall_glFinalCombinerInputNV(void *_func, uint32_t variable, uint32_t input, uint32_t mapping, uint32_t componentUsage) {
	((void (*)(uint32_t variable, uint32_t input, uint32_t mapping, uint32_t componentUsage))_func)(variable, input, mapping, componentUsage);
}
void gllCall_glFinish(void *_func) {
	((void (*)())_func)();
}
int32_t gllCall_glFinishAsyncSGIX(void *_func, uint32_t *markerp) {
	return ((int32_t (*)(uint32_t *markerp))_func)(markerp);
}
void gllCall_glFinishFenceAPPLE(void *_func, uint32_t fence) {
	((void (*)(uint32_t fence))_func)(fence);
}
void gllCall_glFinishFenceNV(void *_func, uint32_t fence) {
	((void (*)(uint32_t fence))_func)(fence);
}
void gllCall_glFinishObjectAPPLE(void *_func, uint32_t object, int32_t name) {
	((void (*)(uint32_t object, int32_t name))_func)(object, name);
}
void gllCall_glFinishTextureSUNX(void *_func) {
	((void (*)())_func)();
}
void gllCall_glFlush(void *_func) {
	((void (*)())_func)();
}
void gllCall_glFlushMappedBufferRange(void *_func, uint32_t target, intptr_t offset, ssize_t length) {
	((void (*)(uint32_t target, intptr_t offset, ssize_t length))_func)(target, offset, length);
}
void gllCall_glFlushMappedBufferRangeAPPLE(void *_func, uint32_t target, intptr_t offset, ssize_t size) {
	((void (*)(uint32_t target, intptr_t offset, ssize_t size))_func)(target, offset, size);
}
void gllCall_glFlushMappedBufferRangeEXT(void *_func, uint32_t target, intptr_t offset, ssize_t length) {
	((void (*)(uint32_t target, intptr_t offset, ssize_t length))_func)(target, offset, length);
}
void gllCall_glFlushMappedNamedBufferRange(void *_func, uint32_t buffer, intptr_t offset, ssize_t length) {
	((void (*)(uint32_t buffer, intptr_t offset, ssize_t length))_func)(buffer, offset, length);
}
void gllCall_glFlushMappedNamedBufferRangeEXT(void *_func, uint32_t buffer, intptr_t offset, ssize_t length) {
	((void (*)(uint32_t buffer, intptr_t offset, ssize_t length))_func)(buffer, offset, length);
}
void gllCall_glFlushPixelDataRangeNV(void *_func, uint32_t target) {
	((void (*)(uint32_t target))_func)(target);
}
void gllCall_glFlushRasterSGIX(void *_func) {
	((void (*)())_func)();
}
void gllCall_glFlushStaticDataIBM(void *_func, uint32_t target) {
	((void (*)(uint32_t target))_func)(target);
}
void gllCall_glFlushVertexArrayRangeAPPLE(void *_func, int32_t length, void *pointer) {
	((void (*)(int32_t length, void *pointer))_func)(length, pointer);
}
void gllCall_glFlushVertexArrayRangeNV(void *_func) {
	((void (*)())_func)();
}
void gllCall_glFogCoordFormatNV(void *_func, uint32_t type, int32_t stride) {
	((void (*)(uint32_t type, int32_t stride))_func)(type, stride);
}
void gllCall_glFogCoordPointer(void *_func, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(uint32_t type, int32_t stride, void *pointer))_func)(type, stride, pointer);
}
void gllCall_glFogCoordPointerEXT(void *_func, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(uint32_t type, int32_t stride, void *pointer))_func)(type, stride, pointer);
}
void gllCall_glFogCoordPointerListIBM(void *_func, uint32_t type, int32_t stride, void **pointer, int32_t ptrstride) {
	((void (*)(uint32_t type, int32_t stride, void **pointer, int32_t ptrstride))_func)(type, stride, pointer, ptrstride);
}
void gllCall_glFogCoordd(void *_func, double coord) {
	((void (*)(double coord))_func)(coord);
}
void gllCall_glFogCoorddEXT(void *_func, double coord) {
	((void (*)(double coord))_func)(coord);
}
void gllCall_glFogCoorddv(void *_func, double *coord) {
	((void (*)(double *coord))_func)(coord);
}
void gllCall_glFogCoorddvEXT(void *_func, double *coord) {
	((void (*)(double *coord))_func)(coord);
}
void gllCall_glFogCoordf(void *_func, float coord) {
	((void (*)(float coord))_func)(coord);
}
void gllCall_glFogCoordfEXT(void *_func, float coord) {
	((void (*)(float coord))_func)(coord);
}
void gllCall_glFogCoordfv(void *_func, float *coord) {
	((void (*)(float *coord))_func)(coord);
}
void gllCall_glFogCoordfvEXT(void *_func, float *coord) {
	((void (*)(float *coord))_func)(coord);
}
void gllCall_glFogCoordhNV(void *_func, uint16_t fog) {
	((void (*)(uint16_t fog))_func)(fog);
}
void gllCall_glFogCoordhvNV(void *_func, uint16_t *fog) {
	((void (*)(uint16_t *fog))_func)(fog);
}
void gllCall_glFogFuncSGIS(void *_func, int32_t n, float *points) {
	((void (*)(int32_t n, float *points))_func)(n, points);
}
void gllCall_glFogf(void *_func, uint32_t pname, float param) {
	((void (*)(uint32_t pname, float param))_func)(pname, param);
}
void gllCall_glFogfv(void *_func, uint32_t pname, float *params) {
	((void (*)(uint32_t pname, float *params))_func)(pname, params);
}
void gllCall_glFogi(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glFogiv(void *_func, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pname, int32_t *params))_func)(pname, params);
}
void gllCall_glFogx(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glFogxOES(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glFogxv(void *_func, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t pname, int32_t *param))_func)(pname, param);
}
void gllCall_glFogxvOES(void *_func, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t pname, int32_t *param))_func)(pname, param);
}
void gllCall_glFragmentColorMaterialSGIX(void *_func, uint32_t face, uint32_t mode) {
	((void (*)(uint32_t face, uint32_t mode))_func)(face, mode);
}
void gllCall_glFragmentCoverageColorNV(void *_func, uint32_t color) {
	((void (*)(uint32_t color))_func)(color);
}
void gllCall_glFragmentLightModelfSGIX(void *_func, uint32_t pname, float param) {
	((void (*)(uint32_t pname, float param))_func)(pname, param);
}
void gllCall_glFragmentLightModelfvSGIX(void *_func, uint32_t pname, float *params) {
	((void (*)(uint32_t pname, float *params))_func)(pname, params);
}
void gllCall_glFragmentLightModeliSGIX(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glFragmentLightModelivSGIX(void *_func, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pname, int32_t *params))_func)(pname, params);
}
void gllCall_glFragmentLightfSGIX(void *_func, uint32_t light, uint32_t pname, float param) {
	((void (*)(uint32_t light, uint32_t pname, float param))_func)(light, pname, param);
}
void gllCall_glFragmentLightfvSGIX(void *_func, uint32_t light, uint32_t pname, float *params) {
	((void (*)(uint32_t light, uint32_t pname, float *params))_func)(light, pname, params);
}
void gllCall_glFragmentLightiSGIX(void *_func, uint32_t light, uint32_t pname, int32_t param) {
	((void (*)(uint32_t light, uint32_t pname, int32_t param))_func)(light, pname, param);
}
void gllCall_glFragmentLightivSGIX(void *_func, uint32_t light, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t light, uint32_t pname, int32_t *params))_func)(light, pname, params);
}
void gllCall_glFragmentMaterialfSGIX(void *_func, uint32_t face, uint32_t pname, float param) {
	((void (*)(uint32_t face, uint32_t pname, float param))_func)(face, pname, param);
}
void gllCall_glFragmentMaterialfvSGIX(void *_func, uint32_t face, uint32_t pname, float *params) {
	((void (*)(uint32_t face, uint32_t pname, float *params))_func)(face, pname, params);
}
void gllCall_glFragmentMaterialiSGIX(void *_func, uint32_t face, uint32_t pname, int32_t param) {
	((void (*)(uint32_t face, uint32_t pname, int32_t param))_func)(face, pname, param);
}
void gllCall_glFragmentMaterialivSGIX(void *_func, uint32_t face, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t face, uint32_t pname, int32_t *params))_func)(face, pname, params);
}
void gllCall_glFrameTerminatorGREMEDY(void *_func) {
	((void (*)())_func)();
}
void gllCall_glFrameZoomSGIX(void *_func, int32_t factor) {
	((void (*)(int32_t factor))_func)(factor);
}
void gllCall_glFramebufferDrawBufferEXT(void *_func, uint32_t framebuffer, uint32_t mode) {
	((void (*)(uint32_t framebuffer, uint32_t mode))_func)(framebuffer, mode);
}
void gllCall_glFramebufferDrawBuffersEXT(void *_func, uint32_t framebuffer, int32_t n, uint32_t *bufs) {
	((void (*)(uint32_t framebuffer, int32_t n, uint32_t *bufs))_func)(framebuffer, n, bufs);
}
void gllCall_glFramebufferFetchBarrierEXT(void *_func) {
	((void (*)())_func)();
}
void gllCall_glFramebufferFetchBarrierQCOM(void *_func) {
	((void (*)())_func)();
}
void gllCall_glFramebufferFoveationConfigQCOM(void *_func, uint32_t framebuffer, uint32_t numLayers, uint32_t focalPointsPerLayer, uint32_t requestedFeatures, uint32_t *providedFeatures) {
	((void (*)(uint32_t framebuffer, uint32_t numLayers, uint32_t focalPointsPerLayer, uint32_t requestedFeatures, uint32_t *providedFeatures))_func)(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
}
void gllCall_glFramebufferFoveationParametersQCOM(void *_func, uint32_t framebuffer, uint32_t layer, uint32_t focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea) {
	((void (*)(uint32_t framebuffer, uint32_t layer, uint32_t focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea))_func)(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
}
void gllCall_glFramebufferParameteri(void *_func, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t target, uint32_t pname, int32_t param))_func)(target, pname, param);
}
void gllCall_glFramebufferPixelLocalStorageSizeEXT(void *_func, uint32_t target, int32_t size) {
	((void (*)(uint32_t target, int32_t size))_func)(target, size);
}
void gllCall_glFramebufferReadBufferEXT(void *_func, uint32_t framebuffer, uint32_t mode) {
	((void (*)(uint32_t framebuffer, uint32_t mode))_func)(framebuffer, mode);
}
void gllCall_glFramebufferRenderbuffer(void *_func, uint32_t target, uint32_t attachment, uint32_t renderbuffertarget, uint32_t renderbuffer) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t renderbuffertarget, uint32_t renderbuffer))_func)(target, attachment, renderbuffertarget, renderbuffer);
}
void gllCall_glFramebufferRenderbufferEXT(void *_func, uint32_t target, uint32_t attachment, uint32_t renderbuffertarget, uint32_t renderbuffer) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t renderbuffertarget, uint32_t renderbuffer))_func)(target, attachment, renderbuffertarget, renderbuffer);
}
void gllCall_glFramebufferRenderbufferOES(void *_func, uint32_t target, uint32_t attachment, uint32_t renderbuffertarget, uint32_t renderbuffer) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t renderbuffertarget, uint32_t renderbuffer))_func)(target, attachment, renderbuffertarget, renderbuffer);
}
void gllCall_glFramebufferSampleLocationsfvARB(void *_func, uint32_t target, uint32_t start, int32_t count, float *v) {
	((void (*)(uint32_t target, uint32_t start, int32_t count, float *v))_func)(target, start, count, v);
}
void gllCall_glFramebufferSampleLocationsfvNV(void *_func, uint32_t target, uint32_t start, int32_t count, float *v) {
	((void (*)(uint32_t target, uint32_t start, int32_t count, float *v))_func)(target, start, count, v);
}
void gllCall_glFramebufferSamplePositionsfvAMD(void *_func, uint32_t target, uint32_t numsamples, uint32_t pixelindex, float *values) {
	((void (*)(uint32_t target, uint32_t numsamples, uint32_t pixelindex, float *values))_func)(target, numsamples, pixelindex, values);
}
void gllCall_glFramebufferTexture(void *_func, uint32_t target, uint32_t attachment, uint32_t texture, int32_t level) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t texture, int32_t level))_func)(target, attachment, texture, level);
}
void gllCall_glFramebufferTexture1D(void *_func, uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level))_func)(target, attachment, textarget, texture, level);
}
void gllCall_glFramebufferTexture1DEXT(void *_func, uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level))_func)(target, attachment, textarget, texture, level);
}
void gllCall_glFramebufferTexture2D(void *_func, uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level))_func)(target, attachment, textarget, texture, level);
}
void gllCall_glFramebufferTexture2DEXT(void *_func, uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level))_func)(target, attachment, textarget, texture, level);
}
void gllCall_glFramebufferTexture2DDownsampleIMG(void *_func, uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level, int32_t xscale, int32_t yscale) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level, int32_t xscale, int32_t yscale))_func)(target, attachment, textarget, texture, level, xscale, yscale);
}
void gllCall_glFramebufferTexture2DMultisampleEXT(void *_func, uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level, int32_t samples) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level, int32_t samples))_func)(target, attachment, textarget, texture, level, samples);
}
void gllCall_glFramebufferTexture2DMultisampleIMG(void *_func, uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level, int32_t samples) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level, int32_t samples))_func)(target, attachment, textarget, texture, level, samples);
}
void gllCall_glFramebufferTexture2DOES(void *_func, uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level))_func)(target, attachment, textarget, texture, level);
}
void gllCall_glFramebufferTexture3D(void *_func, uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level, int32_t zoffset) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level, int32_t zoffset))_func)(target, attachment, textarget, texture, level, zoffset);
}
void gllCall_glFramebufferTexture3DEXT(void *_func, uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level, int32_t zoffset) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level, int32_t zoffset))_func)(target, attachment, textarget, texture, level, zoffset);
}
void gllCall_glFramebufferTexture3DOES(void *_func, uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level, int32_t zoffset) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level, int32_t zoffset))_func)(target, attachment, textarget, texture, level, zoffset);
}
void gllCall_glFramebufferTextureARB(void *_func, uint32_t target, uint32_t attachment, uint32_t texture, int32_t level) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t texture, int32_t level))_func)(target, attachment, texture, level);
}
void gllCall_glFramebufferTextureEXT(void *_func, uint32_t target, uint32_t attachment, uint32_t texture, int32_t level) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t texture, int32_t level))_func)(target, attachment, texture, level);
}
void gllCall_glFramebufferTextureFaceARB(void *_func, uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, uint32_t face) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, uint32_t face))_func)(target, attachment, texture, level, face);
}
void gllCall_glFramebufferTextureFaceEXT(void *_func, uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, uint32_t face) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, uint32_t face))_func)(target, attachment, texture, level, face);
}
void gllCall_glFramebufferTextureLayer(void *_func, uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, int32_t layer) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, int32_t layer))_func)(target, attachment, texture, level, layer);
}
void gllCall_glFramebufferTextureLayerARB(void *_func, uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, int32_t layer) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, int32_t layer))_func)(target, attachment, texture, level, layer);
}
void gllCall_glFramebufferTextureLayerEXT(void *_func, uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, int32_t layer) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, int32_t layer))_func)(target, attachment, texture, level, layer);
}
void gllCall_glFramebufferTextureLayerDownsampleIMG(void *_func, uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, int32_t layer, int32_t xscale, int32_t yscale) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, int32_t layer, int32_t xscale, int32_t yscale))_func)(target, attachment, texture, level, layer, xscale, yscale);
}
void gllCall_glFramebufferTextureMultisampleMultiviewOVR(void *_func, uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, int32_t samples, int32_t baseViewIndex, int32_t numViews) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, int32_t samples, int32_t baseViewIndex, int32_t numViews))_func)(target, attachment, texture, level, samples, baseViewIndex, numViews);
}
void gllCall_glFramebufferTextureMultiviewOVR(void *_func, uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, int32_t baseViewIndex, int32_t numViews) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t texture, int32_t level, int32_t baseViewIndex, int32_t numViews))_func)(target, attachment, texture, level, baseViewIndex, numViews);
}
void gllCall_glFramebufferTextureOES(void *_func, uint32_t target, uint32_t attachment, uint32_t texture, int32_t level) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t texture, int32_t level))_func)(target, attachment, texture, level);
}
void gllCall_glFreeObjectBufferATI(void *_func, uint32_t buffer) {
	((void (*)(uint32_t buffer))_func)(buffer);
}
void gllCall_glFrontFace(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glFrustum(void *_func, double left, double right, double bottom, double top, double zNear, double zFar) {
	((void (*)(double left, double right, double bottom, double top, double zNear, double zFar))_func)(left, right, bottom, top, zNear, zFar);
}
void gllCall_glFrustumf(void *_func, float l, float r, float b, float t, float n, float f) {
	((void (*)(float l, float r, float b, float t, float n, float f))_func)(l, r, b, t, n, f);
}
void gllCall_glFrustumfOES(void *_func, float l, float r, float b, float t, float n, float f) {
	((void (*)(float l, float r, float b, float t, float n, float f))_func)(l, r, b, t, n, f);
}
void gllCall_glFrustumx(void *_func, int32_t l, int32_t r, int32_t b, int32_t t, int32_t n, int32_t f) {
	((void (*)(int32_t l, int32_t r, int32_t b, int32_t t, int32_t n, int32_t f))_func)(l, r, b, t, n, f);
}
void gllCall_glFrustumxOES(void *_func, int32_t l, int32_t r, int32_t b, int32_t t, int32_t n, int32_t f) {
	((void (*)(int32_t l, int32_t r, int32_t b, int32_t t, int32_t n, int32_t f))_func)(l, r, b, t, n, f);
}
uint32_t gllCall_glGenAsyncMarkersSGIX(void *_func, int32_t range) {
	return ((uint32_t (*)(int32_t range))_func)(range);
}
void gllCall_glGenBuffers(void *_func, int32_t n, uint32_t *buffers) {
	((void (*)(int32_t n, uint32_t *buffers))_func)(n, buffers);
}
void gllCall_glGenBuffersARB(void *_func, int32_t n, uint32_t *buffers) {
	((void (*)(int32_t n, uint32_t *buffers))_func)(n, buffers);
}
void gllCall_glGenFencesAPPLE(void *_func, int32_t n, uint32_t *fences) {
	((void (*)(int32_t n, uint32_t *fences))_func)(n, fences);
}
void gllCall_glGenFencesNV(void *_func, int32_t n, uint32_t *fences) {
	((void (*)(int32_t n, uint32_t *fences))_func)(n, fences);
}
uint32_t gllCall_glGenFragmentShadersATI(void *_func, uint32_t range) {
	return ((uint32_t (*)(uint32_t range))_func)(range);
}
void gllCall_glGenFramebuffers(void *_func, int32_t n, uint32_t *framebuffers) {
	((void (*)(int32_t n, uint32_t *framebuffers))_func)(n, framebuffers);
}
void gllCall_glGenFramebuffersEXT(void *_func, int32_t n, uint32_t *framebuffers) {
	((void (*)(int32_t n, uint32_t *framebuffers))_func)(n, framebuffers);
}
void gllCall_glGenFramebuffersOES(void *_func, int32_t n, uint32_t *framebuffers) {
	((void (*)(int32_t n, uint32_t *framebuffers))_func)(n, framebuffers);
}
uint32_t gllCall_glGenLists(void *_func, int32_t range) {
	return ((uint32_t (*)(int32_t range))_func)(range);
}
void gllCall_glGenNamesAMD(void *_func, uint32_t identifier, uint32_t num, uint32_t *names) {
	((void (*)(uint32_t identifier, uint32_t num, uint32_t *names))_func)(identifier, num, names);
}
void gllCall_glGenOcclusionQueriesNV(void *_func, int32_t n, uint32_t *ids) {
	((void (*)(int32_t n, uint32_t *ids))_func)(n, ids);
}
uint32_t gllCall_glGenPathsNV(void *_func, int32_t range) {
	return ((uint32_t (*)(int32_t range))_func)(range);
}
void gllCall_glGenPerfMonitorsAMD(void *_func, int32_t n, uint32_t *monitors) {
	((void (*)(int32_t n, uint32_t *monitors))_func)(n, monitors);
}
void gllCall_glGenProgramPipelines(void *_func, int32_t n, uint32_t *pipelines) {
	((void (*)(int32_t n, uint32_t *pipelines))_func)(n, pipelines);
}
void gllCall_glGenProgramPipelinesEXT(void *_func, int32_t n, uint32_t *pipelines) {
	((void (*)(int32_t n, uint32_t *pipelines))_func)(n, pipelines);
}
void gllCall_glGenProgramsARB(void *_func, int32_t n, uint32_t *programs) {
	((void (*)(int32_t n, uint32_t *programs))_func)(n, programs);
}
void gllCall_glGenProgramsNV(void *_func, int32_t n, uint32_t *programs) {
	((void (*)(int32_t n, uint32_t *programs))_func)(n, programs);
}
void gllCall_glGenQueries(void *_func, int32_t n, uint32_t *ids) {
	((void (*)(int32_t n, uint32_t *ids))_func)(n, ids);
}
void gllCall_glGenQueriesARB(void *_func, int32_t n, uint32_t *ids) {
	((void (*)(int32_t n, uint32_t *ids))_func)(n, ids);
}
void gllCall_glGenQueriesEXT(void *_func, int32_t n, uint32_t *ids) {
	((void (*)(int32_t n, uint32_t *ids))_func)(n, ids);
}
void gllCall_glGenQueryResourceTagNV(void *_func, int32_t n, int32_t *tagIds) {
	((void (*)(int32_t n, int32_t *tagIds))_func)(n, tagIds);
}
void gllCall_glGenRenderbuffers(void *_func, int32_t n, uint32_t *renderbuffers) {
	((void (*)(int32_t n, uint32_t *renderbuffers))_func)(n, renderbuffers);
}
void gllCall_glGenRenderbuffersEXT(void *_func, int32_t n, uint32_t *renderbuffers) {
	((void (*)(int32_t n, uint32_t *renderbuffers))_func)(n, renderbuffers);
}
void gllCall_glGenRenderbuffersOES(void *_func, int32_t n, uint32_t *renderbuffers) {
	((void (*)(int32_t n, uint32_t *renderbuffers))_func)(n, renderbuffers);
}
void gllCall_glGenSamplers(void *_func, int32_t count, uint32_t *samplers) {
	((void (*)(int32_t count, uint32_t *samplers))_func)(count, samplers);
}
void gllCall_glGenSemaphoresEXT(void *_func, int32_t n, uint32_t *semaphores) {
	((void (*)(int32_t n, uint32_t *semaphores))_func)(n, semaphores);
}
uint32_t gllCall_glGenSymbolsEXT(void *_func, uint32_t datatype, uint32_t storagetype, uint32_t range, uint32_t components) {
	return ((uint32_t (*)(uint32_t datatype, uint32_t storagetype, uint32_t range, uint32_t components))_func)(datatype, storagetype, range, components);
}
void gllCall_glGenTextures(void *_func, int32_t n, uint32_t *textures) {
	((void (*)(int32_t n, uint32_t *textures))_func)(n, textures);
}
void gllCall_glGenTexturesEXT(void *_func, int32_t n, uint32_t *textures) {
	((void (*)(int32_t n, uint32_t *textures))_func)(n, textures);
}
void gllCall_glGenTransformFeedbacks(void *_func, int32_t n, uint32_t *ids) {
	((void (*)(int32_t n, uint32_t *ids))_func)(n, ids);
}
void gllCall_glGenTransformFeedbacksNV(void *_func, int32_t n, uint32_t *ids) {
	((void (*)(int32_t n, uint32_t *ids))_func)(n, ids);
}
void gllCall_glGenVertexArrays(void *_func, int32_t n, uint32_t *arrays) {
	((void (*)(int32_t n, uint32_t *arrays))_func)(n, arrays);
}
void gllCall_glGenVertexArraysAPPLE(void *_func, int32_t n, uint32_t *arrays) {
	((void (*)(int32_t n, uint32_t *arrays))_func)(n, arrays);
}
void gllCall_glGenVertexArraysOES(void *_func, int32_t n, uint32_t *arrays) {
	((void (*)(int32_t n, uint32_t *arrays))_func)(n, arrays);
}
uint32_t gllCall_glGenVertexShadersEXT(void *_func, uint32_t range) {
	return ((uint32_t (*)(uint32_t range))_func)(range);
}
void gllCall_glGenerateMipmap(void *_func, uint32_t target) {
	((void (*)(uint32_t target))_func)(target);
}
void gllCall_glGenerateMipmapEXT(void *_func, uint32_t target) {
	((void (*)(uint32_t target))_func)(target);
}
void gllCall_glGenerateMipmapOES(void *_func, uint32_t target) {
	((void (*)(uint32_t target))_func)(target);
}
void gllCall_glGenerateMultiTexMipmapEXT(void *_func, uint32_t texunit, uint32_t target) {
	((void (*)(uint32_t texunit, uint32_t target))_func)(texunit, target);
}
void gllCall_glGenerateTextureMipmap(void *_func, uint32_t texture) {
	((void (*)(uint32_t texture))_func)(texture);
}
void gllCall_glGenerateTextureMipmapEXT(void *_func, uint32_t texture, uint32_t target) {
	((void (*)(uint32_t texture, uint32_t target))_func)(texture, target);
}
void gllCall_glGetActiveAtomicCounterBufferiv(void *_func, uint32_t program, uint32_t bufferIndex, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t program, uint32_t bufferIndex, uint32_t pname, int32_t *params))_func)(program, bufferIndex, pname, params);
}
void gllCall_glGetActiveAttrib(void *_func, uint32_t program, uint32_t index, int32_t bufSize, int32_t *length, int32_t *size, uint32_t *type, uint8_t *name) {
	((void (*)(uint32_t program, uint32_t index, int32_t bufSize, int32_t *length, int32_t *size, uint32_t *type, uint8_t *name))_func)(program, index, bufSize, length, size, type, name);
}
void gllCall_glGetActiveAttribARB(void *_func, GLhandleARB programObj, uint32_t index, int32_t maxLength, int32_t *length, int32_t *size, uint32_t *type, uint8_t *name) {
	((void (*)(GLhandleARB programObj, uint32_t index, int32_t maxLength, int32_t *length, int32_t *size, uint32_t *type, uint8_t *name))_func)(programObj, index, maxLength, length, size, type, name);
}
void gllCall_glGetActiveSubroutineName(void *_func, uint32_t program, uint32_t shadertype, uint32_t index, int32_t bufSize, int32_t *length, uint8_t *name) {
	((void (*)(uint32_t program, uint32_t shadertype, uint32_t index, int32_t bufSize, int32_t *length, uint8_t *name))_func)(program, shadertype, index, bufSize, length, name);
}
void gllCall_glGetActiveSubroutineUniformName(void *_func, uint32_t program, uint32_t shadertype, uint32_t index, int32_t bufSize, int32_t *length, uint8_t *name) {
	((void (*)(uint32_t program, uint32_t shadertype, uint32_t index, int32_t bufSize, int32_t *length, uint8_t *name))_func)(program, shadertype, index, bufSize, length, name);
}
void gllCall_glGetActiveSubroutineUniformiv(void *_func, uint32_t program, uint32_t shadertype, uint32_t index, uint32_t pname, int32_t *values) {
	((void (*)(uint32_t program, uint32_t shadertype, uint32_t index, uint32_t pname, int32_t *values))_func)(program, shadertype, index, pname, values);
}
void gllCall_glGetActiveUniform(void *_func, uint32_t program, uint32_t index, int32_t bufSize, int32_t *length, int32_t *size, uint32_t *type, uint8_t *name) {
	((void (*)(uint32_t program, uint32_t index, int32_t bufSize, int32_t *length, int32_t *size, uint32_t *type, uint8_t *name))_func)(program, index, bufSize, length, size, type, name);
}
void gllCall_glGetActiveUniformARB(void *_func, GLhandleARB programObj, uint32_t index, int32_t maxLength, int32_t *length, int32_t *size, uint32_t *type, uint8_t *name) {
	((void (*)(GLhandleARB programObj, uint32_t index, int32_t maxLength, int32_t *length, int32_t *size, uint32_t *type, uint8_t *name))_func)(programObj, index, maxLength, length, size, type, name);
}
void gllCall_glGetActiveUniformBlockName(void *_func, uint32_t program, uint32_t uniformBlockIndex, int32_t bufSize, int32_t *length, uint8_t *uniformBlockName) {
	((void (*)(uint32_t program, uint32_t uniformBlockIndex, int32_t bufSize, int32_t *length, uint8_t *uniformBlockName))_func)(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}
void gllCall_glGetActiveUniformBlockiv(void *_func, uint32_t program, uint32_t uniformBlockIndex, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t program, uint32_t uniformBlockIndex, uint32_t pname, int32_t *params))_func)(program, uniformBlockIndex, pname, params);
}
void gllCall_glGetActiveUniformName(void *_func, uint32_t program, uint32_t uniformIndex, int32_t bufSize, int32_t *length, uint8_t *uniformName) {
	((void (*)(uint32_t program, uint32_t uniformIndex, int32_t bufSize, int32_t *length, uint8_t *uniformName))_func)(program, uniformIndex, bufSize, length, uniformName);
}
void gllCall_glGetActiveUniformsiv(void *_func, uint32_t program, int32_t uniformCount, uint32_t *uniformIndices, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t program, int32_t uniformCount, uint32_t *uniformIndices, uint32_t pname, int32_t *params))_func)(program, uniformCount, uniformIndices, pname, params);
}
void gllCall_glGetActiveVaryingNV(void *_func, uint32_t program, uint32_t index, int32_t bufSize, int32_t *length, int32_t *size, uint32_t *type, uint8_t *name) {
	((void (*)(uint32_t program, uint32_t index, int32_t bufSize, int32_t *length, int32_t *size, uint32_t *type, uint8_t *name))_func)(program, index, bufSize, length, size, type, name);
}
void gllCall_glGetArrayObjectfvATI(void *_func, uint32_t array, uint32_t pname, float *params) {
	((void (*)(uint32_t array, uint32_t pname, float *params))_func)(array, pname, params);
}
void gllCall_glGetArrayObjectivATI(void *_func, uint32_t array, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t array, uint32_t pname, int32_t *params))_func)(array, pname, params);
}
void gllCall_glGetAttachedObjectsARB(void *_func, GLhandleARB containerObj, int32_t maxCount, int32_t *count, GLhandleARB *obj) {
	((void (*)(GLhandleARB containerObj, int32_t maxCount, int32_t *count, GLhandleARB *obj))_func)(containerObj, maxCount, count, obj);
}
void gllCall_glGetAttachedShaders(void *_func, uint32_t program, int32_t maxCount, int32_t *count, uint32_t *shaders) {
	((void (*)(uint32_t program, int32_t maxCount, int32_t *count, uint32_t *shaders))_func)(program, maxCount, count, shaders);
}
int32_t gllCall_glGetAttribLocation(void *_func, uint32_t program, uint8_t *name) {
	return ((int32_t (*)(uint32_t program, uint8_t *name))_func)(program, name);
}
int32_t gllCall_glGetAttribLocationARB(void *_func, GLhandleARB programObj, uint8_t *name) {
	return ((int32_t (*)(GLhandleARB programObj, uint8_t *name))_func)(programObj, name);
}
void gllCall_glGetBooleanIndexedvEXT(void *_func, uint32_t target, uint32_t index, _Bool *data) {
	((void (*)(uint32_t target, uint32_t index, _Bool *data))_func)(target, index, data);
}
void gllCall_glGetBooleani_v(void *_func, uint32_t target, uint32_t index, _Bool *data) {
	((void (*)(uint32_t target, uint32_t index, _Bool *data))_func)(target, index, data);
}
void gllCall_glGetBooleanv(void *_func, uint32_t pname, _Bool *data) {
	((void (*)(uint32_t pname, _Bool *data))_func)(pname, data);
}
void gllCall_glGetBufferParameteri64v(void *_func, uint32_t target, uint32_t pname, int64_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int64_t *params))_func)(target, pname, params);
}
void gllCall_glGetBufferParameteriv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetBufferParameterivARB(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetBufferParameterui64vNV(void *_func, uint32_t target, uint32_t pname, uint64_t *params) {
	((void (*)(uint32_t target, uint32_t pname, uint64_t *params))_func)(target, pname, params);
}
void gllCall_glGetBufferPointerv(void *_func, uint32_t target, uint32_t pname, void **params) {
	((void (*)(uint32_t target, uint32_t pname, void **params))_func)(target, pname, params);
}
void gllCall_glGetBufferPointervARB(void *_func, uint32_t target, uint32_t pname, void **params) {
	((void (*)(uint32_t target, uint32_t pname, void **params))_func)(target, pname, params);
}
void gllCall_glGetBufferPointervOES(void *_func, uint32_t target, uint32_t pname, void **params) {
	((void (*)(uint32_t target, uint32_t pname, void **params))_func)(target, pname, params);
}
void gllCall_glGetBufferSubData(void *_func, uint32_t target, intptr_t offset, ssize_t size, void *data) {
	((void (*)(uint32_t target, intptr_t offset, ssize_t size, void *data))_func)(target, offset, size, data);
}
void gllCall_glGetBufferSubDataARB(void *_func, uint32_t target, intptr_t offset, ssize_t size, void *data) {
	((void (*)(uint32_t target, intptr_t offset, ssize_t size, void *data))_func)(target, offset, size, data);
}
void gllCall_glGetClipPlane(void *_func, uint32_t plane, double *equation) {
	((void (*)(uint32_t plane, double *equation))_func)(plane, equation);
}
void gllCall_glGetClipPlanef(void *_func, uint32_t plane, float *equation) {
	((void (*)(uint32_t plane, float *equation))_func)(plane, equation);
}
void gllCall_glGetClipPlanefOES(void *_func, uint32_t plane, float *equation) {
	((void (*)(uint32_t plane, float *equation))_func)(plane, equation);
}
void gllCall_glGetClipPlanex(void *_func, uint32_t plane, int32_t *equation) {
	((void (*)(uint32_t plane, int32_t *equation))_func)(plane, equation);
}
void gllCall_glGetClipPlanexOES(void *_func, uint32_t plane, int32_t *equation) {
	((void (*)(uint32_t plane, int32_t *equation))_func)(plane, equation);
}
void gllCall_glGetColorTable(void *_func, uint32_t target, uint32_t format, uint32_t type, void *table) {
	((void (*)(uint32_t target, uint32_t format, uint32_t type, void *table))_func)(target, format, type, table);
}
void gllCall_glGetColorTableEXT(void *_func, uint32_t target, uint32_t format, uint32_t type, void *data) {
	((void (*)(uint32_t target, uint32_t format, uint32_t type, void *data))_func)(target, format, type, data);
}
void gllCall_glGetColorTableParameterfv(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glGetColorTableParameterfvEXT(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glGetColorTableParameterfvSGI(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glGetColorTableParameteriv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetColorTableParameterivEXT(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetColorTableParameterivSGI(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetColorTableSGI(void *_func, uint32_t target, uint32_t format, uint32_t type, void *table) {
	((void (*)(uint32_t target, uint32_t format, uint32_t type, void *table))_func)(target, format, type, table);
}
void gllCall_glGetCombinerInputParameterfvNV(void *_func, uint32_t stage, uint32_t portion, uint32_t variable, uint32_t pname, float *params) {
	((void (*)(uint32_t stage, uint32_t portion, uint32_t variable, uint32_t pname, float *params))_func)(stage, portion, variable, pname, params);
}
void gllCall_glGetCombinerInputParameterivNV(void *_func, uint32_t stage, uint32_t portion, uint32_t variable, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t stage, uint32_t portion, uint32_t variable, uint32_t pname, int32_t *params))_func)(stage, portion, variable, pname, params);
}
void gllCall_glGetCombinerOutputParameterfvNV(void *_func, uint32_t stage, uint32_t portion, uint32_t pname, float *params) {
	((void (*)(uint32_t stage, uint32_t portion, uint32_t pname, float *params))_func)(stage, portion, pname, params);
}
void gllCall_glGetCombinerOutputParameterivNV(void *_func, uint32_t stage, uint32_t portion, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t stage, uint32_t portion, uint32_t pname, int32_t *params))_func)(stage, portion, pname, params);
}
void gllCall_glGetCombinerStageParameterfvNV(void *_func, uint32_t stage, uint32_t pname, float *params) {
	((void (*)(uint32_t stage, uint32_t pname, float *params))_func)(stage, pname, params);
}
uint32_t gllCall_glGetCommandHeaderNV(void *_func, uint32_t tokenID, uint32_t size) {
	return ((uint32_t (*)(uint32_t tokenID, uint32_t size))_func)(tokenID, size);
}
void gllCall_glGetCompressedMultiTexImageEXT(void *_func, uint32_t texunit, uint32_t target, int32_t lod, void *img) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t lod, void *img))_func)(texunit, target, lod, img);
}
void gllCall_glGetCompressedTexImage(void *_func, uint32_t target, int32_t level, void *img) {
	((void (*)(uint32_t target, int32_t level, void *img))_func)(target, level, img);
}
void gllCall_glGetCompressedTexImageARB(void *_func, uint32_t target, int32_t level, void *img) {
	((void (*)(uint32_t target, int32_t level, void *img))_func)(target, level, img);
}
void gllCall_glGetCompressedTextureImage(void *_func, uint32_t texture, int32_t level, int32_t bufSize, void *pixels) {
	((void (*)(uint32_t texture, int32_t level, int32_t bufSize, void *pixels))_func)(texture, level, bufSize, pixels);
}
void gllCall_glGetCompressedTextureImageEXT(void *_func, uint32_t texture, uint32_t target, int32_t lod, void *img) {
	((void (*)(uint32_t texture, uint32_t target, int32_t lod, void *img))_func)(texture, target, lod, img);
}
void gllCall_glGetCompressedTextureSubImage(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, int32_t bufSize, void *pixels) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, int32_t bufSize, void *pixels))_func)(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
}
void gllCall_glGetConvolutionFilter(void *_func, uint32_t target, uint32_t format, uint32_t type, void *image) {
	((void (*)(uint32_t target, uint32_t format, uint32_t type, void *image))_func)(target, format, type, image);
}
void gllCall_glGetConvolutionFilterEXT(void *_func, uint32_t target, uint32_t format, uint32_t type, void *image) {
	((void (*)(uint32_t target, uint32_t format, uint32_t type, void *image))_func)(target, format, type, image);
}
void gllCall_glGetConvolutionParameterfv(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glGetConvolutionParameterfvEXT(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glGetConvolutionParameteriv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetConvolutionParameterivEXT(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetConvolutionParameterxvOES(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetCoverageModulationTableNV(void *_func, int32_t bufSize, float *v) {
	((void (*)(int32_t bufSize, float *v))_func)(bufSize, v);
}
uint32_t gllCall_glGetDebugMessageLog(void *_func, uint32_t count, int32_t bufSize, uint32_t *sources, uint32_t *types, uint32_t *ids, uint32_t *severities, int32_t *lengths, uint8_t *messageLog) {
	return ((uint32_t (*)(uint32_t count, int32_t bufSize, uint32_t *sources, uint32_t *types, uint32_t *ids, uint32_t *severities, int32_t *lengths, uint8_t *messageLog))_func)(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
uint32_t gllCall_glGetDebugMessageLogAMD(void *_func, uint32_t count, int32_t bufSize, uint32_t *categories, uint32_t *severities, uint32_t *ids, int32_t *lengths, uint8_t *message) {
	return ((uint32_t (*)(uint32_t count, int32_t bufSize, uint32_t *categories, uint32_t *severities, uint32_t *ids, int32_t *lengths, uint8_t *message))_func)(count, bufSize, categories, severities, ids, lengths, message);
}
uint32_t gllCall_glGetDebugMessageLogARB(void *_func, uint32_t count, int32_t bufSize, uint32_t *sources, uint32_t *types, uint32_t *ids, uint32_t *severities, int32_t *lengths, uint8_t *messageLog) {
	return ((uint32_t (*)(uint32_t count, int32_t bufSize, uint32_t *sources, uint32_t *types, uint32_t *ids, uint32_t *severities, int32_t *lengths, uint8_t *messageLog))_func)(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
uint32_t gllCall_glGetDebugMessageLogKHR(void *_func, uint32_t count, int32_t bufSize, uint32_t *sources, uint32_t *types, uint32_t *ids, uint32_t *severities, int32_t *lengths, uint8_t *messageLog) {
	return ((uint32_t (*)(uint32_t count, int32_t bufSize, uint32_t *sources, uint32_t *types, uint32_t *ids, uint32_t *severities, int32_t *lengths, uint8_t *messageLog))_func)(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
void gllCall_glGetDetailTexFuncSGIS(void *_func, uint32_t target, float *points) {
	((void (*)(uint32_t target, float *points))_func)(target, points);
}
void gllCall_glGetDoubleIndexedvEXT(void *_func, uint32_t target, uint32_t index, double *data) {
	((void (*)(uint32_t target, uint32_t index, double *data))_func)(target, index, data);
}
void gllCall_glGetDoublei_v(void *_func, uint32_t target, uint32_t index, double *data) {
	((void (*)(uint32_t target, uint32_t index, double *data))_func)(target, index, data);
}
void gllCall_glGetDoublei_vEXT(void *_func, uint32_t pname, uint32_t index, double *params) {
	((void (*)(uint32_t pname, uint32_t index, double *params))_func)(pname, index, params);
}
void gllCall_glGetDoublev(void *_func, uint32_t pname, double *data) {
	((void (*)(uint32_t pname, double *data))_func)(pname, data);
}
void gllCall_glGetDriverControlStringQCOM(void *_func, uint32_t driverControl, int32_t bufSize, int32_t *length, uint8_t *driverControlString) {
	((void (*)(uint32_t driverControl, int32_t bufSize, int32_t *length, uint8_t *driverControlString))_func)(driverControl, bufSize, length, driverControlString);
}
void gllCall_glGetDriverControlsQCOM(void *_func, int32_t *num, int32_t size, uint32_t *driverControls) {
	((void (*)(int32_t *num, int32_t size, uint32_t *driverControls))_func)(num, size, driverControls);
}
uint32_t gllCall_glGetError(void *_func) {
	return ((uint32_t (*)())_func)();
}
void gllCall_glGetFenceivNV(void *_func, uint32_t fence, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t fence, uint32_t pname, int32_t *params))_func)(fence, pname, params);
}
void gllCall_glGetFinalCombinerInputParameterfvNV(void *_func, uint32_t variable, uint32_t pname, float *params) {
	((void (*)(uint32_t variable, uint32_t pname, float *params))_func)(variable, pname, params);
}
void gllCall_glGetFinalCombinerInputParameterivNV(void *_func, uint32_t variable, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t variable, uint32_t pname, int32_t *params))_func)(variable, pname, params);
}
void gllCall_glGetFirstPerfQueryIdINTEL(void *_func, uint32_t *queryId) {
	((void (*)(uint32_t *queryId))_func)(queryId);
}
void gllCall_glGetFixedv(void *_func, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pname, int32_t *params))_func)(pname, params);
}
void gllCall_glGetFixedvOES(void *_func, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pname, int32_t *params))_func)(pname, params);
}
void gllCall_glGetFloatIndexedvEXT(void *_func, uint32_t target, uint32_t index, float *data) {
	((void (*)(uint32_t target, uint32_t index, float *data))_func)(target, index, data);
}
void gllCall_glGetFloati_v(void *_func, uint32_t target, uint32_t index, float *data) {
	((void (*)(uint32_t target, uint32_t index, float *data))_func)(target, index, data);
}
void gllCall_glGetFloati_vEXT(void *_func, uint32_t pname, uint32_t index, float *params) {
	((void (*)(uint32_t pname, uint32_t index, float *params))_func)(pname, index, params);
}
void gllCall_glGetFloati_vNV(void *_func, uint32_t target, uint32_t index, float *data) {
	((void (*)(uint32_t target, uint32_t index, float *data))_func)(target, index, data);
}
void gllCall_glGetFloati_vOES(void *_func, uint32_t target, uint32_t index, float *data) {
	((void (*)(uint32_t target, uint32_t index, float *data))_func)(target, index, data);
}
void gllCall_glGetFloatv(void *_func, uint32_t pname, float *data) {
	((void (*)(uint32_t pname, float *data))_func)(pname, data);
}
void gllCall_glGetFogFuncSGIS(void *_func, float *points) {
	((void (*)(float *points))_func)(points);
}
int32_t gllCall_glGetFragDataIndex(void *_func, uint32_t program, uint8_t *name) {
	return ((int32_t (*)(uint32_t program, uint8_t *name))_func)(program, name);
}
int32_t gllCall_glGetFragDataIndexEXT(void *_func, uint32_t program, uint8_t *name) {
	return ((int32_t (*)(uint32_t program, uint8_t *name))_func)(program, name);
}
int32_t gllCall_glGetFragDataLocation(void *_func, uint32_t program, uint8_t *name) {
	return ((int32_t (*)(uint32_t program, uint8_t *name))_func)(program, name);
}
int32_t gllCall_glGetFragDataLocationEXT(void *_func, uint32_t program, uint8_t *name) {
	return ((int32_t (*)(uint32_t program, uint8_t *name))_func)(program, name);
}
void gllCall_glGetFragmentLightfvSGIX(void *_func, uint32_t light, uint32_t pname, float *params) {
	((void (*)(uint32_t light, uint32_t pname, float *params))_func)(light, pname, params);
}
void gllCall_glGetFragmentLightivSGIX(void *_func, uint32_t light, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t light, uint32_t pname, int32_t *params))_func)(light, pname, params);
}
void gllCall_glGetFragmentMaterialfvSGIX(void *_func, uint32_t face, uint32_t pname, float *params) {
	((void (*)(uint32_t face, uint32_t pname, float *params))_func)(face, pname, params);
}
void gllCall_glGetFragmentMaterialivSGIX(void *_func, uint32_t face, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t face, uint32_t pname, int32_t *params))_func)(face, pname, params);
}
void gllCall_glGetFramebufferAttachmentParameteriv(void *_func, uint32_t target, uint32_t attachment, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t pname, int32_t *params))_func)(target, attachment, pname, params);
}
void gllCall_glGetFramebufferAttachmentParameterivEXT(void *_func, uint32_t target, uint32_t attachment, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t pname, int32_t *params))_func)(target, attachment, pname, params);
}
void gllCall_glGetFramebufferAttachmentParameterivOES(void *_func, uint32_t target, uint32_t attachment, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t attachment, uint32_t pname, int32_t *params))_func)(target, attachment, pname, params);
}
void gllCall_glGetFramebufferParameterfvAMD(void *_func, uint32_t target, uint32_t pname, uint32_t numsamples, uint32_t pixelindex, int32_t size, float *values) {
	((void (*)(uint32_t target, uint32_t pname, uint32_t numsamples, uint32_t pixelindex, int32_t size, float *values))_func)(target, pname, numsamples, pixelindex, size, values);
}
void gllCall_glGetFramebufferParameteriv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetFramebufferParameterivEXT(void *_func, uint32_t framebuffer, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t framebuffer, uint32_t pname, int32_t *params))_func)(framebuffer, pname, params);
}
int32_t gllCall_glGetFramebufferPixelLocalStorageSizeEXT(void *_func, uint32_t target) {
	return ((int32_t (*)(uint32_t target))_func)(target);
}
uint32_t gllCall_glGetGraphicsResetStatus(void *_func) {
	return ((uint32_t (*)())_func)();
}
uint32_t gllCall_glGetGraphicsResetStatusARB(void *_func) {
	return ((uint32_t (*)())_func)();
}
uint32_t gllCall_glGetGraphicsResetStatusEXT(void *_func) {
	return ((uint32_t (*)())_func)();
}
uint32_t gllCall_glGetGraphicsResetStatusKHR(void *_func) {
	return ((uint32_t (*)())_func)();
}
GLhandleARB gllCall_glGetHandleARB(void *_func, uint32_t pname) {
	return ((GLhandleARB (*)(uint32_t pname))_func)(pname);
}
void gllCall_glGetHistogram(void *_func, uint32_t target, _Bool reset, uint32_t format, uint32_t type, void *values) {
	((void (*)(uint32_t target, _Bool reset, uint32_t format, uint32_t type, void *values))_func)(target, reset, format, type, values);
}
void gllCall_glGetHistogramEXT(void *_func, uint32_t target, _Bool reset, uint32_t format, uint32_t type, void *values) {
	((void (*)(uint32_t target, _Bool reset, uint32_t format, uint32_t type, void *values))_func)(target, reset, format, type, values);
}
void gllCall_glGetHistogramParameterfv(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glGetHistogramParameterfvEXT(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glGetHistogramParameteriv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetHistogramParameterivEXT(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetHistogramParameterxvOES(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
uint64_t gllCall_glGetImageHandleARB(void *_func, uint32_t texture, int32_t level, _Bool layered, int32_t layer, uint32_t format) {
	return ((uint64_t (*)(uint32_t texture, int32_t level, _Bool layered, int32_t layer, uint32_t format))_func)(texture, level, layered, layer, format);
}
uint64_t gllCall_glGetImageHandleNV(void *_func, uint32_t texture, int32_t level, _Bool layered, int32_t layer, uint32_t format) {
	return ((uint64_t (*)(uint32_t texture, int32_t level, _Bool layered, int32_t layer, uint32_t format))_func)(texture, level, layered, layer, format);
}
void gllCall_glGetImageTransformParameterfvHP(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glGetImageTransformParameterivHP(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetInfoLogARB(void *_func, GLhandleARB obj, int32_t maxLength, int32_t *length, uint8_t *infoLog) {
	((void (*)(GLhandleARB obj, int32_t maxLength, int32_t *length, uint8_t *infoLog))_func)(obj, maxLength, length, infoLog);
}
int32_t gllCall_glGetInstrumentsSGIX(void *_func) {
	return ((int32_t (*)())_func)();
}
void gllCall_glGetInteger64i_v(void *_func, uint32_t target, uint32_t index, int64_t *data) {
	((void (*)(uint32_t target, uint32_t index, int64_t *data))_func)(target, index, data);
}
void gllCall_glGetInteger64v(void *_func, uint32_t pname, int64_t *data) {
	((void (*)(uint32_t pname, int64_t *data))_func)(pname, data);
}
void gllCall_glGetInteger64vAPPLE(void *_func, uint32_t pname, int64_t *params) {
	((void (*)(uint32_t pname, int64_t *params))_func)(pname, params);
}
void gllCall_glGetInteger64vEXT(void *_func, uint32_t pname, int64_t *data) {
	((void (*)(uint32_t pname, int64_t *data))_func)(pname, data);
}
void gllCall_glGetIntegerIndexedvEXT(void *_func, uint32_t target, uint32_t index, int32_t *data) {
	((void (*)(uint32_t target, uint32_t index, int32_t *data))_func)(target, index, data);
}
void gllCall_glGetIntegeri_v(void *_func, uint32_t target, uint32_t index, int32_t *data) {
	((void (*)(uint32_t target, uint32_t index, int32_t *data))_func)(target, index, data);
}
void gllCall_glGetIntegeri_vEXT(void *_func, uint32_t target, uint32_t index, int32_t *data) {
	((void (*)(uint32_t target, uint32_t index, int32_t *data))_func)(target, index, data);
}
void gllCall_glGetIntegerui64i_vNV(void *_func, uint32_t value, uint32_t index, uint64_t *result) {
	((void (*)(uint32_t value, uint32_t index, uint64_t *result))_func)(value, index, result);
}
void gllCall_glGetIntegerui64vNV(void *_func, uint32_t value, uint64_t *result) {
	((void (*)(uint32_t value, uint64_t *result))_func)(value, result);
}
void gllCall_glGetIntegerv(void *_func, uint32_t pname, int32_t *data) {
	((void (*)(uint32_t pname, int32_t *data))_func)(pname, data);
}
void gllCall_glGetInternalformatSampleivNV(void *_func, uint32_t target, uint32_t internalformat, int32_t samples, uint32_t pname, int32_t count, int32_t *params) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t samples, uint32_t pname, int32_t count, int32_t *params))_func)(target, internalformat, samples, pname, count, params);
}
void gllCall_glGetInternalformati64v(void *_func, uint32_t target, uint32_t internalformat, uint32_t pname, int32_t count, int64_t *params) {
	((void (*)(uint32_t target, uint32_t internalformat, uint32_t pname, int32_t count, int64_t *params))_func)(target, internalformat, pname, count, params);
}
void gllCall_glGetInternalformativ(void *_func, uint32_t target, uint32_t internalformat, uint32_t pname, int32_t count, int32_t *params) {
	((void (*)(uint32_t target, uint32_t internalformat, uint32_t pname, int32_t count, int32_t *params))_func)(target, internalformat, pname, count, params);
}
void gllCall_glGetInvariantBooleanvEXT(void *_func, uint32_t id, uint32_t value, _Bool *data) {
	((void (*)(uint32_t id, uint32_t value, _Bool *data))_func)(id, value, data);
}
void gllCall_glGetInvariantFloatvEXT(void *_func, uint32_t id, uint32_t value, float *data) {
	((void (*)(uint32_t id, uint32_t value, float *data))_func)(id, value, data);
}
void gllCall_glGetInvariantIntegervEXT(void *_func, uint32_t id, uint32_t value, int32_t *data) {
	((void (*)(uint32_t id, uint32_t value, int32_t *data))_func)(id, value, data);
}
void gllCall_glGetLightfv(void *_func, uint32_t light, uint32_t pname, float *params) {
	((void (*)(uint32_t light, uint32_t pname, float *params))_func)(light, pname, params);
}
void gllCall_glGetLightiv(void *_func, uint32_t light, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t light, uint32_t pname, int32_t *params))_func)(light, pname, params);
}
void gllCall_glGetLightxOES(void *_func, uint32_t light, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t light, uint32_t pname, int32_t *params))_func)(light, pname, params);
}
void gllCall_glGetLightxv(void *_func, uint32_t light, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t light, uint32_t pname, int32_t *params))_func)(light, pname, params);
}
void gllCall_glGetLightxvOES(void *_func, uint32_t light, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t light, uint32_t pname, int32_t *params))_func)(light, pname, params);
}
void gllCall_glGetListParameterfvSGIX(void *_func, uint32_t list, uint32_t pname, float *params) {
	((void (*)(uint32_t list, uint32_t pname, float *params))_func)(list, pname, params);
}
void gllCall_glGetListParameterivSGIX(void *_func, uint32_t list, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t list, uint32_t pname, int32_t *params))_func)(list, pname, params);
}
void gllCall_glGetLocalConstantBooleanvEXT(void *_func, uint32_t id, uint32_t value, _Bool *data) {
	((void (*)(uint32_t id, uint32_t value, _Bool *data))_func)(id, value, data);
}
void gllCall_glGetLocalConstantFloatvEXT(void *_func, uint32_t id, uint32_t value, float *data) {
	((void (*)(uint32_t id, uint32_t value, float *data))_func)(id, value, data);
}
void gllCall_glGetLocalConstantIntegervEXT(void *_func, uint32_t id, uint32_t value, int32_t *data) {
	((void (*)(uint32_t id, uint32_t value, int32_t *data))_func)(id, value, data);
}
void gllCall_glGetMapAttribParameterfvNV(void *_func, uint32_t target, uint32_t index, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t index, uint32_t pname, float *params))_func)(target, index, pname, params);
}
void gllCall_glGetMapAttribParameterivNV(void *_func, uint32_t target, uint32_t index, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t index, uint32_t pname, int32_t *params))_func)(target, index, pname, params);
}
void gllCall_glGetMapControlPointsNV(void *_func, uint32_t target, uint32_t index, uint32_t type, int32_t ustride, int32_t vstride, _Bool packed, void *points) {
	((void (*)(uint32_t target, uint32_t index, uint32_t type, int32_t ustride, int32_t vstride, _Bool packed, void *points))_func)(target, index, type, ustride, vstride, packed, points);
}
void gllCall_glGetMapParameterfvNV(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glGetMapParameterivNV(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetMapdv(void *_func, uint32_t target, uint32_t query, double *v) {
	((void (*)(uint32_t target, uint32_t query, double *v))_func)(target, query, v);
}
void gllCall_glGetMapfv(void *_func, uint32_t target, uint32_t query, float *v) {
	((void (*)(uint32_t target, uint32_t query, float *v))_func)(target, query, v);
}
void gllCall_glGetMapiv(void *_func, uint32_t target, uint32_t query, int32_t *v) {
	((void (*)(uint32_t target, uint32_t query, int32_t *v))_func)(target, query, v);
}
void gllCall_glGetMapxvOES(void *_func, uint32_t target, uint32_t query, int32_t *v) {
	((void (*)(uint32_t target, uint32_t query, int32_t *v))_func)(target, query, v);
}
void gllCall_glGetMaterialfv(void *_func, uint32_t face, uint32_t pname, float *params) {
	((void (*)(uint32_t face, uint32_t pname, float *params))_func)(face, pname, params);
}
void gllCall_glGetMaterialiv(void *_func, uint32_t face, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t face, uint32_t pname, int32_t *params))_func)(face, pname, params);
}
void gllCall_glGetMaterialxOES(void *_func, uint32_t face, uint32_t pname, int32_t param) {
	((void (*)(uint32_t face, uint32_t pname, int32_t param))_func)(face, pname, param);
}
void gllCall_glGetMaterialxv(void *_func, uint32_t face, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t face, uint32_t pname, int32_t *params))_func)(face, pname, params);
}
void gllCall_glGetMaterialxvOES(void *_func, uint32_t face, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t face, uint32_t pname, int32_t *params))_func)(face, pname, params);
}
void gllCall_glGetMemoryObjectDetachedResourcesuivNV(void *_func, uint32_t memory, uint32_t pname, int32_t first, int32_t count, uint32_t *params) {
	((void (*)(uint32_t memory, uint32_t pname, int32_t first, int32_t count, uint32_t *params))_func)(memory, pname, first, count, params);
}
void gllCall_glGetMemoryObjectParameterivEXT(void *_func, uint32_t memoryObject, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t memoryObject, uint32_t pname, int32_t *params))_func)(memoryObject, pname, params);
}
void gllCall_glGetMinmax(void *_func, uint32_t target, _Bool reset, uint32_t format, uint32_t type, void *values) {
	((void (*)(uint32_t target, _Bool reset, uint32_t format, uint32_t type, void *values))_func)(target, reset, format, type, values);
}
void gllCall_glGetMinmaxEXT(void *_func, uint32_t target, _Bool reset, uint32_t format, uint32_t type, void *values) {
	((void (*)(uint32_t target, _Bool reset, uint32_t format, uint32_t type, void *values))_func)(target, reset, format, type, values);
}
void gllCall_glGetMinmaxParameterfv(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glGetMinmaxParameterfvEXT(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glGetMinmaxParameteriv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetMinmaxParameterivEXT(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetMultiTexEnvfvEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, float *params))_func)(texunit, target, pname, params);
}
void gllCall_glGetMultiTexEnvivEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, int32_t *params))_func)(texunit, target, pname, params);
}
void gllCall_glGetMultiTexGendvEXT(void *_func, uint32_t texunit, uint32_t coord, uint32_t pname, double *params) {
	((void (*)(uint32_t texunit, uint32_t coord, uint32_t pname, double *params))_func)(texunit, coord, pname, params);
}
void gllCall_glGetMultiTexGenfvEXT(void *_func, uint32_t texunit, uint32_t coord, uint32_t pname, float *params) {
	((void (*)(uint32_t texunit, uint32_t coord, uint32_t pname, float *params))_func)(texunit, coord, pname, params);
}
void gllCall_glGetMultiTexGenivEXT(void *_func, uint32_t texunit, uint32_t coord, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texunit, uint32_t coord, uint32_t pname, int32_t *params))_func)(texunit, coord, pname, params);
}
void gllCall_glGetMultiTexImageEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, uint32_t format, uint32_t type, void *pixels))_func)(texunit, target, level, format, type, pixels);
}
void gllCall_glGetMultiTexLevelParameterfvEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, uint32_t pname, float *params) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, uint32_t pname, float *params))_func)(texunit, target, level, pname, params);
}
void gllCall_glGetMultiTexLevelParameterivEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, uint32_t pname, int32_t *params))_func)(texunit, target, level, pname, params);
}
void gllCall_glGetMultiTexParameterIivEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, int32_t *params))_func)(texunit, target, pname, params);
}
void gllCall_glGetMultiTexParameterIuivEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, uint32_t *params))_func)(texunit, target, pname, params);
}
void gllCall_glGetMultiTexParameterfvEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, float *params))_func)(texunit, target, pname, params);
}
void gllCall_glGetMultiTexParameterivEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, int32_t *params))_func)(texunit, target, pname, params);
}
void gllCall_glGetMultisamplefv(void *_func, uint32_t pname, uint32_t index, float *val) {
	((void (*)(uint32_t pname, uint32_t index, float *val))_func)(pname, index, val);
}
void gllCall_glGetMultisamplefvNV(void *_func, uint32_t pname, uint32_t index, float *val) {
	((void (*)(uint32_t pname, uint32_t index, float *val))_func)(pname, index, val);
}
void gllCall_glGetNamedBufferParameteri64v(void *_func, uint32_t buffer, uint32_t pname, int64_t *params) {
	((void (*)(uint32_t buffer, uint32_t pname, int64_t *params))_func)(buffer, pname, params);
}
void gllCall_glGetNamedBufferParameteriv(void *_func, uint32_t buffer, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t buffer, uint32_t pname, int32_t *params))_func)(buffer, pname, params);
}
void gllCall_glGetNamedBufferParameterivEXT(void *_func, uint32_t buffer, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t buffer, uint32_t pname, int32_t *params))_func)(buffer, pname, params);
}
void gllCall_glGetNamedBufferParameterui64vNV(void *_func, uint32_t buffer, uint32_t pname, uint64_t *params) {
	((void (*)(uint32_t buffer, uint32_t pname, uint64_t *params))_func)(buffer, pname, params);
}
void gllCall_glGetNamedBufferPointerv(void *_func, uint32_t buffer, uint32_t pname, void **params) {
	((void (*)(uint32_t buffer, uint32_t pname, void **params))_func)(buffer, pname, params);
}
void gllCall_glGetNamedBufferPointervEXT(void *_func, uint32_t buffer, uint32_t pname, void **params) {
	((void (*)(uint32_t buffer, uint32_t pname, void **params))_func)(buffer, pname, params);
}
void gllCall_glGetNamedBufferSubData(void *_func, uint32_t buffer, intptr_t offset, ssize_t size, void *data) {
	((void (*)(uint32_t buffer, intptr_t offset, ssize_t size, void *data))_func)(buffer, offset, size, data);
}
void gllCall_glGetNamedBufferSubDataEXT(void *_func, uint32_t buffer, intptr_t offset, ssize_t size, void *data) {
	((void (*)(uint32_t buffer, intptr_t offset, ssize_t size, void *data))_func)(buffer, offset, size, data);
}
void gllCall_glGetNamedFramebufferParameterfvAMD(void *_func, uint32_t framebuffer, uint32_t pname, uint32_t numsamples, uint32_t pixelindex, int32_t size, float *values) {
	((void (*)(uint32_t framebuffer, uint32_t pname, uint32_t numsamples, uint32_t pixelindex, int32_t size, float *values))_func)(framebuffer, pname, numsamples, pixelindex, size, values);
}
void gllCall_glGetNamedFramebufferAttachmentParameteriv(void *_func, uint32_t framebuffer, uint32_t attachment, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t framebuffer, uint32_t attachment, uint32_t pname, int32_t *params))_func)(framebuffer, attachment, pname, params);
}
void gllCall_glGetNamedFramebufferAttachmentParameterivEXT(void *_func, uint32_t framebuffer, uint32_t attachment, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t framebuffer, uint32_t attachment, uint32_t pname, int32_t *params))_func)(framebuffer, attachment, pname, params);
}
void gllCall_glGetNamedFramebufferParameteriv(void *_func, uint32_t framebuffer, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t framebuffer, uint32_t pname, int32_t *param))_func)(framebuffer, pname, param);
}
void gllCall_glGetNamedFramebufferParameterivEXT(void *_func, uint32_t framebuffer, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t framebuffer, uint32_t pname, int32_t *params))_func)(framebuffer, pname, params);
}
void gllCall_glGetNamedProgramLocalParameterIivEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, int32_t *params) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, int32_t *params))_func)(program, target, index, params);
}
void gllCall_glGetNamedProgramLocalParameterIuivEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, uint32_t *params) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, uint32_t *params))_func)(program, target, index, params);
}
void gllCall_glGetNamedProgramLocalParameterdvEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, double *params) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, double *params))_func)(program, target, index, params);
}
void gllCall_glGetNamedProgramLocalParameterfvEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, float *params) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, float *params))_func)(program, target, index, params);
}
void gllCall_glGetNamedProgramStringEXT(void *_func, uint32_t program, uint32_t target, uint32_t pname, void *string) {
	((void (*)(uint32_t program, uint32_t target, uint32_t pname, void *string))_func)(program, target, pname, string);
}
void gllCall_glGetNamedProgramivEXT(void *_func, uint32_t program, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t program, uint32_t target, uint32_t pname, int32_t *params))_func)(program, target, pname, params);
}
void gllCall_glGetNamedRenderbufferParameteriv(void *_func, uint32_t renderbuffer, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t renderbuffer, uint32_t pname, int32_t *params))_func)(renderbuffer, pname, params);
}
void gllCall_glGetNamedRenderbufferParameterivEXT(void *_func, uint32_t renderbuffer, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t renderbuffer, uint32_t pname, int32_t *params))_func)(renderbuffer, pname, params);
}
void gllCall_glGetNamedStringARB(void *_func, int32_t namelen, uint8_t *name, int32_t bufSize, int32_t *stringlen, uint8_t *string) {
	((void (*)(int32_t namelen, uint8_t *name, int32_t bufSize, int32_t *stringlen, uint8_t *string))_func)(namelen, name, bufSize, stringlen, string);
}
void gllCall_glGetNamedStringivARB(void *_func, int32_t namelen, uint8_t *name, uint32_t pname, int32_t *params) {
	((void (*)(int32_t namelen, uint8_t *name, uint32_t pname, int32_t *params))_func)(namelen, name, pname, params);
}
void gllCall_glGetNextPerfQueryIdINTEL(void *_func, uint32_t queryId, uint32_t *nextQueryId) {
	((void (*)(uint32_t queryId, uint32_t *nextQueryId))_func)(queryId, nextQueryId);
}
void gllCall_glGetObjectBufferfvATI(void *_func, uint32_t buffer, uint32_t pname, float *params) {
	((void (*)(uint32_t buffer, uint32_t pname, float *params))_func)(buffer, pname, params);
}
void gllCall_glGetObjectBufferivATI(void *_func, uint32_t buffer, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t buffer, uint32_t pname, int32_t *params))_func)(buffer, pname, params);
}
void gllCall_glGetObjectLabel(void *_func, uint32_t identifier, uint32_t name, int32_t bufSize, int32_t *length, uint8_t *label) {
	((void (*)(uint32_t identifier, uint32_t name, int32_t bufSize, int32_t *length, uint8_t *label))_func)(identifier, name, bufSize, length, label);
}
void gllCall_glGetObjectLabelEXT(void *_func, uint32_t type, uint32_t object, int32_t bufSize, int32_t *length, uint8_t *label) {
	((void (*)(uint32_t type, uint32_t object, int32_t bufSize, int32_t *length, uint8_t *label))_func)(type, object, bufSize, length, label);
}
void gllCall_glGetObjectLabelKHR(void *_func, uint32_t identifier, uint32_t name, int32_t bufSize, int32_t *length, uint8_t *label) {
	((void (*)(uint32_t identifier, uint32_t name, int32_t bufSize, int32_t *length, uint8_t *label))_func)(identifier, name, bufSize, length, label);
}
void gllCall_glGetObjectParameterfvARB(void *_func, GLhandleARB obj, uint32_t pname, float *params) {
	((void (*)(GLhandleARB obj, uint32_t pname, float *params))_func)(obj, pname, params);
}
void gllCall_glGetObjectParameterivAPPLE(void *_func, uint32_t objectType, uint32_t name, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t objectType, uint32_t name, uint32_t pname, int32_t *params))_func)(objectType, name, pname, params);
}
void gllCall_glGetObjectParameterivARB(void *_func, GLhandleARB obj, uint32_t pname, int32_t *params) {
	((void (*)(GLhandleARB obj, uint32_t pname, int32_t *params))_func)(obj, pname, params);
}
void gllCall_glGetObjectPtrLabel(void *_func, void *ptr, int32_t bufSize, int32_t *length, uint8_t *label) {
	((void (*)(void *ptr, int32_t bufSize, int32_t *length, uint8_t *label))_func)(ptr, bufSize, length, label);
}
void gllCall_glGetObjectPtrLabelKHR(void *_func, void *ptr, int32_t bufSize, int32_t *length, uint8_t *label) {
	((void (*)(void *ptr, int32_t bufSize, int32_t *length, uint8_t *label))_func)(ptr, bufSize, length, label);
}
void gllCall_glGetOcclusionQueryivNV(void *_func, uint32_t id, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t id, uint32_t pname, int32_t *params))_func)(id, pname, params);
}
void gllCall_glGetOcclusionQueryuivNV(void *_func, uint32_t id, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t id, uint32_t pname, uint32_t *params))_func)(id, pname, params);
}
void gllCall_glGetPathColorGenfvNV(void *_func, uint32_t color, uint32_t pname, float *value) {
	((void (*)(uint32_t color, uint32_t pname, float *value))_func)(color, pname, value);
}
void gllCall_glGetPathColorGenivNV(void *_func, uint32_t color, uint32_t pname, int32_t *value) {
	((void (*)(uint32_t color, uint32_t pname, int32_t *value))_func)(color, pname, value);
}
void gllCall_glGetPathCommandsNV(void *_func, uint32_t path, uint8_t *commands) {
	((void (*)(uint32_t path, uint8_t *commands))_func)(path, commands);
}
void gllCall_glGetPathCoordsNV(void *_func, uint32_t path, float *coords) {
	((void (*)(uint32_t path, float *coords))_func)(path, coords);
}
void gllCall_glGetPathDashArrayNV(void *_func, uint32_t path, float *dashArray) {
	((void (*)(uint32_t path, float *dashArray))_func)(path, dashArray);
}
float gllCall_glGetPathLengthNV(void *_func, uint32_t path, int32_t startSegment, int32_t numSegments) {
	return ((float (*)(uint32_t path, int32_t startSegment, int32_t numSegments))_func)(path, startSegment, numSegments);
}
void gllCall_glGetPathMetricRangeNV(void *_func, uint32_t metricQueryMask, uint32_t firstPathName, int32_t numPaths, int32_t stride, float *metrics) {
	((void (*)(uint32_t metricQueryMask, uint32_t firstPathName, int32_t numPaths, int32_t stride, float *metrics))_func)(metricQueryMask, firstPathName, numPaths, stride, metrics);
}
void gllCall_glGetPathMetricsNV(void *_func, uint32_t metricQueryMask, int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, int32_t stride, float *metrics) {
	((void (*)(uint32_t metricQueryMask, int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, int32_t stride, float *metrics))_func)(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
}
void gllCall_glGetPathParameterfvNV(void *_func, uint32_t path, uint32_t pname, float *value) {
	((void (*)(uint32_t path, uint32_t pname, float *value))_func)(path, pname, value);
}
void gllCall_glGetPathParameterivNV(void *_func, uint32_t path, uint32_t pname, int32_t *value) {
	((void (*)(uint32_t path, uint32_t pname, int32_t *value))_func)(path, pname, value);
}
void gllCall_glGetPathSpacingNV(void *_func, uint32_t pathListMode, int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, float advanceScale, float kerningScale, uint32_t transformType, float *returnedSpacing) {
	((void (*)(uint32_t pathListMode, int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, float advanceScale, float kerningScale, uint32_t transformType, float *returnedSpacing))_func)(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
}
void gllCall_glGetPathTexGenfvNV(void *_func, uint32_t texCoordSet, uint32_t pname, float *value) {
	((void (*)(uint32_t texCoordSet, uint32_t pname, float *value))_func)(texCoordSet, pname, value);
}
void gllCall_glGetPathTexGenivNV(void *_func, uint32_t texCoordSet, uint32_t pname, int32_t *value) {
	((void (*)(uint32_t texCoordSet, uint32_t pname, int32_t *value))_func)(texCoordSet, pname, value);
}
void gllCall_glGetPerfCounterInfoINTEL(void *_func, uint32_t queryId, uint32_t counterId, uint32_t counterNameLength, uint8_t *counterName, uint32_t counterDescLength, uint8_t *counterDesc, uint32_t *counterOffset, uint32_t *counterDataSize, uint32_t *counterTypeEnum, uint32_t *counterDataTypeEnum, uint64_t *rawCounterMaxValue) {
	((void (*)(uint32_t queryId, uint32_t counterId, uint32_t counterNameLength, uint8_t *counterName, uint32_t counterDescLength, uint8_t *counterDesc, uint32_t *counterOffset, uint32_t *counterDataSize, uint32_t *counterTypeEnum, uint32_t *counterDataTypeEnum, uint64_t *rawCounterMaxValue))_func)(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
}
void gllCall_glGetPerfMonitorCounterDataAMD(void *_func, uint32_t monitor, uint32_t pname, int32_t dataSize, uint32_t *data, int32_t *bytesWritten) {
	((void (*)(uint32_t monitor, uint32_t pname, int32_t dataSize, uint32_t *data, int32_t *bytesWritten))_func)(monitor, pname, dataSize, data, bytesWritten);
}
void gllCall_glGetPerfMonitorCounterInfoAMD(void *_func, uint32_t group, uint32_t counter, uint32_t pname, void *data) {
	((void (*)(uint32_t group, uint32_t counter, uint32_t pname, void *data))_func)(group, counter, pname, data);
}
void gllCall_glGetPerfMonitorCounterStringAMD(void *_func, uint32_t group, uint32_t counter, int32_t bufSize, int32_t *length, uint8_t *counterString) {
	((void (*)(uint32_t group, uint32_t counter, int32_t bufSize, int32_t *length, uint8_t *counterString))_func)(group, counter, bufSize, length, counterString);
}
void gllCall_glGetPerfMonitorCountersAMD(void *_func, uint32_t group, int32_t *numCounters, int32_t *maxActiveCounters, int32_t counterSize, uint32_t *counters) {
	((void (*)(uint32_t group, int32_t *numCounters, int32_t *maxActiveCounters, int32_t counterSize, uint32_t *counters))_func)(group, numCounters, maxActiveCounters, counterSize, counters);
}
void gllCall_glGetPerfMonitorGroupStringAMD(void *_func, uint32_t group, int32_t bufSize, int32_t *length, uint8_t *groupString) {
	((void (*)(uint32_t group, int32_t bufSize, int32_t *length, uint8_t *groupString))_func)(group, bufSize, length, groupString);
}
void gllCall_glGetPerfMonitorGroupsAMD(void *_func, int32_t *numGroups, int32_t groupsSize, uint32_t *groups) {
	((void (*)(int32_t *numGroups, int32_t groupsSize, uint32_t *groups))_func)(numGroups, groupsSize, groups);
}
void gllCall_glGetPerfQueryDataINTEL(void *_func, uint32_t queryHandle, uint32_t flags, int32_t dataSize, void *data, uint32_t *bytesWritten) {
	((void (*)(uint32_t queryHandle, uint32_t flags, int32_t dataSize, void *data, uint32_t *bytesWritten))_func)(queryHandle, flags, dataSize, data, bytesWritten);
}
void gllCall_glGetPerfQueryIdByNameINTEL(void *_func, uint8_t *queryName, uint32_t *queryId) {
	((void (*)(uint8_t *queryName, uint32_t *queryId))_func)(queryName, queryId);
}
void gllCall_glGetPerfQueryInfoINTEL(void *_func, uint32_t queryId, uint32_t queryNameLength, uint8_t *queryName, uint32_t *dataSize, uint32_t *noCounters, uint32_t *noInstances, uint32_t *capsMask) {
	((void (*)(uint32_t queryId, uint32_t queryNameLength, uint8_t *queryName, uint32_t *dataSize, uint32_t *noCounters, uint32_t *noInstances, uint32_t *capsMask))_func)(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
}
void gllCall_glGetPixelMapfv(void *_func, uint32_t map, float *values) {
	((void (*)(uint32_t map, float *values))_func)(map, values);
}
void gllCall_glGetPixelMapuiv(void *_func, uint32_t map, uint32_t *values) {
	((void (*)(uint32_t map, uint32_t *values))_func)(map, values);
}
void gllCall_glGetPixelMapusv(void *_func, uint32_t map, uint16_t *values) {
	((void (*)(uint32_t map, uint16_t *values))_func)(map, values);
}
void gllCall_glGetPixelMapxv(void *_func, uint32_t map, int32_t size, int32_t *values) {
	((void (*)(uint32_t map, int32_t size, int32_t *values))_func)(map, size, values);
}
void gllCall_glGetPixelTexGenParameterfvSGIS(void *_func, uint32_t pname, float *params) {
	((void (*)(uint32_t pname, float *params))_func)(pname, params);
}
void gllCall_glGetPixelTexGenParameterivSGIS(void *_func, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pname, int32_t *params))_func)(pname, params);
}
void gllCall_glGetPixelTransformParameterfvEXT(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glGetPixelTransformParameterivEXT(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetPointerIndexedvEXT(void *_func, uint32_t target, uint32_t index, void **data) {
	((void (*)(uint32_t target, uint32_t index, void **data))_func)(target, index, data);
}
void gllCall_glGetPointeri_vEXT(void *_func, uint32_t pname, uint32_t index, void **params) {
	((void (*)(uint32_t pname, uint32_t index, void **params))_func)(pname, index, params);
}
void gllCall_glGetPointerv(void *_func, uint32_t pname, void **params) {
	((void (*)(uint32_t pname, void **params))_func)(pname, params);
}
void gllCall_glGetPointervEXT(void *_func, uint32_t pname, void **params) {
	((void (*)(uint32_t pname, void **params))_func)(pname, params);
}
void gllCall_glGetPointervKHR(void *_func, uint32_t pname, void **params) {
	((void (*)(uint32_t pname, void **params))_func)(pname, params);
}
void gllCall_glGetPolygonStipple(void *_func, uint8_t *mask) {
	((void (*)(uint8_t *mask))_func)(mask);
}
void gllCall_glGetProgramBinary(void *_func, uint32_t program, int32_t bufSize, int32_t *length, uint32_t *binaryFormat, void *binary) {
	((void (*)(uint32_t program, int32_t bufSize, int32_t *length, uint32_t *binaryFormat, void *binary))_func)(program, bufSize, length, binaryFormat, binary);
}
void gllCall_glGetProgramBinaryOES(void *_func, uint32_t program, int32_t bufSize, int32_t *length, uint32_t *binaryFormat, void *binary) {
	((void (*)(uint32_t program, int32_t bufSize, int32_t *length, uint32_t *binaryFormat, void *binary))_func)(program, bufSize, length, binaryFormat, binary);
}
void gllCall_glGetProgramEnvParameterIivNV(void *_func, uint32_t target, uint32_t index, int32_t *params) {
	((void (*)(uint32_t target, uint32_t index, int32_t *params))_func)(target, index, params);
}
void gllCall_glGetProgramEnvParameterIuivNV(void *_func, uint32_t target, uint32_t index, uint32_t *params) {
	((void (*)(uint32_t target, uint32_t index, uint32_t *params))_func)(target, index, params);
}
void gllCall_glGetProgramEnvParameterdvARB(void *_func, uint32_t target, uint32_t index, double *params) {
	((void (*)(uint32_t target, uint32_t index, double *params))_func)(target, index, params);
}
void gllCall_glGetProgramEnvParameterfvARB(void *_func, uint32_t target, uint32_t index, float *params) {
	((void (*)(uint32_t target, uint32_t index, float *params))_func)(target, index, params);
}
void gllCall_glGetProgramInfoLog(void *_func, uint32_t program, int32_t bufSize, int32_t *length, uint8_t *infoLog) {
	((void (*)(uint32_t program, int32_t bufSize, int32_t *length, uint8_t *infoLog))_func)(program, bufSize, length, infoLog);
}
void gllCall_glGetProgramInterfaceiv(void *_func, uint32_t program, uint32_t programInterface, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t program, uint32_t programInterface, uint32_t pname, int32_t *params))_func)(program, programInterface, pname, params);
}
void gllCall_glGetProgramLocalParameterIivNV(void *_func, uint32_t target, uint32_t index, int32_t *params) {
	((void (*)(uint32_t target, uint32_t index, int32_t *params))_func)(target, index, params);
}
void gllCall_glGetProgramLocalParameterIuivNV(void *_func, uint32_t target, uint32_t index, uint32_t *params) {
	((void (*)(uint32_t target, uint32_t index, uint32_t *params))_func)(target, index, params);
}
void gllCall_glGetProgramLocalParameterdvARB(void *_func, uint32_t target, uint32_t index, double *params) {
	((void (*)(uint32_t target, uint32_t index, double *params))_func)(target, index, params);
}
void gllCall_glGetProgramLocalParameterfvARB(void *_func, uint32_t target, uint32_t index, float *params) {
	((void (*)(uint32_t target, uint32_t index, float *params))_func)(target, index, params);
}
void gllCall_glGetProgramNamedParameterdvNV(void *_func, uint32_t id, int32_t len, uint8_t *name, double *params) {
	((void (*)(uint32_t id, int32_t len, uint8_t *name, double *params))_func)(id, len, name, params);
}
void gllCall_glGetProgramNamedParameterfvNV(void *_func, uint32_t id, int32_t len, uint8_t *name, float *params) {
	((void (*)(uint32_t id, int32_t len, uint8_t *name, float *params))_func)(id, len, name, params);
}
void gllCall_glGetProgramParameterdvNV(void *_func, uint32_t target, uint32_t index, uint32_t pname, double *params) {
	((void (*)(uint32_t target, uint32_t index, uint32_t pname, double *params))_func)(target, index, pname, params);
}
void gllCall_glGetProgramParameterfvNV(void *_func, uint32_t target, uint32_t index, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t index, uint32_t pname, float *params))_func)(target, index, pname, params);
}
void gllCall_glGetProgramPipelineInfoLog(void *_func, uint32_t pipeline, int32_t bufSize, int32_t *length, uint8_t *infoLog) {
	((void (*)(uint32_t pipeline, int32_t bufSize, int32_t *length, uint8_t *infoLog))_func)(pipeline, bufSize, length, infoLog);
}
void gllCall_glGetProgramPipelineInfoLogEXT(void *_func, uint32_t pipeline, int32_t bufSize, int32_t *length, uint8_t *infoLog) {
	((void (*)(uint32_t pipeline, int32_t bufSize, int32_t *length, uint8_t *infoLog))_func)(pipeline, bufSize, length, infoLog);
}
void gllCall_glGetProgramPipelineiv(void *_func, uint32_t pipeline, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pipeline, uint32_t pname, int32_t *params))_func)(pipeline, pname, params);
}
void gllCall_glGetProgramPipelineivEXT(void *_func, uint32_t pipeline, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pipeline, uint32_t pname, int32_t *params))_func)(pipeline, pname, params);
}
uint32_t gllCall_glGetProgramResourceIndex(void *_func, uint32_t program, uint32_t programInterface, uint8_t *name) {
	return ((uint32_t (*)(uint32_t program, uint32_t programInterface, uint8_t *name))_func)(program, programInterface, name);
}
int32_t gllCall_glGetProgramResourceLocation(void *_func, uint32_t program, uint32_t programInterface, uint8_t *name) {
	return ((int32_t (*)(uint32_t program, uint32_t programInterface, uint8_t *name))_func)(program, programInterface, name);
}
int32_t gllCall_glGetProgramResourceLocationIndex(void *_func, uint32_t program, uint32_t programInterface, uint8_t *name) {
	return ((int32_t (*)(uint32_t program, uint32_t programInterface, uint8_t *name))_func)(program, programInterface, name);
}
int32_t gllCall_glGetProgramResourceLocationIndexEXT(void *_func, uint32_t program, uint32_t programInterface, uint8_t *name) {
	return ((int32_t (*)(uint32_t program, uint32_t programInterface, uint8_t *name))_func)(program, programInterface, name);
}
void gllCall_glGetProgramResourceName(void *_func, uint32_t program, uint32_t programInterface, uint32_t index, int32_t bufSize, int32_t *length, uint8_t *name) {
	((void (*)(uint32_t program, uint32_t programInterface, uint32_t index, int32_t bufSize, int32_t *length, uint8_t *name))_func)(program, programInterface, index, bufSize, length, name);
}
void gllCall_glGetProgramResourcefvNV(void *_func, uint32_t program, uint32_t programInterface, uint32_t index, int32_t propCount, uint32_t *props, int32_t count, int32_t *length, float *params) {
	((void (*)(uint32_t program, uint32_t programInterface, uint32_t index, int32_t propCount, uint32_t *props, int32_t count, int32_t *length, float *params))_func)(program, programInterface, index, propCount, props, count, length, params);
}
void gllCall_glGetProgramResourceiv(void *_func, uint32_t program, uint32_t programInterface, uint32_t index, int32_t propCount, uint32_t *props, int32_t count, int32_t *length, int32_t *params) {
	((void (*)(uint32_t program, uint32_t programInterface, uint32_t index, int32_t propCount, uint32_t *props, int32_t count, int32_t *length, int32_t *params))_func)(program, programInterface, index, propCount, props, count, length, params);
}
void gllCall_glGetProgramStageiv(void *_func, uint32_t program, uint32_t shadertype, uint32_t pname, int32_t *values) {
	((void (*)(uint32_t program, uint32_t shadertype, uint32_t pname, int32_t *values))_func)(program, shadertype, pname, values);
}
void gllCall_glGetProgramStringARB(void *_func, uint32_t target, uint32_t pname, void *string) {
	((void (*)(uint32_t target, uint32_t pname, void *string))_func)(target, pname, string);
}
void gllCall_glGetProgramStringNV(void *_func, uint32_t id, uint32_t pname, uint8_t *program) {
	((void (*)(uint32_t id, uint32_t pname, uint8_t *program))_func)(id, pname, program);
}
void gllCall_glGetProgramSubroutineParameteruivNV(void *_func, uint32_t target, uint32_t index, uint32_t *param) {
	((void (*)(uint32_t target, uint32_t index, uint32_t *param))_func)(target, index, param);
}
void gllCall_glGetProgramiv(void *_func, uint32_t program, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t program, uint32_t pname, int32_t *params))_func)(program, pname, params);
}
void gllCall_glGetProgramivARB(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetProgramivNV(void *_func, uint32_t id, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t id, uint32_t pname, int32_t *params))_func)(id, pname, params);
}
void gllCall_glGetQueryBufferObjecti64v(void *_func, uint32_t id, uint32_t buffer, uint32_t pname, intptr_t offset) {
	((void (*)(uint32_t id, uint32_t buffer, uint32_t pname, intptr_t offset))_func)(id, buffer, pname, offset);
}
void gllCall_glGetQueryBufferObjectiv(void *_func, uint32_t id, uint32_t buffer, uint32_t pname, intptr_t offset) {
	((void (*)(uint32_t id, uint32_t buffer, uint32_t pname, intptr_t offset))_func)(id, buffer, pname, offset);
}
void gllCall_glGetQueryBufferObjectui64v(void *_func, uint32_t id, uint32_t buffer, uint32_t pname, intptr_t offset) {
	((void (*)(uint32_t id, uint32_t buffer, uint32_t pname, intptr_t offset))_func)(id, buffer, pname, offset);
}
void gllCall_glGetQueryBufferObjectuiv(void *_func, uint32_t id, uint32_t buffer, uint32_t pname, intptr_t offset) {
	((void (*)(uint32_t id, uint32_t buffer, uint32_t pname, intptr_t offset))_func)(id, buffer, pname, offset);
}
void gllCall_glGetQueryIndexediv(void *_func, uint32_t target, uint32_t index, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t index, uint32_t pname, int32_t *params))_func)(target, index, pname, params);
}
void gllCall_glGetQueryObjecti64v(void *_func, uint32_t id, uint32_t pname, int64_t *params) {
	((void (*)(uint32_t id, uint32_t pname, int64_t *params))_func)(id, pname, params);
}
void gllCall_glGetQueryObjecti64vEXT(void *_func, uint32_t id, uint32_t pname, int64_t *params) {
	((void (*)(uint32_t id, uint32_t pname, int64_t *params))_func)(id, pname, params);
}
void gllCall_glGetQueryObjectiv(void *_func, uint32_t id, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t id, uint32_t pname, int32_t *params))_func)(id, pname, params);
}
void gllCall_glGetQueryObjectivARB(void *_func, uint32_t id, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t id, uint32_t pname, int32_t *params))_func)(id, pname, params);
}
void gllCall_glGetQueryObjectivEXT(void *_func, uint32_t id, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t id, uint32_t pname, int32_t *params))_func)(id, pname, params);
}
void gllCall_glGetQueryObjectui64v(void *_func, uint32_t id, uint32_t pname, uint64_t *params) {
	((void (*)(uint32_t id, uint32_t pname, uint64_t *params))_func)(id, pname, params);
}
void gllCall_glGetQueryObjectui64vEXT(void *_func, uint32_t id, uint32_t pname, uint64_t *params) {
	((void (*)(uint32_t id, uint32_t pname, uint64_t *params))_func)(id, pname, params);
}
void gllCall_glGetQueryObjectuiv(void *_func, uint32_t id, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t id, uint32_t pname, uint32_t *params))_func)(id, pname, params);
}
void gllCall_glGetQueryObjectuivARB(void *_func, uint32_t id, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t id, uint32_t pname, uint32_t *params))_func)(id, pname, params);
}
void gllCall_glGetQueryObjectuivEXT(void *_func, uint32_t id, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t id, uint32_t pname, uint32_t *params))_func)(id, pname, params);
}
void gllCall_glGetQueryiv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetQueryivARB(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetQueryivEXT(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetRenderbufferParameteriv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetRenderbufferParameterivEXT(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetRenderbufferParameterivOES(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetSamplerParameterIiv(void *_func, uint32_t sampler, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t sampler, uint32_t pname, int32_t *params))_func)(sampler, pname, params);
}
void gllCall_glGetSamplerParameterIivEXT(void *_func, uint32_t sampler, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t sampler, uint32_t pname, int32_t *params))_func)(sampler, pname, params);
}
void gllCall_glGetSamplerParameterIivOES(void *_func, uint32_t sampler, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t sampler, uint32_t pname, int32_t *params))_func)(sampler, pname, params);
}
void gllCall_glGetSamplerParameterIuiv(void *_func, uint32_t sampler, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t sampler, uint32_t pname, uint32_t *params))_func)(sampler, pname, params);
}
void gllCall_glGetSamplerParameterIuivEXT(void *_func, uint32_t sampler, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t sampler, uint32_t pname, uint32_t *params))_func)(sampler, pname, params);
}
void gllCall_glGetSamplerParameterIuivOES(void *_func, uint32_t sampler, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t sampler, uint32_t pname, uint32_t *params))_func)(sampler, pname, params);
}
void gllCall_glGetSamplerParameterfv(void *_func, uint32_t sampler, uint32_t pname, float *params) {
	((void (*)(uint32_t sampler, uint32_t pname, float *params))_func)(sampler, pname, params);
}
void gllCall_glGetSamplerParameteriv(void *_func, uint32_t sampler, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t sampler, uint32_t pname, int32_t *params))_func)(sampler, pname, params);
}
void gllCall_glGetSemaphoreParameterivNV(void *_func, uint32_t semaphore, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t semaphore, uint32_t pname, int32_t *params))_func)(semaphore, pname, params);
}
void gllCall_glGetSemaphoreParameterui64vEXT(void *_func, uint32_t semaphore, uint32_t pname, uint64_t *params) {
	((void (*)(uint32_t semaphore, uint32_t pname, uint64_t *params))_func)(semaphore, pname, params);
}
void gllCall_glGetSeparableFilter(void *_func, uint32_t target, uint32_t format, uint32_t type, void *row, void *column, void *span) {
	((void (*)(uint32_t target, uint32_t format, uint32_t type, void *row, void *column, void *span))_func)(target, format, type, row, column, span);
}
void gllCall_glGetSeparableFilterEXT(void *_func, uint32_t target, uint32_t format, uint32_t type, void *row, void *column, void *span) {
	((void (*)(uint32_t target, uint32_t format, uint32_t type, void *row, void *column, void *span))_func)(target, format, type, row, column, span);
}
void gllCall_glGetShaderInfoLog(void *_func, uint32_t shader, int32_t bufSize, int32_t *length, uint8_t *infoLog) {
	((void (*)(uint32_t shader, int32_t bufSize, int32_t *length, uint8_t *infoLog))_func)(shader, bufSize, length, infoLog);
}
void gllCall_glGetShaderPrecisionFormat(void *_func, uint32_t shadertype, uint32_t precisiontype, int32_t *range, int32_t *precision) {
	((void (*)(uint32_t shadertype, uint32_t precisiontype, int32_t *range, int32_t *precision))_func)(shadertype, precisiontype, range, precision);
}
void gllCall_glGetShaderSource(void *_func, uint32_t shader, int32_t bufSize, int32_t *length, uint8_t *source) {
	((void (*)(uint32_t shader, int32_t bufSize, int32_t *length, uint8_t *source))_func)(shader, bufSize, length, source);
}
void gllCall_glGetShaderSourceARB(void *_func, GLhandleARB obj, int32_t maxLength, int32_t *length, uint8_t *source) {
	((void (*)(GLhandleARB obj, int32_t maxLength, int32_t *length, uint8_t *source))_func)(obj, maxLength, length, source);
}
void gllCall_glGetShaderiv(void *_func, uint32_t shader, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t shader, uint32_t pname, int32_t *params))_func)(shader, pname, params);
}
void gllCall_glGetShadingRateImagePaletteNV(void *_func, uint32_t viewport, uint32_t entry, uint32_t *rate) {
	((void (*)(uint32_t viewport, uint32_t entry, uint32_t *rate))_func)(viewport, entry, rate);
}
void gllCall_glGetShadingRateSampleLocationivNV(void *_func, uint32_t rate, uint32_t samples, uint32_t index, int32_t *location) {
	((void (*)(uint32_t rate, uint32_t samples, uint32_t index, int32_t *location))_func)(rate, samples, index, location);
}
void gllCall_glGetSharpenTexFuncSGIS(void *_func, uint32_t target, float *points) {
	((void (*)(uint32_t target, float *points))_func)(target, points);
}
uint16_t gllCall_glGetStageIndexNV(void *_func, uint32_t shadertype) {
	return ((uint16_t (*)(uint32_t shadertype))_func)(shadertype);
}
uint8_t *gllCall_glGetString(void *_func, uint32_t name) {
	return ((uint8_t *(*)(uint32_t name))_func)(name);
}
uint8_t *gllCall_glGetStringi(void *_func, uint32_t name, uint32_t index) {
	return ((uint8_t *(*)(uint32_t name, uint32_t index))_func)(name, index);
}
uint32_t gllCall_glGetSubroutineIndex(void *_func, uint32_t program, uint32_t shadertype, uint8_t *name) {
	return ((uint32_t (*)(uint32_t program, uint32_t shadertype, uint8_t *name))_func)(program, shadertype, name);
}
int32_t gllCall_glGetSubroutineUniformLocation(void *_func, uint32_t program, uint32_t shadertype, uint8_t *name) {
	return ((int32_t (*)(uint32_t program, uint32_t shadertype, uint8_t *name))_func)(program, shadertype, name);
}
void gllCall_glGetSynciv(void *_func, GLsync sync, uint32_t pname, int32_t count, int32_t *length, int32_t *values) {
	((void (*)(GLsync sync, uint32_t pname, int32_t count, int32_t *length, int32_t *values))_func)(sync, pname, count, length, values);
}
void gllCall_glGetSyncivAPPLE(void *_func, GLsync sync, uint32_t pname, int32_t count, int32_t *length, int32_t *values) {
	((void (*)(GLsync sync, uint32_t pname, int32_t count, int32_t *length, int32_t *values))_func)(sync, pname, count, length, values);
}
void gllCall_glGetTexBumpParameterfvATI(void *_func, uint32_t pname, float *param) {
	((void (*)(uint32_t pname, float *param))_func)(pname, param);
}
void gllCall_glGetTexBumpParameterivATI(void *_func, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t pname, int32_t *param))_func)(pname, param);
}
void gllCall_glGetTexEnvfv(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glGetTexEnviv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetTexEnvxv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetTexEnvxvOES(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetTexFilterFuncSGIS(void *_func, uint32_t target, uint32_t filter, float *weights) {
	((void (*)(uint32_t target, uint32_t filter, float *weights))_func)(target, filter, weights);
}
void gllCall_glGetTexGendv(void *_func, uint32_t coord, uint32_t pname, double *params) {
	((void (*)(uint32_t coord, uint32_t pname, double *params))_func)(coord, pname, params);
}
void gllCall_glGetTexGenfv(void *_func, uint32_t coord, uint32_t pname, float *params) {
	((void (*)(uint32_t coord, uint32_t pname, float *params))_func)(coord, pname, params);
}
void gllCall_glGetTexGenfvOES(void *_func, uint32_t coord, uint32_t pname, float *params) {
	((void (*)(uint32_t coord, uint32_t pname, float *params))_func)(coord, pname, params);
}
void gllCall_glGetTexGeniv(void *_func, uint32_t coord, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t coord, uint32_t pname, int32_t *params))_func)(coord, pname, params);
}
void gllCall_glGetTexGenivOES(void *_func, uint32_t coord, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t coord, uint32_t pname, int32_t *params))_func)(coord, pname, params);
}
void gllCall_glGetTexGenxvOES(void *_func, uint32_t coord, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t coord, uint32_t pname, int32_t *params))_func)(coord, pname, params);
}
void gllCall_glGetTexImage(void *_func, uint32_t target, int32_t level, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, uint32_t format, uint32_t type, void *pixels))_func)(target, level, format, type, pixels);
}
void gllCall_glGetTexLevelParameterfv(void *_func, uint32_t target, int32_t level, uint32_t pname, float *params) {
	((void (*)(uint32_t target, int32_t level, uint32_t pname, float *params))_func)(target, level, pname, params);
}
void gllCall_glGetTexLevelParameteriv(void *_func, uint32_t target, int32_t level, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, int32_t level, uint32_t pname, int32_t *params))_func)(target, level, pname, params);
}
void gllCall_glGetTexLevelParameterxvOES(void *_func, uint32_t target, int32_t level, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, int32_t level, uint32_t pname, int32_t *params))_func)(target, level, pname, params);
}
void gllCall_glGetTexParameterIiv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetTexParameterIivEXT(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetTexParameterIivOES(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetTexParameterIuiv(void *_func, uint32_t target, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, uint32_t *params))_func)(target, pname, params);
}
void gllCall_glGetTexParameterIuivEXT(void *_func, uint32_t target, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, uint32_t *params))_func)(target, pname, params);
}
void gllCall_glGetTexParameterIuivOES(void *_func, uint32_t target, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, uint32_t *params))_func)(target, pname, params);
}
void gllCall_glGetTexParameterPointervAPPLE(void *_func, uint32_t target, uint32_t pname, void **params) {
	((void (*)(uint32_t target, uint32_t pname, void **params))_func)(target, pname, params);
}
void gllCall_glGetTexParameterfv(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glGetTexParameteriv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetTexParameterxv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glGetTexParameterxvOES(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
uint64_t gllCall_glGetTextureHandleARB(void *_func, uint32_t texture) {
	return ((uint64_t (*)(uint32_t texture))_func)(texture);
}
uint64_t gllCall_glGetTextureHandleIMG(void *_func, uint32_t texture) {
	return ((uint64_t (*)(uint32_t texture))_func)(texture);
}
uint64_t gllCall_glGetTextureHandleNV(void *_func, uint32_t texture) {
	return ((uint64_t (*)(uint32_t texture))_func)(texture);
}
void gllCall_glGetTextureImage(void *_func, uint32_t texture, int32_t level, uint32_t format, uint32_t type, int32_t bufSize, void *pixels) {
	((void (*)(uint32_t texture, int32_t level, uint32_t format, uint32_t type, int32_t bufSize, void *pixels))_func)(texture, level, format, type, bufSize, pixels);
}
void gllCall_glGetTextureImageEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, uint32_t format, uint32_t type, void *pixels))_func)(texture, target, level, format, type, pixels);
}
void gllCall_glGetTextureLevelParameterfv(void *_func, uint32_t texture, int32_t level, uint32_t pname, float *params) {
	((void (*)(uint32_t texture, int32_t level, uint32_t pname, float *params))_func)(texture, level, pname, params);
}
void gllCall_glGetTextureLevelParameterfvEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, uint32_t pname, float *params) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, uint32_t pname, float *params))_func)(texture, target, level, pname, params);
}
void gllCall_glGetTextureLevelParameteriv(void *_func, uint32_t texture, int32_t level, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texture, int32_t level, uint32_t pname, int32_t *params))_func)(texture, level, pname, params);
}
void gllCall_glGetTextureLevelParameterivEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, uint32_t pname, int32_t *params))_func)(texture, target, level, pname, params);
}
void gllCall_glGetTextureParameterIiv(void *_func, uint32_t texture, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texture, uint32_t pname, int32_t *params))_func)(texture, pname, params);
}
void gllCall_glGetTextureParameterIivEXT(void *_func, uint32_t texture, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t pname, int32_t *params))_func)(texture, target, pname, params);
}
void gllCall_glGetTextureParameterIuiv(void *_func, uint32_t texture, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t texture, uint32_t pname, uint32_t *params))_func)(texture, pname, params);
}
void gllCall_glGetTextureParameterIuivEXT(void *_func, uint32_t texture, uint32_t target, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t pname, uint32_t *params))_func)(texture, target, pname, params);
}
void gllCall_glGetTextureParameterfv(void *_func, uint32_t texture, uint32_t pname, float *params) {
	((void (*)(uint32_t texture, uint32_t pname, float *params))_func)(texture, pname, params);
}
void gllCall_glGetTextureParameterfvEXT(void *_func, uint32_t texture, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t pname, float *params))_func)(texture, target, pname, params);
}
void gllCall_glGetTextureParameteriv(void *_func, uint32_t texture, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texture, uint32_t pname, int32_t *params))_func)(texture, pname, params);
}
void gllCall_glGetTextureParameterivEXT(void *_func, uint32_t texture, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t pname, int32_t *params))_func)(texture, target, pname, params);
}
uint64_t gllCall_glGetTextureSamplerHandleARB(void *_func, uint32_t texture, uint32_t sampler) {
	return ((uint64_t (*)(uint32_t texture, uint32_t sampler))_func)(texture, sampler);
}
uint64_t gllCall_glGetTextureSamplerHandleIMG(void *_func, uint32_t texture, uint32_t sampler) {
	return ((uint64_t (*)(uint32_t texture, uint32_t sampler))_func)(texture, sampler);
}
uint64_t gllCall_glGetTextureSamplerHandleNV(void *_func, uint32_t texture, uint32_t sampler) {
	return ((uint64_t (*)(uint32_t texture, uint32_t sampler))_func)(texture, sampler);
}
void gllCall_glGetTextureSubImage(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, int32_t bufSize, void *pixels) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, int32_t bufSize, void *pixels))_func)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
}
void gllCall_glGetTrackMatrixivNV(void *_func, uint32_t target, uint32_t address, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t address, uint32_t pname, int32_t *params))_func)(target, address, pname, params);
}
void gllCall_glGetTransformFeedbackVarying(void *_func, uint32_t program, uint32_t index, int32_t bufSize, int32_t *length, int32_t *size, uint32_t *type, uint8_t *name) {
	((void (*)(uint32_t program, uint32_t index, int32_t bufSize, int32_t *length, int32_t *size, uint32_t *type, uint8_t *name))_func)(program, index, bufSize, length, size, type, name);
}
void gllCall_glGetTransformFeedbackVaryingEXT(void *_func, uint32_t program, uint32_t index, int32_t bufSize, int32_t *length, int32_t *size, uint32_t *type, uint8_t *name) {
	((void (*)(uint32_t program, uint32_t index, int32_t bufSize, int32_t *length, int32_t *size, uint32_t *type, uint8_t *name))_func)(program, index, bufSize, length, size, type, name);
}
void gllCall_glGetTransformFeedbackVaryingNV(void *_func, uint32_t program, uint32_t index, int32_t *location) {
	((void (*)(uint32_t program, uint32_t index, int32_t *location))_func)(program, index, location);
}
void gllCall_glGetTransformFeedbacki64_v(void *_func, uint32_t xfb, uint32_t pname, uint32_t index, int64_t *param) {
	((void (*)(uint32_t xfb, uint32_t pname, uint32_t index, int64_t *param))_func)(xfb, pname, index, param);
}
void gllCall_glGetTransformFeedbacki_v(void *_func, uint32_t xfb, uint32_t pname, uint32_t index, int32_t *param) {
	((void (*)(uint32_t xfb, uint32_t pname, uint32_t index, int32_t *param))_func)(xfb, pname, index, param);
}
void gllCall_glGetTransformFeedbackiv(void *_func, uint32_t xfb, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t xfb, uint32_t pname, int32_t *param))_func)(xfb, pname, param);
}
void gllCall_glGetTranslatedShaderSourceANGLE(void *_func, uint32_t shader, int32_t bufSize, int32_t *length, uint8_t *source) {
	((void (*)(uint32_t shader, int32_t bufSize, int32_t *length, uint8_t *source))_func)(shader, bufSize, length, source);
}
uint32_t gllCall_glGetUniformBlockIndex(void *_func, uint32_t program, uint8_t *uniformBlockName) {
	return ((uint32_t (*)(uint32_t program, uint8_t *uniformBlockName))_func)(program, uniformBlockName);
}
int32_t gllCall_glGetUniformBufferSizeEXT(void *_func, uint32_t program, int32_t location) {
	return ((int32_t (*)(uint32_t program, int32_t location))_func)(program, location);
}
void gllCall_glGetUniformIndices(void *_func, uint32_t program, int32_t uniformCount, uint8_t **uniformNames, uint32_t *uniformIndices) {
	((void (*)(uint32_t program, int32_t uniformCount, uint8_t **uniformNames, uint32_t *uniformIndices))_func)(program, uniformCount, uniformNames, uniformIndices);
}
int32_t gllCall_glGetUniformLocation(void *_func, uint32_t program, uint8_t *name) {
	return ((int32_t (*)(uint32_t program, uint8_t *name))_func)(program, name);
}
int32_t gllCall_glGetUniformLocationARB(void *_func, GLhandleARB programObj, uint8_t *name) {
	return ((int32_t (*)(GLhandleARB programObj, uint8_t *name))_func)(programObj, name);
}
intptr_t gllCall_glGetUniformOffsetEXT(void *_func, uint32_t program, int32_t location) {
	return ((intptr_t (*)(uint32_t program, int32_t location))_func)(program, location);
}
void gllCall_glGetUniformSubroutineuiv(void *_func, uint32_t shadertype, int32_t location, uint32_t *params) {
	((void (*)(uint32_t shadertype, int32_t location, uint32_t *params))_func)(shadertype, location, params);
}
void gllCall_glGetUniformdv(void *_func, uint32_t program, int32_t location, double *params) {
	((void (*)(uint32_t program, int32_t location, double *params))_func)(program, location, params);
}
void gllCall_glGetUniformfv(void *_func, uint32_t program, int32_t location, float *params) {
	((void (*)(uint32_t program, int32_t location, float *params))_func)(program, location, params);
}
void gllCall_glGetUniformfvARB(void *_func, GLhandleARB programObj, int32_t location, float *params) {
	((void (*)(GLhandleARB programObj, int32_t location, float *params))_func)(programObj, location, params);
}
void gllCall_glGetUniformi64vARB(void *_func, uint32_t program, int32_t location, int64_t *params) {
	((void (*)(uint32_t program, int32_t location, int64_t *params))_func)(program, location, params);
}
void gllCall_glGetUniformi64vNV(void *_func, uint32_t program, int32_t location, int64_t *params) {
	((void (*)(uint32_t program, int32_t location, int64_t *params))_func)(program, location, params);
}
void gllCall_glGetUniformiv(void *_func, uint32_t program, int32_t location, int32_t *params) {
	((void (*)(uint32_t program, int32_t location, int32_t *params))_func)(program, location, params);
}
void gllCall_glGetUniformivARB(void *_func, GLhandleARB programObj, int32_t location, int32_t *params) {
	((void (*)(GLhandleARB programObj, int32_t location, int32_t *params))_func)(programObj, location, params);
}
void gllCall_glGetUniformui64vARB(void *_func, uint32_t program, int32_t location, uint64_t *params) {
	((void (*)(uint32_t program, int32_t location, uint64_t *params))_func)(program, location, params);
}
void gllCall_glGetUniformui64vNV(void *_func, uint32_t program, int32_t location, uint64_t *params) {
	((void (*)(uint32_t program, int32_t location, uint64_t *params))_func)(program, location, params);
}
void gllCall_glGetUniformuiv(void *_func, uint32_t program, int32_t location, uint32_t *params) {
	((void (*)(uint32_t program, int32_t location, uint32_t *params))_func)(program, location, params);
}
void gllCall_glGetUniformuivEXT(void *_func, uint32_t program, int32_t location, uint32_t *params) {
	((void (*)(uint32_t program, int32_t location, uint32_t *params))_func)(program, location, params);
}
void gllCall_glGetUnsignedBytevEXT(void *_func, uint32_t pname, uint8_t *data) {
	((void (*)(uint32_t pname, uint8_t *data))_func)(pname, data);
}
void gllCall_glGetUnsignedBytei_vEXT(void *_func, uint32_t target, uint32_t index, uint8_t *data) {
	((void (*)(uint32_t target, uint32_t index, uint8_t *data))_func)(target, index, data);
}
void gllCall_glGetVariantArrayObjectfvATI(void *_func, uint32_t id, uint32_t pname, float *params) {
	((void (*)(uint32_t id, uint32_t pname, float *params))_func)(id, pname, params);
}
void gllCall_glGetVariantArrayObjectivATI(void *_func, uint32_t id, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t id, uint32_t pname, int32_t *params))_func)(id, pname, params);
}
void gllCall_glGetVariantBooleanvEXT(void *_func, uint32_t id, uint32_t value, _Bool *data) {
	((void (*)(uint32_t id, uint32_t value, _Bool *data))_func)(id, value, data);
}
void gllCall_glGetVariantFloatvEXT(void *_func, uint32_t id, uint32_t value, float *data) {
	((void (*)(uint32_t id, uint32_t value, float *data))_func)(id, value, data);
}
void gllCall_glGetVariantIntegervEXT(void *_func, uint32_t id, uint32_t value, int32_t *data) {
	((void (*)(uint32_t id, uint32_t value, int32_t *data))_func)(id, value, data);
}
void gllCall_glGetVariantPointervEXT(void *_func, uint32_t id, uint32_t value, void **data) {
	((void (*)(uint32_t id, uint32_t value, void **data))_func)(id, value, data);
}
int32_t gllCall_glGetVaryingLocationNV(void *_func, uint32_t program, uint8_t *name) {
	return ((int32_t (*)(uint32_t program, uint8_t *name))_func)(program, name);
}
void gllCall_glGetVertexArrayIndexed64iv(void *_func, uint32_t vaobj, uint32_t index, uint32_t pname, int64_t *param) {
	((void (*)(uint32_t vaobj, uint32_t index, uint32_t pname, int64_t *param))_func)(vaobj, index, pname, param);
}
void gllCall_glGetVertexArrayIndexediv(void *_func, uint32_t vaobj, uint32_t index, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t vaobj, uint32_t index, uint32_t pname, int32_t *param))_func)(vaobj, index, pname, param);
}
void gllCall_glGetVertexArrayIntegeri_vEXT(void *_func, uint32_t vaobj, uint32_t index, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t vaobj, uint32_t index, uint32_t pname, int32_t *param))_func)(vaobj, index, pname, param);
}
void gllCall_glGetVertexArrayIntegervEXT(void *_func, uint32_t vaobj, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t vaobj, uint32_t pname, int32_t *param))_func)(vaobj, pname, param);
}
void gllCall_glGetVertexArrayPointeri_vEXT(void *_func, uint32_t vaobj, uint32_t index, uint32_t pname, void **param) {
	((void (*)(uint32_t vaobj, uint32_t index, uint32_t pname, void **param))_func)(vaobj, index, pname, param);
}
void gllCall_glGetVertexArrayPointervEXT(void *_func, uint32_t vaobj, uint32_t pname, void **param) {
	((void (*)(uint32_t vaobj, uint32_t pname, void **param))_func)(vaobj, pname, param);
}
void gllCall_glGetVertexArrayiv(void *_func, uint32_t vaobj, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t vaobj, uint32_t pname, int32_t *param))_func)(vaobj, pname, param);
}
void gllCall_glGetVertexAttribArrayObjectfvATI(void *_func, uint32_t index, uint32_t pname, float *params) {
	((void (*)(uint32_t index, uint32_t pname, float *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribArrayObjectivATI(void *_func, uint32_t index, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t index, uint32_t pname, int32_t *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribIiv(void *_func, uint32_t index, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t index, uint32_t pname, int32_t *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribIivEXT(void *_func, uint32_t index, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t index, uint32_t pname, int32_t *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribIuiv(void *_func, uint32_t index, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t index, uint32_t pname, uint32_t *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribIuivEXT(void *_func, uint32_t index, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t index, uint32_t pname, uint32_t *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribLdv(void *_func, uint32_t index, uint32_t pname, double *params) {
	((void (*)(uint32_t index, uint32_t pname, double *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribLdvEXT(void *_func, uint32_t index, uint32_t pname, double *params) {
	((void (*)(uint32_t index, uint32_t pname, double *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribLi64vNV(void *_func, uint32_t index, uint32_t pname, int64_t *params) {
	((void (*)(uint32_t index, uint32_t pname, int64_t *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribLui64vARB(void *_func, uint32_t index, uint32_t pname, uint64_t *params) {
	((void (*)(uint32_t index, uint32_t pname, uint64_t *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribLui64vNV(void *_func, uint32_t index, uint32_t pname, uint64_t *params) {
	((void (*)(uint32_t index, uint32_t pname, uint64_t *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribPointerv(void *_func, uint32_t index, uint32_t pname, void **pointer) {
	((void (*)(uint32_t index, uint32_t pname, void **pointer))_func)(index, pname, pointer);
}
void gllCall_glGetVertexAttribPointervARB(void *_func, uint32_t index, uint32_t pname, void **pointer) {
	((void (*)(uint32_t index, uint32_t pname, void **pointer))_func)(index, pname, pointer);
}
void gllCall_glGetVertexAttribPointervNV(void *_func, uint32_t index, uint32_t pname, void **pointer) {
	((void (*)(uint32_t index, uint32_t pname, void **pointer))_func)(index, pname, pointer);
}
void gllCall_glGetVertexAttribdv(void *_func, uint32_t index, uint32_t pname, double *params) {
	((void (*)(uint32_t index, uint32_t pname, double *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribdvARB(void *_func, uint32_t index, uint32_t pname, double *params) {
	((void (*)(uint32_t index, uint32_t pname, double *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribdvNV(void *_func, uint32_t index, uint32_t pname, double *params) {
	((void (*)(uint32_t index, uint32_t pname, double *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribfv(void *_func, uint32_t index, uint32_t pname, float *params) {
	((void (*)(uint32_t index, uint32_t pname, float *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribfvARB(void *_func, uint32_t index, uint32_t pname, float *params) {
	((void (*)(uint32_t index, uint32_t pname, float *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribfvNV(void *_func, uint32_t index, uint32_t pname, float *params) {
	((void (*)(uint32_t index, uint32_t pname, float *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribiv(void *_func, uint32_t index, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t index, uint32_t pname, int32_t *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribivARB(void *_func, uint32_t index, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t index, uint32_t pname, int32_t *params))_func)(index, pname, params);
}
void gllCall_glGetVertexAttribivNV(void *_func, uint32_t index, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t index, uint32_t pname, int32_t *params))_func)(index, pname, params);
}
void gllCall_glGetVideoCaptureStreamdvNV(void *_func, uint32_t video_capture_slot, uint32_t stream, uint32_t pname, double *params) {
	((void (*)(uint32_t video_capture_slot, uint32_t stream, uint32_t pname, double *params))_func)(video_capture_slot, stream, pname, params);
}
void gllCall_glGetVideoCaptureStreamfvNV(void *_func, uint32_t video_capture_slot, uint32_t stream, uint32_t pname, float *params) {
	((void (*)(uint32_t video_capture_slot, uint32_t stream, uint32_t pname, float *params))_func)(video_capture_slot, stream, pname, params);
}
void gllCall_glGetVideoCaptureStreamivNV(void *_func, uint32_t video_capture_slot, uint32_t stream, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t video_capture_slot, uint32_t stream, uint32_t pname, int32_t *params))_func)(video_capture_slot, stream, pname, params);
}
void gllCall_glGetVideoCaptureivNV(void *_func, uint32_t video_capture_slot, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t video_capture_slot, uint32_t pname, int32_t *params))_func)(video_capture_slot, pname, params);
}
void gllCall_glGetVideoi64vNV(void *_func, uint32_t video_slot, uint32_t pname, int64_t *params) {
	((void (*)(uint32_t video_slot, uint32_t pname, int64_t *params))_func)(video_slot, pname, params);
}
void gllCall_glGetVideoivNV(void *_func, uint32_t video_slot, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t video_slot, uint32_t pname, int32_t *params))_func)(video_slot, pname, params);
}
void gllCall_glGetVideoui64vNV(void *_func, uint32_t video_slot, uint32_t pname, uint64_t *params) {
	((void (*)(uint32_t video_slot, uint32_t pname, uint64_t *params))_func)(video_slot, pname, params);
}
void gllCall_glGetVideouivNV(void *_func, uint32_t video_slot, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t video_slot, uint32_t pname, uint32_t *params))_func)(video_slot, pname, params);
}
void gllCall_glGetnColorTable(void *_func, uint32_t target, uint32_t format, uint32_t type, int32_t bufSize, void *table) {
	((void (*)(uint32_t target, uint32_t format, uint32_t type, int32_t bufSize, void *table))_func)(target, format, type, bufSize, table);
}
void gllCall_glGetnColorTableARB(void *_func, uint32_t target, uint32_t format, uint32_t type, int32_t bufSize, void *table) {
	((void (*)(uint32_t target, uint32_t format, uint32_t type, int32_t bufSize, void *table))_func)(target, format, type, bufSize, table);
}
void gllCall_glGetnCompressedTexImage(void *_func, uint32_t target, int32_t lod, int32_t bufSize, void *pixels) {
	((void (*)(uint32_t target, int32_t lod, int32_t bufSize, void *pixels))_func)(target, lod, bufSize, pixels);
}
void gllCall_glGetnCompressedTexImageARB(void *_func, uint32_t target, int32_t lod, int32_t bufSize, void *img) {
	((void (*)(uint32_t target, int32_t lod, int32_t bufSize, void *img))_func)(target, lod, bufSize, img);
}
void gllCall_glGetnConvolutionFilter(void *_func, uint32_t target, uint32_t format, uint32_t type, int32_t bufSize, void *image) {
	((void (*)(uint32_t target, uint32_t format, uint32_t type, int32_t bufSize, void *image))_func)(target, format, type, bufSize, image);
}
void gllCall_glGetnConvolutionFilterARB(void *_func, uint32_t target, uint32_t format, uint32_t type, int32_t bufSize, void *image) {
	((void (*)(uint32_t target, uint32_t format, uint32_t type, int32_t bufSize, void *image))_func)(target, format, type, bufSize, image);
}
void gllCall_glGetnHistogram(void *_func, uint32_t target, _Bool reset, uint32_t format, uint32_t type, int32_t bufSize, void *values) {
	((void (*)(uint32_t target, _Bool reset, uint32_t format, uint32_t type, int32_t bufSize, void *values))_func)(target, reset, format, type, bufSize, values);
}
void gllCall_glGetnHistogramARB(void *_func, uint32_t target, _Bool reset, uint32_t format, uint32_t type, int32_t bufSize, void *values) {
	((void (*)(uint32_t target, _Bool reset, uint32_t format, uint32_t type, int32_t bufSize, void *values))_func)(target, reset, format, type, bufSize, values);
}
void gllCall_glGetnMapdv(void *_func, uint32_t target, uint32_t query, int32_t bufSize, double *v) {
	((void (*)(uint32_t target, uint32_t query, int32_t bufSize, double *v))_func)(target, query, bufSize, v);
}
void gllCall_glGetnMapdvARB(void *_func, uint32_t target, uint32_t query, int32_t bufSize, double *v) {
	((void (*)(uint32_t target, uint32_t query, int32_t bufSize, double *v))_func)(target, query, bufSize, v);
}
void gllCall_glGetnMapfv(void *_func, uint32_t target, uint32_t query, int32_t bufSize, float *v) {
	((void (*)(uint32_t target, uint32_t query, int32_t bufSize, float *v))_func)(target, query, bufSize, v);
}
void gllCall_glGetnMapfvARB(void *_func, uint32_t target, uint32_t query, int32_t bufSize, float *v) {
	((void (*)(uint32_t target, uint32_t query, int32_t bufSize, float *v))_func)(target, query, bufSize, v);
}
void gllCall_glGetnMapiv(void *_func, uint32_t target, uint32_t query, int32_t bufSize, int32_t *v) {
	((void (*)(uint32_t target, uint32_t query, int32_t bufSize, int32_t *v))_func)(target, query, bufSize, v);
}
void gllCall_glGetnMapivARB(void *_func, uint32_t target, uint32_t query, int32_t bufSize, int32_t *v) {
	((void (*)(uint32_t target, uint32_t query, int32_t bufSize, int32_t *v))_func)(target, query, bufSize, v);
}
void gllCall_glGetnMinmax(void *_func, uint32_t target, _Bool reset, uint32_t format, uint32_t type, int32_t bufSize, void *values) {
	((void (*)(uint32_t target, _Bool reset, uint32_t format, uint32_t type, int32_t bufSize, void *values))_func)(target, reset, format, type, bufSize, values);
}
void gllCall_glGetnMinmaxARB(void *_func, uint32_t target, _Bool reset, uint32_t format, uint32_t type, int32_t bufSize, void *values) {
	((void (*)(uint32_t target, _Bool reset, uint32_t format, uint32_t type, int32_t bufSize, void *values))_func)(target, reset, format, type, bufSize, values);
}
void gllCall_glGetnPixelMapfv(void *_func, uint32_t map, int32_t bufSize, float *values) {
	((void (*)(uint32_t map, int32_t bufSize, float *values))_func)(map, bufSize, values);
}
void gllCall_glGetnPixelMapfvARB(void *_func, uint32_t map, int32_t bufSize, float *values) {
	((void (*)(uint32_t map, int32_t bufSize, float *values))_func)(map, bufSize, values);
}
void gllCall_glGetnPixelMapuiv(void *_func, uint32_t map, int32_t bufSize, uint32_t *values) {
	((void (*)(uint32_t map, int32_t bufSize, uint32_t *values))_func)(map, bufSize, values);
}
void gllCall_glGetnPixelMapuivARB(void *_func, uint32_t map, int32_t bufSize, uint32_t *values) {
	((void (*)(uint32_t map, int32_t bufSize, uint32_t *values))_func)(map, bufSize, values);
}
void gllCall_glGetnPixelMapusv(void *_func, uint32_t map, int32_t bufSize, uint16_t *values) {
	((void (*)(uint32_t map, int32_t bufSize, uint16_t *values))_func)(map, bufSize, values);
}
void gllCall_glGetnPixelMapusvARB(void *_func, uint32_t map, int32_t bufSize, uint16_t *values) {
	((void (*)(uint32_t map, int32_t bufSize, uint16_t *values))_func)(map, bufSize, values);
}
void gllCall_glGetnPolygonStipple(void *_func, int32_t bufSize, uint8_t *pattern) {
	((void (*)(int32_t bufSize, uint8_t *pattern))_func)(bufSize, pattern);
}
void gllCall_glGetnPolygonStippleARB(void *_func, int32_t bufSize, uint8_t *pattern) {
	((void (*)(int32_t bufSize, uint8_t *pattern))_func)(bufSize, pattern);
}
void gllCall_glGetnSeparableFilter(void *_func, uint32_t target, uint32_t format, uint32_t type, int32_t rowBufSize, void *row, int32_t columnBufSize, void *column, void *span) {
	((void (*)(uint32_t target, uint32_t format, uint32_t type, int32_t rowBufSize, void *row, int32_t columnBufSize, void *column, void *span))_func)(target, format, type, rowBufSize, row, columnBufSize, column, span);
}
void gllCall_glGetnSeparableFilterARB(void *_func, uint32_t target, uint32_t format, uint32_t type, int32_t rowBufSize, void *row, int32_t columnBufSize, void *column, void *span) {
	((void (*)(uint32_t target, uint32_t format, uint32_t type, int32_t rowBufSize, void *row, int32_t columnBufSize, void *column, void *span))_func)(target, format, type, rowBufSize, row, columnBufSize, column, span);
}
void gllCall_glGetnTexImage(void *_func, uint32_t target, int32_t level, uint32_t format, uint32_t type, int32_t bufSize, void *pixels) {
	((void (*)(uint32_t target, int32_t level, uint32_t format, uint32_t type, int32_t bufSize, void *pixels))_func)(target, level, format, type, bufSize, pixels);
}
void gllCall_glGetnTexImageARB(void *_func, uint32_t target, int32_t level, uint32_t format, uint32_t type, int32_t bufSize, void *img) {
	((void (*)(uint32_t target, int32_t level, uint32_t format, uint32_t type, int32_t bufSize, void *img))_func)(target, level, format, type, bufSize, img);
}
void gllCall_glGetnUniformdv(void *_func, uint32_t program, int32_t location, int32_t bufSize, double *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, double *params))_func)(program, location, bufSize, params);
}
void gllCall_glGetnUniformdvARB(void *_func, uint32_t program, int32_t location, int32_t bufSize, double *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, double *params))_func)(program, location, bufSize, params);
}
void gllCall_glGetnUniformfv(void *_func, uint32_t program, int32_t location, int32_t bufSize, float *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, float *params))_func)(program, location, bufSize, params);
}
void gllCall_glGetnUniformfvARB(void *_func, uint32_t program, int32_t location, int32_t bufSize, float *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, float *params))_func)(program, location, bufSize, params);
}
void gllCall_glGetnUniformfvEXT(void *_func, uint32_t program, int32_t location, int32_t bufSize, float *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, float *params))_func)(program, location, bufSize, params);
}
void gllCall_glGetnUniformfvKHR(void *_func, uint32_t program, int32_t location, int32_t bufSize, float *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, float *params))_func)(program, location, bufSize, params);
}
void gllCall_glGetnUniformi64vARB(void *_func, uint32_t program, int32_t location, int32_t bufSize, int64_t *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, int64_t *params))_func)(program, location, bufSize, params);
}
void gllCall_glGetnUniformiv(void *_func, uint32_t program, int32_t location, int32_t bufSize, int32_t *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, int32_t *params))_func)(program, location, bufSize, params);
}
void gllCall_glGetnUniformivARB(void *_func, uint32_t program, int32_t location, int32_t bufSize, int32_t *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, int32_t *params))_func)(program, location, bufSize, params);
}
void gllCall_glGetnUniformivEXT(void *_func, uint32_t program, int32_t location, int32_t bufSize, int32_t *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, int32_t *params))_func)(program, location, bufSize, params);
}
void gllCall_glGetnUniformivKHR(void *_func, uint32_t program, int32_t location, int32_t bufSize, int32_t *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, int32_t *params))_func)(program, location, bufSize, params);
}
void gllCall_glGetnUniformui64vARB(void *_func, uint32_t program, int32_t location, int32_t bufSize, uint64_t *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, uint64_t *params))_func)(program, location, bufSize, params);
}
void gllCall_glGetnUniformuiv(void *_func, uint32_t program, int32_t location, int32_t bufSize, uint32_t *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, uint32_t *params))_func)(program, location, bufSize, params);
}
void gllCall_glGetnUniformuivARB(void *_func, uint32_t program, int32_t location, int32_t bufSize, uint32_t *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, uint32_t *params))_func)(program, location, bufSize, params);
}
void gllCall_glGetnUniformuivKHR(void *_func, uint32_t program, int32_t location, int32_t bufSize, uint32_t *params) {
	((void (*)(uint32_t program, int32_t location, int32_t bufSize, uint32_t *params))_func)(program, location, bufSize, params);
}
void gllCall_glGlobalAlphaFactorbSUN(void *_func, int8_t factor) {
	((void (*)(int8_t factor))_func)(factor);
}
void gllCall_glGlobalAlphaFactordSUN(void *_func, double factor) {
	((void (*)(double factor))_func)(factor);
}
void gllCall_glGlobalAlphaFactorfSUN(void *_func, float factor) {
	((void (*)(float factor))_func)(factor);
}
void gllCall_glGlobalAlphaFactoriSUN(void *_func, int32_t factor) {
	((void (*)(int32_t factor))_func)(factor);
}
void gllCall_glGlobalAlphaFactorsSUN(void *_func, int16_t factor) {
	((void (*)(int16_t factor))_func)(factor);
}
void gllCall_glGlobalAlphaFactorubSUN(void *_func, uint8_t factor) {
	((void (*)(uint8_t factor))_func)(factor);
}
void gllCall_glGlobalAlphaFactoruiSUN(void *_func, uint32_t factor) {
	((void (*)(uint32_t factor))_func)(factor);
}
void gllCall_glGlobalAlphaFactorusSUN(void *_func, uint16_t factor) {
	((void (*)(uint16_t factor))_func)(factor);
}
void gllCall_glHint(void *_func, uint32_t target, uint32_t mode) {
	((void (*)(uint32_t target, uint32_t mode))_func)(target, mode);
}
void gllCall_glHintPGI(void *_func, uint32_t target, int32_t mode) {
	((void (*)(uint32_t target, int32_t mode))_func)(target, mode);
}
void gllCall_glHistogram(void *_func, uint32_t target, int32_t width, uint32_t internalformat, _Bool sink) {
	((void (*)(uint32_t target, int32_t width, uint32_t internalformat, _Bool sink))_func)(target, width, internalformat, sink);
}
void gllCall_glHistogramEXT(void *_func, uint32_t target, int32_t width, uint32_t internalformat, _Bool sink) {
	((void (*)(uint32_t target, int32_t width, uint32_t internalformat, _Bool sink))_func)(target, width, internalformat, sink);
}
void gllCall_glIglooInterfaceSGIX(void *_func, uint32_t pname, void *params) {
	((void (*)(uint32_t pname, void *params))_func)(pname, params);
}
void gllCall_glImageTransformParameterfHP(void *_func, uint32_t target, uint32_t pname, float param) {
	((void (*)(uint32_t target, uint32_t pname, float param))_func)(target, pname, param);
}
void gllCall_glImageTransformParameterfvHP(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glImageTransformParameteriHP(void *_func, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t target, uint32_t pname, int32_t param))_func)(target, pname, param);
}
void gllCall_glImageTransformParameterivHP(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glImportMemoryFdEXT(void *_func, uint32_t memory, uint64_t size, uint32_t handleType, int32_t fd) {
	((void (*)(uint32_t memory, uint64_t size, uint32_t handleType, int32_t fd))_func)(memory, size, handleType, fd);
}
void gllCall_glImportMemoryWin32HandleEXT(void *_func, uint32_t memory, uint64_t size, uint32_t handleType, void *handle) {
	((void (*)(uint32_t memory, uint64_t size, uint32_t handleType, void *handle))_func)(memory, size, handleType, handle);
}
void gllCall_glImportMemoryWin32NameEXT(void *_func, uint32_t memory, uint64_t size, uint32_t handleType, void *name) {
	((void (*)(uint32_t memory, uint64_t size, uint32_t handleType, void *name))_func)(memory, size, handleType, name);
}
void gllCall_glImportSemaphoreFdEXT(void *_func, uint32_t semaphore, uint32_t handleType, int32_t fd) {
	((void (*)(uint32_t semaphore, uint32_t handleType, int32_t fd))_func)(semaphore, handleType, fd);
}
void gllCall_glImportSemaphoreWin32HandleEXT(void *_func, uint32_t semaphore, uint32_t handleType, void *handle) {
	((void (*)(uint32_t semaphore, uint32_t handleType, void *handle))_func)(semaphore, handleType, handle);
}
void gllCall_glImportSemaphoreWin32NameEXT(void *_func, uint32_t semaphore, uint32_t handleType, void *name) {
	((void (*)(uint32_t semaphore, uint32_t handleType, void *name))_func)(semaphore, handleType, name);
}
GLsync gllCall_glImportSyncEXT(void *_func, uint32_t external_sync_type, intptr_t external_sync, uint32_t flags) {
	return ((GLsync (*)(uint32_t external_sync_type, intptr_t external_sync, uint32_t flags))_func)(external_sync_type, external_sync, flags);
}
void gllCall_glIndexFormatNV(void *_func, uint32_t type, int32_t stride) {
	((void (*)(uint32_t type, int32_t stride))_func)(type, stride);
}
void gllCall_glIndexFuncEXT(void *_func, uint32_t func, float ref) {
	((void (*)(uint32_t func, float ref))_func)(func, ref);
}
void gllCall_glIndexMask(void *_func, uint32_t mask) {
	((void (*)(uint32_t mask))_func)(mask);
}
void gllCall_glIndexMaterialEXT(void *_func, uint32_t face, uint32_t mode) {
	((void (*)(uint32_t face, uint32_t mode))_func)(face, mode);
}
void gllCall_glIndexPointer(void *_func, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(uint32_t type, int32_t stride, void *pointer))_func)(type, stride, pointer);
}
void gllCall_glIndexPointerEXT(void *_func, uint32_t type, int32_t stride, int32_t count, void *pointer) {
	((void (*)(uint32_t type, int32_t stride, int32_t count, void *pointer))_func)(type, stride, count, pointer);
}
void gllCall_glIndexPointerListIBM(void *_func, uint32_t type, int32_t stride, void **pointer, int32_t ptrstride) {
	((void (*)(uint32_t type, int32_t stride, void **pointer, int32_t ptrstride))_func)(type, stride, pointer, ptrstride);
}
void gllCall_glIndexd(void *_func, double c) {
	((void (*)(double c))_func)(c);
}
void gllCall_glIndexdv(void *_func, double *c) {
	((void (*)(double *c))_func)(c);
}
void gllCall_glIndexf(void *_func, float c) {
	((void (*)(float c))_func)(c);
}
void gllCall_glIndexfv(void *_func, float *c) {
	((void (*)(float *c))_func)(c);
}
void gllCall_glIndexi(void *_func, int32_t c) {
	((void (*)(int32_t c))_func)(c);
}
void gllCall_glIndexiv(void *_func, int32_t *c) {
	((void (*)(int32_t *c))_func)(c);
}
void gllCall_glIndexs(void *_func, int16_t c) {
	((void (*)(int16_t c))_func)(c);
}
void gllCall_glIndexsv(void *_func, int16_t *c) {
	((void (*)(int16_t *c))_func)(c);
}
void gllCall_glIndexub(void *_func, uint8_t c) {
	((void (*)(uint8_t c))_func)(c);
}
void gllCall_glIndexubv(void *_func, uint8_t *c) {
	((void (*)(uint8_t *c))_func)(c);
}
void gllCall_glIndexxOES(void *_func, int32_t component) {
	((void (*)(int32_t component))_func)(component);
}
void gllCall_glIndexxvOES(void *_func, int32_t *component) {
	((void (*)(int32_t *component))_func)(component);
}
void gllCall_glInitNames(void *_func) {
	((void (*)())_func)();
}
void gllCall_glInsertComponentEXT(void *_func, uint32_t res, uint32_t src, uint32_t num) {
	((void (*)(uint32_t res, uint32_t src, uint32_t num))_func)(res, src, num);
}
void gllCall_glInsertEventMarkerEXT(void *_func, int32_t length, uint8_t *marker) {
	((void (*)(int32_t length, uint8_t *marker))_func)(length, marker);
}
void gllCall_glInstrumentsBufferSGIX(void *_func, int32_t size, int32_t *buffer) {
	((void (*)(int32_t size, int32_t *buffer))_func)(size, buffer);
}
void gllCall_glInterleavedArrays(void *_func, uint32_t format, int32_t stride, void *pointer) {
	((void (*)(uint32_t format, int32_t stride, void *pointer))_func)(format, stride, pointer);
}
void gllCall_glInterpolatePathsNV(void *_func, uint32_t resultPath, uint32_t pathA, uint32_t pathB, float weight) {
	((void (*)(uint32_t resultPath, uint32_t pathA, uint32_t pathB, float weight))_func)(resultPath, pathA, pathB, weight);
}
void gllCall_glInvalidateBufferData(void *_func, uint32_t buffer) {
	((void (*)(uint32_t buffer))_func)(buffer);
}
void gllCall_glInvalidateBufferSubData(void *_func, uint32_t buffer, intptr_t offset, ssize_t length) {
	((void (*)(uint32_t buffer, intptr_t offset, ssize_t length))_func)(buffer, offset, length);
}
void gllCall_glInvalidateFramebuffer(void *_func, uint32_t target, int32_t numAttachments, uint32_t *attachments) {
	((void (*)(uint32_t target, int32_t numAttachments, uint32_t *attachments))_func)(target, numAttachments, attachments);
}
void gllCall_glInvalidateNamedFramebufferData(void *_func, uint32_t framebuffer, int32_t numAttachments, uint32_t *attachments) {
	((void (*)(uint32_t framebuffer, int32_t numAttachments, uint32_t *attachments))_func)(framebuffer, numAttachments, attachments);
}
void gllCall_glInvalidateNamedFramebufferSubData(void *_func, uint32_t framebuffer, int32_t numAttachments, uint32_t *attachments, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t framebuffer, int32_t numAttachments, uint32_t *attachments, int32_t x, int32_t y, int32_t width, int32_t height))_func)(framebuffer, numAttachments, attachments, x, y, width, height);
}
void gllCall_glInvalidateSubFramebuffer(void *_func, uint32_t target, int32_t numAttachments, uint32_t *attachments, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t numAttachments, uint32_t *attachments, int32_t x, int32_t y, int32_t width, int32_t height))_func)(target, numAttachments, attachments, x, y, width, height);
}
void gllCall_glInvalidateTexImage(void *_func, uint32_t texture, int32_t level) {
	((void (*)(uint32_t texture, int32_t level))_func)(texture, level);
}
void gllCall_glInvalidateTexSubImage(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth))_func)(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}
_Bool gllCall_glIsAsyncMarkerSGIX(void *_func, uint32_t marker) {
	return ((_Bool (*)(uint32_t marker))_func)(marker);
}
_Bool gllCall_glIsBuffer(void *_func, uint32_t buffer) {
	return ((_Bool (*)(uint32_t buffer))_func)(buffer);
}
_Bool gllCall_glIsBufferARB(void *_func, uint32_t buffer) {
	return ((_Bool (*)(uint32_t buffer))_func)(buffer);
}
_Bool gllCall_glIsBufferResidentNV(void *_func, uint32_t target) {
	return ((_Bool (*)(uint32_t target))_func)(target);
}
_Bool gllCall_glIsCommandListNV(void *_func, uint32_t list) {
	return ((_Bool (*)(uint32_t list))_func)(list);
}
_Bool gllCall_glIsEnabled(void *_func, uint32_t cap) {
	return ((_Bool (*)(uint32_t cap))_func)(cap);
}
_Bool gllCall_glIsEnabledIndexedEXT(void *_func, uint32_t target, uint32_t index) {
	return ((_Bool (*)(uint32_t target, uint32_t index))_func)(target, index);
}
_Bool gllCall_glIsEnabledi(void *_func, uint32_t target, uint32_t index) {
	return ((_Bool (*)(uint32_t target, uint32_t index))_func)(target, index);
}
_Bool gllCall_glIsEnablediEXT(void *_func, uint32_t target, uint32_t index) {
	return ((_Bool (*)(uint32_t target, uint32_t index))_func)(target, index);
}
_Bool gllCall_glIsEnablediNV(void *_func, uint32_t target, uint32_t index) {
	return ((_Bool (*)(uint32_t target, uint32_t index))_func)(target, index);
}
_Bool gllCall_glIsEnablediOES(void *_func, uint32_t target, uint32_t index) {
	return ((_Bool (*)(uint32_t target, uint32_t index))_func)(target, index);
}
_Bool gllCall_glIsFenceAPPLE(void *_func, uint32_t fence) {
	return ((_Bool (*)(uint32_t fence))_func)(fence);
}
_Bool gllCall_glIsFenceNV(void *_func, uint32_t fence) {
	return ((_Bool (*)(uint32_t fence))_func)(fence);
}
_Bool gllCall_glIsFramebuffer(void *_func, uint32_t framebuffer) {
	return ((_Bool (*)(uint32_t framebuffer))_func)(framebuffer);
}
_Bool gllCall_glIsFramebufferEXT(void *_func, uint32_t framebuffer) {
	return ((_Bool (*)(uint32_t framebuffer))_func)(framebuffer);
}
_Bool gllCall_glIsFramebufferOES(void *_func, uint32_t framebuffer) {
	return ((_Bool (*)(uint32_t framebuffer))_func)(framebuffer);
}
_Bool gllCall_glIsImageHandleResidentARB(void *_func, uint64_t handle) {
	return ((_Bool (*)(uint64_t handle))_func)(handle);
}
_Bool gllCall_glIsImageHandleResidentNV(void *_func, uint64_t handle) {
	return ((_Bool (*)(uint64_t handle))_func)(handle);
}
_Bool gllCall_glIsList(void *_func, uint32_t list) {
	return ((_Bool (*)(uint32_t list))_func)(list);
}
_Bool gllCall_glIsMemoryObjectEXT(void *_func, uint32_t memoryObject) {
	return ((_Bool (*)(uint32_t memoryObject))_func)(memoryObject);
}
_Bool gllCall_glIsNameAMD(void *_func, uint32_t identifier, uint32_t name) {
	return ((_Bool (*)(uint32_t identifier, uint32_t name))_func)(identifier, name);
}
_Bool gllCall_glIsNamedBufferResidentNV(void *_func, uint32_t buffer) {
	return ((_Bool (*)(uint32_t buffer))_func)(buffer);
}
_Bool gllCall_glIsNamedStringARB(void *_func, int32_t namelen, uint8_t *name) {
	return ((_Bool (*)(int32_t namelen, uint8_t *name))_func)(namelen, name);
}
_Bool gllCall_glIsObjectBufferATI(void *_func, uint32_t buffer) {
	return ((_Bool (*)(uint32_t buffer))_func)(buffer);
}
_Bool gllCall_glIsOcclusionQueryNV(void *_func, uint32_t id) {
	return ((_Bool (*)(uint32_t id))_func)(id);
}
_Bool gllCall_glIsPathNV(void *_func, uint32_t path) {
	return ((_Bool (*)(uint32_t path))_func)(path);
}
_Bool gllCall_glIsPointInFillPathNV(void *_func, uint32_t path, uint32_t mask, float x, float y) {
	return ((_Bool (*)(uint32_t path, uint32_t mask, float x, float y))_func)(path, mask, x, y);
}
_Bool gllCall_glIsPointInStrokePathNV(void *_func, uint32_t path, float x, float y) {
	return ((_Bool (*)(uint32_t path, float x, float y))_func)(path, x, y);
}
_Bool gllCall_glIsProgram(void *_func, uint32_t program) {
	return ((_Bool (*)(uint32_t program))_func)(program);
}
_Bool gllCall_glIsProgramARB(void *_func, uint32_t program) {
	return ((_Bool (*)(uint32_t program))_func)(program);
}
_Bool gllCall_glIsProgramNV(void *_func, uint32_t id) {
	return ((_Bool (*)(uint32_t id))_func)(id);
}
_Bool gllCall_glIsProgramPipeline(void *_func, uint32_t pipeline) {
	return ((_Bool (*)(uint32_t pipeline))_func)(pipeline);
}
_Bool gllCall_glIsProgramPipelineEXT(void *_func, uint32_t pipeline) {
	return ((_Bool (*)(uint32_t pipeline))_func)(pipeline);
}
_Bool gllCall_glIsQuery(void *_func, uint32_t id) {
	return ((_Bool (*)(uint32_t id))_func)(id);
}
_Bool gllCall_glIsQueryARB(void *_func, uint32_t id) {
	return ((_Bool (*)(uint32_t id))_func)(id);
}
_Bool gllCall_glIsQueryEXT(void *_func, uint32_t id) {
	return ((_Bool (*)(uint32_t id))_func)(id);
}
_Bool gllCall_glIsRenderbuffer(void *_func, uint32_t renderbuffer) {
	return ((_Bool (*)(uint32_t renderbuffer))_func)(renderbuffer);
}
_Bool gllCall_glIsRenderbufferEXT(void *_func, uint32_t renderbuffer) {
	return ((_Bool (*)(uint32_t renderbuffer))_func)(renderbuffer);
}
_Bool gllCall_glIsRenderbufferOES(void *_func, uint32_t renderbuffer) {
	return ((_Bool (*)(uint32_t renderbuffer))_func)(renderbuffer);
}
_Bool gllCall_glIsSemaphoreEXT(void *_func, uint32_t semaphore) {
	return ((_Bool (*)(uint32_t semaphore))_func)(semaphore);
}
_Bool gllCall_glIsSampler(void *_func, uint32_t sampler) {
	return ((_Bool (*)(uint32_t sampler))_func)(sampler);
}
_Bool gllCall_glIsShader(void *_func, uint32_t shader) {
	return ((_Bool (*)(uint32_t shader))_func)(shader);
}
_Bool gllCall_glIsStateNV(void *_func, uint32_t state) {
	return ((_Bool (*)(uint32_t state))_func)(state);
}
_Bool gllCall_glIsSync(void *_func, GLsync sync) {
	return ((_Bool (*)(GLsync sync))_func)(sync);
}
_Bool gllCall_glIsSyncAPPLE(void *_func, GLsync sync) {
	return ((_Bool (*)(GLsync sync))_func)(sync);
}
_Bool gllCall_glIsTexture(void *_func, uint32_t texture) {
	return ((_Bool (*)(uint32_t texture))_func)(texture);
}
_Bool gllCall_glIsTextureEXT(void *_func, uint32_t texture) {
	return ((_Bool (*)(uint32_t texture))_func)(texture);
}
_Bool gllCall_glIsTextureHandleResidentARB(void *_func, uint64_t handle) {
	return ((_Bool (*)(uint64_t handle))_func)(handle);
}
_Bool gllCall_glIsTextureHandleResidentNV(void *_func, uint64_t handle) {
	return ((_Bool (*)(uint64_t handle))_func)(handle);
}
_Bool gllCall_glIsTransformFeedback(void *_func, uint32_t id) {
	return ((_Bool (*)(uint32_t id))_func)(id);
}
_Bool gllCall_glIsTransformFeedbackNV(void *_func, uint32_t id) {
	return ((_Bool (*)(uint32_t id))_func)(id);
}
_Bool gllCall_glIsVariantEnabledEXT(void *_func, uint32_t id, uint32_t cap) {
	return ((_Bool (*)(uint32_t id, uint32_t cap))_func)(id, cap);
}
_Bool gllCall_glIsVertexArray(void *_func, uint32_t array) {
	return ((_Bool (*)(uint32_t array))_func)(array);
}
_Bool gllCall_glIsVertexArrayAPPLE(void *_func, uint32_t array) {
	return ((_Bool (*)(uint32_t array))_func)(array);
}
_Bool gllCall_glIsVertexArrayOES(void *_func, uint32_t array) {
	return ((_Bool (*)(uint32_t array))_func)(array);
}
_Bool gllCall_glIsVertexAttribEnabledAPPLE(void *_func, uint32_t index, uint32_t pname) {
	return ((_Bool (*)(uint32_t index, uint32_t pname))_func)(index, pname);
}
void gllCall_glLGPUCopyImageSubDataNVX(void *_func, uint32_t sourceGpu, uint32_t destinationGpuMask, uint32_t srcName, uint32_t srcTarget, int32_t srcLevel, int32_t srcX, int32_t srxY, int32_t srcZ, uint32_t dstName, uint32_t dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t width, int32_t height, int32_t depth) {
	((void (*)(uint32_t sourceGpu, uint32_t destinationGpuMask, uint32_t srcName, uint32_t srcTarget, int32_t srcLevel, int32_t srcX, int32_t srxY, int32_t srcZ, uint32_t dstName, uint32_t dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t width, int32_t height, int32_t depth))_func)(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}
void gllCall_glLGPUInterlockNVX(void *_func) {
	((void (*)())_func)();
}
void gllCall_glLGPUNamedBufferSubDataNVX(void *_func, uint32_t gpuMask, uint32_t buffer, intptr_t offset, ssize_t size, void *data) {
	((void (*)(uint32_t gpuMask, uint32_t buffer, intptr_t offset, ssize_t size, void *data))_func)(gpuMask, buffer, offset, size, data);
}
void gllCall_glLabelObjectEXT(void *_func, uint32_t type, uint32_t object, int32_t length, uint8_t *label) {
	((void (*)(uint32_t type, uint32_t object, int32_t length, uint8_t *label))_func)(type, object, length, label);
}
void gllCall_glLightEnviSGIX(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glLightModelf(void *_func, uint32_t pname, float param) {
	((void (*)(uint32_t pname, float param))_func)(pname, param);
}
void gllCall_glLightModelfv(void *_func, uint32_t pname, float *params) {
	((void (*)(uint32_t pname, float *params))_func)(pname, params);
}
void gllCall_glLightModeli(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glLightModeliv(void *_func, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pname, int32_t *params))_func)(pname, params);
}
void gllCall_glLightModelx(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glLightModelxOES(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glLightModelxv(void *_func, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t pname, int32_t *param))_func)(pname, param);
}
void gllCall_glLightModelxvOES(void *_func, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t pname, int32_t *param))_func)(pname, param);
}
void gllCall_glLightf(void *_func, uint32_t light, uint32_t pname, float param) {
	((void (*)(uint32_t light, uint32_t pname, float param))_func)(light, pname, param);
}
void gllCall_glLightfv(void *_func, uint32_t light, uint32_t pname, float *params) {
	((void (*)(uint32_t light, uint32_t pname, float *params))_func)(light, pname, params);
}
void gllCall_glLighti(void *_func, uint32_t light, uint32_t pname, int32_t param) {
	((void (*)(uint32_t light, uint32_t pname, int32_t param))_func)(light, pname, param);
}
void gllCall_glLightiv(void *_func, uint32_t light, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t light, uint32_t pname, int32_t *params))_func)(light, pname, params);
}
void gllCall_glLightx(void *_func, uint32_t light, uint32_t pname, int32_t param) {
	((void (*)(uint32_t light, uint32_t pname, int32_t param))_func)(light, pname, param);
}
void gllCall_glLightxOES(void *_func, uint32_t light, uint32_t pname, int32_t param) {
	((void (*)(uint32_t light, uint32_t pname, int32_t param))_func)(light, pname, param);
}
void gllCall_glLightxv(void *_func, uint32_t light, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t light, uint32_t pname, int32_t *params))_func)(light, pname, params);
}
void gllCall_glLightxvOES(void *_func, uint32_t light, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t light, uint32_t pname, int32_t *params))_func)(light, pname, params);
}
void gllCall_glLineStipple(void *_func, int32_t factor, uint16_t pattern) {
	((void (*)(int32_t factor, uint16_t pattern))_func)(factor, pattern);
}
void gllCall_glLineWidth(void *_func, float width) {
	((void (*)(float width))_func)(width);
}
void gllCall_glLineWidthx(void *_func, int32_t width) {
	((void (*)(int32_t width))_func)(width);
}
void gllCall_glLineWidthxOES(void *_func, int32_t width) {
	((void (*)(int32_t width))_func)(width);
}
void gllCall_glLinkProgram(void *_func, uint32_t program) {
	((void (*)(uint32_t program))_func)(program);
}
void gllCall_glLinkProgramARB(void *_func, GLhandleARB programObj) {
	((void (*)(GLhandleARB programObj))_func)(programObj);
}
void gllCall_glListBase(void *_func, uint32_t base) {
	((void (*)(uint32_t base))_func)(base);
}
void gllCall_glListDrawCommandsStatesClientNV(void *_func, uint32_t list, uint32_t segment, void **indirects, int32_t *sizes, uint32_t *states, uint32_t *fbos, uint32_t count) {
	((void (*)(uint32_t list, uint32_t segment, void **indirects, int32_t *sizes, uint32_t *states, uint32_t *fbos, uint32_t count))_func)(list, segment, indirects, sizes, states, fbos, count);
}
void gllCall_glListParameterfSGIX(void *_func, uint32_t list, uint32_t pname, float param) {
	((void (*)(uint32_t list, uint32_t pname, float param))_func)(list, pname, param);
}
void gllCall_glListParameterfvSGIX(void *_func, uint32_t list, uint32_t pname, float *params) {
	((void (*)(uint32_t list, uint32_t pname, float *params))_func)(list, pname, params);
}
void gllCall_glListParameteriSGIX(void *_func, uint32_t list, uint32_t pname, int32_t param) {
	((void (*)(uint32_t list, uint32_t pname, int32_t param))_func)(list, pname, param);
}
void gllCall_glListParameterivSGIX(void *_func, uint32_t list, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t list, uint32_t pname, int32_t *params))_func)(list, pname, params);
}
void gllCall_glLoadIdentity(void *_func) {
	((void (*)())_func)();
}
void gllCall_glLoadIdentityDeformationMapSGIX(void *_func, uint32_t mask) {
	((void (*)(uint32_t mask))_func)(mask);
}
void gllCall_glLoadMatrixd(void *_func, double *m) {
	((void (*)(double *m))_func)(m);
}
void gllCall_glLoadMatrixf(void *_func, float *m) {
	((void (*)(float *m))_func)(m);
}
void gllCall_glLoadMatrixx(void *_func, int32_t *m) {
	((void (*)(int32_t *m))_func)(m);
}
void gllCall_glLoadMatrixxOES(void *_func, int32_t *m) {
	((void (*)(int32_t *m))_func)(m);
}
void gllCall_glLoadName(void *_func, uint32_t name) {
	((void (*)(uint32_t name))_func)(name);
}
void gllCall_glLoadPaletteFromModelViewMatrixOES(void *_func) {
	((void (*)())_func)();
}
void gllCall_glLoadProgramNV(void *_func, uint32_t target, uint32_t id, int32_t len, uint8_t *program) {
	((void (*)(uint32_t target, uint32_t id, int32_t len, uint8_t *program))_func)(target, id, len, program);
}
void gllCall_glLoadTransposeMatrixd(void *_func, double *m) {
	((void (*)(double *m))_func)(m);
}
void gllCall_glLoadTransposeMatrixdARB(void *_func, double *m) {
	((void (*)(double *m))_func)(m);
}
void gllCall_glLoadTransposeMatrixf(void *_func, float *m) {
	((void (*)(float *m))_func)(m);
}
void gllCall_glLoadTransposeMatrixfARB(void *_func, float *m) {
	((void (*)(float *m))_func)(m);
}
void gllCall_glLoadTransposeMatrixxOES(void *_func, int32_t *m) {
	((void (*)(int32_t *m))_func)(m);
}
void gllCall_glLockArraysEXT(void *_func, int32_t first, int32_t count) {
	((void (*)(int32_t first, int32_t count))_func)(first, count);
}
void gllCall_glLogicOp(void *_func, uint32_t opcode) {
	((void (*)(uint32_t opcode))_func)(opcode);
}
void gllCall_glMakeBufferNonResidentNV(void *_func, uint32_t target) {
	((void (*)(uint32_t target))_func)(target);
}
void gllCall_glMakeBufferResidentNV(void *_func, uint32_t target, uint32_t access) {
	((void (*)(uint32_t target, uint32_t access))_func)(target, access);
}
void gllCall_glMakeImageHandleNonResidentARB(void *_func, uint64_t handle) {
	((void (*)(uint64_t handle))_func)(handle);
}
void gllCall_glMakeImageHandleNonResidentNV(void *_func, uint64_t handle) {
	((void (*)(uint64_t handle))_func)(handle);
}
void gllCall_glMakeImageHandleResidentARB(void *_func, uint64_t handle, uint32_t access) {
	((void (*)(uint64_t handle, uint32_t access))_func)(handle, access);
}
void gllCall_glMakeImageHandleResidentNV(void *_func, uint64_t handle, uint32_t access) {
	((void (*)(uint64_t handle, uint32_t access))_func)(handle, access);
}
void gllCall_glMakeNamedBufferNonResidentNV(void *_func, uint32_t buffer) {
	((void (*)(uint32_t buffer))_func)(buffer);
}
void gllCall_glMakeNamedBufferResidentNV(void *_func, uint32_t buffer, uint32_t access) {
	((void (*)(uint32_t buffer, uint32_t access))_func)(buffer, access);
}
void gllCall_glMakeTextureHandleNonResidentARB(void *_func, uint64_t handle) {
	((void (*)(uint64_t handle))_func)(handle);
}
void gllCall_glMakeTextureHandleNonResidentNV(void *_func, uint64_t handle) {
	((void (*)(uint64_t handle))_func)(handle);
}
void gllCall_glMakeTextureHandleResidentARB(void *_func, uint64_t handle) {
	((void (*)(uint64_t handle))_func)(handle);
}
void gllCall_glMakeTextureHandleResidentNV(void *_func, uint64_t handle) {
	((void (*)(uint64_t handle))_func)(handle);
}
void gllCall_glMap1d(void *_func, uint32_t target, double u1, double u2, int32_t stride, int32_t order, double *points) {
	((void (*)(uint32_t target, double u1, double u2, int32_t stride, int32_t order, double *points))_func)(target, u1, u2, stride, order, points);
}
void gllCall_glMap1f(void *_func, uint32_t target, float u1, float u2, int32_t stride, int32_t order, float *points) {
	((void (*)(uint32_t target, float u1, float u2, int32_t stride, int32_t order, float *points))_func)(target, u1, u2, stride, order, points);
}
void gllCall_glMap1xOES(void *_func, uint32_t target, int32_t u1, int32_t u2, int32_t stride, int32_t order, int32_t points) {
	((void (*)(uint32_t target, int32_t u1, int32_t u2, int32_t stride, int32_t order, int32_t points))_func)(target, u1, u2, stride, order, points);
}
void gllCall_glMap2d(void *_func, uint32_t target, double u1, double u2, int32_t ustride, int32_t uorder, double v1, double v2, int32_t vstride, int32_t vorder, double *points) {
	((void (*)(uint32_t target, double u1, double u2, int32_t ustride, int32_t uorder, double v1, double v2, int32_t vstride, int32_t vorder, double *points))_func)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
void gllCall_glMap2f(void *_func, uint32_t target, float u1, float u2, int32_t ustride, int32_t uorder, float v1, float v2, int32_t vstride, int32_t vorder, float *points) {
	((void (*)(uint32_t target, float u1, float u2, int32_t ustride, int32_t uorder, float v1, float v2, int32_t vstride, int32_t vorder, float *points))_func)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
void gllCall_glMap2xOES(void *_func, uint32_t target, int32_t u1, int32_t u2, int32_t ustride, int32_t uorder, int32_t v1, int32_t v2, int32_t vstride, int32_t vorder, int32_t points) {
	((void (*)(uint32_t target, int32_t u1, int32_t u2, int32_t ustride, int32_t uorder, int32_t v1, int32_t v2, int32_t vstride, int32_t vorder, int32_t points))_func)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
void *gllCall_glMapBuffer(void *_func, uint32_t target, uint32_t access) {
	return ((void *(*)(uint32_t target, uint32_t access))_func)(target, access);
}
void *gllCall_glMapBufferARB(void *_func, uint32_t target, uint32_t access) {
	return ((void *(*)(uint32_t target, uint32_t access))_func)(target, access);
}
void *gllCall_glMapBufferOES(void *_func, uint32_t target, uint32_t access) {
	return ((void *(*)(uint32_t target, uint32_t access))_func)(target, access);
}
void *gllCall_glMapBufferRange(void *_func, uint32_t target, intptr_t offset, ssize_t length, uint32_t access) {
	return ((void *(*)(uint32_t target, intptr_t offset, ssize_t length, uint32_t access))_func)(target, offset, length, access);
}
void *gllCall_glMapBufferRangeEXT(void *_func, uint32_t target, intptr_t offset, ssize_t length, uint32_t access) {
	return ((void *(*)(uint32_t target, intptr_t offset, ssize_t length, uint32_t access))_func)(target, offset, length, access);
}
void gllCall_glMapControlPointsNV(void *_func, uint32_t target, uint32_t index, uint32_t type, int32_t ustride, int32_t vstride, int32_t uorder, int32_t vorder, _Bool packed, void *points) {
	((void (*)(uint32_t target, uint32_t index, uint32_t type, int32_t ustride, int32_t vstride, int32_t uorder, int32_t vorder, _Bool packed, void *points))_func)(target, index, type, ustride, vstride, uorder, vorder, packed, points);
}
void gllCall_glMapGrid1d(void *_func, int32_t un, double u1, double u2) {
	((void (*)(int32_t un, double u1, double u2))_func)(un, u1, u2);
}
void gllCall_glMapGrid1f(void *_func, int32_t un, float u1, float u2) {
	((void (*)(int32_t un, float u1, float u2))_func)(un, u1, u2);
}
void gllCall_glMapGrid1xOES(void *_func, int32_t n, int32_t u1, int32_t u2) {
	((void (*)(int32_t n, int32_t u1, int32_t u2))_func)(n, u1, u2);
}
void gllCall_glMapGrid2d(void *_func, int32_t un, double u1, double u2, int32_t vn, double v1, double v2) {
	((void (*)(int32_t un, double u1, double u2, int32_t vn, double v1, double v2))_func)(un, u1, u2, vn, v1, v2);
}
void gllCall_glMapGrid2f(void *_func, int32_t un, float u1, float u2, int32_t vn, float v1, float v2) {
	((void (*)(int32_t un, float u1, float u2, int32_t vn, float v1, float v2))_func)(un, u1, u2, vn, v1, v2);
}
void gllCall_glMapGrid2xOES(void *_func, int32_t n, int32_t u1, int32_t u2, int32_t v1, int32_t v2) {
	((void (*)(int32_t n, int32_t u1, int32_t u2, int32_t v1, int32_t v2))_func)(n, u1, u2, v1, v2);
}
void *gllCall_glMapNamedBuffer(void *_func, uint32_t buffer, uint32_t access) {
	return ((void *(*)(uint32_t buffer, uint32_t access))_func)(buffer, access);
}
void *gllCall_glMapNamedBufferEXT(void *_func, uint32_t buffer, uint32_t access) {
	return ((void *(*)(uint32_t buffer, uint32_t access))_func)(buffer, access);
}
void *gllCall_glMapNamedBufferRange(void *_func, uint32_t buffer, intptr_t offset, ssize_t length, uint32_t access) {
	return ((void *(*)(uint32_t buffer, intptr_t offset, ssize_t length, uint32_t access))_func)(buffer, offset, length, access);
}
void *gllCall_glMapNamedBufferRangeEXT(void *_func, uint32_t buffer, intptr_t offset, ssize_t length, uint32_t access) {
	return ((void *(*)(uint32_t buffer, intptr_t offset, ssize_t length, uint32_t access))_func)(buffer, offset, length, access);
}
void *gllCall_glMapObjectBufferATI(void *_func, uint32_t buffer) {
	return ((void *(*)(uint32_t buffer))_func)(buffer);
}
void gllCall_glMapParameterfvNV(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glMapParameterivNV(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void *gllCall_glMapTexture2DINTEL(void *_func, uint32_t texture, int32_t level, uint32_t access, int32_t *stride, uint32_t *layout) {
	return ((void *(*)(uint32_t texture, int32_t level, uint32_t access, int32_t *stride, uint32_t *layout))_func)(texture, level, access, stride, layout);
}
void gllCall_glMapVertexAttrib1dAPPLE(void *_func, uint32_t index, uint32_t size, double u1, double u2, int32_t stride, int32_t order, double *points) {
	((void (*)(uint32_t index, uint32_t size, double u1, double u2, int32_t stride, int32_t order, double *points))_func)(index, size, u1, u2, stride, order, points);
}
void gllCall_glMapVertexAttrib1fAPPLE(void *_func, uint32_t index, uint32_t size, float u1, float u2, int32_t stride, int32_t order, float *points) {
	((void (*)(uint32_t index, uint32_t size, float u1, float u2, int32_t stride, int32_t order, float *points))_func)(index, size, u1, u2, stride, order, points);
}
void gllCall_glMapVertexAttrib2dAPPLE(void *_func, uint32_t index, uint32_t size, double u1, double u2, int32_t ustride, int32_t uorder, double v1, double v2, int32_t vstride, int32_t vorder, double *points) {
	((void (*)(uint32_t index, uint32_t size, double u1, double u2, int32_t ustride, int32_t uorder, double v1, double v2, int32_t vstride, int32_t vorder, double *points))_func)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
void gllCall_glMapVertexAttrib2fAPPLE(void *_func, uint32_t index, uint32_t size, float u1, float u2, int32_t ustride, int32_t uorder, float v1, float v2, int32_t vstride, int32_t vorder, float *points) {
	((void (*)(uint32_t index, uint32_t size, float u1, float u2, int32_t ustride, int32_t uorder, float v1, float v2, int32_t vstride, int32_t vorder, float *points))_func)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
void gllCall_glMaterialf(void *_func, uint32_t face, uint32_t pname, float param) {
	((void (*)(uint32_t face, uint32_t pname, float param))_func)(face, pname, param);
}
void gllCall_glMaterialfv(void *_func, uint32_t face, uint32_t pname, float *params) {
	((void (*)(uint32_t face, uint32_t pname, float *params))_func)(face, pname, params);
}
void gllCall_glMateriali(void *_func, uint32_t face, uint32_t pname, int32_t param) {
	((void (*)(uint32_t face, uint32_t pname, int32_t param))_func)(face, pname, param);
}
void gllCall_glMaterialiv(void *_func, uint32_t face, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t face, uint32_t pname, int32_t *params))_func)(face, pname, params);
}
void gllCall_glMaterialx(void *_func, uint32_t face, uint32_t pname, int32_t param) {
	((void (*)(uint32_t face, uint32_t pname, int32_t param))_func)(face, pname, param);
}
void gllCall_glMaterialxOES(void *_func, uint32_t face, uint32_t pname, int32_t param) {
	((void (*)(uint32_t face, uint32_t pname, int32_t param))_func)(face, pname, param);
}
void gllCall_glMaterialxv(void *_func, uint32_t face, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t face, uint32_t pname, int32_t *param))_func)(face, pname, param);
}
void gllCall_glMaterialxvOES(void *_func, uint32_t face, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t face, uint32_t pname, int32_t *param))_func)(face, pname, param);
}
void gllCall_glMatrixFrustumEXT(void *_func, uint32_t mode, double left, double right, double bottom, double top, double zNear, double zFar) {
	((void (*)(uint32_t mode, double left, double right, double bottom, double top, double zNear, double zFar))_func)(mode, left, right, bottom, top, zNear, zFar);
}
void gllCall_glMatrixIndexPointerARB(void *_func, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(size, type, stride, pointer);
}
void gllCall_glMatrixIndexPointerOES(void *_func, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(size, type, stride, pointer);
}
void gllCall_glMatrixIndexubvARB(void *_func, int32_t size, uint8_t *indices) {
	((void (*)(int32_t size, uint8_t *indices))_func)(size, indices);
}
void gllCall_glMatrixIndexuivARB(void *_func, int32_t size, uint32_t *indices) {
	((void (*)(int32_t size, uint32_t *indices))_func)(size, indices);
}
void gllCall_glMatrixIndexusvARB(void *_func, int32_t size, uint16_t *indices) {
	((void (*)(int32_t size, uint16_t *indices))_func)(size, indices);
}
void gllCall_glMatrixLoad3x2fNV(void *_func, uint32_t matrixMode, float *m) {
	((void (*)(uint32_t matrixMode, float *m))_func)(matrixMode, m);
}
void gllCall_glMatrixLoad3x3fNV(void *_func, uint32_t matrixMode, float *m) {
	((void (*)(uint32_t matrixMode, float *m))_func)(matrixMode, m);
}
void gllCall_glMatrixLoadIdentityEXT(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glMatrixLoadTranspose3x3fNV(void *_func, uint32_t matrixMode, float *m) {
	((void (*)(uint32_t matrixMode, float *m))_func)(matrixMode, m);
}
void gllCall_glMatrixLoadTransposedEXT(void *_func, uint32_t mode, double *m) {
	((void (*)(uint32_t mode, double *m))_func)(mode, m);
}
void gllCall_glMatrixLoadTransposefEXT(void *_func, uint32_t mode, float *m) {
	((void (*)(uint32_t mode, float *m))_func)(mode, m);
}
void gllCall_glMatrixLoaddEXT(void *_func, uint32_t mode, double *m) {
	((void (*)(uint32_t mode, double *m))_func)(mode, m);
}
void gllCall_glMatrixLoadfEXT(void *_func, uint32_t mode, float *m) {
	((void (*)(uint32_t mode, float *m))_func)(mode, m);
}
void gllCall_glMatrixMode(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glMatrixMult3x2fNV(void *_func, uint32_t matrixMode, float *m) {
	((void (*)(uint32_t matrixMode, float *m))_func)(matrixMode, m);
}
void gllCall_glMatrixMult3x3fNV(void *_func, uint32_t matrixMode, float *m) {
	((void (*)(uint32_t matrixMode, float *m))_func)(matrixMode, m);
}
void gllCall_glMatrixMultTranspose3x3fNV(void *_func, uint32_t matrixMode, float *m) {
	((void (*)(uint32_t matrixMode, float *m))_func)(matrixMode, m);
}
void gllCall_glMatrixMultTransposedEXT(void *_func, uint32_t mode, double *m) {
	((void (*)(uint32_t mode, double *m))_func)(mode, m);
}
void gllCall_glMatrixMultTransposefEXT(void *_func, uint32_t mode, float *m) {
	((void (*)(uint32_t mode, float *m))_func)(mode, m);
}
void gllCall_glMatrixMultdEXT(void *_func, uint32_t mode, double *m) {
	((void (*)(uint32_t mode, double *m))_func)(mode, m);
}
void gllCall_glMatrixMultfEXT(void *_func, uint32_t mode, float *m) {
	((void (*)(uint32_t mode, float *m))_func)(mode, m);
}
void gllCall_glMatrixOrthoEXT(void *_func, uint32_t mode, double left, double right, double bottom, double top, double zNear, double zFar) {
	((void (*)(uint32_t mode, double left, double right, double bottom, double top, double zNear, double zFar))_func)(mode, left, right, bottom, top, zNear, zFar);
}
void gllCall_glMatrixPopEXT(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glMatrixPushEXT(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glMatrixRotatedEXT(void *_func, uint32_t mode, double angle, double x, double y, double z) {
	((void (*)(uint32_t mode, double angle, double x, double y, double z))_func)(mode, angle, x, y, z);
}
void gllCall_glMatrixRotatefEXT(void *_func, uint32_t mode, float angle, float x, float y, float z) {
	((void (*)(uint32_t mode, float angle, float x, float y, float z))_func)(mode, angle, x, y, z);
}
void gllCall_glMatrixScaledEXT(void *_func, uint32_t mode, double x, double y, double z) {
	((void (*)(uint32_t mode, double x, double y, double z))_func)(mode, x, y, z);
}
void gllCall_glMatrixScalefEXT(void *_func, uint32_t mode, float x, float y, float z) {
	((void (*)(uint32_t mode, float x, float y, float z))_func)(mode, x, y, z);
}
void gllCall_glMatrixTranslatedEXT(void *_func, uint32_t mode, double x, double y, double z) {
	((void (*)(uint32_t mode, double x, double y, double z))_func)(mode, x, y, z);
}
void gllCall_glMatrixTranslatefEXT(void *_func, uint32_t mode, float x, float y, float z) {
	((void (*)(uint32_t mode, float x, float y, float z))_func)(mode, x, y, z);
}
void gllCall_glMaxShaderCompilerThreadsKHR(void *_func, uint32_t count) {
	((void (*)(uint32_t count))_func)(count);
}
void gllCall_glMaxShaderCompilerThreadsARB(void *_func, uint32_t count) {
	((void (*)(uint32_t count))_func)(count);
}
void gllCall_glMemoryBarrier(void *_func, uint32_t barriers) {
	((void (*)(uint32_t barriers))_func)(barriers);
}
void gllCall_glMemoryBarrierByRegion(void *_func, uint32_t barriers) {
	((void (*)(uint32_t barriers))_func)(barriers);
}
void gllCall_glMemoryBarrierEXT(void *_func, uint32_t barriers) {
	((void (*)(uint32_t barriers))_func)(barriers);
}
void gllCall_glMemoryObjectParameterivEXT(void *_func, uint32_t memoryObject, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t memoryObject, uint32_t pname, int32_t *params))_func)(memoryObject, pname, params);
}
void gllCall_glMinSampleShading(void *_func, float value) {
	((void (*)(float value))_func)(value);
}
void gllCall_glMinSampleShadingARB(void *_func, float value) {
	((void (*)(float value))_func)(value);
}
void gllCall_glMinSampleShadingOES(void *_func, float value) {
	((void (*)(float value))_func)(value);
}
void gllCall_glMinmax(void *_func, uint32_t target, uint32_t internalformat, _Bool sink) {
	((void (*)(uint32_t target, uint32_t internalformat, _Bool sink))_func)(target, internalformat, sink);
}
void gllCall_glMinmaxEXT(void *_func, uint32_t target, uint32_t internalformat, _Bool sink) {
	((void (*)(uint32_t target, uint32_t internalformat, _Bool sink))_func)(target, internalformat, sink);
}
void gllCall_glMultMatrixd(void *_func, double *m) {
	((void (*)(double *m))_func)(m);
}
void gllCall_glMultMatrixf(void *_func, float *m) {
	((void (*)(float *m))_func)(m);
}
void gllCall_glMultMatrixx(void *_func, int32_t *m) {
	((void (*)(int32_t *m))_func)(m);
}
void gllCall_glMultMatrixxOES(void *_func, int32_t *m) {
	((void (*)(int32_t *m))_func)(m);
}
void gllCall_glMultTransposeMatrixd(void *_func, double *m) {
	((void (*)(double *m))_func)(m);
}
void gllCall_glMultTransposeMatrixdARB(void *_func, double *m) {
	((void (*)(double *m))_func)(m);
}
void gllCall_glMultTransposeMatrixf(void *_func, float *m) {
	((void (*)(float *m))_func)(m);
}
void gllCall_glMultTransposeMatrixfARB(void *_func, float *m) {
	((void (*)(float *m))_func)(m);
}
void gllCall_glMultTransposeMatrixxOES(void *_func, int32_t *m) {
	((void (*)(int32_t *m))_func)(m);
}
void gllCall_glMultiDrawArrays(void *_func, uint32_t mode, int32_t *first, int32_t *count, int32_t drawcount) {
	((void (*)(uint32_t mode, int32_t *first, int32_t *count, int32_t drawcount))_func)(mode, first, count, drawcount);
}
void gllCall_glMultiDrawArraysEXT(void *_func, uint32_t mode, int32_t *first, int32_t *count, int32_t primcount) {
	((void (*)(uint32_t mode, int32_t *first, int32_t *count, int32_t primcount))_func)(mode, first, count, primcount);
}
void gllCall_glMultiDrawArraysIndirect(void *_func, uint32_t mode, void *indirect, int32_t drawcount, int32_t stride) {
	((void (*)(uint32_t mode, void *indirect, int32_t drawcount, int32_t stride))_func)(mode, indirect, drawcount, stride);
}
void gllCall_glMultiDrawArraysIndirectAMD(void *_func, uint32_t mode, void *indirect, int32_t primcount, int32_t stride) {
	((void (*)(uint32_t mode, void *indirect, int32_t primcount, int32_t stride))_func)(mode, indirect, primcount, stride);
}
void gllCall_glMultiDrawArraysIndirectBindlessCountNV(void *_func, uint32_t mode, void *indirect, int32_t drawCount, int32_t maxDrawCount, int32_t stride, int32_t vertexBufferCount) {
	((void (*)(uint32_t mode, void *indirect, int32_t drawCount, int32_t maxDrawCount, int32_t stride, int32_t vertexBufferCount))_func)(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
}
void gllCall_glMultiDrawArraysIndirectBindlessNV(void *_func, uint32_t mode, void *indirect, int32_t drawCount, int32_t stride, int32_t vertexBufferCount) {
	((void (*)(uint32_t mode, void *indirect, int32_t drawCount, int32_t stride, int32_t vertexBufferCount))_func)(mode, indirect, drawCount, stride, vertexBufferCount);
}
void gllCall_glMultiDrawArraysIndirectCount(void *_func, uint32_t mode, void *indirect, intptr_t drawcount, int32_t maxdrawcount, int32_t stride) {
	((void (*)(uint32_t mode, void *indirect, intptr_t drawcount, int32_t maxdrawcount, int32_t stride))_func)(mode, indirect, drawcount, maxdrawcount, stride);
}
void gllCall_glMultiDrawArraysIndirectCountARB(void *_func, uint32_t mode, void *indirect, intptr_t drawcount, int32_t maxdrawcount, int32_t stride) {
	((void (*)(uint32_t mode, void *indirect, intptr_t drawcount, int32_t maxdrawcount, int32_t stride))_func)(mode, indirect, drawcount, maxdrawcount, stride);
}
void gllCall_glMultiDrawArraysIndirectEXT(void *_func, uint32_t mode, void *indirect, int32_t drawcount, int32_t stride) {
	((void (*)(uint32_t mode, void *indirect, int32_t drawcount, int32_t stride))_func)(mode, indirect, drawcount, stride);
}
void gllCall_glMultiDrawElementArrayAPPLE(void *_func, uint32_t mode, int32_t *first, int32_t *count, int32_t primcount) {
	((void (*)(uint32_t mode, int32_t *first, int32_t *count, int32_t primcount))_func)(mode, first, count, primcount);
}
void gllCall_glMultiDrawElements(void *_func, uint32_t mode, int32_t *count, uint32_t type, void **indices, int32_t drawcount) {
	((void (*)(uint32_t mode, int32_t *count, uint32_t type, void **indices, int32_t drawcount))_func)(mode, count, type, indices, drawcount);
}
void gllCall_glMultiDrawElementsBaseVertex(void *_func, uint32_t mode, int32_t *count, uint32_t type, void **indices, int32_t drawcount, int32_t *basevertex) {
	((void (*)(uint32_t mode, int32_t *count, uint32_t type, void **indices, int32_t drawcount, int32_t *basevertex))_func)(mode, count, type, indices, drawcount, basevertex);
}
void gllCall_glMultiDrawElementsBaseVertexEXT(void *_func, uint32_t mode, int32_t *count, uint32_t type, void **indices, int32_t drawcount, int32_t *basevertex) {
	((void (*)(uint32_t mode, int32_t *count, uint32_t type, void **indices, int32_t drawcount, int32_t *basevertex))_func)(mode, count, type, indices, drawcount, basevertex);
}
void gllCall_glMultiDrawElementsEXT(void *_func, uint32_t mode, int32_t *count, uint32_t type, void **indices, int32_t primcount) {
	((void (*)(uint32_t mode, int32_t *count, uint32_t type, void **indices, int32_t primcount))_func)(mode, count, type, indices, primcount);
}
void gllCall_glMultiDrawElementsIndirect(void *_func, uint32_t mode, uint32_t type, void *indirect, int32_t drawcount, int32_t stride) {
	((void (*)(uint32_t mode, uint32_t type, void *indirect, int32_t drawcount, int32_t stride))_func)(mode, type, indirect, drawcount, stride);
}
void gllCall_glMultiDrawElementsIndirectAMD(void *_func, uint32_t mode, uint32_t type, void *indirect, int32_t primcount, int32_t stride) {
	((void (*)(uint32_t mode, uint32_t type, void *indirect, int32_t primcount, int32_t stride))_func)(mode, type, indirect, primcount, stride);
}
void gllCall_glMultiDrawElementsIndirectBindlessCountNV(void *_func, uint32_t mode, uint32_t type, void *indirect, int32_t drawCount, int32_t maxDrawCount, int32_t stride, int32_t vertexBufferCount) {
	((void (*)(uint32_t mode, uint32_t type, void *indirect, int32_t drawCount, int32_t maxDrawCount, int32_t stride, int32_t vertexBufferCount))_func)(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
}
void gllCall_glMultiDrawElementsIndirectBindlessNV(void *_func, uint32_t mode, uint32_t type, void *indirect, int32_t drawCount, int32_t stride, int32_t vertexBufferCount) {
	((void (*)(uint32_t mode, uint32_t type, void *indirect, int32_t drawCount, int32_t stride, int32_t vertexBufferCount))_func)(mode, type, indirect, drawCount, stride, vertexBufferCount);
}
void gllCall_glMultiDrawElementsIndirectCount(void *_func, uint32_t mode, uint32_t type, void *indirect, intptr_t drawcount, int32_t maxdrawcount, int32_t stride) {
	((void (*)(uint32_t mode, uint32_t type, void *indirect, intptr_t drawcount, int32_t maxdrawcount, int32_t stride))_func)(mode, type, indirect, drawcount, maxdrawcount, stride);
}
void gllCall_glMultiDrawElementsIndirectCountARB(void *_func, uint32_t mode, uint32_t type, void *indirect, intptr_t drawcount, int32_t maxdrawcount, int32_t stride) {
	((void (*)(uint32_t mode, uint32_t type, void *indirect, intptr_t drawcount, int32_t maxdrawcount, int32_t stride))_func)(mode, type, indirect, drawcount, maxdrawcount, stride);
}
void gllCall_glMultiDrawElementsIndirectEXT(void *_func, uint32_t mode, uint32_t type, void *indirect, int32_t drawcount, int32_t stride) {
	((void (*)(uint32_t mode, uint32_t type, void *indirect, int32_t drawcount, int32_t stride))_func)(mode, type, indirect, drawcount, stride);
}
void gllCall_glMultiDrawMeshTasksIndirectNV(void *_func, intptr_t indirect, int32_t drawcount, int32_t stride) {
	((void (*)(intptr_t indirect, int32_t drawcount, int32_t stride))_func)(indirect, drawcount, stride);
}
void gllCall_glMultiDrawMeshTasksIndirectCountNV(void *_func, intptr_t indirect, intptr_t drawcount, int32_t maxdrawcount, int32_t stride) {
	((void (*)(intptr_t indirect, intptr_t drawcount, int32_t maxdrawcount, int32_t stride))_func)(indirect, drawcount, maxdrawcount, stride);
}
void gllCall_glMultiDrawRangeElementArrayAPPLE(void *_func, uint32_t mode, uint32_t start, uint32_t end, int32_t *first, int32_t *count, int32_t primcount) {
	((void (*)(uint32_t mode, uint32_t start, uint32_t end, int32_t *first, int32_t *count, int32_t primcount))_func)(mode, start, end, first, count, primcount);
}
void gllCall_glMultiModeDrawArraysIBM(void *_func, uint32_t *mode, int32_t *first, int32_t *count, int32_t primcount, int32_t modestride) {
	((void (*)(uint32_t *mode, int32_t *first, int32_t *count, int32_t primcount, int32_t modestride))_func)(mode, first, count, primcount, modestride);
}
void gllCall_glMultiModeDrawElementsIBM(void *_func, uint32_t *mode, int32_t *count, uint32_t type, void **indices, int32_t primcount, int32_t modestride) {
	((void (*)(uint32_t *mode, int32_t *count, uint32_t type, void **indices, int32_t primcount, int32_t modestride))_func)(mode, count, type, indices, primcount, modestride);
}
void gllCall_glMultiTexBufferEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t internalformat, uint32_t buffer) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t internalformat, uint32_t buffer))_func)(texunit, target, internalformat, buffer);
}
void gllCall_glMultiTexCoord1bOES(void *_func, uint32_t texture, int8_t s) {
	((void (*)(uint32_t texture, int8_t s))_func)(texture, s);
}
void gllCall_glMultiTexCoord1bvOES(void *_func, uint32_t texture, int8_t *coords) {
	((void (*)(uint32_t texture, int8_t *coords))_func)(texture, coords);
}
void gllCall_glMultiTexCoord1d(void *_func, uint32_t target, double s) {
	((void (*)(uint32_t target, double s))_func)(target, s);
}
void gllCall_glMultiTexCoord1dARB(void *_func, uint32_t target, double s) {
	((void (*)(uint32_t target, double s))_func)(target, s);
}
void gllCall_glMultiTexCoord1dv(void *_func, uint32_t target, double *v) {
	((void (*)(uint32_t target, double *v))_func)(target, v);
}
void gllCall_glMultiTexCoord1dvARB(void *_func, uint32_t target, double *v) {
	((void (*)(uint32_t target, double *v))_func)(target, v);
}
void gllCall_glMultiTexCoord1f(void *_func, uint32_t target, float s) {
	((void (*)(uint32_t target, float s))_func)(target, s);
}
void gllCall_glMultiTexCoord1fARB(void *_func, uint32_t target, float s) {
	((void (*)(uint32_t target, float s))_func)(target, s);
}
void gllCall_glMultiTexCoord1fv(void *_func, uint32_t target, float *v) {
	((void (*)(uint32_t target, float *v))_func)(target, v);
}
void gllCall_glMultiTexCoord1fvARB(void *_func, uint32_t target, float *v) {
	((void (*)(uint32_t target, float *v))_func)(target, v);
}
void gllCall_glMultiTexCoord1hNV(void *_func, uint32_t target, uint16_t s) {
	((void (*)(uint32_t target, uint16_t s))_func)(target, s);
}
void gllCall_glMultiTexCoord1hvNV(void *_func, uint32_t target, uint16_t *v) {
	((void (*)(uint32_t target, uint16_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord1i(void *_func, uint32_t target, int32_t s) {
	((void (*)(uint32_t target, int32_t s))_func)(target, s);
}
void gllCall_glMultiTexCoord1iARB(void *_func, uint32_t target, int32_t s) {
	((void (*)(uint32_t target, int32_t s))_func)(target, s);
}
void gllCall_glMultiTexCoord1iv(void *_func, uint32_t target, int32_t *v) {
	((void (*)(uint32_t target, int32_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord1ivARB(void *_func, uint32_t target, int32_t *v) {
	((void (*)(uint32_t target, int32_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord1s(void *_func, uint32_t target, int16_t s) {
	((void (*)(uint32_t target, int16_t s))_func)(target, s);
}
void gllCall_glMultiTexCoord1sARB(void *_func, uint32_t target, int16_t s) {
	((void (*)(uint32_t target, int16_t s))_func)(target, s);
}
void gllCall_glMultiTexCoord1sv(void *_func, uint32_t target, int16_t *v) {
	((void (*)(uint32_t target, int16_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord1svARB(void *_func, uint32_t target, int16_t *v) {
	((void (*)(uint32_t target, int16_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord1xOES(void *_func, uint32_t texture, int32_t s) {
	((void (*)(uint32_t texture, int32_t s))_func)(texture, s);
}
void gllCall_glMultiTexCoord1xvOES(void *_func, uint32_t texture, int32_t *coords) {
	((void (*)(uint32_t texture, int32_t *coords))_func)(texture, coords);
}
void gllCall_glMultiTexCoord2bOES(void *_func, uint32_t texture, int8_t s, int8_t t) {
	((void (*)(uint32_t texture, int8_t s, int8_t t))_func)(texture, s, t);
}
void gllCall_glMultiTexCoord2bvOES(void *_func, uint32_t texture, int8_t *coords) {
	((void (*)(uint32_t texture, int8_t *coords))_func)(texture, coords);
}
void gllCall_glMultiTexCoord2d(void *_func, uint32_t target, double s, double t) {
	((void (*)(uint32_t target, double s, double t))_func)(target, s, t);
}
void gllCall_glMultiTexCoord2dARB(void *_func, uint32_t target, double s, double t) {
	((void (*)(uint32_t target, double s, double t))_func)(target, s, t);
}
void gllCall_glMultiTexCoord2dv(void *_func, uint32_t target, double *v) {
	((void (*)(uint32_t target, double *v))_func)(target, v);
}
void gllCall_glMultiTexCoord2dvARB(void *_func, uint32_t target, double *v) {
	((void (*)(uint32_t target, double *v))_func)(target, v);
}
void gllCall_glMultiTexCoord2f(void *_func, uint32_t target, float s, float t) {
	((void (*)(uint32_t target, float s, float t))_func)(target, s, t);
}
void gllCall_glMultiTexCoord2fARB(void *_func, uint32_t target, float s, float t) {
	((void (*)(uint32_t target, float s, float t))_func)(target, s, t);
}
void gllCall_glMultiTexCoord2fv(void *_func, uint32_t target, float *v) {
	((void (*)(uint32_t target, float *v))_func)(target, v);
}
void gllCall_glMultiTexCoord2fvARB(void *_func, uint32_t target, float *v) {
	((void (*)(uint32_t target, float *v))_func)(target, v);
}
void gllCall_glMultiTexCoord2hNV(void *_func, uint32_t target, uint16_t s, uint16_t t) {
	((void (*)(uint32_t target, uint16_t s, uint16_t t))_func)(target, s, t);
}
void gllCall_glMultiTexCoord2hvNV(void *_func, uint32_t target, uint16_t *v) {
	((void (*)(uint32_t target, uint16_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord2i(void *_func, uint32_t target, int32_t s, int32_t t) {
	((void (*)(uint32_t target, int32_t s, int32_t t))_func)(target, s, t);
}
void gllCall_glMultiTexCoord2iARB(void *_func, uint32_t target, int32_t s, int32_t t) {
	((void (*)(uint32_t target, int32_t s, int32_t t))_func)(target, s, t);
}
void gllCall_glMultiTexCoord2iv(void *_func, uint32_t target, int32_t *v) {
	((void (*)(uint32_t target, int32_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord2ivARB(void *_func, uint32_t target, int32_t *v) {
	((void (*)(uint32_t target, int32_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord2s(void *_func, uint32_t target, int16_t s, int16_t t) {
	((void (*)(uint32_t target, int16_t s, int16_t t))_func)(target, s, t);
}
void gllCall_glMultiTexCoord2sARB(void *_func, uint32_t target, int16_t s, int16_t t) {
	((void (*)(uint32_t target, int16_t s, int16_t t))_func)(target, s, t);
}
void gllCall_glMultiTexCoord2sv(void *_func, uint32_t target, int16_t *v) {
	((void (*)(uint32_t target, int16_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord2svARB(void *_func, uint32_t target, int16_t *v) {
	((void (*)(uint32_t target, int16_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord2xOES(void *_func, uint32_t texture, int32_t s, int32_t t) {
	((void (*)(uint32_t texture, int32_t s, int32_t t))_func)(texture, s, t);
}
void gllCall_glMultiTexCoord2xvOES(void *_func, uint32_t texture, int32_t *coords) {
	((void (*)(uint32_t texture, int32_t *coords))_func)(texture, coords);
}
void gllCall_glMultiTexCoord3bOES(void *_func, uint32_t texture, int8_t s, int8_t t, int8_t r) {
	((void (*)(uint32_t texture, int8_t s, int8_t t, int8_t r))_func)(texture, s, t, r);
}
void gllCall_glMultiTexCoord3bvOES(void *_func, uint32_t texture, int8_t *coords) {
	((void (*)(uint32_t texture, int8_t *coords))_func)(texture, coords);
}
void gllCall_glMultiTexCoord3d(void *_func, uint32_t target, double s, double t, double r) {
	((void (*)(uint32_t target, double s, double t, double r))_func)(target, s, t, r);
}
void gllCall_glMultiTexCoord3dARB(void *_func, uint32_t target, double s, double t, double r) {
	((void (*)(uint32_t target, double s, double t, double r))_func)(target, s, t, r);
}
void gllCall_glMultiTexCoord3dv(void *_func, uint32_t target, double *v) {
	((void (*)(uint32_t target, double *v))_func)(target, v);
}
void gllCall_glMultiTexCoord3dvARB(void *_func, uint32_t target, double *v) {
	((void (*)(uint32_t target, double *v))_func)(target, v);
}
void gllCall_glMultiTexCoord3f(void *_func, uint32_t target, float s, float t, float r) {
	((void (*)(uint32_t target, float s, float t, float r))_func)(target, s, t, r);
}
void gllCall_glMultiTexCoord3fARB(void *_func, uint32_t target, float s, float t, float r) {
	((void (*)(uint32_t target, float s, float t, float r))_func)(target, s, t, r);
}
void gllCall_glMultiTexCoord3fv(void *_func, uint32_t target, float *v) {
	((void (*)(uint32_t target, float *v))_func)(target, v);
}
void gllCall_glMultiTexCoord3fvARB(void *_func, uint32_t target, float *v) {
	((void (*)(uint32_t target, float *v))_func)(target, v);
}
void gllCall_glMultiTexCoord3hNV(void *_func, uint32_t target, uint16_t s, uint16_t t, uint16_t r) {
	((void (*)(uint32_t target, uint16_t s, uint16_t t, uint16_t r))_func)(target, s, t, r);
}
void gllCall_glMultiTexCoord3hvNV(void *_func, uint32_t target, uint16_t *v) {
	((void (*)(uint32_t target, uint16_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord3i(void *_func, uint32_t target, int32_t s, int32_t t, int32_t r) {
	((void (*)(uint32_t target, int32_t s, int32_t t, int32_t r))_func)(target, s, t, r);
}
void gllCall_glMultiTexCoord3iARB(void *_func, uint32_t target, int32_t s, int32_t t, int32_t r) {
	((void (*)(uint32_t target, int32_t s, int32_t t, int32_t r))_func)(target, s, t, r);
}
void gllCall_glMultiTexCoord3iv(void *_func, uint32_t target, int32_t *v) {
	((void (*)(uint32_t target, int32_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord3ivARB(void *_func, uint32_t target, int32_t *v) {
	((void (*)(uint32_t target, int32_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord3s(void *_func, uint32_t target, int16_t s, int16_t t, int16_t r) {
	((void (*)(uint32_t target, int16_t s, int16_t t, int16_t r))_func)(target, s, t, r);
}
void gllCall_glMultiTexCoord3sARB(void *_func, uint32_t target, int16_t s, int16_t t, int16_t r) {
	((void (*)(uint32_t target, int16_t s, int16_t t, int16_t r))_func)(target, s, t, r);
}
void gllCall_glMultiTexCoord3sv(void *_func, uint32_t target, int16_t *v) {
	((void (*)(uint32_t target, int16_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord3svARB(void *_func, uint32_t target, int16_t *v) {
	((void (*)(uint32_t target, int16_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord3xOES(void *_func, uint32_t texture, int32_t s, int32_t t, int32_t r) {
	((void (*)(uint32_t texture, int32_t s, int32_t t, int32_t r))_func)(texture, s, t, r);
}
void gllCall_glMultiTexCoord3xvOES(void *_func, uint32_t texture, int32_t *coords) {
	((void (*)(uint32_t texture, int32_t *coords))_func)(texture, coords);
}
void gllCall_glMultiTexCoord4bOES(void *_func, uint32_t texture, int8_t s, int8_t t, int8_t r, int8_t q) {
	((void (*)(uint32_t texture, int8_t s, int8_t t, int8_t r, int8_t q))_func)(texture, s, t, r, q);
}
void gllCall_glMultiTexCoord4bvOES(void *_func, uint32_t texture, int8_t *coords) {
	((void (*)(uint32_t texture, int8_t *coords))_func)(texture, coords);
}
void gllCall_glMultiTexCoord4d(void *_func, uint32_t target, double s, double t, double r, double q) {
	((void (*)(uint32_t target, double s, double t, double r, double q))_func)(target, s, t, r, q);
}
void gllCall_glMultiTexCoord4dARB(void *_func, uint32_t target, double s, double t, double r, double q) {
	((void (*)(uint32_t target, double s, double t, double r, double q))_func)(target, s, t, r, q);
}
void gllCall_glMultiTexCoord4dv(void *_func, uint32_t target, double *v) {
	((void (*)(uint32_t target, double *v))_func)(target, v);
}
void gllCall_glMultiTexCoord4dvARB(void *_func, uint32_t target, double *v) {
	((void (*)(uint32_t target, double *v))_func)(target, v);
}
void gllCall_glMultiTexCoord4f(void *_func, uint32_t target, float s, float t, float r, float q) {
	((void (*)(uint32_t target, float s, float t, float r, float q))_func)(target, s, t, r, q);
}
void gllCall_glMultiTexCoord4fARB(void *_func, uint32_t target, float s, float t, float r, float q) {
	((void (*)(uint32_t target, float s, float t, float r, float q))_func)(target, s, t, r, q);
}
void gllCall_glMultiTexCoord4fv(void *_func, uint32_t target, float *v) {
	((void (*)(uint32_t target, float *v))_func)(target, v);
}
void gllCall_glMultiTexCoord4fvARB(void *_func, uint32_t target, float *v) {
	((void (*)(uint32_t target, float *v))_func)(target, v);
}
void gllCall_glMultiTexCoord4hNV(void *_func, uint32_t target, uint16_t s, uint16_t t, uint16_t r, uint16_t q) {
	((void (*)(uint32_t target, uint16_t s, uint16_t t, uint16_t r, uint16_t q))_func)(target, s, t, r, q);
}
void gllCall_glMultiTexCoord4hvNV(void *_func, uint32_t target, uint16_t *v) {
	((void (*)(uint32_t target, uint16_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord4i(void *_func, uint32_t target, int32_t s, int32_t t, int32_t r, int32_t q) {
	((void (*)(uint32_t target, int32_t s, int32_t t, int32_t r, int32_t q))_func)(target, s, t, r, q);
}
void gllCall_glMultiTexCoord4iARB(void *_func, uint32_t target, int32_t s, int32_t t, int32_t r, int32_t q) {
	((void (*)(uint32_t target, int32_t s, int32_t t, int32_t r, int32_t q))_func)(target, s, t, r, q);
}
void gllCall_glMultiTexCoord4iv(void *_func, uint32_t target, int32_t *v) {
	((void (*)(uint32_t target, int32_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord4ivARB(void *_func, uint32_t target, int32_t *v) {
	((void (*)(uint32_t target, int32_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord4s(void *_func, uint32_t target, int16_t s, int16_t t, int16_t r, int16_t q) {
	((void (*)(uint32_t target, int16_t s, int16_t t, int16_t r, int16_t q))_func)(target, s, t, r, q);
}
void gllCall_glMultiTexCoord4sARB(void *_func, uint32_t target, int16_t s, int16_t t, int16_t r, int16_t q) {
	((void (*)(uint32_t target, int16_t s, int16_t t, int16_t r, int16_t q))_func)(target, s, t, r, q);
}
void gllCall_glMultiTexCoord4sv(void *_func, uint32_t target, int16_t *v) {
	((void (*)(uint32_t target, int16_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord4svARB(void *_func, uint32_t target, int16_t *v) {
	((void (*)(uint32_t target, int16_t *v))_func)(target, v);
}
void gllCall_glMultiTexCoord4x(void *_func, uint32_t texture, int32_t s, int32_t t, int32_t r, int32_t q) {
	((void (*)(uint32_t texture, int32_t s, int32_t t, int32_t r, int32_t q))_func)(texture, s, t, r, q);
}
void gllCall_glMultiTexCoord4xOES(void *_func, uint32_t texture, int32_t s, int32_t t, int32_t r, int32_t q) {
	((void (*)(uint32_t texture, int32_t s, int32_t t, int32_t r, int32_t q))_func)(texture, s, t, r, q);
}
void gllCall_glMultiTexCoord4xvOES(void *_func, uint32_t texture, int32_t *coords) {
	((void (*)(uint32_t texture, int32_t *coords))_func)(texture, coords);
}
void gllCall_glMultiTexCoordP1ui(void *_func, uint32_t texture, uint32_t type, uint32_t coords) {
	((void (*)(uint32_t texture, uint32_t type, uint32_t coords))_func)(texture, type, coords);
}
void gllCall_glMultiTexCoordP1uiv(void *_func, uint32_t texture, uint32_t type, uint32_t *coords) {
	((void (*)(uint32_t texture, uint32_t type, uint32_t *coords))_func)(texture, type, coords);
}
void gllCall_glMultiTexCoordP2ui(void *_func, uint32_t texture, uint32_t type, uint32_t coords) {
	((void (*)(uint32_t texture, uint32_t type, uint32_t coords))_func)(texture, type, coords);
}
void gllCall_glMultiTexCoordP2uiv(void *_func, uint32_t texture, uint32_t type, uint32_t *coords) {
	((void (*)(uint32_t texture, uint32_t type, uint32_t *coords))_func)(texture, type, coords);
}
void gllCall_glMultiTexCoordP3ui(void *_func, uint32_t texture, uint32_t type, uint32_t coords) {
	((void (*)(uint32_t texture, uint32_t type, uint32_t coords))_func)(texture, type, coords);
}
void gllCall_glMultiTexCoordP3uiv(void *_func, uint32_t texture, uint32_t type, uint32_t *coords) {
	((void (*)(uint32_t texture, uint32_t type, uint32_t *coords))_func)(texture, type, coords);
}
void gllCall_glMultiTexCoordP4ui(void *_func, uint32_t texture, uint32_t type, uint32_t coords) {
	((void (*)(uint32_t texture, uint32_t type, uint32_t coords))_func)(texture, type, coords);
}
void gllCall_glMultiTexCoordP4uiv(void *_func, uint32_t texture, uint32_t type, uint32_t *coords) {
	((void (*)(uint32_t texture, uint32_t type, uint32_t *coords))_func)(texture, type, coords);
}
void gllCall_glMultiTexCoordPointerEXT(void *_func, uint32_t texunit, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(uint32_t texunit, int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(texunit, size, type, stride, pointer);
}
void gllCall_glMultiTexEnvfEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, float param) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, float param))_func)(texunit, target, pname, param);
}
void gllCall_glMultiTexEnvfvEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, float *params))_func)(texunit, target, pname, params);
}
void gllCall_glMultiTexEnviEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, int32_t param))_func)(texunit, target, pname, param);
}
void gllCall_glMultiTexEnvivEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, int32_t *params))_func)(texunit, target, pname, params);
}
void gllCall_glMultiTexGendEXT(void *_func, uint32_t texunit, uint32_t coord, uint32_t pname, double param) {
	((void (*)(uint32_t texunit, uint32_t coord, uint32_t pname, double param))_func)(texunit, coord, pname, param);
}
void gllCall_glMultiTexGendvEXT(void *_func, uint32_t texunit, uint32_t coord, uint32_t pname, double *params) {
	((void (*)(uint32_t texunit, uint32_t coord, uint32_t pname, double *params))_func)(texunit, coord, pname, params);
}
void gllCall_glMultiTexGenfEXT(void *_func, uint32_t texunit, uint32_t coord, uint32_t pname, float param) {
	((void (*)(uint32_t texunit, uint32_t coord, uint32_t pname, float param))_func)(texunit, coord, pname, param);
}
void gllCall_glMultiTexGenfvEXT(void *_func, uint32_t texunit, uint32_t coord, uint32_t pname, float *params) {
	((void (*)(uint32_t texunit, uint32_t coord, uint32_t pname, float *params))_func)(texunit, coord, pname, params);
}
void gllCall_glMultiTexGeniEXT(void *_func, uint32_t texunit, uint32_t coord, uint32_t pname, int32_t param) {
	((void (*)(uint32_t texunit, uint32_t coord, uint32_t pname, int32_t param))_func)(texunit, coord, pname, param);
}
void gllCall_glMultiTexGenivEXT(void *_func, uint32_t texunit, uint32_t coord, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texunit, uint32_t coord, uint32_t pname, int32_t *params))_func)(texunit, coord, pname, params);
}
void gllCall_glMultiTexImage1DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t border, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t border, uint32_t format, uint32_t type, void *pixels))_func)(texunit, target, level, internalformat, width, border, format, type, pixels);
}
void gllCall_glMultiTexImage2DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t border, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t border, uint32_t format, uint32_t type, void *pixels))_func)(texunit, target, level, internalformat, width, height, border, format, type, pixels);
}
void gllCall_glMultiTexImage3DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, uint32_t format, uint32_t type, void *pixels))_func)(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
}
void gllCall_glMultiTexParameterIivEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, int32_t *params))_func)(texunit, target, pname, params);
}
void gllCall_glMultiTexParameterIuivEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, uint32_t *params))_func)(texunit, target, pname, params);
}
void gllCall_glMultiTexParameterfEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, float param) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, float param))_func)(texunit, target, pname, param);
}
void gllCall_glMultiTexParameterfvEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, float *params))_func)(texunit, target, pname, params);
}
void gllCall_glMultiTexParameteriEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, int32_t param))_func)(texunit, target, pname, param);
}
void gllCall_glMultiTexParameterivEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t pname, int32_t *params))_func)(texunit, target, pname, params);
}
void gllCall_glMultiTexRenderbufferEXT(void *_func, uint32_t texunit, uint32_t target, uint32_t renderbuffer) {
	((void (*)(uint32_t texunit, uint32_t target, uint32_t renderbuffer))_func)(texunit, target, renderbuffer);
}
void gllCall_glMultiTexSubImage1DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, uint32_t type, void *pixels))_func)(texunit, target, level, xoffset, width, format, type, pixels);
}
void gllCall_glMultiTexSubImage2DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, uint32_t type, void *pixels))_func)(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
}
void gllCall_glMultiTexSubImage3DEXT(void *_func, uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texunit, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *pixels))_func)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
void gllCall_glMulticastBarrierNV(void *_func) {
	((void (*)())_func)();
}
void gllCall_glMulticastBlitFramebufferNV(void *_func, uint32_t srcGpu, uint32_t dstGpu, int32_t srcX0, int32_t srcY0, int32_t srcX1, int32_t srcY1, int32_t dstX0, int32_t dstY0, int32_t dstX1, int32_t dstY1, uint32_t mask, uint32_t filter) {
	((void (*)(uint32_t srcGpu, uint32_t dstGpu, int32_t srcX0, int32_t srcY0, int32_t srcX1, int32_t srcY1, int32_t dstX0, int32_t dstY0, int32_t dstX1, int32_t dstY1, uint32_t mask, uint32_t filter))_func)(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
void gllCall_glMulticastBufferSubDataNV(void *_func, uint32_t gpuMask, uint32_t buffer, intptr_t offset, ssize_t size, void *data) {
	((void (*)(uint32_t gpuMask, uint32_t buffer, intptr_t offset, ssize_t size, void *data))_func)(gpuMask, buffer, offset, size, data);
}
void gllCall_glMulticastCopyBufferSubDataNV(void *_func, uint32_t readGpu, uint32_t writeGpuMask, uint32_t readBuffer, uint32_t writeBuffer, intptr_t readOffset, intptr_t writeOffset, ssize_t size) {
	((void (*)(uint32_t readGpu, uint32_t writeGpuMask, uint32_t readBuffer, uint32_t writeBuffer, intptr_t readOffset, intptr_t writeOffset, ssize_t size))_func)(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
}
void gllCall_glMulticastCopyImageSubDataNV(void *_func, uint32_t srcGpu, uint32_t dstGpuMask, uint32_t srcName, uint32_t srcTarget, int32_t srcLevel, int32_t srcX, int32_t srcY, int32_t srcZ, uint32_t dstName, uint32_t dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t srcWidth, int32_t srcHeight, int32_t srcDepth) {
	((void (*)(uint32_t srcGpu, uint32_t dstGpuMask, uint32_t srcName, uint32_t srcTarget, int32_t srcLevel, int32_t srcX, int32_t srcY, int32_t srcZ, uint32_t dstName, uint32_t dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t srcWidth, int32_t srcHeight, int32_t srcDepth))_func)(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
void gllCall_glMulticastFramebufferSampleLocationsfvNV(void *_func, uint32_t gpu, uint32_t framebuffer, uint32_t start, int32_t count, float *v) {
	((void (*)(uint32_t gpu, uint32_t framebuffer, uint32_t start, int32_t count, float *v))_func)(gpu, framebuffer, start, count, v);
}
void gllCall_glMulticastGetQueryObjecti64vNV(void *_func, uint32_t gpu, uint32_t id, uint32_t pname, int64_t *params) {
	((void (*)(uint32_t gpu, uint32_t id, uint32_t pname, int64_t *params))_func)(gpu, id, pname, params);
}
void gllCall_glMulticastGetQueryObjectivNV(void *_func, uint32_t gpu, uint32_t id, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t gpu, uint32_t id, uint32_t pname, int32_t *params))_func)(gpu, id, pname, params);
}
void gllCall_glMulticastGetQueryObjectui64vNV(void *_func, uint32_t gpu, uint32_t id, uint32_t pname, uint64_t *params) {
	((void (*)(uint32_t gpu, uint32_t id, uint32_t pname, uint64_t *params))_func)(gpu, id, pname, params);
}
void gllCall_glMulticastGetQueryObjectuivNV(void *_func, uint32_t gpu, uint32_t id, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t gpu, uint32_t id, uint32_t pname, uint32_t *params))_func)(gpu, id, pname, params);
}
void gllCall_glMulticastScissorArrayvNVX(void *_func, uint32_t gpu, uint32_t first, int32_t count, int32_t *v) {
	((void (*)(uint32_t gpu, uint32_t first, int32_t count, int32_t *v))_func)(gpu, first, count, v);
}
void gllCall_glMulticastViewportArrayvNVX(void *_func, uint32_t gpu, uint32_t first, int32_t count, float *v) {
	((void (*)(uint32_t gpu, uint32_t first, int32_t count, float *v))_func)(gpu, first, count, v);
}
void gllCall_glMulticastViewportPositionWScaleNVX(void *_func, uint32_t gpu, uint32_t index, float xcoeff, float ycoeff) {
	((void (*)(uint32_t gpu, uint32_t index, float xcoeff, float ycoeff))_func)(gpu, index, xcoeff, ycoeff);
}
void gllCall_glMulticastWaitSyncNV(void *_func, uint32_t signalGpu, uint32_t waitGpuMask) {
	((void (*)(uint32_t signalGpu, uint32_t waitGpuMask))_func)(signalGpu, waitGpuMask);
}
void gllCall_glNamedBufferAttachMemoryNV(void *_func, uint32_t buffer, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t buffer, uint32_t memory, uint64_t offset))_func)(buffer, memory, offset);
}
void gllCall_glNamedBufferData(void *_func, uint32_t buffer, ssize_t size, void *data, uint32_t usage) {
	((void (*)(uint32_t buffer, ssize_t size, void *data, uint32_t usage))_func)(buffer, size, data, usage);
}
void gllCall_glNamedBufferDataEXT(void *_func, uint32_t buffer, ssize_t size, void *data, uint32_t usage) {
	((void (*)(uint32_t buffer, ssize_t size, void *data, uint32_t usage))_func)(buffer, size, data, usage);
}
void gllCall_glNamedBufferPageCommitmentARB(void *_func, uint32_t buffer, intptr_t offset, ssize_t size, _Bool commit) {
	((void (*)(uint32_t buffer, intptr_t offset, ssize_t size, _Bool commit))_func)(buffer, offset, size, commit);
}
void gllCall_glNamedBufferPageCommitmentEXT(void *_func, uint32_t buffer, intptr_t offset, ssize_t size, _Bool commit) {
	((void (*)(uint32_t buffer, intptr_t offset, ssize_t size, _Bool commit))_func)(buffer, offset, size, commit);
}
void gllCall_glNamedBufferPageCommitmentMemNV(void *_func, uint32_t buffer, intptr_t offset, ssize_t size, uint32_t memory, uint64_t memOffset, _Bool commit) {
	((void (*)(uint32_t buffer, intptr_t offset, ssize_t size, uint32_t memory, uint64_t memOffset, _Bool commit))_func)(buffer, offset, size, memory, memOffset, commit);
}
void gllCall_glNamedBufferStorage(void *_func, uint32_t buffer, ssize_t size, void *data, uint32_t flags) {
	((void (*)(uint32_t buffer, ssize_t size, void *data, uint32_t flags))_func)(buffer, size, data, flags);
}
void gllCall_glNamedBufferStorageEXT(void *_func, uint32_t buffer, ssize_t size, void *data, uint32_t flags) {
	((void (*)(uint32_t buffer, ssize_t size, void *data, uint32_t flags))_func)(buffer, size, data, flags);
}
void gllCall_glNamedBufferStorageMemEXT(void *_func, uint32_t buffer, ssize_t size, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t buffer, ssize_t size, uint32_t memory, uint64_t offset))_func)(buffer, size, memory, offset);
}
void gllCall_glNamedBufferSubData(void *_func, uint32_t buffer, intptr_t offset, ssize_t size, void *data) {
	((void (*)(uint32_t buffer, intptr_t offset, ssize_t size, void *data))_func)(buffer, offset, size, data);
}
void gllCall_glNamedBufferSubDataEXT(void *_func, uint32_t buffer, intptr_t offset, ssize_t size, void *data) {
	((void (*)(uint32_t buffer, intptr_t offset, ssize_t size, void *data))_func)(buffer, offset, size, data);
}
void gllCall_glNamedCopyBufferSubDataEXT(void *_func, uint32_t readBuffer, uint32_t writeBuffer, intptr_t readOffset, intptr_t writeOffset, ssize_t size) {
	((void (*)(uint32_t readBuffer, uint32_t writeBuffer, intptr_t readOffset, intptr_t writeOffset, ssize_t size))_func)(readBuffer, writeBuffer, readOffset, writeOffset, size);
}
void gllCall_glNamedFramebufferDrawBuffer(void *_func, uint32_t framebuffer, uint32_t buf) {
	((void (*)(uint32_t framebuffer, uint32_t buf))_func)(framebuffer, buf);
}
void gllCall_glNamedFramebufferDrawBuffers(void *_func, uint32_t framebuffer, int32_t n, uint32_t *bufs) {
	((void (*)(uint32_t framebuffer, int32_t n, uint32_t *bufs))_func)(framebuffer, n, bufs);
}
void gllCall_glNamedFramebufferParameteri(void *_func, uint32_t framebuffer, uint32_t pname, int32_t param) {
	((void (*)(uint32_t framebuffer, uint32_t pname, int32_t param))_func)(framebuffer, pname, param);
}
void gllCall_glNamedFramebufferParameteriEXT(void *_func, uint32_t framebuffer, uint32_t pname, int32_t param) {
	((void (*)(uint32_t framebuffer, uint32_t pname, int32_t param))_func)(framebuffer, pname, param);
}
void gllCall_glNamedFramebufferReadBuffer(void *_func, uint32_t framebuffer, uint32_t src) {
	((void (*)(uint32_t framebuffer, uint32_t src))_func)(framebuffer, src);
}
void gllCall_glNamedFramebufferRenderbuffer(void *_func, uint32_t framebuffer, uint32_t attachment, uint32_t renderbuffertarget, uint32_t renderbuffer) {
	((void (*)(uint32_t framebuffer, uint32_t attachment, uint32_t renderbuffertarget, uint32_t renderbuffer))_func)(framebuffer, attachment, renderbuffertarget, renderbuffer);
}
void gllCall_glNamedFramebufferRenderbufferEXT(void *_func, uint32_t framebuffer, uint32_t attachment, uint32_t renderbuffertarget, uint32_t renderbuffer) {
	((void (*)(uint32_t framebuffer, uint32_t attachment, uint32_t renderbuffertarget, uint32_t renderbuffer))_func)(framebuffer, attachment, renderbuffertarget, renderbuffer);
}
void gllCall_glNamedFramebufferSampleLocationsfvARB(void *_func, uint32_t framebuffer, uint32_t start, int32_t count, float *v) {
	((void (*)(uint32_t framebuffer, uint32_t start, int32_t count, float *v))_func)(framebuffer, start, count, v);
}
void gllCall_glNamedFramebufferSampleLocationsfvNV(void *_func, uint32_t framebuffer, uint32_t start, int32_t count, float *v) {
	((void (*)(uint32_t framebuffer, uint32_t start, int32_t count, float *v))_func)(framebuffer, start, count, v);
}
void gllCall_glNamedFramebufferTexture(void *_func, uint32_t framebuffer, uint32_t attachment, uint32_t texture, int32_t level) {
	((void (*)(uint32_t framebuffer, uint32_t attachment, uint32_t texture, int32_t level))_func)(framebuffer, attachment, texture, level);
}
void gllCall_glNamedFramebufferSamplePositionsfvAMD(void *_func, uint32_t framebuffer, uint32_t numsamples, uint32_t pixelindex, float *values) {
	((void (*)(uint32_t framebuffer, uint32_t numsamples, uint32_t pixelindex, float *values))_func)(framebuffer, numsamples, pixelindex, values);
}
void gllCall_glNamedFramebufferTexture1DEXT(void *_func, uint32_t framebuffer, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level) {
	((void (*)(uint32_t framebuffer, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level))_func)(framebuffer, attachment, textarget, texture, level);
}
void gllCall_glNamedFramebufferTexture2DEXT(void *_func, uint32_t framebuffer, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level) {
	((void (*)(uint32_t framebuffer, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level))_func)(framebuffer, attachment, textarget, texture, level);
}
void gllCall_glNamedFramebufferTexture3DEXT(void *_func, uint32_t framebuffer, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level, int32_t zoffset) {
	((void (*)(uint32_t framebuffer, uint32_t attachment, uint32_t textarget, uint32_t texture, int32_t level, int32_t zoffset))_func)(framebuffer, attachment, textarget, texture, level, zoffset);
}
void gllCall_glNamedFramebufferTextureEXT(void *_func, uint32_t framebuffer, uint32_t attachment, uint32_t texture, int32_t level) {
	((void (*)(uint32_t framebuffer, uint32_t attachment, uint32_t texture, int32_t level))_func)(framebuffer, attachment, texture, level);
}
void gllCall_glNamedFramebufferTextureFaceEXT(void *_func, uint32_t framebuffer, uint32_t attachment, uint32_t texture, int32_t level, uint32_t face) {
	((void (*)(uint32_t framebuffer, uint32_t attachment, uint32_t texture, int32_t level, uint32_t face))_func)(framebuffer, attachment, texture, level, face);
}
void gllCall_glNamedFramebufferTextureLayer(void *_func, uint32_t framebuffer, uint32_t attachment, uint32_t texture, int32_t level, int32_t layer) {
	((void (*)(uint32_t framebuffer, uint32_t attachment, uint32_t texture, int32_t level, int32_t layer))_func)(framebuffer, attachment, texture, level, layer);
}
void gllCall_glNamedFramebufferTextureLayerEXT(void *_func, uint32_t framebuffer, uint32_t attachment, uint32_t texture, int32_t level, int32_t layer) {
	((void (*)(uint32_t framebuffer, uint32_t attachment, uint32_t texture, int32_t level, int32_t layer))_func)(framebuffer, attachment, texture, level, layer);
}
void gllCall_glNamedProgramLocalParameter4dEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, double x, double y, double z, double w) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, double x, double y, double z, double w))_func)(program, target, index, x, y, z, w);
}
void gllCall_glNamedProgramLocalParameter4dvEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, double *params) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, double *params))_func)(program, target, index, params);
}
void gllCall_glNamedProgramLocalParameter4fEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, float x, float y, float z, float w) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, float x, float y, float z, float w))_func)(program, target, index, x, y, z, w);
}
void gllCall_glNamedProgramLocalParameter4fvEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, float *params) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, float *params))_func)(program, target, index, params);
}
void gllCall_glNamedProgramLocalParameterI4iEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, int32_t x, int32_t y, int32_t z, int32_t w) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, int32_t x, int32_t y, int32_t z, int32_t w))_func)(program, target, index, x, y, z, w);
}
void gllCall_glNamedProgramLocalParameterI4ivEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, int32_t *params) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, int32_t *params))_func)(program, target, index, params);
}
void gllCall_glNamedProgramLocalParameterI4uiEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, uint32_t x, uint32_t y, uint32_t z, uint32_t w) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, uint32_t x, uint32_t y, uint32_t z, uint32_t w))_func)(program, target, index, x, y, z, w);
}
void gllCall_glNamedProgramLocalParameterI4uivEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, uint32_t *params) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, uint32_t *params))_func)(program, target, index, params);
}
void gllCall_glNamedProgramLocalParameters4fvEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, int32_t count, float *params) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, int32_t count, float *params))_func)(program, target, index, count, params);
}
void gllCall_glNamedProgramLocalParametersI4ivEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, int32_t count, int32_t *params) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, int32_t count, int32_t *params))_func)(program, target, index, count, params);
}
void gllCall_glNamedProgramLocalParametersI4uivEXT(void *_func, uint32_t program, uint32_t target, uint32_t index, int32_t count, uint32_t *params) {
	((void (*)(uint32_t program, uint32_t target, uint32_t index, int32_t count, uint32_t *params))_func)(program, target, index, count, params);
}
void gllCall_glNamedProgramStringEXT(void *_func, uint32_t program, uint32_t target, uint32_t format, int32_t len, void *string) {
	((void (*)(uint32_t program, uint32_t target, uint32_t format, int32_t len, void *string))_func)(program, target, format, len, string);
}
void gllCall_glNamedRenderbufferStorage(void *_func, uint32_t renderbuffer, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t renderbuffer, uint32_t internalformat, int32_t width, int32_t height))_func)(renderbuffer, internalformat, width, height);
}
void gllCall_glNamedRenderbufferStorageEXT(void *_func, uint32_t renderbuffer, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t renderbuffer, uint32_t internalformat, int32_t width, int32_t height))_func)(renderbuffer, internalformat, width, height);
}
void gllCall_glNamedRenderbufferStorageMultisample(void *_func, uint32_t renderbuffer, int32_t samples, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t renderbuffer, int32_t samples, uint32_t internalformat, int32_t width, int32_t height))_func)(renderbuffer, samples, internalformat, width, height);
}
void gllCall_glNamedRenderbufferStorageMultisampleAdvancedAMD(void *_func, uint32_t renderbuffer, int32_t samples, int32_t storageSamples, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t renderbuffer, int32_t samples, int32_t storageSamples, uint32_t internalformat, int32_t width, int32_t height))_func)(renderbuffer, samples, storageSamples, internalformat, width, height);
}
void gllCall_glNamedRenderbufferStorageMultisampleCoverageEXT(void *_func, uint32_t renderbuffer, int32_t coverageSamples, int32_t colorSamples, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t renderbuffer, int32_t coverageSamples, int32_t colorSamples, uint32_t internalformat, int32_t width, int32_t height))_func)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
}
void gllCall_glNamedRenderbufferStorageMultisampleEXT(void *_func, uint32_t renderbuffer, int32_t samples, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t renderbuffer, int32_t samples, uint32_t internalformat, int32_t width, int32_t height))_func)(renderbuffer, samples, internalformat, width, height);
}
void gllCall_glNamedStringARB(void *_func, uint32_t type, int32_t namelen, uint8_t *name, int32_t stringlen, uint8_t *string) {
	((void (*)(uint32_t type, int32_t namelen, uint8_t *name, int32_t stringlen, uint8_t *string))_func)(type, namelen, name, stringlen, string);
}
void gllCall_glNewList(void *_func, uint32_t list, uint32_t mode) {
	((void (*)(uint32_t list, uint32_t mode))_func)(list, mode);
}
uint32_t gllCall_glNewObjectBufferATI(void *_func, int32_t size, void *pointer, uint32_t usage) {
	return ((uint32_t (*)(int32_t size, void *pointer, uint32_t usage))_func)(size, pointer, usage);
}
void gllCall_glNormal3b(void *_func, int8_t nx, int8_t ny, int8_t nz) {
	((void (*)(int8_t nx, int8_t ny, int8_t nz))_func)(nx, ny, nz);
}
void gllCall_glNormal3bv(void *_func, int8_t *v) {
	((void (*)(int8_t *v))_func)(v);
}
void gllCall_glNormal3d(void *_func, double nx, double ny, double nz) {
	((void (*)(double nx, double ny, double nz))_func)(nx, ny, nz);
}
void gllCall_glNormal3dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glNormal3f(void *_func, float nx, float ny, float nz) {
	((void (*)(float nx, float ny, float nz))_func)(nx, ny, nz);
}
void gllCall_glNormal3fVertex3fSUN(void *_func, float nx, float ny, float nz, float x, float y, float z) {
	((void (*)(float nx, float ny, float nz, float x, float y, float z))_func)(nx, ny, nz, x, y, z);
}
void gllCall_glNormal3fVertex3fvSUN(void *_func, float *n, float *v) {
	((void (*)(float *n, float *v))_func)(n, v);
}
void gllCall_glNormal3fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glNormal3hNV(void *_func, uint16_t nx, uint16_t ny, uint16_t nz) {
	((void (*)(uint16_t nx, uint16_t ny, uint16_t nz))_func)(nx, ny, nz);
}
void gllCall_glNormal3hvNV(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glNormal3i(void *_func, int32_t nx, int32_t ny, int32_t nz) {
	((void (*)(int32_t nx, int32_t ny, int32_t nz))_func)(nx, ny, nz);
}
void gllCall_glNormal3iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glNormal3s(void *_func, int16_t nx, int16_t ny, int16_t nz) {
	((void (*)(int16_t nx, int16_t ny, int16_t nz))_func)(nx, ny, nz);
}
void gllCall_glNormal3sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glNormal3x(void *_func, int32_t nx, int32_t ny, int32_t nz) {
	((void (*)(int32_t nx, int32_t ny, int32_t nz))_func)(nx, ny, nz);
}
void gllCall_glNormal3xOES(void *_func, int32_t nx, int32_t ny, int32_t nz) {
	((void (*)(int32_t nx, int32_t ny, int32_t nz))_func)(nx, ny, nz);
}
void gllCall_glNormal3xvOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glNormalFormatNV(void *_func, uint32_t type, int32_t stride) {
	((void (*)(uint32_t type, int32_t stride))_func)(type, stride);
}
void gllCall_glNormalP3ui(void *_func, uint32_t type, uint32_t coords) {
	((void (*)(uint32_t type, uint32_t coords))_func)(type, coords);
}
void gllCall_glNormalP3uiv(void *_func, uint32_t type, uint32_t *coords) {
	((void (*)(uint32_t type, uint32_t *coords))_func)(type, coords);
}
void gllCall_glNormalPointer(void *_func, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(uint32_t type, int32_t stride, void *pointer))_func)(type, stride, pointer);
}
void gllCall_glNormalPointerEXT(void *_func, uint32_t type, int32_t stride, int32_t count, void *pointer) {
	((void (*)(uint32_t type, int32_t stride, int32_t count, void *pointer))_func)(type, stride, count, pointer);
}
void gllCall_glNormalPointerListIBM(void *_func, uint32_t type, int32_t stride, void **pointer, int32_t ptrstride) {
	((void (*)(uint32_t type, int32_t stride, void **pointer, int32_t ptrstride))_func)(type, stride, pointer, ptrstride);
}
void gllCall_glNormalPointervINTEL(void *_func, uint32_t type, void **pointer) {
	((void (*)(uint32_t type, void **pointer))_func)(type, pointer);
}
void gllCall_glNormalStream3bATI(void *_func, uint32_t stream, int8_t nx, int8_t ny, int8_t nz) {
	((void (*)(uint32_t stream, int8_t nx, int8_t ny, int8_t nz))_func)(stream, nx, ny, nz);
}
void gllCall_glNormalStream3bvATI(void *_func, uint32_t stream, int8_t *coords) {
	((void (*)(uint32_t stream, int8_t *coords))_func)(stream, coords);
}
void gllCall_glNormalStream3dATI(void *_func, uint32_t stream, double nx, double ny, double nz) {
	((void (*)(uint32_t stream, double nx, double ny, double nz))_func)(stream, nx, ny, nz);
}
void gllCall_glNormalStream3dvATI(void *_func, uint32_t stream, double *coords) {
	((void (*)(uint32_t stream, double *coords))_func)(stream, coords);
}
void gllCall_glNormalStream3fATI(void *_func, uint32_t stream, float nx, float ny, float nz) {
	((void (*)(uint32_t stream, float nx, float ny, float nz))_func)(stream, nx, ny, nz);
}
void gllCall_glNormalStream3fvATI(void *_func, uint32_t stream, float *coords) {
	((void (*)(uint32_t stream, float *coords))_func)(stream, coords);
}
void gllCall_glNormalStream3iATI(void *_func, uint32_t stream, int32_t nx, int32_t ny, int32_t nz) {
	((void (*)(uint32_t stream, int32_t nx, int32_t ny, int32_t nz))_func)(stream, nx, ny, nz);
}
void gllCall_glNormalStream3ivATI(void *_func, uint32_t stream, int32_t *coords) {
	((void (*)(uint32_t stream, int32_t *coords))_func)(stream, coords);
}
void gllCall_glNormalStream3sATI(void *_func, uint32_t stream, int16_t nx, int16_t ny, int16_t nz) {
	((void (*)(uint32_t stream, int16_t nx, int16_t ny, int16_t nz))_func)(stream, nx, ny, nz);
}
void gllCall_glNormalStream3svATI(void *_func, uint32_t stream, int16_t *coords) {
	((void (*)(uint32_t stream, int16_t *coords))_func)(stream, coords);
}
void gllCall_glObjectLabel(void *_func, uint32_t identifier, uint32_t name, int32_t length, uint8_t *label) {
	((void (*)(uint32_t identifier, uint32_t name, int32_t length, uint8_t *label))_func)(identifier, name, length, label);
}
void gllCall_glObjectLabelKHR(void *_func, uint32_t identifier, uint32_t name, int32_t length, uint8_t *label) {
	((void (*)(uint32_t identifier, uint32_t name, int32_t length, uint8_t *label))_func)(identifier, name, length, label);
}
void gllCall_glObjectPtrLabel(void *_func, void *ptr, int32_t length, uint8_t *label) {
	((void (*)(void *ptr, int32_t length, uint8_t *label))_func)(ptr, length, label);
}
void gllCall_glObjectPtrLabelKHR(void *_func, void *ptr, int32_t length, uint8_t *label) {
	((void (*)(void *ptr, int32_t length, uint8_t *label))_func)(ptr, length, label);
}
uint32_t gllCall_glObjectPurgeableAPPLE(void *_func, uint32_t objectType, uint32_t name, uint32_t option) {
	return ((uint32_t (*)(uint32_t objectType, uint32_t name, uint32_t option))_func)(objectType, name, option);
}
uint32_t gllCall_glObjectUnpurgeableAPPLE(void *_func, uint32_t objectType, uint32_t name, uint32_t option) {
	return ((uint32_t (*)(uint32_t objectType, uint32_t name, uint32_t option))_func)(objectType, name, option);
}
void gllCall_glOrtho(void *_func, double left, double right, double bottom, double top, double zNear, double zFar) {
	((void (*)(double left, double right, double bottom, double top, double zNear, double zFar))_func)(left, right, bottom, top, zNear, zFar);
}
void gllCall_glOrthof(void *_func, float l, float r, float b, float t, float n, float f) {
	((void (*)(float l, float r, float b, float t, float n, float f))_func)(l, r, b, t, n, f);
}
void gllCall_glOrthofOES(void *_func, float l, float r, float b, float t, float n, float f) {
	((void (*)(float l, float r, float b, float t, float n, float f))_func)(l, r, b, t, n, f);
}
void gllCall_glOrthox(void *_func, int32_t l, int32_t r, int32_t b, int32_t t, int32_t n, int32_t f) {
	((void (*)(int32_t l, int32_t r, int32_t b, int32_t t, int32_t n, int32_t f))_func)(l, r, b, t, n, f);
}
void gllCall_glOrthoxOES(void *_func, int32_t l, int32_t r, int32_t b, int32_t t, int32_t n, int32_t f) {
	((void (*)(int32_t l, int32_t r, int32_t b, int32_t t, int32_t n, int32_t f))_func)(l, r, b, t, n, f);
}
void gllCall_glPNTrianglesfATI(void *_func, uint32_t pname, float param) {
	((void (*)(uint32_t pname, float param))_func)(pname, param);
}
void gllCall_glPNTrianglesiATI(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glPassTexCoordATI(void *_func, uint32_t dst, uint32_t coord, uint32_t swizzle) {
	((void (*)(uint32_t dst, uint32_t coord, uint32_t swizzle))_func)(dst, coord, swizzle);
}
void gllCall_glPassThrough(void *_func, float token) {
	((void (*)(float token))_func)(token);
}
void gllCall_glPassThroughxOES(void *_func, int32_t token) {
	((void (*)(int32_t token))_func)(token);
}
void gllCall_glPatchParameterfv(void *_func, uint32_t pname, float *values) {
	((void (*)(uint32_t pname, float *values))_func)(pname, values);
}
void gllCall_glPatchParameteri(void *_func, uint32_t pname, int32_t value) {
	((void (*)(uint32_t pname, int32_t value))_func)(pname, value);
}
void gllCall_glPatchParameteriEXT(void *_func, uint32_t pname, int32_t value) {
	((void (*)(uint32_t pname, int32_t value))_func)(pname, value);
}
void gllCall_glPatchParameteriOES(void *_func, uint32_t pname, int32_t value) {
	((void (*)(uint32_t pname, int32_t value))_func)(pname, value);
}
void gllCall_glPathColorGenNV(void *_func, uint32_t color, uint32_t genMode, uint32_t colorFormat, float *coeffs) {
	((void (*)(uint32_t color, uint32_t genMode, uint32_t colorFormat, float *coeffs))_func)(color, genMode, colorFormat, coeffs);
}
void gllCall_glPathCommandsNV(void *_func, uint32_t path, int32_t numCommands, uint8_t *commands, int32_t numCoords, uint32_t coordType, void *coords) {
	((void (*)(uint32_t path, int32_t numCommands, uint8_t *commands, int32_t numCoords, uint32_t coordType, void *coords))_func)(path, numCommands, commands, numCoords, coordType, coords);
}
void gllCall_glPathCoordsNV(void *_func, uint32_t path, int32_t numCoords, uint32_t coordType, void *coords) {
	((void (*)(uint32_t path, int32_t numCoords, uint32_t coordType, void *coords))_func)(path, numCoords, coordType, coords);
}
void gllCall_glPathCoverDepthFuncNV(void *_func, uint32_t func) {
	((void (*)(uint32_t func))_func)(func);
}
void gllCall_glPathDashArrayNV(void *_func, uint32_t path, int32_t dashCount, float *dashArray) {
	((void (*)(uint32_t path, int32_t dashCount, float *dashArray))_func)(path, dashCount, dashArray);
}
void gllCall_glPathFogGenNV(void *_func, uint32_t genMode) {
	((void (*)(uint32_t genMode))_func)(genMode);
}
uint32_t gllCall_glPathGlyphIndexArrayNV(void *_func, uint32_t firstPathName, uint32_t fontTarget, void *fontName, uint32_t fontStyle, uint32_t firstGlyphIndex, int32_t numGlyphs, uint32_t pathParameterTemplate, float emScale) {
	return ((uint32_t (*)(uint32_t firstPathName, uint32_t fontTarget, void *fontName, uint32_t fontStyle, uint32_t firstGlyphIndex, int32_t numGlyphs, uint32_t pathParameterTemplate, float emScale))_func)(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
}
uint32_t gllCall_glPathGlyphIndexRangeNV(void *_func, uint32_t fontTarget, void *fontName, uint32_t fontStyle, uint32_t pathParameterTemplate, float emScale, uint32_t baseAndCount) {
	return ((uint32_t (*)(uint32_t fontTarget, void *fontName, uint32_t fontStyle, uint32_t pathParameterTemplate, float emScale, uint32_t baseAndCount))_func)(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
}
void gllCall_glPathGlyphRangeNV(void *_func, uint32_t firstPathName, uint32_t fontTarget, void *fontName, uint32_t fontStyle, uint32_t firstGlyph, int32_t numGlyphs, uint32_t handleMissingGlyphs, uint32_t pathParameterTemplate, float emScale) {
	((void (*)(uint32_t firstPathName, uint32_t fontTarget, void *fontName, uint32_t fontStyle, uint32_t firstGlyph, int32_t numGlyphs, uint32_t handleMissingGlyphs, uint32_t pathParameterTemplate, float emScale))_func)(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
}
void gllCall_glPathGlyphsNV(void *_func, uint32_t firstPathName, uint32_t fontTarget, void *fontName, uint32_t fontStyle, int32_t numGlyphs, uint32_t type, void *charcodes, uint32_t handleMissingGlyphs, uint32_t pathParameterTemplate, float emScale) {
	((void (*)(uint32_t firstPathName, uint32_t fontTarget, void *fontName, uint32_t fontStyle, int32_t numGlyphs, uint32_t type, void *charcodes, uint32_t handleMissingGlyphs, uint32_t pathParameterTemplate, float emScale))_func)(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
}
uint32_t gllCall_glPathMemoryGlyphIndexArrayNV(void *_func, uint32_t firstPathName, uint32_t fontTarget, ssize_t fontSize, void *fontData, int32_t faceIndex, uint32_t firstGlyphIndex, int32_t numGlyphs, uint32_t pathParameterTemplate, float emScale) {
	return ((uint32_t (*)(uint32_t firstPathName, uint32_t fontTarget, ssize_t fontSize, void *fontData, int32_t faceIndex, uint32_t firstGlyphIndex, int32_t numGlyphs, uint32_t pathParameterTemplate, float emScale))_func)(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
}
void gllCall_glPathParameterfNV(void *_func, uint32_t path, uint32_t pname, float value) {
	((void (*)(uint32_t path, uint32_t pname, float value))_func)(path, pname, value);
}
void gllCall_glPathParameterfvNV(void *_func, uint32_t path, uint32_t pname, float *value) {
	((void (*)(uint32_t path, uint32_t pname, float *value))_func)(path, pname, value);
}
void gllCall_glPathParameteriNV(void *_func, uint32_t path, uint32_t pname, int32_t value) {
	((void (*)(uint32_t path, uint32_t pname, int32_t value))_func)(path, pname, value);
}
void gllCall_glPathParameterivNV(void *_func, uint32_t path, uint32_t pname, int32_t *value) {
	((void (*)(uint32_t path, uint32_t pname, int32_t *value))_func)(path, pname, value);
}
void gllCall_glPathStencilDepthOffsetNV(void *_func, float factor, float units) {
	((void (*)(float factor, float units))_func)(factor, units);
}
void gllCall_glPathStencilFuncNV(void *_func, uint32_t func, int32_t ref, uint32_t mask) {
	((void (*)(uint32_t func, int32_t ref, uint32_t mask))_func)(func, ref, mask);
}
void gllCall_glPathStringNV(void *_func, uint32_t path, uint32_t format, int32_t length, void *pathString) {
	((void (*)(uint32_t path, uint32_t format, int32_t length, void *pathString))_func)(path, format, length, pathString);
}
void gllCall_glPathSubCommandsNV(void *_func, uint32_t path, int32_t commandStart, int32_t commandsToDelete, int32_t numCommands, uint8_t *commands, int32_t numCoords, uint32_t coordType, void *coords) {
	((void (*)(uint32_t path, int32_t commandStart, int32_t commandsToDelete, int32_t numCommands, uint8_t *commands, int32_t numCoords, uint32_t coordType, void *coords))_func)(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
}
void gllCall_glPathSubCoordsNV(void *_func, uint32_t path, int32_t coordStart, int32_t numCoords, uint32_t coordType, void *coords) {
	((void (*)(uint32_t path, int32_t coordStart, int32_t numCoords, uint32_t coordType, void *coords))_func)(path, coordStart, numCoords, coordType, coords);
}
void gllCall_glPathTexGenNV(void *_func, uint32_t texCoordSet, uint32_t genMode, int32_t components, float *coeffs) {
	((void (*)(uint32_t texCoordSet, uint32_t genMode, int32_t components, float *coeffs))_func)(texCoordSet, genMode, components, coeffs);
}
void gllCall_glPauseTransformFeedback(void *_func) {
	((void (*)())_func)();
}
void gllCall_glPauseTransformFeedbackNV(void *_func) {
	((void (*)())_func)();
}
void gllCall_glPixelDataRangeNV(void *_func, uint32_t target, int32_t length, void *pointer) {
	((void (*)(uint32_t target, int32_t length, void *pointer))_func)(target, length, pointer);
}
void gllCall_glPixelMapfv(void *_func, uint32_t map, int32_t mapsize, float *values) {
	((void (*)(uint32_t map, int32_t mapsize, float *values))_func)(map, mapsize, values);
}
void gllCall_glPixelMapuiv(void *_func, uint32_t map, int32_t mapsize, uint32_t *values) {
	((void (*)(uint32_t map, int32_t mapsize, uint32_t *values))_func)(map, mapsize, values);
}
void gllCall_glPixelMapusv(void *_func, uint32_t map, int32_t mapsize, uint16_t *values) {
	((void (*)(uint32_t map, int32_t mapsize, uint16_t *values))_func)(map, mapsize, values);
}
void gllCall_glPixelMapx(void *_func, uint32_t map, int32_t size, int32_t *values) {
	((void (*)(uint32_t map, int32_t size, int32_t *values))_func)(map, size, values);
}
void gllCall_glPixelStoref(void *_func, uint32_t pname, float param) {
	((void (*)(uint32_t pname, float param))_func)(pname, param);
}
void gllCall_glPixelStorei(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glPixelStorex(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glPixelTexGenParameterfSGIS(void *_func, uint32_t pname, float param) {
	((void (*)(uint32_t pname, float param))_func)(pname, param);
}
void gllCall_glPixelTexGenParameterfvSGIS(void *_func, uint32_t pname, float *params) {
	((void (*)(uint32_t pname, float *params))_func)(pname, params);
}
void gllCall_glPixelTexGenParameteriSGIS(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glPixelTexGenParameterivSGIS(void *_func, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pname, int32_t *params))_func)(pname, params);
}
void gllCall_glPixelTexGenSGIX(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glPixelTransferf(void *_func, uint32_t pname, float param) {
	((void (*)(uint32_t pname, float param))_func)(pname, param);
}
void gllCall_glPixelTransferi(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glPixelTransferxOES(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glPixelTransformParameterfEXT(void *_func, uint32_t target, uint32_t pname, float param) {
	((void (*)(uint32_t target, uint32_t pname, float param))_func)(target, pname, param);
}
void gllCall_glPixelTransformParameterfvEXT(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glPixelTransformParameteriEXT(void *_func, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t target, uint32_t pname, int32_t param))_func)(target, pname, param);
}
void gllCall_glPixelTransformParameterivEXT(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glPixelZoom(void *_func, float xfactor, float yfactor) {
	((void (*)(float xfactor, float yfactor))_func)(xfactor, yfactor);
}
void gllCall_glPixelZoomxOES(void *_func, int32_t xfactor, int32_t yfactor) {
	((void (*)(int32_t xfactor, int32_t yfactor))_func)(xfactor, yfactor);
}
_Bool gllCall_glPointAlongPathNV(void *_func, uint32_t path, int32_t startSegment, int32_t numSegments, float distance, float *x, float *y, float *tangentX, float *tangentY) {
	return ((_Bool (*)(uint32_t path, int32_t startSegment, int32_t numSegments, float distance, float *x, float *y, float *tangentX, float *tangentY))_func)(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
}
void gllCall_glPointParameterf(void *_func, uint32_t pname, float param) {
	((void (*)(uint32_t pname, float param))_func)(pname, param);
}
void gllCall_glPointParameterfARB(void *_func, uint32_t pname, float param) {
	((void (*)(uint32_t pname, float param))_func)(pname, param);
}
void gllCall_glPointParameterfEXT(void *_func, uint32_t pname, float param) {
	((void (*)(uint32_t pname, float param))_func)(pname, param);
}
void gllCall_glPointParameterfSGIS(void *_func, uint32_t pname, float param) {
	((void (*)(uint32_t pname, float param))_func)(pname, param);
}
void gllCall_glPointParameterfv(void *_func, uint32_t pname, float *params) {
	((void (*)(uint32_t pname, float *params))_func)(pname, params);
}
void gllCall_glPointParameterfvARB(void *_func, uint32_t pname, float *params) {
	((void (*)(uint32_t pname, float *params))_func)(pname, params);
}
void gllCall_glPointParameterfvEXT(void *_func, uint32_t pname, float *params) {
	((void (*)(uint32_t pname, float *params))_func)(pname, params);
}
void gllCall_glPointParameterfvSGIS(void *_func, uint32_t pname, float *params) {
	((void (*)(uint32_t pname, float *params))_func)(pname, params);
}
void gllCall_glPointParameteri(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glPointParameteriNV(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glPointParameteriv(void *_func, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pname, int32_t *params))_func)(pname, params);
}
void gllCall_glPointParameterivNV(void *_func, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pname, int32_t *params))_func)(pname, params);
}
void gllCall_glPointParameterx(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glPointParameterxOES(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glPointParameterxv(void *_func, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pname, int32_t *params))_func)(pname, params);
}
void gllCall_glPointParameterxvOES(void *_func, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pname, int32_t *params))_func)(pname, params);
}
void gllCall_glPointSize(void *_func, float size) {
	((void (*)(float size))_func)(size);
}
void gllCall_glPointSizePointerOES(void *_func, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(uint32_t type, int32_t stride, void *pointer))_func)(type, stride, pointer);
}
void gllCall_glPointSizex(void *_func, int32_t size) {
	((void (*)(int32_t size))_func)(size);
}
void gllCall_glPointSizexOES(void *_func, int32_t size) {
	((void (*)(int32_t size))_func)(size);
}
int32_t gllCall_glPollAsyncSGIX(void *_func, uint32_t *markerp) {
	return ((int32_t (*)(uint32_t *markerp))_func)(markerp);
}
int32_t gllCall_glPollInstrumentsSGIX(void *_func, int32_t *marker_p) {
	return ((int32_t (*)(int32_t *marker_p))_func)(marker_p);
}
void gllCall_glPolygonMode(void *_func, uint32_t face, uint32_t mode) {
	((void (*)(uint32_t face, uint32_t mode))_func)(face, mode);
}
void gllCall_glPolygonModeNV(void *_func, uint32_t face, uint32_t mode) {
	((void (*)(uint32_t face, uint32_t mode))_func)(face, mode);
}
void gllCall_glPolygonOffset(void *_func, float factor, float units) {
	((void (*)(float factor, float units))_func)(factor, units);
}
void gllCall_glPolygonOffsetClamp(void *_func, float factor, float units, float clamp) {
	((void (*)(float factor, float units, float clamp))_func)(factor, units, clamp);
}
void gllCall_glPolygonOffsetClampEXT(void *_func, float factor, float units, float clamp) {
	((void (*)(float factor, float units, float clamp))_func)(factor, units, clamp);
}
void gllCall_glPolygonOffsetEXT(void *_func, float factor, float bias) {
	((void (*)(float factor, float bias))_func)(factor, bias);
}
void gllCall_glPolygonOffsetx(void *_func, int32_t factor, int32_t units) {
	((void (*)(int32_t factor, int32_t units))_func)(factor, units);
}
void gllCall_glPolygonOffsetxOES(void *_func, int32_t factor, int32_t units) {
	((void (*)(int32_t factor, int32_t units))_func)(factor, units);
}
void gllCall_glPolygonStipple(void *_func, uint8_t *mask) {
	((void (*)(uint8_t *mask))_func)(mask);
}
void gllCall_glPopAttrib(void *_func) {
	((void (*)())_func)();
}
void gllCall_glPopClientAttrib(void *_func) {
	((void (*)())_func)();
}
void gllCall_glPopDebugGroup(void *_func) {
	((void (*)())_func)();
}
void gllCall_glPopDebugGroupKHR(void *_func) {
	((void (*)())_func)();
}
void gllCall_glPopGroupMarkerEXT(void *_func) {
	((void (*)())_func)();
}
void gllCall_glPopMatrix(void *_func) {
	((void (*)())_func)();
}
void gllCall_glPopName(void *_func) {
	((void (*)())_func)();
}
void gllCall_glPresentFrameDualFillNV(void *_func, uint32_t video_slot, uint64_t minPresentTime, uint32_t beginPresentTimeId, uint32_t presentDurationId, uint32_t type, uint32_t target0, uint32_t fill0, uint32_t target1, uint32_t fill1, uint32_t target2, uint32_t fill2, uint32_t target3, uint32_t fill3) {
	((void (*)(uint32_t video_slot, uint64_t minPresentTime, uint32_t beginPresentTimeId, uint32_t presentDurationId, uint32_t type, uint32_t target0, uint32_t fill0, uint32_t target1, uint32_t fill1, uint32_t target2, uint32_t fill2, uint32_t target3, uint32_t fill3))_func)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
}
void gllCall_glPresentFrameKeyedNV(void *_func, uint32_t video_slot, uint64_t minPresentTime, uint32_t beginPresentTimeId, uint32_t presentDurationId, uint32_t type, uint32_t target0, uint32_t fill0, uint32_t key0, uint32_t target1, uint32_t fill1, uint32_t key1) {
	((void (*)(uint32_t video_slot, uint64_t minPresentTime, uint32_t beginPresentTimeId, uint32_t presentDurationId, uint32_t type, uint32_t target0, uint32_t fill0, uint32_t key0, uint32_t target1, uint32_t fill1, uint32_t key1))_func)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
}
void gllCall_glPrimitiveBoundingBox(void *_func, float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) {
	((void (*)(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW))_func)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}
void gllCall_glPrimitiveBoundingBoxARB(void *_func, float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) {
	((void (*)(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW))_func)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}
void gllCall_glPrimitiveBoundingBoxEXT(void *_func, float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) {
	((void (*)(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW))_func)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}
void gllCall_glPrimitiveBoundingBoxOES(void *_func, float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) {
	((void (*)(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW))_func)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}
void gllCall_glPrimitiveRestartIndex(void *_func, uint32_t index) {
	((void (*)(uint32_t index))_func)(index);
}
void gllCall_glPrimitiveRestartIndexNV(void *_func, uint32_t index) {
	((void (*)(uint32_t index))_func)(index);
}
void gllCall_glPrimitiveRestartNV(void *_func) {
	((void (*)())_func)();
}
void gllCall_glPrioritizeTextures(void *_func, int32_t n, uint32_t *textures, float *priorities) {
	((void (*)(int32_t n, uint32_t *textures, float *priorities))_func)(n, textures, priorities);
}
void gllCall_glPrioritizeTexturesEXT(void *_func, int32_t n, uint32_t *textures, float *priorities) {
	((void (*)(int32_t n, uint32_t *textures, float *priorities))_func)(n, textures, priorities);
}
void gllCall_glPrioritizeTexturesxOES(void *_func, int32_t n, uint32_t *textures, int32_t *priorities) {
	((void (*)(int32_t n, uint32_t *textures, int32_t *priorities))_func)(n, textures, priorities);
}
void gllCall_glProgramBinary(void *_func, uint32_t program, uint32_t binaryFormat, void *binary, int32_t length) {
	((void (*)(uint32_t program, uint32_t binaryFormat, void *binary, int32_t length))_func)(program, binaryFormat, binary, length);
}
void gllCall_glProgramBinaryOES(void *_func, uint32_t program, uint32_t binaryFormat, void *binary, int32_t length) {
	((void (*)(uint32_t program, uint32_t binaryFormat, void *binary, int32_t length))_func)(program, binaryFormat, binary, length);
}
void gllCall_glProgramBufferParametersIivNV(void *_func, uint32_t target, uint32_t bindingIndex, uint32_t wordIndex, int32_t count, int32_t *params) {
	((void (*)(uint32_t target, uint32_t bindingIndex, uint32_t wordIndex, int32_t count, int32_t *params))_func)(target, bindingIndex, wordIndex, count, params);
}
void gllCall_glProgramBufferParametersIuivNV(void *_func, uint32_t target, uint32_t bindingIndex, uint32_t wordIndex, int32_t count, uint32_t *params) {
	((void (*)(uint32_t target, uint32_t bindingIndex, uint32_t wordIndex, int32_t count, uint32_t *params))_func)(target, bindingIndex, wordIndex, count, params);
}
void gllCall_glProgramBufferParametersfvNV(void *_func, uint32_t target, uint32_t bindingIndex, uint32_t wordIndex, int32_t count, float *params) {
	((void (*)(uint32_t target, uint32_t bindingIndex, uint32_t wordIndex, int32_t count, float *params))_func)(target, bindingIndex, wordIndex, count, params);
}
void gllCall_glProgramEnvParameter4dARB(void *_func, uint32_t target, uint32_t index, double x, double y, double z, double w) {
	((void (*)(uint32_t target, uint32_t index, double x, double y, double z, double w))_func)(target, index, x, y, z, w);
}
void gllCall_glProgramEnvParameter4dvARB(void *_func, uint32_t target, uint32_t index, double *params) {
	((void (*)(uint32_t target, uint32_t index, double *params))_func)(target, index, params);
}
void gllCall_glProgramEnvParameter4fARB(void *_func, uint32_t target, uint32_t index, float x, float y, float z, float w) {
	((void (*)(uint32_t target, uint32_t index, float x, float y, float z, float w))_func)(target, index, x, y, z, w);
}
void gllCall_glProgramEnvParameter4fvARB(void *_func, uint32_t target, uint32_t index, float *params) {
	((void (*)(uint32_t target, uint32_t index, float *params))_func)(target, index, params);
}
void gllCall_glProgramEnvParameterI4iNV(void *_func, uint32_t target, uint32_t index, int32_t x, int32_t y, int32_t z, int32_t w) {
	((void (*)(uint32_t target, uint32_t index, int32_t x, int32_t y, int32_t z, int32_t w))_func)(target, index, x, y, z, w);
}
void gllCall_glProgramEnvParameterI4ivNV(void *_func, uint32_t target, uint32_t index, int32_t *params) {
	((void (*)(uint32_t target, uint32_t index, int32_t *params))_func)(target, index, params);
}
void gllCall_glProgramEnvParameterI4uiNV(void *_func, uint32_t target, uint32_t index, uint32_t x, uint32_t y, uint32_t z, uint32_t w) {
	((void (*)(uint32_t target, uint32_t index, uint32_t x, uint32_t y, uint32_t z, uint32_t w))_func)(target, index, x, y, z, w);
}
void gllCall_glProgramEnvParameterI4uivNV(void *_func, uint32_t target, uint32_t index, uint32_t *params) {
	((void (*)(uint32_t target, uint32_t index, uint32_t *params))_func)(target, index, params);
}
void gllCall_glProgramEnvParameters4fvEXT(void *_func, uint32_t target, uint32_t index, int32_t count, float *params) {
	((void (*)(uint32_t target, uint32_t index, int32_t count, float *params))_func)(target, index, count, params);
}
void gllCall_glProgramEnvParametersI4ivNV(void *_func, uint32_t target, uint32_t index, int32_t count, int32_t *params) {
	((void (*)(uint32_t target, uint32_t index, int32_t count, int32_t *params))_func)(target, index, count, params);
}
void gllCall_glProgramEnvParametersI4uivNV(void *_func, uint32_t target, uint32_t index, int32_t count, uint32_t *params) {
	((void (*)(uint32_t target, uint32_t index, int32_t count, uint32_t *params))_func)(target, index, count, params);
}
void gllCall_glProgramLocalParameter4dARB(void *_func, uint32_t target, uint32_t index, double x, double y, double z, double w) {
	((void (*)(uint32_t target, uint32_t index, double x, double y, double z, double w))_func)(target, index, x, y, z, w);
}
void gllCall_glProgramLocalParameter4dvARB(void *_func, uint32_t target, uint32_t index, double *params) {
	((void (*)(uint32_t target, uint32_t index, double *params))_func)(target, index, params);
}
void gllCall_glProgramLocalParameter4fARB(void *_func, uint32_t target, uint32_t index, float x, float y, float z, float w) {
	((void (*)(uint32_t target, uint32_t index, float x, float y, float z, float w))_func)(target, index, x, y, z, w);
}
void gllCall_glProgramLocalParameter4fvARB(void *_func, uint32_t target, uint32_t index, float *params) {
	((void (*)(uint32_t target, uint32_t index, float *params))_func)(target, index, params);
}
void gllCall_glProgramLocalParameterI4iNV(void *_func, uint32_t target, uint32_t index, int32_t x, int32_t y, int32_t z, int32_t w) {
	((void (*)(uint32_t target, uint32_t index, int32_t x, int32_t y, int32_t z, int32_t w))_func)(target, index, x, y, z, w);
}
void gllCall_glProgramLocalParameterI4ivNV(void *_func, uint32_t target, uint32_t index, int32_t *params) {
	((void (*)(uint32_t target, uint32_t index, int32_t *params))_func)(target, index, params);
}
void gllCall_glProgramLocalParameterI4uiNV(void *_func, uint32_t target, uint32_t index, uint32_t x, uint32_t y, uint32_t z, uint32_t w) {
	((void (*)(uint32_t target, uint32_t index, uint32_t x, uint32_t y, uint32_t z, uint32_t w))_func)(target, index, x, y, z, w);
}
void gllCall_glProgramLocalParameterI4uivNV(void *_func, uint32_t target, uint32_t index, uint32_t *params) {
	((void (*)(uint32_t target, uint32_t index, uint32_t *params))_func)(target, index, params);
}
void gllCall_glProgramLocalParameters4fvEXT(void *_func, uint32_t target, uint32_t index, int32_t count, float *params) {
	((void (*)(uint32_t target, uint32_t index, int32_t count, float *params))_func)(target, index, count, params);
}
void gllCall_glProgramLocalParametersI4ivNV(void *_func, uint32_t target, uint32_t index, int32_t count, int32_t *params) {
	((void (*)(uint32_t target, uint32_t index, int32_t count, int32_t *params))_func)(target, index, count, params);
}
void gllCall_glProgramLocalParametersI4uivNV(void *_func, uint32_t target, uint32_t index, int32_t count, uint32_t *params) {
	((void (*)(uint32_t target, uint32_t index, int32_t count, uint32_t *params))_func)(target, index, count, params);
}
void gllCall_glProgramNamedParameter4dNV(void *_func, uint32_t id, int32_t len, uint8_t *name, double x, double y, double z, double w) {
	((void (*)(uint32_t id, int32_t len, uint8_t *name, double x, double y, double z, double w))_func)(id, len, name, x, y, z, w);
}
void gllCall_glProgramNamedParameter4dvNV(void *_func, uint32_t id, int32_t len, uint8_t *name, double *v) {
	((void (*)(uint32_t id, int32_t len, uint8_t *name, double *v))_func)(id, len, name, v);
}
void gllCall_glProgramNamedParameter4fNV(void *_func, uint32_t id, int32_t len, uint8_t *name, float x, float y, float z, float w) {
	((void (*)(uint32_t id, int32_t len, uint8_t *name, float x, float y, float z, float w))_func)(id, len, name, x, y, z, w);
}
void gllCall_glProgramNamedParameter4fvNV(void *_func, uint32_t id, int32_t len, uint8_t *name, float *v) {
	((void (*)(uint32_t id, int32_t len, uint8_t *name, float *v))_func)(id, len, name, v);
}
void gllCall_glProgramParameter4dNV(void *_func, uint32_t target, uint32_t index, double x, double y, double z, double w) {
	((void (*)(uint32_t target, uint32_t index, double x, double y, double z, double w))_func)(target, index, x, y, z, w);
}
void gllCall_glProgramParameter4dvNV(void *_func, uint32_t target, uint32_t index, double *v) {
	((void (*)(uint32_t target, uint32_t index, double *v))_func)(target, index, v);
}
void gllCall_glProgramParameter4fNV(void *_func, uint32_t target, uint32_t index, float x, float y, float z, float w) {
	((void (*)(uint32_t target, uint32_t index, float x, float y, float z, float w))_func)(target, index, x, y, z, w);
}
void gllCall_glProgramParameter4fvNV(void *_func, uint32_t target, uint32_t index, float *v) {
	((void (*)(uint32_t target, uint32_t index, float *v))_func)(target, index, v);
}
void gllCall_glProgramParameteri(void *_func, uint32_t program, uint32_t pname, int32_t value) {
	((void (*)(uint32_t program, uint32_t pname, int32_t value))_func)(program, pname, value);
}
void gllCall_glProgramParameteriARB(void *_func, uint32_t program, uint32_t pname, int32_t value) {
	((void (*)(uint32_t program, uint32_t pname, int32_t value))_func)(program, pname, value);
}
void gllCall_glProgramParameteriEXT(void *_func, uint32_t program, uint32_t pname, int32_t value) {
	((void (*)(uint32_t program, uint32_t pname, int32_t value))_func)(program, pname, value);
}
void gllCall_glProgramParameters4dvNV(void *_func, uint32_t target, uint32_t index, int32_t count, double *v) {
	((void (*)(uint32_t target, uint32_t index, int32_t count, double *v))_func)(target, index, count, v);
}
void gllCall_glProgramParameters4fvNV(void *_func, uint32_t target, uint32_t index, int32_t count, float *v) {
	((void (*)(uint32_t target, uint32_t index, int32_t count, float *v))_func)(target, index, count, v);
}
void gllCall_glProgramPathFragmentInputGenNV(void *_func, uint32_t program, int32_t location, uint32_t genMode, int32_t components, float *coeffs) {
	((void (*)(uint32_t program, int32_t location, uint32_t genMode, int32_t components, float *coeffs))_func)(program, location, genMode, components, coeffs);
}
void gllCall_glProgramStringARB(void *_func, uint32_t target, uint32_t format, int32_t len, void *string) {
	((void (*)(uint32_t target, uint32_t format, int32_t len, void *string))_func)(target, format, len, string);
}
void gllCall_glProgramSubroutineParametersuivNV(void *_func, uint32_t target, int32_t count, uint32_t *params) {
	((void (*)(uint32_t target, int32_t count, uint32_t *params))_func)(target, count, params);
}
void gllCall_glProgramUniform1d(void *_func, uint32_t program, int32_t location, double v0) {
	((void (*)(uint32_t program, int32_t location, double v0))_func)(program, location, v0);
}
void gllCall_glProgramUniform1dEXT(void *_func, uint32_t program, int32_t location, double x) {
	((void (*)(uint32_t program, int32_t location, double x))_func)(program, location, x);
}
void gllCall_glProgramUniform1dv(void *_func, uint32_t program, int32_t location, int32_t count, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, double *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform1dvEXT(void *_func, uint32_t program, int32_t location, int32_t count, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, double *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform1f(void *_func, uint32_t program, int32_t location, float v0) {
	((void (*)(uint32_t program, int32_t location, float v0))_func)(program, location, v0);
}
void gllCall_glProgramUniform1fEXT(void *_func, uint32_t program, int32_t location, float v0) {
	((void (*)(uint32_t program, int32_t location, float v0))_func)(program, location, v0);
}
void gllCall_glProgramUniform1fv(void *_func, uint32_t program, int32_t location, int32_t count, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, float *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform1fvEXT(void *_func, uint32_t program, int32_t location, int32_t count, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, float *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform1i(void *_func, uint32_t program, int32_t location, int32_t v0) {
	((void (*)(uint32_t program, int32_t location, int32_t v0))_func)(program, location, v0);
}
void gllCall_glProgramUniform1i64ARB(void *_func, uint32_t program, int32_t location, int64_t x) {
	((void (*)(uint32_t program, int32_t location, int64_t x))_func)(program, location, x);
}
void gllCall_glProgramUniform1i64NV(void *_func, uint32_t program, int32_t location, int64_t x) {
	((void (*)(uint32_t program, int32_t location, int64_t x))_func)(program, location, x);
}
void gllCall_glProgramUniform1i64vARB(void *_func, uint32_t program, int32_t location, int32_t count, int64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform1i64vNV(void *_func, uint32_t program, int32_t location, int32_t count, int64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform1iEXT(void *_func, uint32_t program, int32_t location, int32_t v0) {
	((void (*)(uint32_t program, int32_t location, int32_t v0))_func)(program, location, v0);
}
void gllCall_glProgramUniform1iv(void *_func, uint32_t program, int32_t location, int32_t count, int32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform1ivEXT(void *_func, uint32_t program, int32_t location, int32_t count, int32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform1ui(void *_func, uint32_t program, int32_t location, uint32_t v0) {
	((void (*)(uint32_t program, int32_t location, uint32_t v0))_func)(program, location, v0);
}
void gllCall_glProgramUniform1ui64ARB(void *_func, uint32_t program, int32_t location, uint64_t x) {
	((void (*)(uint32_t program, int32_t location, uint64_t x))_func)(program, location, x);
}
void gllCall_glProgramUniform1ui64NV(void *_func, uint32_t program, int32_t location, uint64_t x) {
	((void (*)(uint32_t program, int32_t location, uint64_t x))_func)(program, location, x);
}
void gllCall_glProgramUniform1ui64vARB(void *_func, uint32_t program, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform1ui64vNV(void *_func, uint32_t program, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform1uiEXT(void *_func, uint32_t program, int32_t location, uint32_t v0) {
	((void (*)(uint32_t program, int32_t location, uint32_t v0))_func)(program, location, v0);
}
void gllCall_glProgramUniform1uiv(void *_func, uint32_t program, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform1uivEXT(void *_func, uint32_t program, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform2d(void *_func, uint32_t program, int32_t location, double v0, double v1) {
	((void (*)(uint32_t program, int32_t location, double v0, double v1))_func)(program, location, v0, v1);
}
void gllCall_glProgramUniform2dEXT(void *_func, uint32_t program, int32_t location, double x, double y) {
	((void (*)(uint32_t program, int32_t location, double x, double y))_func)(program, location, x, y);
}
void gllCall_glProgramUniform2dv(void *_func, uint32_t program, int32_t location, int32_t count, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, double *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform2dvEXT(void *_func, uint32_t program, int32_t location, int32_t count, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, double *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform2f(void *_func, uint32_t program, int32_t location, float v0, float v1) {
	((void (*)(uint32_t program, int32_t location, float v0, float v1))_func)(program, location, v0, v1);
}
void gllCall_glProgramUniform2fEXT(void *_func, uint32_t program, int32_t location, float v0, float v1) {
	((void (*)(uint32_t program, int32_t location, float v0, float v1))_func)(program, location, v0, v1);
}
void gllCall_glProgramUniform2fv(void *_func, uint32_t program, int32_t location, int32_t count, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, float *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform2fvEXT(void *_func, uint32_t program, int32_t location, int32_t count, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, float *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform2i(void *_func, uint32_t program, int32_t location, int32_t v0, int32_t v1) {
	((void (*)(uint32_t program, int32_t location, int32_t v0, int32_t v1))_func)(program, location, v0, v1);
}
void gllCall_glProgramUniform2i64ARB(void *_func, uint32_t program, int32_t location, int64_t x, int64_t y) {
	((void (*)(uint32_t program, int32_t location, int64_t x, int64_t y))_func)(program, location, x, y);
}
void gllCall_glProgramUniform2i64NV(void *_func, uint32_t program, int32_t location, int64_t x, int64_t y) {
	((void (*)(uint32_t program, int32_t location, int64_t x, int64_t y))_func)(program, location, x, y);
}
void gllCall_glProgramUniform2i64vARB(void *_func, uint32_t program, int32_t location, int32_t count, int64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform2i64vNV(void *_func, uint32_t program, int32_t location, int32_t count, int64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform2iEXT(void *_func, uint32_t program, int32_t location, int32_t v0, int32_t v1) {
	((void (*)(uint32_t program, int32_t location, int32_t v0, int32_t v1))_func)(program, location, v0, v1);
}
void gllCall_glProgramUniform2iv(void *_func, uint32_t program, int32_t location, int32_t count, int32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform2ivEXT(void *_func, uint32_t program, int32_t location, int32_t count, int32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform2ui(void *_func, uint32_t program, int32_t location, uint32_t v0, uint32_t v1) {
	((void (*)(uint32_t program, int32_t location, uint32_t v0, uint32_t v1))_func)(program, location, v0, v1);
}
void gllCall_glProgramUniform2ui64ARB(void *_func, uint32_t program, int32_t location, uint64_t x, uint64_t y) {
	((void (*)(uint32_t program, int32_t location, uint64_t x, uint64_t y))_func)(program, location, x, y);
}
void gllCall_glProgramUniform2ui64NV(void *_func, uint32_t program, int32_t location, uint64_t x, uint64_t y) {
	((void (*)(uint32_t program, int32_t location, uint64_t x, uint64_t y))_func)(program, location, x, y);
}
void gllCall_glProgramUniform2ui64vARB(void *_func, uint32_t program, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform2ui64vNV(void *_func, uint32_t program, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform2uiEXT(void *_func, uint32_t program, int32_t location, uint32_t v0, uint32_t v1) {
	((void (*)(uint32_t program, int32_t location, uint32_t v0, uint32_t v1))_func)(program, location, v0, v1);
}
void gllCall_glProgramUniform2uiv(void *_func, uint32_t program, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform2uivEXT(void *_func, uint32_t program, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform3d(void *_func, uint32_t program, int32_t location, double v0, double v1, double v2) {
	((void (*)(uint32_t program, int32_t location, double v0, double v1, double v2))_func)(program, location, v0, v1, v2);
}
void gllCall_glProgramUniform3dEXT(void *_func, uint32_t program, int32_t location, double x, double y, double z) {
	((void (*)(uint32_t program, int32_t location, double x, double y, double z))_func)(program, location, x, y, z);
}
void gllCall_glProgramUniform3dv(void *_func, uint32_t program, int32_t location, int32_t count, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, double *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform3dvEXT(void *_func, uint32_t program, int32_t location, int32_t count, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, double *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform3f(void *_func, uint32_t program, int32_t location, float v0, float v1, float v2) {
	((void (*)(uint32_t program, int32_t location, float v0, float v1, float v2))_func)(program, location, v0, v1, v2);
}
void gllCall_glProgramUniform3fEXT(void *_func, uint32_t program, int32_t location, float v0, float v1, float v2) {
	((void (*)(uint32_t program, int32_t location, float v0, float v1, float v2))_func)(program, location, v0, v1, v2);
}
void gllCall_glProgramUniform3fv(void *_func, uint32_t program, int32_t location, int32_t count, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, float *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform3fvEXT(void *_func, uint32_t program, int32_t location, int32_t count, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, float *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform3i(void *_func, uint32_t program, int32_t location, int32_t v0, int32_t v1, int32_t v2) {
	((void (*)(uint32_t program, int32_t location, int32_t v0, int32_t v1, int32_t v2))_func)(program, location, v0, v1, v2);
}
void gllCall_glProgramUniform3i64ARB(void *_func, uint32_t program, int32_t location, int64_t x, int64_t y, int64_t z) {
	((void (*)(uint32_t program, int32_t location, int64_t x, int64_t y, int64_t z))_func)(program, location, x, y, z);
}
void gllCall_glProgramUniform3i64NV(void *_func, uint32_t program, int32_t location, int64_t x, int64_t y, int64_t z) {
	((void (*)(uint32_t program, int32_t location, int64_t x, int64_t y, int64_t z))_func)(program, location, x, y, z);
}
void gllCall_glProgramUniform3i64vARB(void *_func, uint32_t program, int32_t location, int32_t count, int64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform3i64vNV(void *_func, uint32_t program, int32_t location, int32_t count, int64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform3iEXT(void *_func, uint32_t program, int32_t location, int32_t v0, int32_t v1, int32_t v2) {
	((void (*)(uint32_t program, int32_t location, int32_t v0, int32_t v1, int32_t v2))_func)(program, location, v0, v1, v2);
}
void gllCall_glProgramUniform3iv(void *_func, uint32_t program, int32_t location, int32_t count, int32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform3ivEXT(void *_func, uint32_t program, int32_t location, int32_t count, int32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform3ui(void *_func, uint32_t program, int32_t location, uint32_t v0, uint32_t v1, uint32_t v2) {
	((void (*)(uint32_t program, int32_t location, uint32_t v0, uint32_t v1, uint32_t v2))_func)(program, location, v0, v1, v2);
}
void gllCall_glProgramUniform3ui64ARB(void *_func, uint32_t program, int32_t location, uint64_t x, uint64_t y, uint64_t z) {
	((void (*)(uint32_t program, int32_t location, uint64_t x, uint64_t y, uint64_t z))_func)(program, location, x, y, z);
}
void gllCall_glProgramUniform3ui64NV(void *_func, uint32_t program, int32_t location, uint64_t x, uint64_t y, uint64_t z) {
	((void (*)(uint32_t program, int32_t location, uint64_t x, uint64_t y, uint64_t z))_func)(program, location, x, y, z);
}
void gllCall_glProgramUniform3ui64vARB(void *_func, uint32_t program, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform3ui64vNV(void *_func, uint32_t program, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform3uiEXT(void *_func, uint32_t program, int32_t location, uint32_t v0, uint32_t v1, uint32_t v2) {
	((void (*)(uint32_t program, int32_t location, uint32_t v0, uint32_t v1, uint32_t v2))_func)(program, location, v0, v1, v2);
}
void gllCall_glProgramUniform3uiv(void *_func, uint32_t program, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform3uivEXT(void *_func, uint32_t program, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform4d(void *_func, uint32_t program, int32_t location, double v0, double v1, double v2, double v3) {
	((void (*)(uint32_t program, int32_t location, double v0, double v1, double v2, double v3))_func)(program, location, v0, v1, v2, v3);
}
void gllCall_glProgramUniform4dEXT(void *_func, uint32_t program, int32_t location, double x, double y, double z, double w) {
	((void (*)(uint32_t program, int32_t location, double x, double y, double z, double w))_func)(program, location, x, y, z, w);
}
void gllCall_glProgramUniform4dv(void *_func, uint32_t program, int32_t location, int32_t count, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, double *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform4dvEXT(void *_func, uint32_t program, int32_t location, int32_t count, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, double *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform4f(void *_func, uint32_t program, int32_t location, float v0, float v1, float v2, float v3) {
	((void (*)(uint32_t program, int32_t location, float v0, float v1, float v2, float v3))_func)(program, location, v0, v1, v2, v3);
}
void gllCall_glProgramUniform4fEXT(void *_func, uint32_t program, int32_t location, float v0, float v1, float v2, float v3) {
	((void (*)(uint32_t program, int32_t location, float v0, float v1, float v2, float v3))_func)(program, location, v0, v1, v2, v3);
}
void gllCall_glProgramUniform4fv(void *_func, uint32_t program, int32_t location, int32_t count, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, float *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform4fvEXT(void *_func, uint32_t program, int32_t location, int32_t count, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, float *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform4i(void *_func, uint32_t program, int32_t location, int32_t v0, int32_t v1, int32_t v2, int32_t v3) {
	((void (*)(uint32_t program, int32_t location, int32_t v0, int32_t v1, int32_t v2, int32_t v3))_func)(program, location, v0, v1, v2, v3);
}
void gllCall_glProgramUniform4i64ARB(void *_func, uint32_t program, int32_t location, int64_t x, int64_t y, int64_t z, int64_t w) {
	((void (*)(uint32_t program, int32_t location, int64_t x, int64_t y, int64_t z, int64_t w))_func)(program, location, x, y, z, w);
}
void gllCall_glProgramUniform4i64NV(void *_func, uint32_t program, int32_t location, int64_t x, int64_t y, int64_t z, int64_t w) {
	((void (*)(uint32_t program, int32_t location, int64_t x, int64_t y, int64_t z, int64_t w))_func)(program, location, x, y, z, w);
}
void gllCall_glProgramUniform4i64vARB(void *_func, uint32_t program, int32_t location, int32_t count, int64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform4i64vNV(void *_func, uint32_t program, int32_t location, int32_t count, int64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform4iEXT(void *_func, uint32_t program, int32_t location, int32_t v0, int32_t v1, int32_t v2, int32_t v3) {
	((void (*)(uint32_t program, int32_t location, int32_t v0, int32_t v1, int32_t v2, int32_t v3))_func)(program, location, v0, v1, v2, v3);
}
void gllCall_glProgramUniform4iv(void *_func, uint32_t program, int32_t location, int32_t count, int32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform4ivEXT(void *_func, uint32_t program, int32_t location, int32_t count, int32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, int32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform4ui(void *_func, uint32_t program, int32_t location, uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3) {
	((void (*)(uint32_t program, int32_t location, uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3))_func)(program, location, v0, v1, v2, v3);
}
void gllCall_glProgramUniform4ui64ARB(void *_func, uint32_t program, int32_t location, uint64_t x, uint64_t y, uint64_t z, uint64_t w) {
	((void (*)(uint32_t program, int32_t location, uint64_t x, uint64_t y, uint64_t z, uint64_t w))_func)(program, location, x, y, z, w);
}
void gllCall_glProgramUniform4ui64NV(void *_func, uint32_t program, int32_t location, uint64_t x, uint64_t y, uint64_t z, uint64_t w) {
	((void (*)(uint32_t program, int32_t location, uint64_t x, uint64_t y, uint64_t z, uint64_t w))_func)(program, location, x, y, z, w);
}
void gllCall_glProgramUniform4ui64vARB(void *_func, uint32_t program, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform4ui64vNV(void *_func, uint32_t program, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform4uiEXT(void *_func, uint32_t program, int32_t location, uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3) {
	((void (*)(uint32_t program, int32_t location, uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3))_func)(program, location, v0, v1, v2, v3);
}
void gllCall_glProgramUniform4uiv(void *_func, uint32_t program, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniform4uivEXT(void *_func, uint32_t program, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint32_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramUniformHandleui64ARB(void *_func, uint32_t program, int32_t location, uint64_t value) {
	((void (*)(uint32_t program, int32_t location, uint64_t value))_func)(program, location, value);
}
void gllCall_glProgramUniformHandleui64IMG(void *_func, uint32_t program, int32_t location, uint64_t value) {
	((void (*)(uint32_t program, int32_t location, uint64_t value))_func)(program, location, value);
}
void gllCall_glProgramUniformHandleui64NV(void *_func, uint32_t program, int32_t location, uint64_t value) {
	((void (*)(uint32_t program, int32_t location, uint64_t value))_func)(program, location, value);
}
void gllCall_glProgramUniformHandleui64vARB(void *_func, uint32_t program, int32_t location, int32_t count, uint64_t *values) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint64_t *values))_func)(program, location, count, values);
}
void gllCall_glProgramUniformHandleui64vIMG(void *_func, uint32_t program, int32_t location, int32_t count, uint64_t *values) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint64_t *values))_func)(program, location, count, values);
}
void gllCall_glProgramUniformHandleui64vNV(void *_func, uint32_t program, int32_t location, int32_t count, uint64_t *values) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint64_t *values))_func)(program, location, count, values);
}
void gllCall_glProgramUniformMatrix2dv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix2dvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix2fv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix2fvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix2x3dv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix2x3dvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix2x3fv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix2x3fvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix2x4dv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix2x4dvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix2x4fv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix2x4fvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix3dv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix3dvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix3fv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix3fvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix3x2dv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix3x2dvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix3x2fv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix3x2fvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix3x4dv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix3x4dvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix3x4fv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix3x4fvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix4dv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix4dvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix4fv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix4fvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix4x2dv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix4x2dvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix4x2fv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix4x2fvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix4x3dv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix4x3dvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, double *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix4x3fv(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformMatrix4x3fvEXT(void *_func, uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, _Bool transpose, float *value))_func)(program, location, count, transpose, value);
}
void gllCall_glProgramUniformui64NV(void *_func, uint32_t program, int32_t location, uint64_t value) {
	((void (*)(uint32_t program, int32_t location, uint64_t value))_func)(program, location, value);
}
void gllCall_glProgramUniformui64vNV(void *_func, uint32_t program, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(uint32_t program, int32_t location, int32_t count, uint64_t *value))_func)(program, location, count, value);
}
void gllCall_glProgramVertexLimitNV(void *_func, uint32_t target, int32_t limit) {
	((void (*)(uint32_t target, int32_t limit))_func)(target, limit);
}
void gllCall_glProvokingVertex(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glProvokingVertexEXT(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glPushAttrib(void *_func, uint32_t mask) {
	((void (*)(uint32_t mask))_func)(mask);
}
void gllCall_glPushClientAttrib(void *_func, uint32_t mask) {
	((void (*)(uint32_t mask))_func)(mask);
}
void gllCall_glPushClientAttribDefaultEXT(void *_func, uint32_t mask) {
	((void (*)(uint32_t mask))_func)(mask);
}
void gllCall_glPushDebugGroup(void *_func, uint32_t source, uint32_t id, int32_t length, uint8_t *message) {
	((void (*)(uint32_t source, uint32_t id, int32_t length, uint8_t *message))_func)(source, id, length, message);
}
void gllCall_glPushDebugGroupKHR(void *_func, uint32_t source, uint32_t id, int32_t length, uint8_t *message) {
	((void (*)(uint32_t source, uint32_t id, int32_t length, uint8_t *message))_func)(source, id, length, message);
}
void gllCall_glPushGroupMarkerEXT(void *_func, int32_t length, uint8_t *marker) {
	((void (*)(int32_t length, uint8_t *marker))_func)(length, marker);
}
void gllCall_glPushMatrix(void *_func) {
	((void (*)())_func)();
}
void gllCall_glPushName(void *_func, uint32_t name) {
	((void (*)(uint32_t name))_func)(name);
}
void gllCall_glQueryCounter(void *_func, uint32_t id, uint32_t target) {
	((void (*)(uint32_t id, uint32_t target))_func)(id, target);
}
void gllCall_glQueryCounterEXT(void *_func, uint32_t id, uint32_t target) {
	((void (*)(uint32_t id, uint32_t target))_func)(id, target);
}
uint32_t gllCall_glQueryMatrixxOES(void *_func, int32_t *mantissa, int32_t *exponent) {
	return ((uint32_t (*)(int32_t *mantissa, int32_t *exponent))_func)(mantissa, exponent);
}
void gllCall_glQueryObjectParameteruiAMD(void *_func, uint32_t target, uint32_t id, uint32_t pname, uint32_t param) {
	((void (*)(uint32_t target, uint32_t id, uint32_t pname, uint32_t param))_func)(target, id, pname, param);
}
int32_t gllCall_glQueryResourceNV(void *_func, uint32_t queryType, int32_t tagId, uint32_t count, int32_t *buffer) {
	return ((int32_t (*)(uint32_t queryType, int32_t tagId, uint32_t count, int32_t *buffer))_func)(queryType, tagId, count, buffer);
}
void gllCall_glQueryResourceTagNV(void *_func, int32_t tagId, uint8_t *tagString) {
	((void (*)(int32_t tagId, uint8_t *tagString))_func)(tagId, tagString);
}
void gllCall_glRasterPos2d(void *_func, double x, double y) {
	((void (*)(double x, double y))_func)(x, y);
}
void gllCall_glRasterPos2dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glRasterPos2f(void *_func, float x, float y) {
	((void (*)(float x, float y))_func)(x, y);
}
void gllCall_glRasterPos2fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glRasterPos2i(void *_func, int32_t x, int32_t y) {
	((void (*)(int32_t x, int32_t y))_func)(x, y);
}
void gllCall_glRasterPos2iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glRasterPos2s(void *_func, int16_t x, int16_t y) {
	((void (*)(int16_t x, int16_t y))_func)(x, y);
}
void gllCall_glRasterPos2sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glRasterPos2xOES(void *_func, int32_t x, int32_t y) {
	((void (*)(int32_t x, int32_t y))_func)(x, y);
}
void gllCall_glRasterPos2xvOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glRasterPos3d(void *_func, double x, double y, double z) {
	((void (*)(double x, double y, double z))_func)(x, y, z);
}
void gllCall_glRasterPos3dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glRasterPos3f(void *_func, float x, float y, float z) {
	((void (*)(float x, float y, float z))_func)(x, y, z);
}
void gllCall_glRasterPos3fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glRasterPos3i(void *_func, int32_t x, int32_t y, int32_t z) {
	((void (*)(int32_t x, int32_t y, int32_t z))_func)(x, y, z);
}
void gllCall_glRasterPos3iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glRasterPos3s(void *_func, int16_t x, int16_t y, int16_t z) {
	((void (*)(int16_t x, int16_t y, int16_t z))_func)(x, y, z);
}
void gllCall_glRasterPos3sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glRasterPos3xOES(void *_func, int32_t x, int32_t y, int32_t z) {
	((void (*)(int32_t x, int32_t y, int32_t z))_func)(x, y, z);
}
void gllCall_glRasterPos3xvOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glRasterPos4d(void *_func, double x, double y, double z, double w) {
	((void (*)(double x, double y, double z, double w))_func)(x, y, z, w);
}
void gllCall_glRasterPos4dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glRasterPos4f(void *_func, float x, float y, float z, float w) {
	((void (*)(float x, float y, float z, float w))_func)(x, y, z, w);
}
void gllCall_glRasterPos4fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glRasterPos4i(void *_func, int32_t x, int32_t y, int32_t z, int32_t w) {
	((void (*)(int32_t x, int32_t y, int32_t z, int32_t w))_func)(x, y, z, w);
}
void gllCall_glRasterPos4iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glRasterPos4s(void *_func, int16_t x, int16_t y, int16_t z, int16_t w) {
	((void (*)(int16_t x, int16_t y, int16_t z, int16_t w))_func)(x, y, z, w);
}
void gllCall_glRasterPos4sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glRasterPos4xOES(void *_func, int32_t x, int32_t y, int32_t z, int32_t w) {
	((void (*)(int32_t x, int32_t y, int32_t z, int32_t w))_func)(x, y, z, w);
}
void gllCall_glRasterPos4xvOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glRasterSamplesEXT(void *_func, uint32_t samples, _Bool fixedsamplelocations) {
	((void (*)(uint32_t samples, _Bool fixedsamplelocations))_func)(samples, fixedsamplelocations);
}
void gllCall_glReadBuffer(void *_func, uint32_t src) {
	((void (*)(uint32_t src))_func)(src);
}
void gllCall_glReadBufferIndexedEXT(void *_func, uint32_t src, int32_t index) {
	((void (*)(uint32_t src, int32_t index))_func)(src, index);
}
void gllCall_glReadBufferNV(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glReadInstrumentsSGIX(void *_func, int32_t marker) {
	((void (*)(int32_t marker))_func)(marker);
}
void gllCall_glReadPixels(void *_func, int32_t x, int32_t y, int32_t width, int32_t height, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(int32_t x, int32_t y, int32_t width, int32_t height, uint32_t format, uint32_t type, void *pixels))_func)(x, y, width, height, format, type, pixels);
}
void gllCall_glReadnPixels(void *_func, int32_t x, int32_t y, int32_t width, int32_t height, uint32_t format, uint32_t type, int32_t bufSize, void *data) {
	((void (*)(int32_t x, int32_t y, int32_t width, int32_t height, uint32_t format, uint32_t type, int32_t bufSize, void *data))_func)(x, y, width, height, format, type, bufSize, data);
}
void gllCall_glReadnPixelsARB(void *_func, int32_t x, int32_t y, int32_t width, int32_t height, uint32_t format, uint32_t type, int32_t bufSize, void *data) {
	((void (*)(int32_t x, int32_t y, int32_t width, int32_t height, uint32_t format, uint32_t type, int32_t bufSize, void *data))_func)(x, y, width, height, format, type, bufSize, data);
}
void gllCall_glReadnPixelsEXT(void *_func, int32_t x, int32_t y, int32_t width, int32_t height, uint32_t format, uint32_t type, int32_t bufSize, void *data) {
	((void (*)(int32_t x, int32_t y, int32_t width, int32_t height, uint32_t format, uint32_t type, int32_t bufSize, void *data))_func)(x, y, width, height, format, type, bufSize, data);
}
void gllCall_glReadnPixelsKHR(void *_func, int32_t x, int32_t y, int32_t width, int32_t height, uint32_t format, uint32_t type, int32_t bufSize, void *data) {
	((void (*)(int32_t x, int32_t y, int32_t width, int32_t height, uint32_t format, uint32_t type, int32_t bufSize, void *data))_func)(x, y, width, height, format, type, bufSize, data);
}
_Bool gllCall_glReleaseKeyedMutexWin32EXT(void *_func, uint32_t memory, uint64_t key) {
	return ((_Bool (*)(uint32_t memory, uint64_t key))_func)(memory, key);
}
void gllCall_glRectd(void *_func, double x1, double y1, double x2, double y2) {
	((void (*)(double x1, double y1, double x2, double y2))_func)(x1, y1, x2, y2);
}
void gllCall_glRectdv(void *_func, double *v1, double *v2) {
	((void (*)(double *v1, double *v2))_func)(v1, v2);
}
void gllCall_glRectf(void *_func, float x1, float y1, float x2, float y2) {
	((void (*)(float x1, float y1, float x2, float y2))_func)(x1, y1, x2, y2);
}
void gllCall_glRectfv(void *_func, float *v1, float *v2) {
	((void (*)(float *v1, float *v2))_func)(v1, v2);
}
void gllCall_glRecti(void *_func, int32_t x1, int32_t y1, int32_t x2, int32_t y2) {
	((void (*)(int32_t x1, int32_t y1, int32_t x2, int32_t y2))_func)(x1, y1, x2, y2);
}
void gllCall_glRectiv(void *_func, int32_t *v1, int32_t *v2) {
	((void (*)(int32_t *v1, int32_t *v2))_func)(v1, v2);
}
void gllCall_glRects(void *_func, int16_t x1, int16_t y1, int16_t x2, int16_t y2) {
	((void (*)(int16_t x1, int16_t y1, int16_t x2, int16_t y2))_func)(x1, y1, x2, y2);
}
void gllCall_glRectsv(void *_func, int16_t *v1, int16_t *v2) {
	((void (*)(int16_t *v1, int16_t *v2))_func)(v1, v2);
}
void gllCall_glRectxOES(void *_func, int32_t x1, int32_t y1, int32_t x2, int32_t y2) {
	((void (*)(int32_t x1, int32_t y1, int32_t x2, int32_t y2))_func)(x1, y1, x2, y2);
}
void gllCall_glRectxvOES(void *_func, int32_t *v1, int32_t *v2) {
	((void (*)(int32_t *v1, int32_t *v2))_func)(v1, v2);
}
void gllCall_glReferencePlaneSGIX(void *_func, double *equation) {
	((void (*)(double *equation))_func)(equation);
}
void gllCall_glReleaseShaderCompiler(void *_func) {
	((void (*)())_func)();
}
void gllCall_glRenderGpuMaskNV(void *_func, uint32_t mask) {
	((void (*)(uint32_t mask))_func)(mask);
}
int32_t gllCall_glRenderMode(void *_func, uint32_t mode) {
	return ((int32_t (*)(uint32_t mode))_func)(mode);
}
void gllCall_glRenderbufferStorage(void *_func, uint32_t target, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t width, int32_t height))_func)(target, internalformat, width, height);
}
void gllCall_glRenderbufferStorageEXT(void *_func, uint32_t target, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t width, int32_t height))_func)(target, internalformat, width, height);
}
void gllCall_glRenderbufferStorageMultisample(void *_func, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height))_func)(target, samples, internalformat, width, height);
}
void gllCall_glRenderbufferStorageMultisampleANGLE(void *_func, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height))_func)(target, samples, internalformat, width, height);
}
void gllCall_glRenderbufferStorageMultisampleAPPLE(void *_func, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height))_func)(target, samples, internalformat, width, height);
}
void gllCall_glRenderbufferStorageMultisampleAdvancedAMD(void *_func, uint32_t target, int32_t samples, int32_t storageSamples, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t samples, int32_t storageSamples, uint32_t internalformat, int32_t width, int32_t height))_func)(target, samples, storageSamples, internalformat, width, height);
}
void gllCall_glRenderbufferStorageMultisampleCoverageNV(void *_func, uint32_t target, int32_t coverageSamples, int32_t colorSamples, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t coverageSamples, int32_t colorSamples, uint32_t internalformat, int32_t width, int32_t height))_func)(target, coverageSamples, colorSamples, internalformat, width, height);
}
void gllCall_glRenderbufferStorageMultisampleEXT(void *_func, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height))_func)(target, samples, internalformat, width, height);
}
void gllCall_glRenderbufferStorageMultisampleIMG(void *_func, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height))_func)(target, samples, internalformat, width, height);
}
void gllCall_glRenderbufferStorageMultisampleNV(void *_func, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height))_func)(target, samples, internalformat, width, height);
}
void gllCall_glRenderbufferStorageOES(void *_func, uint32_t target, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t width, int32_t height))_func)(target, internalformat, width, height);
}
void gllCall_glReplacementCodePointerSUN(void *_func, uint32_t type, int32_t stride, void **pointer) {
	((void (*)(uint32_t type, int32_t stride, void **pointer))_func)(type, stride, pointer);
}
void gllCall_glReplacementCodeubSUN(void *_func, uint8_t code) {
	((void (*)(uint8_t code))_func)(code);
}
void gllCall_glReplacementCodeubvSUN(void *_func, uint8_t *code) {
	((void (*)(uint8_t *code))_func)(code);
}
void gllCall_glReplacementCodeuiColor3fVertex3fSUN(void *_func, uint32_t rc, float r, float g, float b, float x, float y, float z) {
	((void (*)(uint32_t rc, float r, float g, float b, float x, float y, float z))_func)(rc, r, g, b, x, y, z);
}
void gllCall_glReplacementCodeuiColor3fVertex3fvSUN(void *_func, uint32_t *rc, float *c, float *v) {
	((void (*)(uint32_t *rc, float *c, float *v))_func)(rc, c, v);
}
void gllCall_glReplacementCodeuiColor4fNormal3fVertex3fSUN(void *_func, uint32_t rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) {
	((void (*)(uint32_t rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z))_func)(rc, r, g, b, a, nx, ny, nz, x, y, z);
}
void gllCall_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(void *_func, uint32_t *rc, float *c, float *n, float *v) {
	((void (*)(uint32_t *rc, float *c, float *n, float *v))_func)(rc, c, n, v);
}
void gllCall_glReplacementCodeuiColor4ubVertex3fSUN(void *_func, uint32_t rc, uint8_t r, uint8_t g, uint8_t b, uint8_t a, float x, float y, float z) {
	((void (*)(uint32_t rc, uint8_t r, uint8_t g, uint8_t b, uint8_t a, float x, float y, float z))_func)(rc, r, g, b, a, x, y, z);
}
void gllCall_glReplacementCodeuiColor4ubVertex3fvSUN(void *_func, uint32_t *rc, uint8_t *c, float *v) {
	((void (*)(uint32_t *rc, uint8_t *c, float *v))_func)(rc, c, v);
}
void gllCall_glReplacementCodeuiNormal3fVertex3fSUN(void *_func, uint32_t rc, float nx, float ny, float nz, float x, float y, float z) {
	((void (*)(uint32_t rc, float nx, float ny, float nz, float x, float y, float z))_func)(rc, nx, ny, nz, x, y, z);
}
void gllCall_glReplacementCodeuiNormal3fVertex3fvSUN(void *_func, uint32_t *rc, float *n, float *v) {
	((void (*)(uint32_t *rc, float *n, float *v))_func)(rc, n, v);
}
void gllCall_glReplacementCodeuiSUN(void *_func, uint32_t code) {
	((void (*)(uint32_t code))_func)(code);
}
void gllCall_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(void *_func, uint32_t rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) {
	((void (*)(uint32_t rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z))_func)(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
}
void gllCall_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(void *_func, uint32_t *rc, float *tc, float *c, float *n, float *v) {
	((void (*)(uint32_t *rc, float *tc, float *c, float *n, float *v))_func)(rc, tc, c, n, v);
}
void gllCall_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(void *_func, uint32_t rc, float s, float t, float nx, float ny, float nz, float x, float y, float z) {
	((void (*)(uint32_t rc, float s, float t, float nx, float ny, float nz, float x, float y, float z))_func)(rc, s, t, nx, ny, nz, x, y, z);
}
void gllCall_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(void *_func, uint32_t *rc, float *tc, float *n, float *v) {
	((void (*)(uint32_t *rc, float *tc, float *n, float *v))_func)(rc, tc, n, v);
}
void gllCall_glReplacementCodeuiTexCoord2fVertex3fSUN(void *_func, uint32_t rc, float s, float t, float x, float y, float z) {
	((void (*)(uint32_t rc, float s, float t, float x, float y, float z))_func)(rc, s, t, x, y, z);
}
void gllCall_glReplacementCodeuiTexCoord2fVertex3fvSUN(void *_func, uint32_t *rc, float *tc, float *v) {
	((void (*)(uint32_t *rc, float *tc, float *v))_func)(rc, tc, v);
}
void gllCall_glReplacementCodeuiVertex3fSUN(void *_func, uint32_t rc, float x, float y, float z) {
	((void (*)(uint32_t rc, float x, float y, float z))_func)(rc, x, y, z);
}
void gllCall_glReplacementCodeuiVertex3fvSUN(void *_func, uint32_t *rc, float *v) {
	((void (*)(uint32_t *rc, float *v))_func)(rc, v);
}
void gllCall_glReplacementCodeuivSUN(void *_func, uint32_t *code) {
	((void (*)(uint32_t *code))_func)(code);
}
void gllCall_glReplacementCodeusSUN(void *_func, uint16_t code) {
	((void (*)(uint16_t code))_func)(code);
}
void gllCall_glReplacementCodeusvSUN(void *_func, uint16_t *code) {
	((void (*)(uint16_t *code))_func)(code);
}
void gllCall_glRequestResidentProgramsNV(void *_func, int32_t n, uint32_t *programs) {
	((void (*)(int32_t n, uint32_t *programs))_func)(n, programs);
}
void gllCall_glResetHistogram(void *_func, uint32_t target) {
	((void (*)(uint32_t target))_func)(target);
}
void gllCall_glResetHistogramEXT(void *_func, uint32_t target) {
	((void (*)(uint32_t target))_func)(target);
}
void gllCall_glResetMemoryObjectParameterNV(void *_func, uint32_t memory, uint32_t pname) {
	((void (*)(uint32_t memory, uint32_t pname))_func)(memory, pname);
}
void gllCall_glResetMinmax(void *_func, uint32_t target) {
	((void (*)(uint32_t target))_func)(target);
}
void gllCall_glResetMinmaxEXT(void *_func, uint32_t target) {
	((void (*)(uint32_t target))_func)(target);
}
void gllCall_glResizeBuffersMESA(void *_func) {
	((void (*)())_func)();
}
void gllCall_glResolveDepthValuesNV(void *_func) {
	((void (*)())_func)();
}
void gllCall_glResolveMultisampleFramebufferAPPLE(void *_func) {
	((void (*)())_func)();
}
void gllCall_glResumeTransformFeedback(void *_func) {
	((void (*)())_func)();
}
void gllCall_glResumeTransformFeedbackNV(void *_func) {
	((void (*)())_func)();
}
void gllCall_glRotated(void *_func, double angle, double x, double y, double z) {
	((void (*)(double angle, double x, double y, double z))_func)(angle, x, y, z);
}
void gllCall_glRotatef(void *_func, float angle, float x, float y, float z) {
	((void (*)(float angle, float x, float y, float z))_func)(angle, x, y, z);
}
void gllCall_glRotatex(void *_func, int32_t angle, int32_t x, int32_t y, int32_t z) {
	((void (*)(int32_t angle, int32_t x, int32_t y, int32_t z))_func)(angle, x, y, z);
}
void gllCall_glRotatexOES(void *_func, int32_t angle, int32_t x, int32_t y, int32_t z) {
	((void (*)(int32_t angle, int32_t x, int32_t y, int32_t z))_func)(angle, x, y, z);
}
void gllCall_glSampleCoverage(void *_func, float value, _Bool invert) {
	((void (*)(float value, _Bool invert))_func)(value, invert);
}
void gllCall_glSampleCoverageARB(void *_func, float value, _Bool invert) {
	((void (*)(float value, _Bool invert))_func)(value, invert);
}
void gllCall_glSampleCoveragex(void *_func, int32_t value, _Bool invert) {
	((void (*)(int32_t value, _Bool invert))_func)(value, invert);
}
void gllCall_glSampleCoveragexOES(void *_func, int32_t value, _Bool invert) {
	((void (*)(int32_t value, _Bool invert))_func)(value, invert);
}
void gllCall_glSampleMapATI(void *_func, uint32_t dst, uint32_t interp, uint32_t swizzle) {
	((void (*)(uint32_t dst, uint32_t interp, uint32_t swizzle))_func)(dst, interp, swizzle);
}
void gllCall_glSampleMaskEXT(void *_func, float value, _Bool invert) {
	((void (*)(float value, _Bool invert))_func)(value, invert);
}
void gllCall_glSampleMaskIndexedNV(void *_func, uint32_t index, uint32_t mask) {
	((void (*)(uint32_t index, uint32_t mask))_func)(index, mask);
}
void gllCall_glSampleMaskSGIS(void *_func, float value, _Bool invert) {
	((void (*)(float value, _Bool invert))_func)(value, invert);
}
void gllCall_glSampleMaski(void *_func, uint32_t maskNumber, uint32_t mask) {
	((void (*)(uint32_t maskNumber, uint32_t mask))_func)(maskNumber, mask);
}
void gllCall_glSamplePatternEXT(void *_func, uint32_t pattern) {
	((void (*)(uint32_t pattern))_func)(pattern);
}
void gllCall_glSamplePatternSGIS(void *_func, uint32_t pattern) {
	((void (*)(uint32_t pattern))_func)(pattern);
}
void gllCall_glSamplerParameterIiv(void *_func, uint32_t sampler, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t sampler, uint32_t pname, int32_t *param))_func)(sampler, pname, param);
}
void gllCall_glSamplerParameterIivEXT(void *_func, uint32_t sampler, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t sampler, uint32_t pname, int32_t *param))_func)(sampler, pname, param);
}
void gllCall_glSamplerParameterIivOES(void *_func, uint32_t sampler, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t sampler, uint32_t pname, int32_t *param))_func)(sampler, pname, param);
}
void gllCall_glSamplerParameterIuiv(void *_func, uint32_t sampler, uint32_t pname, uint32_t *param) {
	((void (*)(uint32_t sampler, uint32_t pname, uint32_t *param))_func)(sampler, pname, param);
}
void gllCall_glSamplerParameterIuivEXT(void *_func, uint32_t sampler, uint32_t pname, uint32_t *param) {
	((void (*)(uint32_t sampler, uint32_t pname, uint32_t *param))_func)(sampler, pname, param);
}
void gllCall_glSamplerParameterIuivOES(void *_func, uint32_t sampler, uint32_t pname, uint32_t *param) {
	((void (*)(uint32_t sampler, uint32_t pname, uint32_t *param))_func)(sampler, pname, param);
}
void gllCall_glSamplerParameterf(void *_func, uint32_t sampler, uint32_t pname, float param) {
	((void (*)(uint32_t sampler, uint32_t pname, float param))_func)(sampler, pname, param);
}
void gllCall_glSamplerParameterfv(void *_func, uint32_t sampler, uint32_t pname, float *param) {
	((void (*)(uint32_t sampler, uint32_t pname, float *param))_func)(sampler, pname, param);
}
void gllCall_glSamplerParameteri(void *_func, uint32_t sampler, uint32_t pname, int32_t param) {
	((void (*)(uint32_t sampler, uint32_t pname, int32_t param))_func)(sampler, pname, param);
}
void gllCall_glSamplerParameteriv(void *_func, uint32_t sampler, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t sampler, uint32_t pname, int32_t *param))_func)(sampler, pname, param);
}
void gllCall_glScaled(void *_func, double x, double y, double z) {
	((void (*)(double x, double y, double z))_func)(x, y, z);
}
void gllCall_glScalef(void *_func, float x, float y, float z) {
	((void (*)(float x, float y, float z))_func)(x, y, z);
}
void gllCall_glScalex(void *_func, int32_t x, int32_t y, int32_t z) {
	((void (*)(int32_t x, int32_t y, int32_t z))_func)(x, y, z);
}
void gllCall_glScalexOES(void *_func, int32_t x, int32_t y, int32_t z) {
	((void (*)(int32_t x, int32_t y, int32_t z))_func)(x, y, z);
}
void gllCall_glScissor(void *_func, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(int32_t x, int32_t y, int32_t width, int32_t height))_func)(x, y, width, height);
}
void gllCall_glScissorArrayv(void *_func, uint32_t first, int32_t count, int32_t *v) {
	((void (*)(uint32_t first, int32_t count, int32_t *v))_func)(first, count, v);
}
void gllCall_glScissorArrayvNV(void *_func, uint32_t first, int32_t count, int32_t *v) {
	((void (*)(uint32_t first, int32_t count, int32_t *v))_func)(first, count, v);
}
void gllCall_glScissorArrayvOES(void *_func, uint32_t first, int32_t count, int32_t *v) {
	((void (*)(uint32_t first, int32_t count, int32_t *v))_func)(first, count, v);
}
void gllCall_glScissorExclusiveArrayvNV(void *_func, uint32_t first, int32_t count, int32_t *v) {
	((void (*)(uint32_t first, int32_t count, int32_t *v))_func)(first, count, v);
}
void gllCall_glScissorExclusiveNV(void *_func, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(int32_t x, int32_t y, int32_t width, int32_t height))_func)(x, y, width, height);
}
void gllCall_glScissorIndexed(void *_func, uint32_t index, int32_t left, int32_t bottom, int32_t width, int32_t height) {
	((void (*)(uint32_t index, int32_t left, int32_t bottom, int32_t width, int32_t height))_func)(index, left, bottom, width, height);
}
void gllCall_glScissorIndexedNV(void *_func, uint32_t index, int32_t left, int32_t bottom, int32_t width, int32_t height) {
	((void (*)(uint32_t index, int32_t left, int32_t bottom, int32_t width, int32_t height))_func)(index, left, bottom, width, height);
}
void gllCall_glScissorIndexedOES(void *_func, uint32_t index, int32_t left, int32_t bottom, int32_t width, int32_t height) {
	((void (*)(uint32_t index, int32_t left, int32_t bottom, int32_t width, int32_t height))_func)(index, left, bottom, width, height);
}
void gllCall_glScissorIndexedv(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glScissorIndexedvNV(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glScissorIndexedvOES(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glSecondaryColor3b(void *_func, int8_t red, int8_t green, int8_t blue) {
	((void (*)(int8_t red, int8_t green, int8_t blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3bEXT(void *_func, int8_t red, int8_t green, int8_t blue) {
	((void (*)(int8_t red, int8_t green, int8_t blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3bv(void *_func, int8_t *v) {
	((void (*)(int8_t *v))_func)(v);
}
void gllCall_glSecondaryColor3bvEXT(void *_func, int8_t *v) {
	((void (*)(int8_t *v))_func)(v);
}
void gllCall_glSecondaryColor3d(void *_func, double red, double green, double blue) {
	((void (*)(double red, double green, double blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3dEXT(void *_func, double red, double green, double blue) {
	((void (*)(double red, double green, double blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glSecondaryColor3dvEXT(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glSecondaryColor3f(void *_func, float red, float green, float blue) {
	((void (*)(float red, float green, float blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3fEXT(void *_func, float red, float green, float blue) {
	((void (*)(float red, float green, float blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glSecondaryColor3fvEXT(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glSecondaryColor3hNV(void *_func, uint16_t red, uint16_t green, uint16_t blue) {
	((void (*)(uint16_t red, uint16_t green, uint16_t blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3hvNV(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glSecondaryColor3i(void *_func, int32_t red, int32_t green, int32_t blue) {
	((void (*)(int32_t red, int32_t green, int32_t blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3iEXT(void *_func, int32_t red, int32_t green, int32_t blue) {
	((void (*)(int32_t red, int32_t green, int32_t blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glSecondaryColor3ivEXT(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glSecondaryColor3s(void *_func, int16_t red, int16_t green, int16_t blue) {
	((void (*)(int16_t red, int16_t green, int16_t blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3sEXT(void *_func, int16_t red, int16_t green, int16_t blue) {
	((void (*)(int16_t red, int16_t green, int16_t blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glSecondaryColor3svEXT(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glSecondaryColor3ub(void *_func, uint8_t red, uint8_t green, uint8_t blue) {
	((void (*)(uint8_t red, uint8_t green, uint8_t blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3ubEXT(void *_func, uint8_t red, uint8_t green, uint8_t blue) {
	((void (*)(uint8_t red, uint8_t green, uint8_t blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3ubv(void *_func, uint8_t *v) {
	((void (*)(uint8_t *v))_func)(v);
}
void gllCall_glSecondaryColor3ubvEXT(void *_func, uint8_t *v) {
	((void (*)(uint8_t *v))_func)(v);
}
void gllCall_glSecondaryColor3ui(void *_func, uint32_t red, uint32_t green, uint32_t blue) {
	((void (*)(uint32_t red, uint32_t green, uint32_t blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3uiEXT(void *_func, uint32_t red, uint32_t green, uint32_t blue) {
	((void (*)(uint32_t red, uint32_t green, uint32_t blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3uiv(void *_func, uint32_t *v) {
	((void (*)(uint32_t *v))_func)(v);
}
void gllCall_glSecondaryColor3uivEXT(void *_func, uint32_t *v) {
	((void (*)(uint32_t *v))_func)(v);
}
void gllCall_glSecondaryColor3us(void *_func, uint16_t red, uint16_t green, uint16_t blue) {
	((void (*)(uint16_t red, uint16_t green, uint16_t blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3usEXT(void *_func, uint16_t red, uint16_t green, uint16_t blue) {
	((void (*)(uint16_t red, uint16_t green, uint16_t blue))_func)(red, green, blue);
}
void gllCall_glSecondaryColor3usv(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glSecondaryColor3usvEXT(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glSecondaryColorFormatNV(void *_func, int32_t size, uint32_t type, int32_t stride) {
	((void (*)(int32_t size, uint32_t type, int32_t stride))_func)(size, type, stride);
}
void gllCall_glSecondaryColorP3ui(void *_func, uint32_t type, uint32_t color) {
	((void (*)(uint32_t type, uint32_t color))_func)(type, color);
}
void gllCall_glSecondaryColorP3uiv(void *_func, uint32_t type, uint32_t *color) {
	((void (*)(uint32_t type, uint32_t *color))_func)(type, color);
}
void gllCall_glSecondaryColorPointer(void *_func, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(size, type, stride, pointer);
}
void gllCall_glSecondaryColorPointerEXT(void *_func, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(size, type, stride, pointer);
}
void gllCall_glSecondaryColorPointerListIBM(void *_func, int32_t size, uint32_t type, int32_t stride, void **pointer, int32_t ptrstride) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, void **pointer, int32_t ptrstride))_func)(size, type, stride, pointer, ptrstride);
}
void gllCall_glSelectBuffer(void *_func, int32_t size, uint32_t *buffer) {
	((void (*)(int32_t size, uint32_t *buffer))_func)(size, buffer);
}
void gllCall_glSelectPerfMonitorCountersAMD(void *_func, uint32_t monitor, _Bool enable, uint32_t group, int32_t numCounters, uint32_t *counterList) {
	((void (*)(uint32_t monitor, _Bool enable, uint32_t group, int32_t numCounters, uint32_t *counterList))_func)(monitor, enable, group, numCounters, counterList);
}
void gllCall_glSemaphoreParameterivNV(void *_func, uint32_t semaphore, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t semaphore, uint32_t pname, int32_t *params))_func)(semaphore, pname, params);
}
void gllCall_glSemaphoreParameterui64vEXT(void *_func, uint32_t semaphore, uint32_t pname, uint64_t *params) {
	((void (*)(uint32_t semaphore, uint32_t pname, uint64_t *params))_func)(semaphore, pname, params);
}
void gllCall_glSeparableFilter2D(void *_func, uint32_t target, uint32_t internalformat, int32_t width, int32_t height, uint32_t format, uint32_t type, void *row, void *column) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t width, int32_t height, uint32_t format, uint32_t type, void *row, void *column))_func)(target, internalformat, width, height, format, type, row, column);
}
void gllCall_glSeparableFilter2DEXT(void *_func, uint32_t target, uint32_t internalformat, int32_t width, int32_t height, uint32_t format, uint32_t type, void *row, void *column) {
	((void (*)(uint32_t target, uint32_t internalformat, int32_t width, int32_t height, uint32_t format, uint32_t type, void *row, void *column))_func)(target, internalformat, width, height, format, type, row, column);
}
void gllCall_glSetFenceAPPLE(void *_func, uint32_t fence) {
	((void (*)(uint32_t fence))_func)(fence);
}
void gllCall_glSetFenceNV(void *_func, uint32_t fence, uint32_t condition) {
	((void (*)(uint32_t fence, uint32_t condition))_func)(fence, condition);
}
void gllCall_glSetFragmentShaderConstantATI(void *_func, uint32_t dst, float *value) {
	((void (*)(uint32_t dst, float *value))_func)(dst, value);
}
void gllCall_glSetInvariantEXT(void *_func, uint32_t id, uint32_t type, void *addr) {
	((void (*)(uint32_t id, uint32_t type, void *addr))_func)(id, type, addr);
}
void gllCall_glSetLocalConstantEXT(void *_func, uint32_t id, uint32_t type, void *addr) {
	((void (*)(uint32_t id, uint32_t type, void *addr))_func)(id, type, addr);
}
void gllCall_glSetMultisamplefvAMD(void *_func, uint32_t pname, uint32_t index, float *val) {
	((void (*)(uint32_t pname, uint32_t index, float *val))_func)(pname, index, val);
}
void gllCall_glShadeModel(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glShaderBinary(void *_func, int32_t count, uint32_t *shaders, uint32_t binaryFormat, void *binary, int32_t length) {
	((void (*)(int32_t count, uint32_t *shaders, uint32_t binaryFormat, void *binary, int32_t length))_func)(count, shaders, binaryFormat, binary, length);
}
void gllCall_glShaderOp1EXT(void *_func, uint32_t op, uint32_t res, uint32_t arg1) {
	((void (*)(uint32_t op, uint32_t res, uint32_t arg1))_func)(op, res, arg1);
}
void gllCall_glShaderOp2EXT(void *_func, uint32_t op, uint32_t res, uint32_t arg1, uint32_t arg2) {
	((void (*)(uint32_t op, uint32_t res, uint32_t arg1, uint32_t arg2))_func)(op, res, arg1, arg2);
}
void gllCall_glShaderOp3EXT(void *_func, uint32_t op, uint32_t res, uint32_t arg1, uint32_t arg2, uint32_t arg3) {
	((void (*)(uint32_t op, uint32_t res, uint32_t arg1, uint32_t arg2, uint32_t arg3))_func)(op, res, arg1, arg2, arg3);
}
void gllCall_glShaderSource(void *_func, uint32_t shader, int32_t count, uint8_t **string, int32_t *length) {
	((void (*)(uint32_t shader, int32_t count, uint8_t **string, int32_t *length))_func)(shader, count, string, length);
}
void gllCall_glShaderSourceARB(void *_func, GLhandleARB shaderObj, int32_t count, uint8_t **string, int32_t *length) {
	((void (*)(GLhandleARB shaderObj, int32_t count, uint8_t **string, int32_t *length))_func)(shaderObj, count, string, length);
}
void gllCall_glShaderStorageBlockBinding(void *_func, uint32_t program, uint32_t storageBlockIndex, uint32_t storageBlockBinding) {
	((void (*)(uint32_t program, uint32_t storageBlockIndex, uint32_t storageBlockBinding))_func)(program, storageBlockIndex, storageBlockBinding);
}
void gllCall_glShadingRateImageBarrierNV(void *_func, _Bool synchronize) {
	((void (*)(_Bool synchronize))_func)(synchronize);
}
void gllCall_glShadingRateQCOM(void *_func, uint32_t rate) {
	((void (*)(uint32_t rate))_func)(rate);
}
void gllCall_glShadingRateImagePaletteNV(void *_func, uint32_t viewport, uint32_t first, int32_t count, uint32_t *rates) {
	((void (*)(uint32_t viewport, uint32_t first, int32_t count, uint32_t *rates))_func)(viewport, first, count, rates);
}
void gllCall_glShadingRateSampleOrderNV(void *_func, uint32_t order) {
	((void (*)(uint32_t order))_func)(order);
}
void gllCall_glShadingRateSampleOrderCustomNV(void *_func, uint32_t rate, uint32_t samples, int32_t *locations) {
	((void (*)(uint32_t rate, uint32_t samples, int32_t *locations))_func)(rate, samples, locations);
}
void gllCall_glSharpenTexFuncSGIS(void *_func, uint32_t target, int32_t n, float *points) {
	((void (*)(uint32_t target, int32_t n, float *points))_func)(target, n, points);
}
void gllCall_glSignalSemaphoreEXT(void *_func, uint32_t semaphore, uint32_t numBufferBarriers, uint32_t *buffers, uint32_t numTextureBarriers, uint32_t *textures, uint32_t *dstLayouts) {
	((void (*)(uint32_t semaphore, uint32_t numBufferBarriers, uint32_t *buffers, uint32_t numTextureBarriers, uint32_t *textures, uint32_t *dstLayouts))_func)(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
}
void gllCall_glSignalSemaphoreui64NVX(void *_func, uint32_t signalGpu, int32_t fenceObjectCount, uint32_t *semaphoreArray, uint64_t *fenceValueArray) {
	((void (*)(uint32_t signalGpu, int32_t fenceObjectCount, uint32_t *semaphoreArray, uint64_t *fenceValueArray))_func)(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
}
void gllCall_glSpecializeShader(void *_func, uint32_t shader, uint8_t *pEntryPoint, uint32_t numSpecializationConstants, uint32_t *pConstantIndex, uint32_t *pConstantValue) {
	((void (*)(uint32_t shader, uint8_t *pEntryPoint, uint32_t numSpecializationConstants, uint32_t *pConstantIndex, uint32_t *pConstantValue))_func)(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
}
void gllCall_glSpecializeShaderARB(void *_func, uint32_t shader, uint8_t *pEntryPoint, uint32_t numSpecializationConstants, uint32_t *pConstantIndex, uint32_t *pConstantValue) {
	((void (*)(uint32_t shader, uint8_t *pEntryPoint, uint32_t numSpecializationConstants, uint32_t *pConstantIndex, uint32_t *pConstantValue))_func)(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
}
void gllCall_glSpriteParameterfSGIX(void *_func, uint32_t pname, float param) {
	((void (*)(uint32_t pname, float param))_func)(pname, param);
}
void gllCall_glSpriteParameterfvSGIX(void *_func, uint32_t pname, float *params) {
	((void (*)(uint32_t pname, float *params))_func)(pname, params);
}
void gllCall_glSpriteParameteriSGIX(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glSpriteParameterivSGIX(void *_func, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t pname, int32_t *params))_func)(pname, params);
}
void gllCall_glStartInstrumentsSGIX(void *_func) {
	((void (*)())_func)();
}
void gllCall_glStartTilingQCOM(void *_func, uint32_t x, uint32_t y, uint32_t width, uint32_t height, uint32_t preserveMask) {
	((void (*)(uint32_t x, uint32_t y, uint32_t width, uint32_t height, uint32_t preserveMask))_func)(x, y, width, height, preserveMask);
}
void gllCall_glStateCaptureNV(void *_func, uint32_t state, uint32_t mode) {
	((void (*)(uint32_t state, uint32_t mode))_func)(state, mode);
}
void gllCall_glStencilClearTagEXT(void *_func, int32_t stencilTagBits, uint32_t stencilClearTag) {
	((void (*)(int32_t stencilTagBits, uint32_t stencilClearTag))_func)(stencilTagBits, stencilClearTag);
}
void gllCall_glStencilFillPathInstancedNV(void *_func, int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, uint32_t fillMode, uint32_t mask, uint32_t transformType, float *transformValues) {
	((void (*)(int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, uint32_t fillMode, uint32_t mask, uint32_t transformType, float *transformValues))_func)(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
}
void gllCall_glStencilFillPathNV(void *_func, uint32_t path, uint32_t fillMode, uint32_t mask) {
	((void (*)(uint32_t path, uint32_t fillMode, uint32_t mask))_func)(path, fillMode, mask);
}
void gllCall_glStencilFunc(void *_func, uint32_t func, int32_t ref, uint32_t mask) {
	((void (*)(uint32_t func, int32_t ref, uint32_t mask))_func)(func, ref, mask);
}
void gllCall_glStencilFuncSeparate(void *_func, uint32_t face, uint32_t func, int32_t ref, uint32_t mask) {
	((void (*)(uint32_t face, uint32_t func, int32_t ref, uint32_t mask))_func)(face, func, ref, mask);
}
void gllCall_glStencilFuncSeparateATI(void *_func, uint32_t frontfunc, uint32_t backfunc, int32_t ref, uint32_t mask) {
	((void (*)(uint32_t frontfunc, uint32_t backfunc, int32_t ref, uint32_t mask))_func)(frontfunc, backfunc, ref, mask);
}
void gllCall_glStencilMask(void *_func, uint32_t mask) {
	((void (*)(uint32_t mask))_func)(mask);
}
void gllCall_glStencilMaskSeparate(void *_func, uint32_t face, uint32_t mask) {
	((void (*)(uint32_t face, uint32_t mask))_func)(face, mask);
}
void gllCall_glStencilOp(void *_func, uint32_t fail, uint32_t zfail, uint32_t zpass) {
	((void (*)(uint32_t fail, uint32_t zfail, uint32_t zpass))_func)(fail, zfail, zpass);
}
void gllCall_glStencilOpSeparate(void *_func, uint32_t face, uint32_t sfail, uint32_t dpfail, uint32_t dppass) {
	((void (*)(uint32_t face, uint32_t sfail, uint32_t dpfail, uint32_t dppass))_func)(face, sfail, dpfail, dppass);
}
void gllCall_glStencilOpSeparateATI(void *_func, uint32_t face, uint32_t sfail, uint32_t dpfail, uint32_t dppass) {
	((void (*)(uint32_t face, uint32_t sfail, uint32_t dpfail, uint32_t dppass))_func)(face, sfail, dpfail, dppass);
}
void gllCall_glStencilOpValueAMD(void *_func, uint32_t face, uint32_t value) {
	((void (*)(uint32_t face, uint32_t value))_func)(face, value);
}
void gllCall_glStencilStrokePathInstancedNV(void *_func, int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, int32_t reference, uint32_t mask, uint32_t transformType, float *transformValues) {
	((void (*)(int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, int32_t reference, uint32_t mask, uint32_t transformType, float *transformValues))_func)(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
}
void gllCall_glStencilStrokePathNV(void *_func, uint32_t path, int32_t reference, uint32_t mask) {
	((void (*)(uint32_t path, int32_t reference, uint32_t mask))_func)(path, reference, mask);
}
void gllCall_glStencilThenCoverFillPathInstancedNV(void *_func, int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, uint32_t fillMode, uint32_t mask, uint32_t coverMode, uint32_t transformType, float *transformValues) {
	((void (*)(int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, uint32_t fillMode, uint32_t mask, uint32_t coverMode, uint32_t transformType, float *transformValues))_func)(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
}
void gllCall_glStencilThenCoverFillPathNV(void *_func, uint32_t path, uint32_t fillMode, uint32_t mask, uint32_t coverMode) {
	((void (*)(uint32_t path, uint32_t fillMode, uint32_t mask, uint32_t coverMode))_func)(path, fillMode, mask, coverMode);
}
void gllCall_glStencilThenCoverStrokePathInstancedNV(void *_func, int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, int32_t reference, uint32_t mask, uint32_t coverMode, uint32_t transformType, float *transformValues) {
	((void (*)(int32_t numPaths, uint32_t pathNameType, void *paths, uint32_t pathBase, int32_t reference, uint32_t mask, uint32_t coverMode, uint32_t transformType, float *transformValues))_func)(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
}
void gllCall_glStencilThenCoverStrokePathNV(void *_func, uint32_t path, int32_t reference, uint32_t mask, uint32_t coverMode) {
	((void (*)(uint32_t path, int32_t reference, uint32_t mask, uint32_t coverMode))_func)(path, reference, mask, coverMode);
}
void gllCall_glStopInstrumentsSGIX(void *_func, int32_t marker) {
	((void (*)(int32_t marker))_func)(marker);
}
void gllCall_glStringMarkerGREMEDY(void *_func, int32_t len, void *string) {
	((void (*)(int32_t len, void *string))_func)(len, string);
}
void gllCall_glSubpixelPrecisionBiasNV(void *_func, uint32_t xbits, uint32_t ybits) {
	((void (*)(uint32_t xbits, uint32_t ybits))_func)(xbits, ybits);
}
void gllCall_glSwizzleEXT(void *_func, uint32_t res, uint32_t in, uint32_t outX, uint32_t outY, uint32_t outZ, uint32_t outW) {
	((void (*)(uint32_t res, uint32_t in, uint32_t outX, uint32_t outY, uint32_t outZ, uint32_t outW))_func)(res, in, outX, outY, outZ, outW);
}
void gllCall_glSyncTextureINTEL(void *_func, uint32_t texture) {
	((void (*)(uint32_t texture))_func)(texture);
}
void gllCall_glTagSampleBufferSGIX(void *_func) {
	((void (*)())_func)();
}
void gllCall_glTangent3bEXT(void *_func, int8_t tx, int8_t ty, int8_t tz) {
	((void (*)(int8_t tx, int8_t ty, int8_t tz))_func)(tx, ty, tz);
}
void gllCall_glTangent3bvEXT(void *_func, int8_t *v) {
	((void (*)(int8_t *v))_func)(v);
}
void gllCall_glTangent3dEXT(void *_func, double tx, double ty, double tz) {
	((void (*)(double tx, double ty, double tz))_func)(tx, ty, tz);
}
void gllCall_glTangent3dvEXT(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glTangent3fEXT(void *_func, float tx, float ty, float tz) {
	((void (*)(float tx, float ty, float tz))_func)(tx, ty, tz);
}
void gllCall_glTangent3fvEXT(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glTangent3iEXT(void *_func, int32_t tx, int32_t ty, int32_t tz) {
	((void (*)(int32_t tx, int32_t ty, int32_t tz))_func)(tx, ty, tz);
}
void gllCall_glTangent3ivEXT(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glTangent3sEXT(void *_func, int16_t tx, int16_t ty, int16_t tz) {
	((void (*)(int16_t tx, int16_t ty, int16_t tz))_func)(tx, ty, tz);
}
void gllCall_glTangent3svEXT(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glTangentPointerEXT(void *_func, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(uint32_t type, int32_t stride, void *pointer))_func)(type, stride, pointer);
}
void gllCall_glTbufferMask3DFX(void *_func, uint32_t mask) {
	((void (*)(uint32_t mask))_func)(mask);
}
void gllCall_glTessellationFactorAMD(void *_func, float factor) {
	((void (*)(float factor))_func)(factor);
}
void gllCall_glTessellationModeAMD(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
_Bool gllCall_glTestFenceAPPLE(void *_func, uint32_t fence) {
	return ((_Bool (*)(uint32_t fence))_func)(fence);
}
_Bool gllCall_glTestFenceNV(void *_func, uint32_t fence) {
	return ((_Bool (*)(uint32_t fence))_func)(fence);
}
_Bool gllCall_glTestObjectAPPLE(void *_func, uint32_t object, uint32_t name) {
	return ((_Bool (*)(uint32_t object, uint32_t name))_func)(object, name);
}
void gllCall_glTexAttachMemoryNV(void *_func, uint32_t target, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t target, uint32_t memory, uint64_t offset))_func)(target, memory, offset);
}
void gllCall_glTexBuffer(void *_func, uint32_t target, uint32_t internalformat, uint32_t buffer) {
	((void (*)(uint32_t target, uint32_t internalformat, uint32_t buffer))_func)(target, internalformat, buffer);
}
void gllCall_glTexBufferARB(void *_func, uint32_t target, uint32_t internalformat, uint32_t buffer) {
	((void (*)(uint32_t target, uint32_t internalformat, uint32_t buffer))_func)(target, internalformat, buffer);
}
void gllCall_glTexBufferEXT(void *_func, uint32_t target, uint32_t internalformat, uint32_t buffer) {
	((void (*)(uint32_t target, uint32_t internalformat, uint32_t buffer))_func)(target, internalformat, buffer);
}
void gllCall_glTexBufferOES(void *_func, uint32_t target, uint32_t internalformat, uint32_t buffer) {
	((void (*)(uint32_t target, uint32_t internalformat, uint32_t buffer))_func)(target, internalformat, buffer);
}
void gllCall_glTexBufferRange(void *_func, uint32_t target, uint32_t internalformat, uint32_t buffer, intptr_t offset, ssize_t size) {
	((void (*)(uint32_t target, uint32_t internalformat, uint32_t buffer, intptr_t offset, ssize_t size))_func)(target, internalformat, buffer, offset, size);
}
void gllCall_glTexBufferRangeEXT(void *_func, uint32_t target, uint32_t internalformat, uint32_t buffer, intptr_t offset, ssize_t size) {
	((void (*)(uint32_t target, uint32_t internalformat, uint32_t buffer, intptr_t offset, ssize_t size))_func)(target, internalformat, buffer, offset, size);
}
void gllCall_glTexBufferRangeOES(void *_func, uint32_t target, uint32_t internalformat, uint32_t buffer, intptr_t offset, ssize_t size) {
	((void (*)(uint32_t target, uint32_t internalformat, uint32_t buffer, intptr_t offset, ssize_t size))_func)(target, internalformat, buffer, offset, size);
}
void gllCall_glTexBumpParameterfvATI(void *_func, uint32_t pname, float *param) {
	((void (*)(uint32_t pname, float *param))_func)(pname, param);
}
void gllCall_glTexBumpParameterivATI(void *_func, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t pname, int32_t *param))_func)(pname, param);
}
void gllCall_glTexCoord1bOES(void *_func, int8_t s) {
	((void (*)(int8_t s))_func)(s);
}
void gllCall_glTexCoord1bvOES(void *_func, int8_t *coords) {
	((void (*)(int8_t *coords))_func)(coords);
}
void gllCall_glTexCoord1d(void *_func, double s) {
	((void (*)(double s))_func)(s);
}
void gllCall_glTexCoord1dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glTexCoord1f(void *_func, float s) {
	((void (*)(float s))_func)(s);
}
void gllCall_glTexCoord1fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glTexCoord1hNV(void *_func, uint16_t s) {
	((void (*)(uint16_t s))_func)(s);
}
void gllCall_glTexCoord1hvNV(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glTexCoord1i(void *_func, int32_t s) {
	((void (*)(int32_t s))_func)(s);
}
void gllCall_glTexCoord1iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glTexCoord1s(void *_func, int16_t s) {
	((void (*)(int16_t s))_func)(s);
}
void gllCall_glTexCoord1sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glTexCoord1xOES(void *_func, int32_t s) {
	((void (*)(int32_t s))_func)(s);
}
void gllCall_glTexCoord1xvOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glTexCoord2bOES(void *_func, int8_t s, int8_t t) {
	((void (*)(int8_t s, int8_t t))_func)(s, t);
}
void gllCall_glTexCoord2bvOES(void *_func, int8_t *coords) {
	((void (*)(int8_t *coords))_func)(coords);
}
void gllCall_glTexCoord2d(void *_func, double s, double t) {
	((void (*)(double s, double t))_func)(s, t);
}
void gllCall_glTexCoord2dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glTexCoord2f(void *_func, float s, float t) {
	((void (*)(float s, float t))_func)(s, t);
}
void gllCall_glTexCoord2fColor3fVertex3fSUN(void *_func, float s, float t, float r, float g, float b, float x, float y, float z) {
	((void (*)(float s, float t, float r, float g, float b, float x, float y, float z))_func)(s, t, r, g, b, x, y, z);
}
void gllCall_glTexCoord2fColor3fVertex3fvSUN(void *_func, float *tc, float *c, float *v) {
	((void (*)(float *tc, float *c, float *v))_func)(tc, c, v);
}
void gllCall_glTexCoord2fColor4fNormal3fVertex3fSUN(void *_func, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) {
	((void (*)(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z))_func)(s, t, r, g, b, a, nx, ny, nz, x, y, z);
}
void gllCall_glTexCoord2fColor4fNormal3fVertex3fvSUN(void *_func, float *tc, float *c, float *n, float *v) {
	((void (*)(float *tc, float *c, float *n, float *v))_func)(tc, c, n, v);
}
void gllCall_glTexCoord2fColor4ubVertex3fSUN(void *_func, float s, float t, uint8_t r, uint8_t g, uint8_t b, uint8_t a, float x, float y, float z) {
	((void (*)(float s, float t, uint8_t r, uint8_t g, uint8_t b, uint8_t a, float x, float y, float z))_func)(s, t, r, g, b, a, x, y, z);
}
void gllCall_glTexCoord2fColor4ubVertex3fvSUN(void *_func, float *tc, uint8_t *c, float *v) {
	((void (*)(float *tc, uint8_t *c, float *v))_func)(tc, c, v);
}
void gllCall_glTexCoord2fNormal3fVertex3fSUN(void *_func, float s, float t, float nx, float ny, float nz, float x, float y, float z) {
	((void (*)(float s, float t, float nx, float ny, float nz, float x, float y, float z))_func)(s, t, nx, ny, nz, x, y, z);
}
void gllCall_glTexCoord2fNormal3fVertex3fvSUN(void *_func, float *tc, float *n, float *v) {
	((void (*)(float *tc, float *n, float *v))_func)(tc, n, v);
}
void gllCall_glTexCoord2fVertex3fSUN(void *_func, float s, float t, float x, float y, float z) {
	((void (*)(float s, float t, float x, float y, float z))_func)(s, t, x, y, z);
}
void gllCall_glTexCoord2fVertex3fvSUN(void *_func, float *tc, float *v) {
	((void (*)(float *tc, float *v))_func)(tc, v);
}
void gllCall_glTexCoord2fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glTexCoord2hNV(void *_func, uint16_t s, uint16_t t) {
	((void (*)(uint16_t s, uint16_t t))_func)(s, t);
}
void gllCall_glTexCoord2hvNV(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glTexCoord2i(void *_func, int32_t s, int32_t t) {
	((void (*)(int32_t s, int32_t t))_func)(s, t);
}
void gllCall_glTexCoord2iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glTexCoord2s(void *_func, int16_t s, int16_t t) {
	((void (*)(int16_t s, int16_t t))_func)(s, t);
}
void gllCall_glTexCoord2sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glTexCoord2xOES(void *_func, int32_t s, int32_t t) {
	((void (*)(int32_t s, int32_t t))_func)(s, t);
}
void gllCall_glTexCoord2xvOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glTexCoord3bOES(void *_func, int8_t s, int8_t t, int8_t r) {
	((void (*)(int8_t s, int8_t t, int8_t r))_func)(s, t, r);
}
void gllCall_glTexCoord3bvOES(void *_func, int8_t *coords) {
	((void (*)(int8_t *coords))_func)(coords);
}
void gllCall_glTexCoord3d(void *_func, double s, double t, double r) {
	((void (*)(double s, double t, double r))_func)(s, t, r);
}
void gllCall_glTexCoord3dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glTexCoord3f(void *_func, float s, float t, float r) {
	((void (*)(float s, float t, float r))_func)(s, t, r);
}
void gllCall_glTexCoord3fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glTexCoord3hNV(void *_func, uint16_t s, uint16_t t, uint16_t r) {
	((void (*)(uint16_t s, uint16_t t, uint16_t r))_func)(s, t, r);
}
void gllCall_glTexCoord3hvNV(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glTexCoord3i(void *_func, int32_t s, int32_t t, int32_t r) {
	((void (*)(int32_t s, int32_t t, int32_t r))_func)(s, t, r);
}
void gllCall_glTexCoord3iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glTexCoord3s(void *_func, int16_t s, int16_t t, int16_t r) {
	((void (*)(int16_t s, int16_t t, int16_t r))_func)(s, t, r);
}
void gllCall_glTexCoord3sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glTexCoord3xOES(void *_func, int32_t s, int32_t t, int32_t r) {
	((void (*)(int32_t s, int32_t t, int32_t r))_func)(s, t, r);
}
void gllCall_glTexCoord3xvOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glTexCoord4bOES(void *_func, int8_t s, int8_t t, int8_t r, int8_t q) {
	((void (*)(int8_t s, int8_t t, int8_t r, int8_t q))_func)(s, t, r, q);
}
void gllCall_glTexCoord4bvOES(void *_func, int8_t *coords) {
	((void (*)(int8_t *coords))_func)(coords);
}
void gllCall_glTexCoord4d(void *_func, double s, double t, double r, double q) {
	((void (*)(double s, double t, double r, double q))_func)(s, t, r, q);
}
void gllCall_glTexCoord4dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glTexCoord4f(void *_func, float s, float t, float r, float q) {
	((void (*)(float s, float t, float r, float q))_func)(s, t, r, q);
}
void gllCall_glTexCoord4fColor4fNormal3fVertex4fSUN(void *_func, float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w) {
	((void (*)(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w))_func)(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
}
void gllCall_glTexCoord4fColor4fNormal3fVertex4fvSUN(void *_func, float *tc, float *c, float *n, float *v) {
	((void (*)(float *tc, float *c, float *n, float *v))_func)(tc, c, n, v);
}
void gllCall_glTexCoord4fVertex4fSUN(void *_func, float s, float t, float p, float q, float x, float y, float z, float w) {
	((void (*)(float s, float t, float p, float q, float x, float y, float z, float w))_func)(s, t, p, q, x, y, z, w);
}
void gllCall_glTexCoord4fVertex4fvSUN(void *_func, float *tc, float *v) {
	((void (*)(float *tc, float *v))_func)(tc, v);
}
void gllCall_glTexCoord4fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glTexCoord4hNV(void *_func, uint16_t s, uint16_t t, uint16_t r, uint16_t q) {
	((void (*)(uint16_t s, uint16_t t, uint16_t r, uint16_t q))_func)(s, t, r, q);
}
void gllCall_glTexCoord4hvNV(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glTexCoord4i(void *_func, int32_t s, int32_t t, int32_t r, int32_t q) {
	((void (*)(int32_t s, int32_t t, int32_t r, int32_t q))_func)(s, t, r, q);
}
void gllCall_glTexCoord4iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glTexCoord4s(void *_func, int16_t s, int16_t t, int16_t r, int16_t q) {
	((void (*)(int16_t s, int16_t t, int16_t r, int16_t q))_func)(s, t, r, q);
}
void gllCall_glTexCoord4sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glTexCoord4xOES(void *_func, int32_t s, int32_t t, int32_t r, int32_t q) {
	((void (*)(int32_t s, int32_t t, int32_t r, int32_t q))_func)(s, t, r, q);
}
void gllCall_glTexCoord4xvOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glTexCoordFormatNV(void *_func, int32_t size, uint32_t type, int32_t stride) {
	((void (*)(int32_t size, uint32_t type, int32_t stride))_func)(size, type, stride);
}
void gllCall_glTexCoordP1ui(void *_func, uint32_t type, uint32_t coords) {
	((void (*)(uint32_t type, uint32_t coords))_func)(type, coords);
}
void gllCall_glTexCoordP1uiv(void *_func, uint32_t type, uint32_t *coords) {
	((void (*)(uint32_t type, uint32_t *coords))_func)(type, coords);
}
void gllCall_glTexCoordP2ui(void *_func, uint32_t type, uint32_t coords) {
	((void (*)(uint32_t type, uint32_t coords))_func)(type, coords);
}
void gllCall_glTexCoordP2uiv(void *_func, uint32_t type, uint32_t *coords) {
	((void (*)(uint32_t type, uint32_t *coords))_func)(type, coords);
}
void gllCall_glTexCoordP3ui(void *_func, uint32_t type, uint32_t coords) {
	((void (*)(uint32_t type, uint32_t coords))_func)(type, coords);
}
void gllCall_glTexCoordP3uiv(void *_func, uint32_t type, uint32_t *coords) {
	((void (*)(uint32_t type, uint32_t *coords))_func)(type, coords);
}
void gllCall_glTexCoordP4ui(void *_func, uint32_t type, uint32_t coords) {
	((void (*)(uint32_t type, uint32_t coords))_func)(type, coords);
}
void gllCall_glTexCoordP4uiv(void *_func, uint32_t type, uint32_t *coords) {
	((void (*)(uint32_t type, uint32_t *coords))_func)(type, coords);
}
void gllCall_glTexCoordPointer(void *_func, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(size, type, stride, pointer);
}
void gllCall_glTexCoordPointerEXT(void *_func, int32_t size, uint32_t type, int32_t stride, int32_t count, void *pointer) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, int32_t count, void *pointer))_func)(size, type, stride, count, pointer);
}
void gllCall_glTexCoordPointerListIBM(void *_func, int32_t size, uint32_t type, int32_t stride, void **pointer, int32_t ptrstride) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, void **pointer, int32_t ptrstride))_func)(size, type, stride, pointer, ptrstride);
}
void gllCall_glTexCoordPointervINTEL(void *_func, int32_t size, uint32_t type, void **pointer) {
	((void (*)(int32_t size, uint32_t type, void **pointer))_func)(size, type, pointer);
}
void gllCall_glTexEnvf(void *_func, uint32_t target, uint32_t pname, float param) {
	((void (*)(uint32_t target, uint32_t pname, float param))_func)(target, pname, param);
}
void gllCall_glTexEnvfv(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glTexEnvi(void *_func, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t target, uint32_t pname, int32_t param))_func)(target, pname, param);
}
void gllCall_glTexEnviv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glTexEnvx(void *_func, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t target, uint32_t pname, int32_t param))_func)(target, pname, param);
}
void gllCall_glTexEnvxOES(void *_func, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t target, uint32_t pname, int32_t param))_func)(target, pname, param);
}
void gllCall_glTexEnvxv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glTexEnvxvOES(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glTexEstimateMotionQCOM(void *_func, uint32_t ref, uint32_t target, uint32_t output) {
	((void (*)(uint32_t ref, uint32_t target, uint32_t output))_func)(ref, target, output);
}
void gllCall_glTexEstimateMotionRegionsQCOM(void *_func, uint32_t ref, uint32_t target, uint32_t output, uint32_t mask) {
	((void (*)(uint32_t ref, uint32_t target, uint32_t output, uint32_t mask))_func)(ref, target, output, mask);
}
void gllCall_glExtrapolateTex2DQCOM(void *_func, uint32_t src1, uint32_t src2, uint32_t output, float scaleFactor) {
	((void (*)(uint32_t src1, uint32_t src2, uint32_t output, float scaleFactor))_func)(src1, src2, output, scaleFactor);
}
void gllCall_glTexFilterFuncSGIS(void *_func, uint32_t target, uint32_t filter, int32_t n, float *weights) {
	((void (*)(uint32_t target, uint32_t filter, int32_t n, float *weights))_func)(target, filter, n, weights);
}
void gllCall_glTexGend(void *_func, uint32_t coord, uint32_t pname, double param) {
	((void (*)(uint32_t coord, uint32_t pname, double param))_func)(coord, pname, param);
}
void gllCall_glTexGendv(void *_func, uint32_t coord, uint32_t pname, double *params) {
	((void (*)(uint32_t coord, uint32_t pname, double *params))_func)(coord, pname, params);
}
void gllCall_glTexGenf(void *_func, uint32_t coord, uint32_t pname, float param) {
	((void (*)(uint32_t coord, uint32_t pname, float param))_func)(coord, pname, param);
}
void gllCall_glTexGenfOES(void *_func, uint32_t coord, uint32_t pname, float param) {
	((void (*)(uint32_t coord, uint32_t pname, float param))_func)(coord, pname, param);
}
void gllCall_glTexGenfv(void *_func, uint32_t coord, uint32_t pname, float *params) {
	((void (*)(uint32_t coord, uint32_t pname, float *params))_func)(coord, pname, params);
}
void gllCall_glTexGenfvOES(void *_func, uint32_t coord, uint32_t pname, float *params) {
	((void (*)(uint32_t coord, uint32_t pname, float *params))_func)(coord, pname, params);
}
void gllCall_glTexGeni(void *_func, uint32_t coord, uint32_t pname, int32_t param) {
	((void (*)(uint32_t coord, uint32_t pname, int32_t param))_func)(coord, pname, param);
}
void gllCall_glTexGeniOES(void *_func, uint32_t coord, uint32_t pname, int32_t param) {
	((void (*)(uint32_t coord, uint32_t pname, int32_t param))_func)(coord, pname, param);
}
void gllCall_glTexGeniv(void *_func, uint32_t coord, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t coord, uint32_t pname, int32_t *params))_func)(coord, pname, params);
}
void gllCall_glTexGenivOES(void *_func, uint32_t coord, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t coord, uint32_t pname, int32_t *params))_func)(coord, pname, params);
}
void gllCall_glTexGenxOES(void *_func, uint32_t coord, uint32_t pname, int32_t param) {
	((void (*)(uint32_t coord, uint32_t pname, int32_t param))_func)(coord, pname, param);
}
void gllCall_glTexGenxvOES(void *_func, uint32_t coord, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t coord, uint32_t pname, int32_t *params))_func)(coord, pname, params);
}
void gllCall_glTexImage1D(void *_func, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t border, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t border, uint32_t format, uint32_t type, void *pixels))_func)(target, level, internalformat, width, border, format, type, pixels);
}
void gllCall_glTexImage2D(void *_func, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t border, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t border, uint32_t format, uint32_t type, void *pixels))_func)(target, level, internalformat, width, height, border, format, type, pixels);
}
void gllCall_glTexImage2DMultisample(void *_func, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, _Bool fixedsamplelocations) {
	((void (*)(uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, _Bool fixedsamplelocations))_func)(target, samples, internalformat, width, height, fixedsamplelocations);
}
void gllCall_glTexImage2DMultisampleCoverageNV(void *_func, uint32_t target, int32_t coverageSamples, int32_t colorSamples, int32_t internalFormat, int32_t width, int32_t height, _Bool fixedSampleLocations) {
	((void (*)(uint32_t target, int32_t coverageSamples, int32_t colorSamples, int32_t internalFormat, int32_t width, int32_t height, _Bool fixedSampleLocations))_func)(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}
void gllCall_glTexImage3D(void *_func, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, uint32_t format, uint32_t type, void *pixels))_func)(target, level, internalformat, width, height, depth, border, format, type, pixels);
}
void gllCall_glTexImage3DEXT(void *_func, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, uint32_t format, uint32_t type, void *pixels))_func)(target, level, internalformat, width, height, depth, border, format, type, pixels);
}
void gllCall_glTexImage3DMultisample(void *_func, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, _Bool fixedsamplelocations) {
	((void (*)(uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, _Bool fixedsamplelocations))_func)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
void gllCall_glTexImage3DMultisampleCoverageNV(void *_func, uint32_t target, int32_t coverageSamples, int32_t colorSamples, int32_t internalFormat, int32_t width, int32_t height, int32_t depth, _Bool fixedSampleLocations) {
	((void (*)(uint32_t target, int32_t coverageSamples, int32_t colorSamples, int32_t internalFormat, int32_t width, int32_t height, int32_t depth, _Bool fixedSampleLocations))_func)(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}
void gllCall_glTexImage3DOES(void *_func, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, uint32_t format, uint32_t type, void *pixels))_func)(target, level, internalformat, width, height, depth, border, format, type, pixels);
}
void gllCall_glTexImage4DSGIS(void *_func, uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t size4d, int32_t border, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t size4d, int32_t border, uint32_t format, uint32_t type, void *pixels))_func)(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
}
void gllCall_glTexPageCommitmentARB(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, _Bool commit) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, _Bool commit))_func)(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}
void gllCall_glTexPageCommitmentEXT(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, _Bool commit) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, _Bool commit))_func)(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}
void gllCall_glTexPageCommitmentMemNV(void *_func, uint32_t target, int32_t layer, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t memory, uint64_t offset, _Bool commit) {
	((void (*)(uint32_t target, int32_t layer, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t memory, uint64_t offset, _Bool commit))_func)(target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
}
void gllCall_glTexParameterIiv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glTexParameterIivEXT(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glTexParameterIivOES(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glTexParameterIuiv(void *_func, uint32_t target, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, uint32_t *params))_func)(target, pname, params);
}
void gllCall_glTexParameterIuivEXT(void *_func, uint32_t target, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, uint32_t *params))_func)(target, pname, params);
}
void gllCall_glTexParameterIuivOES(void *_func, uint32_t target, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, uint32_t *params))_func)(target, pname, params);
}
void gllCall_glTexParameterf(void *_func, uint32_t target, uint32_t pname, float param) {
	((void (*)(uint32_t target, uint32_t pname, float param))_func)(target, pname, param);
}
void gllCall_glTexParameterfv(void *_func, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t target, uint32_t pname, float *params))_func)(target, pname, params);
}
void gllCall_glTexParameteri(void *_func, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t target, uint32_t pname, int32_t param))_func)(target, pname, param);
}
void gllCall_glTexParameteriv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glTexParameterx(void *_func, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t target, uint32_t pname, int32_t param))_func)(target, pname, param);
}
void gllCall_glTexParameterxOES(void *_func, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t target, uint32_t pname, int32_t param))_func)(target, pname, param);
}
void gllCall_glTexParameterxv(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glTexParameterxvOES(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
void gllCall_glTexRenderbufferNV(void *_func, uint32_t target, uint32_t renderbuffer) {
	((void (*)(uint32_t target, uint32_t renderbuffer))_func)(target, renderbuffer);
}
void gllCall_glTexStorage1D(void *_func, uint32_t target, int32_t levels, uint32_t internalformat, int32_t width) {
	((void (*)(uint32_t target, int32_t levels, uint32_t internalformat, int32_t width))_func)(target, levels, internalformat, width);
}
void gllCall_glTexStorage1DEXT(void *_func, uint32_t target, int32_t levels, uint32_t internalformat, int32_t width) {
	((void (*)(uint32_t target, int32_t levels, uint32_t internalformat, int32_t width))_func)(target, levels, internalformat, width);
}
void gllCall_glTexStorage2D(void *_func, uint32_t target, int32_t levels, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t levels, uint32_t internalformat, int32_t width, int32_t height))_func)(target, levels, internalformat, width, height);
}
void gllCall_glTexStorage2DEXT(void *_func, uint32_t target, int32_t levels, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t target, int32_t levels, uint32_t internalformat, int32_t width, int32_t height))_func)(target, levels, internalformat, width, height);
}
void gllCall_glTexStorage2DMultisample(void *_func, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, _Bool fixedsamplelocations) {
	((void (*)(uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, _Bool fixedsamplelocations))_func)(target, samples, internalformat, width, height, fixedsamplelocations);
}
void gllCall_glTexStorage3D(void *_func, uint32_t target, int32_t levels, uint32_t internalformat, int32_t width, int32_t height, int32_t depth) {
	((void (*)(uint32_t target, int32_t levels, uint32_t internalformat, int32_t width, int32_t height, int32_t depth))_func)(target, levels, internalformat, width, height, depth);
}
void gllCall_glTexStorage3DEXT(void *_func, uint32_t target, int32_t levels, uint32_t internalformat, int32_t width, int32_t height, int32_t depth) {
	((void (*)(uint32_t target, int32_t levels, uint32_t internalformat, int32_t width, int32_t height, int32_t depth))_func)(target, levels, internalformat, width, height, depth);
}
void gllCall_glTexStorage3DMultisample(void *_func, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, _Bool fixedsamplelocations) {
	((void (*)(uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, _Bool fixedsamplelocations))_func)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
void gllCall_glTexStorage3DMultisampleOES(void *_func, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, _Bool fixedsamplelocations) {
	((void (*)(uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, _Bool fixedsamplelocations))_func)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
void gllCall_glTexStorageMem1DEXT(void *_func, uint32_t target, int32_t levels, uint32_t internalFormat, int32_t width, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t target, int32_t levels, uint32_t internalFormat, int32_t width, uint32_t memory, uint64_t offset))_func)(target, levels, internalFormat, width, memory, offset);
}
void gllCall_glTexStorageMem2DEXT(void *_func, uint32_t target, int32_t levels, uint32_t internalFormat, int32_t width, int32_t height, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t target, int32_t levels, uint32_t internalFormat, int32_t width, int32_t height, uint32_t memory, uint64_t offset))_func)(target, levels, internalFormat, width, height, memory, offset);
}
void gllCall_glTexStorageMem2DMultisampleEXT(void *_func, uint32_t target, int32_t samples, uint32_t internalFormat, int32_t width, int32_t height, _Bool fixedSampleLocations, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t target, int32_t samples, uint32_t internalFormat, int32_t width, int32_t height, _Bool fixedSampleLocations, uint32_t memory, uint64_t offset))_func)(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}
void gllCall_glTexStorageMem3DEXT(void *_func, uint32_t target, int32_t levels, uint32_t internalFormat, int32_t width, int32_t height, int32_t depth, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t target, int32_t levels, uint32_t internalFormat, int32_t width, int32_t height, int32_t depth, uint32_t memory, uint64_t offset))_func)(target, levels, internalFormat, width, height, depth, memory, offset);
}
void gllCall_glTexStorageMem3DMultisampleEXT(void *_func, uint32_t target, int32_t samples, uint32_t internalFormat, int32_t width, int32_t height, int32_t depth, _Bool fixedSampleLocations, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t target, int32_t samples, uint32_t internalFormat, int32_t width, int32_t height, int32_t depth, _Bool fixedSampleLocations, uint32_t memory, uint64_t offset))_func)(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
}
void gllCall_glTexStorageSparseAMD(void *_func, uint32_t target, uint32_t internalFormat, int32_t width, int32_t height, int32_t depth, int32_t layers, uint32_t flags) {
	((void (*)(uint32_t target, uint32_t internalFormat, int32_t width, int32_t height, int32_t depth, int32_t layers, uint32_t flags))_func)(target, internalFormat, width, height, depth, layers, flags);
}
void gllCall_glTexSubImage1D(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, uint32_t type, void *pixels))_func)(target, level, xoffset, width, format, type, pixels);
}
void gllCall_glTexSubImage1DEXT(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, uint32_t type, void *pixels))_func)(target, level, xoffset, width, format, type, pixels);
}
void gllCall_glTexSubImage2D(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, uint32_t type, void *pixels))_func)(target, level, xoffset, yoffset, width, height, format, type, pixels);
}
void gllCall_glTexSubImage2DEXT(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, uint32_t type, void *pixels))_func)(target, level, xoffset, yoffset, width, height, format, type, pixels);
}
void gllCall_glTexSubImage3D(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *pixels))_func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
void gllCall_glTexSubImage3DEXT(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *pixels))_func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
void gllCall_glTexSubImage3DOES(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *pixels))_func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
void gllCall_glTexSubImage4DSGIS(void *_func, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t woffset, int32_t width, int32_t height, int32_t depth, int32_t size4d, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t woffset, int32_t width, int32_t height, int32_t depth, int32_t size4d, uint32_t format, uint32_t type, void *pixels))_func)(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
}
void gllCall_glTextureAttachMemoryNV(void *_func, uint32_t texture, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t texture, uint32_t memory, uint64_t offset))_func)(texture, memory, offset);
}
void gllCall_glTextureBarrier(void *_func) {
	((void (*)())_func)();
}
void gllCall_glTextureBarrierNV(void *_func) {
	((void (*)())_func)();
}
void gllCall_glTextureBuffer(void *_func, uint32_t texture, uint32_t internalformat, uint32_t buffer) {
	((void (*)(uint32_t texture, uint32_t internalformat, uint32_t buffer))_func)(texture, internalformat, buffer);
}
void gllCall_glTextureBufferEXT(void *_func, uint32_t texture, uint32_t target, uint32_t internalformat, uint32_t buffer) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t internalformat, uint32_t buffer))_func)(texture, target, internalformat, buffer);
}
void gllCall_glTextureBufferRange(void *_func, uint32_t texture, uint32_t internalformat, uint32_t buffer, intptr_t offset, ssize_t size) {
	((void (*)(uint32_t texture, uint32_t internalformat, uint32_t buffer, intptr_t offset, ssize_t size))_func)(texture, internalformat, buffer, offset, size);
}
void gllCall_glTextureBufferRangeEXT(void *_func, uint32_t texture, uint32_t target, uint32_t internalformat, uint32_t buffer, intptr_t offset, ssize_t size) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t internalformat, uint32_t buffer, intptr_t offset, ssize_t size))_func)(texture, target, internalformat, buffer, offset, size);
}
void gllCall_glTextureColorMaskSGIS(void *_func, _Bool red, _Bool green, _Bool blue, _Bool alpha) {
	((void (*)(_Bool red, _Bool green, _Bool blue, _Bool alpha))_func)(red, green, blue, alpha);
}
void gllCall_glTextureFoveationParametersQCOM(void *_func, uint32_t texture, uint32_t layer, uint32_t focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea) {
	((void (*)(uint32_t texture, uint32_t layer, uint32_t focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea))_func)(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
}
void gllCall_glTextureImage1DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t border, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t border, uint32_t format, uint32_t type, void *pixels))_func)(texture, target, level, internalformat, width, border, format, type, pixels);
}
void gllCall_glTextureImage2DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t border, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t border, uint32_t format, uint32_t type, void *pixels))_func)(texture, target, level, internalformat, width, height, border, format, type, pixels);
}
void gllCall_glTextureImage2DMultisampleCoverageNV(void *_func, uint32_t texture, uint32_t target, int32_t coverageSamples, int32_t colorSamples, int32_t internalFormat, int32_t width, int32_t height, _Bool fixedSampleLocations) {
	((void (*)(uint32_t texture, uint32_t target, int32_t coverageSamples, int32_t colorSamples, int32_t internalFormat, int32_t width, int32_t height, _Bool fixedSampleLocations))_func)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}
void gllCall_glTextureImage2DMultisampleNV(void *_func, uint32_t texture, uint32_t target, int32_t samples, int32_t internalFormat, int32_t width, int32_t height, _Bool fixedSampleLocations) {
	((void (*)(uint32_t texture, uint32_t target, int32_t samples, int32_t internalFormat, int32_t width, int32_t height, _Bool fixedSampleLocations))_func)(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
}
void gllCall_glTextureImage3DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, uint32_t format, uint32_t type, void *pixels))_func)(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
}
void gllCall_glTextureImage3DMultisampleCoverageNV(void *_func, uint32_t texture, uint32_t target, int32_t coverageSamples, int32_t colorSamples, int32_t internalFormat, int32_t width, int32_t height, int32_t depth, _Bool fixedSampleLocations) {
	((void (*)(uint32_t texture, uint32_t target, int32_t coverageSamples, int32_t colorSamples, int32_t internalFormat, int32_t width, int32_t height, int32_t depth, _Bool fixedSampleLocations))_func)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}
void gllCall_glTextureImage3DMultisampleNV(void *_func, uint32_t texture, uint32_t target, int32_t samples, int32_t internalFormat, int32_t width, int32_t height, int32_t depth, _Bool fixedSampleLocations) {
	((void (*)(uint32_t texture, uint32_t target, int32_t samples, int32_t internalFormat, int32_t width, int32_t height, int32_t depth, _Bool fixedSampleLocations))_func)(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
}
void gllCall_glTextureLightEXT(void *_func, uint32_t pname) {
	((void (*)(uint32_t pname))_func)(pname);
}
void gllCall_glTextureMaterialEXT(void *_func, uint32_t face, uint32_t mode) {
	((void (*)(uint32_t face, uint32_t mode))_func)(face, mode);
}
void gllCall_glTextureNormalEXT(void *_func, uint32_t mode) {
	((void (*)(uint32_t mode))_func)(mode);
}
void gllCall_glTexturePageCommitmentEXT(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, _Bool commit) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, _Bool commit))_func)(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}
void gllCall_glTexturePageCommitmentMemNV(void *_func, uint32_t texture, int32_t layer, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t memory, uint64_t offset, _Bool commit) {
	((void (*)(uint32_t texture, int32_t layer, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t memory, uint64_t offset, _Bool commit))_func)(texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
}
void gllCall_glTextureParameterIiv(void *_func, uint32_t texture, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texture, uint32_t pname, int32_t *params))_func)(texture, pname, params);
}
void gllCall_glTextureParameterIivEXT(void *_func, uint32_t texture, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t pname, int32_t *params))_func)(texture, target, pname, params);
}
void gllCall_glTextureParameterIuiv(void *_func, uint32_t texture, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t texture, uint32_t pname, uint32_t *params))_func)(texture, pname, params);
}
void gllCall_glTextureParameterIuivEXT(void *_func, uint32_t texture, uint32_t target, uint32_t pname, uint32_t *params) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t pname, uint32_t *params))_func)(texture, target, pname, params);
}
void gllCall_glTextureParameterf(void *_func, uint32_t texture, uint32_t pname, float param) {
	((void (*)(uint32_t texture, uint32_t pname, float param))_func)(texture, pname, param);
}
void gllCall_glTextureParameterfEXT(void *_func, uint32_t texture, uint32_t target, uint32_t pname, float param) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t pname, float param))_func)(texture, target, pname, param);
}
void gllCall_glTextureParameterfv(void *_func, uint32_t texture, uint32_t pname, float *param) {
	((void (*)(uint32_t texture, uint32_t pname, float *param))_func)(texture, pname, param);
}
void gllCall_glTextureParameterfvEXT(void *_func, uint32_t texture, uint32_t target, uint32_t pname, float *params) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t pname, float *params))_func)(texture, target, pname, params);
}
void gllCall_glTextureParameteri(void *_func, uint32_t texture, uint32_t pname, int32_t param) {
	((void (*)(uint32_t texture, uint32_t pname, int32_t param))_func)(texture, pname, param);
}
void gllCall_glTextureParameteriEXT(void *_func, uint32_t texture, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t pname, int32_t param))_func)(texture, target, pname, param);
}
void gllCall_glTextureParameteriv(void *_func, uint32_t texture, uint32_t pname, int32_t *param) {
	((void (*)(uint32_t texture, uint32_t pname, int32_t *param))_func)(texture, pname, param);
}
void gllCall_glTextureParameterivEXT(void *_func, uint32_t texture, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t pname, int32_t *params))_func)(texture, target, pname, params);
}
void gllCall_glTextureRangeAPPLE(void *_func, uint32_t target, int32_t length, void *pointer) {
	((void (*)(uint32_t target, int32_t length, void *pointer))_func)(target, length, pointer);
}
void gllCall_glTextureRenderbufferEXT(void *_func, uint32_t texture, uint32_t target, uint32_t renderbuffer) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t renderbuffer))_func)(texture, target, renderbuffer);
}
void gllCall_glTextureStorage1D(void *_func, uint32_t texture, int32_t levels, uint32_t internalformat, int32_t width) {
	((void (*)(uint32_t texture, int32_t levels, uint32_t internalformat, int32_t width))_func)(texture, levels, internalformat, width);
}
void gllCall_glTextureStorage1DEXT(void *_func, uint32_t texture, uint32_t target, int32_t levels, uint32_t internalformat, int32_t width) {
	((void (*)(uint32_t texture, uint32_t target, int32_t levels, uint32_t internalformat, int32_t width))_func)(texture, target, levels, internalformat, width);
}
void gllCall_glTextureStorage2D(void *_func, uint32_t texture, int32_t levels, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t texture, int32_t levels, uint32_t internalformat, int32_t width, int32_t height))_func)(texture, levels, internalformat, width, height);
}
void gllCall_glTextureStorage2DEXT(void *_func, uint32_t texture, uint32_t target, int32_t levels, uint32_t internalformat, int32_t width, int32_t height) {
	((void (*)(uint32_t texture, uint32_t target, int32_t levels, uint32_t internalformat, int32_t width, int32_t height))_func)(texture, target, levels, internalformat, width, height);
}
void gllCall_glTextureStorage2DMultisample(void *_func, uint32_t texture, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, _Bool fixedsamplelocations) {
	((void (*)(uint32_t texture, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, _Bool fixedsamplelocations))_func)(texture, samples, internalformat, width, height, fixedsamplelocations);
}
void gllCall_glTextureStorage2DMultisampleEXT(void *_func, uint32_t texture, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, _Bool fixedsamplelocations) {
	((void (*)(uint32_t texture, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, _Bool fixedsamplelocations))_func)(texture, target, samples, internalformat, width, height, fixedsamplelocations);
}
void gllCall_glTextureStorage3D(void *_func, uint32_t texture, int32_t levels, uint32_t internalformat, int32_t width, int32_t height, int32_t depth) {
	((void (*)(uint32_t texture, int32_t levels, uint32_t internalformat, int32_t width, int32_t height, int32_t depth))_func)(texture, levels, internalformat, width, height, depth);
}
void gllCall_glTextureStorage3DEXT(void *_func, uint32_t texture, uint32_t target, int32_t levels, uint32_t internalformat, int32_t width, int32_t height, int32_t depth) {
	((void (*)(uint32_t texture, uint32_t target, int32_t levels, uint32_t internalformat, int32_t width, int32_t height, int32_t depth))_func)(texture, target, levels, internalformat, width, height, depth);
}
void gllCall_glTextureStorage3DMultisample(void *_func, uint32_t texture, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, _Bool fixedsamplelocations) {
	((void (*)(uint32_t texture, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, _Bool fixedsamplelocations))_func)(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
}
void gllCall_glTextureStorage3DMultisampleEXT(void *_func, uint32_t texture, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, _Bool fixedsamplelocations) {
	((void (*)(uint32_t texture, uint32_t target, int32_t samples, uint32_t internalformat, int32_t width, int32_t height, int32_t depth, _Bool fixedsamplelocations))_func)(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
void gllCall_glTextureStorageMem1DEXT(void *_func, uint32_t texture, int32_t levels, uint32_t internalFormat, int32_t width, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t texture, int32_t levels, uint32_t internalFormat, int32_t width, uint32_t memory, uint64_t offset))_func)(texture, levels, internalFormat, width, memory, offset);
}
void gllCall_glTextureStorageMem2DEXT(void *_func, uint32_t texture, int32_t levels, uint32_t internalFormat, int32_t width, int32_t height, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t texture, int32_t levels, uint32_t internalFormat, int32_t width, int32_t height, uint32_t memory, uint64_t offset))_func)(texture, levels, internalFormat, width, height, memory, offset);
}
void gllCall_glTextureStorageMem2DMultisampleEXT(void *_func, uint32_t texture, int32_t samples, uint32_t internalFormat, int32_t width, int32_t height, _Bool fixedSampleLocations, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t texture, int32_t samples, uint32_t internalFormat, int32_t width, int32_t height, _Bool fixedSampleLocations, uint32_t memory, uint64_t offset))_func)(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}
void gllCall_glTextureStorageMem3DEXT(void *_func, uint32_t texture, int32_t levels, uint32_t internalFormat, int32_t width, int32_t height, int32_t depth, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t texture, int32_t levels, uint32_t internalFormat, int32_t width, int32_t height, int32_t depth, uint32_t memory, uint64_t offset))_func)(texture, levels, internalFormat, width, height, depth, memory, offset);
}
void gllCall_glTextureStorageMem3DMultisampleEXT(void *_func, uint32_t texture, int32_t samples, uint32_t internalFormat, int32_t width, int32_t height, int32_t depth, _Bool fixedSampleLocations, uint32_t memory, uint64_t offset) {
	((void (*)(uint32_t texture, int32_t samples, uint32_t internalFormat, int32_t width, int32_t height, int32_t depth, _Bool fixedSampleLocations, uint32_t memory, uint64_t offset))_func)(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
}
void gllCall_glTextureStorageSparseAMD(void *_func, uint32_t texture, uint32_t target, uint32_t internalFormat, int32_t width, int32_t height, int32_t depth, int32_t layers, uint32_t flags) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t internalFormat, int32_t width, int32_t height, int32_t depth, int32_t layers, uint32_t flags))_func)(texture, target, internalFormat, width, height, depth, layers, flags);
}
void gllCall_glTextureSubImage1D(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t width, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t width, uint32_t format, uint32_t type, void *pixels))_func)(texture, level, xoffset, width, format, type, pixels);
}
void gllCall_glTextureSubImage1DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, uint32_t type, void *pixels))_func)(texture, target, level, xoffset, width, format, type, pixels);
}
void gllCall_glTextureSubImage2D(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, uint32_t type, void *pixels))_func)(texture, level, xoffset, yoffset, width, height, format, type, pixels);
}
void gllCall_glTextureSubImage2DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, uint32_t type, void *pixels))_func)(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
}
void gllCall_glTextureSubImage3D(void *_func, uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texture, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *pixels))_func)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
void gllCall_glTextureSubImage3DEXT(void *_func, uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *pixels) {
	((void (*)(uint32_t texture, uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, uint32_t format, uint32_t type, void *pixels))_func)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
void gllCall_glTextureView(void *_func, uint32_t texture, uint32_t target, uint32_t origtexture, uint32_t internalformat, uint32_t minlevel, uint32_t numlevels, uint32_t minlayer, uint32_t numlayers) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t origtexture, uint32_t internalformat, uint32_t minlevel, uint32_t numlevels, uint32_t minlayer, uint32_t numlayers))_func)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
void gllCall_glTextureViewEXT(void *_func, uint32_t texture, uint32_t target, uint32_t origtexture, uint32_t internalformat, uint32_t minlevel, uint32_t numlevels, uint32_t minlayer, uint32_t numlayers) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t origtexture, uint32_t internalformat, uint32_t minlevel, uint32_t numlevels, uint32_t minlayer, uint32_t numlayers))_func)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
void gllCall_glTextureViewOES(void *_func, uint32_t texture, uint32_t target, uint32_t origtexture, uint32_t internalformat, uint32_t minlevel, uint32_t numlevels, uint32_t minlayer, uint32_t numlayers) {
	((void (*)(uint32_t texture, uint32_t target, uint32_t origtexture, uint32_t internalformat, uint32_t minlevel, uint32_t numlevels, uint32_t minlayer, uint32_t numlayers))_func)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
void gllCall_glTrackMatrixNV(void *_func, uint32_t target, uint32_t address, uint32_t matrix, uint32_t transform) {
	((void (*)(uint32_t target, uint32_t address, uint32_t matrix, uint32_t transform))_func)(target, address, matrix, transform);
}
void gllCall_glTransformFeedbackAttribsNV(void *_func, int32_t count, int32_t *attribs, uint32_t bufferMode) {
	((void (*)(int32_t count, int32_t *attribs, uint32_t bufferMode))_func)(count, attribs, bufferMode);
}
void gllCall_glTransformFeedbackBufferBase(void *_func, uint32_t xfb, uint32_t index, uint32_t buffer) {
	((void (*)(uint32_t xfb, uint32_t index, uint32_t buffer))_func)(xfb, index, buffer);
}
void gllCall_glTransformFeedbackBufferRange(void *_func, uint32_t xfb, uint32_t index, uint32_t buffer, intptr_t offset, ssize_t size) {
	((void (*)(uint32_t xfb, uint32_t index, uint32_t buffer, intptr_t offset, ssize_t size))_func)(xfb, index, buffer, offset, size);
}
void gllCall_glTransformFeedbackStreamAttribsNV(void *_func, int32_t count, int32_t *attribs, int32_t nbuffers, int32_t *bufstreams, uint32_t bufferMode) {
	((void (*)(int32_t count, int32_t *attribs, int32_t nbuffers, int32_t *bufstreams, uint32_t bufferMode))_func)(count, attribs, nbuffers, bufstreams, bufferMode);
}
void gllCall_glTransformFeedbackVaryings(void *_func, uint32_t program, int32_t count, uint8_t **varyings, uint32_t bufferMode) {
	((void (*)(uint32_t program, int32_t count, uint8_t **varyings, uint32_t bufferMode))_func)(program, count, varyings, bufferMode);
}
void gllCall_glTransformFeedbackVaryingsEXT(void *_func, uint32_t program, int32_t count, uint8_t **varyings, uint32_t bufferMode) {
	((void (*)(uint32_t program, int32_t count, uint8_t **varyings, uint32_t bufferMode))_func)(program, count, varyings, bufferMode);
}
void gllCall_glTransformFeedbackVaryingsNV(void *_func, uint32_t program, int32_t count, int32_t *locations, uint32_t bufferMode) {
	((void (*)(uint32_t program, int32_t count, int32_t *locations, uint32_t bufferMode))_func)(program, count, locations, bufferMode);
}
void gllCall_glTransformPathNV(void *_func, uint32_t resultPath, uint32_t srcPath, uint32_t transformType, float *transformValues) {
	((void (*)(uint32_t resultPath, uint32_t srcPath, uint32_t transformType, float *transformValues))_func)(resultPath, srcPath, transformType, transformValues);
}
void gllCall_glTranslated(void *_func, double x, double y, double z) {
	((void (*)(double x, double y, double z))_func)(x, y, z);
}
void gllCall_glTranslatef(void *_func, float x, float y, float z) {
	((void (*)(float x, float y, float z))_func)(x, y, z);
}
void gllCall_glTranslatex(void *_func, int32_t x, int32_t y, int32_t z) {
	((void (*)(int32_t x, int32_t y, int32_t z))_func)(x, y, z);
}
void gllCall_glTranslatexOES(void *_func, int32_t x, int32_t y, int32_t z) {
	((void (*)(int32_t x, int32_t y, int32_t z))_func)(x, y, z);
}
void gllCall_glUniform1d(void *_func, int32_t location, double x) {
	((void (*)(int32_t location, double x))_func)(location, x);
}
void gllCall_glUniform1dv(void *_func, int32_t location, int32_t count, double *value) {
	((void (*)(int32_t location, int32_t count, double *value))_func)(location, count, value);
}
void gllCall_glUniform1f(void *_func, int32_t location, float v0) {
	((void (*)(int32_t location, float v0))_func)(location, v0);
}
void gllCall_glUniform1fARB(void *_func, int32_t location, float v0) {
	((void (*)(int32_t location, float v0))_func)(location, v0);
}
void gllCall_glUniform1fv(void *_func, int32_t location, int32_t count, float *value) {
	((void (*)(int32_t location, int32_t count, float *value))_func)(location, count, value);
}
void gllCall_glUniform1fvARB(void *_func, int32_t location, int32_t count, float *value) {
	((void (*)(int32_t location, int32_t count, float *value))_func)(location, count, value);
}
void gllCall_glUniform1i(void *_func, int32_t location, int32_t v0) {
	((void (*)(int32_t location, int32_t v0))_func)(location, v0);
}
void gllCall_glUniform1i64ARB(void *_func, int32_t location, int64_t x) {
	((void (*)(int32_t location, int64_t x))_func)(location, x);
}
void gllCall_glUniform1i64NV(void *_func, int32_t location, int64_t x) {
	((void (*)(int32_t location, int64_t x))_func)(location, x);
}
void gllCall_glUniform1i64vARB(void *_func, int32_t location, int32_t count, int64_t *value) {
	((void (*)(int32_t location, int32_t count, int64_t *value))_func)(location, count, value);
}
void gllCall_glUniform1i64vNV(void *_func, int32_t location, int32_t count, int64_t *value) {
	((void (*)(int32_t location, int32_t count, int64_t *value))_func)(location, count, value);
}
void gllCall_glUniform1iARB(void *_func, int32_t location, int32_t v0) {
	((void (*)(int32_t location, int32_t v0))_func)(location, v0);
}
void gllCall_glUniform1iv(void *_func, int32_t location, int32_t count, int32_t *value) {
	((void (*)(int32_t location, int32_t count, int32_t *value))_func)(location, count, value);
}
void gllCall_glUniform1ivARB(void *_func, int32_t location, int32_t count, int32_t *value) {
	((void (*)(int32_t location, int32_t count, int32_t *value))_func)(location, count, value);
}
void gllCall_glUniform1ui(void *_func, int32_t location, uint32_t v0) {
	((void (*)(int32_t location, uint32_t v0))_func)(location, v0);
}
void gllCall_glUniform1ui64ARB(void *_func, int32_t location, uint64_t x) {
	((void (*)(int32_t location, uint64_t x))_func)(location, x);
}
void gllCall_glUniform1ui64NV(void *_func, int32_t location, uint64_t x) {
	((void (*)(int32_t location, uint64_t x))_func)(location, x);
}
void gllCall_glUniform1ui64vARB(void *_func, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(int32_t location, int32_t count, uint64_t *value))_func)(location, count, value);
}
void gllCall_glUniform1ui64vNV(void *_func, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(int32_t location, int32_t count, uint64_t *value))_func)(location, count, value);
}
void gllCall_glUniform1uiEXT(void *_func, int32_t location, uint32_t v0) {
	((void (*)(int32_t location, uint32_t v0))_func)(location, v0);
}
void gllCall_glUniform1uiv(void *_func, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(int32_t location, int32_t count, uint32_t *value))_func)(location, count, value);
}
void gllCall_glUniform1uivEXT(void *_func, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(int32_t location, int32_t count, uint32_t *value))_func)(location, count, value);
}
void gllCall_glUniform2d(void *_func, int32_t location, double x, double y) {
	((void (*)(int32_t location, double x, double y))_func)(location, x, y);
}
void gllCall_glUniform2dv(void *_func, int32_t location, int32_t count, double *value) {
	((void (*)(int32_t location, int32_t count, double *value))_func)(location, count, value);
}
void gllCall_glUniform2f(void *_func, int32_t location, float v0, float v1) {
	((void (*)(int32_t location, float v0, float v1))_func)(location, v0, v1);
}
void gllCall_glUniform2fARB(void *_func, int32_t location, float v0, float v1) {
	((void (*)(int32_t location, float v0, float v1))_func)(location, v0, v1);
}
void gllCall_glUniform2fv(void *_func, int32_t location, int32_t count, float *value) {
	((void (*)(int32_t location, int32_t count, float *value))_func)(location, count, value);
}
void gllCall_glUniform2fvARB(void *_func, int32_t location, int32_t count, float *value) {
	((void (*)(int32_t location, int32_t count, float *value))_func)(location, count, value);
}
void gllCall_glUniform2i(void *_func, int32_t location, int32_t v0, int32_t v1) {
	((void (*)(int32_t location, int32_t v0, int32_t v1))_func)(location, v0, v1);
}
void gllCall_glUniform2i64ARB(void *_func, int32_t location, int64_t x, int64_t y) {
	((void (*)(int32_t location, int64_t x, int64_t y))_func)(location, x, y);
}
void gllCall_glUniform2i64NV(void *_func, int32_t location, int64_t x, int64_t y) {
	((void (*)(int32_t location, int64_t x, int64_t y))_func)(location, x, y);
}
void gllCall_glUniform2i64vARB(void *_func, int32_t location, int32_t count, int64_t *value) {
	((void (*)(int32_t location, int32_t count, int64_t *value))_func)(location, count, value);
}
void gllCall_glUniform2i64vNV(void *_func, int32_t location, int32_t count, int64_t *value) {
	((void (*)(int32_t location, int32_t count, int64_t *value))_func)(location, count, value);
}
void gllCall_glUniform2iARB(void *_func, int32_t location, int32_t v0, int32_t v1) {
	((void (*)(int32_t location, int32_t v0, int32_t v1))_func)(location, v0, v1);
}
void gllCall_glUniform2iv(void *_func, int32_t location, int32_t count, int32_t *value) {
	((void (*)(int32_t location, int32_t count, int32_t *value))_func)(location, count, value);
}
void gllCall_glUniform2ivARB(void *_func, int32_t location, int32_t count, int32_t *value) {
	((void (*)(int32_t location, int32_t count, int32_t *value))_func)(location, count, value);
}
void gllCall_glUniform2ui(void *_func, int32_t location, uint32_t v0, uint32_t v1) {
	((void (*)(int32_t location, uint32_t v0, uint32_t v1))_func)(location, v0, v1);
}
void gllCall_glUniform2ui64ARB(void *_func, int32_t location, uint64_t x, uint64_t y) {
	((void (*)(int32_t location, uint64_t x, uint64_t y))_func)(location, x, y);
}
void gllCall_glUniform2ui64NV(void *_func, int32_t location, uint64_t x, uint64_t y) {
	((void (*)(int32_t location, uint64_t x, uint64_t y))_func)(location, x, y);
}
void gllCall_glUniform2ui64vARB(void *_func, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(int32_t location, int32_t count, uint64_t *value))_func)(location, count, value);
}
void gllCall_glUniform2ui64vNV(void *_func, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(int32_t location, int32_t count, uint64_t *value))_func)(location, count, value);
}
void gllCall_glUniform2uiEXT(void *_func, int32_t location, uint32_t v0, uint32_t v1) {
	((void (*)(int32_t location, uint32_t v0, uint32_t v1))_func)(location, v0, v1);
}
void gllCall_glUniform2uiv(void *_func, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(int32_t location, int32_t count, uint32_t *value))_func)(location, count, value);
}
void gllCall_glUniform2uivEXT(void *_func, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(int32_t location, int32_t count, uint32_t *value))_func)(location, count, value);
}
void gllCall_glUniform3d(void *_func, int32_t location, double x, double y, double z) {
	((void (*)(int32_t location, double x, double y, double z))_func)(location, x, y, z);
}
void gllCall_glUniform3dv(void *_func, int32_t location, int32_t count, double *value) {
	((void (*)(int32_t location, int32_t count, double *value))_func)(location, count, value);
}
void gllCall_glUniform3f(void *_func, int32_t location, float v0, float v1, float v2) {
	((void (*)(int32_t location, float v0, float v1, float v2))_func)(location, v0, v1, v2);
}
void gllCall_glUniform3fARB(void *_func, int32_t location, float v0, float v1, float v2) {
	((void (*)(int32_t location, float v0, float v1, float v2))_func)(location, v0, v1, v2);
}
void gllCall_glUniform3fv(void *_func, int32_t location, int32_t count, float *value) {
	((void (*)(int32_t location, int32_t count, float *value))_func)(location, count, value);
}
void gllCall_glUniform3fvARB(void *_func, int32_t location, int32_t count, float *value) {
	((void (*)(int32_t location, int32_t count, float *value))_func)(location, count, value);
}
void gllCall_glUniform3i(void *_func, int32_t location, int32_t v0, int32_t v1, int32_t v2) {
	((void (*)(int32_t location, int32_t v0, int32_t v1, int32_t v2))_func)(location, v0, v1, v2);
}
void gllCall_glUniform3i64ARB(void *_func, int32_t location, int64_t x, int64_t y, int64_t z) {
	((void (*)(int32_t location, int64_t x, int64_t y, int64_t z))_func)(location, x, y, z);
}
void gllCall_glUniform3i64NV(void *_func, int32_t location, int64_t x, int64_t y, int64_t z) {
	((void (*)(int32_t location, int64_t x, int64_t y, int64_t z))_func)(location, x, y, z);
}
void gllCall_glUniform3i64vARB(void *_func, int32_t location, int32_t count, int64_t *value) {
	((void (*)(int32_t location, int32_t count, int64_t *value))_func)(location, count, value);
}
void gllCall_glUniform3i64vNV(void *_func, int32_t location, int32_t count, int64_t *value) {
	((void (*)(int32_t location, int32_t count, int64_t *value))_func)(location, count, value);
}
void gllCall_glUniform3iARB(void *_func, int32_t location, int32_t v0, int32_t v1, int32_t v2) {
	((void (*)(int32_t location, int32_t v0, int32_t v1, int32_t v2))_func)(location, v0, v1, v2);
}
void gllCall_glUniform3iv(void *_func, int32_t location, int32_t count, int32_t *value) {
	((void (*)(int32_t location, int32_t count, int32_t *value))_func)(location, count, value);
}
void gllCall_glUniform3ivARB(void *_func, int32_t location, int32_t count, int32_t *value) {
	((void (*)(int32_t location, int32_t count, int32_t *value))_func)(location, count, value);
}
void gllCall_glUniform3ui(void *_func, int32_t location, uint32_t v0, uint32_t v1, uint32_t v2) {
	((void (*)(int32_t location, uint32_t v0, uint32_t v1, uint32_t v2))_func)(location, v0, v1, v2);
}
void gllCall_glUniform3ui64ARB(void *_func, int32_t location, uint64_t x, uint64_t y, uint64_t z) {
	((void (*)(int32_t location, uint64_t x, uint64_t y, uint64_t z))_func)(location, x, y, z);
}
void gllCall_glUniform3ui64NV(void *_func, int32_t location, uint64_t x, uint64_t y, uint64_t z) {
	((void (*)(int32_t location, uint64_t x, uint64_t y, uint64_t z))_func)(location, x, y, z);
}
void gllCall_glUniform3ui64vARB(void *_func, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(int32_t location, int32_t count, uint64_t *value))_func)(location, count, value);
}
void gllCall_glUniform3ui64vNV(void *_func, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(int32_t location, int32_t count, uint64_t *value))_func)(location, count, value);
}
void gllCall_glUniform3uiEXT(void *_func, int32_t location, uint32_t v0, uint32_t v1, uint32_t v2) {
	((void (*)(int32_t location, uint32_t v0, uint32_t v1, uint32_t v2))_func)(location, v0, v1, v2);
}
void gllCall_glUniform3uiv(void *_func, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(int32_t location, int32_t count, uint32_t *value))_func)(location, count, value);
}
void gllCall_glUniform3uivEXT(void *_func, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(int32_t location, int32_t count, uint32_t *value))_func)(location, count, value);
}
void gllCall_glUniform4d(void *_func, int32_t location, double x, double y, double z, double w) {
	((void (*)(int32_t location, double x, double y, double z, double w))_func)(location, x, y, z, w);
}
void gllCall_glUniform4dv(void *_func, int32_t location, int32_t count, double *value) {
	((void (*)(int32_t location, int32_t count, double *value))_func)(location, count, value);
}
void gllCall_glUniform4f(void *_func, int32_t location, float v0, float v1, float v2, float v3) {
	((void (*)(int32_t location, float v0, float v1, float v2, float v3))_func)(location, v0, v1, v2, v3);
}
void gllCall_glUniform4fARB(void *_func, int32_t location, float v0, float v1, float v2, float v3) {
	((void (*)(int32_t location, float v0, float v1, float v2, float v3))_func)(location, v0, v1, v2, v3);
}
void gllCall_glUniform4fv(void *_func, int32_t location, int32_t count, float *value) {
	((void (*)(int32_t location, int32_t count, float *value))_func)(location, count, value);
}
void gllCall_glUniform4fvARB(void *_func, int32_t location, int32_t count, float *value) {
	((void (*)(int32_t location, int32_t count, float *value))_func)(location, count, value);
}
void gllCall_glUniform4i(void *_func, int32_t location, int32_t v0, int32_t v1, int32_t v2, int32_t v3) {
	((void (*)(int32_t location, int32_t v0, int32_t v1, int32_t v2, int32_t v3))_func)(location, v0, v1, v2, v3);
}
void gllCall_glUniform4i64ARB(void *_func, int32_t location, int64_t x, int64_t y, int64_t z, int64_t w) {
	((void (*)(int32_t location, int64_t x, int64_t y, int64_t z, int64_t w))_func)(location, x, y, z, w);
}
void gllCall_glUniform4i64NV(void *_func, int32_t location, int64_t x, int64_t y, int64_t z, int64_t w) {
	((void (*)(int32_t location, int64_t x, int64_t y, int64_t z, int64_t w))_func)(location, x, y, z, w);
}
void gllCall_glUniform4i64vARB(void *_func, int32_t location, int32_t count, int64_t *value) {
	((void (*)(int32_t location, int32_t count, int64_t *value))_func)(location, count, value);
}
void gllCall_glUniform4i64vNV(void *_func, int32_t location, int32_t count, int64_t *value) {
	((void (*)(int32_t location, int32_t count, int64_t *value))_func)(location, count, value);
}
void gllCall_glUniform4iARB(void *_func, int32_t location, int32_t v0, int32_t v1, int32_t v2, int32_t v3) {
	((void (*)(int32_t location, int32_t v0, int32_t v1, int32_t v2, int32_t v3))_func)(location, v0, v1, v2, v3);
}
void gllCall_glUniform4iv(void *_func, int32_t location, int32_t count, int32_t *value) {
	((void (*)(int32_t location, int32_t count, int32_t *value))_func)(location, count, value);
}
void gllCall_glUniform4ivARB(void *_func, int32_t location, int32_t count, int32_t *value) {
	((void (*)(int32_t location, int32_t count, int32_t *value))_func)(location, count, value);
}
void gllCall_glUniform4ui(void *_func, int32_t location, uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3) {
	((void (*)(int32_t location, uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3))_func)(location, v0, v1, v2, v3);
}
void gllCall_glUniform4ui64ARB(void *_func, int32_t location, uint64_t x, uint64_t y, uint64_t z, uint64_t w) {
	((void (*)(int32_t location, uint64_t x, uint64_t y, uint64_t z, uint64_t w))_func)(location, x, y, z, w);
}
void gllCall_glUniform4ui64NV(void *_func, int32_t location, uint64_t x, uint64_t y, uint64_t z, uint64_t w) {
	((void (*)(int32_t location, uint64_t x, uint64_t y, uint64_t z, uint64_t w))_func)(location, x, y, z, w);
}
void gllCall_glUniform4ui64vARB(void *_func, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(int32_t location, int32_t count, uint64_t *value))_func)(location, count, value);
}
void gllCall_glUniform4ui64vNV(void *_func, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(int32_t location, int32_t count, uint64_t *value))_func)(location, count, value);
}
void gllCall_glUniform4uiEXT(void *_func, int32_t location, uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3) {
	((void (*)(int32_t location, uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3))_func)(location, v0, v1, v2, v3);
}
void gllCall_glUniform4uiv(void *_func, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(int32_t location, int32_t count, uint32_t *value))_func)(location, count, value);
}
void gllCall_glUniform4uivEXT(void *_func, int32_t location, int32_t count, uint32_t *value) {
	((void (*)(int32_t location, int32_t count, uint32_t *value))_func)(location, count, value);
}
void gllCall_glUniformBlockBinding(void *_func, uint32_t program, uint32_t uniformBlockIndex, uint32_t uniformBlockBinding) {
	((void (*)(uint32_t program, uint32_t uniformBlockIndex, uint32_t uniformBlockBinding))_func)(program, uniformBlockIndex, uniformBlockBinding);
}
void gllCall_glUniformBufferEXT(void *_func, uint32_t program, int32_t location, uint32_t buffer) {
	((void (*)(uint32_t program, int32_t location, uint32_t buffer))_func)(program, location, buffer);
}
void gllCall_glUniformHandleui64ARB(void *_func, int32_t location, uint64_t value) {
	((void (*)(int32_t location, uint64_t value))_func)(location, value);
}
void gllCall_glUniformHandleui64IMG(void *_func, int32_t location, uint64_t value) {
	((void (*)(int32_t location, uint64_t value))_func)(location, value);
}
void gllCall_glUniformHandleui64NV(void *_func, int32_t location, uint64_t value) {
	((void (*)(int32_t location, uint64_t value))_func)(location, value);
}
void gllCall_glUniformHandleui64vARB(void *_func, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(int32_t location, int32_t count, uint64_t *value))_func)(location, count, value);
}
void gllCall_glUniformHandleui64vIMG(void *_func, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(int32_t location, int32_t count, uint64_t *value))_func)(location, count, value);
}
void gllCall_glUniformHandleui64vNV(void *_func, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(int32_t location, int32_t count, uint64_t *value))_func)(location, count, value);
}
void gllCall_glUniformMatrix2dv(void *_func, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, double *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix2fv(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix2fvARB(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix2x3dv(void *_func, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, double *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix2x3fv(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix2x3fvNV(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix2x4dv(void *_func, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, double *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix2x4fv(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix2x4fvNV(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix3dv(void *_func, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, double *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix3fv(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix3fvARB(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix3x2dv(void *_func, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, double *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix3x2fv(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix3x2fvNV(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix3x4dv(void *_func, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, double *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix3x4fv(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix3x4fvNV(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix4dv(void *_func, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, double *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix4fv(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix4fvARB(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix4x2dv(void *_func, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, double *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix4x2fv(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix4x2fvNV(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix4x3dv(void *_func, int32_t location, int32_t count, _Bool transpose, double *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, double *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix4x3fv(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformMatrix4x3fvNV(void *_func, int32_t location, int32_t count, _Bool transpose, float *value) {
	((void (*)(int32_t location, int32_t count, _Bool transpose, float *value))_func)(location, count, transpose, value);
}
void gllCall_glUniformSubroutinesuiv(void *_func, uint32_t shadertype, int32_t count, uint32_t *indices) {
	((void (*)(uint32_t shadertype, int32_t count, uint32_t *indices))_func)(shadertype, count, indices);
}
void gllCall_glUniformui64NV(void *_func, int32_t location, uint64_t value) {
	((void (*)(int32_t location, uint64_t value))_func)(location, value);
}
void gllCall_glUniformui64vNV(void *_func, int32_t location, int32_t count, uint64_t *value) {
	((void (*)(int32_t location, int32_t count, uint64_t *value))_func)(location, count, value);
}
void gllCall_glUnlockArraysEXT(void *_func) {
	((void (*)())_func)();
}
_Bool gllCall_glUnmapBuffer(void *_func, uint32_t target) {
	return ((_Bool (*)(uint32_t target))_func)(target);
}
_Bool gllCall_glUnmapBufferARB(void *_func, uint32_t target) {
	return ((_Bool (*)(uint32_t target))_func)(target);
}
_Bool gllCall_glUnmapBufferOES(void *_func, uint32_t target) {
	return ((_Bool (*)(uint32_t target))_func)(target);
}
_Bool gllCall_glUnmapNamedBuffer(void *_func, uint32_t buffer) {
	return ((_Bool (*)(uint32_t buffer))_func)(buffer);
}
_Bool gllCall_glUnmapNamedBufferEXT(void *_func, uint32_t buffer) {
	return ((_Bool (*)(uint32_t buffer))_func)(buffer);
}
void gllCall_glUnmapObjectBufferATI(void *_func, uint32_t buffer) {
	((void (*)(uint32_t buffer))_func)(buffer);
}
void gllCall_glUnmapTexture2DINTEL(void *_func, uint32_t texture, int32_t level) {
	((void (*)(uint32_t texture, int32_t level))_func)(texture, level);
}
void gllCall_glUpdateObjectBufferATI(void *_func, uint32_t buffer, uint32_t offset, int32_t size, void *pointer, uint32_t preserve) {
	((void (*)(uint32_t buffer, uint32_t offset, int32_t size, void *pointer, uint32_t preserve))_func)(buffer, offset, size, pointer, preserve);
}
void gllCall_glUploadGpuMaskNVX(void *_func, uint32_t mask) {
	((void (*)(uint32_t mask))_func)(mask);
}
void gllCall_glUseProgram(void *_func, uint32_t program) {
	((void (*)(uint32_t program))_func)(program);
}
void gllCall_glUseProgramObjectARB(void *_func, GLhandleARB programObj) {
	((void (*)(GLhandleARB programObj))_func)(programObj);
}
void gllCall_glUseProgramStages(void *_func, uint32_t pipeline, uint32_t stages, uint32_t program) {
	((void (*)(uint32_t pipeline, uint32_t stages, uint32_t program))_func)(pipeline, stages, program);
}
void gllCall_glUseProgramStagesEXT(void *_func, uint32_t pipeline, uint32_t stages, uint32_t program) {
	((void (*)(uint32_t pipeline, uint32_t stages, uint32_t program))_func)(pipeline, stages, program);
}
void gllCall_glUseShaderProgramEXT(void *_func, uint32_t type, uint32_t program) {
	((void (*)(uint32_t type, uint32_t program))_func)(type, program);
}
void gllCall_glVDPAUFiniNV(void *_func) {
	((void (*)())_func)();
}
void gllCall_glVDPAUGetSurfaceivNV(void *_func, intptr_t surface, uint32_t pname, int32_t count, int32_t *length, int32_t *values) {
	((void (*)(intptr_t surface, uint32_t pname, int32_t count, int32_t *length, int32_t *values))_func)(surface, pname, count, length, values);
}
void gllCall_glVDPAUInitNV(void *_func, void *vdpDevice, void *getProcAddress) {
	((void (*)(void *vdpDevice, void *getProcAddress))_func)(vdpDevice, getProcAddress);
}
_Bool gllCall_glVDPAUIsSurfaceNV(void *_func, intptr_t surface) {
	return ((_Bool (*)(intptr_t surface))_func)(surface);
}
void gllCall_glVDPAUMapSurfacesNV(void *_func, int32_t numSurfaces, intptr_t *surfaces) {
	((void (*)(int32_t numSurfaces, intptr_t *surfaces))_func)(numSurfaces, surfaces);
}
intptr_t gllCall_glVDPAURegisterOutputSurfaceNV(void *_func, void *vdpSurface, uint32_t target, int32_t numTextureNames, uint32_t *textureNames) {
	return ((intptr_t (*)(void *vdpSurface, uint32_t target, int32_t numTextureNames, uint32_t *textureNames))_func)(vdpSurface, target, numTextureNames, textureNames);
}
intptr_t gllCall_glVDPAURegisterVideoSurfaceNV(void *_func, void *vdpSurface, uint32_t target, int32_t numTextureNames, uint32_t *textureNames) {
	return ((intptr_t (*)(void *vdpSurface, uint32_t target, int32_t numTextureNames, uint32_t *textureNames))_func)(vdpSurface, target, numTextureNames, textureNames);
}
intptr_t gllCall_glVDPAURegisterVideoSurfaceWithPictureStructureNV(void *_func, void *vdpSurface, uint32_t target, int32_t numTextureNames, uint32_t *textureNames, _Bool isFrameStructure) {
	return ((intptr_t (*)(void *vdpSurface, uint32_t target, int32_t numTextureNames, uint32_t *textureNames, _Bool isFrameStructure))_func)(vdpSurface, target, numTextureNames, textureNames, isFrameStructure);
}
void gllCall_glVDPAUSurfaceAccessNV(void *_func, intptr_t surface, uint32_t access) {
	((void (*)(intptr_t surface, uint32_t access))_func)(surface, access);
}
void gllCall_glVDPAUUnmapSurfacesNV(void *_func, int32_t numSurface, intptr_t *surfaces) {
	((void (*)(int32_t numSurface, intptr_t *surfaces))_func)(numSurface, surfaces);
}
void gllCall_glVDPAUUnregisterSurfaceNV(void *_func, intptr_t surface) {
	((void (*)(intptr_t surface))_func)(surface);
}
void gllCall_glValidateProgram(void *_func, uint32_t program) {
	((void (*)(uint32_t program))_func)(program);
}
void gllCall_glValidateProgramARB(void *_func, GLhandleARB programObj) {
	((void (*)(GLhandleARB programObj))_func)(programObj);
}
void gllCall_glValidateProgramPipeline(void *_func, uint32_t pipeline) {
	((void (*)(uint32_t pipeline))_func)(pipeline);
}
void gllCall_glValidateProgramPipelineEXT(void *_func, uint32_t pipeline) {
	((void (*)(uint32_t pipeline))_func)(pipeline);
}
void gllCall_glVariantArrayObjectATI(void *_func, uint32_t id, uint32_t type, int32_t stride, uint32_t buffer, uint32_t offset) {
	((void (*)(uint32_t id, uint32_t type, int32_t stride, uint32_t buffer, uint32_t offset))_func)(id, type, stride, buffer, offset);
}
void gllCall_glVariantPointerEXT(void *_func, uint32_t id, uint32_t type, uint32_t stride, void *addr) {
	((void (*)(uint32_t id, uint32_t type, uint32_t stride, void *addr))_func)(id, type, stride, addr);
}
void gllCall_glVariantbvEXT(void *_func, uint32_t id, int8_t *addr) {
	((void (*)(uint32_t id, int8_t *addr))_func)(id, addr);
}
void gllCall_glVariantdvEXT(void *_func, uint32_t id, double *addr) {
	((void (*)(uint32_t id, double *addr))_func)(id, addr);
}
void gllCall_glVariantfvEXT(void *_func, uint32_t id, float *addr) {
	((void (*)(uint32_t id, float *addr))_func)(id, addr);
}
void gllCall_glVariantivEXT(void *_func, uint32_t id, int32_t *addr) {
	((void (*)(uint32_t id, int32_t *addr))_func)(id, addr);
}
void gllCall_glVariantsvEXT(void *_func, uint32_t id, int16_t *addr) {
	((void (*)(uint32_t id, int16_t *addr))_func)(id, addr);
}
void gllCall_glVariantubvEXT(void *_func, uint32_t id, uint8_t *addr) {
	((void (*)(uint32_t id, uint8_t *addr))_func)(id, addr);
}
void gllCall_glVariantuivEXT(void *_func, uint32_t id, uint32_t *addr) {
	((void (*)(uint32_t id, uint32_t *addr))_func)(id, addr);
}
void gllCall_glVariantusvEXT(void *_func, uint32_t id, uint16_t *addr) {
	((void (*)(uint32_t id, uint16_t *addr))_func)(id, addr);
}
void gllCall_glVertex2bOES(void *_func, int8_t x, int8_t y) {
	((void (*)(int8_t x, int8_t y))_func)(x, y);
}
void gllCall_glVertex2bvOES(void *_func, int8_t *coords) {
	((void (*)(int8_t *coords))_func)(coords);
}
void gllCall_glVertex2d(void *_func, double x, double y) {
	((void (*)(double x, double y))_func)(x, y);
}
void gllCall_glVertex2dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glVertex2f(void *_func, float x, float y) {
	((void (*)(float x, float y))_func)(x, y);
}
void gllCall_glVertex2fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glVertex2hNV(void *_func, uint16_t x, uint16_t y) {
	((void (*)(uint16_t x, uint16_t y))_func)(x, y);
}
void gllCall_glVertex2hvNV(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glVertex2i(void *_func, int32_t x, int32_t y) {
	((void (*)(int32_t x, int32_t y))_func)(x, y);
}
void gllCall_glVertex2iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glVertex2s(void *_func, int16_t x, int16_t y) {
	((void (*)(int16_t x, int16_t y))_func)(x, y);
}
void gllCall_glVertex2sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glVertex2xOES(void *_func, int32_t x) {
	((void (*)(int32_t x))_func)(x);
}
void gllCall_glVertex2xvOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glVertex3bOES(void *_func, int8_t x, int8_t y, int8_t z) {
	((void (*)(int8_t x, int8_t y, int8_t z))_func)(x, y, z);
}
void gllCall_glVertex3bvOES(void *_func, int8_t *coords) {
	((void (*)(int8_t *coords))_func)(coords);
}
void gllCall_glVertex3d(void *_func, double x, double y, double z) {
	((void (*)(double x, double y, double z))_func)(x, y, z);
}
void gllCall_glVertex3dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glVertex3f(void *_func, float x, float y, float z) {
	((void (*)(float x, float y, float z))_func)(x, y, z);
}
void gllCall_glVertex3fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glVertex3hNV(void *_func, uint16_t x, uint16_t y, uint16_t z) {
	((void (*)(uint16_t x, uint16_t y, uint16_t z))_func)(x, y, z);
}
void gllCall_glVertex3hvNV(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glVertex3i(void *_func, int32_t x, int32_t y, int32_t z) {
	((void (*)(int32_t x, int32_t y, int32_t z))_func)(x, y, z);
}
void gllCall_glVertex3iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glVertex3s(void *_func, int16_t x, int16_t y, int16_t z) {
	((void (*)(int16_t x, int16_t y, int16_t z))_func)(x, y, z);
}
void gllCall_glVertex3sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glVertex3xOES(void *_func, int32_t x, int32_t y) {
	((void (*)(int32_t x, int32_t y))_func)(x, y);
}
void gllCall_glVertex3xvOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glVertex4bOES(void *_func, int8_t x, int8_t y, int8_t z, int8_t w) {
	((void (*)(int8_t x, int8_t y, int8_t z, int8_t w))_func)(x, y, z, w);
}
void gllCall_glVertex4bvOES(void *_func, int8_t *coords) {
	((void (*)(int8_t *coords))_func)(coords);
}
void gllCall_glVertex4d(void *_func, double x, double y, double z, double w) {
	((void (*)(double x, double y, double z, double w))_func)(x, y, z, w);
}
void gllCall_glVertex4dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glVertex4f(void *_func, float x, float y, float z, float w) {
	((void (*)(float x, float y, float z, float w))_func)(x, y, z, w);
}
void gllCall_glVertex4fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glVertex4hNV(void *_func, uint16_t x, uint16_t y, uint16_t z, uint16_t w) {
	((void (*)(uint16_t x, uint16_t y, uint16_t z, uint16_t w))_func)(x, y, z, w);
}
void gllCall_glVertex4hvNV(void *_func, uint16_t *v) {
	((void (*)(uint16_t *v))_func)(v);
}
void gllCall_glVertex4i(void *_func, int32_t x, int32_t y, int32_t z, int32_t w) {
	((void (*)(int32_t x, int32_t y, int32_t z, int32_t w))_func)(x, y, z, w);
}
void gllCall_glVertex4iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glVertex4s(void *_func, int16_t x, int16_t y, int16_t z, int16_t w) {
	((void (*)(int16_t x, int16_t y, int16_t z, int16_t w))_func)(x, y, z, w);
}
void gllCall_glVertex4sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glVertex4xOES(void *_func, int32_t x, int32_t y, int32_t z) {
	((void (*)(int32_t x, int32_t y, int32_t z))_func)(x, y, z);
}
void gllCall_glVertex4xvOES(void *_func, int32_t *coords) {
	((void (*)(int32_t *coords))_func)(coords);
}
void gllCall_glVertexArrayAttribBinding(void *_func, uint32_t vaobj, uint32_t attribindex, uint32_t bindingindex) {
	((void (*)(uint32_t vaobj, uint32_t attribindex, uint32_t bindingindex))_func)(vaobj, attribindex, bindingindex);
}
void gllCall_glVertexArrayAttribFormat(void *_func, uint32_t vaobj, uint32_t attribindex, int32_t size, uint32_t type, _Bool normalized, uint32_t relativeoffset) {
	((void (*)(uint32_t vaobj, uint32_t attribindex, int32_t size, uint32_t type, _Bool normalized, uint32_t relativeoffset))_func)(vaobj, attribindex, size, type, normalized, relativeoffset);
}
void gllCall_glVertexArrayAttribIFormat(void *_func, uint32_t vaobj, uint32_t attribindex, int32_t size, uint32_t type, uint32_t relativeoffset) {
	((void (*)(uint32_t vaobj, uint32_t attribindex, int32_t size, uint32_t type, uint32_t relativeoffset))_func)(vaobj, attribindex, size, type, relativeoffset);
}
void gllCall_glVertexArrayAttribLFormat(void *_func, uint32_t vaobj, uint32_t attribindex, int32_t size, uint32_t type, uint32_t relativeoffset) {
	((void (*)(uint32_t vaobj, uint32_t attribindex, int32_t size, uint32_t type, uint32_t relativeoffset))_func)(vaobj, attribindex, size, type, relativeoffset);
}
void gllCall_glVertexArrayBindVertexBufferEXT(void *_func, uint32_t vaobj, uint32_t bindingindex, uint32_t buffer, intptr_t offset, int32_t stride) {
	((void (*)(uint32_t vaobj, uint32_t bindingindex, uint32_t buffer, intptr_t offset, int32_t stride))_func)(vaobj, bindingindex, buffer, offset, stride);
}
void gllCall_glVertexArrayBindingDivisor(void *_func, uint32_t vaobj, uint32_t bindingindex, uint32_t divisor) {
	((void (*)(uint32_t vaobj, uint32_t bindingindex, uint32_t divisor))_func)(vaobj, bindingindex, divisor);
}
void gllCall_glVertexArrayColorOffsetEXT(void *_func, uint32_t vaobj, uint32_t buffer, int32_t size, uint32_t type, int32_t stride, intptr_t offset) {
	((void (*)(uint32_t vaobj, uint32_t buffer, int32_t size, uint32_t type, int32_t stride, intptr_t offset))_func)(vaobj, buffer, size, type, stride, offset);
}
void gllCall_glVertexArrayEdgeFlagOffsetEXT(void *_func, uint32_t vaobj, uint32_t buffer, int32_t stride, intptr_t offset) {
	((void (*)(uint32_t vaobj, uint32_t buffer, int32_t stride, intptr_t offset))_func)(vaobj, buffer, stride, offset);
}
void gllCall_glVertexArrayElementBuffer(void *_func, uint32_t vaobj, uint32_t buffer) {
	((void (*)(uint32_t vaobj, uint32_t buffer))_func)(vaobj, buffer);
}
void gllCall_glVertexArrayFogCoordOffsetEXT(void *_func, uint32_t vaobj, uint32_t buffer, uint32_t type, int32_t stride, intptr_t offset) {
	((void (*)(uint32_t vaobj, uint32_t buffer, uint32_t type, int32_t stride, intptr_t offset))_func)(vaobj, buffer, type, stride, offset);
}
void gllCall_glVertexArrayIndexOffsetEXT(void *_func, uint32_t vaobj, uint32_t buffer, uint32_t type, int32_t stride, intptr_t offset) {
	((void (*)(uint32_t vaobj, uint32_t buffer, uint32_t type, int32_t stride, intptr_t offset))_func)(vaobj, buffer, type, stride, offset);
}
void gllCall_glVertexArrayMultiTexCoordOffsetEXT(void *_func, uint32_t vaobj, uint32_t buffer, uint32_t texunit, int32_t size, uint32_t type, int32_t stride, intptr_t offset) {
	((void (*)(uint32_t vaobj, uint32_t buffer, uint32_t texunit, int32_t size, uint32_t type, int32_t stride, intptr_t offset))_func)(vaobj, buffer, texunit, size, type, stride, offset);
}
void gllCall_glVertexArrayNormalOffsetEXT(void *_func, uint32_t vaobj, uint32_t buffer, uint32_t type, int32_t stride, intptr_t offset) {
	((void (*)(uint32_t vaobj, uint32_t buffer, uint32_t type, int32_t stride, intptr_t offset))_func)(vaobj, buffer, type, stride, offset);
}
void gllCall_glVertexArrayParameteriAPPLE(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glVertexArrayRangeAPPLE(void *_func, int32_t length, void *pointer) {
	((void (*)(int32_t length, void *pointer))_func)(length, pointer);
}
void gllCall_glVertexArrayRangeNV(void *_func, int32_t length, void *pointer) {
	((void (*)(int32_t length, void *pointer))_func)(length, pointer);
}
void gllCall_glVertexArraySecondaryColorOffsetEXT(void *_func, uint32_t vaobj, uint32_t buffer, int32_t size, uint32_t type, int32_t stride, intptr_t offset) {
	((void (*)(uint32_t vaobj, uint32_t buffer, int32_t size, uint32_t type, int32_t stride, intptr_t offset))_func)(vaobj, buffer, size, type, stride, offset);
}
void gllCall_glVertexArrayTexCoordOffsetEXT(void *_func, uint32_t vaobj, uint32_t buffer, int32_t size, uint32_t type, int32_t stride, intptr_t offset) {
	((void (*)(uint32_t vaobj, uint32_t buffer, int32_t size, uint32_t type, int32_t stride, intptr_t offset))_func)(vaobj, buffer, size, type, stride, offset);
}
void gllCall_glVertexArrayVertexAttribBindingEXT(void *_func, uint32_t vaobj, uint32_t attribindex, uint32_t bindingindex) {
	((void (*)(uint32_t vaobj, uint32_t attribindex, uint32_t bindingindex))_func)(vaobj, attribindex, bindingindex);
}
void gllCall_glVertexArrayVertexAttribDivisorEXT(void *_func, uint32_t vaobj, uint32_t index, uint32_t divisor) {
	((void (*)(uint32_t vaobj, uint32_t index, uint32_t divisor))_func)(vaobj, index, divisor);
}
void gllCall_glVertexArrayVertexAttribFormatEXT(void *_func, uint32_t vaobj, uint32_t attribindex, int32_t size, uint32_t type, _Bool normalized, uint32_t relativeoffset) {
	((void (*)(uint32_t vaobj, uint32_t attribindex, int32_t size, uint32_t type, _Bool normalized, uint32_t relativeoffset))_func)(vaobj, attribindex, size, type, normalized, relativeoffset);
}
void gllCall_glVertexArrayVertexAttribIFormatEXT(void *_func, uint32_t vaobj, uint32_t attribindex, int32_t size, uint32_t type, uint32_t relativeoffset) {
	((void (*)(uint32_t vaobj, uint32_t attribindex, int32_t size, uint32_t type, uint32_t relativeoffset))_func)(vaobj, attribindex, size, type, relativeoffset);
}
void gllCall_glVertexArrayVertexAttribIOffsetEXT(void *_func, uint32_t vaobj, uint32_t buffer, uint32_t index, int32_t size, uint32_t type, int32_t stride, intptr_t offset) {
	((void (*)(uint32_t vaobj, uint32_t buffer, uint32_t index, int32_t size, uint32_t type, int32_t stride, intptr_t offset))_func)(vaobj, buffer, index, size, type, stride, offset);
}
void gllCall_glVertexArrayVertexAttribLFormatEXT(void *_func, uint32_t vaobj, uint32_t attribindex, int32_t size, uint32_t type, uint32_t relativeoffset) {
	((void (*)(uint32_t vaobj, uint32_t attribindex, int32_t size, uint32_t type, uint32_t relativeoffset))_func)(vaobj, attribindex, size, type, relativeoffset);
}
void gllCall_glVertexArrayVertexAttribLOffsetEXT(void *_func, uint32_t vaobj, uint32_t buffer, uint32_t index, int32_t size, uint32_t type, int32_t stride, intptr_t offset) {
	((void (*)(uint32_t vaobj, uint32_t buffer, uint32_t index, int32_t size, uint32_t type, int32_t stride, intptr_t offset))_func)(vaobj, buffer, index, size, type, stride, offset);
}
void gllCall_glVertexArrayVertexAttribOffsetEXT(void *_func, uint32_t vaobj, uint32_t buffer, uint32_t index, int32_t size, uint32_t type, _Bool normalized, int32_t stride, intptr_t offset) {
	((void (*)(uint32_t vaobj, uint32_t buffer, uint32_t index, int32_t size, uint32_t type, _Bool normalized, int32_t stride, intptr_t offset))_func)(vaobj, buffer, index, size, type, normalized, stride, offset);
}
void gllCall_glVertexArrayVertexBindingDivisorEXT(void *_func, uint32_t vaobj, uint32_t bindingindex, uint32_t divisor) {
	((void (*)(uint32_t vaobj, uint32_t bindingindex, uint32_t divisor))_func)(vaobj, bindingindex, divisor);
}
void gllCall_glVertexArrayVertexBuffer(void *_func, uint32_t vaobj, uint32_t bindingindex, uint32_t buffer, intptr_t offset, int32_t stride) {
	((void (*)(uint32_t vaobj, uint32_t bindingindex, uint32_t buffer, intptr_t offset, int32_t stride))_func)(vaobj, bindingindex, buffer, offset, stride);
}
void gllCall_glVertexArrayVertexBuffers(void *_func, uint32_t vaobj, uint32_t first, int32_t count, uint32_t *buffers, intptr_t *offsets, int32_t *strides) {
	((void (*)(uint32_t vaobj, uint32_t first, int32_t count, uint32_t *buffers, intptr_t *offsets, int32_t *strides))_func)(vaobj, first, count, buffers, offsets, strides);
}
void gllCall_glVertexArrayVertexOffsetEXT(void *_func, uint32_t vaobj, uint32_t buffer, int32_t size, uint32_t type, int32_t stride, intptr_t offset) {
	((void (*)(uint32_t vaobj, uint32_t buffer, int32_t size, uint32_t type, int32_t stride, intptr_t offset))_func)(vaobj, buffer, size, type, stride, offset);
}
void gllCall_glVertexAttrib1d(void *_func, uint32_t index, double x) {
	((void (*)(uint32_t index, double x))_func)(index, x);
}
void gllCall_glVertexAttrib1dARB(void *_func, uint32_t index, double x) {
	((void (*)(uint32_t index, double x))_func)(index, x);
}
void gllCall_glVertexAttrib1dNV(void *_func, uint32_t index, double x) {
	((void (*)(uint32_t index, double x))_func)(index, x);
}
void gllCall_glVertexAttrib1dv(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttrib1dvARB(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttrib1dvNV(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttrib1f(void *_func, uint32_t index, float x) {
	((void (*)(uint32_t index, float x))_func)(index, x);
}
void gllCall_glVertexAttrib1fARB(void *_func, uint32_t index, float x) {
	((void (*)(uint32_t index, float x))_func)(index, x);
}
void gllCall_glVertexAttrib1fNV(void *_func, uint32_t index, float x) {
	((void (*)(uint32_t index, float x))_func)(index, x);
}
void gllCall_glVertexAttrib1fv(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glVertexAttrib1fvARB(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glVertexAttrib1fvNV(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glVertexAttrib1hNV(void *_func, uint32_t index, uint16_t x) {
	((void (*)(uint32_t index, uint16_t x))_func)(index, x);
}
void gllCall_glVertexAttrib1hvNV(void *_func, uint32_t index, uint16_t *v) {
	((void (*)(uint32_t index, uint16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib1s(void *_func, uint32_t index, int16_t x) {
	((void (*)(uint32_t index, int16_t x))_func)(index, x);
}
void gllCall_glVertexAttrib1sARB(void *_func, uint32_t index, int16_t x) {
	((void (*)(uint32_t index, int16_t x))_func)(index, x);
}
void gllCall_glVertexAttrib1sNV(void *_func, uint32_t index, int16_t x) {
	((void (*)(uint32_t index, int16_t x))_func)(index, x);
}
void gllCall_glVertexAttrib1sv(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib1svARB(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib1svNV(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib2d(void *_func, uint32_t index, double x, double y) {
	((void (*)(uint32_t index, double x, double y))_func)(index, x, y);
}
void gllCall_glVertexAttrib2dARB(void *_func, uint32_t index, double x, double y) {
	((void (*)(uint32_t index, double x, double y))_func)(index, x, y);
}
void gllCall_glVertexAttrib2dNV(void *_func, uint32_t index, double x, double y) {
	((void (*)(uint32_t index, double x, double y))_func)(index, x, y);
}
void gllCall_glVertexAttrib2dv(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttrib2dvARB(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttrib2dvNV(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttrib2f(void *_func, uint32_t index, float x, float y) {
	((void (*)(uint32_t index, float x, float y))_func)(index, x, y);
}
void gllCall_glVertexAttrib2fARB(void *_func, uint32_t index, float x, float y) {
	((void (*)(uint32_t index, float x, float y))_func)(index, x, y);
}
void gllCall_glVertexAttrib2fNV(void *_func, uint32_t index, float x, float y) {
	((void (*)(uint32_t index, float x, float y))_func)(index, x, y);
}
void gllCall_glVertexAttrib2fv(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glVertexAttrib2fvARB(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glVertexAttrib2fvNV(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glVertexAttrib2hNV(void *_func, uint32_t index, uint16_t x, uint16_t y) {
	((void (*)(uint32_t index, uint16_t x, uint16_t y))_func)(index, x, y);
}
void gllCall_glVertexAttrib2hvNV(void *_func, uint32_t index, uint16_t *v) {
	((void (*)(uint32_t index, uint16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib2s(void *_func, uint32_t index, int16_t x, int16_t y) {
	((void (*)(uint32_t index, int16_t x, int16_t y))_func)(index, x, y);
}
void gllCall_glVertexAttrib2sARB(void *_func, uint32_t index, int16_t x, int16_t y) {
	((void (*)(uint32_t index, int16_t x, int16_t y))_func)(index, x, y);
}
void gllCall_glVertexAttrib2sNV(void *_func, uint32_t index, int16_t x, int16_t y) {
	((void (*)(uint32_t index, int16_t x, int16_t y))_func)(index, x, y);
}
void gllCall_glVertexAttrib2sv(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib2svARB(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib2svNV(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib3d(void *_func, uint32_t index, double x, double y, double z) {
	((void (*)(uint32_t index, double x, double y, double z))_func)(index, x, y, z);
}
void gllCall_glVertexAttrib3dARB(void *_func, uint32_t index, double x, double y, double z) {
	((void (*)(uint32_t index, double x, double y, double z))_func)(index, x, y, z);
}
void gllCall_glVertexAttrib3dNV(void *_func, uint32_t index, double x, double y, double z) {
	((void (*)(uint32_t index, double x, double y, double z))_func)(index, x, y, z);
}
void gllCall_glVertexAttrib3dv(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttrib3dvARB(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttrib3dvNV(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttrib3f(void *_func, uint32_t index, float x, float y, float z) {
	((void (*)(uint32_t index, float x, float y, float z))_func)(index, x, y, z);
}
void gllCall_glVertexAttrib3fARB(void *_func, uint32_t index, float x, float y, float z) {
	((void (*)(uint32_t index, float x, float y, float z))_func)(index, x, y, z);
}
void gllCall_glVertexAttrib3fNV(void *_func, uint32_t index, float x, float y, float z) {
	((void (*)(uint32_t index, float x, float y, float z))_func)(index, x, y, z);
}
void gllCall_glVertexAttrib3fv(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glVertexAttrib3fvARB(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glVertexAttrib3fvNV(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glVertexAttrib3hNV(void *_func, uint32_t index, uint16_t x, uint16_t y, uint16_t z) {
	((void (*)(uint32_t index, uint16_t x, uint16_t y, uint16_t z))_func)(index, x, y, z);
}
void gllCall_glVertexAttrib3hvNV(void *_func, uint32_t index, uint16_t *v) {
	((void (*)(uint32_t index, uint16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib3s(void *_func, uint32_t index, int16_t x, int16_t y, int16_t z) {
	((void (*)(uint32_t index, int16_t x, int16_t y, int16_t z))_func)(index, x, y, z);
}
void gllCall_glVertexAttrib3sARB(void *_func, uint32_t index, int16_t x, int16_t y, int16_t z) {
	((void (*)(uint32_t index, int16_t x, int16_t y, int16_t z))_func)(index, x, y, z);
}
void gllCall_glVertexAttrib3sNV(void *_func, uint32_t index, int16_t x, int16_t y, int16_t z) {
	((void (*)(uint32_t index, int16_t x, int16_t y, int16_t z))_func)(index, x, y, z);
}
void gllCall_glVertexAttrib3sv(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib3svARB(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib3svNV(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4Nbv(void *_func, uint32_t index, int8_t *v) {
	((void (*)(uint32_t index, int8_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4NbvARB(void *_func, uint32_t index, int8_t *v) {
	((void (*)(uint32_t index, int8_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4Niv(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4NivARB(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4Nsv(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4NsvARB(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4Nub(void *_func, uint32_t index, uint8_t x, uint8_t y, uint8_t z, uint8_t w) {
	((void (*)(uint32_t index, uint8_t x, uint8_t y, uint8_t z, uint8_t w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttrib4NubARB(void *_func, uint32_t index, uint8_t x, uint8_t y, uint8_t z, uint8_t w) {
	((void (*)(uint32_t index, uint8_t x, uint8_t y, uint8_t z, uint8_t w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttrib4Nubv(void *_func, uint32_t index, uint8_t *v) {
	((void (*)(uint32_t index, uint8_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4NubvARB(void *_func, uint32_t index, uint8_t *v) {
	((void (*)(uint32_t index, uint8_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4Nuiv(void *_func, uint32_t index, uint32_t *v) {
	((void (*)(uint32_t index, uint32_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4NuivARB(void *_func, uint32_t index, uint32_t *v) {
	((void (*)(uint32_t index, uint32_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4Nusv(void *_func, uint32_t index, uint16_t *v) {
	((void (*)(uint32_t index, uint16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4NusvARB(void *_func, uint32_t index, uint16_t *v) {
	((void (*)(uint32_t index, uint16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4bv(void *_func, uint32_t index, int8_t *v) {
	((void (*)(uint32_t index, int8_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4bvARB(void *_func, uint32_t index, int8_t *v) {
	((void (*)(uint32_t index, int8_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4d(void *_func, uint32_t index, double x, double y, double z, double w) {
	((void (*)(uint32_t index, double x, double y, double z, double w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttrib4dARB(void *_func, uint32_t index, double x, double y, double z, double w) {
	((void (*)(uint32_t index, double x, double y, double z, double w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttrib4dNV(void *_func, uint32_t index, double x, double y, double z, double w) {
	((void (*)(uint32_t index, double x, double y, double z, double w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttrib4dv(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttrib4dvARB(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttrib4dvNV(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttrib4f(void *_func, uint32_t index, float x, float y, float z, float w) {
	((void (*)(uint32_t index, float x, float y, float z, float w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttrib4fARB(void *_func, uint32_t index, float x, float y, float z, float w) {
	((void (*)(uint32_t index, float x, float y, float z, float w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttrib4fNV(void *_func, uint32_t index, float x, float y, float z, float w) {
	((void (*)(uint32_t index, float x, float y, float z, float w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttrib4fv(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glVertexAttrib4fvARB(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glVertexAttrib4fvNV(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glVertexAttrib4hNV(void *_func, uint32_t index, uint16_t x, uint16_t y, uint16_t z, uint16_t w) {
	((void (*)(uint32_t index, uint16_t x, uint16_t y, uint16_t z, uint16_t w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttrib4hvNV(void *_func, uint32_t index, uint16_t *v) {
	((void (*)(uint32_t index, uint16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4iv(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4ivARB(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4s(void *_func, uint32_t index, int16_t x, int16_t y, int16_t z, int16_t w) {
	((void (*)(uint32_t index, int16_t x, int16_t y, int16_t z, int16_t w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttrib4sARB(void *_func, uint32_t index, int16_t x, int16_t y, int16_t z, int16_t w) {
	((void (*)(uint32_t index, int16_t x, int16_t y, int16_t z, int16_t w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttrib4sNV(void *_func, uint32_t index, int16_t x, int16_t y, int16_t z, int16_t w) {
	((void (*)(uint32_t index, int16_t x, int16_t y, int16_t z, int16_t w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttrib4sv(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4svARB(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4svNV(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4ubNV(void *_func, uint32_t index, uint8_t x, uint8_t y, uint8_t z, uint8_t w) {
	((void (*)(uint32_t index, uint8_t x, uint8_t y, uint8_t z, uint8_t w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttrib4ubv(void *_func, uint32_t index, uint8_t *v) {
	((void (*)(uint32_t index, uint8_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4ubvARB(void *_func, uint32_t index, uint8_t *v) {
	((void (*)(uint32_t index, uint8_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4ubvNV(void *_func, uint32_t index, uint8_t *v) {
	((void (*)(uint32_t index, uint8_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4uiv(void *_func, uint32_t index, uint32_t *v) {
	((void (*)(uint32_t index, uint32_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4uivARB(void *_func, uint32_t index, uint32_t *v) {
	((void (*)(uint32_t index, uint32_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4usv(void *_func, uint32_t index, uint16_t *v) {
	((void (*)(uint32_t index, uint16_t *v))_func)(index, v);
}
void gllCall_glVertexAttrib4usvARB(void *_func, uint32_t index, uint16_t *v) {
	((void (*)(uint32_t index, uint16_t *v))_func)(index, v);
}
void gllCall_glVertexAttribArrayObjectATI(void *_func, uint32_t index, int32_t size, uint32_t type, _Bool normalized, int32_t stride, uint32_t buffer, uint32_t offset) {
	((void (*)(uint32_t index, int32_t size, uint32_t type, _Bool normalized, int32_t stride, uint32_t buffer, uint32_t offset))_func)(index, size, type, normalized, stride, buffer, offset);
}
void gllCall_glVertexAttribBinding(void *_func, uint32_t attribindex, uint32_t bindingindex) {
	((void (*)(uint32_t attribindex, uint32_t bindingindex))_func)(attribindex, bindingindex);
}
void gllCall_glVertexAttribDivisor(void *_func, uint32_t index, uint32_t divisor) {
	((void (*)(uint32_t index, uint32_t divisor))_func)(index, divisor);
}
void gllCall_glVertexAttribDivisorANGLE(void *_func, uint32_t index, uint32_t divisor) {
	((void (*)(uint32_t index, uint32_t divisor))_func)(index, divisor);
}
void gllCall_glVertexAttribDivisorARB(void *_func, uint32_t index, uint32_t divisor) {
	((void (*)(uint32_t index, uint32_t divisor))_func)(index, divisor);
}
void gllCall_glVertexAttribDivisorEXT(void *_func, uint32_t index, uint32_t divisor) {
	((void (*)(uint32_t index, uint32_t divisor))_func)(index, divisor);
}
void gllCall_glVertexAttribDivisorNV(void *_func, uint32_t index, uint32_t divisor) {
	((void (*)(uint32_t index, uint32_t divisor))_func)(index, divisor);
}
void gllCall_glVertexAttribFormat(void *_func, uint32_t attribindex, int32_t size, uint32_t type, _Bool normalized, uint32_t relativeoffset) {
	((void (*)(uint32_t attribindex, int32_t size, uint32_t type, _Bool normalized, uint32_t relativeoffset))_func)(attribindex, size, type, normalized, relativeoffset);
}
void gllCall_glVertexAttribFormatNV(void *_func, uint32_t index, int32_t size, uint32_t type, _Bool normalized, int32_t stride) {
	((void (*)(uint32_t index, int32_t size, uint32_t type, _Bool normalized, int32_t stride))_func)(index, size, type, normalized, stride);
}
void gllCall_glVertexAttribI1i(void *_func, uint32_t index, int32_t x) {
	((void (*)(uint32_t index, int32_t x))_func)(index, x);
}
void gllCall_glVertexAttribI1iEXT(void *_func, uint32_t index, int32_t x) {
	((void (*)(uint32_t index, int32_t x))_func)(index, x);
}
void gllCall_glVertexAttribI1iv(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI1ivEXT(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI1ui(void *_func, uint32_t index, uint32_t x) {
	((void (*)(uint32_t index, uint32_t x))_func)(index, x);
}
void gllCall_glVertexAttribI1uiEXT(void *_func, uint32_t index, uint32_t x) {
	((void (*)(uint32_t index, uint32_t x))_func)(index, x);
}
void gllCall_glVertexAttribI1uiv(void *_func, uint32_t index, uint32_t *v) {
	((void (*)(uint32_t index, uint32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI1uivEXT(void *_func, uint32_t index, uint32_t *v) {
	((void (*)(uint32_t index, uint32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI2i(void *_func, uint32_t index, int32_t x, int32_t y) {
	((void (*)(uint32_t index, int32_t x, int32_t y))_func)(index, x, y);
}
void gllCall_glVertexAttribI2iEXT(void *_func, uint32_t index, int32_t x, int32_t y) {
	((void (*)(uint32_t index, int32_t x, int32_t y))_func)(index, x, y);
}
void gllCall_glVertexAttribI2iv(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI2ivEXT(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI2ui(void *_func, uint32_t index, uint32_t x, uint32_t y) {
	((void (*)(uint32_t index, uint32_t x, uint32_t y))_func)(index, x, y);
}
void gllCall_glVertexAttribI2uiEXT(void *_func, uint32_t index, uint32_t x, uint32_t y) {
	((void (*)(uint32_t index, uint32_t x, uint32_t y))_func)(index, x, y);
}
void gllCall_glVertexAttribI2uiv(void *_func, uint32_t index, uint32_t *v) {
	((void (*)(uint32_t index, uint32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI2uivEXT(void *_func, uint32_t index, uint32_t *v) {
	((void (*)(uint32_t index, uint32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI3i(void *_func, uint32_t index, int32_t x, int32_t y, int32_t z) {
	((void (*)(uint32_t index, int32_t x, int32_t y, int32_t z))_func)(index, x, y, z);
}
void gllCall_glVertexAttribI3iEXT(void *_func, uint32_t index, int32_t x, int32_t y, int32_t z) {
	((void (*)(uint32_t index, int32_t x, int32_t y, int32_t z))_func)(index, x, y, z);
}
void gllCall_glVertexAttribI3iv(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI3ivEXT(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI3ui(void *_func, uint32_t index, uint32_t x, uint32_t y, uint32_t z) {
	((void (*)(uint32_t index, uint32_t x, uint32_t y, uint32_t z))_func)(index, x, y, z);
}
void gllCall_glVertexAttribI3uiEXT(void *_func, uint32_t index, uint32_t x, uint32_t y, uint32_t z) {
	((void (*)(uint32_t index, uint32_t x, uint32_t y, uint32_t z))_func)(index, x, y, z);
}
void gllCall_glVertexAttribI3uiv(void *_func, uint32_t index, uint32_t *v) {
	((void (*)(uint32_t index, uint32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI3uivEXT(void *_func, uint32_t index, uint32_t *v) {
	((void (*)(uint32_t index, uint32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI4bv(void *_func, uint32_t index, int8_t *v) {
	((void (*)(uint32_t index, int8_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI4bvEXT(void *_func, uint32_t index, int8_t *v) {
	((void (*)(uint32_t index, int8_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI4i(void *_func, uint32_t index, int32_t x, int32_t y, int32_t z, int32_t w) {
	((void (*)(uint32_t index, int32_t x, int32_t y, int32_t z, int32_t w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttribI4iEXT(void *_func, uint32_t index, int32_t x, int32_t y, int32_t z, int32_t w) {
	((void (*)(uint32_t index, int32_t x, int32_t y, int32_t z, int32_t w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttribI4iv(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI4ivEXT(void *_func, uint32_t index, int32_t *v) {
	((void (*)(uint32_t index, int32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI4sv(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI4svEXT(void *_func, uint32_t index, int16_t *v) {
	((void (*)(uint32_t index, int16_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI4ubv(void *_func, uint32_t index, uint8_t *v) {
	((void (*)(uint32_t index, uint8_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI4ubvEXT(void *_func, uint32_t index, uint8_t *v) {
	((void (*)(uint32_t index, uint8_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI4ui(void *_func, uint32_t index, uint32_t x, uint32_t y, uint32_t z, uint32_t w) {
	((void (*)(uint32_t index, uint32_t x, uint32_t y, uint32_t z, uint32_t w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttribI4uiEXT(void *_func, uint32_t index, uint32_t x, uint32_t y, uint32_t z, uint32_t w) {
	((void (*)(uint32_t index, uint32_t x, uint32_t y, uint32_t z, uint32_t w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttribI4uiv(void *_func, uint32_t index, uint32_t *v) {
	((void (*)(uint32_t index, uint32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI4uivEXT(void *_func, uint32_t index, uint32_t *v) {
	((void (*)(uint32_t index, uint32_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI4usv(void *_func, uint32_t index, uint16_t *v) {
	((void (*)(uint32_t index, uint16_t *v))_func)(index, v);
}
void gllCall_glVertexAttribI4usvEXT(void *_func, uint32_t index, uint16_t *v) {
	((void (*)(uint32_t index, uint16_t *v))_func)(index, v);
}
void gllCall_glVertexAttribIFormat(void *_func, uint32_t attribindex, int32_t size, uint32_t type, uint32_t relativeoffset) {
	((void (*)(uint32_t attribindex, int32_t size, uint32_t type, uint32_t relativeoffset))_func)(attribindex, size, type, relativeoffset);
}
void gllCall_glVertexAttribIFormatNV(void *_func, uint32_t index, int32_t size, uint32_t type, int32_t stride) {
	((void (*)(uint32_t index, int32_t size, uint32_t type, int32_t stride))_func)(index, size, type, stride);
}
void gllCall_glVertexAttribIPointer(void *_func, uint32_t index, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(uint32_t index, int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(index, size, type, stride, pointer);
}
void gllCall_glVertexAttribIPointerEXT(void *_func, uint32_t index, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(uint32_t index, int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(index, size, type, stride, pointer);
}
void gllCall_glVertexAttribL1d(void *_func, uint32_t index, double x) {
	((void (*)(uint32_t index, double x))_func)(index, x);
}
void gllCall_glVertexAttribL1dEXT(void *_func, uint32_t index, double x) {
	((void (*)(uint32_t index, double x))_func)(index, x);
}
void gllCall_glVertexAttribL1dv(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttribL1dvEXT(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttribL1i64NV(void *_func, uint32_t index, int64_t x) {
	((void (*)(uint32_t index, int64_t x))_func)(index, x);
}
void gllCall_glVertexAttribL1i64vNV(void *_func, uint32_t index, int64_t *v) {
	((void (*)(uint32_t index, int64_t *v))_func)(index, v);
}
void gllCall_glVertexAttribL1ui64ARB(void *_func, uint32_t index, uint64_t x) {
	((void (*)(uint32_t index, uint64_t x))_func)(index, x);
}
void gllCall_glVertexAttribL1ui64NV(void *_func, uint32_t index, uint64_t x) {
	((void (*)(uint32_t index, uint64_t x))_func)(index, x);
}
void gllCall_glVertexAttribL1ui64vARB(void *_func, uint32_t index, uint64_t *v) {
	((void (*)(uint32_t index, uint64_t *v))_func)(index, v);
}
void gllCall_glVertexAttribL1ui64vNV(void *_func, uint32_t index, uint64_t *v) {
	((void (*)(uint32_t index, uint64_t *v))_func)(index, v);
}
void gllCall_glVertexAttribL2d(void *_func, uint32_t index, double x, double y) {
	((void (*)(uint32_t index, double x, double y))_func)(index, x, y);
}
void gllCall_glVertexAttribL2dEXT(void *_func, uint32_t index, double x, double y) {
	((void (*)(uint32_t index, double x, double y))_func)(index, x, y);
}
void gllCall_glVertexAttribL2dv(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttribL2dvEXT(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttribL2i64NV(void *_func, uint32_t index, int64_t x, int64_t y) {
	((void (*)(uint32_t index, int64_t x, int64_t y))_func)(index, x, y);
}
void gllCall_glVertexAttribL2i64vNV(void *_func, uint32_t index, int64_t *v) {
	((void (*)(uint32_t index, int64_t *v))_func)(index, v);
}
void gllCall_glVertexAttribL2ui64NV(void *_func, uint32_t index, uint64_t x, uint64_t y) {
	((void (*)(uint32_t index, uint64_t x, uint64_t y))_func)(index, x, y);
}
void gllCall_glVertexAttribL2ui64vNV(void *_func, uint32_t index, uint64_t *v) {
	((void (*)(uint32_t index, uint64_t *v))_func)(index, v);
}
void gllCall_glVertexAttribL3d(void *_func, uint32_t index, double x, double y, double z) {
	((void (*)(uint32_t index, double x, double y, double z))_func)(index, x, y, z);
}
void gllCall_glVertexAttribL3dEXT(void *_func, uint32_t index, double x, double y, double z) {
	((void (*)(uint32_t index, double x, double y, double z))_func)(index, x, y, z);
}
void gllCall_glVertexAttribL3dv(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttribL3dvEXT(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttribL3i64NV(void *_func, uint32_t index, int64_t x, int64_t y, int64_t z) {
	((void (*)(uint32_t index, int64_t x, int64_t y, int64_t z))_func)(index, x, y, z);
}
void gllCall_glVertexAttribL3i64vNV(void *_func, uint32_t index, int64_t *v) {
	((void (*)(uint32_t index, int64_t *v))_func)(index, v);
}
void gllCall_glVertexAttribL3ui64NV(void *_func, uint32_t index, uint64_t x, uint64_t y, uint64_t z) {
	((void (*)(uint32_t index, uint64_t x, uint64_t y, uint64_t z))_func)(index, x, y, z);
}
void gllCall_glVertexAttribL3ui64vNV(void *_func, uint32_t index, uint64_t *v) {
	((void (*)(uint32_t index, uint64_t *v))_func)(index, v);
}
void gllCall_glVertexAttribL4d(void *_func, uint32_t index, double x, double y, double z, double w) {
	((void (*)(uint32_t index, double x, double y, double z, double w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttribL4dEXT(void *_func, uint32_t index, double x, double y, double z, double w) {
	((void (*)(uint32_t index, double x, double y, double z, double w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttribL4dv(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttribL4dvEXT(void *_func, uint32_t index, double *v) {
	((void (*)(uint32_t index, double *v))_func)(index, v);
}
void gllCall_glVertexAttribL4i64NV(void *_func, uint32_t index, int64_t x, int64_t y, int64_t z, int64_t w) {
	((void (*)(uint32_t index, int64_t x, int64_t y, int64_t z, int64_t w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttribL4i64vNV(void *_func, uint32_t index, int64_t *v) {
	((void (*)(uint32_t index, int64_t *v))_func)(index, v);
}
void gllCall_glVertexAttribL4ui64NV(void *_func, uint32_t index, uint64_t x, uint64_t y, uint64_t z, uint64_t w) {
	((void (*)(uint32_t index, uint64_t x, uint64_t y, uint64_t z, uint64_t w))_func)(index, x, y, z, w);
}
void gllCall_glVertexAttribL4ui64vNV(void *_func, uint32_t index, uint64_t *v) {
	((void (*)(uint32_t index, uint64_t *v))_func)(index, v);
}
void gllCall_glVertexAttribLFormat(void *_func, uint32_t attribindex, int32_t size, uint32_t type, uint32_t relativeoffset) {
	((void (*)(uint32_t attribindex, int32_t size, uint32_t type, uint32_t relativeoffset))_func)(attribindex, size, type, relativeoffset);
}
void gllCall_glVertexAttribLFormatNV(void *_func, uint32_t index, int32_t size, uint32_t type, int32_t stride) {
	((void (*)(uint32_t index, int32_t size, uint32_t type, int32_t stride))_func)(index, size, type, stride);
}
void gllCall_glVertexAttribLPointer(void *_func, uint32_t index, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(uint32_t index, int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(index, size, type, stride, pointer);
}
void gllCall_glVertexAttribLPointerEXT(void *_func, uint32_t index, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(uint32_t index, int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(index, size, type, stride, pointer);
}
void gllCall_glVertexAttribP1ui(void *_func, uint32_t index, uint32_t type, _Bool normalized, uint32_t value) {
	((void (*)(uint32_t index, uint32_t type, _Bool normalized, uint32_t value))_func)(index, type, normalized, value);
}
void gllCall_glVertexAttribP1uiv(void *_func, uint32_t index, uint32_t type, _Bool normalized, uint32_t *value) {
	((void (*)(uint32_t index, uint32_t type, _Bool normalized, uint32_t *value))_func)(index, type, normalized, value);
}
void gllCall_glVertexAttribP2ui(void *_func, uint32_t index, uint32_t type, _Bool normalized, uint32_t value) {
	((void (*)(uint32_t index, uint32_t type, _Bool normalized, uint32_t value))_func)(index, type, normalized, value);
}
void gllCall_glVertexAttribP2uiv(void *_func, uint32_t index, uint32_t type, _Bool normalized, uint32_t *value) {
	((void (*)(uint32_t index, uint32_t type, _Bool normalized, uint32_t *value))_func)(index, type, normalized, value);
}
void gllCall_glVertexAttribP3ui(void *_func, uint32_t index, uint32_t type, _Bool normalized, uint32_t value) {
	((void (*)(uint32_t index, uint32_t type, _Bool normalized, uint32_t value))_func)(index, type, normalized, value);
}
void gllCall_glVertexAttribP3uiv(void *_func, uint32_t index, uint32_t type, _Bool normalized, uint32_t *value) {
	((void (*)(uint32_t index, uint32_t type, _Bool normalized, uint32_t *value))_func)(index, type, normalized, value);
}
void gllCall_glVertexAttribP4ui(void *_func, uint32_t index, uint32_t type, _Bool normalized, uint32_t value) {
	((void (*)(uint32_t index, uint32_t type, _Bool normalized, uint32_t value))_func)(index, type, normalized, value);
}
void gllCall_glVertexAttribP4uiv(void *_func, uint32_t index, uint32_t type, _Bool normalized, uint32_t *value) {
	((void (*)(uint32_t index, uint32_t type, _Bool normalized, uint32_t *value))_func)(index, type, normalized, value);
}
void gllCall_glVertexAttribParameteriAMD(void *_func, uint32_t index, uint32_t pname, int32_t param) {
	((void (*)(uint32_t index, uint32_t pname, int32_t param))_func)(index, pname, param);
}
void gllCall_glVertexAttribPointer(void *_func, uint32_t index, int32_t size, uint32_t type, _Bool normalized, int32_t stride, void *pointer) {
	((void (*)(uint32_t index, int32_t size, uint32_t type, _Bool normalized, int32_t stride, void *pointer))_func)(index, size, type, normalized, stride, pointer);
}
void gllCall_glVertexAttribPointerARB(void *_func, uint32_t index, int32_t size, uint32_t type, _Bool normalized, int32_t stride, void *pointer) {
	((void (*)(uint32_t index, int32_t size, uint32_t type, _Bool normalized, int32_t stride, void *pointer))_func)(index, size, type, normalized, stride, pointer);
}
void gllCall_glVertexAttribPointerNV(void *_func, uint32_t index, int32_t fsize, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(uint32_t index, int32_t fsize, uint32_t type, int32_t stride, void *pointer))_func)(index, fsize, type, stride, pointer);
}
void gllCall_glVertexAttribs1dvNV(void *_func, uint32_t index, int32_t count, double *v) {
	((void (*)(uint32_t index, int32_t count, double *v))_func)(index, count, v);
}
void gllCall_glVertexAttribs1fvNV(void *_func, uint32_t index, int32_t count, float *v) {
	((void (*)(uint32_t index, int32_t count, float *v))_func)(index, count, v);
}
void gllCall_glVertexAttribs1hvNV(void *_func, uint32_t index, int32_t n, uint16_t *v) {
	((void (*)(uint32_t index, int32_t n, uint16_t *v))_func)(index, n, v);
}
void gllCall_glVertexAttribs1svNV(void *_func, uint32_t index, int32_t count, int16_t *v) {
	((void (*)(uint32_t index, int32_t count, int16_t *v))_func)(index, count, v);
}
void gllCall_glVertexAttribs2dvNV(void *_func, uint32_t index, int32_t count, double *v) {
	((void (*)(uint32_t index, int32_t count, double *v))_func)(index, count, v);
}
void gllCall_glVertexAttribs2fvNV(void *_func, uint32_t index, int32_t count, float *v) {
	((void (*)(uint32_t index, int32_t count, float *v))_func)(index, count, v);
}
void gllCall_glVertexAttribs2hvNV(void *_func, uint32_t index, int32_t n, uint16_t *v) {
	((void (*)(uint32_t index, int32_t n, uint16_t *v))_func)(index, n, v);
}
void gllCall_glVertexAttribs2svNV(void *_func, uint32_t index, int32_t count, int16_t *v) {
	((void (*)(uint32_t index, int32_t count, int16_t *v))_func)(index, count, v);
}
void gllCall_glVertexAttribs3dvNV(void *_func, uint32_t index, int32_t count, double *v) {
	((void (*)(uint32_t index, int32_t count, double *v))_func)(index, count, v);
}
void gllCall_glVertexAttribs3fvNV(void *_func, uint32_t index, int32_t count, float *v) {
	((void (*)(uint32_t index, int32_t count, float *v))_func)(index, count, v);
}
void gllCall_glVertexAttribs3hvNV(void *_func, uint32_t index, int32_t n, uint16_t *v) {
	((void (*)(uint32_t index, int32_t n, uint16_t *v))_func)(index, n, v);
}
void gllCall_glVertexAttribs3svNV(void *_func, uint32_t index, int32_t count, int16_t *v) {
	((void (*)(uint32_t index, int32_t count, int16_t *v))_func)(index, count, v);
}
void gllCall_glVertexAttribs4dvNV(void *_func, uint32_t index, int32_t count, double *v) {
	((void (*)(uint32_t index, int32_t count, double *v))_func)(index, count, v);
}
void gllCall_glVertexAttribs4fvNV(void *_func, uint32_t index, int32_t count, float *v) {
	((void (*)(uint32_t index, int32_t count, float *v))_func)(index, count, v);
}
void gllCall_glVertexAttribs4hvNV(void *_func, uint32_t index, int32_t n, uint16_t *v) {
	((void (*)(uint32_t index, int32_t n, uint16_t *v))_func)(index, n, v);
}
void gllCall_glVertexAttribs4svNV(void *_func, uint32_t index, int32_t count, int16_t *v) {
	((void (*)(uint32_t index, int32_t count, int16_t *v))_func)(index, count, v);
}
void gllCall_glVertexAttribs4ubvNV(void *_func, uint32_t index, int32_t count, uint8_t *v) {
	((void (*)(uint32_t index, int32_t count, uint8_t *v))_func)(index, count, v);
}
void gllCall_glVertexBindingDivisor(void *_func, uint32_t bindingindex, uint32_t divisor) {
	((void (*)(uint32_t bindingindex, uint32_t divisor))_func)(bindingindex, divisor);
}
void gllCall_glVertexBlendARB(void *_func, int32_t count) {
	((void (*)(int32_t count))_func)(count);
}
void gllCall_glVertexBlendEnvfATI(void *_func, uint32_t pname, float param) {
	((void (*)(uint32_t pname, float param))_func)(pname, param);
}
void gllCall_glVertexBlendEnviATI(void *_func, uint32_t pname, int32_t param) {
	((void (*)(uint32_t pname, int32_t param))_func)(pname, param);
}
void gllCall_glVertexFormatNV(void *_func, int32_t size, uint32_t type, int32_t stride) {
	((void (*)(int32_t size, uint32_t type, int32_t stride))_func)(size, type, stride);
}
void gllCall_glVertexP2ui(void *_func, uint32_t type, uint32_t value) {
	((void (*)(uint32_t type, uint32_t value))_func)(type, value);
}
void gllCall_glVertexP2uiv(void *_func, uint32_t type, uint32_t *value) {
	((void (*)(uint32_t type, uint32_t *value))_func)(type, value);
}
void gllCall_glVertexP3ui(void *_func, uint32_t type, uint32_t value) {
	((void (*)(uint32_t type, uint32_t value))_func)(type, value);
}
void gllCall_glVertexP3uiv(void *_func, uint32_t type, uint32_t *value) {
	((void (*)(uint32_t type, uint32_t *value))_func)(type, value);
}
void gllCall_glVertexP4ui(void *_func, uint32_t type, uint32_t value) {
	((void (*)(uint32_t type, uint32_t value))_func)(type, value);
}
void gllCall_glVertexP4uiv(void *_func, uint32_t type, uint32_t *value) {
	((void (*)(uint32_t type, uint32_t *value))_func)(type, value);
}
void gllCall_glVertexPointer(void *_func, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(size, type, stride, pointer);
}
void gllCall_glVertexPointerEXT(void *_func, int32_t size, uint32_t type, int32_t stride, int32_t count, void *pointer) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, int32_t count, void *pointer))_func)(size, type, stride, count, pointer);
}
void gllCall_glVertexPointerListIBM(void *_func, int32_t size, uint32_t type, int32_t stride, void **pointer, int32_t ptrstride) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, void **pointer, int32_t ptrstride))_func)(size, type, stride, pointer, ptrstride);
}
void gllCall_glVertexPointervINTEL(void *_func, int32_t size, uint32_t type, void **pointer) {
	((void (*)(int32_t size, uint32_t type, void **pointer))_func)(size, type, pointer);
}
void gllCall_glVertexStream1dATI(void *_func, uint32_t stream, double x) {
	((void (*)(uint32_t stream, double x))_func)(stream, x);
}
void gllCall_glVertexStream1dvATI(void *_func, uint32_t stream, double *coords) {
	((void (*)(uint32_t stream, double *coords))_func)(stream, coords);
}
void gllCall_glVertexStream1fATI(void *_func, uint32_t stream, float x) {
	((void (*)(uint32_t stream, float x))_func)(stream, x);
}
void gllCall_glVertexStream1fvATI(void *_func, uint32_t stream, float *coords) {
	((void (*)(uint32_t stream, float *coords))_func)(stream, coords);
}
void gllCall_glVertexStream1iATI(void *_func, uint32_t stream, int32_t x) {
	((void (*)(uint32_t stream, int32_t x))_func)(stream, x);
}
void gllCall_glVertexStream1ivATI(void *_func, uint32_t stream, int32_t *coords) {
	((void (*)(uint32_t stream, int32_t *coords))_func)(stream, coords);
}
void gllCall_glVertexStream1sATI(void *_func, uint32_t stream, int16_t x) {
	((void (*)(uint32_t stream, int16_t x))_func)(stream, x);
}
void gllCall_glVertexStream1svATI(void *_func, uint32_t stream, int16_t *coords) {
	((void (*)(uint32_t stream, int16_t *coords))_func)(stream, coords);
}
void gllCall_glVertexStream2dATI(void *_func, uint32_t stream, double x, double y) {
	((void (*)(uint32_t stream, double x, double y))_func)(stream, x, y);
}
void gllCall_glVertexStream2dvATI(void *_func, uint32_t stream, double *coords) {
	((void (*)(uint32_t stream, double *coords))_func)(stream, coords);
}
void gllCall_glVertexStream2fATI(void *_func, uint32_t stream, float x, float y) {
	((void (*)(uint32_t stream, float x, float y))_func)(stream, x, y);
}
void gllCall_glVertexStream2fvATI(void *_func, uint32_t stream, float *coords) {
	((void (*)(uint32_t stream, float *coords))_func)(stream, coords);
}
void gllCall_glVertexStream2iATI(void *_func, uint32_t stream, int32_t x, int32_t y) {
	((void (*)(uint32_t stream, int32_t x, int32_t y))_func)(stream, x, y);
}
void gllCall_glVertexStream2ivATI(void *_func, uint32_t stream, int32_t *coords) {
	((void (*)(uint32_t stream, int32_t *coords))_func)(stream, coords);
}
void gllCall_glVertexStream2sATI(void *_func, uint32_t stream, int16_t x, int16_t y) {
	((void (*)(uint32_t stream, int16_t x, int16_t y))_func)(stream, x, y);
}
void gllCall_glVertexStream2svATI(void *_func, uint32_t stream, int16_t *coords) {
	((void (*)(uint32_t stream, int16_t *coords))_func)(stream, coords);
}
void gllCall_glVertexStream3dATI(void *_func, uint32_t stream, double x, double y, double z) {
	((void (*)(uint32_t stream, double x, double y, double z))_func)(stream, x, y, z);
}
void gllCall_glVertexStream3dvATI(void *_func, uint32_t stream, double *coords) {
	((void (*)(uint32_t stream, double *coords))_func)(stream, coords);
}
void gllCall_glVertexStream3fATI(void *_func, uint32_t stream, float x, float y, float z) {
	((void (*)(uint32_t stream, float x, float y, float z))_func)(stream, x, y, z);
}
void gllCall_glVertexStream3fvATI(void *_func, uint32_t stream, float *coords) {
	((void (*)(uint32_t stream, float *coords))_func)(stream, coords);
}
void gllCall_glVertexStream3iATI(void *_func, uint32_t stream, int32_t x, int32_t y, int32_t z) {
	((void (*)(uint32_t stream, int32_t x, int32_t y, int32_t z))_func)(stream, x, y, z);
}
void gllCall_glVertexStream3ivATI(void *_func, uint32_t stream, int32_t *coords) {
	((void (*)(uint32_t stream, int32_t *coords))_func)(stream, coords);
}
void gllCall_glVertexStream3sATI(void *_func, uint32_t stream, int16_t x, int16_t y, int16_t z) {
	((void (*)(uint32_t stream, int16_t x, int16_t y, int16_t z))_func)(stream, x, y, z);
}
void gllCall_glVertexStream3svATI(void *_func, uint32_t stream, int16_t *coords) {
	((void (*)(uint32_t stream, int16_t *coords))_func)(stream, coords);
}
void gllCall_glVertexStream4dATI(void *_func, uint32_t stream, double x, double y, double z, double w) {
	((void (*)(uint32_t stream, double x, double y, double z, double w))_func)(stream, x, y, z, w);
}
void gllCall_glVertexStream4dvATI(void *_func, uint32_t stream, double *coords) {
	((void (*)(uint32_t stream, double *coords))_func)(stream, coords);
}
void gllCall_glVertexStream4fATI(void *_func, uint32_t stream, float x, float y, float z, float w) {
	((void (*)(uint32_t stream, float x, float y, float z, float w))_func)(stream, x, y, z, w);
}
void gllCall_glVertexStream4fvATI(void *_func, uint32_t stream, float *coords) {
	((void (*)(uint32_t stream, float *coords))_func)(stream, coords);
}
void gllCall_glVertexStream4iATI(void *_func, uint32_t stream, int32_t x, int32_t y, int32_t z, int32_t w) {
	((void (*)(uint32_t stream, int32_t x, int32_t y, int32_t z, int32_t w))_func)(stream, x, y, z, w);
}
void gllCall_glVertexStream4ivATI(void *_func, uint32_t stream, int32_t *coords) {
	((void (*)(uint32_t stream, int32_t *coords))_func)(stream, coords);
}
void gllCall_glVertexStream4sATI(void *_func, uint32_t stream, int16_t x, int16_t y, int16_t z, int16_t w) {
	((void (*)(uint32_t stream, int16_t x, int16_t y, int16_t z, int16_t w))_func)(stream, x, y, z, w);
}
void gllCall_glVertexStream4svATI(void *_func, uint32_t stream, int16_t *coords) {
	((void (*)(uint32_t stream, int16_t *coords))_func)(stream, coords);
}
void gllCall_glVertexWeightPointerEXT(void *_func, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(size, type, stride, pointer);
}
void gllCall_glVertexWeightfEXT(void *_func, float weight) {
	((void (*)(float weight))_func)(weight);
}
void gllCall_glVertexWeightfvEXT(void *_func, float *weight) {
	((void (*)(float *weight))_func)(weight);
}
void gllCall_glVertexWeighthNV(void *_func, uint16_t weight) {
	((void (*)(uint16_t weight))_func)(weight);
}
void gllCall_glVertexWeighthvNV(void *_func, uint16_t *weight) {
	((void (*)(uint16_t *weight))_func)(weight);
}
uint32_t gllCall_glVideoCaptureNV(void *_func, uint32_t video_capture_slot, uint32_t *sequence_num, uint64_t *capture_time) {
	return ((uint32_t (*)(uint32_t video_capture_slot, uint32_t *sequence_num, uint64_t *capture_time))_func)(video_capture_slot, sequence_num, capture_time);
}
void gllCall_glVideoCaptureStreamParameterdvNV(void *_func, uint32_t video_capture_slot, uint32_t stream, uint32_t pname, double *params) {
	((void (*)(uint32_t video_capture_slot, uint32_t stream, uint32_t pname, double *params))_func)(video_capture_slot, stream, pname, params);
}
void gllCall_glVideoCaptureStreamParameterfvNV(void *_func, uint32_t video_capture_slot, uint32_t stream, uint32_t pname, float *params) {
	((void (*)(uint32_t video_capture_slot, uint32_t stream, uint32_t pname, float *params))_func)(video_capture_slot, stream, pname, params);
}
void gllCall_glVideoCaptureStreamParameterivNV(void *_func, uint32_t video_capture_slot, uint32_t stream, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t video_capture_slot, uint32_t stream, uint32_t pname, int32_t *params))_func)(video_capture_slot, stream, pname, params);
}
void gllCall_glViewport(void *_func, int32_t x, int32_t y, int32_t width, int32_t height) {
	((void (*)(int32_t x, int32_t y, int32_t width, int32_t height))_func)(x, y, width, height);
}
void gllCall_glViewportArrayv(void *_func, uint32_t first, int32_t count, float *v) {
	((void (*)(uint32_t first, int32_t count, float *v))_func)(first, count, v);
}
void gllCall_glViewportArrayvNV(void *_func, uint32_t first, int32_t count, float *v) {
	((void (*)(uint32_t first, int32_t count, float *v))_func)(first, count, v);
}
void gllCall_glViewportArrayvOES(void *_func, uint32_t first, int32_t count, float *v) {
	((void (*)(uint32_t first, int32_t count, float *v))_func)(first, count, v);
}
void gllCall_glViewportIndexedf(void *_func, uint32_t index, float x, float y, float w, float h) {
	((void (*)(uint32_t index, float x, float y, float w, float h))_func)(index, x, y, w, h);
}
void gllCall_glViewportIndexedfOES(void *_func, uint32_t index, float x, float y, float w, float h) {
	((void (*)(uint32_t index, float x, float y, float w, float h))_func)(index, x, y, w, h);
}
void gllCall_glViewportIndexedfNV(void *_func, uint32_t index, float x, float y, float w, float h) {
	((void (*)(uint32_t index, float x, float y, float w, float h))_func)(index, x, y, w, h);
}
void gllCall_glViewportIndexedfv(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glViewportIndexedfvOES(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glViewportIndexedfvNV(void *_func, uint32_t index, float *v) {
	((void (*)(uint32_t index, float *v))_func)(index, v);
}
void gllCall_glViewportPositionWScaleNV(void *_func, uint32_t index, float xcoeff, float ycoeff) {
	((void (*)(uint32_t index, float xcoeff, float ycoeff))_func)(index, xcoeff, ycoeff);
}
void gllCall_glViewportSwizzleNV(void *_func, uint32_t index, uint32_t swizzlex, uint32_t swizzley, uint32_t swizzlez, uint32_t swizzlew) {
	((void (*)(uint32_t index, uint32_t swizzlex, uint32_t swizzley, uint32_t swizzlez, uint32_t swizzlew))_func)(index, swizzlex, swizzley, swizzlez, swizzlew);
}
void gllCall_glWaitSemaphoreEXT(void *_func, uint32_t semaphore, uint32_t numBufferBarriers, uint32_t *buffers, uint32_t numTextureBarriers, uint32_t *textures, uint32_t *srcLayouts) {
	((void (*)(uint32_t semaphore, uint32_t numBufferBarriers, uint32_t *buffers, uint32_t numTextureBarriers, uint32_t *textures, uint32_t *srcLayouts))_func)(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
}
void gllCall_glWaitSemaphoreui64NVX(void *_func, uint32_t waitGpu, int32_t fenceObjectCount, uint32_t *semaphoreArray, uint64_t *fenceValueArray) {
	((void (*)(uint32_t waitGpu, int32_t fenceObjectCount, uint32_t *semaphoreArray, uint64_t *fenceValueArray))_func)(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
}
void gllCall_glWaitSync(void *_func, GLsync sync, uint32_t flags, uint64_t timeout) {
	((void (*)(GLsync sync, uint32_t flags, uint64_t timeout))_func)(sync, flags, timeout);
}
void gllCall_glWaitSyncAPPLE(void *_func, GLsync sync, uint32_t flags, uint64_t timeout) {
	((void (*)(GLsync sync, uint32_t flags, uint64_t timeout))_func)(sync, flags, timeout);
}
void gllCall_glWeightPathsNV(void *_func, uint32_t resultPath, int32_t numPaths, uint32_t *paths, float *weights) {
	((void (*)(uint32_t resultPath, int32_t numPaths, uint32_t *paths, float *weights))_func)(resultPath, numPaths, paths, weights);
}
void gllCall_glWeightPointerARB(void *_func, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(size, type, stride, pointer);
}
void gllCall_glWeightPointerOES(void *_func, int32_t size, uint32_t type, int32_t stride, void *pointer) {
	((void (*)(int32_t size, uint32_t type, int32_t stride, void *pointer))_func)(size, type, stride, pointer);
}
void gllCall_glWeightbvARB(void *_func, int32_t size, int8_t *weights) {
	((void (*)(int32_t size, int8_t *weights))_func)(size, weights);
}
void gllCall_glWeightdvARB(void *_func, int32_t size, double *weights) {
	((void (*)(int32_t size, double *weights))_func)(size, weights);
}
void gllCall_glWeightfvARB(void *_func, int32_t size, float *weights) {
	((void (*)(int32_t size, float *weights))_func)(size, weights);
}
void gllCall_glWeightivARB(void *_func, int32_t size, int32_t *weights) {
	((void (*)(int32_t size, int32_t *weights))_func)(size, weights);
}
void gllCall_glWeightsvARB(void *_func, int32_t size, int16_t *weights) {
	((void (*)(int32_t size, int16_t *weights))_func)(size, weights);
}
void gllCall_glWeightubvARB(void *_func, int32_t size, uint8_t *weights) {
	((void (*)(int32_t size, uint8_t *weights))_func)(size, weights);
}
void gllCall_glWeightuivARB(void *_func, int32_t size, uint32_t *weights) {
	((void (*)(int32_t size, uint32_t *weights))_func)(size, weights);
}
void gllCall_glWeightusvARB(void *_func, int32_t size, uint16_t *weights) {
	((void (*)(int32_t size, uint16_t *weights))_func)(size, weights);
}
void gllCall_glWindowPos2d(void *_func, double x, double y) {
	((void (*)(double x, double y))_func)(x, y);
}
void gllCall_glWindowPos2dARB(void *_func, double x, double y) {
	((void (*)(double x, double y))_func)(x, y);
}
void gllCall_glWindowPos2dMESA(void *_func, double x, double y) {
	((void (*)(double x, double y))_func)(x, y);
}
void gllCall_glWindowPos2dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glWindowPos2dvARB(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glWindowPos2dvMESA(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glWindowPos2f(void *_func, float x, float y) {
	((void (*)(float x, float y))_func)(x, y);
}
void gllCall_glWindowPos2fARB(void *_func, float x, float y) {
	((void (*)(float x, float y))_func)(x, y);
}
void gllCall_glWindowPos2fMESA(void *_func, float x, float y) {
	((void (*)(float x, float y))_func)(x, y);
}
void gllCall_glWindowPos2fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glWindowPos2fvARB(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glWindowPos2fvMESA(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glWindowPos2i(void *_func, int32_t x, int32_t y) {
	((void (*)(int32_t x, int32_t y))_func)(x, y);
}
void gllCall_glWindowPos2iARB(void *_func, int32_t x, int32_t y) {
	((void (*)(int32_t x, int32_t y))_func)(x, y);
}
void gllCall_glWindowPos2iMESA(void *_func, int32_t x, int32_t y) {
	((void (*)(int32_t x, int32_t y))_func)(x, y);
}
void gllCall_glWindowPos2iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glWindowPos2ivARB(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glWindowPos2ivMESA(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glWindowPos2s(void *_func, int16_t x, int16_t y) {
	((void (*)(int16_t x, int16_t y))_func)(x, y);
}
void gllCall_glWindowPos2sARB(void *_func, int16_t x, int16_t y) {
	((void (*)(int16_t x, int16_t y))_func)(x, y);
}
void gllCall_glWindowPos2sMESA(void *_func, int16_t x, int16_t y) {
	((void (*)(int16_t x, int16_t y))_func)(x, y);
}
void gllCall_glWindowPos2sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glWindowPos2svARB(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glWindowPos2svMESA(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glWindowPos3d(void *_func, double x, double y, double z) {
	((void (*)(double x, double y, double z))_func)(x, y, z);
}
void gllCall_glWindowPos3dARB(void *_func, double x, double y, double z) {
	((void (*)(double x, double y, double z))_func)(x, y, z);
}
void gllCall_glWindowPos3dMESA(void *_func, double x, double y, double z) {
	((void (*)(double x, double y, double z))_func)(x, y, z);
}
void gllCall_glWindowPos3dv(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glWindowPos3dvARB(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glWindowPos3dvMESA(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glWindowPos3f(void *_func, float x, float y, float z) {
	((void (*)(float x, float y, float z))_func)(x, y, z);
}
void gllCall_glWindowPos3fARB(void *_func, float x, float y, float z) {
	((void (*)(float x, float y, float z))_func)(x, y, z);
}
void gllCall_glWindowPos3fMESA(void *_func, float x, float y, float z) {
	((void (*)(float x, float y, float z))_func)(x, y, z);
}
void gllCall_glWindowPos3fv(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glWindowPos3fvARB(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glWindowPos3fvMESA(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glWindowPos3i(void *_func, int32_t x, int32_t y, int32_t z) {
	((void (*)(int32_t x, int32_t y, int32_t z))_func)(x, y, z);
}
void gllCall_glWindowPos3iARB(void *_func, int32_t x, int32_t y, int32_t z) {
	((void (*)(int32_t x, int32_t y, int32_t z))_func)(x, y, z);
}
void gllCall_glWindowPos3iMESA(void *_func, int32_t x, int32_t y, int32_t z) {
	((void (*)(int32_t x, int32_t y, int32_t z))_func)(x, y, z);
}
void gllCall_glWindowPos3iv(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glWindowPos3ivARB(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glWindowPos3ivMESA(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glWindowPos3s(void *_func, int16_t x, int16_t y, int16_t z) {
	((void (*)(int16_t x, int16_t y, int16_t z))_func)(x, y, z);
}
void gllCall_glWindowPos3sARB(void *_func, int16_t x, int16_t y, int16_t z) {
	((void (*)(int16_t x, int16_t y, int16_t z))_func)(x, y, z);
}
void gllCall_glWindowPos3sMESA(void *_func, int16_t x, int16_t y, int16_t z) {
	((void (*)(int16_t x, int16_t y, int16_t z))_func)(x, y, z);
}
void gllCall_glWindowPos3sv(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glWindowPos3svARB(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glWindowPos3svMESA(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glWindowPos4dMESA(void *_func, double x, double y, double z, double w) {
	((void (*)(double x, double y, double z, double w))_func)(x, y, z, w);
}
void gllCall_glWindowPos4dvMESA(void *_func, double *v) {
	((void (*)(double *v))_func)(v);
}
void gllCall_glWindowPos4fMESA(void *_func, float x, float y, float z, float w) {
	((void (*)(float x, float y, float z, float w))_func)(x, y, z, w);
}
void gllCall_glWindowPos4fvMESA(void *_func, float *v) {
	((void (*)(float *v))_func)(v);
}
void gllCall_glWindowPos4iMESA(void *_func, int32_t x, int32_t y, int32_t z, int32_t w) {
	((void (*)(int32_t x, int32_t y, int32_t z, int32_t w))_func)(x, y, z, w);
}
void gllCall_glWindowPos4ivMESA(void *_func, int32_t *v) {
	((void (*)(int32_t *v))_func)(v);
}
void gllCall_glWindowPos4sMESA(void *_func, int16_t x, int16_t y, int16_t z, int16_t w) {
	((void (*)(int16_t x, int16_t y, int16_t z, int16_t w))_func)(x, y, z, w);
}
void gllCall_glWindowPos4svMESA(void *_func, int16_t *v) {
	((void (*)(int16_t *v))_func)(v);
}
void gllCall_glWindowRectanglesEXT(void *_func, uint32_t mode, int32_t count, int32_t *box) {
	((void (*)(uint32_t mode, int32_t count, int32_t *box))_func)(mode, count, box);
}
void gllCall_glWriteMaskEXT(void *_func, uint32_t res, uint32_t in, uint32_t outX, uint32_t outY, uint32_t outZ, uint32_t outW) {
	((void (*)(uint32_t res, uint32_t in, uint32_t outX, uint32_t outY, uint32_t outZ, uint32_t outW))_func)(res, in, outX, outY, outZ, outW);
}
void gllCall_glDrawVkImageNV(void *_func, uint64_t vkImage, uint32_t sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1) {
	((void (*)(uint64_t vkImage, uint32_t sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1))_func)(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}
void gllCall_glWaitVkSemaphoreNV(void *_func, uint64_t vkSemaphore) {
	((void (*)(uint64_t vkSemaphore))_func)(vkSemaphore);
}
void gllCall_glSignalVkSemaphoreNV(void *_func, uint64_t vkSemaphore) {
	((void (*)(uint64_t vkSemaphore))_func)(vkSemaphore);
}
void gllCall_glSignalVkFenceNV(void *_func, uint64_t vkFence) {
	((void (*)(uint64_t vkFence))_func)(vkFence);
}
void gllCall_glFramebufferParameteriMESA(void *_func, uint32_t target, uint32_t pname, int32_t param) {
	((void (*)(uint32_t target, uint32_t pname, int32_t param))_func)(target, pname, param);
}
void gllCall_glGetFramebufferParameterivMESA(void *_func, uint32_t target, uint32_t pname, int32_t *params) {
	((void (*)(uint32_t target, uint32_t pname, int32_t *params))_func)(target, pname, params);
}
*/
import "C"

import "unsafe"

func (gl *lib) Accum(op uint32, value float32) {
	C.gllCall_glAccum(gl.glAccum, (C.uint32_t)(op), (C.float)(value))
}
func (gl *lib) AccumxOES(op uint32, value int32) {
	C.gllCall_glAccumxOES(gl.glAccumxOES, (C.uint32_t)(op), (C.int32_t)(value))
}
func (gl *lib) ActiveProgramEXT(program uint32) {
	C.gllCall_glActiveProgramEXT(gl.glActiveProgramEXT, (C.uint32_t)(program))
}
func (gl *lib) ActiveShaderProgram(pipeline uint32, program uint32) {
	C.gllCall_glActiveShaderProgram(gl.glActiveShaderProgram, (C.uint32_t)(pipeline), (C.uint32_t)(program))
}
func (gl *lib) ActiveShaderProgramEXT(pipeline uint32, program uint32) {
	C.gllCall_glActiveShaderProgramEXT(gl.glActiveShaderProgramEXT, (C.uint32_t)(pipeline), (C.uint32_t)(program))
}
func (gl *lib) ActiveStencilFaceEXT(face uint32) {
	C.gllCall_glActiveStencilFaceEXT(gl.glActiveStencilFaceEXT, (C.uint32_t)(face))
}
func (gl *lib) ActiveTexture(texture uint32) {
	C.gllCall_glActiveTexture(gl.glActiveTexture, (C.uint32_t)(texture))
}
func (gl *lib) ActiveTextureARB(texture uint32) {
	C.gllCall_glActiveTextureARB(gl.glActiveTextureARB, (C.uint32_t)(texture))
}
func (gl *lib) ActiveVaryingNV(program uint32, name *uint8) {
	C.gllCall_glActiveVaryingNV(gl.glActiveVaryingNV, (C.uint32_t)(program), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) AlphaFragmentOp1ATI(op uint32, dst uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32) {
	C.gllCall_glAlphaFragmentOp1ATI(gl.glAlphaFragmentOp1ATI, (C.uint32_t)(op), (C.uint32_t)(dst), (C.uint32_t)(dstMod), (C.uint32_t)(arg1), (C.uint32_t)(arg1Rep), (C.uint32_t)(arg1Mod))
}
func (gl *lib) AlphaFragmentOp2ATI(op uint32, dst uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32) {
	C.gllCall_glAlphaFragmentOp2ATI(gl.glAlphaFragmentOp2ATI, (C.uint32_t)(op), (C.uint32_t)(dst), (C.uint32_t)(dstMod), (C.uint32_t)(arg1), (C.uint32_t)(arg1Rep), (C.uint32_t)(arg1Mod), (C.uint32_t)(arg2), (C.uint32_t)(arg2Rep), (C.uint32_t)(arg2Mod))
}
func (gl *lib) AlphaFragmentOp3ATI(op uint32, dst uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32, arg3 uint32, arg3Rep uint32, arg3Mod uint32) {
	C.gllCall_glAlphaFragmentOp3ATI(gl.glAlphaFragmentOp3ATI, (C.uint32_t)(op), (C.uint32_t)(dst), (C.uint32_t)(dstMod), (C.uint32_t)(arg1), (C.uint32_t)(arg1Rep), (C.uint32_t)(arg1Mod), (C.uint32_t)(arg2), (C.uint32_t)(arg2Rep), (C.uint32_t)(arg2Mod), (C.uint32_t)(arg3), (C.uint32_t)(arg3Rep), (C.uint32_t)(arg3Mod))
}
func (gl *lib) AlphaFunc(func_ uint32, ref float32) {
	C.gllCall_glAlphaFunc(gl.glAlphaFunc, (C.uint32_t)(func_), (C.float)(ref))
}
func (gl *lib) AlphaFuncQCOM(func_ uint32, ref float32) {
	C.gllCall_glAlphaFuncQCOM(gl.glAlphaFuncQCOM, (C.uint32_t)(func_), (C.float)(ref))
}
func (gl *lib) AlphaFuncx(func_ uint32, ref int32) {
	C.gllCall_glAlphaFuncx(gl.glAlphaFuncx, (C.uint32_t)(func_), (C.int32_t)(ref))
}
func (gl *lib) AlphaFuncxOES(func_ uint32, ref int32) {
	C.gllCall_glAlphaFuncxOES(gl.glAlphaFuncxOES, (C.uint32_t)(func_), (C.int32_t)(ref))
}
func (gl *lib) AlphaToCoverageDitherControlNV(mode uint32) {
	C.gllCall_glAlphaToCoverageDitherControlNV(gl.glAlphaToCoverageDitherControlNV, (C.uint32_t)(mode))
}
func (gl *lib) ApplyFramebufferAttachmentCMAAINTEL() {
	C.gllCall_glApplyFramebufferAttachmentCMAAINTEL(gl.glApplyFramebufferAttachmentCMAAINTEL)
}
func (gl *lib) ApplyTextureEXT(mode uint32) {
	C.gllCall_glApplyTextureEXT(gl.glApplyTextureEXT, (C.uint32_t)(mode))
}
func (gl *lib) AcquireKeyedMutexWin32EXT(memory uint32, key uint64, timeout uint32) bool {
	return (bool)(C.gllCall_glAcquireKeyedMutexWin32EXT(gl.glAcquireKeyedMutexWin32EXT, (C.uint32_t)(memory), (C.uint64_t)(key), (C.uint32_t)(timeout)))
}
func (gl *lib) AreProgramsResidentNV(n int32, programs *uint32, residences *bool) bool {
	return (bool)(C.gllCall_glAreProgramsResidentNV(gl.glAreProgramsResidentNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(programs)), (*C._Bool)(unsafe.Pointer(residences))))
}
func (gl *lib) AreTexturesResident(n int32, textures *uint32, residences *bool) bool {
	return (bool)(C.gllCall_glAreTexturesResident(gl.glAreTexturesResident, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(textures)), (*C._Bool)(unsafe.Pointer(residences))))
}
func (gl *lib) AreTexturesResidentEXT(n int32, textures *uint32, residences *bool) bool {
	return (bool)(C.gllCall_glAreTexturesResidentEXT(gl.glAreTexturesResidentEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(textures)), (*C._Bool)(unsafe.Pointer(residences))))
}
func (gl *lib) ArrayElement(i int32) {
	C.gllCall_glArrayElement(gl.glArrayElement, (C.int32_t)(i))
}
func (gl *lib) ArrayElementEXT(i int32) {
	C.gllCall_glArrayElementEXT(gl.glArrayElementEXT, (C.int32_t)(i))
}
func (gl *lib) ArrayObjectATI(array uint32, size int32, type_ uint32, stride int32, buffer uint32, offset uint32) {
	C.gllCall_glArrayObjectATI(gl.glArrayObjectATI, (C.uint32_t)(array), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (C.uint32_t)(buffer), (C.uint32_t)(offset))
}
func (gl *lib) AsyncCopyBufferSubDataNVX(waitSemaphoreCount int32, waitSemaphoreArray *uint32, fenceValueArray *uint64, readGpu uint32, writeGpuMask uint32, readBuffer uint32, writeBuffer uint32, readOffset uintptr, writeOffset uintptr, size int, signalSemaphoreCount int32, signalSemaphoreArray *uint32, signalValueArray *uint64) uint32 {
	return (uint32)(C.gllCall_glAsyncCopyBufferSubDataNVX(gl.glAsyncCopyBufferSubDataNVX, (C.int32_t)(waitSemaphoreCount), (*C.uint32_t)(unsafe.Pointer(waitSemaphoreArray)), (*C.uint64_t)(unsafe.Pointer(fenceValueArray)), (C.uint32_t)(readGpu), (C.uint32_t)(writeGpuMask), (C.uint32_t)(readBuffer), (C.uint32_t)(writeBuffer), (C.intptr_t)(readOffset), (C.intptr_t)(writeOffset), (C.ssize_t)(size), (C.int32_t)(signalSemaphoreCount), (*C.uint32_t)(unsafe.Pointer(signalSemaphoreArray)), (*C.uint64_t)(unsafe.Pointer(signalValueArray))))
}
func (gl *lib) AsyncCopyImageSubDataNVX(waitSemaphoreCount int32, waitSemaphoreArray *uint32, waitValueArray *uint64, srcGpu uint32, dstGpuMask uint32, srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32, signalSemaphoreCount int32, signalSemaphoreArray *uint32, signalValueArray *uint64) uint32 {
	return (uint32)(C.gllCall_glAsyncCopyImageSubDataNVX(gl.glAsyncCopyImageSubDataNVX, (C.int32_t)(waitSemaphoreCount), (*C.uint32_t)(unsafe.Pointer(waitSemaphoreArray)), (*C.uint64_t)(unsafe.Pointer(waitValueArray)), (C.uint32_t)(srcGpu), (C.uint32_t)(dstGpuMask), (C.uint32_t)(srcName), (C.uint32_t)(srcTarget), (C.int32_t)(srcLevel), (C.int32_t)(srcX), (C.int32_t)(srcY), (C.int32_t)(srcZ), (C.uint32_t)(dstName), (C.uint32_t)(dstTarget), (C.int32_t)(dstLevel), (C.int32_t)(dstX), (C.int32_t)(dstY), (C.int32_t)(dstZ), (C.int32_t)(srcWidth), (C.int32_t)(srcHeight), (C.int32_t)(srcDepth), (C.int32_t)(signalSemaphoreCount), (*C.uint32_t)(unsafe.Pointer(signalSemaphoreArray)), (*C.uint64_t)(unsafe.Pointer(signalValueArray))))
}
func (gl *lib) AsyncMarkerSGIX(marker uint32) {
	C.gllCall_glAsyncMarkerSGIX(gl.glAsyncMarkerSGIX, (C.uint32_t)(marker))
}
func (gl *lib) AttachObjectARB(containerObj GLhandleARB, obj GLhandleARB) {
	C.gllCall_glAttachObjectARB(gl.glAttachObjectARB, (C.GLhandleARB)(containerObj), (C.GLhandleARB)(obj))
}
func (gl *lib) AttachShader(program uint32, shader uint32) {
	C.gllCall_glAttachShader(gl.glAttachShader, (C.uint32_t)(program), (C.uint32_t)(shader))
}
func (gl *lib) Begin(mode uint32) {
	C.gllCall_glBegin(gl.glBegin, (C.uint32_t)(mode))
}
func (gl *lib) BeginConditionalRender(id uint32, mode uint32) {
	C.gllCall_glBeginConditionalRender(gl.glBeginConditionalRender, (C.uint32_t)(id), (C.uint32_t)(mode))
}
func (gl *lib) BeginConditionalRenderNV(id uint32, mode uint32) {
	C.gllCall_glBeginConditionalRenderNV(gl.glBeginConditionalRenderNV, (C.uint32_t)(id), (C.uint32_t)(mode))
}
func (gl *lib) BeginConditionalRenderNVX(id uint32) {
	C.gllCall_glBeginConditionalRenderNVX(gl.glBeginConditionalRenderNVX, (C.uint32_t)(id))
}
func (gl *lib) BeginFragmentShaderATI() {
	C.gllCall_glBeginFragmentShaderATI(gl.glBeginFragmentShaderATI)
}
func (gl *lib) BeginOcclusionQueryNV(id uint32) {
	C.gllCall_glBeginOcclusionQueryNV(gl.glBeginOcclusionQueryNV, (C.uint32_t)(id))
}
func (gl *lib) BeginPerfMonitorAMD(monitor uint32) {
	C.gllCall_glBeginPerfMonitorAMD(gl.glBeginPerfMonitorAMD, (C.uint32_t)(monitor))
}
func (gl *lib) BeginPerfQueryINTEL(queryHandle uint32) {
	C.gllCall_glBeginPerfQueryINTEL(gl.glBeginPerfQueryINTEL, (C.uint32_t)(queryHandle))
}
func (gl *lib) BeginQuery(target uint32, id uint32) {
	C.gllCall_glBeginQuery(gl.glBeginQuery, (C.uint32_t)(target), (C.uint32_t)(id))
}
func (gl *lib) BeginQueryARB(target uint32, id uint32) {
	C.gllCall_glBeginQueryARB(gl.glBeginQueryARB, (C.uint32_t)(target), (C.uint32_t)(id))
}
func (gl *lib) BeginQueryEXT(target uint32, id uint32) {
	C.gllCall_glBeginQueryEXT(gl.glBeginQueryEXT, (C.uint32_t)(target), (C.uint32_t)(id))
}
func (gl *lib) BeginQueryIndexed(target uint32, index uint32, id uint32) {
	C.gllCall_glBeginQueryIndexed(gl.glBeginQueryIndexed, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(id))
}
func (gl *lib) BeginTransformFeedback(primitiveMode uint32) {
	C.gllCall_glBeginTransformFeedback(gl.glBeginTransformFeedback, (C.uint32_t)(primitiveMode))
}
func (gl *lib) BeginTransformFeedbackEXT(primitiveMode uint32) {
	C.gllCall_glBeginTransformFeedbackEXT(gl.glBeginTransformFeedbackEXT, (C.uint32_t)(primitiveMode))
}
func (gl *lib) BeginTransformFeedbackNV(primitiveMode uint32) {
	C.gllCall_glBeginTransformFeedbackNV(gl.glBeginTransformFeedbackNV, (C.uint32_t)(primitiveMode))
}
func (gl *lib) BeginVertexShaderEXT() {
	C.gllCall_glBeginVertexShaderEXT(gl.glBeginVertexShaderEXT)
}
func (gl *lib) BeginVideoCaptureNV(video_capture_slot uint32) {
	C.gllCall_glBeginVideoCaptureNV(gl.glBeginVideoCaptureNV, (C.uint32_t)(video_capture_slot))
}
func (gl *lib) BindAttribLocation(program uint32, index uint32, name *uint8) {
	C.gllCall_glBindAttribLocation(gl.glBindAttribLocation, (C.uint32_t)(program), (C.uint32_t)(index), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) BindAttribLocationARB(programObj GLhandleARB, index uint32, name *uint8) {
	C.gllCall_glBindAttribLocationARB(gl.glBindAttribLocationARB, (C.GLhandleARB)(programObj), (C.uint32_t)(index), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) BindBuffer(target uint32, buffer uint32) {
	C.gllCall_glBindBuffer(gl.glBindBuffer, (C.uint32_t)(target), (C.uint32_t)(buffer))
}
func (gl *lib) BindBufferARB(target uint32, buffer uint32) {
	C.gllCall_glBindBufferARB(gl.glBindBufferARB, (C.uint32_t)(target), (C.uint32_t)(buffer))
}
func (gl *lib) BindBufferBase(target uint32, index uint32, buffer uint32) {
	C.gllCall_glBindBufferBase(gl.glBindBufferBase, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(buffer))
}
func (gl *lib) BindBufferBaseEXT(target uint32, index uint32, buffer uint32) {
	C.gllCall_glBindBufferBaseEXT(gl.glBindBufferBaseEXT, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(buffer))
}
func (gl *lib) BindBufferBaseNV(target uint32, index uint32, buffer uint32) {
	C.gllCall_glBindBufferBaseNV(gl.glBindBufferBaseNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(buffer))
}
func (gl *lib) BindBufferOffsetEXT(target uint32, index uint32, buffer uint32, offset uintptr) {
	C.gllCall_glBindBufferOffsetEXT(gl.glBindBufferOffsetEXT, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(buffer), (C.intptr_t)(offset))
}
func (gl *lib) BindBufferOffsetNV(target uint32, index uint32, buffer uint32, offset uintptr) {
	C.gllCall_glBindBufferOffsetNV(gl.glBindBufferOffsetNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(buffer), (C.intptr_t)(offset))
}
func (gl *lib) BindBufferRange(target uint32, index uint32, buffer uint32, offset uintptr, size int) {
	C.gllCall_glBindBufferRange(gl.glBindBufferRange, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size))
}
func (gl *lib) BindBufferRangeEXT(target uint32, index uint32, buffer uint32, offset uintptr, size int) {
	C.gllCall_glBindBufferRangeEXT(gl.glBindBufferRangeEXT, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size))
}
func (gl *lib) BindBufferRangeNV(target uint32, index uint32, buffer uint32, offset uintptr, size int) {
	C.gllCall_glBindBufferRangeNV(gl.glBindBufferRangeNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size))
}
func (gl *lib) BindBuffersBase(target uint32, first uint32, count int32, buffers *uint32) {
	C.gllCall_glBindBuffersBase(gl.glBindBuffersBase, (C.uint32_t)(target), (C.uint32_t)(first), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(buffers)))
}
func (gl *lib) BindBuffersRange(target uint32, first uint32, count int32, buffers *uint32, offsets *uintptr, sizes *int) {
	C.gllCall_glBindBuffersRange(gl.glBindBuffersRange, (C.uint32_t)(target), (C.uint32_t)(first), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(buffers)), (*C.intptr_t)(unsafe.Pointer(offsets)), (*C.ssize_t)(unsafe.Pointer(sizes)))
}
func (gl *lib) BindFragDataLocation(program uint32, color uint32, name *uint8) {
	C.gllCall_glBindFragDataLocation(gl.glBindFragDataLocation, (C.uint32_t)(program), (C.uint32_t)(color), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) BindFragDataLocationEXT(program uint32, color uint32, name *uint8) {
	C.gllCall_glBindFragDataLocationEXT(gl.glBindFragDataLocationEXT, (C.uint32_t)(program), (C.uint32_t)(color), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *uint8) {
	C.gllCall_glBindFragDataLocationIndexed(gl.glBindFragDataLocationIndexed, (C.uint32_t)(program), (C.uint32_t)(colorNumber), (C.uint32_t)(index), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) BindFragDataLocationIndexedEXT(program uint32, colorNumber uint32, index uint32, name *uint8) {
	C.gllCall_glBindFragDataLocationIndexedEXT(gl.glBindFragDataLocationIndexedEXT, (C.uint32_t)(program), (C.uint32_t)(colorNumber), (C.uint32_t)(index), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) BindFragmentShaderATI(id uint32) {
	C.gllCall_glBindFragmentShaderATI(gl.glBindFragmentShaderATI, (C.uint32_t)(id))
}
func (gl *lib) BindFramebuffer(target uint32, framebuffer uint32) {
	C.gllCall_glBindFramebuffer(gl.glBindFramebuffer, (C.uint32_t)(target), (C.uint32_t)(framebuffer))
}
func (gl *lib) BindFramebufferEXT(target uint32, framebuffer uint32) {
	C.gllCall_glBindFramebufferEXT(gl.glBindFramebufferEXT, (C.uint32_t)(target), (C.uint32_t)(framebuffer))
}
func (gl *lib) BindFramebufferOES(target uint32, framebuffer uint32) {
	C.gllCall_glBindFramebufferOES(gl.glBindFramebufferOES, (C.uint32_t)(target), (C.uint32_t)(framebuffer))
}
func (gl *lib) BindImageTexture(unit uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format uint32) {
	C.gllCall_glBindImageTexture(gl.glBindImageTexture, (C.uint32_t)(unit), (C.uint32_t)(texture), (C.int32_t)(level), (C._Bool)(layered), (C.int32_t)(layer), (C.uint32_t)(access), (C.uint32_t)(format))
}
func (gl *lib) BindImageTextureEXT(index uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format int32) {
	C.gllCall_glBindImageTextureEXT(gl.glBindImageTextureEXT, (C.uint32_t)(index), (C.uint32_t)(texture), (C.int32_t)(level), (C._Bool)(layered), (C.int32_t)(layer), (C.uint32_t)(access), (C.int32_t)(format))
}
func (gl *lib) BindImageTextures(first uint32, count int32, textures *uint32) {
	C.gllCall_glBindImageTextures(gl.glBindImageTextures, (C.uint32_t)(first), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(textures)))
}
func (gl *lib) BindLightParameterEXT(light uint32, value uint32) uint32 {
	return (uint32)(C.gllCall_glBindLightParameterEXT(gl.glBindLightParameterEXT, (C.uint32_t)(light), (C.uint32_t)(value)))
}
func (gl *lib) BindMaterialParameterEXT(face uint32, value uint32) uint32 {
	return (uint32)(C.gllCall_glBindMaterialParameterEXT(gl.glBindMaterialParameterEXT, (C.uint32_t)(face), (C.uint32_t)(value)))
}
func (gl *lib) BindMultiTextureEXT(texunit uint32, target uint32, texture uint32) {
	C.gllCall_glBindMultiTextureEXT(gl.glBindMultiTextureEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(texture))
}
func (gl *lib) BindParameterEXT(value uint32) uint32 {
	return (uint32)(C.gllCall_glBindParameterEXT(gl.glBindParameterEXT, (C.uint32_t)(value)))
}
func (gl *lib) BindProgramARB(target uint32, program uint32) {
	C.gllCall_glBindProgramARB(gl.glBindProgramARB, (C.uint32_t)(target), (C.uint32_t)(program))
}
func (gl *lib) BindProgramNV(target uint32, id uint32) {
	C.gllCall_glBindProgramNV(gl.glBindProgramNV, (C.uint32_t)(target), (C.uint32_t)(id))
}
func (gl *lib) BindProgramPipeline(pipeline uint32) {
	C.gllCall_glBindProgramPipeline(gl.glBindProgramPipeline, (C.uint32_t)(pipeline))
}
func (gl *lib) BindProgramPipelineEXT(pipeline uint32) {
	C.gllCall_glBindProgramPipelineEXT(gl.glBindProgramPipelineEXT, (C.uint32_t)(pipeline))
}
func (gl *lib) BindRenderbuffer(target uint32, renderbuffer uint32) {
	C.gllCall_glBindRenderbuffer(gl.glBindRenderbuffer, (C.uint32_t)(target), (C.uint32_t)(renderbuffer))
}
func (gl *lib) BindRenderbufferEXT(target uint32, renderbuffer uint32) {
	C.gllCall_glBindRenderbufferEXT(gl.glBindRenderbufferEXT, (C.uint32_t)(target), (C.uint32_t)(renderbuffer))
}
func (gl *lib) BindRenderbufferOES(target uint32, renderbuffer uint32) {
	C.gllCall_glBindRenderbufferOES(gl.glBindRenderbufferOES, (C.uint32_t)(target), (C.uint32_t)(renderbuffer))
}
func (gl *lib) BindSampler(unit uint32, sampler uint32) {
	C.gllCall_glBindSampler(gl.glBindSampler, (C.uint32_t)(unit), (C.uint32_t)(sampler))
}
func (gl *lib) BindSamplers(first uint32, count int32, samplers *uint32) {
	C.gllCall_glBindSamplers(gl.glBindSamplers, (C.uint32_t)(first), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(samplers)))
}
func (gl *lib) BindShadingRateImageNV(texture uint32) {
	C.gllCall_glBindShadingRateImageNV(gl.glBindShadingRateImageNV, (C.uint32_t)(texture))
}
func (gl *lib) BindTexGenParameterEXT(unit uint32, coord uint32, value uint32) uint32 {
	return (uint32)(C.gllCall_glBindTexGenParameterEXT(gl.glBindTexGenParameterEXT, (C.uint32_t)(unit), (C.uint32_t)(coord), (C.uint32_t)(value)))
}
func (gl *lib) BindTexture(target uint32, texture uint32) {
	C.gllCall_glBindTexture(gl.glBindTexture, (C.uint32_t)(target), (C.uint32_t)(texture))
}
func (gl *lib) BindTextureEXT(target uint32, texture uint32) {
	C.gllCall_glBindTextureEXT(gl.glBindTextureEXT, (C.uint32_t)(target), (C.uint32_t)(texture))
}
func (gl *lib) BindTextureUnit(unit uint32, texture uint32) {
	C.gllCall_glBindTextureUnit(gl.glBindTextureUnit, (C.uint32_t)(unit), (C.uint32_t)(texture))
}
func (gl *lib) BindTextureUnitParameterEXT(unit uint32, value uint32) uint32 {
	return (uint32)(C.gllCall_glBindTextureUnitParameterEXT(gl.glBindTextureUnitParameterEXT, (C.uint32_t)(unit), (C.uint32_t)(value)))
}
func (gl *lib) BindTextures(first uint32, count int32, textures *uint32) {
	C.gllCall_glBindTextures(gl.glBindTextures, (C.uint32_t)(first), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(textures)))
}
func (gl *lib) BindTransformFeedback(target uint32, id uint32) {
	C.gllCall_glBindTransformFeedback(gl.glBindTransformFeedback, (C.uint32_t)(target), (C.uint32_t)(id))
}
func (gl *lib) BindTransformFeedbackNV(target uint32, id uint32) {
	C.gllCall_glBindTransformFeedbackNV(gl.glBindTransformFeedbackNV, (C.uint32_t)(target), (C.uint32_t)(id))
}
func (gl *lib) BindVertexArray(array uint32) {
	C.gllCall_glBindVertexArray(gl.glBindVertexArray, (C.uint32_t)(array))
}
func (gl *lib) BindVertexArrayAPPLE(array uint32) {
	C.gllCall_glBindVertexArrayAPPLE(gl.glBindVertexArrayAPPLE, (C.uint32_t)(array))
}
func (gl *lib) BindVertexArrayOES(array uint32) {
	C.gllCall_glBindVertexArrayOES(gl.glBindVertexArrayOES, (C.uint32_t)(array))
}
func (gl *lib) BindVertexBuffer(bindingindex uint32, buffer uint32, offset uintptr, stride int32) {
	C.gllCall_glBindVertexBuffer(gl.glBindVertexBuffer, (C.uint32_t)(bindingindex), (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.int32_t)(stride))
}
func (gl *lib) BindVertexBuffers(first uint32, count int32, buffers *uint32, offsets *uintptr, strides *int32) {
	C.gllCall_glBindVertexBuffers(gl.glBindVertexBuffers, (C.uint32_t)(first), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(buffers)), (*C.intptr_t)(unsafe.Pointer(offsets)), (*C.int32_t)(unsafe.Pointer(strides)))
}
func (gl *lib) BindVertexShaderEXT(id uint32) {
	C.gllCall_glBindVertexShaderEXT(gl.glBindVertexShaderEXT, (C.uint32_t)(id))
}
func (gl *lib) BindVideoCaptureStreamBufferNV(video_capture_slot uint32, stream uint32, frame_region uint32, offset uintptr) {
	C.gllCall_glBindVideoCaptureStreamBufferNV(gl.glBindVideoCaptureStreamBufferNV, (C.uint32_t)(video_capture_slot), (C.uint32_t)(stream), (C.uint32_t)(frame_region), (C.intptr_t)(offset))
}
func (gl *lib) BindVideoCaptureStreamTextureNV(video_capture_slot uint32, stream uint32, frame_region uint32, target uint32, texture uint32) {
	C.gllCall_glBindVideoCaptureStreamTextureNV(gl.glBindVideoCaptureStreamTextureNV, (C.uint32_t)(video_capture_slot), (C.uint32_t)(stream), (C.uint32_t)(frame_region), (C.uint32_t)(target), (C.uint32_t)(texture))
}
func (gl *lib) Binormal3bEXT(bx int8, by int8, bz int8) {
	C.gllCall_glBinormal3bEXT(gl.glBinormal3bEXT, (C.int8_t)(bx), (C.int8_t)(by), (C.int8_t)(bz))
}
func (gl *lib) Binormal3bvEXT(v *int8) {
	C.gllCall_glBinormal3bvEXT(gl.glBinormal3bvEXT, (*C.int8_t)(unsafe.Pointer(v)))
}
func (gl *lib) Binormal3dEXT(bx float64, by float64, bz float64) {
	C.gllCall_glBinormal3dEXT(gl.glBinormal3dEXT, (C.double)(bx), (C.double)(by), (C.double)(bz))
}
func (gl *lib) Binormal3dvEXT(v *float64) {
	C.gllCall_glBinormal3dvEXT(gl.glBinormal3dvEXT, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) Binormal3fEXT(bx float32, by float32, bz float32) {
	C.gllCall_glBinormal3fEXT(gl.glBinormal3fEXT, (C.float)(bx), (C.float)(by), (C.float)(bz))
}
func (gl *lib) Binormal3fvEXT(v *float32) {
	C.gllCall_glBinormal3fvEXT(gl.glBinormal3fvEXT, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) Binormal3iEXT(bx int32, by int32, bz int32) {
	C.gllCall_glBinormal3iEXT(gl.glBinormal3iEXT, (C.int32_t)(bx), (C.int32_t)(by), (C.int32_t)(bz))
}
func (gl *lib) Binormal3ivEXT(v *int32) {
	C.gllCall_glBinormal3ivEXT(gl.glBinormal3ivEXT, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) Binormal3sEXT(bx int16, by int16, bz int16) {
	C.gllCall_glBinormal3sEXT(gl.glBinormal3sEXT, (C.int16_t)(bx), (C.int16_t)(by), (C.int16_t)(bz))
}
func (gl *lib) Binormal3svEXT(v *int16) {
	C.gllCall_glBinormal3svEXT(gl.glBinormal3svEXT, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) BinormalPointerEXT(type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glBinormalPointerEXT(gl.glBinormalPointerEXT, (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8) {
	C.gllCall_glBitmap(gl.glBitmap, (C.int32_t)(width), (C.int32_t)(height), (C.float)(xorig), (C.float)(yorig), (C.float)(xmove), (C.float)(ymove), (*C.uint8_t)(unsafe.Pointer(bitmap)))
}
func (gl *lib) BitmapxOES(width int32, height int32, xorig int32, yorig int32, xmove int32, ymove int32, bitmap *uint8) {
	C.gllCall_glBitmapxOES(gl.glBitmapxOES, (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(xorig), (C.int32_t)(yorig), (C.int32_t)(xmove), (C.int32_t)(ymove), (*C.uint8_t)(unsafe.Pointer(bitmap)))
}
func (gl *lib) BlendBarrier() {
	C.gllCall_glBlendBarrier(gl.glBlendBarrier)
}
func (gl *lib) BlendBarrierKHR() {
	C.gllCall_glBlendBarrierKHR(gl.glBlendBarrierKHR)
}
func (gl *lib) BlendBarrierNV() {
	C.gllCall_glBlendBarrierNV(gl.glBlendBarrierNV)
}
func (gl *lib) BlendColor(red float32, green float32, blue float32, alpha float32) {
	C.gllCall_glBlendColor(gl.glBlendColor, (C.float)(red), (C.float)(green), (C.float)(blue), (C.float)(alpha))
}
func (gl *lib) BlendColorEXT(red float32, green float32, blue float32, alpha float32) {
	C.gllCall_glBlendColorEXT(gl.glBlendColorEXT, (C.float)(red), (C.float)(green), (C.float)(blue), (C.float)(alpha))
}
func (gl *lib) BlendColorxOES(red int32, green int32, blue int32, alpha int32) {
	C.gllCall_glBlendColorxOES(gl.glBlendColorxOES, (C.int32_t)(red), (C.int32_t)(green), (C.int32_t)(blue), (C.int32_t)(alpha))
}
func (gl *lib) BlendEquation(mode uint32) {
	C.gllCall_glBlendEquation(gl.glBlendEquation, (C.uint32_t)(mode))
}
func (gl *lib) BlendEquationEXT(mode uint32) {
	C.gllCall_glBlendEquationEXT(gl.glBlendEquationEXT, (C.uint32_t)(mode))
}
func (gl *lib) BlendEquationIndexedAMD(buf uint32, mode uint32) {
	C.gllCall_glBlendEquationIndexedAMD(gl.glBlendEquationIndexedAMD, (C.uint32_t)(buf), (C.uint32_t)(mode))
}
func (gl *lib) BlendEquationOES(mode uint32) {
	C.gllCall_glBlendEquationOES(gl.glBlendEquationOES, (C.uint32_t)(mode))
}
func (gl *lib) BlendEquationSeparate(modeRGB uint32, modeAlpha uint32) {
	C.gllCall_glBlendEquationSeparate(gl.glBlendEquationSeparate, (C.uint32_t)(modeRGB), (C.uint32_t)(modeAlpha))
}
func (gl *lib) BlendEquationSeparateEXT(modeRGB uint32, modeAlpha uint32) {
	C.gllCall_glBlendEquationSeparateEXT(gl.glBlendEquationSeparateEXT, (C.uint32_t)(modeRGB), (C.uint32_t)(modeAlpha))
}
func (gl *lib) BlendEquationSeparateIndexedAMD(buf uint32, modeRGB uint32, modeAlpha uint32) {
	C.gllCall_glBlendEquationSeparateIndexedAMD(gl.glBlendEquationSeparateIndexedAMD, (C.uint32_t)(buf), (C.uint32_t)(modeRGB), (C.uint32_t)(modeAlpha))
}
func (gl *lib) BlendEquationSeparateOES(modeRGB uint32, modeAlpha uint32) {
	C.gllCall_glBlendEquationSeparateOES(gl.glBlendEquationSeparateOES, (C.uint32_t)(modeRGB), (C.uint32_t)(modeAlpha))
}
func (gl *lib) BlendEquationSeparatei(buf uint32, modeRGB uint32, modeAlpha uint32) {
	C.gllCall_glBlendEquationSeparatei(gl.glBlendEquationSeparatei, (C.uint32_t)(buf), (C.uint32_t)(modeRGB), (C.uint32_t)(modeAlpha))
}
func (gl *lib) BlendEquationSeparateiARB(buf uint32, modeRGB uint32, modeAlpha uint32) {
	C.gllCall_glBlendEquationSeparateiARB(gl.glBlendEquationSeparateiARB, (C.uint32_t)(buf), (C.uint32_t)(modeRGB), (C.uint32_t)(modeAlpha))
}
func (gl *lib) BlendEquationSeparateiEXT(buf uint32, modeRGB uint32, modeAlpha uint32) {
	C.gllCall_glBlendEquationSeparateiEXT(gl.glBlendEquationSeparateiEXT, (C.uint32_t)(buf), (C.uint32_t)(modeRGB), (C.uint32_t)(modeAlpha))
}
func (gl *lib) BlendEquationSeparateiOES(buf uint32, modeRGB uint32, modeAlpha uint32) {
	C.gllCall_glBlendEquationSeparateiOES(gl.glBlendEquationSeparateiOES, (C.uint32_t)(buf), (C.uint32_t)(modeRGB), (C.uint32_t)(modeAlpha))
}
func (gl *lib) BlendEquationi(buf uint32, mode uint32) {
	C.gllCall_glBlendEquationi(gl.glBlendEquationi, (C.uint32_t)(buf), (C.uint32_t)(mode))
}
func (gl *lib) BlendEquationiARB(buf uint32, mode uint32) {
	C.gllCall_glBlendEquationiARB(gl.glBlendEquationiARB, (C.uint32_t)(buf), (C.uint32_t)(mode))
}
func (gl *lib) BlendEquationiEXT(buf uint32, mode uint32) {
	C.gllCall_glBlendEquationiEXT(gl.glBlendEquationiEXT, (C.uint32_t)(buf), (C.uint32_t)(mode))
}
func (gl *lib) BlendEquationiOES(buf uint32, mode uint32) {
	C.gllCall_glBlendEquationiOES(gl.glBlendEquationiOES, (C.uint32_t)(buf), (C.uint32_t)(mode))
}
func (gl *lib) BlendFunc(sfactor uint32, dfactor uint32) {
	C.gllCall_glBlendFunc(gl.glBlendFunc, (C.uint32_t)(sfactor), (C.uint32_t)(dfactor))
}
func (gl *lib) BlendFuncIndexedAMD(buf uint32, src uint32, dst uint32) {
	C.gllCall_glBlendFuncIndexedAMD(gl.glBlendFuncIndexedAMD, (C.uint32_t)(buf), (C.uint32_t)(src), (C.uint32_t)(dst))
}
func (gl *lib) BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32) {
	C.gllCall_glBlendFuncSeparate(gl.glBlendFuncSeparate, (C.uint32_t)(sfactorRGB), (C.uint32_t)(dfactorRGB), (C.uint32_t)(sfactorAlpha), (C.uint32_t)(dfactorAlpha))
}
func (gl *lib) BlendFuncSeparateEXT(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32) {
	C.gllCall_glBlendFuncSeparateEXT(gl.glBlendFuncSeparateEXT, (C.uint32_t)(sfactorRGB), (C.uint32_t)(dfactorRGB), (C.uint32_t)(sfactorAlpha), (C.uint32_t)(dfactorAlpha))
}
func (gl *lib) BlendFuncSeparateINGR(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32) {
	C.gllCall_glBlendFuncSeparateINGR(gl.glBlendFuncSeparateINGR, (C.uint32_t)(sfactorRGB), (C.uint32_t)(dfactorRGB), (C.uint32_t)(sfactorAlpha), (C.uint32_t)(dfactorAlpha))
}
func (gl *lib) BlendFuncSeparateIndexedAMD(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
	C.gllCall_glBlendFuncSeparateIndexedAMD(gl.glBlendFuncSeparateIndexedAMD, (C.uint32_t)(buf), (C.uint32_t)(srcRGB), (C.uint32_t)(dstRGB), (C.uint32_t)(srcAlpha), (C.uint32_t)(dstAlpha))
}
func (gl *lib) BlendFuncSeparateOES(srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
	C.gllCall_glBlendFuncSeparateOES(gl.glBlendFuncSeparateOES, (C.uint32_t)(srcRGB), (C.uint32_t)(dstRGB), (C.uint32_t)(srcAlpha), (C.uint32_t)(dstAlpha))
}
func (gl *lib) BlendFuncSeparatei(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
	C.gllCall_glBlendFuncSeparatei(gl.glBlendFuncSeparatei, (C.uint32_t)(buf), (C.uint32_t)(srcRGB), (C.uint32_t)(dstRGB), (C.uint32_t)(srcAlpha), (C.uint32_t)(dstAlpha))
}
func (gl *lib) BlendFuncSeparateiARB(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
	C.gllCall_glBlendFuncSeparateiARB(gl.glBlendFuncSeparateiARB, (C.uint32_t)(buf), (C.uint32_t)(srcRGB), (C.uint32_t)(dstRGB), (C.uint32_t)(srcAlpha), (C.uint32_t)(dstAlpha))
}
func (gl *lib) BlendFuncSeparateiEXT(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
	C.gllCall_glBlendFuncSeparateiEXT(gl.glBlendFuncSeparateiEXT, (C.uint32_t)(buf), (C.uint32_t)(srcRGB), (C.uint32_t)(dstRGB), (C.uint32_t)(srcAlpha), (C.uint32_t)(dstAlpha))
}
func (gl *lib) BlendFuncSeparateiOES(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
	C.gllCall_glBlendFuncSeparateiOES(gl.glBlendFuncSeparateiOES, (C.uint32_t)(buf), (C.uint32_t)(srcRGB), (C.uint32_t)(dstRGB), (C.uint32_t)(srcAlpha), (C.uint32_t)(dstAlpha))
}
func (gl *lib) BlendFunci(buf uint32, src uint32, dst uint32) {
	C.gllCall_glBlendFunci(gl.glBlendFunci, (C.uint32_t)(buf), (C.uint32_t)(src), (C.uint32_t)(dst))
}
func (gl *lib) BlendFunciARB(buf uint32, src uint32, dst uint32) {
	C.gllCall_glBlendFunciARB(gl.glBlendFunciARB, (C.uint32_t)(buf), (C.uint32_t)(src), (C.uint32_t)(dst))
}
func (gl *lib) BlendFunciEXT(buf uint32, src uint32, dst uint32) {
	C.gllCall_glBlendFunciEXT(gl.glBlendFunciEXT, (C.uint32_t)(buf), (C.uint32_t)(src), (C.uint32_t)(dst))
}
func (gl *lib) BlendFunciOES(buf uint32, src uint32, dst uint32) {
	C.gllCall_glBlendFunciOES(gl.glBlendFunciOES, (C.uint32_t)(buf), (C.uint32_t)(src), (C.uint32_t)(dst))
}
func (gl *lib) BlendParameteriNV(pname uint32, value int32) {
	C.gllCall_glBlendParameteriNV(gl.glBlendParameteriNV, (C.uint32_t)(pname), (C.int32_t)(value))
}
func (gl *lib) BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
	C.gllCall_glBlitFramebuffer(gl.glBlitFramebuffer, (C.int32_t)(srcX0), (C.int32_t)(srcY0), (C.int32_t)(srcX1), (C.int32_t)(srcY1), (C.int32_t)(dstX0), (C.int32_t)(dstY0), (C.int32_t)(dstX1), (C.int32_t)(dstY1), (C.uint32_t)(mask), (C.uint32_t)(filter))
}
func (gl *lib) BlitFramebufferANGLE(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
	C.gllCall_glBlitFramebufferANGLE(gl.glBlitFramebufferANGLE, (C.int32_t)(srcX0), (C.int32_t)(srcY0), (C.int32_t)(srcX1), (C.int32_t)(srcY1), (C.int32_t)(dstX0), (C.int32_t)(dstY0), (C.int32_t)(dstX1), (C.int32_t)(dstY1), (C.uint32_t)(mask), (C.uint32_t)(filter))
}
func (gl *lib) BlitFramebufferEXT(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
	C.gllCall_glBlitFramebufferEXT(gl.glBlitFramebufferEXT, (C.int32_t)(srcX0), (C.int32_t)(srcY0), (C.int32_t)(srcX1), (C.int32_t)(srcY1), (C.int32_t)(dstX0), (C.int32_t)(dstY0), (C.int32_t)(dstX1), (C.int32_t)(dstY1), (C.uint32_t)(mask), (C.uint32_t)(filter))
}
func (gl *lib) BlitFramebufferNV(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
	C.gllCall_glBlitFramebufferNV(gl.glBlitFramebufferNV, (C.int32_t)(srcX0), (C.int32_t)(srcY0), (C.int32_t)(srcX1), (C.int32_t)(srcY1), (C.int32_t)(dstX0), (C.int32_t)(dstY0), (C.int32_t)(dstX1), (C.int32_t)(dstY1), (C.uint32_t)(mask), (C.uint32_t)(filter))
}
func (gl *lib) BlitNamedFramebuffer(readFramebuffer uint32, drawFramebuffer uint32, srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
	C.gllCall_glBlitNamedFramebuffer(gl.glBlitNamedFramebuffer, (C.uint32_t)(readFramebuffer), (C.uint32_t)(drawFramebuffer), (C.int32_t)(srcX0), (C.int32_t)(srcY0), (C.int32_t)(srcX1), (C.int32_t)(srcY1), (C.int32_t)(dstX0), (C.int32_t)(dstY0), (C.int32_t)(dstX1), (C.int32_t)(dstY1), (C.uint32_t)(mask), (C.uint32_t)(filter))
}
func (gl *lib) BufferAddressRangeNV(pname uint32, index uint32, address uint64, length int) {
	C.gllCall_glBufferAddressRangeNV(gl.glBufferAddressRangeNV, (C.uint32_t)(pname), (C.uint32_t)(index), (C.uint64_t)(address), (C.ssize_t)(length))
}
func (gl *lib) BufferAttachMemoryNV(target uint32, memory uint32, offset uint64) {
	C.gllCall_glBufferAttachMemoryNV(gl.glBufferAttachMemoryNV, (C.uint32_t)(target), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) BufferData(target uint32, size int, data unsafe.Pointer, usage uint32) {
	C.gllCall_glBufferData(gl.glBufferData, (C.uint32_t)(target), (C.ssize_t)(size), (unsafe.Pointer)(data), (C.uint32_t)(usage))
}
func (gl *lib) BufferDataARB(target uint32, size int, data unsafe.Pointer, usage uint32) {
	C.gllCall_glBufferDataARB(gl.glBufferDataARB, (C.uint32_t)(target), (C.ssize_t)(size), (unsafe.Pointer)(data), (C.uint32_t)(usage))
}
func (gl *lib) BufferPageCommitmentARB(target uint32, offset uintptr, size int, commit bool) {
	C.gllCall_glBufferPageCommitmentARB(gl.glBufferPageCommitmentARB, (C.uint32_t)(target), (C.intptr_t)(offset), (C.ssize_t)(size), (C._Bool)(commit))
}
func (gl *lib) BufferPageCommitmentMemNV(target uint32, offset uintptr, size int, memory uint32, memOffset uint64, commit bool) {
	C.gllCall_glBufferPageCommitmentMemNV(gl.glBufferPageCommitmentMemNV, (C.uint32_t)(target), (C.intptr_t)(offset), (C.ssize_t)(size), (C.uint32_t)(memory), (C.uint64_t)(memOffset), (C._Bool)(commit))
}
func (gl *lib) BufferParameteriAPPLE(target uint32, pname uint32, param int32) {
	C.gllCall_glBufferParameteriAPPLE(gl.glBufferParameteriAPPLE, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) BufferStorage(target uint32, size int, data unsafe.Pointer, flags uint32) {
	C.gllCall_glBufferStorage(gl.glBufferStorage, (C.uint32_t)(target), (C.ssize_t)(size), (unsafe.Pointer)(data), (C.uint32_t)(flags))
}
func (gl *lib) BufferStorageEXT(target uint32, size int, data unsafe.Pointer, flags uint32) {
	C.gllCall_glBufferStorageEXT(gl.glBufferStorageEXT, (C.uint32_t)(target), (C.ssize_t)(size), (unsafe.Pointer)(data), (C.uint32_t)(flags))
}
func (gl *lib) BufferStorageMemEXT(target uint32, size int, memory uint32, offset uint64) {
	C.gllCall_glBufferStorageMemEXT(gl.glBufferStorageMemEXT, (C.uint32_t)(target), (C.ssize_t)(size), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer) {
	C.gllCall_glBufferSubData(gl.glBufferSubData, (C.uint32_t)(target), (C.intptr_t)(offset), (C.ssize_t)(size), (unsafe.Pointer)(data))
}
func (gl *lib) BufferSubDataARB(target uint32, offset uintptr, size int, data unsafe.Pointer) {
	C.gllCall_glBufferSubDataARB(gl.glBufferSubDataARB, (C.uint32_t)(target), (C.intptr_t)(offset), (C.ssize_t)(size), (unsafe.Pointer)(data))
}
func (gl *lib) CallCommandListNV(list uint32) {
	C.gllCall_glCallCommandListNV(gl.glCallCommandListNV, (C.uint32_t)(list))
}
func (gl *lib) CallList(list uint32) {
	C.gllCall_glCallList(gl.glCallList, (C.uint32_t)(list))
}
func (gl *lib) CallLists(n int32, type_ uint32, lists unsafe.Pointer) {
	C.gllCall_glCallLists(gl.glCallLists, (C.int32_t)(n), (C.uint32_t)(type_), (unsafe.Pointer)(lists))
}
func (gl *lib) CheckFramebufferStatus(target uint32) uint32 {
	return (uint32)(C.gllCall_glCheckFramebufferStatus(gl.glCheckFramebufferStatus, (C.uint32_t)(target)))
}
func (gl *lib) CheckFramebufferStatusEXT(target uint32) uint32 {
	return (uint32)(C.gllCall_glCheckFramebufferStatusEXT(gl.glCheckFramebufferStatusEXT, (C.uint32_t)(target)))
}
func (gl *lib) CheckFramebufferStatusOES(target uint32) uint32 {
	return (uint32)(C.gllCall_glCheckFramebufferStatusOES(gl.glCheckFramebufferStatusOES, (C.uint32_t)(target)))
}
func (gl *lib) CheckNamedFramebufferStatus(framebuffer uint32, target uint32) uint32 {
	return (uint32)(C.gllCall_glCheckNamedFramebufferStatus(gl.glCheckNamedFramebufferStatus, (C.uint32_t)(framebuffer), (C.uint32_t)(target)))
}
func (gl *lib) CheckNamedFramebufferStatusEXT(framebuffer uint32, target uint32) uint32 {
	return (uint32)(C.gllCall_glCheckNamedFramebufferStatusEXT(gl.glCheckNamedFramebufferStatusEXT, (C.uint32_t)(framebuffer), (C.uint32_t)(target)))
}
func (gl *lib) ClampColor(target uint32, clamp uint32) {
	C.gllCall_glClampColor(gl.glClampColor, (C.uint32_t)(target), (C.uint32_t)(clamp))
}
func (gl *lib) ClampColorARB(target uint32, clamp uint32) {
	C.gllCall_glClampColorARB(gl.glClampColorARB, (C.uint32_t)(target), (C.uint32_t)(clamp))
}
func (gl *lib) Clear(mask uint32) {
	C.gllCall_glClear(gl.glClear, (C.uint32_t)(mask))
}
func (gl *lib) ClearAccum(red float32, green float32, blue float32, alpha float32) {
	C.gllCall_glClearAccum(gl.glClearAccum, (C.float)(red), (C.float)(green), (C.float)(blue), (C.float)(alpha))
}
func (gl *lib) ClearAccumxOES(red int32, green int32, blue int32, alpha int32) {
	C.gllCall_glClearAccumxOES(gl.glClearAccumxOES, (C.int32_t)(red), (C.int32_t)(green), (C.int32_t)(blue), (C.int32_t)(alpha))
}
func (gl *lib) ClearBufferData(target uint32, internalformat uint32, format uint32, type_ uint32, data unsafe.Pointer) {
	C.gllCall_glClearBufferData(gl.glClearBufferData, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(data))
}
func (gl *lib) ClearBufferSubData(target uint32, internalformat uint32, offset uintptr, size int, format uint32, type_ uint32, data unsafe.Pointer) {
	C.gllCall_glClearBufferSubData(gl.glClearBufferSubData, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.intptr_t)(offset), (C.ssize_t)(size), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(data))
}
func (gl *lib) ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32) {
	C.gllCall_glClearBufferfi(gl.glClearBufferfi, (C.uint32_t)(buffer), (C.int32_t)(drawbuffer), (C.float)(depth), (C.int32_t)(stencil))
}
func (gl *lib) ClearBufferfv(buffer uint32, drawbuffer int32, value *float32) {
	C.gllCall_glClearBufferfv(gl.glClearBufferfv, (C.uint32_t)(buffer), (C.int32_t)(drawbuffer), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ClearBufferiv(buffer uint32, drawbuffer int32, value *int32) {
	C.gllCall_glClearBufferiv(gl.glClearBufferiv, (C.uint32_t)(buffer), (C.int32_t)(drawbuffer), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32) {
	C.gllCall_glClearBufferuiv(gl.glClearBufferuiv, (C.uint32_t)(buffer), (C.int32_t)(drawbuffer), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ClearColor(red float32, green float32, blue float32, alpha float32) {
	C.gllCall_glClearColor(gl.glClearColor, (C.float)(red), (C.float)(green), (C.float)(blue), (C.float)(alpha))
}
func (gl *lib) ClearColorIiEXT(red int32, green int32, blue int32, alpha int32) {
	C.gllCall_glClearColorIiEXT(gl.glClearColorIiEXT, (C.int32_t)(red), (C.int32_t)(green), (C.int32_t)(blue), (C.int32_t)(alpha))
}
func (gl *lib) ClearColorIuiEXT(red uint32, green uint32, blue uint32, alpha uint32) {
	C.gllCall_glClearColorIuiEXT(gl.glClearColorIuiEXT, (C.uint32_t)(red), (C.uint32_t)(green), (C.uint32_t)(blue), (C.uint32_t)(alpha))
}
func (gl *lib) ClearColorx(red int32, green int32, blue int32, alpha int32) {
	C.gllCall_glClearColorx(gl.glClearColorx, (C.int32_t)(red), (C.int32_t)(green), (C.int32_t)(blue), (C.int32_t)(alpha))
}
func (gl *lib) ClearColorxOES(red int32, green int32, blue int32, alpha int32) {
	C.gllCall_glClearColorxOES(gl.glClearColorxOES, (C.int32_t)(red), (C.int32_t)(green), (C.int32_t)(blue), (C.int32_t)(alpha))
}
func (gl *lib) ClearDepth(depth float64) {
	C.gllCall_glClearDepth(gl.glClearDepth, (C.double)(depth))
}
func (gl *lib) ClearDepthdNV(depth float64) {
	C.gllCall_glClearDepthdNV(gl.glClearDepthdNV, (C.double)(depth))
}
func (gl *lib) ClearDepthf(d float32) {
	C.gllCall_glClearDepthf(gl.glClearDepthf, (C.float)(d))
}
func (gl *lib) ClearDepthfOES(depth float32) {
	C.gllCall_glClearDepthfOES(gl.glClearDepthfOES, (C.float)(depth))
}
func (gl *lib) ClearDepthx(depth int32) {
	C.gllCall_glClearDepthx(gl.glClearDepthx, (C.int32_t)(depth))
}
func (gl *lib) ClearDepthxOES(depth int32) {
	C.gllCall_glClearDepthxOES(gl.glClearDepthxOES, (C.int32_t)(depth))
}
func (gl *lib) ClearIndex(c float32) {
	C.gllCall_glClearIndex(gl.glClearIndex, (C.float)(c))
}
func (gl *lib) ClearNamedBufferData(buffer uint32, internalformat uint32, format uint32, type_ uint32, data unsafe.Pointer) {
	C.gllCall_glClearNamedBufferData(gl.glClearNamedBufferData, (C.uint32_t)(buffer), (C.uint32_t)(internalformat), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(data))
}
func (gl *lib) ClearNamedBufferDataEXT(buffer uint32, internalformat uint32, format uint32, type_ uint32, data unsafe.Pointer) {
	C.gllCall_glClearNamedBufferDataEXT(gl.glClearNamedBufferDataEXT, (C.uint32_t)(buffer), (C.uint32_t)(internalformat), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(data))
}
func (gl *lib) ClearNamedBufferSubData(buffer uint32, internalformat uint32, offset uintptr, size int, format uint32, type_ uint32, data unsafe.Pointer) {
	C.gllCall_glClearNamedBufferSubData(gl.glClearNamedBufferSubData, (C.uint32_t)(buffer), (C.uint32_t)(internalformat), (C.intptr_t)(offset), (C.ssize_t)(size), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(data))
}
func (gl *lib) ClearNamedBufferSubDataEXT(buffer uint32, internalformat uint32, offset int, size int, format uint32, type_ uint32, data unsafe.Pointer) {
	C.gllCall_glClearNamedBufferSubDataEXT(gl.glClearNamedBufferSubDataEXT, (C.uint32_t)(buffer), (C.uint32_t)(internalformat), (C.ssize_t)(offset), (C.ssize_t)(size), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(data))
}
func (gl *lib) ClearNamedFramebufferfi(framebuffer uint32, buffer uint32, drawbuffer int32, depth float32, stencil int32) {
	C.gllCall_glClearNamedFramebufferfi(gl.glClearNamedFramebufferfi, (C.uint32_t)(framebuffer), (C.uint32_t)(buffer), (C.int32_t)(drawbuffer), (C.float)(depth), (C.int32_t)(stencil))
}
func (gl *lib) ClearNamedFramebufferfv(framebuffer uint32, buffer uint32, drawbuffer int32, value *float32) {
	C.gllCall_glClearNamedFramebufferfv(gl.glClearNamedFramebufferfv, (C.uint32_t)(framebuffer), (C.uint32_t)(buffer), (C.int32_t)(drawbuffer), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ClearNamedFramebufferiv(framebuffer uint32, buffer uint32, drawbuffer int32, value *int32) {
	C.gllCall_glClearNamedFramebufferiv(gl.glClearNamedFramebufferiv, (C.uint32_t)(framebuffer), (C.uint32_t)(buffer), (C.int32_t)(drawbuffer), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ClearNamedFramebufferuiv(framebuffer uint32, buffer uint32, drawbuffer int32, value *uint32) {
	C.gllCall_glClearNamedFramebufferuiv(gl.glClearNamedFramebufferuiv, (C.uint32_t)(framebuffer), (C.uint32_t)(buffer), (C.int32_t)(drawbuffer), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ClearPixelLocalStorageuiEXT(offset int32, n int32, values *uint32) {
	C.gllCall_glClearPixelLocalStorageuiEXT(gl.glClearPixelLocalStorageuiEXT, (C.int32_t)(offset), (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(values)))
}
func (gl *lib) ClearStencil(s int32) {
	C.gllCall_glClearStencil(gl.glClearStencil, (C.int32_t)(s))
}
func (gl *lib) ClearTexImage(texture uint32, level int32, format uint32, type_ uint32, data unsafe.Pointer) {
	C.gllCall_glClearTexImage(gl.glClearTexImage, (C.uint32_t)(texture), (C.int32_t)(level), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(data))
}
func (gl *lib) ClearTexImageEXT(texture uint32, level int32, format uint32, type_ uint32, data unsafe.Pointer) {
	C.gllCall_glClearTexImageEXT(gl.glClearTexImageEXT, (C.uint32_t)(texture), (C.int32_t)(level), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(data))
}
func (gl *lib) ClearTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, data unsafe.Pointer) {
	C.gllCall_glClearTexSubImage(gl.glClearTexSubImage, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(data))
}
func (gl *lib) ClearTexSubImageEXT(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, data unsafe.Pointer) {
	C.gllCall_glClearTexSubImageEXT(gl.glClearTexSubImageEXT, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(data))
}
func (gl *lib) ClientActiveTexture(texture uint32) {
	C.gllCall_glClientActiveTexture(gl.glClientActiveTexture, (C.uint32_t)(texture))
}
func (gl *lib) ClientActiveTextureARB(texture uint32) {
	C.gllCall_glClientActiveTextureARB(gl.glClientActiveTextureARB, (C.uint32_t)(texture))
}
func (gl *lib) ClientActiveVertexStreamATI(stream uint32) {
	C.gllCall_glClientActiveVertexStreamATI(gl.glClientActiveVertexStreamATI, (C.uint32_t)(stream))
}
func (gl *lib) ClientAttribDefaultEXT(mask uint32) {
	C.gllCall_glClientAttribDefaultEXT(gl.glClientAttribDefaultEXT, (C.uint32_t)(mask))
}
func (gl *lib) ClientWaitSemaphoreui64NVX(fenceObjectCount int32, semaphoreArray *uint32, fenceValueArray *uint64) {
	C.gllCall_glClientWaitSemaphoreui64NVX(gl.glClientWaitSemaphoreui64NVX, (C.int32_t)(fenceObjectCount), (*C.uint32_t)(unsafe.Pointer(semaphoreArray)), (*C.uint64_t)(unsafe.Pointer(fenceValueArray)))
}
func (gl *lib) ClientWaitSync(sync GLsync, flags uint32, timeout uint64) uint32 {
	return (uint32)(C.gllCall_glClientWaitSync(gl.glClientWaitSync, (C.GLsync)(sync), (C.uint32_t)(flags), (C.uint64_t)(timeout)))
}
func (gl *lib) ClientWaitSyncAPPLE(sync GLsync, flags uint32, timeout uint64) uint32 {
	return (uint32)(C.gllCall_glClientWaitSyncAPPLE(gl.glClientWaitSyncAPPLE, (C.GLsync)(sync), (C.uint32_t)(flags), (C.uint64_t)(timeout)))
}
func (gl *lib) ClipControl(origin uint32, depth uint32) {
	C.gllCall_glClipControl(gl.glClipControl, (C.uint32_t)(origin), (C.uint32_t)(depth))
}
func (gl *lib) ClipControlEXT(origin uint32, depth uint32) {
	C.gllCall_glClipControlEXT(gl.glClipControlEXT, (C.uint32_t)(origin), (C.uint32_t)(depth))
}
func (gl *lib) ClipPlane(plane uint32, equation *float64) {
	C.gllCall_glClipPlane(gl.glClipPlane, (C.uint32_t)(plane), (*C.double)(unsafe.Pointer(equation)))
}
func (gl *lib) ClipPlanef(p uint32, eqn *float32) {
	C.gllCall_glClipPlanef(gl.glClipPlanef, (C.uint32_t)(p), (*C.float)(unsafe.Pointer(eqn)))
}
func (gl *lib) ClipPlanefIMG(p uint32, eqn *float32) {
	C.gllCall_glClipPlanefIMG(gl.glClipPlanefIMG, (C.uint32_t)(p), (*C.float)(unsafe.Pointer(eqn)))
}
func (gl *lib) ClipPlanefOES(plane uint32, equation *float32) {
	C.gllCall_glClipPlanefOES(gl.glClipPlanefOES, (C.uint32_t)(plane), (*C.float)(unsafe.Pointer(equation)))
}
func (gl *lib) ClipPlanex(plane uint32, equation *int32) {
	C.gllCall_glClipPlanex(gl.glClipPlanex, (C.uint32_t)(plane), (*C.int32_t)(unsafe.Pointer(equation)))
}
func (gl *lib) ClipPlanexIMG(p uint32, eqn *int32) {
	C.gllCall_glClipPlanexIMG(gl.glClipPlanexIMG, (C.uint32_t)(p), (*C.int32_t)(unsafe.Pointer(eqn)))
}
func (gl *lib) ClipPlanexOES(plane uint32, equation *int32) {
	C.gllCall_glClipPlanexOES(gl.glClipPlanexOES, (C.uint32_t)(plane), (*C.int32_t)(unsafe.Pointer(equation)))
}
func (gl *lib) Color3b(red int8, green int8, blue int8) {
	C.gllCall_glColor3b(gl.glColor3b, (C.int8_t)(red), (C.int8_t)(green), (C.int8_t)(blue))
}
func (gl *lib) Color3bv(v *int8) {
	C.gllCall_glColor3bv(gl.glColor3bv, (*C.int8_t)(unsafe.Pointer(v)))
}
func (gl *lib) Color3d(red float64, green float64, blue float64) {
	C.gllCall_glColor3d(gl.glColor3d, (C.double)(red), (C.double)(green), (C.double)(blue))
}
func (gl *lib) Color3dv(v *float64) {
	C.gllCall_glColor3dv(gl.glColor3dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) Color3f(red float32, green float32, blue float32) {
	C.gllCall_glColor3f(gl.glColor3f, (C.float)(red), (C.float)(green), (C.float)(blue))
}
func (gl *lib) Color3fVertex3fSUN(r float32, g float32, b float32, x float32, y float32, z float32) {
	C.gllCall_glColor3fVertex3fSUN(gl.glColor3fVertex3fSUN, (C.float)(r), (C.float)(g), (C.float)(b), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) Color3fVertex3fvSUN(c *float32, v *float32) {
	C.gllCall_glColor3fVertex3fvSUN(gl.glColor3fVertex3fvSUN, (*C.float)(unsafe.Pointer(c)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) Color3fv(v *float32) {
	C.gllCall_glColor3fv(gl.glColor3fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) Color3hNV(red uint16, green uint16, blue uint16) {
	C.gllCall_glColor3hNV(gl.glColor3hNV, (C.uint16_t)(red), (C.uint16_t)(green), (C.uint16_t)(blue))
}
func (gl *lib) Color3hvNV(v *uint16) {
	C.gllCall_glColor3hvNV(gl.glColor3hvNV, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) Color3i(red int32, green int32, blue int32) {
	C.gllCall_glColor3i(gl.glColor3i, (C.int32_t)(red), (C.int32_t)(green), (C.int32_t)(blue))
}
func (gl *lib) Color3iv(v *int32) {
	C.gllCall_glColor3iv(gl.glColor3iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) Color3s(red int16, green int16, blue int16) {
	C.gllCall_glColor3s(gl.glColor3s, (C.int16_t)(red), (C.int16_t)(green), (C.int16_t)(blue))
}
func (gl *lib) Color3sv(v *int16) {
	C.gllCall_glColor3sv(gl.glColor3sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) Color3ub(red uint8, green uint8, blue uint8) {
	C.gllCall_glColor3ub(gl.glColor3ub, (C.uint8_t)(red), (C.uint8_t)(green), (C.uint8_t)(blue))
}
func (gl *lib) Color3ubv(v *uint8) {
	C.gllCall_glColor3ubv(gl.glColor3ubv, (*C.uint8_t)(unsafe.Pointer(v)))
}
func (gl *lib) Color3ui(red uint32, green uint32, blue uint32) {
	C.gllCall_glColor3ui(gl.glColor3ui, (C.uint32_t)(red), (C.uint32_t)(green), (C.uint32_t)(blue))
}
func (gl *lib) Color3uiv(v *uint32) {
	C.gllCall_glColor3uiv(gl.glColor3uiv, (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) Color3us(red uint16, green uint16, blue uint16) {
	C.gllCall_glColor3us(gl.glColor3us, (C.uint16_t)(red), (C.uint16_t)(green), (C.uint16_t)(blue))
}
func (gl *lib) Color3usv(v *uint16) {
	C.gllCall_glColor3usv(gl.glColor3usv, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) Color3xOES(red int32, green int32, blue int32) {
	C.gllCall_glColor3xOES(gl.glColor3xOES, (C.int32_t)(red), (C.int32_t)(green), (C.int32_t)(blue))
}
func (gl *lib) Color3xvOES(components *int32) {
	C.gllCall_glColor3xvOES(gl.glColor3xvOES, (*C.int32_t)(unsafe.Pointer(components)))
}
func (gl *lib) Color4b(red int8, green int8, blue int8, alpha int8) {
	C.gllCall_glColor4b(gl.glColor4b, (C.int8_t)(red), (C.int8_t)(green), (C.int8_t)(blue), (C.int8_t)(alpha))
}
func (gl *lib) Color4bv(v *int8) {
	C.gllCall_glColor4bv(gl.glColor4bv, (*C.int8_t)(unsafe.Pointer(v)))
}
func (gl *lib) Color4d(red float64, green float64, blue float64, alpha float64) {
	C.gllCall_glColor4d(gl.glColor4d, (C.double)(red), (C.double)(green), (C.double)(blue), (C.double)(alpha))
}
func (gl *lib) Color4dv(v *float64) {
	C.gllCall_glColor4dv(gl.glColor4dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) Color4f(red float32, green float32, blue float32, alpha float32) {
	C.gllCall_glColor4f(gl.glColor4f, (C.float)(red), (C.float)(green), (C.float)(blue), (C.float)(alpha))
}
func (gl *lib) Color4fNormal3fVertex3fSUN(r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
	C.gllCall_glColor4fNormal3fVertex3fSUN(gl.glColor4fNormal3fVertex3fSUN, (C.float)(r), (C.float)(g), (C.float)(b), (C.float)(a), (C.float)(nx), (C.float)(ny), (C.float)(nz), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) Color4fNormal3fVertex3fvSUN(c *float32, n *float32, v *float32) {
	C.gllCall_glColor4fNormal3fVertex3fvSUN(gl.glColor4fNormal3fVertex3fvSUN, (*C.float)(unsafe.Pointer(c)), (*C.float)(unsafe.Pointer(n)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) Color4fv(v *float32) {
	C.gllCall_glColor4fv(gl.glColor4fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) Color4hNV(red uint16, green uint16, blue uint16, alpha uint16) {
	C.gllCall_glColor4hNV(gl.glColor4hNV, (C.uint16_t)(red), (C.uint16_t)(green), (C.uint16_t)(blue), (C.uint16_t)(alpha))
}
func (gl *lib) Color4hvNV(v *uint16) {
	C.gllCall_glColor4hvNV(gl.glColor4hvNV, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) Color4i(red int32, green int32, blue int32, alpha int32) {
	C.gllCall_glColor4i(gl.glColor4i, (C.int32_t)(red), (C.int32_t)(green), (C.int32_t)(blue), (C.int32_t)(alpha))
}
func (gl *lib) Color4iv(v *int32) {
	C.gllCall_glColor4iv(gl.glColor4iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) Color4s(red int16, green int16, blue int16, alpha int16) {
	C.gllCall_glColor4s(gl.glColor4s, (C.int16_t)(red), (C.int16_t)(green), (C.int16_t)(blue), (C.int16_t)(alpha))
}
func (gl *lib) Color4sv(v *int16) {
	C.gllCall_glColor4sv(gl.glColor4sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) Color4ub(red uint8, green uint8, blue uint8, alpha uint8) {
	C.gllCall_glColor4ub(gl.glColor4ub, (C.uint8_t)(red), (C.uint8_t)(green), (C.uint8_t)(blue), (C.uint8_t)(alpha))
}
func (gl *lib) Color4ubVertex2fSUN(r uint8, g uint8, b uint8, a uint8, x float32, y float32) {
	C.gllCall_glColor4ubVertex2fSUN(gl.glColor4ubVertex2fSUN, (C.uint8_t)(r), (C.uint8_t)(g), (C.uint8_t)(b), (C.uint8_t)(a), (C.float)(x), (C.float)(y))
}
func (gl *lib) Color4ubVertex2fvSUN(c *uint8, v *float32) {
	C.gllCall_glColor4ubVertex2fvSUN(gl.glColor4ubVertex2fvSUN, (*C.uint8_t)(unsafe.Pointer(c)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) Color4ubVertex3fSUN(r uint8, g uint8, b uint8, a uint8, x float32, y float32, z float32) {
	C.gllCall_glColor4ubVertex3fSUN(gl.glColor4ubVertex3fSUN, (C.uint8_t)(r), (C.uint8_t)(g), (C.uint8_t)(b), (C.uint8_t)(a), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) Color4ubVertex3fvSUN(c *uint8, v *float32) {
	C.gllCall_glColor4ubVertex3fvSUN(gl.glColor4ubVertex3fvSUN, (*C.uint8_t)(unsafe.Pointer(c)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) Color4ubv(v *uint8) {
	C.gllCall_glColor4ubv(gl.glColor4ubv, (*C.uint8_t)(unsafe.Pointer(v)))
}
func (gl *lib) Color4ui(red uint32, green uint32, blue uint32, alpha uint32) {
	C.gllCall_glColor4ui(gl.glColor4ui, (C.uint32_t)(red), (C.uint32_t)(green), (C.uint32_t)(blue), (C.uint32_t)(alpha))
}
func (gl *lib) Color4uiv(v *uint32) {
	C.gllCall_glColor4uiv(gl.glColor4uiv, (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) Color4us(red uint16, green uint16, blue uint16, alpha uint16) {
	C.gllCall_glColor4us(gl.glColor4us, (C.uint16_t)(red), (C.uint16_t)(green), (C.uint16_t)(blue), (C.uint16_t)(alpha))
}
func (gl *lib) Color4usv(v *uint16) {
	C.gllCall_glColor4usv(gl.glColor4usv, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) Color4x(red int32, green int32, blue int32, alpha int32) {
	C.gllCall_glColor4x(gl.glColor4x, (C.int32_t)(red), (C.int32_t)(green), (C.int32_t)(blue), (C.int32_t)(alpha))
}
func (gl *lib) Color4xOES(red int32, green int32, blue int32, alpha int32) {
	C.gllCall_glColor4xOES(gl.glColor4xOES, (C.int32_t)(red), (C.int32_t)(green), (C.int32_t)(blue), (C.int32_t)(alpha))
}
func (gl *lib) Color4xvOES(components *int32) {
	C.gllCall_glColor4xvOES(gl.glColor4xvOES, (*C.int32_t)(unsafe.Pointer(components)))
}
func (gl *lib) ColorFormatNV(size int32, type_ uint32, stride int32) {
	C.gllCall_glColorFormatNV(gl.glColorFormatNV, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride))
}
func (gl *lib) ColorFragmentOp1ATI(op uint32, dst uint32, dstMask uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32) {
	C.gllCall_glColorFragmentOp1ATI(gl.glColorFragmentOp1ATI, (C.uint32_t)(op), (C.uint32_t)(dst), (C.uint32_t)(dstMask), (C.uint32_t)(dstMod), (C.uint32_t)(arg1), (C.uint32_t)(arg1Rep), (C.uint32_t)(arg1Mod))
}
func (gl *lib) ColorFragmentOp2ATI(op uint32, dst uint32, dstMask uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32) {
	C.gllCall_glColorFragmentOp2ATI(gl.glColorFragmentOp2ATI, (C.uint32_t)(op), (C.uint32_t)(dst), (C.uint32_t)(dstMask), (C.uint32_t)(dstMod), (C.uint32_t)(arg1), (C.uint32_t)(arg1Rep), (C.uint32_t)(arg1Mod), (C.uint32_t)(arg2), (C.uint32_t)(arg2Rep), (C.uint32_t)(arg2Mod))
}
func (gl *lib) ColorFragmentOp3ATI(op uint32, dst uint32, dstMask uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32, arg3 uint32, arg3Rep uint32, arg3Mod uint32) {
	C.gllCall_glColorFragmentOp3ATI(gl.glColorFragmentOp3ATI, (C.uint32_t)(op), (C.uint32_t)(dst), (C.uint32_t)(dstMask), (C.uint32_t)(dstMod), (C.uint32_t)(arg1), (C.uint32_t)(arg1Rep), (C.uint32_t)(arg1Mod), (C.uint32_t)(arg2), (C.uint32_t)(arg2Rep), (C.uint32_t)(arg2Mod), (C.uint32_t)(arg3), (C.uint32_t)(arg3Rep), (C.uint32_t)(arg3Mod))
}
func (gl *lib) ColorMask(red bool, green bool, blue bool, alpha bool) {
	C.gllCall_glColorMask(gl.glColorMask, (C._Bool)(red), (C._Bool)(green), (C._Bool)(blue), (C._Bool)(alpha))
}
func (gl *lib) ColorMaskIndexedEXT(index uint32, r bool, g bool, b bool, a bool) {
	C.gllCall_glColorMaskIndexedEXT(gl.glColorMaskIndexedEXT, (C.uint32_t)(index), (C._Bool)(r), (C._Bool)(g), (C._Bool)(b), (C._Bool)(a))
}
func (gl *lib) ColorMaski(index uint32, r bool, g bool, b bool, a bool) {
	C.gllCall_glColorMaski(gl.glColorMaski, (C.uint32_t)(index), (C._Bool)(r), (C._Bool)(g), (C._Bool)(b), (C._Bool)(a))
}
func (gl *lib) ColorMaskiEXT(index uint32, r bool, g bool, b bool, a bool) {
	C.gllCall_glColorMaskiEXT(gl.glColorMaskiEXT, (C.uint32_t)(index), (C._Bool)(r), (C._Bool)(g), (C._Bool)(b), (C._Bool)(a))
}
func (gl *lib) ColorMaskiOES(index uint32, r bool, g bool, b bool, a bool) {
	C.gllCall_glColorMaskiOES(gl.glColorMaskiOES, (C.uint32_t)(index), (C._Bool)(r), (C._Bool)(g), (C._Bool)(b), (C._Bool)(a))
}
func (gl *lib) ColorMaterial(face uint32, mode uint32) {
	C.gllCall_glColorMaterial(gl.glColorMaterial, (C.uint32_t)(face), (C.uint32_t)(mode))
}
func (gl *lib) ColorP3ui(type_ uint32, color uint32) {
	C.gllCall_glColorP3ui(gl.glColorP3ui, (C.uint32_t)(type_), (C.uint32_t)(color))
}
func (gl *lib) ColorP3uiv(type_ uint32, color *uint32) {
	C.gllCall_glColorP3uiv(gl.glColorP3uiv, (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(color)))
}
func (gl *lib) ColorP4ui(type_ uint32, color uint32) {
	C.gllCall_glColorP4ui(gl.glColorP4ui, (C.uint32_t)(type_), (C.uint32_t)(color))
}
func (gl *lib) ColorP4uiv(type_ uint32, color *uint32) {
	C.gllCall_glColorP4uiv(gl.glColorP4uiv, (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(color)))
}
func (gl *lib) ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glColorPointer(gl.glColorPointer, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) ColorPointerEXT(size int32, type_ uint32, stride int32, count int32, pointer unsafe.Pointer) {
	C.gllCall_glColorPointerEXT(gl.glColorPointerEXT, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (C.int32_t)(count), (unsafe.Pointer)(pointer))
}
func (gl *lib) ColorPointerListIBM(size int32, type_ uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
	C.gllCall_glColorPointerListIBM(gl.glColorPointerListIBM, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (*unsafe.Pointer)(unsafe.Pointer(pointer)), (C.int32_t)(ptrstride))
}
func (gl *lib) ColorPointervINTEL(size int32, type_ uint32, pointer *unsafe.Pointer) {
	C.gllCall_glColorPointervINTEL(gl.glColorPointervINTEL, (C.int32_t)(size), (C.uint32_t)(type_), (*unsafe.Pointer)(unsafe.Pointer(pointer)))
}
func (gl *lib) ColorSubTable(target uint32, start int32, count int32, format uint32, type_ uint32, data unsafe.Pointer) {
	C.gllCall_glColorSubTable(gl.glColorSubTable, (C.uint32_t)(target), (C.int32_t)(start), (C.int32_t)(count), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(data))
}
func (gl *lib) ColorSubTableEXT(target uint32, start int32, count int32, format uint32, type_ uint32, data unsafe.Pointer) {
	C.gllCall_glColorSubTableEXT(gl.glColorSubTableEXT, (C.uint32_t)(target), (C.int32_t)(start), (C.int32_t)(count), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(data))
}
func (gl *lib) ColorTable(target uint32, internalformat uint32, width int32, format uint32, type_ uint32, table unsafe.Pointer) {
	C.gllCall_glColorTable(gl.glColorTable, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(table))
}
func (gl *lib) ColorTableEXT(target uint32, internalFormat uint32, width int32, format uint32, type_ uint32, table unsafe.Pointer) {
	C.gllCall_glColorTableEXT(gl.glColorTableEXT, (C.uint32_t)(target), (C.uint32_t)(internalFormat), (C.int32_t)(width), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(table))
}
func (gl *lib) ColorTableParameterfv(target uint32, pname uint32, params *float32) {
	C.gllCall_glColorTableParameterfv(gl.glColorTableParameterfv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) ColorTableParameterfvSGI(target uint32, pname uint32, params *float32) {
	C.gllCall_glColorTableParameterfvSGI(gl.glColorTableParameterfvSGI, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) ColorTableParameteriv(target uint32, pname uint32, params *int32) {
	C.gllCall_glColorTableParameteriv(gl.glColorTableParameteriv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ColorTableParameterivSGI(target uint32, pname uint32, params *int32) {
	C.gllCall_glColorTableParameterivSGI(gl.glColorTableParameterivSGI, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ColorTableSGI(target uint32, internalformat uint32, width int32, format uint32, type_ uint32, table unsafe.Pointer) {
	C.gllCall_glColorTableSGI(gl.glColorTableSGI, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(table))
}
func (gl *lib) CombinerInputNV(stage uint32, portion uint32, variable uint32, input uint32, mapping uint32, componentUsage uint32) {
	C.gllCall_glCombinerInputNV(gl.glCombinerInputNV, (C.uint32_t)(stage), (C.uint32_t)(portion), (C.uint32_t)(variable), (C.uint32_t)(input), (C.uint32_t)(mapping), (C.uint32_t)(componentUsage))
}
func (gl *lib) CombinerOutputNV(stage uint32, portion uint32, abOutput uint32, cdOutput uint32, sumOutput uint32, scale uint32, bias uint32, abDotProduct bool, cdDotProduct bool, muxSum bool) {
	C.gllCall_glCombinerOutputNV(gl.glCombinerOutputNV, (C.uint32_t)(stage), (C.uint32_t)(portion), (C.uint32_t)(abOutput), (C.uint32_t)(cdOutput), (C.uint32_t)(sumOutput), (C.uint32_t)(scale), (C.uint32_t)(bias), (C._Bool)(abDotProduct), (C._Bool)(cdDotProduct), (C._Bool)(muxSum))
}
func (gl *lib) CombinerParameterfNV(pname uint32, param float32) {
	C.gllCall_glCombinerParameterfNV(gl.glCombinerParameterfNV, (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) CombinerParameterfvNV(pname uint32, params *float32) {
	C.gllCall_glCombinerParameterfvNV(gl.glCombinerParameterfvNV, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) CombinerParameteriNV(pname uint32, param int32) {
	C.gllCall_glCombinerParameteriNV(gl.glCombinerParameteriNV, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) CombinerParameterivNV(pname uint32, params *int32) {
	C.gllCall_glCombinerParameterivNV(gl.glCombinerParameterivNV, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) CombinerStageParameterfvNV(stage uint32, pname uint32, params *float32) {
	C.gllCall_glCombinerStageParameterfvNV(gl.glCombinerStageParameterfvNV, (C.uint32_t)(stage), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) CommandListSegmentsNV(list uint32, segments uint32) {
	C.gllCall_glCommandListSegmentsNV(gl.glCommandListSegmentsNV, (C.uint32_t)(list), (C.uint32_t)(segments))
}
func (gl *lib) CompileCommandListNV(list uint32) {
	C.gllCall_glCompileCommandListNV(gl.glCompileCommandListNV, (C.uint32_t)(list))
}
func (gl *lib) CompileShader(shader uint32) {
	C.gllCall_glCompileShader(gl.glCompileShader, (C.uint32_t)(shader))
}
func (gl *lib) CompileShaderARB(shaderObj GLhandleARB) {
	C.gllCall_glCompileShaderARB(gl.glCompileShaderARB, (C.GLhandleARB)(shaderObj))
}
func (gl *lib) CompileShaderIncludeARB(shader uint32, count int32, path **uint8, length *int32) {
	C.gllCall_glCompileShaderIncludeARB(gl.glCompileShaderIncludeARB, (C.uint32_t)(shader), (C.int32_t)(count), (**C.uint8_t)(unsafe.Pointer(path)), (*C.int32_t)(unsafe.Pointer(length)))
}
func (gl *lib) CompressedMultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, bits unsafe.Pointer) {
	C.gllCall_glCompressedMultiTexImage1DEXT(gl.glCompressedMultiTexImage1DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(border), (C.int32_t)(imageSize), (unsafe.Pointer)(bits))
}
func (gl *lib) CompressedMultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, bits unsafe.Pointer) {
	C.gllCall_glCompressedMultiTexImage2DEXT(gl.glCompressedMultiTexImage2DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(border), (C.int32_t)(imageSize), (unsafe.Pointer)(bits))
}
func (gl *lib) CompressedMultiTexImage3DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, bits unsafe.Pointer) {
	C.gllCall_glCompressedMultiTexImage3DEXT(gl.glCompressedMultiTexImage3DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(border), (C.int32_t)(imageSize), (unsafe.Pointer)(bits))
}
func (gl *lib) CompressedMultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, bits unsafe.Pointer) {
	C.gllCall_glCompressedMultiTexSubImage1DEXT(gl.glCompressedMultiTexSubImage1DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(width), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(bits))
}
func (gl *lib) CompressedMultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, bits unsafe.Pointer) {
	C.gllCall_glCompressedMultiTexSubImage2DEXT(gl.glCompressedMultiTexSubImage2DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(bits))
}
func (gl *lib) CompressedMultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, bits unsafe.Pointer) {
	C.gllCall_glCompressedMultiTexSubImage3DEXT(gl.glCompressedMultiTexSubImage3DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(bits))
}
func (gl *lib) CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTexImage1D(gl.glCompressedTexImage1D, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(border), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTexImage1DARB(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTexImage1DARB(gl.glCompressedTexImage1DARB, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(border), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTexImage2D(gl.glCompressedTexImage2D, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(border), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTexImage2DARB(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTexImage2DARB(gl.glCompressedTexImage2DARB, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(border), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTexImage3D(gl.glCompressedTexImage3D, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(border), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTexImage3DARB(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTexImage3DARB(gl.glCompressedTexImage3DARB, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(border), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTexImage3DOES(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTexImage3DOES(gl.glCompressedTexImage3DOES, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(border), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTexSubImage1D(gl.glCompressedTexSubImage1D, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(width), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTexSubImage1DARB(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTexSubImage1DARB(gl.glCompressedTexSubImage1DARB, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(width), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTexSubImage2D(gl.glCompressedTexSubImage2D, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTexSubImage2DARB(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTexSubImage2DARB(gl.glCompressedTexSubImage2DARB, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTexSubImage3D(gl.glCompressedTexSubImage3D, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTexSubImage3DARB(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTexSubImage3DARB(gl.glCompressedTexSubImage3DARB, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTexSubImage3DOES(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTexSubImage3DOES(gl.glCompressedTexSubImage3DOES, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTextureImage1DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, bits unsafe.Pointer) {
	C.gllCall_glCompressedTextureImage1DEXT(gl.glCompressedTextureImage1DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(border), (C.int32_t)(imageSize), (unsafe.Pointer)(bits))
}
func (gl *lib) CompressedTextureImage2DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, bits unsafe.Pointer) {
	C.gllCall_glCompressedTextureImage2DEXT(gl.glCompressedTextureImage2DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(border), (C.int32_t)(imageSize), (unsafe.Pointer)(bits))
}
func (gl *lib) CompressedTextureImage3DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, bits unsafe.Pointer) {
	C.gllCall_glCompressedTextureImage3DEXT(gl.glCompressedTextureImage3DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(border), (C.int32_t)(imageSize), (unsafe.Pointer)(bits))
}
func (gl *lib) CompressedTextureSubImage1D(texture uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTextureSubImage1D(gl.glCompressedTextureSubImage1D, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(width), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, bits unsafe.Pointer) {
	C.gllCall_glCompressedTextureSubImage1DEXT(gl.glCompressedTextureSubImage1DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(width), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(bits))
}
func (gl *lib) CompressedTextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTextureSubImage2D(gl.glCompressedTextureSubImage2D, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, bits unsafe.Pointer) {
	C.gllCall_glCompressedTextureSubImage2DEXT(gl.glCompressedTextureSubImage2DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(bits))
}
func (gl *lib) CompressedTextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer) {
	C.gllCall_glCompressedTextureSubImage3D(gl.glCompressedTextureSubImage3D, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(data))
}
func (gl *lib) CompressedTextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, bits unsafe.Pointer) {
	C.gllCall_glCompressedTextureSubImage3DEXT(gl.glCompressedTextureSubImage3DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.int32_t)(imageSize), (unsafe.Pointer)(bits))
}
func (gl *lib) ConservativeRasterParameterfNV(pname uint32, value float32) {
	C.gllCall_glConservativeRasterParameterfNV(gl.glConservativeRasterParameterfNV, (C.uint32_t)(pname), (C.float)(value))
}
func (gl *lib) ConservativeRasterParameteriNV(pname uint32, param int32) {
	C.gllCall_glConservativeRasterParameteriNV(gl.glConservativeRasterParameteriNV, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) ConvolutionFilter1D(target uint32, internalformat uint32, width int32, format uint32, type_ uint32, image unsafe.Pointer) {
	C.gllCall_glConvolutionFilter1D(gl.glConvolutionFilter1D, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(image))
}
func (gl *lib) ConvolutionFilter1DEXT(target uint32, internalformat uint32, width int32, format uint32, type_ uint32, image unsafe.Pointer) {
	C.gllCall_glConvolutionFilter1DEXT(gl.glConvolutionFilter1DEXT, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(image))
}
func (gl *lib) ConvolutionFilter2D(target uint32, internalformat uint32, width int32, height int32, format uint32, type_ uint32, image unsafe.Pointer) {
	C.gllCall_glConvolutionFilter2D(gl.glConvolutionFilter2D, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(image))
}
func (gl *lib) ConvolutionFilter2DEXT(target uint32, internalformat uint32, width int32, height int32, format uint32, type_ uint32, image unsafe.Pointer) {
	C.gllCall_glConvolutionFilter2DEXT(gl.glConvolutionFilter2DEXT, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(image))
}
func (gl *lib) ConvolutionParameterf(target uint32, pname uint32, params float32) {
	C.gllCall_glConvolutionParameterf(gl.glConvolutionParameterf, (C.uint32_t)(target), (C.uint32_t)(pname), (C.float)(params))
}
func (gl *lib) ConvolutionParameterfEXT(target uint32, pname uint32, params float32) {
	C.gllCall_glConvolutionParameterfEXT(gl.glConvolutionParameterfEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (C.float)(params))
}
func (gl *lib) ConvolutionParameterfv(target uint32, pname uint32, params *float32) {
	C.gllCall_glConvolutionParameterfv(gl.glConvolutionParameterfv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) ConvolutionParameterfvEXT(target uint32, pname uint32, params *float32) {
	C.gllCall_glConvolutionParameterfvEXT(gl.glConvolutionParameterfvEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) ConvolutionParameteri(target uint32, pname uint32, params int32) {
	C.gllCall_glConvolutionParameteri(gl.glConvolutionParameteri, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(params))
}
func (gl *lib) ConvolutionParameteriEXT(target uint32, pname uint32, params int32) {
	C.gllCall_glConvolutionParameteriEXT(gl.glConvolutionParameteriEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(params))
}
func (gl *lib) ConvolutionParameteriv(target uint32, pname uint32, params *int32) {
	C.gllCall_glConvolutionParameteriv(gl.glConvolutionParameteriv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ConvolutionParameterivEXT(target uint32, pname uint32, params *int32) {
	C.gllCall_glConvolutionParameterivEXT(gl.glConvolutionParameterivEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ConvolutionParameterxOES(target uint32, pname uint32, param int32) {
	C.gllCall_glConvolutionParameterxOES(gl.glConvolutionParameterxOES, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) ConvolutionParameterxvOES(target uint32, pname uint32, params *int32) {
	C.gllCall_glConvolutionParameterxvOES(gl.glConvolutionParameterxvOES, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset uintptr, writeOffset uintptr, size int) {
	C.gllCall_glCopyBufferSubData(gl.glCopyBufferSubData, (C.uint32_t)(readTarget), (C.uint32_t)(writeTarget), (C.intptr_t)(readOffset), (C.intptr_t)(writeOffset), (C.ssize_t)(size))
}
func (gl *lib) CopyBufferSubDataNV(readTarget uint32, writeTarget uint32, readOffset uintptr, writeOffset uintptr, size int) {
	C.gllCall_glCopyBufferSubDataNV(gl.glCopyBufferSubDataNV, (C.uint32_t)(readTarget), (C.uint32_t)(writeTarget), (C.intptr_t)(readOffset), (C.intptr_t)(writeOffset), (C.ssize_t)(size))
}
func (gl *lib) CopyColorSubTable(target uint32, start int32, x int32, y int32, width int32) {
	C.gllCall_glCopyColorSubTable(gl.glCopyColorSubTable, (C.uint32_t)(target), (C.int32_t)(start), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width))
}
func (gl *lib) CopyColorSubTableEXT(target uint32, start int32, x int32, y int32, width int32) {
	C.gllCall_glCopyColorSubTableEXT(gl.glCopyColorSubTableEXT, (C.uint32_t)(target), (C.int32_t)(start), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width))
}
func (gl *lib) CopyColorTable(target uint32, internalformat uint32, x int32, y int32, width int32) {
	C.gllCall_glCopyColorTable(gl.glCopyColorTable, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width))
}
func (gl *lib) CopyColorTableSGI(target uint32, internalformat uint32, x int32, y int32, width int32) {
	C.gllCall_glCopyColorTableSGI(gl.glCopyColorTableSGI, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width))
}
func (gl *lib) CopyConvolutionFilter1D(target uint32, internalformat uint32, x int32, y int32, width int32) {
	C.gllCall_glCopyConvolutionFilter1D(gl.glCopyConvolutionFilter1D, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width))
}
func (gl *lib) CopyConvolutionFilter1DEXT(target uint32, internalformat uint32, x int32, y int32, width int32) {
	C.gllCall_glCopyConvolutionFilter1DEXT(gl.glCopyConvolutionFilter1DEXT, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width))
}
func (gl *lib) CopyConvolutionFilter2D(target uint32, internalformat uint32, x int32, y int32, width int32, height int32) {
	C.gllCall_glCopyConvolutionFilter2D(gl.glCopyConvolutionFilter2D, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) CopyConvolutionFilter2DEXT(target uint32, internalformat uint32, x int32, y int32, width int32, height int32) {
	C.gllCall_glCopyConvolutionFilter2DEXT(gl.glCopyConvolutionFilter2DEXT, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) CopyImageSubData(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32) {
	C.gllCall_glCopyImageSubData(gl.glCopyImageSubData, (C.uint32_t)(srcName), (C.uint32_t)(srcTarget), (C.int32_t)(srcLevel), (C.int32_t)(srcX), (C.int32_t)(srcY), (C.int32_t)(srcZ), (C.uint32_t)(dstName), (C.uint32_t)(dstTarget), (C.int32_t)(dstLevel), (C.int32_t)(dstX), (C.int32_t)(dstY), (C.int32_t)(dstZ), (C.int32_t)(srcWidth), (C.int32_t)(srcHeight), (C.int32_t)(srcDepth))
}
func (gl *lib) CopyImageSubDataEXT(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32) {
	C.gllCall_glCopyImageSubDataEXT(gl.glCopyImageSubDataEXT, (C.uint32_t)(srcName), (C.uint32_t)(srcTarget), (C.int32_t)(srcLevel), (C.int32_t)(srcX), (C.int32_t)(srcY), (C.int32_t)(srcZ), (C.uint32_t)(dstName), (C.uint32_t)(dstTarget), (C.int32_t)(dstLevel), (C.int32_t)(dstX), (C.int32_t)(dstY), (C.int32_t)(dstZ), (C.int32_t)(srcWidth), (C.int32_t)(srcHeight), (C.int32_t)(srcDepth))
}
func (gl *lib) CopyImageSubDataNV(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, width int32, height int32, depth int32) {
	C.gllCall_glCopyImageSubDataNV(gl.glCopyImageSubDataNV, (C.uint32_t)(srcName), (C.uint32_t)(srcTarget), (C.int32_t)(srcLevel), (C.int32_t)(srcX), (C.int32_t)(srcY), (C.int32_t)(srcZ), (C.uint32_t)(dstName), (C.uint32_t)(dstTarget), (C.int32_t)(dstLevel), (C.int32_t)(dstX), (C.int32_t)(dstY), (C.int32_t)(dstZ), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth))
}
func (gl *lib) CopyImageSubDataOES(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32) {
	C.gllCall_glCopyImageSubDataOES(gl.glCopyImageSubDataOES, (C.uint32_t)(srcName), (C.uint32_t)(srcTarget), (C.int32_t)(srcLevel), (C.int32_t)(srcX), (C.int32_t)(srcY), (C.int32_t)(srcZ), (C.uint32_t)(dstName), (C.uint32_t)(dstTarget), (C.int32_t)(dstLevel), (C.int32_t)(dstX), (C.int32_t)(dstY), (C.int32_t)(dstZ), (C.int32_t)(srcWidth), (C.int32_t)(srcHeight), (C.int32_t)(srcDepth))
}
func (gl *lib) CopyMultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
	C.gllCall_glCopyMultiTexImage1DEXT(gl.glCopyMultiTexImage1DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(border))
}
func (gl *lib) CopyMultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
	C.gllCall_glCopyMultiTexImage2DEXT(gl.glCopyMultiTexImage2DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(border))
}
func (gl *lib) CopyMultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
	C.gllCall_glCopyMultiTexSubImage1DEXT(gl.glCopyMultiTexSubImage1DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width))
}
func (gl *lib) CopyMultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
	C.gllCall_glCopyMultiTexSubImage2DEXT(gl.glCopyMultiTexSubImage2DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) CopyMultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
	C.gllCall_glCopyMultiTexSubImage3DEXT(gl.glCopyMultiTexSubImage3DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) CopyNamedBufferSubData(readBuffer uint32, writeBuffer uint32, readOffset uintptr, writeOffset uintptr, size int) {
	C.gllCall_glCopyNamedBufferSubData(gl.glCopyNamedBufferSubData, (C.uint32_t)(readBuffer), (C.uint32_t)(writeBuffer), (C.intptr_t)(readOffset), (C.intptr_t)(writeOffset), (C.ssize_t)(size))
}
func (gl *lib) CopyPathNV(resultPath uint32, srcPath uint32) {
	C.gllCall_glCopyPathNV(gl.glCopyPathNV, (C.uint32_t)(resultPath), (C.uint32_t)(srcPath))
}
func (gl *lib) CopyPixels(x int32, y int32, width int32, height int32, type_ uint32) {
	C.gllCall_glCopyPixels(gl.glCopyPixels, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(type_))
}
func (gl *lib) CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
	C.gllCall_glCopyTexImage1D(gl.glCopyTexImage1D, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(border))
}
func (gl *lib) CopyTexImage1DEXT(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
	C.gllCall_glCopyTexImage1DEXT(gl.glCopyTexImage1DEXT, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(border))
}
func (gl *lib) CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
	C.gllCall_glCopyTexImage2D(gl.glCopyTexImage2D, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(border))
}
func (gl *lib) CopyTexImage2DEXT(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
	C.gllCall_glCopyTexImage2DEXT(gl.glCopyTexImage2DEXT, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(border))
}
func (gl *lib) CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
	C.gllCall_glCopyTexSubImage1D(gl.glCopyTexSubImage1D, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width))
}
func (gl *lib) CopyTexSubImage1DEXT(target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
	C.gllCall_glCopyTexSubImage1DEXT(gl.glCopyTexSubImage1DEXT, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width))
}
func (gl *lib) CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
	C.gllCall_glCopyTexSubImage2D(gl.glCopyTexSubImage2D, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) CopyTexSubImage2DEXT(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
	C.gllCall_glCopyTexSubImage2DEXT(gl.glCopyTexSubImage2DEXT, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
	C.gllCall_glCopyTexSubImage3D(gl.glCopyTexSubImage3D, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) CopyTexSubImage3DEXT(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
	C.gllCall_glCopyTexSubImage3DEXT(gl.glCopyTexSubImage3DEXT, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) CopyTexSubImage3DOES(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
	C.gllCall_glCopyTexSubImage3DOES(gl.glCopyTexSubImage3DOES, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) CopyTextureImage1DEXT(texture uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
	C.gllCall_glCopyTextureImage1DEXT(gl.glCopyTextureImage1DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(border))
}
func (gl *lib) CopyTextureImage2DEXT(texture uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
	C.gllCall_glCopyTextureImage2DEXT(gl.glCopyTextureImage2DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(border))
}
func (gl *lib) CopyTextureLevelsAPPLE(destinationTexture uint32, sourceTexture uint32, sourceBaseLevel int32, sourceLevelCount int32) {
	C.gllCall_glCopyTextureLevelsAPPLE(gl.glCopyTextureLevelsAPPLE, (C.uint32_t)(destinationTexture), (C.uint32_t)(sourceTexture), (C.int32_t)(sourceBaseLevel), (C.int32_t)(sourceLevelCount))
}
func (gl *lib) CopyTextureSubImage1D(texture uint32, level int32, xoffset int32, x int32, y int32, width int32) {
	C.gllCall_glCopyTextureSubImage1D(gl.glCopyTextureSubImage1D, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width))
}
func (gl *lib) CopyTextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
	C.gllCall_glCopyTextureSubImage1DEXT(gl.glCopyTextureSubImage1DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width))
}
func (gl *lib) CopyTextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
	C.gllCall_glCopyTextureSubImage2D(gl.glCopyTextureSubImage2D, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) CopyTextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
	C.gllCall_glCopyTextureSubImage2DEXT(gl.glCopyTextureSubImage2DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) CopyTextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
	C.gllCall_glCopyTextureSubImage3D(gl.glCopyTextureSubImage3D, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) CopyTextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
	C.gllCall_glCopyTextureSubImage3DEXT(gl.glCopyTextureSubImage3DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) CoverFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, coverMode uint32, transformType uint32, transformValues *float32) {
	C.gllCall_glCoverFillPathInstancedNV(gl.glCoverFillPathInstancedNV, (C.int32_t)(numPaths), (C.uint32_t)(pathNameType), (unsafe.Pointer)(paths), (C.uint32_t)(pathBase), (C.uint32_t)(coverMode), (C.uint32_t)(transformType), (*C.float)(unsafe.Pointer(transformValues)))
}
func (gl *lib) CoverFillPathNV(path uint32, coverMode uint32) {
	C.gllCall_glCoverFillPathNV(gl.glCoverFillPathNV, (C.uint32_t)(path), (C.uint32_t)(coverMode))
}
func (gl *lib) CoverStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, coverMode uint32, transformType uint32, transformValues *float32) {
	C.gllCall_glCoverStrokePathInstancedNV(gl.glCoverStrokePathInstancedNV, (C.int32_t)(numPaths), (C.uint32_t)(pathNameType), (unsafe.Pointer)(paths), (C.uint32_t)(pathBase), (C.uint32_t)(coverMode), (C.uint32_t)(transformType), (*C.float)(unsafe.Pointer(transformValues)))
}
func (gl *lib) CoverStrokePathNV(path uint32, coverMode uint32) {
	C.gllCall_glCoverStrokePathNV(gl.glCoverStrokePathNV, (C.uint32_t)(path), (C.uint32_t)(coverMode))
}
func (gl *lib) CoverageMaskNV(mask bool) {
	C.gllCall_glCoverageMaskNV(gl.glCoverageMaskNV, (C._Bool)(mask))
}
func (gl *lib) CoverageModulationNV(components uint32) {
	C.gllCall_glCoverageModulationNV(gl.glCoverageModulationNV, (C.uint32_t)(components))
}
func (gl *lib) CoverageModulationTableNV(n int32, v *float32) {
	C.gllCall_glCoverageModulationTableNV(gl.glCoverageModulationTableNV, (C.int32_t)(n), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) CoverageOperationNV(operation uint32) {
	C.gllCall_glCoverageOperationNV(gl.glCoverageOperationNV, (C.uint32_t)(operation))
}
func (gl *lib) CreateBuffers(n int32, buffers *uint32) {
	C.gllCall_glCreateBuffers(gl.glCreateBuffers, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(buffers)))
}
func (gl *lib) CreateCommandListsNV(n int32, lists *uint32) {
	C.gllCall_glCreateCommandListsNV(gl.glCreateCommandListsNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(lists)))
}
func (gl *lib) CreateFramebuffers(n int32, framebuffers *uint32) {
	C.gllCall_glCreateFramebuffers(gl.glCreateFramebuffers, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(framebuffers)))
}
func (gl *lib) CreateMemoryObjectsEXT(n int32, memoryObjects *uint32) {
	C.gllCall_glCreateMemoryObjectsEXT(gl.glCreateMemoryObjectsEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(memoryObjects)))
}
func (gl *lib) CreatePerfQueryINTEL(queryId uint32, queryHandle *uint32) {
	C.gllCall_glCreatePerfQueryINTEL(gl.glCreatePerfQueryINTEL, (C.uint32_t)(queryId), (*C.uint32_t)(unsafe.Pointer(queryHandle)))
}
func (gl *lib) CreateProgram() uint32 {
	return (uint32)(C.gllCall_glCreateProgram(gl.glCreateProgram))
}
func (gl *lib) CreateProgramObjectARB() GLhandleARB {
	return (GLhandleARB)(C.gllCall_glCreateProgramObjectARB(gl.glCreateProgramObjectARB))
}
func (gl *lib) CreateProgramPipelines(n int32, pipelines *uint32) {
	C.gllCall_glCreateProgramPipelines(gl.glCreateProgramPipelines, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(pipelines)))
}
func (gl *lib) CreateProgressFenceNVX() uint32 {
	return (uint32)(C.gllCall_glCreateProgressFenceNVX(gl.glCreateProgressFenceNVX))
}
func (gl *lib) CreateQueries(target uint32, n int32, ids *uint32) {
	C.gllCall_glCreateQueries(gl.glCreateQueries, (C.uint32_t)(target), (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(ids)))
}
func (gl *lib) CreateRenderbuffers(n int32, renderbuffers *uint32) {
	C.gllCall_glCreateRenderbuffers(gl.glCreateRenderbuffers, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(renderbuffers)))
}
func (gl *lib) CreateSamplers(n int32, samplers *uint32) {
	C.gllCall_glCreateSamplers(gl.glCreateSamplers, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(samplers)))
}
func (gl *lib) CreateSemaphoresNV(n int32, semaphores *uint32) {
	C.gllCall_glCreateSemaphoresNV(gl.glCreateSemaphoresNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(semaphores)))
}
func (gl *lib) CreateShader(type_ uint32) uint32 {
	return (uint32)(C.gllCall_glCreateShader(gl.glCreateShader, (C.uint32_t)(type_)))
}
func (gl *lib) CreateShaderObjectARB(shaderType uint32) GLhandleARB {
	return (GLhandleARB)(C.gllCall_glCreateShaderObjectARB(gl.glCreateShaderObjectARB, (C.uint32_t)(shaderType)))
}
func (gl *lib) CreateShaderProgramEXT(type_ uint32, string *uint8) uint32 {
	return (uint32)(C.gllCall_glCreateShaderProgramEXT(gl.glCreateShaderProgramEXT, (C.uint32_t)(type_), (*C.uint8_t)(unsafe.Pointer(string))))
}
func (gl *lib) CreateShaderProgramv(type_ uint32, count int32, strings **uint8) uint32 {
	return (uint32)(C.gllCall_glCreateShaderProgramv(gl.glCreateShaderProgramv, (C.uint32_t)(type_), (C.int32_t)(count), (**C.uint8_t)(unsafe.Pointer(strings))))
}
func (gl *lib) CreateShaderProgramvEXT(type_ uint32, count int32, strings **uint8) uint32 {
	return (uint32)(C.gllCall_glCreateShaderProgramvEXT(gl.glCreateShaderProgramvEXT, (C.uint32_t)(type_), (C.int32_t)(count), (**C.uint8_t)(unsafe.Pointer(strings))))
}
func (gl *lib) CreateStatesNV(n int32, states *uint32) {
	C.gllCall_glCreateStatesNV(gl.glCreateStatesNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(states)))
}
func (gl *lib) CreateTextures(target uint32, n int32, textures *uint32) {
	C.gllCall_glCreateTextures(gl.glCreateTextures, (C.uint32_t)(target), (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(textures)))
}
func (gl *lib) CreateTransformFeedbacks(n int32, ids *uint32) {
	C.gllCall_glCreateTransformFeedbacks(gl.glCreateTransformFeedbacks, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(ids)))
}
func (gl *lib) CreateVertexArrays(n int32, arrays *uint32) {
	C.gllCall_glCreateVertexArrays(gl.glCreateVertexArrays, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(arrays)))
}
func (gl *lib) CullFace(mode uint32) {
	C.gllCall_glCullFace(gl.glCullFace, (C.uint32_t)(mode))
}
func (gl *lib) CullParameterdvEXT(pname uint32, params *float64) {
	C.gllCall_glCullParameterdvEXT(gl.glCullParameterdvEXT, (C.uint32_t)(pname), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) CullParameterfvEXT(pname uint32, params *float32) {
	C.gllCall_glCullParameterfvEXT(gl.glCullParameterfvEXT, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) CurrentPaletteMatrixARB(index int32) {
	C.gllCall_glCurrentPaletteMatrixARB(gl.glCurrentPaletteMatrixARB, (C.int32_t)(index))
}
func (gl *lib) CurrentPaletteMatrixOES(matrixpaletteindex uint32) {
	C.gllCall_glCurrentPaletteMatrixOES(gl.glCurrentPaletteMatrixOES, (C.uint32_t)(matrixpaletteindex))
}
func (gl *lib) DebugMessageControl(source uint32, type_ uint32, severity uint32, count int32, ids *uint32, enabled bool) {
	C.gllCall_glDebugMessageControl(gl.glDebugMessageControl, (C.uint32_t)(source), (C.uint32_t)(type_), (C.uint32_t)(severity), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(ids)), (C._Bool)(enabled))
}
func (gl *lib) DebugMessageControlARB(source uint32, type_ uint32, severity uint32, count int32, ids *uint32, enabled bool) {
	C.gllCall_glDebugMessageControlARB(gl.glDebugMessageControlARB, (C.uint32_t)(source), (C.uint32_t)(type_), (C.uint32_t)(severity), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(ids)), (C._Bool)(enabled))
}
func (gl *lib) DebugMessageControlKHR(source uint32, type_ uint32, severity uint32, count int32, ids *uint32, enabled bool) {
	C.gllCall_glDebugMessageControlKHR(gl.glDebugMessageControlKHR, (C.uint32_t)(source), (C.uint32_t)(type_), (C.uint32_t)(severity), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(ids)), (C._Bool)(enabled))
}
func (gl *lib) DebugMessageEnableAMD(category uint32, severity uint32, count int32, ids *uint32, enabled bool) {
	C.gllCall_glDebugMessageEnableAMD(gl.glDebugMessageEnableAMD, (C.uint32_t)(category), (C.uint32_t)(severity), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(ids)), (C._Bool)(enabled))
}
func (gl *lib) DebugMessageInsert(source uint32, type_ uint32, id uint32, severity uint32, length int32, buf *uint8) {
	C.gllCall_glDebugMessageInsert(gl.glDebugMessageInsert, (C.uint32_t)(source), (C.uint32_t)(type_), (C.uint32_t)(id), (C.uint32_t)(severity), (C.int32_t)(length), (*C.uint8_t)(unsafe.Pointer(buf)))
}
func (gl *lib) DebugMessageInsertAMD(category uint32, severity uint32, id uint32, length int32, buf *uint8) {
	C.gllCall_glDebugMessageInsertAMD(gl.glDebugMessageInsertAMD, (C.uint32_t)(category), (C.uint32_t)(severity), (C.uint32_t)(id), (C.int32_t)(length), (*C.uint8_t)(unsafe.Pointer(buf)))
}
func (gl *lib) DebugMessageInsertARB(source uint32, type_ uint32, id uint32, severity uint32, length int32, buf *uint8) {
	C.gllCall_glDebugMessageInsertARB(gl.glDebugMessageInsertARB, (C.uint32_t)(source), (C.uint32_t)(type_), (C.uint32_t)(id), (C.uint32_t)(severity), (C.int32_t)(length), (*C.uint8_t)(unsafe.Pointer(buf)))
}
func (gl *lib) DebugMessageInsertKHR(source uint32, type_ uint32, id uint32, severity uint32, length int32, buf *uint8) {
	C.gllCall_glDebugMessageInsertKHR(gl.glDebugMessageInsertKHR, (C.uint32_t)(source), (C.uint32_t)(type_), (C.uint32_t)(id), (C.uint32_t)(severity), (C.int32_t)(length), (*C.uint8_t)(unsafe.Pointer(buf)))
}
func (gl *lib) DeformSGIX(mask uint32) {
	C.gllCall_glDeformSGIX(gl.glDeformSGIX, (C.uint32_t)(mask))
}
func (gl *lib) DeformationMap3dSGIX(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, w1 float64, w2 float64, wstride int32, worder int32, points *float64) {
	C.gllCall_glDeformationMap3dSGIX(gl.glDeformationMap3dSGIX, (C.uint32_t)(target), (C.double)(u1), (C.double)(u2), (C.int32_t)(ustride), (C.int32_t)(uorder), (C.double)(v1), (C.double)(v2), (C.int32_t)(vstride), (C.int32_t)(vorder), (C.double)(w1), (C.double)(w2), (C.int32_t)(wstride), (C.int32_t)(worder), (*C.double)(unsafe.Pointer(points)))
}
func (gl *lib) DeformationMap3fSGIX(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, w1 float32, w2 float32, wstride int32, worder int32, points *float32) {
	C.gllCall_glDeformationMap3fSGIX(gl.glDeformationMap3fSGIX, (C.uint32_t)(target), (C.float)(u1), (C.float)(u2), (C.int32_t)(ustride), (C.int32_t)(uorder), (C.float)(v1), (C.float)(v2), (C.int32_t)(vstride), (C.int32_t)(vorder), (C.float)(w1), (C.float)(w2), (C.int32_t)(wstride), (C.int32_t)(worder), (*C.float)(unsafe.Pointer(points)))
}
func (gl *lib) DeleteAsyncMarkersSGIX(marker uint32, range_ int32) {
	C.gllCall_glDeleteAsyncMarkersSGIX(gl.glDeleteAsyncMarkersSGIX, (C.uint32_t)(marker), (C.int32_t)(range_))
}
func (gl *lib) DeleteBuffers(n int32, buffers *uint32) {
	C.gllCall_glDeleteBuffers(gl.glDeleteBuffers, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(buffers)))
}
func (gl *lib) DeleteBuffersARB(n int32, buffers *uint32) {
	C.gllCall_glDeleteBuffersARB(gl.glDeleteBuffersARB, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(buffers)))
}
func (gl *lib) DeleteCommandListsNV(n int32, lists *uint32) {
	C.gllCall_glDeleteCommandListsNV(gl.glDeleteCommandListsNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(lists)))
}
func (gl *lib) DeleteFencesAPPLE(n int32, fences *uint32) {
	C.gllCall_glDeleteFencesAPPLE(gl.glDeleteFencesAPPLE, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(fences)))
}
func (gl *lib) DeleteFencesNV(n int32, fences *uint32) {
	C.gllCall_glDeleteFencesNV(gl.glDeleteFencesNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(fences)))
}
func (gl *lib) DeleteFragmentShaderATI(id uint32) {
	C.gllCall_glDeleteFragmentShaderATI(gl.glDeleteFragmentShaderATI, (C.uint32_t)(id))
}
func (gl *lib) DeleteFramebuffers(n int32, framebuffers *uint32) {
	C.gllCall_glDeleteFramebuffers(gl.glDeleteFramebuffers, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(framebuffers)))
}
func (gl *lib) DeleteFramebuffersEXT(n int32, framebuffers *uint32) {
	C.gllCall_glDeleteFramebuffersEXT(gl.glDeleteFramebuffersEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(framebuffers)))
}
func (gl *lib) DeleteFramebuffersOES(n int32, framebuffers *uint32) {
	C.gllCall_glDeleteFramebuffersOES(gl.glDeleteFramebuffersOES, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(framebuffers)))
}
func (gl *lib) DeleteLists(list uint32, range_ int32) {
	C.gllCall_glDeleteLists(gl.glDeleteLists, (C.uint32_t)(list), (C.int32_t)(range_))
}
func (gl *lib) DeleteMemoryObjectsEXT(n int32, memoryObjects *uint32) {
	C.gllCall_glDeleteMemoryObjectsEXT(gl.glDeleteMemoryObjectsEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(memoryObjects)))
}
func (gl *lib) DeleteNamedStringARB(namelen int32, name *uint8) {
	C.gllCall_glDeleteNamedStringARB(gl.glDeleteNamedStringARB, (C.int32_t)(namelen), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) DeleteNamesAMD(identifier uint32, num uint32, names *uint32) {
	C.gllCall_glDeleteNamesAMD(gl.glDeleteNamesAMD, (C.uint32_t)(identifier), (C.uint32_t)(num), (*C.uint32_t)(unsafe.Pointer(names)))
}
func (gl *lib) DeleteObjectARB(obj GLhandleARB) {
	C.gllCall_glDeleteObjectARB(gl.glDeleteObjectARB, (C.GLhandleARB)(obj))
}
func (gl *lib) DeleteOcclusionQueriesNV(n int32, ids *uint32) {
	C.gllCall_glDeleteOcclusionQueriesNV(gl.glDeleteOcclusionQueriesNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(ids)))
}
func (gl *lib) DeletePathsNV(path uint32, range_ int32) {
	C.gllCall_glDeletePathsNV(gl.glDeletePathsNV, (C.uint32_t)(path), (C.int32_t)(range_))
}
func (gl *lib) DeletePerfMonitorsAMD(n int32, monitors *uint32) {
	C.gllCall_glDeletePerfMonitorsAMD(gl.glDeletePerfMonitorsAMD, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(monitors)))
}
func (gl *lib) DeletePerfQueryINTEL(queryHandle uint32) {
	C.gllCall_glDeletePerfQueryINTEL(gl.glDeletePerfQueryINTEL, (C.uint32_t)(queryHandle))
}
func (gl *lib) DeleteProgram(program uint32) {
	C.gllCall_glDeleteProgram(gl.glDeleteProgram, (C.uint32_t)(program))
}
func (gl *lib) DeleteProgramPipelines(n int32, pipelines *uint32) {
	C.gllCall_glDeleteProgramPipelines(gl.glDeleteProgramPipelines, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(pipelines)))
}
func (gl *lib) DeleteProgramPipelinesEXT(n int32, pipelines *uint32) {
	C.gllCall_glDeleteProgramPipelinesEXT(gl.glDeleteProgramPipelinesEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(pipelines)))
}
func (gl *lib) DeleteProgramsARB(n int32, programs *uint32) {
	C.gllCall_glDeleteProgramsARB(gl.glDeleteProgramsARB, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(programs)))
}
func (gl *lib) DeleteProgramsNV(n int32, programs *uint32) {
	C.gllCall_glDeleteProgramsNV(gl.glDeleteProgramsNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(programs)))
}
func (gl *lib) DeleteQueries(n int32, ids *uint32) {
	C.gllCall_glDeleteQueries(gl.glDeleteQueries, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(ids)))
}
func (gl *lib) DeleteQueriesARB(n int32, ids *uint32) {
	C.gllCall_glDeleteQueriesARB(gl.glDeleteQueriesARB, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(ids)))
}
func (gl *lib) DeleteQueriesEXT(n int32, ids *uint32) {
	C.gllCall_glDeleteQueriesEXT(gl.glDeleteQueriesEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(ids)))
}
func (gl *lib) DeleteQueryResourceTagNV(n int32, tagIds *int32) {
	C.gllCall_glDeleteQueryResourceTagNV(gl.glDeleteQueryResourceTagNV, (C.int32_t)(n), (*C.int32_t)(unsafe.Pointer(tagIds)))
}
func (gl *lib) DeleteRenderbuffers(n int32, renderbuffers *uint32) {
	C.gllCall_glDeleteRenderbuffers(gl.glDeleteRenderbuffers, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(renderbuffers)))
}
func (gl *lib) DeleteRenderbuffersEXT(n int32, renderbuffers *uint32) {
	C.gllCall_glDeleteRenderbuffersEXT(gl.glDeleteRenderbuffersEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(renderbuffers)))
}
func (gl *lib) DeleteRenderbuffersOES(n int32, renderbuffers *uint32) {
	C.gllCall_glDeleteRenderbuffersOES(gl.glDeleteRenderbuffersOES, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(renderbuffers)))
}
func (gl *lib) DeleteSamplers(count int32, samplers *uint32) {
	C.gllCall_glDeleteSamplers(gl.glDeleteSamplers, (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(samplers)))
}
func (gl *lib) DeleteSemaphoresEXT(n int32, semaphores *uint32) {
	C.gllCall_glDeleteSemaphoresEXT(gl.glDeleteSemaphoresEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(semaphores)))
}
func (gl *lib) DeleteShader(shader uint32) {
	C.gllCall_glDeleteShader(gl.glDeleteShader, (C.uint32_t)(shader))
}
func (gl *lib) DeleteStatesNV(n int32, states *uint32) {
	C.gllCall_glDeleteStatesNV(gl.glDeleteStatesNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(states)))
}
func (gl *lib) DeleteSync(sync GLsync) {
	C.gllCall_glDeleteSync(gl.glDeleteSync, (C.GLsync)(sync))
}
func (gl *lib) DeleteSyncAPPLE(sync GLsync) {
	C.gllCall_glDeleteSyncAPPLE(gl.glDeleteSyncAPPLE, (C.GLsync)(sync))
}
func (gl *lib) DeleteTextures(n int32, textures *uint32) {
	C.gllCall_glDeleteTextures(gl.glDeleteTextures, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(textures)))
}
func (gl *lib) DeleteTexturesEXT(n int32, textures *uint32) {
	C.gllCall_glDeleteTexturesEXT(gl.glDeleteTexturesEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(textures)))
}
func (gl *lib) DeleteTransformFeedbacks(n int32, ids *uint32) {
	C.gllCall_glDeleteTransformFeedbacks(gl.glDeleteTransformFeedbacks, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(ids)))
}
func (gl *lib) DeleteTransformFeedbacksNV(n int32, ids *uint32) {
	C.gllCall_glDeleteTransformFeedbacksNV(gl.glDeleteTransformFeedbacksNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(ids)))
}
func (gl *lib) DeleteVertexArrays(n int32, arrays *uint32) {
	C.gllCall_glDeleteVertexArrays(gl.glDeleteVertexArrays, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(arrays)))
}
func (gl *lib) DeleteVertexArraysAPPLE(n int32, arrays *uint32) {
	C.gllCall_glDeleteVertexArraysAPPLE(gl.glDeleteVertexArraysAPPLE, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(arrays)))
}
func (gl *lib) DeleteVertexArraysOES(n int32, arrays *uint32) {
	C.gllCall_glDeleteVertexArraysOES(gl.glDeleteVertexArraysOES, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(arrays)))
}
func (gl *lib) DeleteVertexShaderEXT(id uint32) {
	C.gllCall_glDeleteVertexShaderEXT(gl.glDeleteVertexShaderEXT, (C.uint32_t)(id))
}
func (gl *lib) DepthBoundsEXT(zmin float64, zmax float64) {
	C.gllCall_glDepthBoundsEXT(gl.glDepthBoundsEXT, (C.double)(zmin), (C.double)(zmax))
}
func (gl *lib) DepthBoundsdNV(zmin float64, zmax float64) {
	C.gllCall_glDepthBoundsdNV(gl.glDepthBoundsdNV, (C.double)(zmin), (C.double)(zmax))
}
func (gl *lib) DepthFunc(func_ uint32) {
	C.gllCall_glDepthFunc(gl.glDepthFunc, (C.uint32_t)(func_))
}
func (gl *lib) DepthMask(flag bool) {
	C.gllCall_glDepthMask(gl.glDepthMask, (C._Bool)(flag))
}
func (gl *lib) DepthRange(n float64, f float64) {
	C.gllCall_glDepthRange(gl.glDepthRange, (C.double)(n), (C.double)(f))
}
func (gl *lib) DepthRangeArraydvNV(first uint32, count int32, v *float64) {
	C.gllCall_glDepthRangeArraydvNV(gl.glDepthRangeArraydvNV, (C.uint32_t)(first), (C.int32_t)(count), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) DepthRangeArrayfvNV(first uint32, count int32, v *float32) {
	C.gllCall_glDepthRangeArrayfvNV(gl.glDepthRangeArrayfvNV, (C.uint32_t)(first), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) DepthRangeArrayfvOES(first uint32, count int32, v *float32) {
	C.gllCall_glDepthRangeArrayfvOES(gl.glDepthRangeArrayfvOES, (C.uint32_t)(first), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) DepthRangeArrayv(first uint32, count int32, v *float64) {
	C.gllCall_glDepthRangeArrayv(gl.glDepthRangeArrayv, (C.uint32_t)(first), (C.int32_t)(count), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) DepthRangeIndexed(index uint32, n float64, f float64) {
	C.gllCall_glDepthRangeIndexed(gl.glDepthRangeIndexed, (C.uint32_t)(index), (C.double)(n), (C.double)(f))
}
func (gl *lib) DepthRangeIndexeddNV(index uint32, n float64, f float64) {
	C.gllCall_glDepthRangeIndexeddNV(gl.glDepthRangeIndexeddNV, (C.uint32_t)(index), (C.double)(n), (C.double)(f))
}
func (gl *lib) DepthRangeIndexedfNV(index uint32, n float32, f float32) {
	C.gllCall_glDepthRangeIndexedfNV(gl.glDepthRangeIndexedfNV, (C.uint32_t)(index), (C.float)(n), (C.float)(f))
}
func (gl *lib) DepthRangeIndexedfOES(index uint32, n float32, f float32) {
	C.gllCall_glDepthRangeIndexedfOES(gl.glDepthRangeIndexedfOES, (C.uint32_t)(index), (C.float)(n), (C.float)(f))
}
func (gl *lib) DepthRangedNV(zNear float64, zFar float64) {
	C.gllCall_glDepthRangedNV(gl.glDepthRangedNV, (C.double)(zNear), (C.double)(zFar))
}
func (gl *lib) DepthRangef(n float32, f float32) {
	C.gllCall_glDepthRangef(gl.glDepthRangef, (C.float)(n), (C.float)(f))
}
func (gl *lib) DepthRangefOES(n float32, f float32) {
	C.gllCall_glDepthRangefOES(gl.glDepthRangefOES, (C.float)(n), (C.float)(f))
}
func (gl *lib) DepthRangex(n int32, f int32) {
	C.gllCall_glDepthRangex(gl.glDepthRangex, (C.int32_t)(n), (C.int32_t)(f))
}
func (gl *lib) DepthRangexOES(n int32, f int32) {
	C.gllCall_glDepthRangexOES(gl.glDepthRangexOES, (C.int32_t)(n), (C.int32_t)(f))
}
func (gl *lib) DetachObjectARB(containerObj GLhandleARB, attachedObj GLhandleARB) {
	C.gllCall_glDetachObjectARB(gl.glDetachObjectARB, (C.GLhandleARB)(containerObj), (C.GLhandleARB)(attachedObj))
}
func (gl *lib) DetachShader(program uint32, shader uint32) {
	C.gllCall_glDetachShader(gl.glDetachShader, (C.uint32_t)(program), (C.uint32_t)(shader))
}
func (gl *lib) DetailTexFuncSGIS(target uint32, n int32, points *float32) {
	C.gllCall_glDetailTexFuncSGIS(gl.glDetailTexFuncSGIS, (C.uint32_t)(target), (C.int32_t)(n), (*C.float)(unsafe.Pointer(points)))
}
func (gl *lib) Disable(cap uint32) {
	C.gllCall_glDisable(gl.glDisable, (C.uint32_t)(cap))
}
func (gl *lib) DisableClientState(array uint32) {
	C.gllCall_glDisableClientState(gl.glDisableClientState, (C.uint32_t)(array))
}
func (gl *lib) DisableClientStateIndexedEXT(array uint32, index uint32) {
	C.gllCall_glDisableClientStateIndexedEXT(gl.glDisableClientStateIndexedEXT, (C.uint32_t)(array), (C.uint32_t)(index))
}
func (gl *lib) DisableClientStateiEXT(array uint32, index uint32) {
	C.gllCall_glDisableClientStateiEXT(gl.glDisableClientStateiEXT, (C.uint32_t)(array), (C.uint32_t)(index))
}
func (gl *lib) DisableDriverControlQCOM(driverControl uint32) {
	C.gllCall_glDisableDriverControlQCOM(gl.glDisableDriverControlQCOM, (C.uint32_t)(driverControl))
}
func (gl *lib) DisableIndexedEXT(target uint32, index uint32) {
	C.gllCall_glDisableIndexedEXT(gl.glDisableIndexedEXT, (C.uint32_t)(target), (C.uint32_t)(index))
}
func (gl *lib) DisableVariantClientStateEXT(id uint32) {
	C.gllCall_glDisableVariantClientStateEXT(gl.glDisableVariantClientStateEXT, (C.uint32_t)(id))
}
func (gl *lib) DisableVertexArrayAttrib(vaobj uint32, index uint32) {
	C.gllCall_glDisableVertexArrayAttrib(gl.glDisableVertexArrayAttrib, (C.uint32_t)(vaobj), (C.uint32_t)(index))
}
func (gl *lib) DisableVertexArrayAttribEXT(vaobj uint32, index uint32) {
	C.gllCall_glDisableVertexArrayAttribEXT(gl.glDisableVertexArrayAttribEXT, (C.uint32_t)(vaobj), (C.uint32_t)(index))
}
func (gl *lib) DisableVertexArrayEXT(vaobj uint32, array uint32) {
	C.gllCall_glDisableVertexArrayEXT(gl.glDisableVertexArrayEXT, (C.uint32_t)(vaobj), (C.uint32_t)(array))
}
func (gl *lib) DisableVertexAttribAPPLE(index uint32, pname uint32) {
	C.gllCall_glDisableVertexAttribAPPLE(gl.glDisableVertexAttribAPPLE, (C.uint32_t)(index), (C.uint32_t)(pname))
}
func (gl *lib) DisableVertexAttribArray(index uint32) {
	C.gllCall_glDisableVertexAttribArray(gl.glDisableVertexAttribArray, (C.uint32_t)(index))
}
func (gl *lib) DisableVertexAttribArrayARB(index uint32) {
	C.gllCall_glDisableVertexAttribArrayARB(gl.glDisableVertexAttribArrayARB, (C.uint32_t)(index))
}
func (gl *lib) Disablei(target uint32, index uint32) {
	C.gllCall_glDisablei(gl.glDisablei, (C.uint32_t)(target), (C.uint32_t)(index))
}
func (gl *lib) DisableiEXT(target uint32, index uint32) {
	C.gllCall_glDisableiEXT(gl.glDisableiEXT, (C.uint32_t)(target), (C.uint32_t)(index))
}
func (gl *lib) DisableiNV(target uint32, index uint32) {
	C.gllCall_glDisableiNV(gl.glDisableiNV, (C.uint32_t)(target), (C.uint32_t)(index))
}
func (gl *lib) DisableiOES(target uint32, index uint32) {
	C.gllCall_glDisableiOES(gl.glDisableiOES, (C.uint32_t)(target), (C.uint32_t)(index))
}
func (gl *lib) DiscardFramebufferEXT(target uint32, numAttachments int32, attachments *uint32) {
	C.gllCall_glDiscardFramebufferEXT(gl.glDiscardFramebufferEXT, (C.uint32_t)(target), (C.int32_t)(numAttachments), (*C.uint32_t)(unsafe.Pointer(attachments)))
}
func (gl *lib) DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32) {
	C.gllCall_glDispatchCompute(gl.glDispatchCompute, (C.uint32_t)(num_groups_x), (C.uint32_t)(num_groups_y), (C.uint32_t)(num_groups_z))
}
func (gl *lib) DispatchComputeGroupSizeARB(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32, group_size_x uint32, group_size_y uint32, group_size_z uint32) {
	C.gllCall_glDispatchComputeGroupSizeARB(gl.glDispatchComputeGroupSizeARB, (C.uint32_t)(num_groups_x), (C.uint32_t)(num_groups_y), (C.uint32_t)(num_groups_z), (C.uint32_t)(group_size_x), (C.uint32_t)(group_size_y), (C.uint32_t)(group_size_z))
}
func (gl *lib) DispatchComputeIndirect(indirect uintptr) {
	C.gllCall_glDispatchComputeIndirect(gl.glDispatchComputeIndirect, (C.intptr_t)(indirect))
}
func (gl *lib) DrawArrays(mode uint32, first int32, count int32) {
	C.gllCall_glDrawArrays(gl.glDrawArrays, (C.uint32_t)(mode), (C.int32_t)(first), (C.int32_t)(count))
}
func (gl *lib) DrawArraysEXT(mode uint32, first int32, count int32) {
	C.gllCall_glDrawArraysEXT(gl.glDrawArraysEXT, (C.uint32_t)(mode), (C.int32_t)(first), (C.int32_t)(count))
}
func (gl *lib) DrawArraysIndirect(mode uint32, indirect unsafe.Pointer) {
	C.gllCall_glDrawArraysIndirect(gl.glDrawArraysIndirect, (C.uint32_t)(mode), (unsafe.Pointer)(indirect))
}
func (gl *lib) DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32) {
	C.gllCall_glDrawArraysInstanced(gl.glDrawArraysInstanced, (C.uint32_t)(mode), (C.int32_t)(first), (C.int32_t)(count), (C.int32_t)(instancecount))
}
func (gl *lib) DrawArraysInstancedANGLE(mode uint32, first int32, count int32, primcount int32) {
	C.gllCall_glDrawArraysInstancedANGLE(gl.glDrawArraysInstancedANGLE, (C.uint32_t)(mode), (C.int32_t)(first), (C.int32_t)(count), (C.int32_t)(primcount))
}
func (gl *lib) DrawArraysInstancedARB(mode uint32, first int32, count int32, primcount int32) {
	C.gllCall_glDrawArraysInstancedARB(gl.glDrawArraysInstancedARB, (C.uint32_t)(mode), (C.int32_t)(first), (C.int32_t)(count), (C.int32_t)(primcount))
}
func (gl *lib) DrawArraysInstancedBaseInstance(mode uint32, first int32, count int32, instancecount int32, baseinstance uint32) {
	C.gllCall_glDrawArraysInstancedBaseInstance(gl.glDrawArraysInstancedBaseInstance, (C.uint32_t)(mode), (C.int32_t)(first), (C.int32_t)(count), (C.int32_t)(instancecount), (C.uint32_t)(baseinstance))
}
func (gl *lib) DrawArraysInstancedBaseInstanceEXT(mode uint32, first int32, count int32, instancecount int32, baseinstance uint32) {
	C.gllCall_glDrawArraysInstancedBaseInstanceEXT(gl.glDrawArraysInstancedBaseInstanceEXT, (C.uint32_t)(mode), (C.int32_t)(first), (C.int32_t)(count), (C.int32_t)(instancecount), (C.uint32_t)(baseinstance))
}
func (gl *lib) DrawArraysInstancedEXT(mode uint32, start int32, count int32, primcount int32) {
	C.gllCall_glDrawArraysInstancedEXT(gl.glDrawArraysInstancedEXT, (C.uint32_t)(mode), (C.int32_t)(start), (C.int32_t)(count), (C.int32_t)(primcount))
}
func (gl *lib) DrawArraysInstancedNV(mode uint32, first int32, count int32, primcount int32) {
	C.gllCall_glDrawArraysInstancedNV(gl.glDrawArraysInstancedNV, (C.uint32_t)(mode), (C.int32_t)(first), (C.int32_t)(count), (C.int32_t)(primcount))
}
func (gl *lib) DrawBuffer(buf uint32) {
	C.gllCall_glDrawBuffer(gl.glDrawBuffer, (C.uint32_t)(buf))
}
func (gl *lib) DrawBuffers(n int32, bufs *uint32) {
	C.gllCall_glDrawBuffers(gl.glDrawBuffers, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(bufs)))
}
func (gl *lib) DrawBuffersARB(n int32, bufs *uint32) {
	C.gllCall_glDrawBuffersARB(gl.glDrawBuffersARB, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(bufs)))
}
func (gl *lib) DrawBuffersATI(n int32, bufs *uint32) {
	C.gllCall_glDrawBuffersATI(gl.glDrawBuffersATI, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(bufs)))
}
func (gl *lib) DrawBuffersEXT(n int32, bufs *uint32) {
	C.gllCall_glDrawBuffersEXT(gl.glDrawBuffersEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(bufs)))
}
func (gl *lib) DrawBuffersIndexedEXT(n int32, location *uint32, indices *int32) {
	C.gllCall_glDrawBuffersIndexedEXT(gl.glDrawBuffersIndexedEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(location)), (*C.int32_t)(unsafe.Pointer(indices)))
}
func (gl *lib) DrawBuffersNV(n int32, bufs *uint32) {
	C.gllCall_glDrawBuffersNV(gl.glDrawBuffersNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(bufs)))
}
func (gl *lib) DrawCommandsAddressNV(primitiveMode uint32, indirects *uint64, sizes *int32, count uint32) {
	C.gllCall_glDrawCommandsAddressNV(gl.glDrawCommandsAddressNV, (C.uint32_t)(primitiveMode), (*C.uint64_t)(unsafe.Pointer(indirects)), (*C.int32_t)(unsafe.Pointer(sizes)), (C.uint32_t)(count))
}
func (gl *lib) DrawCommandsNV(primitiveMode uint32, buffer uint32, indirects *uintptr, sizes *int32, count uint32) {
	C.gllCall_glDrawCommandsNV(gl.glDrawCommandsNV, (C.uint32_t)(primitiveMode), (C.uint32_t)(buffer), (*C.intptr_t)(unsafe.Pointer(indirects)), (*C.int32_t)(unsafe.Pointer(sizes)), (C.uint32_t)(count))
}
func (gl *lib) DrawCommandsStatesAddressNV(indirects *uint64, sizes *int32, states *uint32, fbos *uint32, count uint32) {
	C.gllCall_glDrawCommandsStatesAddressNV(gl.glDrawCommandsStatesAddressNV, (*C.uint64_t)(unsafe.Pointer(indirects)), (*C.int32_t)(unsafe.Pointer(sizes)), (*C.uint32_t)(unsafe.Pointer(states)), (*C.uint32_t)(unsafe.Pointer(fbos)), (C.uint32_t)(count))
}
func (gl *lib) DrawCommandsStatesNV(buffer uint32, indirects *uintptr, sizes *int32, states *uint32, fbos *uint32, count uint32) {
	C.gllCall_glDrawCommandsStatesNV(gl.glDrawCommandsStatesNV, (C.uint32_t)(buffer), (*C.intptr_t)(unsafe.Pointer(indirects)), (*C.int32_t)(unsafe.Pointer(sizes)), (*C.uint32_t)(unsafe.Pointer(states)), (*C.uint32_t)(unsafe.Pointer(fbos)), (C.uint32_t)(count))
}
func (gl *lib) DrawElementArrayAPPLE(mode uint32, first int32, count int32) {
	C.gllCall_glDrawElementArrayAPPLE(gl.glDrawElementArrayAPPLE, (C.uint32_t)(mode), (C.int32_t)(first), (C.int32_t)(count))
}
func (gl *lib) DrawElementArrayATI(mode uint32, count int32) {
	C.gllCall_glDrawElementArrayATI(gl.glDrawElementArrayATI, (C.uint32_t)(mode), (C.int32_t)(count))
}
func (gl *lib) DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer) {
	C.gllCall_glDrawElements(gl.glDrawElements, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices))
}
func (gl *lib) DrawElementsBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32) {
	C.gllCall_glDrawElementsBaseVertex(gl.glDrawElementsBaseVertex, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(basevertex))
}
func (gl *lib) DrawElementsBaseVertexEXT(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32) {
	C.gllCall_glDrawElementsBaseVertexEXT(gl.glDrawElementsBaseVertexEXT, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(basevertex))
}
func (gl *lib) DrawElementsBaseVertexOES(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32) {
	C.gllCall_glDrawElementsBaseVertexOES(gl.glDrawElementsBaseVertexOES, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(basevertex))
}
func (gl *lib) DrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer) {
	C.gllCall_glDrawElementsIndirect(gl.glDrawElementsIndirect, (C.uint32_t)(mode), (C.uint32_t)(type_), (unsafe.Pointer)(indirect))
}
func (gl *lib) DrawElementsInstanced(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32) {
	C.gllCall_glDrawElementsInstanced(gl.glDrawElementsInstanced, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(instancecount))
}
func (gl *lib) DrawElementsInstancedANGLE(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, primcount int32) {
	C.gllCall_glDrawElementsInstancedANGLE(gl.glDrawElementsInstancedANGLE, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(primcount))
}
func (gl *lib) DrawElementsInstancedARB(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, primcount int32) {
	C.gllCall_glDrawElementsInstancedARB(gl.glDrawElementsInstancedARB, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(primcount))
}
func (gl *lib) DrawElementsInstancedBaseInstance(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, baseinstance uint32) {
	C.gllCall_glDrawElementsInstancedBaseInstance(gl.glDrawElementsInstancedBaseInstance, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(instancecount), (C.uint32_t)(baseinstance))
}
func (gl *lib) DrawElementsInstancedBaseInstanceEXT(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, baseinstance uint32) {
	C.gllCall_glDrawElementsInstancedBaseInstanceEXT(gl.glDrawElementsInstancedBaseInstanceEXT, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(instancecount), (C.uint32_t)(baseinstance))
}
func (gl *lib) DrawElementsInstancedBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32) {
	C.gllCall_glDrawElementsInstancedBaseVertex(gl.glDrawElementsInstancedBaseVertex, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(instancecount), (C.int32_t)(basevertex))
}
func (gl *lib) DrawElementsInstancedBaseVertexBaseInstance(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32, baseinstance uint32) {
	C.gllCall_glDrawElementsInstancedBaseVertexBaseInstance(gl.glDrawElementsInstancedBaseVertexBaseInstance, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(instancecount), (C.int32_t)(basevertex), (C.uint32_t)(baseinstance))
}
func (gl *lib) DrawElementsInstancedBaseVertexBaseInstanceEXT(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32, baseinstance uint32) {
	C.gllCall_glDrawElementsInstancedBaseVertexBaseInstanceEXT(gl.glDrawElementsInstancedBaseVertexBaseInstanceEXT, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(instancecount), (C.int32_t)(basevertex), (C.uint32_t)(baseinstance))
}
func (gl *lib) DrawElementsInstancedBaseVertexEXT(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32) {
	C.gllCall_glDrawElementsInstancedBaseVertexEXT(gl.glDrawElementsInstancedBaseVertexEXT, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(instancecount), (C.int32_t)(basevertex))
}
func (gl *lib) DrawElementsInstancedBaseVertexOES(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32) {
	C.gllCall_glDrawElementsInstancedBaseVertexOES(gl.glDrawElementsInstancedBaseVertexOES, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(instancecount), (C.int32_t)(basevertex))
}
func (gl *lib) DrawElementsInstancedEXT(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, primcount int32) {
	C.gllCall_glDrawElementsInstancedEXT(gl.glDrawElementsInstancedEXT, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(primcount))
}
func (gl *lib) DrawElementsInstancedNV(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, primcount int32) {
	C.gllCall_glDrawElementsInstancedNV(gl.glDrawElementsInstancedNV, (C.uint32_t)(mode), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(primcount))
}
func (gl *lib) DrawMeshArraysSUN(mode uint32, first int32, count int32, width int32) {
	C.gllCall_glDrawMeshArraysSUN(gl.glDrawMeshArraysSUN, (C.uint32_t)(mode), (C.int32_t)(first), (C.int32_t)(count), (C.int32_t)(width))
}
func (gl *lib) DrawMeshTasksNV(first uint32, count uint32) {
	C.gllCall_glDrawMeshTasksNV(gl.glDrawMeshTasksNV, (C.uint32_t)(first), (C.uint32_t)(count))
}
func (gl *lib) DrawMeshTasksIndirectNV(indirect uintptr) {
	C.gllCall_glDrawMeshTasksIndirectNV(gl.glDrawMeshTasksIndirectNV, (C.intptr_t)(indirect))
}
func (gl *lib) DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glDrawPixels(gl.glDrawPixels, (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) DrawRangeElementArrayAPPLE(mode uint32, start uint32, end uint32, first int32, count int32) {
	C.gllCall_glDrawRangeElementArrayAPPLE(gl.glDrawRangeElementArrayAPPLE, (C.uint32_t)(mode), (C.uint32_t)(start), (C.uint32_t)(end), (C.int32_t)(first), (C.int32_t)(count))
}
func (gl *lib) DrawRangeElementArrayATI(mode uint32, start uint32, end uint32, count int32) {
	C.gllCall_glDrawRangeElementArrayATI(gl.glDrawRangeElementArrayATI, (C.uint32_t)(mode), (C.uint32_t)(start), (C.uint32_t)(end), (C.int32_t)(count))
}
func (gl *lib) DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer) {
	C.gllCall_glDrawRangeElements(gl.glDrawRangeElements, (C.uint32_t)(mode), (C.uint32_t)(start), (C.uint32_t)(end), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices))
}
func (gl *lib) DrawRangeElementsBaseVertex(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32) {
	C.gllCall_glDrawRangeElementsBaseVertex(gl.glDrawRangeElementsBaseVertex, (C.uint32_t)(mode), (C.uint32_t)(start), (C.uint32_t)(end), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(basevertex))
}
func (gl *lib) DrawRangeElementsBaseVertexEXT(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32) {
	C.gllCall_glDrawRangeElementsBaseVertexEXT(gl.glDrawRangeElementsBaseVertexEXT, (C.uint32_t)(mode), (C.uint32_t)(start), (C.uint32_t)(end), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(basevertex))
}
func (gl *lib) DrawRangeElementsBaseVertexOES(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32) {
	C.gllCall_glDrawRangeElementsBaseVertexOES(gl.glDrawRangeElementsBaseVertexOES, (C.uint32_t)(mode), (C.uint32_t)(start), (C.uint32_t)(end), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices), (C.int32_t)(basevertex))
}
func (gl *lib) DrawRangeElementsEXT(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer) {
	C.gllCall_glDrawRangeElementsEXT(gl.glDrawRangeElementsEXT, (C.uint32_t)(mode), (C.uint32_t)(start), (C.uint32_t)(end), (C.int32_t)(count), (C.uint32_t)(type_), (unsafe.Pointer)(indices))
}
func (gl *lib) DrawTexfOES(x float32, y float32, z float32, width float32, height float32) {
	C.gllCall_glDrawTexfOES(gl.glDrawTexfOES, (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(width), (C.float)(height))
}
func (gl *lib) DrawTexfvOES(coords *float32) {
	C.gllCall_glDrawTexfvOES(gl.glDrawTexfvOES, (*C.float)(unsafe.Pointer(coords)))
}
func (gl *lib) DrawTexiOES(x int32, y int32, z int32, width int32, height int32) {
	C.gllCall_glDrawTexiOES(gl.glDrawTexiOES, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) DrawTexivOES(coords *int32) {
	C.gllCall_glDrawTexivOES(gl.glDrawTexivOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) DrawTexsOES(x int16, y int16, z int16, width int16, height int16) {
	C.gllCall_glDrawTexsOES(gl.glDrawTexsOES, (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z), (C.int16_t)(width), (C.int16_t)(height))
}
func (gl *lib) DrawTexsvOES(coords *int16) {
	C.gllCall_glDrawTexsvOES(gl.glDrawTexsvOES, (*C.int16_t)(unsafe.Pointer(coords)))
}
func (gl *lib) DrawTextureNV(texture uint32, sampler uint32, x0 float32, y0 float32, x1 float32, y1 float32, z float32, s0 float32, t0 float32, s1 float32, t1 float32) {
	C.gllCall_glDrawTextureNV(gl.glDrawTextureNV, (C.uint32_t)(texture), (C.uint32_t)(sampler), (C.float)(x0), (C.float)(y0), (C.float)(x1), (C.float)(y1), (C.float)(z), (C.float)(s0), (C.float)(t0), (C.float)(s1), (C.float)(t1))
}
func (gl *lib) DrawTexxOES(x int32, y int32, z int32, width int32, height int32) {
	C.gllCall_glDrawTexxOES(gl.glDrawTexxOES, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) DrawTexxvOES(coords *int32) {
	C.gllCall_glDrawTexxvOES(gl.glDrawTexxvOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) DrawTransformFeedback(mode uint32, id uint32) {
	C.gllCall_glDrawTransformFeedback(gl.glDrawTransformFeedback, (C.uint32_t)(mode), (C.uint32_t)(id))
}
func (gl *lib) DrawTransformFeedbackEXT(mode uint32, id uint32) {
	C.gllCall_glDrawTransformFeedbackEXT(gl.glDrawTransformFeedbackEXT, (C.uint32_t)(mode), (C.uint32_t)(id))
}
func (gl *lib) DrawTransformFeedbackInstanced(mode uint32, id uint32, instancecount int32) {
	C.gllCall_glDrawTransformFeedbackInstanced(gl.glDrawTransformFeedbackInstanced, (C.uint32_t)(mode), (C.uint32_t)(id), (C.int32_t)(instancecount))
}
func (gl *lib) DrawTransformFeedbackInstancedEXT(mode uint32, id uint32, instancecount int32) {
	C.gllCall_glDrawTransformFeedbackInstancedEXT(gl.glDrawTransformFeedbackInstancedEXT, (C.uint32_t)(mode), (C.uint32_t)(id), (C.int32_t)(instancecount))
}
func (gl *lib) DrawTransformFeedbackNV(mode uint32, id uint32) {
	C.gllCall_glDrawTransformFeedbackNV(gl.glDrawTransformFeedbackNV, (C.uint32_t)(mode), (C.uint32_t)(id))
}
func (gl *lib) DrawTransformFeedbackStream(mode uint32, id uint32, stream uint32) {
	C.gllCall_glDrawTransformFeedbackStream(gl.glDrawTransformFeedbackStream, (C.uint32_t)(mode), (C.uint32_t)(id), (C.uint32_t)(stream))
}
func (gl *lib) DrawTransformFeedbackStreamInstanced(mode uint32, id uint32, stream uint32, instancecount int32) {
	C.gllCall_glDrawTransformFeedbackStreamInstanced(gl.glDrawTransformFeedbackStreamInstanced, (C.uint32_t)(mode), (C.uint32_t)(id), (C.uint32_t)(stream), (C.int32_t)(instancecount))
}
func (gl *lib) EdgeFlag(flag bool) {
	C.gllCall_glEdgeFlag(gl.glEdgeFlag, (C._Bool)(flag))
}
func (gl *lib) EdgeFlagFormatNV(stride int32) {
	C.gllCall_glEdgeFlagFormatNV(gl.glEdgeFlagFormatNV, (C.int32_t)(stride))
}
func (gl *lib) EdgeFlagPointer(stride int32, pointer unsafe.Pointer) {
	C.gllCall_glEdgeFlagPointer(gl.glEdgeFlagPointer, (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) EdgeFlagPointerEXT(stride int32, count int32, pointer *bool) {
	C.gllCall_glEdgeFlagPointerEXT(gl.glEdgeFlagPointerEXT, (C.int32_t)(stride), (C.int32_t)(count), (*C._Bool)(unsafe.Pointer(pointer)))
}
func (gl *lib) EdgeFlagPointerListIBM(stride int32, pointer **bool, ptrstride int32) {
	C.gllCall_glEdgeFlagPointerListIBM(gl.glEdgeFlagPointerListIBM, (C.int32_t)(stride), (**C._Bool)(unsafe.Pointer(pointer)), (C.int32_t)(ptrstride))
}
func (gl *lib) EdgeFlagv(flag *bool) {
	C.gllCall_glEdgeFlagv(gl.glEdgeFlagv, (*C._Bool)(unsafe.Pointer(flag)))
}
func (gl *lib) ElementPointerAPPLE(type_ uint32, pointer unsafe.Pointer) {
	C.gllCall_glElementPointerAPPLE(gl.glElementPointerAPPLE, (C.uint32_t)(type_), (unsafe.Pointer)(pointer))
}
func (gl *lib) ElementPointerATI(type_ uint32, pointer unsafe.Pointer) {
	C.gllCall_glElementPointerATI(gl.glElementPointerATI, (C.uint32_t)(type_), (unsafe.Pointer)(pointer))
}
func (gl *lib) Enable(cap uint32) {
	C.gllCall_glEnable(gl.glEnable, (C.uint32_t)(cap))
}
func (gl *lib) EnableClientState(array uint32) {
	C.gllCall_glEnableClientState(gl.glEnableClientState, (C.uint32_t)(array))
}
func (gl *lib) EnableClientStateIndexedEXT(array uint32, index uint32) {
	C.gllCall_glEnableClientStateIndexedEXT(gl.glEnableClientStateIndexedEXT, (C.uint32_t)(array), (C.uint32_t)(index))
}
func (gl *lib) EnableClientStateiEXT(array uint32, index uint32) {
	C.gllCall_glEnableClientStateiEXT(gl.glEnableClientStateiEXT, (C.uint32_t)(array), (C.uint32_t)(index))
}
func (gl *lib) EnableDriverControlQCOM(driverControl uint32) {
	C.gllCall_glEnableDriverControlQCOM(gl.glEnableDriverControlQCOM, (C.uint32_t)(driverControl))
}
func (gl *lib) EnableIndexedEXT(target uint32, index uint32) {
	C.gllCall_glEnableIndexedEXT(gl.glEnableIndexedEXT, (C.uint32_t)(target), (C.uint32_t)(index))
}
func (gl *lib) EnableVariantClientStateEXT(id uint32) {
	C.gllCall_glEnableVariantClientStateEXT(gl.glEnableVariantClientStateEXT, (C.uint32_t)(id))
}
func (gl *lib) EnableVertexArrayAttrib(vaobj uint32, index uint32) {
	C.gllCall_glEnableVertexArrayAttrib(gl.glEnableVertexArrayAttrib, (C.uint32_t)(vaobj), (C.uint32_t)(index))
}
func (gl *lib) EnableVertexArrayAttribEXT(vaobj uint32, index uint32) {
	C.gllCall_glEnableVertexArrayAttribEXT(gl.glEnableVertexArrayAttribEXT, (C.uint32_t)(vaobj), (C.uint32_t)(index))
}
func (gl *lib) EnableVertexArrayEXT(vaobj uint32, array uint32) {
	C.gllCall_glEnableVertexArrayEXT(gl.glEnableVertexArrayEXT, (C.uint32_t)(vaobj), (C.uint32_t)(array))
}
func (gl *lib) EnableVertexAttribAPPLE(index uint32, pname uint32) {
	C.gllCall_glEnableVertexAttribAPPLE(gl.glEnableVertexAttribAPPLE, (C.uint32_t)(index), (C.uint32_t)(pname))
}
func (gl *lib) EnableVertexAttribArray(index uint32) {
	C.gllCall_glEnableVertexAttribArray(gl.glEnableVertexAttribArray, (C.uint32_t)(index))
}
func (gl *lib) EnableVertexAttribArrayARB(index uint32) {
	C.gllCall_glEnableVertexAttribArrayARB(gl.glEnableVertexAttribArrayARB, (C.uint32_t)(index))
}
func (gl *lib) Enablei(target uint32, index uint32) {
	C.gllCall_glEnablei(gl.glEnablei, (C.uint32_t)(target), (C.uint32_t)(index))
}
func (gl *lib) EnableiEXT(target uint32, index uint32) {
	C.gllCall_glEnableiEXT(gl.glEnableiEXT, (C.uint32_t)(target), (C.uint32_t)(index))
}
func (gl *lib) EnableiNV(target uint32, index uint32) {
	C.gllCall_glEnableiNV(gl.glEnableiNV, (C.uint32_t)(target), (C.uint32_t)(index))
}
func (gl *lib) EnableiOES(target uint32, index uint32) {
	C.gllCall_glEnableiOES(gl.glEnableiOES, (C.uint32_t)(target), (C.uint32_t)(index))
}
func (gl *lib) End() {
	C.gllCall_glEnd(gl.glEnd)
}
func (gl *lib) EndConditionalRender() {
	C.gllCall_glEndConditionalRender(gl.glEndConditionalRender)
}
func (gl *lib) EndConditionalRenderNV() {
	C.gllCall_glEndConditionalRenderNV(gl.glEndConditionalRenderNV)
}
func (gl *lib) EndConditionalRenderNVX() {
	C.gllCall_glEndConditionalRenderNVX(gl.glEndConditionalRenderNVX)
}
func (gl *lib) EndFragmentShaderATI() {
	C.gllCall_glEndFragmentShaderATI(gl.glEndFragmentShaderATI)
}
func (gl *lib) EndList() {
	C.gllCall_glEndList(gl.glEndList)
}
func (gl *lib) EndOcclusionQueryNV() {
	C.gllCall_glEndOcclusionQueryNV(gl.glEndOcclusionQueryNV)
}
func (gl *lib) EndPerfMonitorAMD(monitor uint32) {
	C.gllCall_glEndPerfMonitorAMD(gl.glEndPerfMonitorAMD, (C.uint32_t)(monitor))
}
func (gl *lib) EndPerfQueryINTEL(queryHandle uint32) {
	C.gllCall_glEndPerfQueryINTEL(gl.glEndPerfQueryINTEL, (C.uint32_t)(queryHandle))
}
func (gl *lib) EndQuery(target uint32) {
	C.gllCall_glEndQuery(gl.glEndQuery, (C.uint32_t)(target))
}
func (gl *lib) EndQueryARB(target uint32) {
	C.gllCall_glEndQueryARB(gl.glEndQueryARB, (C.uint32_t)(target))
}
func (gl *lib) EndQueryEXT(target uint32) {
	C.gllCall_glEndQueryEXT(gl.glEndQueryEXT, (C.uint32_t)(target))
}
func (gl *lib) EndQueryIndexed(target uint32, index uint32) {
	C.gllCall_glEndQueryIndexed(gl.glEndQueryIndexed, (C.uint32_t)(target), (C.uint32_t)(index))
}
func (gl *lib) EndTilingQCOM(preserveMask uint32) {
	C.gllCall_glEndTilingQCOM(gl.glEndTilingQCOM, (C.uint32_t)(preserveMask))
}
func (gl *lib) EndTransformFeedback() {
	C.gllCall_glEndTransformFeedback(gl.glEndTransformFeedback)
}
func (gl *lib) EndTransformFeedbackEXT() {
	C.gllCall_glEndTransformFeedbackEXT(gl.glEndTransformFeedbackEXT)
}
func (gl *lib) EndTransformFeedbackNV() {
	C.gllCall_glEndTransformFeedbackNV(gl.glEndTransformFeedbackNV)
}
func (gl *lib) EndVertexShaderEXT() {
	C.gllCall_glEndVertexShaderEXT(gl.glEndVertexShaderEXT)
}
func (gl *lib) EndVideoCaptureNV(video_capture_slot uint32) {
	C.gllCall_glEndVideoCaptureNV(gl.glEndVideoCaptureNV, (C.uint32_t)(video_capture_slot))
}
func (gl *lib) EvalCoord1d(u float64) {
	C.gllCall_glEvalCoord1d(gl.glEvalCoord1d, (C.double)(u))
}
func (gl *lib) EvalCoord1dv(u *float64) {
	C.gllCall_glEvalCoord1dv(gl.glEvalCoord1dv, (*C.double)(unsafe.Pointer(u)))
}
func (gl *lib) EvalCoord1f(u float32) {
	C.gllCall_glEvalCoord1f(gl.glEvalCoord1f, (C.float)(u))
}
func (gl *lib) EvalCoord1fv(u *float32) {
	C.gllCall_glEvalCoord1fv(gl.glEvalCoord1fv, (*C.float)(unsafe.Pointer(u)))
}
func (gl *lib) EvalCoord1xOES(u int32) {
	C.gllCall_glEvalCoord1xOES(gl.glEvalCoord1xOES, (C.int32_t)(u))
}
func (gl *lib) EvalCoord1xvOES(coords *int32) {
	C.gllCall_glEvalCoord1xvOES(gl.glEvalCoord1xvOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) EvalCoord2d(u float64, v float64) {
	C.gllCall_glEvalCoord2d(gl.glEvalCoord2d, (C.double)(u), (C.double)(v))
}
func (gl *lib) EvalCoord2dv(u *float64) {
	C.gllCall_glEvalCoord2dv(gl.glEvalCoord2dv, (*C.double)(unsafe.Pointer(u)))
}
func (gl *lib) EvalCoord2f(u float32, v float32) {
	C.gllCall_glEvalCoord2f(gl.glEvalCoord2f, (C.float)(u), (C.float)(v))
}
func (gl *lib) EvalCoord2fv(u *float32) {
	C.gllCall_glEvalCoord2fv(gl.glEvalCoord2fv, (*C.float)(unsafe.Pointer(u)))
}
func (gl *lib) EvalCoord2xOES(u int32, v int32) {
	C.gllCall_glEvalCoord2xOES(gl.glEvalCoord2xOES, (C.int32_t)(u), (C.int32_t)(v))
}
func (gl *lib) EvalCoord2xvOES(coords *int32) {
	C.gllCall_glEvalCoord2xvOES(gl.glEvalCoord2xvOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) EvalMapsNV(target uint32, mode uint32) {
	C.gllCall_glEvalMapsNV(gl.glEvalMapsNV, (C.uint32_t)(target), (C.uint32_t)(mode))
}
func (gl *lib) EvalMesh1(mode uint32, i1 int32, i2 int32) {
	C.gllCall_glEvalMesh1(gl.glEvalMesh1, (C.uint32_t)(mode), (C.int32_t)(i1), (C.int32_t)(i2))
}
func (gl *lib) EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32) {
	C.gllCall_glEvalMesh2(gl.glEvalMesh2, (C.uint32_t)(mode), (C.int32_t)(i1), (C.int32_t)(i2), (C.int32_t)(j1), (C.int32_t)(j2))
}
func (gl *lib) EvalPoint1(i int32) {
	C.gllCall_glEvalPoint1(gl.glEvalPoint1, (C.int32_t)(i))
}
func (gl *lib) EvalPoint2(i int32, j int32) {
	C.gllCall_glEvalPoint2(gl.glEvalPoint2, (C.int32_t)(i), (C.int32_t)(j))
}
func (gl *lib) EvaluateDepthValuesARB() {
	C.gllCall_glEvaluateDepthValuesARB(gl.glEvaluateDepthValuesARB)
}
func (gl *lib) ExecuteProgramNV(target uint32, id uint32, params *float32) {
	C.gllCall_glExecuteProgramNV(gl.glExecuteProgramNV, (C.uint32_t)(target), (C.uint32_t)(id), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) ExtGetBufferPointervQCOM(target uint32, params *unsafe.Pointer) {
	C.gllCall_glExtGetBufferPointervQCOM(gl.glExtGetBufferPointervQCOM, (C.uint32_t)(target), (*unsafe.Pointer)(unsafe.Pointer(params)))
}
func (gl *lib) ExtGetBuffersQCOM(buffers *uint32, maxBuffers int32, numBuffers *int32) {
	C.gllCall_glExtGetBuffersQCOM(gl.glExtGetBuffersQCOM, (*C.uint32_t)(unsafe.Pointer(buffers)), (C.int32_t)(maxBuffers), (*C.int32_t)(unsafe.Pointer(numBuffers)))
}
func (gl *lib) ExtGetFramebuffersQCOM(framebuffers *uint32, maxFramebuffers int32, numFramebuffers *int32) {
	C.gllCall_glExtGetFramebuffersQCOM(gl.glExtGetFramebuffersQCOM, (*C.uint32_t)(unsafe.Pointer(framebuffers)), (C.int32_t)(maxFramebuffers), (*C.int32_t)(unsafe.Pointer(numFramebuffers)))
}
func (gl *lib) ExtGetProgramBinarySourceQCOM(program uint32, shadertype uint32, source *uint8, length *int32) {
	C.gllCall_glExtGetProgramBinarySourceQCOM(gl.glExtGetProgramBinarySourceQCOM, (C.uint32_t)(program), (C.uint32_t)(shadertype), (*C.uint8_t)(unsafe.Pointer(source)), (*C.int32_t)(unsafe.Pointer(length)))
}
func (gl *lib) ExtGetProgramsQCOM(programs *uint32, maxPrograms int32, numPrograms *int32) {
	C.gllCall_glExtGetProgramsQCOM(gl.glExtGetProgramsQCOM, (*C.uint32_t)(unsafe.Pointer(programs)), (C.int32_t)(maxPrograms), (*C.int32_t)(unsafe.Pointer(numPrograms)))
}
func (gl *lib) ExtGetRenderbuffersQCOM(renderbuffers *uint32, maxRenderbuffers int32, numRenderbuffers *int32) {
	C.gllCall_glExtGetRenderbuffersQCOM(gl.glExtGetRenderbuffersQCOM, (*C.uint32_t)(unsafe.Pointer(renderbuffers)), (C.int32_t)(maxRenderbuffers), (*C.int32_t)(unsafe.Pointer(numRenderbuffers)))
}
func (gl *lib) ExtGetShadersQCOM(shaders *uint32, maxShaders int32, numShaders *int32) {
	C.gllCall_glExtGetShadersQCOM(gl.glExtGetShadersQCOM, (*C.uint32_t)(unsafe.Pointer(shaders)), (C.int32_t)(maxShaders), (*C.int32_t)(unsafe.Pointer(numShaders)))
}
func (gl *lib) ExtGetTexLevelParameterivQCOM(texture uint32, face uint32, level int32, pname uint32, params *int32) {
	C.gllCall_glExtGetTexLevelParameterivQCOM(gl.glExtGetTexLevelParameterivQCOM, (C.uint32_t)(texture), (C.uint32_t)(face), (C.int32_t)(level), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ExtGetTexSubImageQCOM(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, texels unsafe.Pointer) {
	C.gllCall_glExtGetTexSubImageQCOM(gl.glExtGetTexSubImageQCOM, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(texels))
}
func (gl *lib) ExtGetTexturesQCOM(textures *uint32, maxTextures int32, numTextures *int32) {
	C.gllCall_glExtGetTexturesQCOM(gl.glExtGetTexturesQCOM, (*C.uint32_t)(unsafe.Pointer(textures)), (C.int32_t)(maxTextures), (*C.int32_t)(unsafe.Pointer(numTextures)))
}
func (gl *lib) ExtIsProgramBinaryQCOM(program uint32) bool {
	return (bool)(C.gllCall_glExtIsProgramBinaryQCOM(gl.glExtIsProgramBinaryQCOM, (C.uint32_t)(program)))
}
func (gl *lib) ExtTexObjectStateOverrideiQCOM(target uint32, pname uint32, param int32) {
	C.gllCall_glExtTexObjectStateOverrideiQCOM(gl.glExtTexObjectStateOverrideiQCOM, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) ExtractComponentEXT(res uint32, src uint32, num uint32) {
	C.gllCall_glExtractComponentEXT(gl.glExtractComponentEXT, (C.uint32_t)(res), (C.uint32_t)(src), (C.uint32_t)(num))
}
func (gl *lib) FeedbackBuffer(size int32, type_ uint32, buffer *float32) {
	C.gllCall_glFeedbackBuffer(gl.glFeedbackBuffer, (C.int32_t)(size), (C.uint32_t)(type_), (*C.float)(unsafe.Pointer(buffer)))
}
func (gl *lib) FeedbackBufferxOES(n int32, type_ uint32, buffer *int32) {
	C.gllCall_glFeedbackBufferxOES(gl.glFeedbackBufferxOES, (C.int32_t)(n), (C.uint32_t)(type_), (*C.int32_t)(unsafe.Pointer(buffer)))
}
func (gl *lib) FenceSync(condition uint32, flags uint32) GLsync {
	return (GLsync)(C.gllCall_glFenceSync(gl.glFenceSync, (C.uint32_t)(condition), (C.uint32_t)(flags)))
}
func (gl *lib) FenceSyncAPPLE(condition uint32, flags uint32) GLsync {
	return (GLsync)(C.gllCall_glFenceSyncAPPLE(gl.glFenceSyncAPPLE, (C.uint32_t)(condition), (C.uint32_t)(flags)))
}
func (gl *lib) FinalCombinerInputNV(variable uint32, input uint32, mapping uint32, componentUsage uint32) {
	C.gllCall_glFinalCombinerInputNV(gl.glFinalCombinerInputNV, (C.uint32_t)(variable), (C.uint32_t)(input), (C.uint32_t)(mapping), (C.uint32_t)(componentUsage))
}
func (gl *lib) Finish() {
	C.gllCall_glFinish(gl.glFinish)
}
func (gl *lib) FinishAsyncSGIX(markerp *uint32) int32 {
	return (int32)(C.gllCall_glFinishAsyncSGIX(gl.glFinishAsyncSGIX, (*C.uint32_t)(unsafe.Pointer(markerp))))
}
func (gl *lib) FinishFenceAPPLE(fence uint32) {
	C.gllCall_glFinishFenceAPPLE(gl.glFinishFenceAPPLE, (C.uint32_t)(fence))
}
func (gl *lib) FinishFenceNV(fence uint32) {
	C.gllCall_glFinishFenceNV(gl.glFinishFenceNV, (C.uint32_t)(fence))
}
func (gl *lib) FinishObjectAPPLE(object uint32, name int32) {
	C.gllCall_glFinishObjectAPPLE(gl.glFinishObjectAPPLE, (C.uint32_t)(object), (C.int32_t)(name))
}
func (gl *lib) FinishTextureSUNX() {
	C.gllCall_glFinishTextureSUNX(gl.glFinishTextureSUNX)
}
func (gl *lib) Flush() {
	C.gllCall_glFlush(gl.glFlush)
}
func (gl *lib) FlushMappedBufferRange(target uint32, offset uintptr, length int) {
	C.gllCall_glFlushMappedBufferRange(gl.glFlushMappedBufferRange, (C.uint32_t)(target), (C.intptr_t)(offset), (C.ssize_t)(length))
}
func (gl *lib) FlushMappedBufferRangeAPPLE(target uint32, offset uintptr, size int) {
	C.gllCall_glFlushMappedBufferRangeAPPLE(gl.glFlushMappedBufferRangeAPPLE, (C.uint32_t)(target), (C.intptr_t)(offset), (C.ssize_t)(size))
}
func (gl *lib) FlushMappedBufferRangeEXT(target uint32, offset uintptr, length int) {
	C.gllCall_glFlushMappedBufferRangeEXT(gl.glFlushMappedBufferRangeEXT, (C.uint32_t)(target), (C.intptr_t)(offset), (C.ssize_t)(length))
}
func (gl *lib) FlushMappedNamedBufferRange(buffer uint32, offset uintptr, length int) {
	C.gllCall_glFlushMappedNamedBufferRange(gl.glFlushMappedNamedBufferRange, (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(length))
}
func (gl *lib) FlushMappedNamedBufferRangeEXT(buffer uint32, offset uintptr, length int) {
	C.gllCall_glFlushMappedNamedBufferRangeEXT(gl.glFlushMappedNamedBufferRangeEXT, (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(length))
}
func (gl *lib) FlushPixelDataRangeNV(target uint32) {
	C.gllCall_glFlushPixelDataRangeNV(gl.glFlushPixelDataRangeNV, (C.uint32_t)(target))
}
func (gl *lib) FlushRasterSGIX() {
	C.gllCall_glFlushRasterSGIX(gl.glFlushRasterSGIX)
}
func (gl *lib) FlushStaticDataIBM(target uint32) {
	C.gllCall_glFlushStaticDataIBM(gl.glFlushStaticDataIBM, (C.uint32_t)(target))
}
func (gl *lib) FlushVertexArrayRangeAPPLE(length int32, pointer unsafe.Pointer) {
	C.gllCall_glFlushVertexArrayRangeAPPLE(gl.glFlushVertexArrayRangeAPPLE, (C.int32_t)(length), (unsafe.Pointer)(pointer))
}
func (gl *lib) FlushVertexArrayRangeNV() {
	C.gllCall_glFlushVertexArrayRangeNV(gl.glFlushVertexArrayRangeNV)
}
func (gl *lib) FogCoordFormatNV(type_ uint32, stride int32) {
	C.gllCall_glFogCoordFormatNV(gl.glFogCoordFormatNV, (C.uint32_t)(type_), (C.int32_t)(stride))
}
func (gl *lib) FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glFogCoordPointer(gl.glFogCoordPointer, (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) FogCoordPointerEXT(type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glFogCoordPointerEXT(gl.glFogCoordPointerEXT, (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) FogCoordPointerListIBM(type_ uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
	C.gllCall_glFogCoordPointerListIBM(gl.glFogCoordPointerListIBM, (C.uint32_t)(type_), (C.int32_t)(stride), (*unsafe.Pointer)(unsafe.Pointer(pointer)), (C.int32_t)(ptrstride))
}
func (gl *lib) FogCoordd(coord float64) {
	C.gllCall_glFogCoordd(gl.glFogCoordd, (C.double)(coord))
}
func (gl *lib) FogCoorddEXT(coord float64) {
	C.gllCall_glFogCoorddEXT(gl.glFogCoorddEXT, (C.double)(coord))
}
func (gl *lib) FogCoorddv(coord *float64) {
	C.gllCall_glFogCoorddv(gl.glFogCoorddv, (*C.double)(unsafe.Pointer(coord)))
}
func (gl *lib) FogCoorddvEXT(coord *float64) {
	C.gllCall_glFogCoorddvEXT(gl.glFogCoorddvEXT, (*C.double)(unsafe.Pointer(coord)))
}
func (gl *lib) FogCoordf(coord float32) {
	C.gllCall_glFogCoordf(gl.glFogCoordf, (C.float)(coord))
}
func (gl *lib) FogCoordfEXT(coord float32) {
	C.gllCall_glFogCoordfEXT(gl.glFogCoordfEXT, (C.float)(coord))
}
func (gl *lib) FogCoordfv(coord *float32) {
	C.gllCall_glFogCoordfv(gl.glFogCoordfv, (*C.float)(unsafe.Pointer(coord)))
}
func (gl *lib) FogCoordfvEXT(coord *float32) {
	C.gllCall_glFogCoordfvEXT(gl.glFogCoordfvEXT, (*C.float)(unsafe.Pointer(coord)))
}
func (gl *lib) FogCoordhNV(fog uint16) {
	C.gllCall_glFogCoordhNV(gl.glFogCoordhNV, (C.uint16_t)(fog))
}
func (gl *lib) FogCoordhvNV(fog *uint16) {
	C.gllCall_glFogCoordhvNV(gl.glFogCoordhvNV, (*C.uint16_t)(unsafe.Pointer(fog)))
}
func (gl *lib) FogFuncSGIS(n int32, points *float32) {
	C.gllCall_glFogFuncSGIS(gl.glFogFuncSGIS, (C.int32_t)(n), (*C.float)(unsafe.Pointer(points)))
}
func (gl *lib) Fogf(pname uint32, param float32) {
	C.gllCall_glFogf(gl.glFogf, (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) Fogfv(pname uint32, params *float32) {
	C.gllCall_glFogfv(gl.glFogfv, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) Fogi(pname uint32, param int32) {
	C.gllCall_glFogi(gl.glFogi, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) Fogiv(pname uint32, params *int32) {
	C.gllCall_glFogiv(gl.glFogiv, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) Fogx(pname uint32, param int32) {
	C.gllCall_glFogx(gl.glFogx, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) FogxOES(pname uint32, param int32) {
	C.gllCall_glFogxOES(gl.glFogxOES, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) Fogxv(pname uint32, param *int32) {
	C.gllCall_glFogxv(gl.glFogxv, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) FogxvOES(pname uint32, param *int32) {
	C.gllCall_glFogxvOES(gl.glFogxvOES, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) FragmentColorMaterialSGIX(face uint32, mode uint32) {
	C.gllCall_glFragmentColorMaterialSGIX(gl.glFragmentColorMaterialSGIX, (C.uint32_t)(face), (C.uint32_t)(mode))
}
func (gl *lib) FragmentCoverageColorNV(color uint32) {
	C.gllCall_glFragmentCoverageColorNV(gl.glFragmentCoverageColorNV, (C.uint32_t)(color))
}
func (gl *lib) FragmentLightModelfSGIX(pname uint32, param float32) {
	C.gllCall_glFragmentLightModelfSGIX(gl.glFragmentLightModelfSGIX, (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) FragmentLightModelfvSGIX(pname uint32, params *float32) {
	C.gllCall_glFragmentLightModelfvSGIX(gl.glFragmentLightModelfvSGIX, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) FragmentLightModeliSGIX(pname uint32, param int32) {
	C.gllCall_glFragmentLightModeliSGIX(gl.glFragmentLightModeliSGIX, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) FragmentLightModelivSGIX(pname uint32, params *int32) {
	C.gllCall_glFragmentLightModelivSGIX(gl.glFragmentLightModelivSGIX, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) FragmentLightfSGIX(light uint32, pname uint32, param float32) {
	C.gllCall_glFragmentLightfSGIX(gl.glFragmentLightfSGIX, (C.uint32_t)(light), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) FragmentLightfvSGIX(light uint32, pname uint32, params *float32) {
	C.gllCall_glFragmentLightfvSGIX(gl.glFragmentLightfvSGIX, (C.uint32_t)(light), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) FragmentLightiSGIX(light uint32, pname uint32, param int32) {
	C.gllCall_glFragmentLightiSGIX(gl.glFragmentLightiSGIX, (C.uint32_t)(light), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) FragmentLightivSGIX(light uint32, pname uint32, params *int32) {
	C.gllCall_glFragmentLightivSGIX(gl.glFragmentLightivSGIX, (C.uint32_t)(light), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) FragmentMaterialfSGIX(face uint32, pname uint32, param float32) {
	C.gllCall_glFragmentMaterialfSGIX(gl.glFragmentMaterialfSGIX, (C.uint32_t)(face), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) FragmentMaterialfvSGIX(face uint32, pname uint32, params *float32) {
	C.gllCall_glFragmentMaterialfvSGIX(gl.glFragmentMaterialfvSGIX, (C.uint32_t)(face), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) FragmentMaterialiSGIX(face uint32, pname uint32, param int32) {
	C.gllCall_glFragmentMaterialiSGIX(gl.glFragmentMaterialiSGIX, (C.uint32_t)(face), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) FragmentMaterialivSGIX(face uint32, pname uint32, params *int32) {
	C.gllCall_glFragmentMaterialivSGIX(gl.glFragmentMaterialivSGIX, (C.uint32_t)(face), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) FrameTerminatorGREMEDY() {
	C.gllCall_glFrameTerminatorGREMEDY(gl.glFrameTerminatorGREMEDY)
}
func (gl *lib) FrameZoomSGIX(factor int32) {
	C.gllCall_glFrameZoomSGIX(gl.glFrameZoomSGIX, (C.int32_t)(factor))
}
func (gl *lib) FramebufferDrawBufferEXT(framebuffer uint32, mode uint32) {
	C.gllCall_glFramebufferDrawBufferEXT(gl.glFramebufferDrawBufferEXT, (C.uint32_t)(framebuffer), (C.uint32_t)(mode))
}
func (gl *lib) FramebufferDrawBuffersEXT(framebuffer uint32, n int32, bufs *uint32) {
	C.gllCall_glFramebufferDrawBuffersEXT(gl.glFramebufferDrawBuffersEXT, (C.uint32_t)(framebuffer), (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(bufs)))
}
func (gl *lib) FramebufferFetchBarrierEXT() {
	C.gllCall_glFramebufferFetchBarrierEXT(gl.glFramebufferFetchBarrierEXT)
}
func (gl *lib) FramebufferFetchBarrierQCOM() {
	C.gllCall_glFramebufferFetchBarrierQCOM(gl.glFramebufferFetchBarrierQCOM)
}
func (gl *lib) FramebufferFoveationConfigQCOM(framebuffer uint32, numLayers uint32, focalPointsPerLayer uint32, requestedFeatures uint32, providedFeatures *uint32) {
	C.gllCall_glFramebufferFoveationConfigQCOM(gl.glFramebufferFoveationConfigQCOM, (C.uint32_t)(framebuffer), (C.uint32_t)(numLayers), (C.uint32_t)(focalPointsPerLayer), (C.uint32_t)(requestedFeatures), (*C.uint32_t)(unsafe.Pointer(providedFeatures)))
}
func (gl *lib) FramebufferFoveationParametersQCOM(framebuffer uint32, layer uint32, focalPoint uint32, focalX float32, focalY float32, gainX float32, gainY float32, foveaArea float32) {
	C.gllCall_glFramebufferFoveationParametersQCOM(gl.glFramebufferFoveationParametersQCOM, (C.uint32_t)(framebuffer), (C.uint32_t)(layer), (C.uint32_t)(focalPoint), (C.float)(focalX), (C.float)(focalY), (C.float)(gainX), (C.float)(gainY), (C.float)(foveaArea))
}
func (gl *lib) FramebufferParameteri(target uint32, pname uint32, param int32) {
	C.gllCall_glFramebufferParameteri(gl.glFramebufferParameteri, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) FramebufferPixelLocalStorageSizeEXT(target uint32, size int32) {
	C.gllCall_glFramebufferPixelLocalStorageSizeEXT(gl.glFramebufferPixelLocalStorageSizeEXT, (C.uint32_t)(target), (C.int32_t)(size))
}
func (gl *lib) FramebufferReadBufferEXT(framebuffer uint32, mode uint32) {
	C.gllCall_glFramebufferReadBufferEXT(gl.glFramebufferReadBufferEXT, (C.uint32_t)(framebuffer), (C.uint32_t)(mode))
}
func (gl *lib) FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
	C.gllCall_glFramebufferRenderbuffer(gl.glFramebufferRenderbuffer, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(renderbuffertarget), (C.uint32_t)(renderbuffer))
}
func (gl *lib) FramebufferRenderbufferEXT(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
	C.gllCall_glFramebufferRenderbufferEXT(gl.glFramebufferRenderbufferEXT, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(renderbuffertarget), (C.uint32_t)(renderbuffer))
}
func (gl *lib) FramebufferRenderbufferOES(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
	C.gllCall_glFramebufferRenderbufferOES(gl.glFramebufferRenderbufferOES, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(renderbuffertarget), (C.uint32_t)(renderbuffer))
}
func (gl *lib) FramebufferSampleLocationsfvARB(target uint32, start uint32, count int32, v *float32) {
	C.gllCall_glFramebufferSampleLocationsfvARB(gl.glFramebufferSampleLocationsfvARB, (C.uint32_t)(target), (C.uint32_t)(start), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) FramebufferSampleLocationsfvNV(target uint32, start uint32, count int32, v *float32) {
	C.gllCall_glFramebufferSampleLocationsfvNV(gl.glFramebufferSampleLocationsfvNV, (C.uint32_t)(target), (C.uint32_t)(start), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) FramebufferSamplePositionsfvAMD(target uint32, numsamples uint32, pixelindex uint32, values *float32) {
	C.gllCall_glFramebufferSamplePositionsfvAMD(gl.glFramebufferSamplePositionsfvAMD, (C.uint32_t)(target), (C.uint32_t)(numsamples), (C.uint32_t)(pixelindex), (*C.float)(unsafe.Pointer(values)))
}
func (gl *lib) FramebufferTexture(target uint32, attachment uint32, texture uint32, level int32) {
	C.gllCall_glFramebufferTexture(gl.glFramebufferTexture, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
	C.gllCall_glFramebufferTexture1D(gl.glFramebufferTexture1D, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(textarget), (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) FramebufferTexture1DEXT(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
	C.gllCall_glFramebufferTexture1DEXT(gl.glFramebufferTexture1DEXT, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(textarget), (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
	C.gllCall_glFramebufferTexture2D(gl.glFramebufferTexture2D, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(textarget), (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) FramebufferTexture2DEXT(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
	C.gllCall_glFramebufferTexture2DEXT(gl.glFramebufferTexture2DEXT, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(textarget), (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) FramebufferTexture2DDownsampleIMG(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, xscale int32, yscale int32) {
	C.gllCall_glFramebufferTexture2DDownsampleIMG(gl.glFramebufferTexture2DDownsampleIMG, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(textarget), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xscale), (C.int32_t)(yscale))
}
func (gl *lib) FramebufferTexture2DMultisampleEXT(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, samples int32) {
	C.gllCall_glFramebufferTexture2DMultisampleEXT(gl.glFramebufferTexture2DMultisampleEXT, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(textarget), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(samples))
}
func (gl *lib) FramebufferTexture2DMultisampleIMG(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, samples int32) {
	C.gllCall_glFramebufferTexture2DMultisampleIMG(gl.glFramebufferTexture2DMultisampleIMG, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(textarget), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(samples))
}
func (gl *lib) FramebufferTexture2DOES(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
	C.gllCall_glFramebufferTexture2DOES(gl.glFramebufferTexture2DOES, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(textarget), (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32) {
	C.gllCall_glFramebufferTexture3D(gl.glFramebufferTexture3D, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(textarget), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(zoffset))
}
func (gl *lib) FramebufferTexture3DEXT(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32) {
	C.gllCall_glFramebufferTexture3DEXT(gl.glFramebufferTexture3DEXT, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(textarget), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(zoffset))
}
func (gl *lib) FramebufferTexture3DOES(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32) {
	C.gllCall_glFramebufferTexture3DOES(gl.glFramebufferTexture3DOES, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(textarget), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(zoffset))
}
func (gl *lib) FramebufferTextureARB(target uint32, attachment uint32, texture uint32, level int32) {
	C.gllCall_glFramebufferTextureARB(gl.glFramebufferTextureARB, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) FramebufferTextureEXT(target uint32, attachment uint32, texture uint32, level int32) {
	C.gllCall_glFramebufferTextureEXT(gl.glFramebufferTextureEXT, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) FramebufferTextureFaceARB(target uint32, attachment uint32, texture uint32, level int32, face uint32) {
	C.gllCall_glFramebufferTextureFaceARB(gl.glFramebufferTextureFaceARB, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level), (C.uint32_t)(face))
}
func (gl *lib) FramebufferTextureFaceEXT(target uint32, attachment uint32, texture uint32, level int32, face uint32) {
	C.gllCall_glFramebufferTextureFaceEXT(gl.glFramebufferTextureFaceEXT, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level), (C.uint32_t)(face))
}
func (gl *lib) FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32) {
	C.gllCall_glFramebufferTextureLayer(gl.glFramebufferTextureLayer, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(layer))
}
func (gl *lib) FramebufferTextureLayerARB(target uint32, attachment uint32, texture uint32, level int32, layer int32) {
	C.gllCall_glFramebufferTextureLayerARB(gl.glFramebufferTextureLayerARB, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(layer))
}
func (gl *lib) FramebufferTextureLayerEXT(target uint32, attachment uint32, texture uint32, level int32, layer int32) {
	C.gllCall_glFramebufferTextureLayerEXT(gl.glFramebufferTextureLayerEXT, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(layer))
}
func (gl *lib) FramebufferTextureLayerDownsampleIMG(target uint32, attachment uint32, texture uint32, level int32, layer int32, xscale int32, yscale int32) {
	C.gllCall_glFramebufferTextureLayerDownsampleIMG(gl.glFramebufferTextureLayerDownsampleIMG, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(layer), (C.int32_t)(xscale), (C.int32_t)(yscale))
}
func (gl *lib) FramebufferTextureMultisampleMultiviewOVR(target uint32, attachment uint32, texture uint32, level int32, samples int32, baseViewIndex int32, numViews int32) {
	C.gllCall_glFramebufferTextureMultisampleMultiviewOVR(gl.glFramebufferTextureMultisampleMultiviewOVR, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(samples), (C.int32_t)(baseViewIndex), (C.int32_t)(numViews))
}
func (gl *lib) FramebufferTextureMultiviewOVR(target uint32, attachment uint32, texture uint32, level int32, baseViewIndex int32, numViews int32) {
	C.gllCall_glFramebufferTextureMultiviewOVR(gl.glFramebufferTextureMultiviewOVR, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(baseViewIndex), (C.int32_t)(numViews))
}
func (gl *lib) FramebufferTextureOES(target uint32, attachment uint32, texture uint32, level int32) {
	C.gllCall_glFramebufferTextureOES(gl.glFramebufferTextureOES, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) FreeObjectBufferATI(buffer uint32) {
	C.gllCall_glFreeObjectBufferATI(gl.glFreeObjectBufferATI, (C.uint32_t)(buffer))
}
func (gl *lib) FrontFace(mode uint32) {
	C.gllCall_glFrontFace(gl.glFrontFace, (C.uint32_t)(mode))
}
func (gl *lib) Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) {
	C.gllCall_glFrustum(gl.glFrustum, (C.double)(left), (C.double)(right), (C.double)(bottom), (C.double)(top), (C.double)(zNear), (C.double)(zFar))
}
func (gl *lib) Frustumf(l float32, r float32, b float32, t float32, n float32, f float32) {
	C.gllCall_glFrustumf(gl.glFrustumf, (C.float)(l), (C.float)(r), (C.float)(b), (C.float)(t), (C.float)(n), (C.float)(f))
}
func (gl *lib) FrustumfOES(l float32, r float32, b float32, t float32, n float32, f float32) {
	C.gllCall_glFrustumfOES(gl.glFrustumfOES, (C.float)(l), (C.float)(r), (C.float)(b), (C.float)(t), (C.float)(n), (C.float)(f))
}
func (gl *lib) Frustumx(l int32, r int32, b int32, t int32, n int32, f int32) {
	C.gllCall_glFrustumx(gl.glFrustumx, (C.int32_t)(l), (C.int32_t)(r), (C.int32_t)(b), (C.int32_t)(t), (C.int32_t)(n), (C.int32_t)(f))
}
func (gl *lib) FrustumxOES(l int32, r int32, b int32, t int32, n int32, f int32) {
	C.gllCall_glFrustumxOES(gl.glFrustumxOES, (C.int32_t)(l), (C.int32_t)(r), (C.int32_t)(b), (C.int32_t)(t), (C.int32_t)(n), (C.int32_t)(f))
}
func (gl *lib) GenAsyncMarkersSGIX(range_ int32) uint32 {
	return (uint32)(C.gllCall_glGenAsyncMarkersSGIX(gl.glGenAsyncMarkersSGIX, (C.int32_t)(range_)))
}
func (gl *lib) GenBuffers(n int32, buffers *uint32) {
	C.gllCall_glGenBuffers(gl.glGenBuffers, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(buffers)))
}
func (gl *lib) GenBuffersARB(n int32, buffers *uint32) {
	C.gllCall_glGenBuffersARB(gl.glGenBuffersARB, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(buffers)))
}
func (gl *lib) GenFencesAPPLE(n int32, fences *uint32) {
	C.gllCall_glGenFencesAPPLE(gl.glGenFencesAPPLE, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(fences)))
}
func (gl *lib) GenFencesNV(n int32, fences *uint32) {
	C.gllCall_glGenFencesNV(gl.glGenFencesNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(fences)))
}
func (gl *lib) GenFragmentShadersATI(range_ uint32) uint32 {
	return (uint32)(C.gllCall_glGenFragmentShadersATI(gl.glGenFragmentShadersATI, (C.uint32_t)(range_)))
}
func (gl *lib) GenFramebuffers(n int32, framebuffers *uint32) {
	C.gllCall_glGenFramebuffers(gl.glGenFramebuffers, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(framebuffers)))
}
func (gl *lib) GenFramebuffersEXT(n int32, framebuffers *uint32) {
	C.gllCall_glGenFramebuffersEXT(gl.glGenFramebuffersEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(framebuffers)))
}
func (gl *lib) GenFramebuffersOES(n int32, framebuffers *uint32) {
	C.gllCall_glGenFramebuffersOES(gl.glGenFramebuffersOES, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(framebuffers)))
}
func (gl *lib) GenLists(range_ int32) uint32 {
	return (uint32)(C.gllCall_glGenLists(gl.glGenLists, (C.int32_t)(range_)))
}
func (gl *lib) GenNamesAMD(identifier uint32, num uint32, names *uint32) {
	C.gllCall_glGenNamesAMD(gl.glGenNamesAMD, (C.uint32_t)(identifier), (C.uint32_t)(num), (*C.uint32_t)(unsafe.Pointer(names)))
}
func (gl *lib) GenOcclusionQueriesNV(n int32, ids *uint32) {
	C.gllCall_glGenOcclusionQueriesNV(gl.glGenOcclusionQueriesNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(ids)))
}
func (gl *lib) GenPathsNV(range_ int32) uint32 {
	return (uint32)(C.gllCall_glGenPathsNV(gl.glGenPathsNV, (C.int32_t)(range_)))
}
func (gl *lib) GenPerfMonitorsAMD(n int32, monitors *uint32) {
	C.gllCall_glGenPerfMonitorsAMD(gl.glGenPerfMonitorsAMD, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(monitors)))
}
func (gl *lib) GenProgramPipelines(n int32, pipelines *uint32) {
	C.gllCall_glGenProgramPipelines(gl.glGenProgramPipelines, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(pipelines)))
}
func (gl *lib) GenProgramPipelinesEXT(n int32, pipelines *uint32) {
	C.gllCall_glGenProgramPipelinesEXT(gl.glGenProgramPipelinesEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(pipelines)))
}
func (gl *lib) GenProgramsARB(n int32, programs *uint32) {
	C.gllCall_glGenProgramsARB(gl.glGenProgramsARB, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(programs)))
}
func (gl *lib) GenProgramsNV(n int32, programs *uint32) {
	C.gllCall_glGenProgramsNV(gl.glGenProgramsNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(programs)))
}
func (gl *lib) GenQueries(n int32, ids *uint32) {
	C.gllCall_glGenQueries(gl.glGenQueries, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(ids)))
}
func (gl *lib) GenQueriesARB(n int32, ids *uint32) {
	C.gllCall_glGenQueriesARB(gl.glGenQueriesARB, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(ids)))
}
func (gl *lib) GenQueriesEXT(n int32, ids *uint32) {
	C.gllCall_glGenQueriesEXT(gl.glGenQueriesEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(ids)))
}
func (gl *lib) GenQueryResourceTagNV(n int32, tagIds *int32) {
	C.gllCall_glGenQueryResourceTagNV(gl.glGenQueryResourceTagNV, (C.int32_t)(n), (*C.int32_t)(unsafe.Pointer(tagIds)))
}
func (gl *lib) GenRenderbuffers(n int32, renderbuffers *uint32) {
	C.gllCall_glGenRenderbuffers(gl.glGenRenderbuffers, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(renderbuffers)))
}
func (gl *lib) GenRenderbuffersEXT(n int32, renderbuffers *uint32) {
	C.gllCall_glGenRenderbuffersEXT(gl.glGenRenderbuffersEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(renderbuffers)))
}
func (gl *lib) GenRenderbuffersOES(n int32, renderbuffers *uint32) {
	C.gllCall_glGenRenderbuffersOES(gl.glGenRenderbuffersOES, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(renderbuffers)))
}
func (gl *lib) GenSamplers(count int32, samplers *uint32) {
	C.gllCall_glGenSamplers(gl.glGenSamplers, (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(samplers)))
}
func (gl *lib) GenSemaphoresEXT(n int32, semaphores *uint32) {
	C.gllCall_glGenSemaphoresEXT(gl.glGenSemaphoresEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(semaphores)))
}
func (gl *lib) GenSymbolsEXT(datatype uint32, storagetype uint32, range_ uint32, components uint32) uint32 {
	return (uint32)(C.gllCall_glGenSymbolsEXT(gl.glGenSymbolsEXT, (C.uint32_t)(datatype), (C.uint32_t)(storagetype), (C.uint32_t)(range_), (C.uint32_t)(components)))
}
func (gl *lib) GenTextures(n int32, textures *uint32) {
	C.gllCall_glGenTextures(gl.glGenTextures, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(textures)))
}
func (gl *lib) GenTexturesEXT(n int32, textures *uint32) {
	C.gllCall_glGenTexturesEXT(gl.glGenTexturesEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(textures)))
}
func (gl *lib) GenTransformFeedbacks(n int32, ids *uint32) {
	C.gllCall_glGenTransformFeedbacks(gl.glGenTransformFeedbacks, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(ids)))
}
func (gl *lib) GenTransformFeedbacksNV(n int32, ids *uint32) {
	C.gllCall_glGenTransformFeedbacksNV(gl.glGenTransformFeedbacksNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(ids)))
}
func (gl *lib) GenVertexArrays(n int32, arrays *uint32) {
	C.gllCall_glGenVertexArrays(gl.glGenVertexArrays, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(arrays)))
}
func (gl *lib) GenVertexArraysAPPLE(n int32, arrays *uint32) {
	C.gllCall_glGenVertexArraysAPPLE(gl.glGenVertexArraysAPPLE, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(arrays)))
}
func (gl *lib) GenVertexArraysOES(n int32, arrays *uint32) {
	C.gllCall_glGenVertexArraysOES(gl.glGenVertexArraysOES, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(arrays)))
}
func (gl *lib) GenVertexShadersEXT(range_ uint32) uint32 {
	return (uint32)(C.gllCall_glGenVertexShadersEXT(gl.glGenVertexShadersEXT, (C.uint32_t)(range_)))
}
func (gl *lib) GenerateMipmap(target uint32) {
	C.gllCall_glGenerateMipmap(gl.glGenerateMipmap, (C.uint32_t)(target))
}
func (gl *lib) GenerateMipmapEXT(target uint32) {
	C.gllCall_glGenerateMipmapEXT(gl.glGenerateMipmapEXT, (C.uint32_t)(target))
}
func (gl *lib) GenerateMipmapOES(target uint32) {
	C.gllCall_glGenerateMipmapOES(gl.glGenerateMipmapOES, (C.uint32_t)(target))
}
func (gl *lib) GenerateMultiTexMipmapEXT(texunit uint32, target uint32) {
	C.gllCall_glGenerateMultiTexMipmapEXT(gl.glGenerateMultiTexMipmapEXT, (C.uint32_t)(texunit), (C.uint32_t)(target))
}
func (gl *lib) GenerateTextureMipmap(texture uint32) {
	C.gllCall_glGenerateTextureMipmap(gl.glGenerateTextureMipmap, (C.uint32_t)(texture))
}
func (gl *lib) GenerateTextureMipmapEXT(texture uint32, target uint32) {
	C.gllCall_glGenerateTextureMipmapEXT(gl.glGenerateTextureMipmapEXT, (C.uint32_t)(texture), (C.uint32_t)(target))
}
func (gl *lib) GetActiveAtomicCounterBufferiv(program uint32, bufferIndex uint32, pname uint32, params *int32) {
	C.gllCall_glGetActiveAtomicCounterBufferiv(gl.glGetActiveAtomicCounterBufferiv, (C.uint32_t)(program), (C.uint32_t)(bufferIndex), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8) {
	C.gllCall_glGetActiveAttrib(gl.glGetActiveAttrib, (C.uint32_t)(program), (C.uint32_t)(index), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.int32_t)(unsafe.Pointer(size)), (*C.uint32_t)(unsafe.Pointer(type_)), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) GetActiveAttribARB(programObj GLhandleARB, index uint32, maxLength int32, length *int32, size *int32, type_ *uint32, name *uint8) {
	C.gllCall_glGetActiveAttribARB(gl.glGetActiveAttribARB, (C.GLhandleARB)(programObj), (C.uint32_t)(index), (C.int32_t)(maxLength), (*C.int32_t)(unsafe.Pointer(length)), (*C.int32_t)(unsafe.Pointer(size)), (*C.uint32_t)(unsafe.Pointer(type_)), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) GetActiveSubroutineName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8) {
	C.gllCall_glGetActiveSubroutineName(gl.glGetActiveSubroutineName, (C.uint32_t)(program), (C.uint32_t)(shadertype), (C.uint32_t)(index), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) GetActiveSubroutineUniformName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8) {
	C.gllCall_glGetActiveSubroutineUniformName(gl.glGetActiveSubroutineUniformName, (C.uint32_t)(program), (C.uint32_t)(shadertype), (C.uint32_t)(index), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) GetActiveSubroutineUniformiv(program uint32, shadertype uint32, index uint32, pname uint32, values *int32) {
	C.gllCall_glGetActiveSubroutineUniformiv(gl.glGetActiveSubroutineUniformiv, (C.uint32_t)(program), (C.uint32_t)(shadertype), (C.uint32_t)(index), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(values)))
}
func (gl *lib) GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8) {
	C.gllCall_glGetActiveUniform(gl.glGetActiveUniform, (C.uint32_t)(program), (C.uint32_t)(index), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.int32_t)(unsafe.Pointer(size)), (*C.uint32_t)(unsafe.Pointer(type_)), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) GetActiveUniformARB(programObj GLhandleARB, index uint32, maxLength int32, length *int32, size *int32, type_ *uint32, name *uint8) {
	C.gllCall_glGetActiveUniformARB(gl.glGetActiveUniformARB, (C.GLhandleARB)(programObj), (C.uint32_t)(index), (C.int32_t)(maxLength), (*C.int32_t)(unsafe.Pointer(length)), (*C.int32_t)(unsafe.Pointer(size)), (*C.uint32_t)(unsafe.Pointer(type_)), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *uint8) {
	C.gllCall_glGetActiveUniformBlockName(gl.glGetActiveUniformBlockName, (C.uint32_t)(program), (C.uint32_t)(uniformBlockIndex), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(uniformBlockName)))
}
func (gl *lib) GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32) {
	C.gllCall_glGetActiveUniformBlockiv(gl.glGetActiveUniformBlockiv, (C.uint32_t)(program), (C.uint32_t)(uniformBlockIndex), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *uint8) {
	C.gllCall_glGetActiveUniformName(gl.glGetActiveUniformName, (C.uint32_t)(program), (C.uint32_t)(uniformIndex), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(uniformName)))
}
func (gl *lib) GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32) {
	C.gllCall_glGetActiveUniformsiv(gl.glGetActiveUniformsiv, (C.uint32_t)(program), (C.int32_t)(uniformCount), (*C.uint32_t)(unsafe.Pointer(uniformIndices)), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetActiveVaryingNV(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8) {
	C.gllCall_glGetActiveVaryingNV(gl.glGetActiveVaryingNV, (C.uint32_t)(program), (C.uint32_t)(index), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.int32_t)(unsafe.Pointer(size)), (*C.uint32_t)(unsafe.Pointer(type_)), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) GetArrayObjectfvATI(array uint32, pname uint32, params *float32) {
	C.gllCall_glGetArrayObjectfvATI(gl.glGetArrayObjectfvATI, (C.uint32_t)(array), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetArrayObjectivATI(array uint32, pname uint32, params *int32) {
	C.gllCall_glGetArrayObjectivATI(gl.glGetArrayObjectivATI, (C.uint32_t)(array), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetAttachedObjectsARB(containerObj GLhandleARB, maxCount int32, count *int32, obj *GLhandleARB) {
	C.gllCall_glGetAttachedObjectsARB(gl.glGetAttachedObjectsARB, (C.GLhandleARB)(containerObj), (C.int32_t)(maxCount), (*C.int32_t)(unsafe.Pointer(count)), (*C.GLhandleARB)(unsafe.Pointer(obj)))
}
func (gl *lib) GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32) {
	C.gllCall_glGetAttachedShaders(gl.glGetAttachedShaders, (C.uint32_t)(program), (C.int32_t)(maxCount), (*C.int32_t)(unsafe.Pointer(count)), (*C.uint32_t)(unsafe.Pointer(shaders)))
}
func (gl *lib) GetAttribLocation(program uint32, name *uint8) int32 {
	return (int32)(C.gllCall_glGetAttribLocation(gl.glGetAttribLocation, (C.uint32_t)(program), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetAttribLocationARB(programObj GLhandleARB, name *uint8) int32 {
	return (int32)(C.gllCall_glGetAttribLocationARB(gl.glGetAttribLocationARB, (C.GLhandleARB)(programObj), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetBooleanIndexedvEXT(target uint32, index uint32, data *bool) {
	C.gllCall_glGetBooleanIndexedvEXT(gl.glGetBooleanIndexedvEXT, (C.uint32_t)(target), (C.uint32_t)(index), (*C._Bool)(unsafe.Pointer(data)))
}
func (gl *lib) GetBooleani_v(target uint32, index uint32, data *bool) {
	C.gllCall_glGetBooleani_v(gl.glGetBooleani_v, (C.uint32_t)(target), (C.uint32_t)(index), (*C._Bool)(unsafe.Pointer(data)))
}
func (gl *lib) GetBooleanv(pname uint32, data *bool) {
	C.gllCall_glGetBooleanv(gl.glGetBooleanv, (C.uint32_t)(pname), (*C._Bool)(unsafe.Pointer(data)))
}
func (gl *lib) GetBufferParameteri64v(target uint32, pname uint32, params *int64) {
	C.gllCall_glGetBufferParameteri64v(gl.glGetBufferParameteri64v, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetBufferParameteriv(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetBufferParameteriv(gl.glGetBufferParameteriv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetBufferParameterivARB(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetBufferParameterivARB(gl.glGetBufferParameterivARB, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetBufferParameterui64vNV(target uint32, pname uint32, params *uint64) {
	C.gllCall_glGetBufferParameterui64vNV(gl.glGetBufferParameterui64vNV, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.uint64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer) {
	C.gllCall_glGetBufferPointerv(gl.glGetBufferPointerv, (C.uint32_t)(target), (C.uint32_t)(pname), (*unsafe.Pointer)(unsafe.Pointer(params)))
}
func (gl *lib) GetBufferPointervARB(target uint32, pname uint32, params *unsafe.Pointer) {
	C.gllCall_glGetBufferPointervARB(gl.glGetBufferPointervARB, (C.uint32_t)(target), (C.uint32_t)(pname), (*unsafe.Pointer)(unsafe.Pointer(params)))
}
func (gl *lib) GetBufferPointervOES(target uint32, pname uint32, params *unsafe.Pointer) {
	C.gllCall_glGetBufferPointervOES(gl.glGetBufferPointervOES, (C.uint32_t)(target), (C.uint32_t)(pname), (*unsafe.Pointer)(unsafe.Pointer(params)))
}
func (gl *lib) GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer) {
	C.gllCall_glGetBufferSubData(gl.glGetBufferSubData, (C.uint32_t)(target), (C.intptr_t)(offset), (C.ssize_t)(size), (unsafe.Pointer)(data))
}
func (gl *lib) GetBufferSubDataARB(target uint32, offset uintptr, size int, data unsafe.Pointer) {
	C.gllCall_glGetBufferSubDataARB(gl.glGetBufferSubDataARB, (C.uint32_t)(target), (C.intptr_t)(offset), (C.ssize_t)(size), (unsafe.Pointer)(data))
}
func (gl *lib) GetClipPlane(plane uint32, equation *float64) {
	C.gllCall_glGetClipPlane(gl.glGetClipPlane, (C.uint32_t)(plane), (*C.double)(unsafe.Pointer(equation)))
}
func (gl *lib) GetClipPlanef(plane uint32, equation *float32) {
	C.gllCall_glGetClipPlanef(gl.glGetClipPlanef, (C.uint32_t)(plane), (*C.float)(unsafe.Pointer(equation)))
}
func (gl *lib) GetClipPlanefOES(plane uint32, equation *float32) {
	C.gllCall_glGetClipPlanefOES(gl.glGetClipPlanefOES, (C.uint32_t)(plane), (*C.float)(unsafe.Pointer(equation)))
}
func (gl *lib) GetClipPlanex(plane uint32, equation *int32) {
	C.gllCall_glGetClipPlanex(gl.glGetClipPlanex, (C.uint32_t)(plane), (*C.int32_t)(unsafe.Pointer(equation)))
}
func (gl *lib) GetClipPlanexOES(plane uint32, equation *int32) {
	C.gllCall_glGetClipPlanexOES(gl.glGetClipPlanexOES, (C.uint32_t)(plane), (*C.int32_t)(unsafe.Pointer(equation)))
}
func (gl *lib) GetColorTable(target uint32, format uint32, type_ uint32, table unsafe.Pointer) {
	C.gllCall_glGetColorTable(gl.glGetColorTable, (C.uint32_t)(target), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(table))
}
func (gl *lib) GetColorTableEXT(target uint32, format uint32, type_ uint32, data unsafe.Pointer) {
	C.gllCall_glGetColorTableEXT(gl.glGetColorTableEXT, (C.uint32_t)(target), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(data))
}
func (gl *lib) GetColorTableParameterfv(target uint32, pname uint32, params *float32) {
	C.gllCall_glGetColorTableParameterfv(gl.glGetColorTableParameterfv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetColorTableParameterfvEXT(target uint32, pname uint32, params *float32) {
	C.gllCall_glGetColorTableParameterfvEXT(gl.glGetColorTableParameterfvEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetColorTableParameterfvSGI(target uint32, pname uint32, params *float32) {
	C.gllCall_glGetColorTableParameterfvSGI(gl.glGetColorTableParameterfvSGI, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetColorTableParameteriv(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetColorTableParameteriv(gl.glGetColorTableParameteriv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetColorTableParameterivEXT(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetColorTableParameterivEXT(gl.glGetColorTableParameterivEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetColorTableParameterivSGI(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetColorTableParameterivSGI(gl.glGetColorTableParameterivSGI, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetColorTableSGI(target uint32, format uint32, type_ uint32, table unsafe.Pointer) {
	C.gllCall_glGetColorTableSGI(gl.glGetColorTableSGI, (C.uint32_t)(target), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(table))
}
func (gl *lib) GetCombinerInputParameterfvNV(stage uint32, portion uint32, variable uint32, pname uint32, params *float32) {
	C.gllCall_glGetCombinerInputParameterfvNV(gl.glGetCombinerInputParameterfvNV, (C.uint32_t)(stage), (C.uint32_t)(portion), (C.uint32_t)(variable), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetCombinerInputParameterivNV(stage uint32, portion uint32, variable uint32, pname uint32, params *int32) {
	C.gllCall_glGetCombinerInputParameterivNV(gl.glGetCombinerInputParameterivNV, (C.uint32_t)(stage), (C.uint32_t)(portion), (C.uint32_t)(variable), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetCombinerOutputParameterfvNV(stage uint32, portion uint32, pname uint32, params *float32) {
	C.gllCall_glGetCombinerOutputParameterfvNV(gl.glGetCombinerOutputParameterfvNV, (C.uint32_t)(stage), (C.uint32_t)(portion), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetCombinerOutputParameterivNV(stage uint32, portion uint32, pname uint32, params *int32) {
	C.gllCall_glGetCombinerOutputParameterivNV(gl.glGetCombinerOutputParameterivNV, (C.uint32_t)(stage), (C.uint32_t)(portion), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetCombinerStageParameterfvNV(stage uint32, pname uint32, params *float32) {
	C.gllCall_glGetCombinerStageParameterfvNV(gl.glGetCombinerStageParameterfvNV, (C.uint32_t)(stage), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetCommandHeaderNV(tokenID uint32, size uint32) uint32 {
	return (uint32)(C.gllCall_glGetCommandHeaderNV(gl.glGetCommandHeaderNV, (C.uint32_t)(tokenID), (C.uint32_t)(size)))
}
func (gl *lib) GetCompressedMultiTexImageEXT(texunit uint32, target uint32, lod int32, img unsafe.Pointer) {
	C.gllCall_glGetCompressedMultiTexImageEXT(gl.glGetCompressedMultiTexImageEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(lod), (unsafe.Pointer)(img))
}
func (gl *lib) GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer) {
	C.gllCall_glGetCompressedTexImage(gl.glGetCompressedTexImage, (C.uint32_t)(target), (C.int32_t)(level), (unsafe.Pointer)(img))
}
func (gl *lib) GetCompressedTexImageARB(target uint32, level int32, img unsafe.Pointer) {
	C.gllCall_glGetCompressedTexImageARB(gl.glGetCompressedTexImageARB, (C.uint32_t)(target), (C.int32_t)(level), (unsafe.Pointer)(img))
}
func (gl *lib) GetCompressedTextureImage(texture uint32, level int32, bufSize int32, pixels unsafe.Pointer) {
	C.gllCall_glGetCompressedTextureImage(gl.glGetCompressedTextureImage, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(bufSize), (unsafe.Pointer)(pixels))
}
func (gl *lib) GetCompressedTextureImageEXT(texture uint32, target uint32, lod int32, img unsafe.Pointer) {
	C.gllCall_glGetCompressedTextureImageEXT(gl.glGetCompressedTextureImageEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(lod), (unsafe.Pointer)(img))
}
func (gl *lib) GetCompressedTextureSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, bufSize int32, pixels unsafe.Pointer) {
	C.gllCall_glGetCompressedTextureSubImage(gl.glGetCompressedTextureSubImage, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(bufSize), (unsafe.Pointer)(pixels))
}
func (gl *lib) GetConvolutionFilter(target uint32, format uint32, type_ uint32, image unsafe.Pointer) {
	C.gllCall_glGetConvolutionFilter(gl.glGetConvolutionFilter, (C.uint32_t)(target), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(image))
}
func (gl *lib) GetConvolutionFilterEXT(target uint32, format uint32, type_ uint32, image unsafe.Pointer) {
	C.gllCall_glGetConvolutionFilterEXT(gl.glGetConvolutionFilterEXT, (C.uint32_t)(target), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(image))
}
func (gl *lib) GetConvolutionParameterfv(target uint32, pname uint32, params *float32) {
	C.gllCall_glGetConvolutionParameterfv(gl.glGetConvolutionParameterfv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetConvolutionParameterfvEXT(target uint32, pname uint32, params *float32) {
	C.gllCall_glGetConvolutionParameterfvEXT(gl.glGetConvolutionParameterfvEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetConvolutionParameteriv(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetConvolutionParameteriv(gl.glGetConvolutionParameteriv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetConvolutionParameterivEXT(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetConvolutionParameterivEXT(gl.glGetConvolutionParameterivEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetConvolutionParameterxvOES(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetConvolutionParameterxvOES(gl.glGetConvolutionParameterxvOES, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetCoverageModulationTableNV(bufSize int32, v *float32) {
	C.gllCall_glGetCoverageModulationTableNV(gl.glGetCoverageModulationTableNV, (C.int32_t)(bufSize), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) GetDebugMessageLog(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32 {
	return (uint32)(C.gllCall_glGetDebugMessageLog(gl.glGetDebugMessageLog, (C.uint32_t)(count), (C.int32_t)(bufSize), (*C.uint32_t)(unsafe.Pointer(sources)), (*C.uint32_t)(unsafe.Pointer(types)), (*C.uint32_t)(unsafe.Pointer(ids)), (*C.uint32_t)(unsafe.Pointer(severities)), (*C.int32_t)(unsafe.Pointer(lengths)), (*C.uint8_t)(unsafe.Pointer(messageLog))))
}
func (gl *lib) GetDebugMessageLogAMD(count uint32, bufSize int32, categories *uint32, severities *uint32, ids *uint32, lengths *int32, message *uint8) uint32 {
	return (uint32)(C.gllCall_glGetDebugMessageLogAMD(gl.glGetDebugMessageLogAMD, (C.uint32_t)(count), (C.int32_t)(bufSize), (*C.uint32_t)(unsafe.Pointer(categories)), (*C.uint32_t)(unsafe.Pointer(severities)), (*C.uint32_t)(unsafe.Pointer(ids)), (*C.int32_t)(unsafe.Pointer(lengths)), (*C.uint8_t)(unsafe.Pointer(message))))
}
func (gl *lib) GetDebugMessageLogARB(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32 {
	return (uint32)(C.gllCall_glGetDebugMessageLogARB(gl.glGetDebugMessageLogARB, (C.uint32_t)(count), (C.int32_t)(bufSize), (*C.uint32_t)(unsafe.Pointer(sources)), (*C.uint32_t)(unsafe.Pointer(types)), (*C.uint32_t)(unsafe.Pointer(ids)), (*C.uint32_t)(unsafe.Pointer(severities)), (*C.int32_t)(unsafe.Pointer(lengths)), (*C.uint8_t)(unsafe.Pointer(messageLog))))
}
func (gl *lib) GetDebugMessageLogKHR(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32 {
	return (uint32)(C.gllCall_glGetDebugMessageLogKHR(gl.glGetDebugMessageLogKHR, (C.uint32_t)(count), (C.int32_t)(bufSize), (*C.uint32_t)(unsafe.Pointer(sources)), (*C.uint32_t)(unsafe.Pointer(types)), (*C.uint32_t)(unsafe.Pointer(ids)), (*C.uint32_t)(unsafe.Pointer(severities)), (*C.int32_t)(unsafe.Pointer(lengths)), (*C.uint8_t)(unsafe.Pointer(messageLog))))
}
func (gl *lib) GetDetailTexFuncSGIS(target uint32, points *float32) {
	C.gllCall_glGetDetailTexFuncSGIS(gl.glGetDetailTexFuncSGIS, (C.uint32_t)(target), (*C.float)(unsafe.Pointer(points)))
}
func (gl *lib) GetDoubleIndexedvEXT(target uint32, index uint32, data *float64) {
	C.gllCall_glGetDoubleIndexedvEXT(gl.glGetDoubleIndexedvEXT, (C.uint32_t)(target), (C.uint32_t)(index), (*C.double)(unsafe.Pointer(data)))
}
func (gl *lib) GetDoublei_v(target uint32, index uint32, data *float64) {
	C.gllCall_glGetDoublei_v(gl.glGetDoublei_v, (C.uint32_t)(target), (C.uint32_t)(index), (*C.double)(unsafe.Pointer(data)))
}
func (gl *lib) GetDoublei_vEXT(pname uint32, index uint32, params *float64) {
	C.gllCall_glGetDoublei_vEXT(gl.glGetDoublei_vEXT, (C.uint32_t)(pname), (C.uint32_t)(index), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetDoublev(pname uint32, data *float64) {
	C.gllCall_glGetDoublev(gl.glGetDoublev, (C.uint32_t)(pname), (*C.double)(unsafe.Pointer(data)))
}
func (gl *lib) GetDriverControlStringQCOM(driverControl uint32, bufSize int32, length *int32, driverControlString *uint8) {
	C.gllCall_glGetDriverControlStringQCOM(gl.glGetDriverControlStringQCOM, (C.uint32_t)(driverControl), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(driverControlString)))
}
func (gl *lib) GetDriverControlsQCOM(num *int32, size int32, driverControls *uint32) {
	C.gllCall_glGetDriverControlsQCOM(gl.glGetDriverControlsQCOM, (*C.int32_t)(unsafe.Pointer(num)), (C.int32_t)(size), (*C.uint32_t)(unsafe.Pointer(driverControls)))
}
func (gl *lib) GetError() uint32 {
	return (uint32)(C.gllCall_glGetError(gl.glGetError))
}
func (gl *lib) GetFenceivNV(fence uint32, pname uint32, params *int32) {
	C.gllCall_glGetFenceivNV(gl.glGetFenceivNV, (C.uint32_t)(fence), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetFinalCombinerInputParameterfvNV(variable uint32, pname uint32, params *float32) {
	C.gllCall_glGetFinalCombinerInputParameterfvNV(gl.glGetFinalCombinerInputParameterfvNV, (C.uint32_t)(variable), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetFinalCombinerInputParameterivNV(variable uint32, pname uint32, params *int32) {
	C.gllCall_glGetFinalCombinerInputParameterivNV(gl.glGetFinalCombinerInputParameterivNV, (C.uint32_t)(variable), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetFirstPerfQueryIdINTEL(queryId *uint32) {
	C.gllCall_glGetFirstPerfQueryIdINTEL(gl.glGetFirstPerfQueryIdINTEL, (*C.uint32_t)(unsafe.Pointer(queryId)))
}
func (gl *lib) GetFixedv(pname uint32, params *int32) {
	C.gllCall_glGetFixedv(gl.glGetFixedv, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetFixedvOES(pname uint32, params *int32) {
	C.gllCall_glGetFixedvOES(gl.glGetFixedvOES, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetFloatIndexedvEXT(target uint32, index uint32, data *float32) {
	C.gllCall_glGetFloatIndexedvEXT(gl.glGetFloatIndexedvEXT, (C.uint32_t)(target), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(data)))
}
func (gl *lib) GetFloati_v(target uint32, index uint32, data *float32) {
	C.gllCall_glGetFloati_v(gl.glGetFloati_v, (C.uint32_t)(target), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(data)))
}
func (gl *lib) GetFloati_vEXT(pname uint32, index uint32, params *float32) {
	C.gllCall_glGetFloati_vEXT(gl.glGetFloati_vEXT, (C.uint32_t)(pname), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetFloati_vNV(target uint32, index uint32, data *float32) {
	C.gllCall_glGetFloati_vNV(gl.glGetFloati_vNV, (C.uint32_t)(target), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(data)))
}
func (gl *lib) GetFloati_vOES(target uint32, index uint32, data *float32) {
	C.gllCall_glGetFloati_vOES(gl.glGetFloati_vOES, (C.uint32_t)(target), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(data)))
}
func (gl *lib) GetFloatv(pname uint32, data *float32) {
	C.gllCall_glGetFloatv(gl.glGetFloatv, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(data)))
}
func (gl *lib) GetFogFuncSGIS(points *float32) {
	C.gllCall_glGetFogFuncSGIS(gl.glGetFogFuncSGIS, (*C.float)(unsafe.Pointer(points)))
}
func (gl *lib) GetFragDataIndex(program uint32, name *uint8) int32 {
	return (int32)(C.gllCall_glGetFragDataIndex(gl.glGetFragDataIndex, (C.uint32_t)(program), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetFragDataIndexEXT(program uint32, name *uint8) int32 {
	return (int32)(C.gllCall_glGetFragDataIndexEXT(gl.glGetFragDataIndexEXT, (C.uint32_t)(program), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetFragDataLocation(program uint32, name *uint8) int32 {
	return (int32)(C.gllCall_glGetFragDataLocation(gl.glGetFragDataLocation, (C.uint32_t)(program), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetFragDataLocationEXT(program uint32, name *uint8) int32 {
	return (int32)(C.gllCall_glGetFragDataLocationEXT(gl.glGetFragDataLocationEXT, (C.uint32_t)(program), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetFragmentLightfvSGIX(light uint32, pname uint32, params *float32) {
	C.gllCall_glGetFragmentLightfvSGIX(gl.glGetFragmentLightfvSGIX, (C.uint32_t)(light), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetFragmentLightivSGIX(light uint32, pname uint32, params *int32) {
	C.gllCall_glGetFragmentLightivSGIX(gl.glGetFragmentLightivSGIX, (C.uint32_t)(light), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetFragmentMaterialfvSGIX(face uint32, pname uint32, params *float32) {
	C.gllCall_glGetFragmentMaterialfvSGIX(gl.glGetFragmentMaterialfvSGIX, (C.uint32_t)(face), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetFragmentMaterialivSGIX(face uint32, pname uint32, params *int32) {
	C.gllCall_glGetFragmentMaterialivSGIX(gl.glGetFragmentMaterialivSGIX, (C.uint32_t)(face), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32) {
	C.gllCall_glGetFramebufferAttachmentParameteriv(gl.glGetFramebufferAttachmentParameteriv, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetFramebufferAttachmentParameterivEXT(target uint32, attachment uint32, pname uint32, params *int32) {
	C.gllCall_glGetFramebufferAttachmentParameterivEXT(gl.glGetFramebufferAttachmentParameterivEXT, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetFramebufferAttachmentParameterivOES(target uint32, attachment uint32, pname uint32, params *int32) {
	C.gllCall_glGetFramebufferAttachmentParameterivOES(gl.glGetFramebufferAttachmentParameterivOES, (C.uint32_t)(target), (C.uint32_t)(attachment), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetFramebufferParameterfvAMD(target uint32, pname uint32, numsamples uint32, pixelindex uint32, size int32, values *float32) {
	C.gllCall_glGetFramebufferParameterfvAMD(gl.glGetFramebufferParameterfvAMD, (C.uint32_t)(target), (C.uint32_t)(pname), (C.uint32_t)(numsamples), (C.uint32_t)(pixelindex), (C.int32_t)(size), (*C.float)(unsafe.Pointer(values)))
}
func (gl *lib) GetFramebufferParameteriv(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetFramebufferParameteriv(gl.glGetFramebufferParameteriv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetFramebufferParameterivEXT(framebuffer uint32, pname uint32, params *int32) {
	C.gllCall_glGetFramebufferParameterivEXT(gl.glGetFramebufferParameterivEXT, (C.uint32_t)(framebuffer), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetFramebufferPixelLocalStorageSizeEXT(target uint32) int32 {
	return (int32)(C.gllCall_glGetFramebufferPixelLocalStorageSizeEXT(gl.glGetFramebufferPixelLocalStorageSizeEXT, (C.uint32_t)(target)))
}
func (gl *lib) GetGraphicsResetStatus() uint32 {
	return (uint32)(C.gllCall_glGetGraphicsResetStatus(gl.glGetGraphicsResetStatus))
}
func (gl *lib) GetGraphicsResetStatusARB() uint32 {
	return (uint32)(C.gllCall_glGetGraphicsResetStatusARB(gl.glGetGraphicsResetStatusARB))
}
func (gl *lib) GetGraphicsResetStatusEXT() uint32 {
	return (uint32)(C.gllCall_glGetGraphicsResetStatusEXT(gl.glGetGraphicsResetStatusEXT))
}
func (gl *lib) GetGraphicsResetStatusKHR() uint32 {
	return (uint32)(C.gllCall_glGetGraphicsResetStatusKHR(gl.glGetGraphicsResetStatusKHR))
}
func (gl *lib) GetHandleARB(pname uint32) GLhandleARB {
	return (GLhandleARB)(C.gllCall_glGetHandleARB(gl.glGetHandleARB, (C.uint32_t)(pname)))
}
func (gl *lib) GetHistogram(target uint32, reset bool, format uint32, type_ uint32, values unsafe.Pointer) {
	C.gllCall_glGetHistogram(gl.glGetHistogram, (C.uint32_t)(target), (C._Bool)(reset), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(values))
}
func (gl *lib) GetHistogramEXT(target uint32, reset bool, format uint32, type_ uint32, values unsafe.Pointer) {
	C.gllCall_glGetHistogramEXT(gl.glGetHistogramEXT, (C.uint32_t)(target), (C._Bool)(reset), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(values))
}
func (gl *lib) GetHistogramParameterfv(target uint32, pname uint32, params *float32) {
	C.gllCall_glGetHistogramParameterfv(gl.glGetHistogramParameterfv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetHistogramParameterfvEXT(target uint32, pname uint32, params *float32) {
	C.gllCall_glGetHistogramParameterfvEXT(gl.glGetHistogramParameterfvEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetHistogramParameteriv(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetHistogramParameteriv(gl.glGetHistogramParameteriv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetHistogramParameterivEXT(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetHistogramParameterivEXT(gl.glGetHistogramParameterivEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetHistogramParameterxvOES(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetHistogramParameterxvOES(gl.glGetHistogramParameterxvOES, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetImageHandleARB(texture uint32, level int32, layered bool, layer int32, format uint32) uint64 {
	return (uint64)(C.gllCall_glGetImageHandleARB(gl.glGetImageHandleARB, (C.uint32_t)(texture), (C.int32_t)(level), (C._Bool)(layered), (C.int32_t)(layer), (C.uint32_t)(format)))
}
func (gl *lib) GetImageHandleNV(texture uint32, level int32, layered bool, layer int32, format uint32) uint64 {
	return (uint64)(C.gllCall_glGetImageHandleNV(gl.glGetImageHandleNV, (C.uint32_t)(texture), (C.int32_t)(level), (C._Bool)(layered), (C.int32_t)(layer), (C.uint32_t)(format)))
}
func (gl *lib) GetImageTransformParameterfvHP(target uint32, pname uint32, params *float32) {
	C.gllCall_glGetImageTransformParameterfvHP(gl.glGetImageTransformParameterfvHP, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetImageTransformParameterivHP(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetImageTransformParameterivHP(gl.glGetImageTransformParameterivHP, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetInfoLogARB(obj GLhandleARB, maxLength int32, length *int32, infoLog *uint8) {
	C.gllCall_glGetInfoLogARB(gl.glGetInfoLogARB, (C.GLhandleARB)(obj), (C.int32_t)(maxLength), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(infoLog)))
}
func (gl *lib) GetInstrumentsSGIX() int32 {
	return (int32)(C.gllCall_glGetInstrumentsSGIX(gl.glGetInstrumentsSGIX))
}
func (gl *lib) GetInteger64i_v(target uint32, index uint32, data *int64) {
	C.gllCall_glGetInteger64i_v(gl.glGetInteger64i_v, (C.uint32_t)(target), (C.uint32_t)(index), (*C.int64_t)(unsafe.Pointer(data)))
}
func (gl *lib) GetInteger64v(pname uint32, data *int64) {
	C.gllCall_glGetInteger64v(gl.glGetInteger64v, (C.uint32_t)(pname), (*C.int64_t)(unsafe.Pointer(data)))
}
func (gl *lib) GetInteger64vAPPLE(pname uint32, params *int64) {
	C.gllCall_glGetInteger64vAPPLE(gl.glGetInteger64vAPPLE, (C.uint32_t)(pname), (*C.int64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetInteger64vEXT(pname uint32, data *int64) {
	C.gllCall_glGetInteger64vEXT(gl.glGetInteger64vEXT, (C.uint32_t)(pname), (*C.int64_t)(unsafe.Pointer(data)))
}
func (gl *lib) GetIntegerIndexedvEXT(target uint32, index uint32, data *int32) {
	C.gllCall_glGetIntegerIndexedvEXT(gl.glGetIntegerIndexedvEXT, (C.uint32_t)(target), (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(data)))
}
func (gl *lib) GetIntegeri_v(target uint32, index uint32, data *int32) {
	C.gllCall_glGetIntegeri_v(gl.glGetIntegeri_v, (C.uint32_t)(target), (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(data)))
}
func (gl *lib) GetIntegeri_vEXT(target uint32, index uint32, data *int32) {
	C.gllCall_glGetIntegeri_vEXT(gl.glGetIntegeri_vEXT, (C.uint32_t)(target), (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(data)))
}
func (gl *lib) GetIntegerui64i_vNV(value uint32, index uint32, result *uint64) {
	C.gllCall_glGetIntegerui64i_vNV(gl.glGetIntegerui64i_vNV, (C.uint32_t)(value), (C.uint32_t)(index), (*C.uint64_t)(unsafe.Pointer(result)))
}
func (gl *lib) GetIntegerui64vNV(value uint32, result *uint64) {
	C.gllCall_glGetIntegerui64vNV(gl.glGetIntegerui64vNV, (C.uint32_t)(value), (*C.uint64_t)(unsafe.Pointer(result)))
}
func (gl *lib) GetIntegerv(pname uint32, data *int32) {
	C.gllCall_glGetIntegerv(gl.glGetIntegerv, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(data)))
}
func (gl *lib) GetInternalformatSampleivNV(target uint32, internalformat uint32, samples int32, pname uint32, count int32, params *int32) {
	C.gllCall_glGetInternalformatSampleivNV(gl.glGetInternalformatSampleivNV, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(samples), (C.uint32_t)(pname), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetInternalformati64v(target uint32, internalformat uint32, pname uint32, count int32, params *int64) {
	C.gllCall_glGetInternalformati64v(gl.glGetInternalformati64v, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.uint32_t)(pname), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetInternalformativ(target uint32, internalformat uint32, pname uint32, count int32, params *int32) {
	C.gllCall_glGetInternalformativ(gl.glGetInternalformativ, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.uint32_t)(pname), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetInvariantBooleanvEXT(id uint32, value uint32, data *bool) {
	C.gllCall_glGetInvariantBooleanvEXT(gl.glGetInvariantBooleanvEXT, (C.uint32_t)(id), (C.uint32_t)(value), (*C._Bool)(unsafe.Pointer(data)))
}
func (gl *lib) GetInvariantFloatvEXT(id uint32, value uint32, data *float32) {
	C.gllCall_glGetInvariantFloatvEXT(gl.glGetInvariantFloatvEXT, (C.uint32_t)(id), (C.uint32_t)(value), (*C.float)(unsafe.Pointer(data)))
}
func (gl *lib) GetInvariantIntegervEXT(id uint32, value uint32, data *int32) {
	C.gllCall_glGetInvariantIntegervEXT(gl.glGetInvariantIntegervEXT, (C.uint32_t)(id), (C.uint32_t)(value), (*C.int32_t)(unsafe.Pointer(data)))
}
func (gl *lib) GetLightfv(light uint32, pname uint32, params *float32) {
	C.gllCall_glGetLightfv(gl.glGetLightfv, (C.uint32_t)(light), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetLightiv(light uint32, pname uint32, params *int32) {
	C.gllCall_glGetLightiv(gl.glGetLightiv, (C.uint32_t)(light), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetLightxOES(light uint32, pname uint32, params *int32) {
	C.gllCall_glGetLightxOES(gl.glGetLightxOES, (C.uint32_t)(light), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetLightxv(light uint32, pname uint32, params *int32) {
	C.gllCall_glGetLightxv(gl.glGetLightxv, (C.uint32_t)(light), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetLightxvOES(light uint32, pname uint32, params *int32) {
	C.gllCall_glGetLightxvOES(gl.glGetLightxvOES, (C.uint32_t)(light), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetListParameterfvSGIX(list uint32, pname uint32, params *float32) {
	C.gllCall_glGetListParameterfvSGIX(gl.glGetListParameterfvSGIX, (C.uint32_t)(list), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetListParameterivSGIX(list uint32, pname uint32, params *int32) {
	C.gllCall_glGetListParameterivSGIX(gl.glGetListParameterivSGIX, (C.uint32_t)(list), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetLocalConstantBooleanvEXT(id uint32, value uint32, data *bool) {
	C.gllCall_glGetLocalConstantBooleanvEXT(gl.glGetLocalConstantBooleanvEXT, (C.uint32_t)(id), (C.uint32_t)(value), (*C._Bool)(unsafe.Pointer(data)))
}
func (gl *lib) GetLocalConstantFloatvEXT(id uint32, value uint32, data *float32) {
	C.gllCall_glGetLocalConstantFloatvEXT(gl.glGetLocalConstantFloatvEXT, (C.uint32_t)(id), (C.uint32_t)(value), (*C.float)(unsafe.Pointer(data)))
}
func (gl *lib) GetLocalConstantIntegervEXT(id uint32, value uint32, data *int32) {
	C.gllCall_glGetLocalConstantIntegervEXT(gl.glGetLocalConstantIntegervEXT, (C.uint32_t)(id), (C.uint32_t)(value), (*C.int32_t)(unsafe.Pointer(data)))
}
func (gl *lib) GetMapAttribParameterfvNV(target uint32, index uint32, pname uint32, params *float32) {
	C.gllCall_glGetMapAttribParameterfvNV(gl.glGetMapAttribParameterfvNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetMapAttribParameterivNV(target uint32, index uint32, pname uint32, params *int32) {
	C.gllCall_glGetMapAttribParameterivNV(gl.glGetMapAttribParameterivNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMapControlPointsNV(target uint32, index uint32, type_ uint32, ustride int32, vstride int32, packed bool, points unsafe.Pointer) {
	C.gllCall_glGetMapControlPointsNV(gl.glGetMapControlPointsNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(type_), (C.int32_t)(ustride), (C.int32_t)(vstride), (C._Bool)(packed), (unsafe.Pointer)(points))
}
func (gl *lib) GetMapParameterfvNV(target uint32, pname uint32, params *float32) {
	C.gllCall_glGetMapParameterfvNV(gl.glGetMapParameterfvNV, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetMapParameterivNV(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetMapParameterivNV(gl.glGetMapParameterivNV, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMapdv(target uint32, query uint32, v *float64) {
	C.gllCall_glGetMapdv(gl.glGetMapdv, (C.uint32_t)(target), (C.uint32_t)(query), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) GetMapfv(target uint32, query uint32, v *float32) {
	C.gllCall_glGetMapfv(gl.glGetMapfv, (C.uint32_t)(target), (C.uint32_t)(query), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) GetMapiv(target uint32, query uint32, v *int32) {
	C.gllCall_glGetMapiv(gl.glGetMapiv, (C.uint32_t)(target), (C.uint32_t)(query), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) GetMapxvOES(target uint32, query uint32, v *int32) {
	C.gllCall_glGetMapxvOES(gl.glGetMapxvOES, (C.uint32_t)(target), (C.uint32_t)(query), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) GetMaterialfv(face uint32, pname uint32, params *float32) {
	C.gllCall_glGetMaterialfv(gl.glGetMaterialfv, (C.uint32_t)(face), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetMaterialiv(face uint32, pname uint32, params *int32) {
	C.gllCall_glGetMaterialiv(gl.glGetMaterialiv, (C.uint32_t)(face), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMaterialxOES(face uint32, pname uint32, param int32) {
	C.gllCall_glGetMaterialxOES(gl.glGetMaterialxOES, (C.uint32_t)(face), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) GetMaterialxv(face uint32, pname uint32, params *int32) {
	C.gllCall_glGetMaterialxv(gl.glGetMaterialxv, (C.uint32_t)(face), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMaterialxvOES(face uint32, pname uint32, params *int32) {
	C.gllCall_glGetMaterialxvOES(gl.glGetMaterialxvOES, (C.uint32_t)(face), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMemoryObjectDetachedResourcesuivNV(memory uint32, pname uint32, first int32, count int32, params *uint32) {
	C.gllCall_glGetMemoryObjectDetachedResourcesuivNV(gl.glGetMemoryObjectDetachedResourcesuivNV, (C.uint32_t)(memory), (C.uint32_t)(pname), (C.int32_t)(first), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMemoryObjectParameterivEXT(memoryObject uint32, pname uint32, params *int32) {
	C.gllCall_glGetMemoryObjectParameterivEXT(gl.glGetMemoryObjectParameterivEXT, (C.uint32_t)(memoryObject), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMinmax(target uint32, reset bool, format uint32, type_ uint32, values unsafe.Pointer) {
	C.gllCall_glGetMinmax(gl.glGetMinmax, (C.uint32_t)(target), (C._Bool)(reset), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(values))
}
func (gl *lib) GetMinmaxEXT(target uint32, reset bool, format uint32, type_ uint32, values unsafe.Pointer) {
	C.gllCall_glGetMinmaxEXT(gl.glGetMinmaxEXT, (C.uint32_t)(target), (C._Bool)(reset), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(values))
}
func (gl *lib) GetMinmaxParameterfv(target uint32, pname uint32, params *float32) {
	C.gllCall_glGetMinmaxParameterfv(gl.glGetMinmaxParameterfv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetMinmaxParameterfvEXT(target uint32, pname uint32, params *float32) {
	C.gllCall_glGetMinmaxParameterfvEXT(gl.glGetMinmaxParameterfvEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetMinmaxParameteriv(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetMinmaxParameteriv(gl.glGetMinmaxParameteriv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMinmaxParameterivEXT(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetMinmaxParameterivEXT(gl.glGetMinmaxParameterivEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMultiTexEnvfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
	C.gllCall_glGetMultiTexEnvfvEXT(gl.glGetMultiTexEnvfvEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetMultiTexEnvivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
	C.gllCall_glGetMultiTexEnvivEXT(gl.glGetMultiTexEnvivEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMultiTexGendvEXT(texunit uint32, coord uint32, pname uint32, params *float64) {
	C.gllCall_glGetMultiTexGendvEXT(gl.glGetMultiTexGendvEXT, (C.uint32_t)(texunit), (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetMultiTexGenfvEXT(texunit uint32, coord uint32, pname uint32, params *float32) {
	C.gllCall_glGetMultiTexGenfvEXT(gl.glGetMultiTexGenfvEXT, (C.uint32_t)(texunit), (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetMultiTexGenivEXT(texunit uint32, coord uint32, pname uint32, params *int32) {
	C.gllCall_glGetMultiTexGenivEXT(gl.glGetMultiTexGenivEXT, (C.uint32_t)(texunit), (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMultiTexImageEXT(texunit uint32, target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glGetMultiTexImageEXT(gl.glGetMultiTexImageEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) GetMultiTexLevelParameterfvEXT(texunit uint32, target uint32, level int32, pname uint32, params *float32) {
	C.gllCall_glGetMultiTexLevelParameterfvEXT(gl.glGetMultiTexLevelParameterfvEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetMultiTexLevelParameterivEXT(texunit uint32, target uint32, level int32, pname uint32, params *int32) {
	C.gllCall_glGetMultiTexLevelParameterivEXT(gl.glGetMultiTexLevelParameterivEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMultiTexParameterIivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
	C.gllCall_glGetMultiTexParameterIivEXT(gl.glGetMultiTexParameterIivEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMultiTexParameterIuivEXT(texunit uint32, target uint32, pname uint32, params *uint32) {
	C.gllCall_glGetMultiTexParameterIuivEXT(gl.glGetMultiTexParameterIuivEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMultiTexParameterfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
	C.gllCall_glGetMultiTexParameterfvEXT(gl.glGetMultiTexParameterfvEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetMultiTexParameterivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
	C.gllCall_glGetMultiTexParameterivEXT(gl.glGetMultiTexParameterivEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetMultisamplefv(pname uint32, index uint32, val *float32) {
	C.gllCall_glGetMultisamplefv(gl.glGetMultisamplefv, (C.uint32_t)(pname), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(val)))
}
func (gl *lib) GetMultisamplefvNV(pname uint32, index uint32, val *float32) {
	C.gllCall_glGetMultisamplefvNV(gl.glGetMultisamplefvNV, (C.uint32_t)(pname), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(val)))
}
func (gl *lib) GetNamedBufferParameteri64v(buffer uint32, pname uint32, params *int64) {
	C.gllCall_glGetNamedBufferParameteri64v(gl.glGetNamedBufferParameteri64v, (C.uint32_t)(buffer), (C.uint32_t)(pname), (*C.int64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedBufferParameteriv(buffer uint32, pname uint32, params *int32) {
	C.gllCall_glGetNamedBufferParameteriv(gl.glGetNamedBufferParameteriv, (C.uint32_t)(buffer), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedBufferParameterivEXT(buffer uint32, pname uint32, params *int32) {
	C.gllCall_glGetNamedBufferParameterivEXT(gl.glGetNamedBufferParameterivEXT, (C.uint32_t)(buffer), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedBufferParameterui64vNV(buffer uint32, pname uint32, params *uint64) {
	C.gllCall_glGetNamedBufferParameterui64vNV(gl.glGetNamedBufferParameterui64vNV, (C.uint32_t)(buffer), (C.uint32_t)(pname), (*C.uint64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedBufferPointerv(buffer uint32, pname uint32, params *unsafe.Pointer) {
	C.gllCall_glGetNamedBufferPointerv(gl.glGetNamedBufferPointerv, (C.uint32_t)(buffer), (C.uint32_t)(pname), (*unsafe.Pointer)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedBufferPointervEXT(buffer uint32, pname uint32, params *unsafe.Pointer) {
	C.gllCall_glGetNamedBufferPointervEXT(gl.glGetNamedBufferPointervEXT, (C.uint32_t)(buffer), (C.uint32_t)(pname), (*unsafe.Pointer)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedBufferSubData(buffer uint32, offset uintptr, size int, data unsafe.Pointer) {
	C.gllCall_glGetNamedBufferSubData(gl.glGetNamedBufferSubData, (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size), (unsafe.Pointer)(data))
}
func (gl *lib) GetNamedBufferSubDataEXT(buffer uint32, offset uintptr, size int, data unsafe.Pointer) {
	C.gllCall_glGetNamedBufferSubDataEXT(gl.glGetNamedBufferSubDataEXT, (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size), (unsafe.Pointer)(data))
}
func (gl *lib) GetNamedFramebufferParameterfvAMD(framebuffer uint32, pname uint32, numsamples uint32, pixelindex uint32, size int32, values *float32) {
	C.gllCall_glGetNamedFramebufferParameterfvAMD(gl.glGetNamedFramebufferParameterfvAMD, (C.uint32_t)(framebuffer), (C.uint32_t)(pname), (C.uint32_t)(numsamples), (C.uint32_t)(pixelindex), (C.int32_t)(size), (*C.float)(unsafe.Pointer(values)))
}
func (gl *lib) GetNamedFramebufferAttachmentParameteriv(framebuffer uint32, attachment uint32, pname uint32, params *int32) {
	C.gllCall_glGetNamedFramebufferAttachmentParameteriv(gl.glGetNamedFramebufferAttachmentParameteriv, (C.uint32_t)(framebuffer), (C.uint32_t)(attachment), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedFramebufferAttachmentParameterivEXT(framebuffer uint32, attachment uint32, pname uint32, params *int32) {
	C.gllCall_glGetNamedFramebufferAttachmentParameterivEXT(gl.glGetNamedFramebufferAttachmentParameterivEXT, (C.uint32_t)(framebuffer), (C.uint32_t)(attachment), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedFramebufferParameteriv(framebuffer uint32, pname uint32, param *int32) {
	C.gllCall_glGetNamedFramebufferParameteriv(gl.glGetNamedFramebufferParameteriv, (C.uint32_t)(framebuffer), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) GetNamedFramebufferParameterivEXT(framebuffer uint32, pname uint32, params *int32) {
	C.gllCall_glGetNamedFramebufferParameterivEXT(gl.glGetNamedFramebufferParameterivEXT, (C.uint32_t)(framebuffer), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedProgramLocalParameterIivEXT(program uint32, target uint32, index uint32, params *int32) {
	C.gllCall_glGetNamedProgramLocalParameterIivEXT(gl.glGetNamedProgramLocalParameterIivEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedProgramLocalParameterIuivEXT(program uint32, target uint32, index uint32, params *uint32) {
	C.gllCall_glGetNamedProgramLocalParameterIuivEXT(gl.glGetNamedProgramLocalParameterIuivEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedProgramLocalParameterdvEXT(program uint32, target uint32, index uint32, params *float64) {
	C.gllCall_glGetNamedProgramLocalParameterdvEXT(gl.glGetNamedProgramLocalParameterdvEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedProgramLocalParameterfvEXT(program uint32, target uint32, index uint32, params *float32) {
	C.gllCall_glGetNamedProgramLocalParameterfvEXT(gl.glGetNamedProgramLocalParameterfvEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedProgramStringEXT(program uint32, target uint32, pname uint32, string unsafe.Pointer) {
	C.gllCall_glGetNamedProgramStringEXT(gl.glGetNamedProgramStringEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(pname), (unsafe.Pointer)(string))
}
func (gl *lib) GetNamedProgramivEXT(program uint32, target uint32, pname uint32, params *int32) {
	C.gllCall_glGetNamedProgramivEXT(gl.glGetNamedProgramivEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedRenderbufferParameteriv(renderbuffer uint32, pname uint32, params *int32) {
	C.gllCall_glGetNamedRenderbufferParameteriv(gl.glGetNamedRenderbufferParameteriv, (C.uint32_t)(renderbuffer), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedRenderbufferParameterivEXT(renderbuffer uint32, pname uint32, params *int32) {
	C.gllCall_glGetNamedRenderbufferParameterivEXT(gl.glGetNamedRenderbufferParameterivEXT, (C.uint32_t)(renderbuffer), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetNamedStringARB(namelen int32, name *uint8, bufSize int32, stringlen *int32, string *uint8) {
	C.gllCall_glGetNamedStringARB(gl.glGetNamedStringARB, (C.int32_t)(namelen), (*C.uint8_t)(unsafe.Pointer(name)), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(stringlen)), (*C.uint8_t)(unsafe.Pointer(string)))
}
func (gl *lib) GetNamedStringivARB(namelen int32, name *uint8, pname uint32, params *int32) {
	C.gllCall_glGetNamedStringivARB(gl.glGetNamedStringivARB, (C.int32_t)(namelen), (*C.uint8_t)(unsafe.Pointer(name)), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetNextPerfQueryIdINTEL(queryId uint32, nextQueryId *uint32) {
	C.gllCall_glGetNextPerfQueryIdINTEL(gl.glGetNextPerfQueryIdINTEL, (C.uint32_t)(queryId), (*C.uint32_t)(unsafe.Pointer(nextQueryId)))
}
func (gl *lib) GetObjectBufferfvATI(buffer uint32, pname uint32, params *float32) {
	C.gllCall_glGetObjectBufferfvATI(gl.glGetObjectBufferfvATI, (C.uint32_t)(buffer), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetObjectBufferivATI(buffer uint32, pname uint32, params *int32) {
	C.gllCall_glGetObjectBufferivATI(gl.glGetObjectBufferivATI, (C.uint32_t)(buffer), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetObjectLabel(identifier uint32, name uint32, bufSize int32, length *int32, label *uint8) {
	C.gllCall_glGetObjectLabel(gl.glGetObjectLabel, (C.uint32_t)(identifier), (C.uint32_t)(name), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(label)))
}
func (gl *lib) GetObjectLabelEXT(type_ uint32, object uint32, bufSize int32, length *int32, label *uint8) {
	C.gllCall_glGetObjectLabelEXT(gl.glGetObjectLabelEXT, (C.uint32_t)(type_), (C.uint32_t)(object), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(label)))
}
func (gl *lib) GetObjectLabelKHR(identifier uint32, name uint32, bufSize int32, length *int32, label *uint8) {
	C.gllCall_glGetObjectLabelKHR(gl.glGetObjectLabelKHR, (C.uint32_t)(identifier), (C.uint32_t)(name), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(label)))
}
func (gl *lib) GetObjectParameterfvARB(obj GLhandleARB, pname uint32, params *float32) {
	C.gllCall_glGetObjectParameterfvARB(gl.glGetObjectParameterfvARB, (C.GLhandleARB)(obj), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetObjectParameterivAPPLE(objectType uint32, name uint32, pname uint32, params *int32) {
	C.gllCall_glGetObjectParameterivAPPLE(gl.glGetObjectParameterivAPPLE, (C.uint32_t)(objectType), (C.uint32_t)(name), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetObjectParameterivARB(obj GLhandleARB, pname uint32, params *int32) {
	C.gllCall_glGetObjectParameterivARB(gl.glGetObjectParameterivARB, (C.GLhandleARB)(obj), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetObjectPtrLabel(ptr unsafe.Pointer, bufSize int32, length *int32, label *uint8) {
	C.gllCall_glGetObjectPtrLabel(gl.glGetObjectPtrLabel, (unsafe.Pointer)(ptr), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(label)))
}
func (gl *lib) GetObjectPtrLabelKHR(ptr unsafe.Pointer, bufSize int32, length *int32, label *uint8) {
	C.gllCall_glGetObjectPtrLabelKHR(gl.glGetObjectPtrLabelKHR, (unsafe.Pointer)(ptr), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(label)))
}
func (gl *lib) GetOcclusionQueryivNV(id uint32, pname uint32, params *int32) {
	C.gllCall_glGetOcclusionQueryivNV(gl.glGetOcclusionQueryivNV, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetOcclusionQueryuivNV(id uint32, pname uint32, params *uint32) {
	C.gllCall_glGetOcclusionQueryuivNV(gl.glGetOcclusionQueryuivNV, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetPathColorGenfvNV(color uint32, pname uint32, value *float32) {
	C.gllCall_glGetPathColorGenfvNV(gl.glGetPathColorGenfvNV, (C.uint32_t)(color), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) GetPathColorGenivNV(color uint32, pname uint32, value *int32) {
	C.gllCall_glGetPathColorGenivNV(gl.glGetPathColorGenivNV, (C.uint32_t)(color), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) GetPathCommandsNV(path uint32, commands *uint8) {
	C.gllCall_glGetPathCommandsNV(gl.glGetPathCommandsNV, (C.uint32_t)(path), (*C.uint8_t)(unsafe.Pointer(commands)))
}
func (gl *lib) GetPathCoordsNV(path uint32, coords *float32) {
	C.gllCall_glGetPathCoordsNV(gl.glGetPathCoordsNV, (C.uint32_t)(path), (*C.float)(unsafe.Pointer(coords)))
}
func (gl *lib) GetPathDashArrayNV(path uint32, dashArray *float32) {
	C.gllCall_glGetPathDashArrayNV(gl.glGetPathDashArrayNV, (C.uint32_t)(path), (*C.float)(unsafe.Pointer(dashArray)))
}
func (gl *lib) GetPathLengthNV(path uint32, startSegment int32, numSegments int32) float32 {
	return (float32)(C.gllCall_glGetPathLengthNV(gl.glGetPathLengthNV, (C.uint32_t)(path), (C.int32_t)(startSegment), (C.int32_t)(numSegments)))
}
func (gl *lib) GetPathMetricRangeNV(metricQueryMask uint32, firstPathName uint32, numPaths int32, stride int32, metrics *float32) {
	C.gllCall_glGetPathMetricRangeNV(gl.glGetPathMetricRangeNV, (C.uint32_t)(metricQueryMask), (C.uint32_t)(firstPathName), (C.int32_t)(numPaths), (C.int32_t)(stride), (*C.float)(unsafe.Pointer(metrics)))
}
func (gl *lib) GetPathMetricsNV(metricQueryMask uint32, numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, stride int32, metrics *float32) {
	C.gllCall_glGetPathMetricsNV(gl.glGetPathMetricsNV, (C.uint32_t)(metricQueryMask), (C.int32_t)(numPaths), (C.uint32_t)(pathNameType), (unsafe.Pointer)(paths), (C.uint32_t)(pathBase), (C.int32_t)(stride), (*C.float)(unsafe.Pointer(metrics)))
}
func (gl *lib) GetPathParameterfvNV(path uint32, pname uint32, value *float32) {
	C.gllCall_glGetPathParameterfvNV(gl.glGetPathParameterfvNV, (C.uint32_t)(path), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) GetPathParameterivNV(path uint32, pname uint32, value *int32) {
	C.gllCall_glGetPathParameterivNV(gl.glGetPathParameterivNV, (C.uint32_t)(path), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) GetPathSpacingNV(pathListMode uint32, numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, advanceScale float32, kerningScale float32, transformType uint32, returnedSpacing *float32) {
	C.gllCall_glGetPathSpacingNV(gl.glGetPathSpacingNV, (C.uint32_t)(pathListMode), (C.int32_t)(numPaths), (C.uint32_t)(pathNameType), (unsafe.Pointer)(paths), (C.uint32_t)(pathBase), (C.float)(advanceScale), (C.float)(kerningScale), (C.uint32_t)(transformType), (*C.float)(unsafe.Pointer(returnedSpacing)))
}
func (gl *lib) GetPathTexGenfvNV(texCoordSet uint32, pname uint32, value *float32) {
	C.gllCall_glGetPathTexGenfvNV(gl.glGetPathTexGenfvNV, (C.uint32_t)(texCoordSet), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) GetPathTexGenivNV(texCoordSet uint32, pname uint32, value *int32) {
	C.gllCall_glGetPathTexGenivNV(gl.glGetPathTexGenivNV, (C.uint32_t)(texCoordSet), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) GetPerfCounterInfoINTEL(queryId uint32, counterId uint32, counterNameLength uint32, counterName *uint8, counterDescLength uint32, counterDesc *uint8, counterOffset *uint32, counterDataSize *uint32, counterTypeEnum *uint32, counterDataTypeEnum *uint32, rawCounterMaxValue *uint64) {
	C.gllCall_glGetPerfCounterInfoINTEL(gl.glGetPerfCounterInfoINTEL, (C.uint32_t)(queryId), (C.uint32_t)(counterId), (C.uint32_t)(counterNameLength), (*C.uint8_t)(unsafe.Pointer(counterName)), (C.uint32_t)(counterDescLength), (*C.uint8_t)(unsafe.Pointer(counterDesc)), (*C.uint32_t)(unsafe.Pointer(counterOffset)), (*C.uint32_t)(unsafe.Pointer(counterDataSize)), (*C.uint32_t)(unsafe.Pointer(counterTypeEnum)), (*C.uint32_t)(unsafe.Pointer(counterDataTypeEnum)), (*C.uint64_t)(unsafe.Pointer(rawCounterMaxValue)))
}
func (gl *lib) GetPerfMonitorCounterDataAMD(monitor uint32, pname uint32, dataSize int32, data *uint32, bytesWritten *int32) {
	C.gllCall_glGetPerfMonitorCounterDataAMD(gl.glGetPerfMonitorCounterDataAMD, (C.uint32_t)(monitor), (C.uint32_t)(pname), (C.int32_t)(dataSize), (*C.uint32_t)(unsafe.Pointer(data)), (*C.int32_t)(unsafe.Pointer(bytesWritten)))
}
func (gl *lib) GetPerfMonitorCounterInfoAMD(group uint32, counter uint32, pname uint32, data unsafe.Pointer) {
	C.gllCall_glGetPerfMonitorCounterInfoAMD(gl.glGetPerfMonitorCounterInfoAMD, (C.uint32_t)(group), (C.uint32_t)(counter), (C.uint32_t)(pname), (unsafe.Pointer)(data))
}
func (gl *lib) GetPerfMonitorCounterStringAMD(group uint32, counter uint32, bufSize int32, length *int32, counterString *uint8) {
	C.gllCall_glGetPerfMonitorCounterStringAMD(gl.glGetPerfMonitorCounterStringAMD, (C.uint32_t)(group), (C.uint32_t)(counter), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(counterString)))
}
func (gl *lib) GetPerfMonitorCountersAMD(group uint32, numCounters *int32, maxActiveCounters *int32, counterSize int32, counters *uint32) {
	C.gllCall_glGetPerfMonitorCountersAMD(gl.glGetPerfMonitorCountersAMD, (C.uint32_t)(group), (*C.int32_t)(unsafe.Pointer(numCounters)), (*C.int32_t)(unsafe.Pointer(maxActiveCounters)), (C.int32_t)(counterSize), (*C.uint32_t)(unsafe.Pointer(counters)))
}
func (gl *lib) GetPerfMonitorGroupStringAMD(group uint32, bufSize int32, length *int32, groupString *uint8) {
	C.gllCall_glGetPerfMonitorGroupStringAMD(gl.glGetPerfMonitorGroupStringAMD, (C.uint32_t)(group), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(groupString)))
}
func (gl *lib) GetPerfMonitorGroupsAMD(numGroups *int32, groupsSize int32, groups *uint32) {
	C.gllCall_glGetPerfMonitorGroupsAMD(gl.glGetPerfMonitorGroupsAMD, (*C.int32_t)(unsafe.Pointer(numGroups)), (C.int32_t)(groupsSize), (*C.uint32_t)(unsafe.Pointer(groups)))
}
func (gl *lib) GetPerfQueryDataINTEL(queryHandle uint32, flags uint32, dataSize int32, data unsafe.Pointer, bytesWritten *uint32) {
	C.gllCall_glGetPerfQueryDataINTEL(gl.glGetPerfQueryDataINTEL, (C.uint32_t)(queryHandle), (C.uint32_t)(flags), (C.int32_t)(dataSize), (unsafe.Pointer)(data), (*C.uint32_t)(unsafe.Pointer(bytesWritten)))
}
func (gl *lib) GetPerfQueryIdByNameINTEL(queryName *uint8, queryId *uint32) {
	C.gllCall_glGetPerfQueryIdByNameINTEL(gl.glGetPerfQueryIdByNameINTEL, (*C.uint8_t)(unsafe.Pointer(queryName)), (*C.uint32_t)(unsafe.Pointer(queryId)))
}
func (gl *lib) GetPerfQueryInfoINTEL(queryId uint32, queryNameLength uint32, queryName *uint8, dataSize *uint32, noCounters *uint32, noInstances *uint32, capsMask *uint32) {
	C.gllCall_glGetPerfQueryInfoINTEL(gl.glGetPerfQueryInfoINTEL, (C.uint32_t)(queryId), (C.uint32_t)(queryNameLength), (*C.uint8_t)(unsafe.Pointer(queryName)), (*C.uint32_t)(unsafe.Pointer(dataSize)), (*C.uint32_t)(unsafe.Pointer(noCounters)), (*C.uint32_t)(unsafe.Pointer(noInstances)), (*C.uint32_t)(unsafe.Pointer(capsMask)))
}
func (gl *lib) GetPixelMapfv(map_ uint32, values *float32) {
	C.gllCall_glGetPixelMapfv(gl.glGetPixelMapfv, (C.uint32_t)(map_), (*C.float)(unsafe.Pointer(values)))
}
func (gl *lib) GetPixelMapuiv(map_ uint32, values *uint32) {
	C.gllCall_glGetPixelMapuiv(gl.glGetPixelMapuiv, (C.uint32_t)(map_), (*C.uint32_t)(unsafe.Pointer(values)))
}
func (gl *lib) GetPixelMapusv(map_ uint32, values *uint16) {
	C.gllCall_glGetPixelMapusv(gl.glGetPixelMapusv, (C.uint32_t)(map_), (*C.uint16_t)(unsafe.Pointer(values)))
}
func (gl *lib) GetPixelMapxv(map_ uint32, size int32, values *int32) {
	C.gllCall_glGetPixelMapxv(gl.glGetPixelMapxv, (C.uint32_t)(map_), (C.int32_t)(size), (*C.int32_t)(unsafe.Pointer(values)))
}
func (gl *lib) GetPixelTexGenParameterfvSGIS(pname uint32, params *float32) {
	C.gllCall_glGetPixelTexGenParameterfvSGIS(gl.glGetPixelTexGenParameterfvSGIS, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetPixelTexGenParameterivSGIS(pname uint32, params *int32) {
	C.gllCall_glGetPixelTexGenParameterivSGIS(gl.glGetPixelTexGenParameterivSGIS, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetPixelTransformParameterfvEXT(target uint32, pname uint32, params *float32) {
	C.gllCall_glGetPixelTransformParameterfvEXT(gl.glGetPixelTransformParameterfvEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetPixelTransformParameterivEXT(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetPixelTransformParameterivEXT(gl.glGetPixelTransformParameterivEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetPointerIndexedvEXT(target uint32, index uint32, data *unsafe.Pointer) {
	C.gllCall_glGetPointerIndexedvEXT(gl.glGetPointerIndexedvEXT, (C.uint32_t)(target), (C.uint32_t)(index), (*unsafe.Pointer)(unsafe.Pointer(data)))
}
func (gl *lib) GetPointeri_vEXT(pname uint32, index uint32, params *unsafe.Pointer) {
	C.gllCall_glGetPointeri_vEXT(gl.glGetPointeri_vEXT, (C.uint32_t)(pname), (C.uint32_t)(index), (*unsafe.Pointer)(unsafe.Pointer(params)))
}
func (gl *lib) GetPointerv(pname uint32, params *unsafe.Pointer) {
	C.gllCall_glGetPointerv(gl.glGetPointerv, (C.uint32_t)(pname), (*unsafe.Pointer)(unsafe.Pointer(params)))
}
func (gl *lib) GetPointervEXT(pname uint32, params *unsafe.Pointer) {
	C.gllCall_glGetPointervEXT(gl.glGetPointervEXT, (C.uint32_t)(pname), (*unsafe.Pointer)(unsafe.Pointer(params)))
}
func (gl *lib) GetPointervKHR(pname uint32, params *unsafe.Pointer) {
	C.gllCall_glGetPointervKHR(gl.glGetPointervKHR, (C.uint32_t)(pname), (*unsafe.Pointer)(unsafe.Pointer(params)))
}
func (gl *lib) GetPolygonStipple(mask *uint8) {
	C.gllCall_glGetPolygonStipple(gl.glGetPolygonStipple, (*C.uint8_t)(unsafe.Pointer(mask)))
}
func (gl *lib) GetProgramBinary(program uint32, bufSize int32, length *int32, binaryFormat *uint32, binary unsafe.Pointer) {
	C.gllCall_glGetProgramBinary(gl.glGetProgramBinary, (C.uint32_t)(program), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint32_t)(unsafe.Pointer(binaryFormat)), (unsafe.Pointer)(binary))
}
func (gl *lib) GetProgramBinaryOES(program uint32, bufSize int32, length *int32, binaryFormat *uint32, binary unsafe.Pointer) {
	C.gllCall_glGetProgramBinaryOES(gl.glGetProgramBinaryOES, (C.uint32_t)(program), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint32_t)(unsafe.Pointer(binaryFormat)), (unsafe.Pointer)(binary))
}
func (gl *lib) GetProgramEnvParameterIivNV(target uint32, index uint32, params *int32) {
	C.gllCall_glGetProgramEnvParameterIivNV(gl.glGetProgramEnvParameterIivNV, (C.uint32_t)(target), (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramEnvParameterIuivNV(target uint32, index uint32, params *uint32) {
	C.gllCall_glGetProgramEnvParameterIuivNV(gl.glGetProgramEnvParameterIuivNV, (C.uint32_t)(target), (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramEnvParameterdvARB(target uint32, index uint32, params *float64) {
	C.gllCall_glGetProgramEnvParameterdvARB(gl.glGetProgramEnvParameterdvARB, (C.uint32_t)(target), (C.uint32_t)(index), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramEnvParameterfvARB(target uint32, index uint32, params *float32) {
	C.gllCall_glGetProgramEnvParameterfvARB(gl.glGetProgramEnvParameterfvARB, (C.uint32_t)(target), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8) {
	C.gllCall_glGetProgramInfoLog(gl.glGetProgramInfoLog, (C.uint32_t)(program), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(infoLog)))
}
func (gl *lib) GetProgramInterfaceiv(program uint32, programInterface uint32, pname uint32, params *int32) {
	C.gllCall_glGetProgramInterfaceiv(gl.glGetProgramInterfaceiv, (C.uint32_t)(program), (C.uint32_t)(programInterface), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramLocalParameterIivNV(target uint32, index uint32, params *int32) {
	C.gllCall_glGetProgramLocalParameterIivNV(gl.glGetProgramLocalParameterIivNV, (C.uint32_t)(target), (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramLocalParameterIuivNV(target uint32, index uint32, params *uint32) {
	C.gllCall_glGetProgramLocalParameterIuivNV(gl.glGetProgramLocalParameterIuivNV, (C.uint32_t)(target), (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramLocalParameterdvARB(target uint32, index uint32, params *float64) {
	C.gllCall_glGetProgramLocalParameterdvARB(gl.glGetProgramLocalParameterdvARB, (C.uint32_t)(target), (C.uint32_t)(index), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramLocalParameterfvARB(target uint32, index uint32, params *float32) {
	C.gllCall_glGetProgramLocalParameterfvARB(gl.glGetProgramLocalParameterfvARB, (C.uint32_t)(target), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramNamedParameterdvNV(id uint32, len int32, name *uint8, params *float64) {
	C.gllCall_glGetProgramNamedParameterdvNV(gl.glGetProgramNamedParameterdvNV, (C.uint32_t)(id), (C.int32_t)(len), (*C.uint8_t)(unsafe.Pointer(name)), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramNamedParameterfvNV(id uint32, len int32, name *uint8, params *float32) {
	C.gllCall_glGetProgramNamedParameterfvNV(gl.glGetProgramNamedParameterfvNV, (C.uint32_t)(id), (C.int32_t)(len), (*C.uint8_t)(unsafe.Pointer(name)), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramParameterdvNV(target uint32, index uint32, pname uint32, params *float64) {
	C.gllCall_glGetProgramParameterdvNV(gl.glGetProgramParameterdvNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(pname), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramParameterfvNV(target uint32, index uint32, pname uint32, params *float32) {
	C.gllCall_glGetProgramParameterfvNV(gl.glGetProgramParameterfvNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramPipelineInfoLog(pipeline uint32, bufSize int32, length *int32, infoLog *uint8) {
	C.gllCall_glGetProgramPipelineInfoLog(gl.glGetProgramPipelineInfoLog, (C.uint32_t)(pipeline), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(infoLog)))
}
func (gl *lib) GetProgramPipelineInfoLogEXT(pipeline uint32, bufSize int32, length *int32, infoLog *uint8) {
	C.gllCall_glGetProgramPipelineInfoLogEXT(gl.glGetProgramPipelineInfoLogEXT, (C.uint32_t)(pipeline), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(infoLog)))
}
func (gl *lib) GetProgramPipelineiv(pipeline uint32, pname uint32, params *int32) {
	C.gllCall_glGetProgramPipelineiv(gl.glGetProgramPipelineiv, (C.uint32_t)(pipeline), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramPipelineivEXT(pipeline uint32, pname uint32, params *int32) {
	C.gllCall_glGetProgramPipelineivEXT(gl.glGetProgramPipelineivEXT, (C.uint32_t)(pipeline), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramResourceIndex(program uint32, programInterface uint32, name *uint8) uint32 {
	return (uint32)(C.gllCall_glGetProgramResourceIndex(gl.glGetProgramResourceIndex, (C.uint32_t)(program), (C.uint32_t)(programInterface), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetProgramResourceLocation(program uint32, programInterface uint32, name *uint8) int32 {
	return (int32)(C.gllCall_glGetProgramResourceLocation(gl.glGetProgramResourceLocation, (C.uint32_t)(program), (C.uint32_t)(programInterface), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetProgramResourceLocationIndex(program uint32, programInterface uint32, name *uint8) int32 {
	return (int32)(C.gllCall_glGetProgramResourceLocationIndex(gl.glGetProgramResourceLocationIndex, (C.uint32_t)(program), (C.uint32_t)(programInterface), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetProgramResourceLocationIndexEXT(program uint32, programInterface uint32, name *uint8) int32 {
	return (int32)(C.gllCall_glGetProgramResourceLocationIndexEXT(gl.glGetProgramResourceLocationIndexEXT, (C.uint32_t)(program), (C.uint32_t)(programInterface), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetProgramResourceName(program uint32, programInterface uint32, index uint32, bufSize int32, length *int32, name *uint8) {
	C.gllCall_glGetProgramResourceName(gl.glGetProgramResourceName, (C.uint32_t)(program), (C.uint32_t)(programInterface), (C.uint32_t)(index), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) GetProgramResourcefvNV(program uint32, programInterface uint32, index uint32, propCount int32, props *uint32, count int32, length *int32, params *float32) {
	C.gllCall_glGetProgramResourcefvNV(gl.glGetProgramResourcefvNV, (C.uint32_t)(program), (C.uint32_t)(programInterface), (C.uint32_t)(index), (C.int32_t)(propCount), (*C.uint32_t)(unsafe.Pointer(props)), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(length)), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramResourceiv(program uint32, programInterface uint32, index uint32, propCount int32, props *uint32, count int32, length *int32, params *int32) {
	C.gllCall_glGetProgramResourceiv(gl.glGetProgramResourceiv, (C.uint32_t)(program), (C.uint32_t)(programInterface), (C.uint32_t)(index), (C.int32_t)(propCount), (*C.uint32_t)(unsafe.Pointer(props)), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(length)), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramStageiv(program uint32, shadertype uint32, pname uint32, values *int32) {
	C.gllCall_glGetProgramStageiv(gl.glGetProgramStageiv, (C.uint32_t)(program), (C.uint32_t)(shadertype), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(values)))
}
func (gl *lib) GetProgramStringARB(target uint32, pname uint32, string unsafe.Pointer) {
	C.gllCall_glGetProgramStringARB(gl.glGetProgramStringARB, (C.uint32_t)(target), (C.uint32_t)(pname), (unsafe.Pointer)(string))
}
func (gl *lib) GetProgramStringNV(id uint32, pname uint32, program *uint8) {
	C.gllCall_glGetProgramStringNV(gl.glGetProgramStringNV, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.uint8_t)(unsafe.Pointer(program)))
}
func (gl *lib) GetProgramSubroutineParameteruivNV(target uint32, index uint32, param *uint32) {
	C.gllCall_glGetProgramSubroutineParameteruivNV(gl.glGetProgramSubroutineParameteruivNV, (C.uint32_t)(target), (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(param)))
}
func (gl *lib) GetProgramiv(program uint32, pname uint32, params *int32) {
	C.gllCall_glGetProgramiv(gl.glGetProgramiv, (C.uint32_t)(program), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramivARB(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetProgramivARB(gl.glGetProgramivARB, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetProgramivNV(id uint32, pname uint32, params *int32) {
	C.gllCall_glGetProgramivNV(gl.glGetProgramivNV, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetQueryBufferObjecti64v(id uint32, buffer uint32, pname uint32, offset uintptr) {
	C.gllCall_glGetQueryBufferObjecti64v(gl.glGetQueryBufferObjecti64v, (C.uint32_t)(id), (C.uint32_t)(buffer), (C.uint32_t)(pname), (C.intptr_t)(offset))
}
func (gl *lib) GetQueryBufferObjectiv(id uint32, buffer uint32, pname uint32, offset uintptr) {
	C.gllCall_glGetQueryBufferObjectiv(gl.glGetQueryBufferObjectiv, (C.uint32_t)(id), (C.uint32_t)(buffer), (C.uint32_t)(pname), (C.intptr_t)(offset))
}
func (gl *lib) GetQueryBufferObjectui64v(id uint32, buffer uint32, pname uint32, offset uintptr) {
	C.gllCall_glGetQueryBufferObjectui64v(gl.glGetQueryBufferObjectui64v, (C.uint32_t)(id), (C.uint32_t)(buffer), (C.uint32_t)(pname), (C.intptr_t)(offset))
}
func (gl *lib) GetQueryBufferObjectuiv(id uint32, buffer uint32, pname uint32, offset uintptr) {
	C.gllCall_glGetQueryBufferObjectuiv(gl.glGetQueryBufferObjectuiv, (C.uint32_t)(id), (C.uint32_t)(buffer), (C.uint32_t)(pname), (C.intptr_t)(offset))
}
func (gl *lib) GetQueryIndexediv(target uint32, index uint32, pname uint32, params *int32) {
	C.gllCall_glGetQueryIndexediv(gl.glGetQueryIndexediv, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetQueryObjecti64v(id uint32, pname uint32, params *int64) {
	C.gllCall_glGetQueryObjecti64v(gl.glGetQueryObjecti64v, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.int64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetQueryObjecti64vEXT(id uint32, pname uint32, params *int64) {
	C.gllCall_glGetQueryObjecti64vEXT(gl.glGetQueryObjecti64vEXT, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.int64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetQueryObjectiv(id uint32, pname uint32, params *int32) {
	C.gllCall_glGetQueryObjectiv(gl.glGetQueryObjectiv, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetQueryObjectivARB(id uint32, pname uint32, params *int32) {
	C.gllCall_glGetQueryObjectivARB(gl.glGetQueryObjectivARB, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetQueryObjectivEXT(id uint32, pname uint32, params *int32) {
	C.gllCall_glGetQueryObjectivEXT(gl.glGetQueryObjectivEXT, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetQueryObjectui64v(id uint32, pname uint32, params *uint64) {
	C.gllCall_glGetQueryObjectui64v(gl.glGetQueryObjectui64v, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.uint64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetQueryObjectui64vEXT(id uint32, pname uint32, params *uint64) {
	C.gllCall_glGetQueryObjectui64vEXT(gl.glGetQueryObjectui64vEXT, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.uint64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetQueryObjectuiv(id uint32, pname uint32, params *uint32) {
	C.gllCall_glGetQueryObjectuiv(gl.glGetQueryObjectuiv, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetQueryObjectuivARB(id uint32, pname uint32, params *uint32) {
	C.gllCall_glGetQueryObjectuivARB(gl.glGetQueryObjectuivARB, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetQueryObjectuivEXT(id uint32, pname uint32, params *uint32) {
	C.gllCall_glGetQueryObjectuivEXT(gl.glGetQueryObjectuivEXT, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetQueryiv(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetQueryiv(gl.glGetQueryiv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetQueryivARB(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetQueryivARB(gl.glGetQueryivARB, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetQueryivEXT(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetQueryivEXT(gl.glGetQueryivEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetRenderbufferParameteriv(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetRenderbufferParameteriv(gl.glGetRenderbufferParameteriv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetRenderbufferParameterivEXT(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetRenderbufferParameterivEXT(gl.glGetRenderbufferParameterivEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetRenderbufferParameterivOES(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetRenderbufferParameterivOES(gl.glGetRenderbufferParameterivOES, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetSamplerParameterIiv(sampler uint32, pname uint32, params *int32) {
	C.gllCall_glGetSamplerParameterIiv(gl.glGetSamplerParameterIiv, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetSamplerParameterIivEXT(sampler uint32, pname uint32, params *int32) {
	C.gllCall_glGetSamplerParameterIivEXT(gl.glGetSamplerParameterIivEXT, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetSamplerParameterIivOES(sampler uint32, pname uint32, params *int32) {
	C.gllCall_glGetSamplerParameterIivOES(gl.glGetSamplerParameterIivOES, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetSamplerParameterIuiv(sampler uint32, pname uint32, params *uint32) {
	C.gllCall_glGetSamplerParameterIuiv(gl.glGetSamplerParameterIuiv, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetSamplerParameterIuivEXT(sampler uint32, pname uint32, params *uint32) {
	C.gllCall_glGetSamplerParameterIuivEXT(gl.glGetSamplerParameterIuivEXT, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetSamplerParameterIuivOES(sampler uint32, pname uint32, params *uint32) {
	C.gllCall_glGetSamplerParameterIuivOES(gl.glGetSamplerParameterIuivOES, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetSamplerParameterfv(sampler uint32, pname uint32, params *float32) {
	C.gllCall_glGetSamplerParameterfv(gl.glGetSamplerParameterfv, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetSamplerParameteriv(sampler uint32, pname uint32, params *int32) {
	C.gllCall_glGetSamplerParameteriv(gl.glGetSamplerParameteriv, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetSemaphoreParameterivNV(semaphore uint32, pname uint32, params *int32) {
	C.gllCall_glGetSemaphoreParameterivNV(gl.glGetSemaphoreParameterivNV, (C.uint32_t)(semaphore), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetSemaphoreParameterui64vEXT(semaphore uint32, pname uint32, params *uint64) {
	C.gllCall_glGetSemaphoreParameterui64vEXT(gl.glGetSemaphoreParameterui64vEXT, (C.uint32_t)(semaphore), (C.uint32_t)(pname), (*C.uint64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetSeparableFilter(target uint32, format uint32, type_ uint32, row unsafe.Pointer, column unsafe.Pointer, span unsafe.Pointer) {
	C.gllCall_glGetSeparableFilter(gl.glGetSeparableFilter, (C.uint32_t)(target), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(row), (unsafe.Pointer)(column), (unsafe.Pointer)(span))
}
func (gl *lib) GetSeparableFilterEXT(target uint32, format uint32, type_ uint32, row unsafe.Pointer, column unsafe.Pointer, span unsafe.Pointer) {
	C.gllCall_glGetSeparableFilterEXT(gl.glGetSeparableFilterEXT, (C.uint32_t)(target), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(row), (unsafe.Pointer)(column), (unsafe.Pointer)(span))
}
func (gl *lib) GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8) {
	C.gllCall_glGetShaderInfoLog(gl.glGetShaderInfoLog, (C.uint32_t)(shader), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(infoLog)))
}
func (gl *lib) GetShaderPrecisionFormat(shadertype uint32, precisiontype uint32, range_ *int32, precision *int32) {
	C.gllCall_glGetShaderPrecisionFormat(gl.glGetShaderPrecisionFormat, (C.uint32_t)(shadertype), (C.uint32_t)(precisiontype), (*C.int32_t)(unsafe.Pointer(range_)), (*C.int32_t)(unsafe.Pointer(precision)))
}
func (gl *lib) GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8) {
	C.gllCall_glGetShaderSource(gl.glGetShaderSource, (C.uint32_t)(shader), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(source)))
}
func (gl *lib) GetShaderSourceARB(obj GLhandleARB, maxLength int32, length *int32, source *uint8) {
	C.gllCall_glGetShaderSourceARB(gl.glGetShaderSourceARB, (C.GLhandleARB)(obj), (C.int32_t)(maxLength), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(source)))
}
func (gl *lib) GetShaderiv(shader uint32, pname uint32, params *int32) {
	C.gllCall_glGetShaderiv(gl.glGetShaderiv, (C.uint32_t)(shader), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetShadingRateImagePaletteNV(viewport uint32, entry uint32, rate *uint32) {
	C.gllCall_glGetShadingRateImagePaletteNV(gl.glGetShadingRateImagePaletteNV, (C.uint32_t)(viewport), (C.uint32_t)(entry), (*C.uint32_t)(unsafe.Pointer(rate)))
}
func (gl *lib) GetShadingRateSampleLocationivNV(rate uint32, samples uint32, index uint32, location *int32) {
	C.gllCall_glGetShadingRateSampleLocationivNV(gl.glGetShadingRateSampleLocationivNV, (C.uint32_t)(rate), (C.uint32_t)(samples), (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(location)))
}
func (gl *lib) GetSharpenTexFuncSGIS(target uint32, points *float32) {
	C.gllCall_glGetSharpenTexFuncSGIS(gl.glGetSharpenTexFuncSGIS, (C.uint32_t)(target), (*C.float)(unsafe.Pointer(points)))
}
func (gl *lib) GetStageIndexNV(shadertype uint32) uint16 {
	return (uint16)(C.gllCall_glGetStageIndexNV(gl.glGetStageIndexNV, (C.uint32_t)(shadertype)))
}
func (gl *lib) GetString(name uint32) *uint8 {
	return (*uint8)(C.gllCall_glGetString(gl.glGetString, (C.uint32_t)(name)))
}
func (gl *lib) GetStringi(name uint32, index uint32) *uint8 {
	return (*uint8)(C.gllCall_glGetStringi(gl.glGetStringi, (C.uint32_t)(name), (C.uint32_t)(index)))
}
func (gl *lib) GetSubroutineIndex(program uint32, shadertype uint32, name *uint8) uint32 {
	return (uint32)(C.gllCall_glGetSubroutineIndex(gl.glGetSubroutineIndex, (C.uint32_t)(program), (C.uint32_t)(shadertype), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetSubroutineUniformLocation(program uint32, shadertype uint32, name *uint8) int32 {
	return (int32)(C.gllCall_glGetSubroutineUniformLocation(gl.glGetSubroutineUniformLocation, (C.uint32_t)(program), (C.uint32_t)(shadertype), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetSynciv(sync GLsync, pname uint32, count int32, length *int32, values *int32) {
	C.gllCall_glGetSynciv(gl.glGetSynciv, (C.GLsync)(sync), (C.uint32_t)(pname), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(length)), (*C.int32_t)(unsafe.Pointer(values)))
}
func (gl *lib) GetSyncivAPPLE(sync GLsync, pname uint32, count int32, length *int32, values *int32) {
	C.gllCall_glGetSyncivAPPLE(gl.glGetSyncivAPPLE, (C.GLsync)(sync), (C.uint32_t)(pname), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(length)), (*C.int32_t)(unsafe.Pointer(values)))
}
func (gl *lib) GetTexBumpParameterfvATI(pname uint32, param *float32) {
	C.gllCall_glGetTexBumpParameterfvATI(gl.glGetTexBumpParameterfvATI, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(param)))
}
func (gl *lib) GetTexBumpParameterivATI(pname uint32, param *int32) {
	C.gllCall_glGetTexBumpParameterivATI(gl.glGetTexBumpParameterivATI, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) GetTexEnvfv(target uint32, pname uint32, params *float32) {
	C.gllCall_glGetTexEnvfv(gl.glGetTexEnvfv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexEnviv(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetTexEnviv(gl.glGetTexEnviv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexEnvxv(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetTexEnvxv(gl.glGetTexEnvxv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexEnvxvOES(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetTexEnvxvOES(gl.glGetTexEnvxvOES, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexFilterFuncSGIS(target uint32, filter uint32, weights *float32) {
	C.gllCall_glGetTexFilterFuncSGIS(gl.glGetTexFilterFuncSGIS, (C.uint32_t)(target), (C.uint32_t)(filter), (*C.float)(unsafe.Pointer(weights)))
}
func (gl *lib) GetTexGendv(coord uint32, pname uint32, params *float64) {
	C.gllCall_glGetTexGendv(gl.glGetTexGendv, (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexGenfv(coord uint32, pname uint32, params *float32) {
	C.gllCall_glGetTexGenfv(gl.glGetTexGenfv, (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexGenfvOES(coord uint32, pname uint32, params *float32) {
	C.gllCall_glGetTexGenfvOES(gl.glGetTexGenfvOES, (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexGeniv(coord uint32, pname uint32, params *int32) {
	C.gllCall_glGetTexGeniv(gl.glGetTexGeniv, (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexGenivOES(coord uint32, pname uint32, params *int32) {
	C.gllCall_glGetTexGenivOES(gl.glGetTexGenivOES, (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexGenxvOES(coord uint32, pname uint32, params *int32) {
	C.gllCall_glGetTexGenxvOES(gl.glGetTexGenxvOES, (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glGetTexImage(gl.glGetTexImage, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32) {
	C.gllCall_glGetTexLevelParameterfv(gl.glGetTexLevelParameterfv, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32) {
	C.gllCall_glGetTexLevelParameteriv(gl.glGetTexLevelParameteriv, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexLevelParameterxvOES(target uint32, level int32, pname uint32, params *int32) {
	C.gllCall_glGetTexLevelParameterxvOES(gl.glGetTexLevelParameterxvOES, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexParameterIiv(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetTexParameterIiv(gl.glGetTexParameterIiv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexParameterIivEXT(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetTexParameterIivEXT(gl.glGetTexParameterIivEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexParameterIivOES(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetTexParameterIivOES(gl.glGetTexParameterIivOES, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexParameterIuiv(target uint32, pname uint32, params *uint32) {
	C.gllCall_glGetTexParameterIuiv(gl.glGetTexParameterIuiv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexParameterIuivEXT(target uint32, pname uint32, params *uint32) {
	C.gllCall_glGetTexParameterIuivEXT(gl.glGetTexParameterIuivEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexParameterIuivOES(target uint32, pname uint32, params *uint32) {
	C.gllCall_glGetTexParameterIuivOES(gl.glGetTexParameterIuivOES, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexParameterPointervAPPLE(target uint32, pname uint32, params *unsafe.Pointer) {
	C.gllCall_glGetTexParameterPointervAPPLE(gl.glGetTexParameterPointervAPPLE, (C.uint32_t)(target), (C.uint32_t)(pname), (*unsafe.Pointer)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexParameterfv(target uint32, pname uint32, params *float32) {
	C.gllCall_glGetTexParameterfv(gl.glGetTexParameterfv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexParameteriv(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetTexParameteriv(gl.glGetTexParameteriv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexParameterxv(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetTexParameterxv(gl.glGetTexParameterxv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTexParameterxvOES(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetTexParameterxvOES(gl.glGetTexParameterxvOES, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTextureHandleARB(texture uint32) uint64 {
	return (uint64)(C.gllCall_glGetTextureHandleARB(gl.glGetTextureHandleARB, (C.uint32_t)(texture)))
}
func (gl *lib) GetTextureHandleIMG(texture uint32) uint64 {
	return (uint64)(C.gllCall_glGetTextureHandleIMG(gl.glGetTextureHandleIMG, (C.uint32_t)(texture)))
}
func (gl *lib) GetTextureHandleNV(texture uint32) uint64 {
	return (uint64)(C.gllCall_glGetTextureHandleNV(gl.glGetTextureHandleNV, (C.uint32_t)(texture)))
}
func (gl *lib) GetTextureImage(texture uint32, level int32, format uint32, type_ uint32, bufSize int32, pixels unsafe.Pointer) {
	C.gllCall_glGetTextureImage(gl.glGetTextureImage, (C.uint32_t)(texture), (C.int32_t)(level), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(pixels))
}
func (gl *lib) GetTextureImageEXT(texture uint32, target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glGetTextureImageEXT(gl.glGetTextureImageEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) GetTextureLevelParameterfv(texture uint32, level int32, pname uint32, params *float32) {
	C.gllCall_glGetTextureLevelParameterfv(gl.glGetTextureLevelParameterfv, (C.uint32_t)(texture), (C.int32_t)(level), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetTextureLevelParameterfvEXT(texture uint32, target uint32, level int32, pname uint32, params *float32) {
	C.gllCall_glGetTextureLevelParameterfvEXT(gl.glGetTextureLevelParameterfvEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetTextureLevelParameteriv(texture uint32, level int32, pname uint32, params *int32) {
	C.gllCall_glGetTextureLevelParameteriv(gl.glGetTextureLevelParameteriv, (C.uint32_t)(texture), (C.int32_t)(level), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTextureLevelParameterivEXT(texture uint32, target uint32, level int32, pname uint32, params *int32) {
	C.gllCall_glGetTextureLevelParameterivEXT(gl.glGetTextureLevelParameterivEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTextureParameterIiv(texture uint32, pname uint32, params *int32) {
	C.gllCall_glGetTextureParameterIiv(gl.glGetTextureParameterIiv, (C.uint32_t)(texture), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTextureParameterIivEXT(texture uint32, target uint32, pname uint32, params *int32) {
	C.gllCall_glGetTextureParameterIivEXT(gl.glGetTextureParameterIivEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTextureParameterIuiv(texture uint32, pname uint32, params *uint32) {
	C.gllCall_glGetTextureParameterIuiv(gl.glGetTextureParameterIuiv, (C.uint32_t)(texture), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTextureParameterIuivEXT(texture uint32, target uint32, pname uint32, params *uint32) {
	C.gllCall_glGetTextureParameterIuivEXT(gl.glGetTextureParameterIuivEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTextureParameterfv(texture uint32, pname uint32, params *float32) {
	C.gllCall_glGetTextureParameterfv(gl.glGetTextureParameterfv, (C.uint32_t)(texture), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetTextureParameterfvEXT(texture uint32, target uint32, pname uint32, params *float32) {
	C.gllCall_glGetTextureParameterfvEXT(gl.glGetTextureParameterfvEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetTextureParameteriv(texture uint32, pname uint32, params *int32) {
	C.gllCall_glGetTextureParameteriv(gl.glGetTextureParameteriv, (C.uint32_t)(texture), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTextureParameterivEXT(texture uint32, target uint32, pname uint32, params *int32) {
	C.gllCall_glGetTextureParameterivEXT(gl.glGetTextureParameterivEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTextureSamplerHandleARB(texture uint32, sampler uint32) uint64 {
	return (uint64)(C.gllCall_glGetTextureSamplerHandleARB(gl.glGetTextureSamplerHandleARB, (C.uint32_t)(texture), (C.uint32_t)(sampler)))
}
func (gl *lib) GetTextureSamplerHandleIMG(texture uint32, sampler uint32) uint64 {
	return (uint64)(C.gllCall_glGetTextureSamplerHandleIMG(gl.glGetTextureSamplerHandleIMG, (C.uint32_t)(texture), (C.uint32_t)(sampler)))
}
func (gl *lib) GetTextureSamplerHandleNV(texture uint32, sampler uint32) uint64 {
	return (uint64)(C.gllCall_glGetTextureSamplerHandleNV(gl.glGetTextureSamplerHandleNV, (C.uint32_t)(texture), (C.uint32_t)(sampler)))
}
func (gl *lib) GetTextureSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, bufSize int32, pixels unsafe.Pointer) {
	C.gllCall_glGetTextureSubImage(gl.glGetTextureSubImage, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(pixels))
}
func (gl *lib) GetTrackMatrixivNV(target uint32, address uint32, pname uint32, params *int32) {
	C.gllCall_glGetTrackMatrixivNV(gl.glGetTrackMatrixivNV, (C.uint32_t)(target), (C.uint32_t)(address), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8) {
	C.gllCall_glGetTransformFeedbackVarying(gl.glGetTransformFeedbackVarying, (C.uint32_t)(program), (C.uint32_t)(index), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.int32_t)(unsafe.Pointer(size)), (*C.uint32_t)(unsafe.Pointer(type_)), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) GetTransformFeedbackVaryingEXT(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8) {
	C.gllCall_glGetTransformFeedbackVaryingEXT(gl.glGetTransformFeedbackVaryingEXT, (C.uint32_t)(program), (C.uint32_t)(index), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.int32_t)(unsafe.Pointer(size)), (*C.uint32_t)(unsafe.Pointer(type_)), (*C.uint8_t)(unsafe.Pointer(name)))
}
func (gl *lib) GetTransformFeedbackVaryingNV(program uint32, index uint32, location *int32) {
	C.gllCall_glGetTransformFeedbackVaryingNV(gl.glGetTransformFeedbackVaryingNV, (C.uint32_t)(program), (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(location)))
}
func (gl *lib) GetTransformFeedbacki64_v(xfb uint32, pname uint32, index uint32, param *int64) {
	C.gllCall_glGetTransformFeedbacki64_v(gl.glGetTransformFeedbacki64_v, (C.uint32_t)(xfb), (C.uint32_t)(pname), (C.uint32_t)(index), (*C.int64_t)(unsafe.Pointer(param)))
}
func (gl *lib) GetTransformFeedbacki_v(xfb uint32, pname uint32, index uint32, param *int32) {
	C.gllCall_glGetTransformFeedbacki_v(gl.glGetTransformFeedbacki_v, (C.uint32_t)(xfb), (C.uint32_t)(pname), (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) GetTransformFeedbackiv(xfb uint32, pname uint32, param *int32) {
	C.gllCall_glGetTransformFeedbackiv(gl.glGetTransformFeedbackiv, (C.uint32_t)(xfb), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) GetTranslatedShaderSourceANGLE(shader uint32, bufSize int32, length *int32, source *uint8) {
	C.gllCall_glGetTranslatedShaderSourceANGLE(gl.glGetTranslatedShaderSourceANGLE, (C.uint32_t)(shader), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(length)), (*C.uint8_t)(unsafe.Pointer(source)))
}
func (gl *lib) GetUniformBlockIndex(program uint32, uniformBlockName *uint8) uint32 {
	return (uint32)(C.gllCall_glGetUniformBlockIndex(gl.glGetUniformBlockIndex, (C.uint32_t)(program), (*C.uint8_t)(unsafe.Pointer(uniformBlockName))))
}
func (gl *lib) GetUniformBufferSizeEXT(program uint32, location int32) int32 {
	return (int32)(C.gllCall_glGetUniformBufferSizeEXT(gl.glGetUniformBufferSizeEXT, (C.uint32_t)(program), (C.int32_t)(location)))
}
func (gl *lib) GetUniformIndices(program uint32, uniformCount int32, uniformNames **uint8, uniformIndices *uint32) {
	C.gllCall_glGetUniformIndices(gl.glGetUniformIndices, (C.uint32_t)(program), (C.int32_t)(uniformCount), (**C.uint8_t)(unsafe.Pointer(uniformNames)), (*C.uint32_t)(unsafe.Pointer(uniformIndices)))
}
func (gl *lib) GetUniformLocation(program uint32, name *uint8) int32 {
	return (int32)(C.gllCall_glGetUniformLocation(gl.glGetUniformLocation, (C.uint32_t)(program), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetUniformLocationARB(programObj GLhandleARB, name *uint8) int32 {
	return (int32)(C.gllCall_glGetUniformLocationARB(gl.glGetUniformLocationARB, (C.GLhandleARB)(programObj), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetUniformOffsetEXT(program uint32, location int32) uintptr {
	return (uintptr)(C.gllCall_glGetUniformOffsetEXT(gl.glGetUniformOffsetEXT, (C.uint32_t)(program), (C.int32_t)(location)))
}
func (gl *lib) GetUniformSubroutineuiv(shadertype uint32, location int32, params *uint32) {
	C.gllCall_glGetUniformSubroutineuiv(gl.glGetUniformSubroutineuiv, (C.uint32_t)(shadertype), (C.int32_t)(location), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetUniformdv(program uint32, location int32, params *float64) {
	C.gllCall_glGetUniformdv(gl.glGetUniformdv, (C.uint32_t)(program), (C.int32_t)(location), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetUniformfv(program uint32, location int32, params *float32) {
	C.gllCall_glGetUniformfv(gl.glGetUniformfv, (C.uint32_t)(program), (C.int32_t)(location), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetUniformfvARB(programObj GLhandleARB, location int32, params *float32) {
	C.gllCall_glGetUniformfvARB(gl.glGetUniformfvARB, (C.GLhandleARB)(programObj), (C.int32_t)(location), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetUniformi64vARB(program uint32, location int32, params *int64) {
	C.gllCall_glGetUniformi64vARB(gl.glGetUniformi64vARB, (C.uint32_t)(program), (C.int32_t)(location), (*C.int64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetUniformi64vNV(program uint32, location int32, params *int64) {
	C.gllCall_glGetUniformi64vNV(gl.glGetUniformi64vNV, (C.uint32_t)(program), (C.int32_t)(location), (*C.int64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetUniformiv(program uint32, location int32, params *int32) {
	C.gllCall_glGetUniformiv(gl.glGetUniformiv, (C.uint32_t)(program), (C.int32_t)(location), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetUniformivARB(programObj GLhandleARB, location int32, params *int32) {
	C.gllCall_glGetUniformivARB(gl.glGetUniformivARB, (C.GLhandleARB)(programObj), (C.int32_t)(location), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetUniformui64vARB(program uint32, location int32, params *uint64) {
	C.gllCall_glGetUniformui64vARB(gl.glGetUniformui64vARB, (C.uint32_t)(program), (C.int32_t)(location), (*C.uint64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetUniformui64vNV(program uint32, location int32, params *uint64) {
	C.gllCall_glGetUniformui64vNV(gl.glGetUniformui64vNV, (C.uint32_t)(program), (C.int32_t)(location), (*C.uint64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetUniformuiv(program uint32, location int32, params *uint32) {
	C.gllCall_glGetUniformuiv(gl.glGetUniformuiv, (C.uint32_t)(program), (C.int32_t)(location), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetUniformuivEXT(program uint32, location int32, params *uint32) {
	C.gllCall_glGetUniformuivEXT(gl.glGetUniformuivEXT, (C.uint32_t)(program), (C.int32_t)(location), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetUnsignedBytevEXT(pname uint32, data *uint8) {
	C.gllCall_glGetUnsignedBytevEXT(gl.glGetUnsignedBytevEXT, (C.uint32_t)(pname), (*C.uint8_t)(unsafe.Pointer(data)))
}
func (gl *lib) GetUnsignedBytei_vEXT(target uint32, index uint32, data *uint8) {
	C.gllCall_glGetUnsignedBytei_vEXT(gl.glGetUnsignedBytei_vEXT, (C.uint32_t)(target), (C.uint32_t)(index), (*C.uint8_t)(unsafe.Pointer(data)))
}
func (gl *lib) GetVariantArrayObjectfvATI(id uint32, pname uint32, params *float32) {
	C.gllCall_glGetVariantArrayObjectfvATI(gl.glGetVariantArrayObjectfvATI, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetVariantArrayObjectivATI(id uint32, pname uint32, params *int32) {
	C.gllCall_glGetVariantArrayObjectivATI(gl.glGetVariantArrayObjectivATI, (C.uint32_t)(id), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVariantBooleanvEXT(id uint32, value uint32, data *bool) {
	C.gllCall_glGetVariantBooleanvEXT(gl.glGetVariantBooleanvEXT, (C.uint32_t)(id), (C.uint32_t)(value), (*C._Bool)(unsafe.Pointer(data)))
}
func (gl *lib) GetVariantFloatvEXT(id uint32, value uint32, data *float32) {
	C.gllCall_glGetVariantFloatvEXT(gl.glGetVariantFloatvEXT, (C.uint32_t)(id), (C.uint32_t)(value), (*C.float)(unsafe.Pointer(data)))
}
func (gl *lib) GetVariantIntegervEXT(id uint32, value uint32, data *int32) {
	C.gllCall_glGetVariantIntegervEXT(gl.glGetVariantIntegervEXT, (C.uint32_t)(id), (C.uint32_t)(value), (*C.int32_t)(unsafe.Pointer(data)))
}
func (gl *lib) GetVariantPointervEXT(id uint32, value uint32, data *unsafe.Pointer) {
	C.gllCall_glGetVariantPointervEXT(gl.glGetVariantPointervEXT, (C.uint32_t)(id), (C.uint32_t)(value), (*unsafe.Pointer)(unsafe.Pointer(data)))
}
func (gl *lib) GetVaryingLocationNV(program uint32, name *uint8) int32 {
	return (int32)(C.gllCall_glGetVaryingLocationNV(gl.glGetVaryingLocationNV, (C.uint32_t)(program), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) GetVertexArrayIndexed64iv(vaobj uint32, index uint32, pname uint32, param *int64) {
	C.gllCall_glGetVertexArrayIndexed64iv(gl.glGetVertexArrayIndexed64iv, (C.uint32_t)(vaobj), (C.uint32_t)(index), (C.uint32_t)(pname), (*C.int64_t)(unsafe.Pointer(param)))
}
func (gl *lib) GetVertexArrayIndexediv(vaobj uint32, index uint32, pname uint32, param *int32) {
	C.gllCall_glGetVertexArrayIndexediv(gl.glGetVertexArrayIndexediv, (C.uint32_t)(vaobj), (C.uint32_t)(index), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) GetVertexArrayIntegeri_vEXT(vaobj uint32, index uint32, pname uint32, param *int32) {
	C.gllCall_glGetVertexArrayIntegeri_vEXT(gl.glGetVertexArrayIntegeri_vEXT, (C.uint32_t)(vaobj), (C.uint32_t)(index), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) GetVertexArrayIntegervEXT(vaobj uint32, pname uint32, param *int32) {
	C.gllCall_glGetVertexArrayIntegervEXT(gl.glGetVertexArrayIntegervEXT, (C.uint32_t)(vaobj), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) GetVertexArrayPointeri_vEXT(vaobj uint32, index uint32, pname uint32, param *unsafe.Pointer) {
	C.gllCall_glGetVertexArrayPointeri_vEXT(gl.glGetVertexArrayPointeri_vEXT, (C.uint32_t)(vaobj), (C.uint32_t)(index), (C.uint32_t)(pname), (*unsafe.Pointer)(unsafe.Pointer(param)))
}
func (gl *lib) GetVertexArrayPointervEXT(vaobj uint32, pname uint32, param *unsafe.Pointer) {
	C.gllCall_glGetVertexArrayPointervEXT(gl.glGetVertexArrayPointervEXT, (C.uint32_t)(vaobj), (C.uint32_t)(pname), (*unsafe.Pointer)(unsafe.Pointer(param)))
}
func (gl *lib) GetVertexArrayiv(vaobj uint32, pname uint32, param *int32) {
	C.gllCall_glGetVertexArrayiv(gl.glGetVertexArrayiv, (C.uint32_t)(vaobj), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) GetVertexAttribArrayObjectfvATI(index uint32, pname uint32, params *float32) {
	C.gllCall_glGetVertexAttribArrayObjectfvATI(gl.glGetVertexAttribArrayObjectfvATI, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribArrayObjectivATI(index uint32, pname uint32, params *int32) {
	C.gllCall_glGetVertexAttribArrayObjectivATI(gl.glGetVertexAttribArrayObjectivATI, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribIiv(index uint32, pname uint32, params *int32) {
	C.gllCall_glGetVertexAttribIiv(gl.glGetVertexAttribIiv, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribIivEXT(index uint32, pname uint32, params *int32) {
	C.gllCall_glGetVertexAttribIivEXT(gl.glGetVertexAttribIivEXT, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribIuiv(index uint32, pname uint32, params *uint32) {
	C.gllCall_glGetVertexAttribIuiv(gl.glGetVertexAttribIuiv, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribIuivEXT(index uint32, pname uint32, params *uint32) {
	C.gllCall_glGetVertexAttribIuivEXT(gl.glGetVertexAttribIuivEXT, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribLdv(index uint32, pname uint32, params *float64) {
	C.gllCall_glGetVertexAttribLdv(gl.glGetVertexAttribLdv, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribLdvEXT(index uint32, pname uint32, params *float64) {
	C.gllCall_glGetVertexAttribLdvEXT(gl.glGetVertexAttribLdvEXT, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribLi64vNV(index uint32, pname uint32, params *int64) {
	C.gllCall_glGetVertexAttribLi64vNV(gl.glGetVertexAttribLi64vNV, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.int64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribLui64vARB(index uint32, pname uint32, params *uint64) {
	C.gllCall_glGetVertexAttribLui64vARB(gl.glGetVertexAttribLui64vARB, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.uint64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribLui64vNV(index uint32, pname uint32, params *uint64) {
	C.gllCall_glGetVertexAttribLui64vNV(gl.glGetVertexAttribLui64vNV, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.uint64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer) {
	C.gllCall_glGetVertexAttribPointerv(gl.glGetVertexAttribPointerv, (C.uint32_t)(index), (C.uint32_t)(pname), (*unsafe.Pointer)(unsafe.Pointer(pointer)))
}
func (gl *lib) GetVertexAttribPointervARB(index uint32, pname uint32, pointer *unsafe.Pointer) {
	C.gllCall_glGetVertexAttribPointervARB(gl.glGetVertexAttribPointervARB, (C.uint32_t)(index), (C.uint32_t)(pname), (*unsafe.Pointer)(unsafe.Pointer(pointer)))
}
func (gl *lib) GetVertexAttribPointervNV(index uint32, pname uint32, pointer *unsafe.Pointer) {
	C.gllCall_glGetVertexAttribPointervNV(gl.glGetVertexAttribPointervNV, (C.uint32_t)(index), (C.uint32_t)(pname), (*unsafe.Pointer)(unsafe.Pointer(pointer)))
}
func (gl *lib) GetVertexAttribdv(index uint32, pname uint32, params *float64) {
	C.gllCall_glGetVertexAttribdv(gl.glGetVertexAttribdv, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribdvARB(index uint32, pname uint32, params *float64) {
	C.gllCall_glGetVertexAttribdvARB(gl.glGetVertexAttribdvARB, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribdvNV(index uint32, pname uint32, params *float64) {
	C.gllCall_glGetVertexAttribdvNV(gl.glGetVertexAttribdvNV, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribfv(index uint32, pname uint32, params *float32) {
	C.gllCall_glGetVertexAttribfv(gl.glGetVertexAttribfv, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribfvARB(index uint32, pname uint32, params *float32) {
	C.gllCall_glGetVertexAttribfvARB(gl.glGetVertexAttribfvARB, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribfvNV(index uint32, pname uint32, params *float32) {
	C.gllCall_glGetVertexAttribfvNV(gl.glGetVertexAttribfvNV, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribiv(index uint32, pname uint32, params *int32) {
	C.gllCall_glGetVertexAttribiv(gl.glGetVertexAttribiv, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribivARB(index uint32, pname uint32, params *int32) {
	C.gllCall_glGetVertexAttribivARB(gl.glGetVertexAttribivARB, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVertexAttribivNV(index uint32, pname uint32, params *int32) {
	C.gllCall_glGetVertexAttribivNV(gl.glGetVertexAttribivNV, (C.uint32_t)(index), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVideoCaptureStreamdvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float64) {
	C.gllCall_glGetVideoCaptureStreamdvNV(gl.glGetVideoCaptureStreamdvNV, (C.uint32_t)(video_capture_slot), (C.uint32_t)(stream), (C.uint32_t)(pname), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetVideoCaptureStreamfvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float32) {
	C.gllCall_glGetVideoCaptureStreamfvNV(gl.glGetVideoCaptureStreamfvNV, (C.uint32_t)(video_capture_slot), (C.uint32_t)(stream), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetVideoCaptureStreamivNV(video_capture_slot uint32, stream uint32, pname uint32, params *int32) {
	C.gllCall_glGetVideoCaptureStreamivNV(gl.glGetVideoCaptureStreamivNV, (C.uint32_t)(video_capture_slot), (C.uint32_t)(stream), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVideoCaptureivNV(video_capture_slot uint32, pname uint32, params *int32) {
	C.gllCall_glGetVideoCaptureivNV(gl.glGetVideoCaptureivNV, (C.uint32_t)(video_capture_slot), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVideoi64vNV(video_slot uint32, pname uint32, params *int64) {
	C.gllCall_glGetVideoi64vNV(gl.glGetVideoi64vNV, (C.uint32_t)(video_slot), (C.uint32_t)(pname), (*C.int64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVideoivNV(video_slot uint32, pname uint32, params *int32) {
	C.gllCall_glGetVideoivNV(gl.glGetVideoivNV, (C.uint32_t)(video_slot), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVideoui64vNV(video_slot uint32, pname uint32, params *uint64) {
	C.gllCall_glGetVideoui64vNV(gl.glGetVideoui64vNV, (C.uint32_t)(video_slot), (C.uint32_t)(pname), (*C.uint64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetVideouivNV(video_slot uint32, pname uint32, params *uint32) {
	C.gllCall_glGetVideouivNV(gl.glGetVideouivNV, (C.uint32_t)(video_slot), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetnColorTable(target uint32, format uint32, type_ uint32, bufSize int32, table unsafe.Pointer) {
	C.gllCall_glGetnColorTable(gl.glGetnColorTable, (C.uint32_t)(target), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(table))
}
func (gl *lib) GetnColorTableARB(target uint32, format uint32, type_ uint32, bufSize int32, table unsafe.Pointer) {
	C.gllCall_glGetnColorTableARB(gl.glGetnColorTableARB, (C.uint32_t)(target), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(table))
}
func (gl *lib) GetnCompressedTexImage(target uint32, lod int32, bufSize int32, pixels unsafe.Pointer) {
	C.gllCall_glGetnCompressedTexImage(gl.glGetnCompressedTexImage, (C.uint32_t)(target), (C.int32_t)(lod), (C.int32_t)(bufSize), (unsafe.Pointer)(pixels))
}
func (gl *lib) GetnCompressedTexImageARB(target uint32, lod int32, bufSize int32, img unsafe.Pointer) {
	C.gllCall_glGetnCompressedTexImageARB(gl.glGetnCompressedTexImageARB, (C.uint32_t)(target), (C.int32_t)(lod), (C.int32_t)(bufSize), (unsafe.Pointer)(img))
}
func (gl *lib) GetnConvolutionFilter(target uint32, format uint32, type_ uint32, bufSize int32, image unsafe.Pointer) {
	C.gllCall_glGetnConvolutionFilter(gl.glGetnConvolutionFilter, (C.uint32_t)(target), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(image))
}
func (gl *lib) GetnConvolutionFilterARB(target uint32, format uint32, type_ uint32, bufSize int32, image unsafe.Pointer) {
	C.gllCall_glGetnConvolutionFilterARB(gl.glGetnConvolutionFilterARB, (C.uint32_t)(target), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(image))
}
func (gl *lib) GetnHistogram(target uint32, reset bool, format uint32, type_ uint32, bufSize int32, values unsafe.Pointer) {
	C.gllCall_glGetnHistogram(gl.glGetnHistogram, (C.uint32_t)(target), (C._Bool)(reset), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(values))
}
func (gl *lib) GetnHistogramARB(target uint32, reset bool, format uint32, type_ uint32, bufSize int32, values unsafe.Pointer) {
	C.gllCall_glGetnHistogramARB(gl.glGetnHistogramARB, (C.uint32_t)(target), (C._Bool)(reset), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(values))
}
func (gl *lib) GetnMapdv(target uint32, query uint32, bufSize int32, v *float64) {
	C.gllCall_glGetnMapdv(gl.glGetnMapdv, (C.uint32_t)(target), (C.uint32_t)(query), (C.int32_t)(bufSize), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) GetnMapdvARB(target uint32, query uint32, bufSize int32, v *float64) {
	C.gllCall_glGetnMapdvARB(gl.glGetnMapdvARB, (C.uint32_t)(target), (C.uint32_t)(query), (C.int32_t)(bufSize), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) GetnMapfv(target uint32, query uint32, bufSize int32, v *float32) {
	C.gllCall_glGetnMapfv(gl.glGetnMapfv, (C.uint32_t)(target), (C.uint32_t)(query), (C.int32_t)(bufSize), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) GetnMapfvARB(target uint32, query uint32, bufSize int32, v *float32) {
	C.gllCall_glGetnMapfvARB(gl.glGetnMapfvARB, (C.uint32_t)(target), (C.uint32_t)(query), (C.int32_t)(bufSize), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) GetnMapiv(target uint32, query uint32, bufSize int32, v *int32) {
	C.gllCall_glGetnMapiv(gl.glGetnMapiv, (C.uint32_t)(target), (C.uint32_t)(query), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) GetnMapivARB(target uint32, query uint32, bufSize int32, v *int32) {
	C.gllCall_glGetnMapivARB(gl.glGetnMapivARB, (C.uint32_t)(target), (C.uint32_t)(query), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) GetnMinmax(target uint32, reset bool, format uint32, type_ uint32, bufSize int32, values unsafe.Pointer) {
	C.gllCall_glGetnMinmax(gl.glGetnMinmax, (C.uint32_t)(target), (C._Bool)(reset), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(values))
}
func (gl *lib) GetnMinmaxARB(target uint32, reset bool, format uint32, type_ uint32, bufSize int32, values unsafe.Pointer) {
	C.gllCall_glGetnMinmaxARB(gl.glGetnMinmaxARB, (C.uint32_t)(target), (C._Bool)(reset), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(values))
}
func (gl *lib) GetnPixelMapfv(map_ uint32, bufSize int32, values *float32) {
	C.gllCall_glGetnPixelMapfv(gl.glGetnPixelMapfv, (C.uint32_t)(map_), (C.int32_t)(bufSize), (*C.float)(unsafe.Pointer(values)))
}
func (gl *lib) GetnPixelMapfvARB(map_ uint32, bufSize int32, values *float32) {
	C.gllCall_glGetnPixelMapfvARB(gl.glGetnPixelMapfvARB, (C.uint32_t)(map_), (C.int32_t)(bufSize), (*C.float)(unsafe.Pointer(values)))
}
func (gl *lib) GetnPixelMapuiv(map_ uint32, bufSize int32, values *uint32) {
	C.gllCall_glGetnPixelMapuiv(gl.glGetnPixelMapuiv, (C.uint32_t)(map_), (C.int32_t)(bufSize), (*C.uint32_t)(unsafe.Pointer(values)))
}
func (gl *lib) GetnPixelMapuivARB(map_ uint32, bufSize int32, values *uint32) {
	C.gllCall_glGetnPixelMapuivARB(gl.glGetnPixelMapuivARB, (C.uint32_t)(map_), (C.int32_t)(bufSize), (*C.uint32_t)(unsafe.Pointer(values)))
}
func (gl *lib) GetnPixelMapusv(map_ uint32, bufSize int32, values *uint16) {
	C.gllCall_glGetnPixelMapusv(gl.glGetnPixelMapusv, (C.uint32_t)(map_), (C.int32_t)(bufSize), (*C.uint16_t)(unsafe.Pointer(values)))
}
func (gl *lib) GetnPixelMapusvARB(map_ uint32, bufSize int32, values *uint16) {
	C.gllCall_glGetnPixelMapusvARB(gl.glGetnPixelMapusvARB, (C.uint32_t)(map_), (C.int32_t)(bufSize), (*C.uint16_t)(unsafe.Pointer(values)))
}
func (gl *lib) GetnPolygonStipple(bufSize int32, pattern *uint8) {
	C.gllCall_glGetnPolygonStipple(gl.glGetnPolygonStipple, (C.int32_t)(bufSize), (*C.uint8_t)(unsafe.Pointer(pattern)))
}
func (gl *lib) GetnPolygonStippleARB(bufSize int32, pattern *uint8) {
	C.gllCall_glGetnPolygonStippleARB(gl.glGetnPolygonStippleARB, (C.int32_t)(bufSize), (*C.uint8_t)(unsafe.Pointer(pattern)))
}
func (gl *lib) GetnSeparableFilter(target uint32, format uint32, type_ uint32, rowBufSize int32, row unsafe.Pointer, columnBufSize int32, column unsafe.Pointer, span unsafe.Pointer) {
	C.gllCall_glGetnSeparableFilter(gl.glGetnSeparableFilter, (C.uint32_t)(target), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(rowBufSize), (unsafe.Pointer)(row), (C.int32_t)(columnBufSize), (unsafe.Pointer)(column), (unsafe.Pointer)(span))
}
func (gl *lib) GetnSeparableFilterARB(target uint32, format uint32, type_ uint32, rowBufSize int32, row unsafe.Pointer, columnBufSize int32, column unsafe.Pointer, span unsafe.Pointer) {
	C.gllCall_glGetnSeparableFilterARB(gl.glGetnSeparableFilterARB, (C.uint32_t)(target), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(rowBufSize), (unsafe.Pointer)(row), (C.int32_t)(columnBufSize), (unsafe.Pointer)(column), (unsafe.Pointer)(span))
}
func (gl *lib) GetnTexImage(target uint32, level int32, format uint32, type_ uint32, bufSize int32, pixels unsafe.Pointer) {
	C.gllCall_glGetnTexImage(gl.glGetnTexImage, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(pixels))
}
func (gl *lib) GetnTexImageARB(target uint32, level int32, format uint32, type_ uint32, bufSize int32, img unsafe.Pointer) {
	C.gllCall_glGetnTexImageARB(gl.glGetnTexImageARB, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(img))
}
func (gl *lib) GetnUniformdv(program uint32, location int32, bufSize int32, params *float64) {
	C.gllCall_glGetnUniformdv(gl.glGetnUniformdv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetnUniformdvARB(program uint32, location int32, bufSize int32, params *float64) {
	C.gllCall_glGetnUniformdvARB(gl.glGetnUniformdvARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) GetnUniformfv(program uint32, location int32, bufSize int32, params *float32) {
	C.gllCall_glGetnUniformfv(gl.glGetnUniformfv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetnUniformfvARB(program uint32, location int32, bufSize int32, params *float32) {
	C.gllCall_glGetnUniformfvARB(gl.glGetnUniformfvARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetnUniformfvEXT(program uint32, location int32, bufSize int32, params *float32) {
	C.gllCall_glGetnUniformfvEXT(gl.glGetnUniformfvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetnUniformfvKHR(program uint32, location int32, bufSize int32, params *float32) {
	C.gllCall_glGetnUniformfvKHR(gl.glGetnUniformfvKHR, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) GetnUniformi64vARB(program uint32, location int32, bufSize int32, params *int64) {
	C.gllCall_glGetnUniformi64vARB(gl.glGetnUniformi64vARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.int64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetnUniformiv(program uint32, location int32, bufSize int32, params *int32) {
	C.gllCall_glGetnUniformiv(gl.glGetnUniformiv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetnUniformivARB(program uint32, location int32, bufSize int32, params *int32) {
	C.gllCall_glGetnUniformivARB(gl.glGetnUniformivARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetnUniformivEXT(program uint32, location int32, bufSize int32, params *int32) {
	C.gllCall_glGetnUniformivEXT(gl.glGetnUniformivEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetnUniformivKHR(program uint32, location int32, bufSize int32, params *int32) {
	C.gllCall_glGetnUniformivKHR(gl.glGetnUniformivKHR, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetnUniformui64vARB(program uint32, location int32, bufSize int32, params *uint64) {
	C.gllCall_glGetnUniformui64vARB(gl.glGetnUniformui64vARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.uint64_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetnUniformuiv(program uint32, location int32, bufSize int32, params *uint32) {
	C.gllCall_glGetnUniformuiv(gl.glGetnUniformuiv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetnUniformuivARB(program uint32, location int32, bufSize int32, params *uint32) {
	C.gllCall_glGetnUniformuivARB(gl.glGetnUniformuivARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GetnUniformuivKHR(program uint32, location int32, bufSize int32, params *uint32) {
	C.gllCall_glGetnUniformuivKHR(gl.glGetnUniformuivKHR, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(bufSize), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) GlobalAlphaFactorbSUN(factor int8) {
	C.gllCall_glGlobalAlphaFactorbSUN(gl.glGlobalAlphaFactorbSUN, (C.int8_t)(factor))
}
func (gl *lib) GlobalAlphaFactordSUN(factor float64) {
	C.gllCall_glGlobalAlphaFactordSUN(gl.glGlobalAlphaFactordSUN, (C.double)(factor))
}
func (gl *lib) GlobalAlphaFactorfSUN(factor float32) {
	C.gllCall_glGlobalAlphaFactorfSUN(gl.glGlobalAlphaFactorfSUN, (C.float)(factor))
}
func (gl *lib) GlobalAlphaFactoriSUN(factor int32) {
	C.gllCall_glGlobalAlphaFactoriSUN(gl.glGlobalAlphaFactoriSUN, (C.int32_t)(factor))
}
func (gl *lib) GlobalAlphaFactorsSUN(factor int16) {
	C.gllCall_glGlobalAlphaFactorsSUN(gl.glGlobalAlphaFactorsSUN, (C.int16_t)(factor))
}
func (gl *lib) GlobalAlphaFactorubSUN(factor uint8) {
	C.gllCall_glGlobalAlphaFactorubSUN(gl.glGlobalAlphaFactorubSUN, (C.uint8_t)(factor))
}
func (gl *lib) GlobalAlphaFactoruiSUN(factor uint32) {
	C.gllCall_glGlobalAlphaFactoruiSUN(gl.glGlobalAlphaFactoruiSUN, (C.uint32_t)(factor))
}
func (gl *lib) GlobalAlphaFactorusSUN(factor uint16) {
	C.gllCall_glGlobalAlphaFactorusSUN(gl.glGlobalAlphaFactorusSUN, (C.uint16_t)(factor))
}
func (gl *lib) Hint(target uint32, mode uint32) {
	C.gllCall_glHint(gl.glHint, (C.uint32_t)(target), (C.uint32_t)(mode))
}
func (gl *lib) HintPGI(target uint32, mode int32) {
	C.gllCall_glHintPGI(gl.glHintPGI, (C.uint32_t)(target), (C.int32_t)(mode))
}
func (gl *lib) Histogram(target uint32, width int32, internalformat uint32, sink bool) {
	C.gllCall_glHistogram(gl.glHistogram, (C.uint32_t)(target), (C.int32_t)(width), (C.uint32_t)(internalformat), (C._Bool)(sink))
}
func (gl *lib) HistogramEXT(target uint32, width int32, internalformat uint32, sink bool) {
	C.gllCall_glHistogramEXT(gl.glHistogramEXT, (C.uint32_t)(target), (C.int32_t)(width), (C.uint32_t)(internalformat), (C._Bool)(sink))
}
func (gl *lib) IglooInterfaceSGIX(pname uint32, params unsafe.Pointer) {
	C.gllCall_glIglooInterfaceSGIX(gl.glIglooInterfaceSGIX, (C.uint32_t)(pname), (unsafe.Pointer)(params))
}
func (gl *lib) ImageTransformParameterfHP(target uint32, pname uint32, param float32) {
	C.gllCall_glImageTransformParameterfHP(gl.glImageTransformParameterfHP, (C.uint32_t)(target), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) ImageTransformParameterfvHP(target uint32, pname uint32, params *float32) {
	C.gllCall_glImageTransformParameterfvHP(gl.glImageTransformParameterfvHP, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) ImageTransformParameteriHP(target uint32, pname uint32, param int32) {
	C.gllCall_glImageTransformParameteriHP(gl.glImageTransformParameteriHP, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) ImageTransformParameterivHP(target uint32, pname uint32, params *int32) {
	C.gllCall_glImageTransformParameterivHP(gl.glImageTransformParameterivHP, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ImportMemoryFdEXT(memory uint32, size uint64, handleType uint32, fd int32) {
	C.gllCall_glImportMemoryFdEXT(gl.glImportMemoryFdEXT, (C.uint32_t)(memory), (C.uint64_t)(size), (C.uint32_t)(handleType), (C.int32_t)(fd))
}
func (gl *lib) ImportMemoryWin32HandleEXT(memory uint32, size uint64, handleType uint32, handle unsafe.Pointer) {
	C.gllCall_glImportMemoryWin32HandleEXT(gl.glImportMemoryWin32HandleEXT, (C.uint32_t)(memory), (C.uint64_t)(size), (C.uint32_t)(handleType), (unsafe.Pointer)(handle))
}
func (gl *lib) ImportMemoryWin32NameEXT(memory uint32, size uint64, handleType uint32, name unsafe.Pointer) {
	C.gllCall_glImportMemoryWin32NameEXT(gl.glImportMemoryWin32NameEXT, (C.uint32_t)(memory), (C.uint64_t)(size), (C.uint32_t)(handleType), (unsafe.Pointer)(name))
}
func (gl *lib) ImportSemaphoreFdEXT(semaphore uint32, handleType uint32, fd int32) {
	C.gllCall_glImportSemaphoreFdEXT(gl.glImportSemaphoreFdEXT, (C.uint32_t)(semaphore), (C.uint32_t)(handleType), (C.int32_t)(fd))
}
func (gl *lib) ImportSemaphoreWin32HandleEXT(semaphore uint32, handleType uint32, handle unsafe.Pointer) {
	C.gllCall_glImportSemaphoreWin32HandleEXT(gl.glImportSemaphoreWin32HandleEXT, (C.uint32_t)(semaphore), (C.uint32_t)(handleType), (unsafe.Pointer)(handle))
}
func (gl *lib) ImportSemaphoreWin32NameEXT(semaphore uint32, handleType uint32, name unsafe.Pointer) {
	C.gllCall_glImportSemaphoreWin32NameEXT(gl.glImportSemaphoreWin32NameEXT, (C.uint32_t)(semaphore), (C.uint32_t)(handleType), (unsafe.Pointer)(name))
}
func (gl *lib) ImportSyncEXT(external_sync_type uint32, external_sync uintptr, flags uint32) GLsync {
	return (GLsync)(C.gllCall_glImportSyncEXT(gl.glImportSyncEXT, (C.uint32_t)(external_sync_type), (C.intptr_t)(external_sync), (C.uint32_t)(flags)))
}
func (gl *lib) IndexFormatNV(type_ uint32, stride int32) {
	C.gllCall_glIndexFormatNV(gl.glIndexFormatNV, (C.uint32_t)(type_), (C.int32_t)(stride))
}
func (gl *lib) IndexFuncEXT(func_ uint32, ref float32) {
	C.gllCall_glIndexFuncEXT(gl.glIndexFuncEXT, (C.uint32_t)(func_), (C.float)(ref))
}
func (gl *lib) IndexMask(mask uint32) {
	C.gllCall_glIndexMask(gl.glIndexMask, (C.uint32_t)(mask))
}
func (gl *lib) IndexMaterialEXT(face uint32, mode uint32) {
	C.gllCall_glIndexMaterialEXT(gl.glIndexMaterialEXT, (C.uint32_t)(face), (C.uint32_t)(mode))
}
func (gl *lib) IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glIndexPointer(gl.glIndexPointer, (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) IndexPointerEXT(type_ uint32, stride int32, count int32, pointer unsafe.Pointer) {
	C.gllCall_glIndexPointerEXT(gl.glIndexPointerEXT, (C.uint32_t)(type_), (C.int32_t)(stride), (C.int32_t)(count), (unsafe.Pointer)(pointer))
}
func (gl *lib) IndexPointerListIBM(type_ uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
	C.gllCall_glIndexPointerListIBM(gl.glIndexPointerListIBM, (C.uint32_t)(type_), (C.int32_t)(stride), (*unsafe.Pointer)(unsafe.Pointer(pointer)), (C.int32_t)(ptrstride))
}
func (gl *lib) Indexd(c float64) {
	C.gllCall_glIndexd(gl.glIndexd, (C.double)(c))
}
func (gl *lib) Indexdv(c *float64) {
	C.gllCall_glIndexdv(gl.glIndexdv, (*C.double)(unsafe.Pointer(c)))
}
func (gl *lib) Indexf(c float32) {
	C.gllCall_glIndexf(gl.glIndexf, (C.float)(c))
}
func (gl *lib) Indexfv(c *float32) {
	C.gllCall_glIndexfv(gl.glIndexfv, (*C.float)(unsafe.Pointer(c)))
}
func (gl *lib) Indexi(c int32) {
	C.gllCall_glIndexi(gl.glIndexi, (C.int32_t)(c))
}
func (gl *lib) Indexiv(c *int32) {
	C.gllCall_glIndexiv(gl.glIndexiv, (*C.int32_t)(unsafe.Pointer(c)))
}
func (gl *lib) Indexs(c int16) {
	C.gllCall_glIndexs(gl.glIndexs, (C.int16_t)(c))
}
func (gl *lib) Indexsv(c *int16) {
	C.gllCall_glIndexsv(gl.glIndexsv, (*C.int16_t)(unsafe.Pointer(c)))
}
func (gl *lib) Indexub(c uint8) {
	C.gllCall_glIndexub(gl.glIndexub, (C.uint8_t)(c))
}
func (gl *lib) Indexubv(c *uint8) {
	C.gllCall_glIndexubv(gl.glIndexubv, (*C.uint8_t)(unsafe.Pointer(c)))
}
func (gl *lib) IndexxOES(component int32) {
	C.gllCall_glIndexxOES(gl.glIndexxOES, (C.int32_t)(component))
}
func (gl *lib) IndexxvOES(component *int32) {
	C.gllCall_glIndexxvOES(gl.glIndexxvOES, (*C.int32_t)(unsafe.Pointer(component)))
}
func (gl *lib) InitNames() {
	C.gllCall_glInitNames(gl.glInitNames)
}
func (gl *lib) InsertComponentEXT(res uint32, src uint32, num uint32) {
	C.gllCall_glInsertComponentEXT(gl.glInsertComponentEXT, (C.uint32_t)(res), (C.uint32_t)(src), (C.uint32_t)(num))
}
func (gl *lib) InsertEventMarkerEXT(length int32, marker *uint8) {
	C.gllCall_glInsertEventMarkerEXT(gl.glInsertEventMarkerEXT, (C.int32_t)(length), (*C.uint8_t)(unsafe.Pointer(marker)))
}
func (gl *lib) InstrumentsBufferSGIX(size int32, buffer *int32) {
	C.gllCall_glInstrumentsBufferSGIX(gl.glInstrumentsBufferSGIX, (C.int32_t)(size), (*C.int32_t)(unsafe.Pointer(buffer)))
}
func (gl *lib) InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glInterleavedArrays(gl.glInterleavedArrays, (C.uint32_t)(format), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) InterpolatePathsNV(resultPath uint32, pathA uint32, pathB uint32, weight float32) {
	C.gllCall_glInterpolatePathsNV(gl.glInterpolatePathsNV, (C.uint32_t)(resultPath), (C.uint32_t)(pathA), (C.uint32_t)(pathB), (C.float)(weight))
}
func (gl *lib) InvalidateBufferData(buffer uint32) {
	C.gllCall_glInvalidateBufferData(gl.glInvalidateBufferData, (C.uint32_t)(buffer))
}
func (gl *lib) InvalidateBufferSubData(buffer uint32, offset uintptr, length int) {
	C.gllCall_glInvalidateBufferSubData(gl.glInvalidateBufferSubData, (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(length))
}
func (gl *lib) InvalidateFramebuffer(target uint32, numAttachments int32, attachments *uint32) {
	C.gllCall_glInvalidateFramebuffer(gl.glInvalidateFramebuffer, (C.uint32_t)(target), (C.int32_t)(numAttachments), (*C.uint32_t)(unsafe.Pointer(attachments)))
}
func (gl *lib) InvalidateNamedFramebufferData(framebuffer uint32, numAttachments int32, attachments *uint32) {
	C.gllCall_glInvalidateNamedFramebufferData(gl.glInvalidateNamedFramebufferData, (C.uint32_t)(framebuffer), (C.int32_t)(numAttachments), (*C.uint32_t)(unsafe.Pointer(attachments)))
}
func (gl *lib) InvalidateNamedFramebufferSubData(framebuffer uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32) {
	C.gllCall_glInvalidateNamedFramebufferSubData(gl.glInvalidateNamedFramebufferSubData, (C.uint32_t)(framebuffer), (C.int32_t)(numAttachments), (*C.uint32_t)(unsafe.Pointer(attachments)), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) InvalidateSubFramebuffer(target uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32) {
	C.gllCall_glInvalidateSubFramebuffer(gl.glInvalidateSubFramebuffer, (C.uint32_t)(target), (C.int32_t)(numAttachments), (*C.uint32_t)(unsafe.Pointer(attachments)), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) InvalidateTexImage(texture uint32, level int32) {
	C.gllCall_glInvalidateTexImage(gl.glInvalidateTexImage, (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) InvalidateTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32) {
	C.gllCall_glInvalidateTexSubImage(gl.glInvalidateTexSubImage, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth))
}
func (gl *lib) IsAsyncMarkerSGIX(marker uint32) bool {
	return (bool)(C.gllCall_glIsAsyncMarkerSGIX(gl.glIsAsyncMarkerSGIX, (C.uint32_t)(marker)))
}
func (gl *lib) IsBuffer(buffer uint32) bool {
	return (bool)(C.gllCall_glIsBuffer(gl.glIsBuffer, (C.uint32_t)(buffer)))
}
func (gl *lib) IsBufferARB(buffer uint32) bool {
	return (bool)(C.gllCall_glIsBufferARB(gl.glIsBufferARB, (C.uint32_t)(buffer)))
}
func (gl *lib) IsBufferResidentNV(target uint32) bool {
	return (bool)(C.gllCall_glIsBufferResidentNV(gl.glIsBufferResidentNV, (C.uint32_t)(target)))
}
func (gl *lib) IsCommandListNV(list uint32) bool {
	return (bool)(C.gllCall_glIsCommandListNV(gl.glIsCommandListNV, (C.uint32_t)(list)))
}
func (gl *lib) IsEnabled(cap uint32) bool {
	return (bool)(C.gllCall_glIsEnabled(gl.glIsEnabled, (C.uint32_t)(cap)))
}
func (gl *lib) IsEnabledIndexedEXT(target uint32, index uint32) bool {
	return (bool)(C.gllCall_glIsEnabledIndexedEXT(gl.glIsEnabledIndexedEXT, (C.uint32_t)(target), (C.uint32_t)(index)))
}
func (gl *lib) IsEnabledi(target uint32, index uint32) bool {
	return (bool)(C.gllCall_glIsEnabledi(gl.glIsEnabledi, (C.uint32_t)(target), (C.uint32_t)(index)))
}
func (gl *lib) IsEnablediEXT(target uint32, index uint32) bool {
	return (bool)(C.gllCall_glIsEnablediEXT(gl.glIsEnablediEXT, (C.uint32_t)(target), (C.uint32_t)(index)))
}
func (gl *lib) IsEnablediNV(target uint32, index uint32) bool {
	return (bool)(C.gllCall_glIsEnablediNV(gl.glIsEnablediNV, (C.uint32_t)(target), (C.uint32_t)(index)))
}
func (gl *lib) IsEnablediOES(target uint32, index uint32) bool {
	return (bool)(C.gllCall_glIsEnablediOES(gl.glIsEnablediOES, (C.uint32_t)(target), (C.uint32_t)(index)))
}
func (gl *lib) IsFenceAPPLE(fence uint32) bool {
	return (bool)(C.gllCall_glIsFenceAPPLE(gl.glIsFenceAPPLE, (C.uint32_t)(fence)))
}
func (gl *lib) IsFenceNV(fence uint32) bool {
	return (bool)(C.gllCall_glIsFenceNV(gl.glIsFenceNV, (C.uint32_t)(fence)))
}
func (gl *lib) IsFramebuffer(framebuffer uint32) bool {
	return (bool)(C.gllCall_glIsFramebuffer(gl.glIsFramebuffer, (C.uint32_t)(framebuffer)))
}
func (gl *lib) IsFramebufferEXT(framebuffer uint32) bool {
	return (bool)(C.gllCall_glIsFramebufferEXT(gl.glIsFramebufferEXT, (C.uint32_t)(framebuffer)))
}
func (gl *lib) IsFramebufferOES(framebuffer uint32) bool {
	return (bool)(C.gllCall_glIsFramebufferOES(gl.glIsFramebufferOES, (C.uint32_t)(framebuffer)))
}
func (gl *lib) IsImageHandleResidentARB(handle uint64) bool {
	return (bool)(C.gllCall_glIsImageHandleResidentARB(gl.glIsImageHandleResidentARB, (C.uint64_t)(handle)))
}
func (gl *lib) IsImageHandleResidentNV(handle uint64) bool {
	return (bool)(C.gllCall_glIsImageHandleResidentNV(gl.glIsImageHandleResidentNV, (C.uint64_t)(handle)))
}
func (gl *lib) IsList(list uint32) bool {
	return (bool)(C.gllCall_glIsList(gl.glIsList, (C.uint32_t)(list)))
}
func (gl *lib) IsMemoryObjectEXT(memoryObject uint32) bool {
	return (bool)(C.gllCall_glIsMemoryObjectEXT(gl.glIsMemoryObjectEXT, (C.uint32_t)(memoryObject)))
}
func (gl *lib) IsNameAMD(identifier uint32, name uint32) bool {
	return (bool)(C.gllCall_glIsNameAMD(gl.glIsNameAMD, (C.uint32_t)(identifier), (C.uint32_t)(name)))
}
func (gl *lib) IsNamedBufferResidentNV(buffer uint32) bool {
	return (bool)(C.gllCall_glIsNamedBufferResidentNV(gl.glIsNamedBufferResidentNV, (C.uint32_t)(buffer)))
}
func (gl *lib) IsNamedStringARB(namelen int32, name *uint8) bool {
	return (bool)(C.gllCall_glIsNamedStringARB(gl.glIsNamedStringARB, (C.int32_t)(namelen), (*C.uint8_t)(unsafe.Pointer(name))))
}
func (gl *lib) IsObjectBufferATI(buffer uint32) bool {
	return (bool)(C.gllCall_glIsObjectBufferATI(gl.glIsObjectBufferATI, (C.uint32_t)(buffer)))
}
func (gl *lib) IsOcclusionQueryNV(id uint32) bool {
	return (bool)(C.gllCall_glIsOcclusionQueryNV(gl.glIsOcclusionQueryNV, (C.uint32_t)(id)))
}
func (gl *lib) IsPathNV(path uint32) bool {
	return (bool)(C.gllCall_glIsPathNV(gl.glIsPathNV, (C.uint32_t)(path)))
}
func (gl *lib) IsPointInFillPathNV(path uint32, mask uint32, x float32, y float32) bool {
	return (bool)(C.gllCall_glIsPointInFillPathNV(gl.glIsPointInFillPathNV, (C.uint32_t)(path), (C.uint32_t)(mask), (C.float)(x), (C.float)(y)))
}
func (gl *lib) IsPointInStrokePathNV(path uint32, x float32, y float32) bool {
	return (bool)(C.gllCall_glIsPointInStrokePathNV(gl.glIsPointInStrokePathNV, (C.uint32_t)(path), (C.float)(x), (C.float)(y)))
}
func (gl *lib) IsProgram(program uint32) bool {
	return (bool)(C.gllCall_glIsProgram(gl.glIsProgram, (C.uint32_t)(program)))
}
func (gl *lib) IsProgramARB(program uint32) bool {
	return (bool)(C.gllCall_glIsProgramARB(gl.glIsProgramARB, (C.uint32_t)(program)))
}
func (gl *lib) IsProgramNV(id uint32) bool {
	return (bool)(C.gllCall_glIsProgramNV(gl.glIsProgramNV, (C.uint32_t)(id)))
}
func (gl *lib) IsProgramPipeline(pipeline uint32) bool {
	return (bool)(C.gllCall_glIsProgramPipeline(gl.glIsProgramPipeline, (C.uint32_t)(pipeline)))
}
func (gl *lib) IsProgramPipelineEXT(pipeline uint32) bool {
	return (bool)(C.gllCall_glIsProgramPipelineEXT(gl.glIsProgramPipelineEXT, (C.uint32_t)(pipeline)))
}
func (gl *lib) IsQuery(id uint32) bool {
	return (bool)(C.gllCall_glIsQuery(gl.glIsQuery, (C.uint32_t)(id)))
}
func (gl *lib) IsQueryARB(id uint32) bool {
	return (bool)(C.gllCall_glIsQueryARB(gl.glIsQueryARB, (C.uint32_t)(id)))
}
func (gl *lib) IsQueryEXT(id uint32) bool {
	return (bool)(C.gllCall_glIsQueryEXT(gl.glIsQueryEXT, (C.uint32_t)(id)))
}
func (gl *lib) IsRenderbuffer(renderbuffer uint32) bool {
	return (bool)(C.gllCall_glIsRenderbuffer(gl.glIsRenderbuffer, (C.uint32_t)(renderbuffer)))
}
func (gl *lib) IsRenderbufferEXT(renderbuffer uint32) bool {
	return (bool)(C.gllCall_glIsRenderbufferEXT(gl.glIsRenderbufferEXT, (C.uint32_t)(renderbuffer)))
}
func (gl *lib) IsRenderbufferOES(renderbuffer uint32) bool {
	return (bool)(C.gllCall_glIsRenderbufferOES(gl.glIsRenderbufferOES, (C.uint32_t)(renderbuffer)))
}
func (gl *lib) IsSemaphoreEXT(semaphore uint32) bool {
	return (bool)(C.gllCall_glIsSemaphoreEXT(gl.glIsSemaphoreEXT, (C.uint32_t)(semaphore)))
}
func (gl *lib) IsSampler(sampler uint32) bool {
	return (bool)(C.gllCall_glIsSampler(gl.glIsSampler, (C.uint32_t)(sampler)))
}
func (gl *lib) IsShader(shader uint32) bool {
	return (bool)(C.gllCall_glIsShader(gl.glIsShader, (C.uint32_t)(shader)))
}
func (gl *lib) IsStateNV(state uint32) bool {
	return (bool)(C.gllCall_glIsStateNV(gl.glIsStateNV, (C.uint32_t)(state)))
}
func (gl *lib) IsSync(sync GLsync) bool {
	return (bool)(C.gllCall_glIsSync(gl.glIsSync, (C.GLsync)(sync)))
}
func (gl *lib) IsSyncAPPLE(sync GLsync) bool {
	return (bool)(C.gllCall_glIsSyncAPPLE(gl.glIsSyncAPPLE, (C.GLsync)(sync)))
}
func (gl *lib) IsTexture(texture uint32) bool {
	return (bool)(C.gllCall_glIsTexture(gl.glIsTexture, (C.uint32_t)(texture)))
}
func (gl *lib) IsTextureEXT(texture uint32) bool {
	return (bool)(C.gllCall_glIsTextureEXT(gl.glIsTextureEXT, (C.uint32_t)(texture)))
}
func (gl *lib) IsTextureHandleResidentARB(handle uint64) bool {
	return (bool)(C.gllCall_glIsTextureHandleResidentARB(gl.glIsTextureHandleResidentARB, (C.uint64_t)(handle)))
}
func (gl *lib) IsTextureHandleResidentNV(handle uint64) bool {
	return (bool)(C.gllCall_glIsTextureHandleResidentNV(gl.glIsTextureHandleResidentNV, (C.uint64_t)(handle)))
}
func (gl *lib) IsTransformFeedback(id uint32) bool {
	return (bool)(C.gllCall_glIsTransformFeedback(gl.glIsTransformFeedback, (C.uint32_t)(id)))
}
func (gl *lib) IsTransformFeedbackNV(id uint32) bool {
	return (bool)(C.gllCall_glIsTransformFeedbackNV(gl.glIsTransformFeedbackNV, (C.uint32_t)(id)))
}
func (gl *lib) IsVariantEnabledEXT(id uint32, cap uint32) bool {
	return (bool)(C.gllCall_glIsVariantEnabledEXT(gl.glIsVariantEnabledEXT, (C.uint32_t)(id), (C.uint32_t)(cap)))
}
func (gl *lib) IsVertexArray(array uint32) bool {
	return (bool)(C.gllCall_glIsVertexArray(gl.glIsVertexArray, (C.uint32_t)(array)))
}
func (gl *lib) IsVertexArrayAPPLE(array uint32) bool {
	return (bool)(C.gllCall_glIsVertexArrayAPPLE(gl.glIsVertexArrayAPPLE, (C.uint32_t)(array)))
}
func (gl *lib) IsVertexArrayOES(array uint32) bool {
	return (bool)(C.gllCall_glIsVertexArrayOES(gl.glIsVertexArrayOES, (C.uint32_t)(array)))
}
func (gl *lib) IsVertexAttribEnabledAPPLE(index uint32, pname uint32) bool {
	return (bool)(C.gllCall_glIsVertexAttribEnabledAPPLE(gl.glIsVertexAttribEnabledAPPLE, (C.uint32_t)(index), (C.uint32_t)(pname)))
}
func (gl *lib) LGPUCopyImageSubDataNVX(sourceGpu uint32, destinationGpuMask uint32, srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srxY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, width int32, height int32, depth int32) {
	C.gllCall_glLGPUCopyImageSubDataNVX(gl.glLGPUCopyImageSubDataNVX, (C.uint32_t)(sourceGpu), (C.uint32_t)(destinationGpuMask), (C.uint32_t)(srcName), (C.uint32_t)(srcTarget), (C.int32_t)(srcLevel), (C.int32_t)(srcX), (C.int32_t)(srxY), (C.int32_t)(srcZ), (C.uint32_t)(dstName), (C.uint32_t)(dstTarget), (C.int32_t)(dstLevel), (C.int32_t)(dstX), (C.int32_t)(dstY), (C.int32_t)(dstZ), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth))
}
func (gl *lib) LGPUInterlockNVX() {
	C.gllCall_glLGPUInterlockNVX(gl.glLGPUInterlockNVX)
}
func (gl *lib) LGPUNamedBufferSubDataNVX(gpuMask uint32, buffer uint32, offset uintptr, size int, data unsafe.Pointer) {
	C.gllCall_glLGPUNamedBufferSubDataNVX(gl.glLGPUNamedBufferSubDataNVX, (C.uint32_t)(gpuMask), (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size), (unsafe.Pointer)(data))
}
func (gl *lib) LabelObjectEXT(type_ uint32, object uint32, length int32, label *uint8) {
	C.gllCall_glLabelObjectEXT(gl.glLabelObjectEXT, (C.uint32_t)(type_), (C.uint32_t)(object), (C.int32_t)(length), (*C.uint8_t)(unsafe.Pointer(label)))
}
func (gl *lib) LightEnviSGIX(pname uint32, param int32) {
	C.gllCall_glLightEnviSGIX(gl.glLightEnviSGIX, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) LightModelf(pname uint32, param float32) {
	C.gllCall_glLightModelf(gl.glLightModelf, (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) LightModelfv(pname uint32, params *float32) {
	C.gllCall_glLightModelfv(gl.glLightModelfv, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) LightModeli(pname uint32, param int32) {
	C.gllCall_glLightModeli(gl.glLightModeli, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) LightModeliv(pname uint32, params *int32) {
	C.gllCall_glLightModeliv(gl.glLightModeliv, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) LightModelx(pname uint32, param int32) {
	C.gllCall_glLightModelx(gl.glLightModelx, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) LightModelxOES(pname uint32, param int32) {
	C.gllCall_glLightModelxOES(gl.glLightModelxOES, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) LightModelxv(pname uint32, param *int32) {
	C.gllCall_glLightModelxv(gl.glLightModelxv, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) LightModelxvOES(pname uint32, param *int32) {
	C.gllCall_glLightModelxvOES(gl.glLightModelxvOES, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) Lightf(light uint32, pname uint32, param float32) {
	C.gllCall_glLightf(gl.glLightf, (C.uint32_t)(light), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) Lightfv(light uint32, pname uint32, params *float32) {
	C.gllCall_glLightfv(gl.glLightfv, (C.uint32_t)(light), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) Lighti(light uint32, pname uint32, param int32) {
	C.gllCall_glLighti(gl.glLighti, (C.uint32_t)(light), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) Lightiv(light uint32, pname uint32, params *int32) {
	C.gllCall_glLightiv(gl.glLightiv, (C.uint32_t)(light), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) Lightx(light uint32, pname uint32, param int32) {
	C.gllCall_glLightx(gl.glLightx, (C.uint32_t)(light), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) LightxOES(light uint32, pname uint32, param int32) {
	C.gllCall_glLightxOES(gl.glLightxOES, (C.uint32_t)(light), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) Lightxv(light uint32, pname uint32, params *int32) {
	C.gllCall_glLightxv(gl.glLightxv, (C.uint32_t)(light), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) LightxvOES(light uint32, pname uint32, params *int32) {
	C.gllCall_glLightxvOES(gl.glLightxvOES, (C.uint32_t)(light), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) LineStipple(factor int32, pattern uint16) {
	C.gllCall_glLineStipple(gl.glLineStipple, (C.int32_t)(factor), (C.uint16_t)(pattern))
}
func (gl *lib) LineWidth(width float32) {
	C.gllCall_glLineWidth(gl.glLineWidth, (C.float)(width))
}
func (gl *lib) LineWidthx(width int32) {
	C.gllCall_glLineWidthx(gl.glLineWidthx, (C.int32_t)(width))
}
func (gl *lib) LineWidthxOES(width int32) {
	C.gllCall_glLineWidthxOES(gl.glLineWidthxOES, (C.int32_t)(width))
}
func (gl *lib) LinkProgram(program uint32) {
	C.gllCall_glLinkProgram(gl.glLinkProgram, (C.uint32_t)(program))
}
func (gl *lib) LinkProgramARB(programObj GLhandleARB) {
	C.gllCall_glLinkProgramARB(gl.glLinkProgramARB, (C.GLhandleARB)(programObj))
}
func (gl *lib) ListBase(base uint32) {
	C.gllCall_glListBase(gl.glListBase, (C.uint32_t)(base))
}
func (gl *lib) ListDrawCommandsStatesClientNV(list uint32, segment uint32, indirects *unsafe.Pointer, sizes *int32, states *uint32, fbos *uint32, count uint32) {
	C.gllCall_glListDrawCommandsStatesClientNV(gl.glListDrawCommandsStatesClientNV, (C.uint32_t)(list), (C.uint32_t)(segment), (*unsafe.Pointer)(unsafe.Pointer(indirects)), (*C.int32_t)(unsafe.Pointer(sizes)), (*C.uint32_t)(unsafe.Pointer(states)), (*C.uint32_t)(unsafe.Pointer(fbos)), (C.uint32_t)(count))
}
func (gl *lib) ListParameterfSGIX(list uint32, pname uint32, param float32) {
	C.gllCall_glListParameterfSGIX(gl.glListParameterfSGIX, (C.uint32_t)(list), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) ListParameterfvSGIX(list uint32, pname uint32, params *float32) {
	C.gllCall_glListParameterfvSGIX(gl.glListParameterfvSGIX, (C.uint32_t)(list), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) ListParameteriSGIX(list uint32, pname uint32, param int32) {
	C.gllCall_glListParameteriSGIX(gl.glListParameteriSGIX, (C.uint32_t)(list), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) ListParameterivSGIX(list uint32, pname uint32, params *int32) {
	C.gllCall_glListParameterivSGIX(gl.glListParameterivSGIX, (C.uint32_t)(list), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) LoadIdentity() {
	C.gllCall_glLoadIdentity(gl.glLoadIdentity)
}
func (gl *lib) LoadIdentityDeformationMapSGIX(mask uint32) {
	C.gllCall_glLoadIdentityDeformationMapSGIX(gl.glLoadIdentityDeformationMapSGIX, (C.uint32_t)(mask))
}
func (gl *lib) LoadMatrixd(m *float64) {
	C.gllCall_glLoadMatrixd(gl.glLoadMatrixd, (*C.double)(unsafe.Pointer(m)))
}
func (gl *lib) LoadMatrixf(m *float32) {
	C.gllCall_glLoadMatrixf(gl.glLoadMatrixf, (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) LoadMatrixx(m *int32) {
	C.gllCall_glLoadMatrixx(gl.glLoadMatrixx, (*C.int32_t)(unsafe.Pointer(m)))
}
func (gl *lib) LoadMatrixxOES(m *int32) {
	C.gllCall_glLoadMatrixxOES(gl.glLoadMatrixxOES, (*C.int32_t)(unsafe.Pointer(m)))
}
func (gl *lib) LoadName(name uint32) {
	C.gllCall_glLoadName(gl.glLoadName, (C.uint32_t)(name))
}
func (gl *lib) LoadPaletteFromModelViewMatrixOES() {
	C.gllCall_glLoadPaletteFromModelViewMatrixOES(gl.glLoadPaletteFromModelViewMatrixOES)
}
func (gl *lib) LoadProgramNV(target uint32, id uint32, len int32, program *uint8) {
	C.gllCall_glLoadProgramNV(gl.glLoadProgramNV, (C.uint32_t)(target), (C.uint32_t)(id), (C.int32_t)(len), (*C.uint8_t)(unsafe.Pointer(program)))
}
func (gl *lib) LoadTransposeMatrixd(m *float64) {
	C.gllCall_glLoadTransposeMatrixd(gl.glLoadTransposeMatrixd, (*C.double)(unsafe.Pointer(m)))
}
func (gl *lib) LoadTransposeMatrixdARB(m *float64) {
	C.gllCall_glLoadTransposeMatrixdARB(gl.glLoadTransposeMatrixdARB, (*C.double)(unsafe.Pointer(m)))
}
func (gl *lib) LoadTransposeMatrixf(m *float32) {
	C.gllCall_glLoadTransposeMatrixf(gl.glLoadTransposeMatrixf, (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) LoadTransposeMatrixfARB(m *float32) {
	C.gllCall_glLoadTransposeMatrixfARB(gl.glLoadTransposeMatrixfARB, (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) LoadTransposeMatrixxOES(m *int32) {
	C.gllCall_glLoadTransposeMatrixxOES(gl.glLoadTransposeMatrixxOES, (*C.int32_t)(unsafe.Pointer(m)))
}
func (gl *lib) LockArraysEXT(first int32, count int32) {
	C.gllCall_glLockArraysEXT(gl.glLockArraysEXT, (C.int32_t)(first), (C.int32_t)(count))
}
func (gl *lib) LogicOp(opcode uint32) {
	C.gllCall_glLogicOp(gl.glLogicOp, (C.uint32_t)(opcode))
}
func (gl *lib) MakeBufferNonResidentNV(target uint32) {
	C.gllCall_glMakeBufferNonResidentNV(gl.glMakeBufferNonResidentNV, (C.uint32_t)(target))
}
func (gl *lib) MakeBufferResidentNV(target uint32, access uint32) {
	C.gllCall_glMakeBufferResidentNV(gl.glMakeBufferResidentNV, (C.uint32_t)(target), (C.uint32_t)(access))
}
func (gl *lib) MakeImageHandleNonResidentARB(handle uint64) {
	C.gllCall_glMakeImageHandleNonResidentARB(gl.glMakeImageHandleNonResidentARB, (C.uint64_t)(handle))
}
func (gl *lib) MakeImageHandleNonResidentNV(handle uint64) {
	C.gllCall_glMakeImageHandleNonResidentNV(gl.glMakeImageHandleNonResidentNV, (C.uint64_t)(handle))
}
func (gl *lib) MakeImageHandleResidentARB(handle uint64, access uint32) {
	C.gllCall_glMakeImageHandleResidentARB(gl.glMakeImageHandleResidentARB, (C.uint64_t)(handle), (C.uint32_t)(access))
}
func (gl *lib) MakeImageHandleResidentNV(handle uint64, access uint32) {
	C.gllCall_glMakeImageHandleResidentNV(gl.glMakeImageHandleResidentNV, (C.uint64_t)(handle), (C.uint32_t)(access))
}
func (gl *lib) MakeNamedBufferNonResidentNV(buffer uint32) {
	C.gllCall_glMakeNamedBufferNonResidentNV(gl.glMakeNamedBufferNonResidentNV, (C.uint32_t)(buffer))
}
func (gl *lib) MakeNamedBufferResidentNV(buffer uint32, access uint32) {
	C.gllCall_glMakeNamedBufferResidentNV(gl.glMakeNamedBufferResidentNV, (C.uint32_t)(buffer), (C.uint32_t)(access))
}
func (gl *lib) MakeTextureHandleNonResidentARB(handle uint64) {
	C.gllCall_glMakeTextureHandleNonResidentARB(gl.glMakeTextureHandleNonResidentARB, (C.uint64_t)(handle))
}
func (gl *lib) MakeTextureHandleNonResidentNV(handle uint64) {
	C.gllCall_glMakeTextureHandleNonResidentNV(gl.glMakeTextureHandleNonResidentNV, (C.uint64_t)(handle))
}
func (gl *lib) MakeTextureHandleResidentARB(handle uint64) {
	C.gllCall_glMakeTextureHandleResidentARB(gl.glMakeTextureHandleResidentARB, (C.uint64_t)(handle))
}
func (gl *lib) MakeTextureHandleResidentNV(handle uint64) {
	C.gllCall_glMakeTextureHandleResidentNV(gl.glMakeTextureHandleResidentNV, (C.uint64_t)(handle))
}
func (gl *lib) Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64) {
	C.gllCall_glMap1d(gl.glMap1d, (C.uint32_t)(target), (C.double)(u1), (C.double)(u2), (C.int32_t)(stride), (C.int32_t)(order), (*C.double)(unsafe.Pointer(points)))
}
func (gl *lib) Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32) {
	C.gllCall_glMap1f(gl.glMap1f, (C.uint32_t)(target), (C.float)(u1), (C.float)(u2), (C.int32_t)(stride), (C.int32_t)(order), (*C.float)(unsafe.Pointer(points)))
}
func (gl *lib) Map1xOES(target uint32, u1 int32, u2 int32, stride int32, order int32, points int32) {
	C.gllCall_glMap1xOES(gl.glMap1xOES, (C.uint32_t)(target), (C.int32_t)(u1), (C.int32_t)(u2), (C.int32_t)(stride), (C.int32_t)(order), (C.int32_t)(points))
}
func (gl *lib) Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64) {
	C.gllCall_glMap2d(gl.glMap2d, (C.uint32_t)(target), (C.double)(u1), (C.double)(u2), (C.int32_t)(ustride), (C.int32_t)(uorder), (C.double)(v1), (C.double)(v2), (C.int32_t)(vstride), (C.int32_t)(vorder), (*C.double)(unsafe.Pointer(points)))
}
func (gl *lib) Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32) {
	C.gllCall_glMap2f(gl.glMap2f, (C.uint32_t)(target), (C.float)(u1), (C.float)(u2), (C.int32_t)(ustride), (C.int32_t)(uorder), (C.float)(v1), (C.float)(v2), (C.int32_t)(vstride), (C.int32_t)(vorder), (*C.float)(unsafe.Pointer(points)))
}
func (gl *lib) Map2xOES(target uint32, u1 int32, u2 int32, ustride int32, uorder int32, v1 int32, v2 int32, vstride int32, vorder int32, points int32) {
	C.gllCall_glMap2xOES(gl.glMap2xOES, (C.uint32_t)(target), (C.int32_t)(u1), (C.int32_t)(u2), (C.int32_t)(ustride), (C.int32_t)(uorder), (C.int32_t)(v1), (C.int32_t)(v2), (C.int32_t)(vstride), (C.int32_t)(vorder), (C.int32_t)(points))
}
func (gl *lib) MapBuffer(target uint32, access uint32) unsafe.Pointer {
	return (unsafe.Pointer)(C.gllCall_glMapBuffer(gl.glMapBuffer, (C.uint32_t)(target), (C.uint32_t)(access)))
}
func (gl *lib) MapBufferARB(target uint32, access uint32) unsafe.Pointer {
	return (unsafe.Pointer)(C.gllCall_glMapBufferARB(gl.glMapBufferARB, (C.uint32_t)(target), (C.uint32_t)(access)))
}
func (gl *lib) MapBufferOES(target uint32, access uint32) unsafe.Pointer {
	return (unsafe.Pointer)(C.gllCall_glMapBufferOES(gl.glMapBufferOES, (C.uint32_t)(target), (C.uint32_t)(access)))
}
func (gl *lib) MapBufferRange(target uint32, offset uintptr, length int, access uint32) unsafe.Pointer {
	return (unsafe.Pointer)(C.gllCall_glMapBufferRange(gl.glMapBufferRange, (C.uint32_t)(target), (C.intptr_t)(offset), (C.ssize_t)(length), (C.uint32_t)(access)))
}
func (gl *lib) MapBufferRangeEXT(target uint32, offset uintptr, length int, access uint32) unsafe.Pointer {
	return (unsafe.Pointer)(C.gllCall_glMapBufferRangeEXT(gl.glMapBufferRangeEXT, (C.uint32_t)(target), (C.intptr_t)(offset), (C.ssize_t)(length), (C.uint32_t)(access)))
}
func (gl *lib) MapControlPointsNV(target uint32, index uint32, type_ uint32, ustride int32, vstride int32, uorder int32, vorder int32, packed bool, points unsafe.Pointer) {
	C.gllCall_glMapControlPointsNV(gl.glMapControlPointsNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(type_), (C.int32_t)(ustride), (C.int32_t)(vstride), (C.int32_t)(uorder), (C.int32_t)(vorder), (C._Bool)(packed), (unsafe.Pointer)(points))
}
func (gl *lib) MapGrid1d(un int32, u1 float64, u2 float64) {
	C.gllCall_glMapGrid1d(gl.glMapGrid1d, (C.int32_t)(un), (C.double)(u1), (C.double)(u2))
}
func (gl *lib) MapGrid1f(un int32, u1 float32, u2 float32) {
	C.gllCall_glMapGrid1f(gl.glMapGrid1f, (C.int32_t)(un), (C.float)(u1), (C.float)(u2))
}
func (gl *lib) MapGrid1xOES(n int32, u1 int32, u2 int32) {
	C.gllCall_glMapGrid1xOES(gl.glMapGrid1xOES, (C.int32_t)(n), (C.int32_t)(u1), (C.int32_t)(u2))
}
func (gl *lib) MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64) {
	C.gllCall_glMapGrid2d(gl.glMapGrid2d, (C.int32_t)(un), (C.double)(u1), (C.double)(u2), (C.int32_t)(vn), (C.double)(v1), (C.double)(v2))
}
func (gl *lib) MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32) {
	C.gllCall_glMapGrid2f(gl.glMapGrid2f, (C.int32_t)(un), (C.float)(u1), (C.float)(u2), (C.int32_t)(vn), (C.float)(v1), (C.float)(v2))
}
func (gl *lib) MapGrid2xOES(n int32, u1 int32, u2 int32, v1 int32, v2 int32) {
	C.gllCall_glMapGrid2xOES(gl.glMapGrid2xOES, (C.int32_t)(n), (C.int32_t)(u1), (C.int32_t)(u2), (C.int32_t)(v1), (C.int32_t)(v2))
}
func (gl *lib) MapNamedBuffer(buffer uint32, access uint32) unsafe.Pointer {
	return (unsafe.Pointer)(C.gllCall_glMapNamedBuffer(gl.glMapNamedBuffer, (C.uint32_t)(buffer), (C.uint32_t)(access)))
}
func (gl *lib) MapNamedBufferEXT(buffer uint32, access uint32) unsafe.Pointer {
	return (unsafe.Pointer)(C.gllCall_glMapNamedBufferEXT(gl.glMapNamedBufferEXT, (C.uint32_t)(buffer), (C.uint32_t)(access)))
}
func (gl *lib) MapNamedBufferRange(buffer uint32, offset uintptr, length int, access uint32) unsafe.Pointer {
	return (unsafe.Pointer)(C.gllCall_glMapNamedBufferRange(gl.glMapNamedBufferRange, (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(length), (C.uint32_t)(access)))
}
func (gl *lib) MapNamedBufferRangeEXT(buffer uint32, offset uintptr, length int, access uint32) unsafe.Pointer {
	return (unsafe.Pointer)(C.gllCall_glMapNamedBufferRangeEXT(gl.glMapNamedBufferRangeEXT, (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(length), (C.uint32_t)(access)))
}
func (gl *lib) MapObjectBufferATI(buffer uint32) unsafe.Pointer {
	return (unsafe.Pointer)(C.gllCall_glMapObjectBufferATI(gl.glMapObjectBufferATI, (C.uint32_t)(buffer)))
}
func (gl *lib) MapParameterfvNV(target uint32, pname uint32, params *float32) {
	C.gllCall_glMapParameterfvNV(gl.glMapParameterfvNV, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) MapParameterivNV(target uint32, pname uint32, params *int32) {
	C.gllCall_glMapParameterivNV(gl.glMapParameterivNV, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) MapTexture2DINTEL(texture uint32, level int32, access uint32, stride *int32, layout *uint32) unsafe.Pointer {
	return (unsafe.Pointer)(C.gllCall_glMapTexture2DINTEL(gl.glMapTexture2DINTEL, (C.uint32_t)(texture), (C.int32_t)(level), (C.uint32_t)(access), (*C.int32_t)(unsafe.Pointer(stride)), (*C.uint32_t)(unsafe.Pointer(layout))))
}
func (gl *lib) MapVertexAttrib1dAPPLE(index uint32, size uint32, u1 float64, u2 float64, stride int32, order int32, points *float64) {
	C.gllCall_glMapVertexAttrib1dAPPLE(gl.glMapVertexAttrib1dAPPLE, (C.uint32_t)(index), (C.uint32_t)(size), (C.double)(u1), (C.double)(u2), (C.int32_t)(stride), (C.int32_t)(order), (*C.double)(unsafe.Pointer(points)))
}
func (gl *lib) MapVertexAttrib1fAPPLE(index uint32, size uint32, u1 float32, u2 float32, stride int32, order int32, points *float32) {
	C.gllCall_glMapVertexAttrib1fAPPLE(gl.glMapVertexAttrib1fAPPLE, (C.uint32_t)(index), (C.uint32_t)(size), (C.float)(u1), (C.float)(u2), (C.int32_t)(stride), (C.int32_t)(order), (*C.float)(unsafe.Pointer(points)))
}
func (gl *lib) MapVertexAttrib2dAPPLE(index uint32, size uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64) {
	C.gllCall_glMapVertexAttrib2dAPPLE(gl.glMapVertexAttrib2dAPPLE, (C.uint32_t)(index), (C.uint32_t)(size), (C.double)(u1), (C.double)(u2), (C.int32_t)(ustride), (C.int32_t)(uorder), (C.double)(v1), (C.double)(v2), (C.int32_t)(vstride), (C.int32_t)(vorder), (*C.double)(unsafe.Pointer(points)))
}
func (gl *lib) MapVertexAttrib2fAPPLE(index uint32, size uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32) {
	C.gllCall_glMapVertexAttrib2fAPPLE(gl.glMapVertexAttrib2fAPPLE, (C.uint32_t)(index), (C.uint32_t)(size), (C.float)(u1), (C.float)(u2), (C.int32_t)(ustride), (C.int32_t)(uorder), (C.float)(v1), (C.float)(v2), (C.int32_t)(vstride), (C.int32_t)(vorder), (*C.float)(unsafe.Pointer(points)))
}
func (gl *lib) Materialf(face uint32, pname uint32, param float32) {
	C.gllCall_glMaterialf(gl.glMaterialf, (C.uint32_t)(face), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) Materialfv(face uint32, pname uint32, params *float32) {
	C.gllCall_glMaterialfv(gl.glMaterialfv, (C.uint32_t)(face), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) Materiali(face uint32, pname uint32, param int32) {
	C.gllCall_glMateriali(gl.glMateriali, (C.uint32_t)(face), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) Materialiv(face uint32, pname uint32, params *int32) {
	C.gllCall_glMaterialiv(gl.glMaterialiv, (C.uint32_t)(face), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) Materialx(face uint32, pname uint32, param int32) {
	C.gllCall_glMaterialx(gl.glMaterialx, (C.uint32_t)(face), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) MaterialxOES(face uint32, pname uint32, param int32) {
	C.gllCall_glMaterialxOES(gl.glMaterialxOES, (C.uint32_t)(face), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) Materialxv(face uint32, pname uint32, param *int32) {
	C.gllCall_glMaterialxv(gl.glMaterialxv, (C.uint32_t)(face), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) MaterialxvOES(face uint32, pname uint32, param *int32) {
	C.gllCall_glMaterialxvOES(gl.glMaterialxvOES, (C.uint32_t)(face), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) MatrixFrustumEXT(mode uint32, left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) {
	C.gllCall_glMatrixFrustumEXT(gl.glMatrixFrustumEXT, (C.uint32_t)(mode), (C.double)(left), (C.double)(right), (C.double)(bottom), (C.double)(top), (C.double)(zNear), (C.double)(zFar))
}
func (gl *lib) MatrixIndexPointerARB(size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glMatrixIndexPointerARB(gl.glMatrixIndexPointerARB, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) MatrixIndexPointerOES(size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glMatrixIndexPointerOES(gl.glMatrixIndexPointerOES, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) MatrixIndexubvARB(size int32, indices *uint8) {
	C.gllCall_glMatrixIndexubvARB(gl.glMatrixIndexubvARB, (C.int32_t)(size), (*C.uint8_t)(unsafe.Pointer(indices)))
}
func (gl *lib) MatrixIndexuivARB(size int32, indices *uint32) {
	C.gllCall_glMatrixIndexuivARB(gl.glMatrixIndexuivARB, (C.int32_t)(size), (*C.uint32_t)(unsafe.Pointer(indices)))
}
func (gl *lib) MatrixIndexusvARB(size int32, indices *uint16) {
	C.gllCall_glMatrixIndexusvARB(gl.glMatrixIndexusvARB, (C.int32_t)(size), (*C.uint16_t)(unsafe.Pointer(indices)))
}
func (gl *lib) MatrixLoad3x2fNV(matrixMode uint32, m *float32) {
	C.gllCall_glMatrixLoad3x2fNV(gl.glMatrixLoad3x2fNV, (C.uint32_t)(matrixMode), (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) MatrixLoad3x3fNV(matrixMode uint32, m *float32) {
	C.gllCall_glMatrixLoad3x3fNV(gl.glMatrixLoad3x3fNV, (C.uint32_t)(matrixMode), (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) MatrixLoadIdentityEXT(mode uint32) {
	C.gllCall_glMatrixLoadIdentityEXT(gl.glMatrixLoadIdentityEXT, (C.uint32_t)(mode))
}
func (gl *lib) MatrixLoadTranspose3x3fNV(matrixMode uint32, m *float32) {
	C.gllCall_glMatrixLoadTranspose3x3fNV(gl.glMatrixLoadTranspose3x3fNV, (C.uint32_t)(matrixMode), (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) MatrixLoadTransposedEXT(mode uint32, m *float64) {
	C.gllCall_glMatrixLoadTransposedEXT(gl.glMatrixLoadTransposedEXT, (C.uint32_t)(mode), (*C.double)(unsafe.Pointer(m)))
}
func (gl *lib) MatrixLoadTransposefEXT(mode uint32, m *float32) {
	C.gllCall_glMatrixLoadTransposefEXT(gl.glMatrixLoadTransposefEXT, (C.uint32_t)(mode), (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) MatrixLoaddEXT(mode uint32, m *float64) {
	C.gllCall_glMatrixLoaddEXT(gl.glMatrixLoaddEXT, (C.uint32_t)(mode), (*C.double)(unsafe.Pointer(m)))
}
func (gl *lib) MatrixLoadfEXT(mode uint32, m *float32) {
	C.gllCall_glMatrixLoadfEXT(gl.glMatrixLoadfEXT, (C.uint32_t)(mode), (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) MatrixMode(mode uint32) {
	C.gllCall_glMatrixMode(gl.glMatrixMode, (C.uint32_t)(mode))
}
func (gl *lib) MatrixMult3x2fNV(matrixMode uint32, m *float32) {
	C.gllCall_glMatrixMult3x2fNV(gl.glMatrixMult3x2fNV, (C.uint32_t)(matrixMode), (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) MatrixMult3x3fNV(matrixMode uint32, m *float32) {
	C.gllCall_glMatrixMult3x3fNV(gl.glMatrixMult3x3fNV, (C.uint32_t)(matrixMode), (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) MatrixMultTranspose3x3fNV(matrixMode uint32, m *float32) {
	C.gllCall_glMatrixMultTranspose3x3fNV(gl.glMatrixMultTranspose3x3fNV, (C.uint32_t)(matrixMode), (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) MatrixMultTransposedEXT(mode uint32, m *float64) {
	C.gllCall_glMatrixMultTransposedEXT(gl.glMatrixMultTransposedEXT, (C.uint32_t)(mode), (*C.double)(unsafe.Pointer(m)))
}
func (gl *lib) MatrixMultTransposefEXT(mode uint32, m *float32) {
	C.gllCall_glMatrixMultTransposefEXT(gl.glMatrixMultTransposefEXT, (C.uint32_t)(mode), (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) MatrixMultdEXT(mode uint32, m *float64) {
	C.gllCall_glMatrixMultdEXT(gl.glMatrixMultdEXT, (C.uint32_t)(mode), (*C.double)(unsafe.Pointer(m)))
}
func (gl *lib) MatrixMultfEXT(mode uint32, m *float32) {
	C.gllCall_glMatrixMultfEXT(gl.glMatrixMultfEXT, (C.uint32_t)(mode), (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) MatrixOrthoEXT(mode uint32, left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) {
	C.gllCall_glMatrixOrthoEXT(gl.glMatrixOrthoEXT, (C.uint32_t)(mode), (C.double)(left), (C.double)(right), (C.double)(bottom), (C.double)(top), (C.double)(zNear), (C.double)(zFar))
}
func (gl *lib) MatrixPopEXT(mode uint32) {
	C.gllCall_glMatrixPopEXT(gl.glMatrixPopEXT, (C.uint32_t)(mode))
}
func (gl *lib) MatrixPushEXT(mode uint32) {
	C.gllCall_glMatrixPushEXT(gl.glMatrixPushEXT, (C.uint32_t)(mode))
}
func (gl *lib) MatrixRotatedEXT(mode uint32, angle float64, x float64, y float64, z float64) {
	C.gllCall_glMatrixRotatedEXT(gl.glMatrixRotatedEXT, (C.uint32_t)(mode), (C.double)(angle), (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) MatrixRotatefEXT(mode uint32, angle float32, x float32, y float32, z float32) {
	C.gllCall_glMatrixRotatefEXT(gl.glMatrixRotatefEXT, (C.uint32_t)(mode), (C.float)(angle), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) MatrixScaledEXT(mode uint32, x float64, y float64, z float64) {
	C.gllCall_glMatrixScaledEXT(gl.glMatrixScaledEXT, (C.uint32_t)(mode), (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) MatrixScalefEXT(mode uint32, x float32, y float32, z float32) {
	C.gllCall_glMatrixScalefEXT(gl.glMatrixScalefEXT, (C.uint32_t)(mode), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) MatrixTranslatedEXT(mode uint32, x float64, y float64, z float64) {
	C.gllCall_glMatrixTranslatedEXT(gl.glMatrixTranslatedEXT, (C.uint32_t)(mode), (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) MatrixTranslatefEXT(mode uint32, x float32, y float32, z float32) {
	C.gllCall_glMatrixTranslatefEXT(gl.glMatrixTranslatefEXT, (C.uint32_t)(mode), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) MaxShaderCompilerThreadsKHR(count uint32) {
	C.gllCall_glMaxShaderCompilerThreadsKHR(gl.glMaxShaderCompilerThreadsKHR, (C.uint32_t)(count))
}
func (gl *lib) MaxShaderCompilerThreadsARB(count uint32) {
	C.gllCall_glMaxShaderCompilerThreadsARB(gl.glMaxShaderCompilerThreadsARB, (C.uint32_t)(count))
}
func (gl *lib) MemoryBarrier(barriers uint32) {
	C.gllCall_glMemoryBarrier(gl.glMemoryBarrier, (C.uint32_t)(barriers))
}
func (gl *lib) MemoryBarrierByRegion(barriers uint32) {
	C.gllCall_glMemoryBarrierByRegion(gl.glMemoryBarrierByRegion, (C.uint32_t)(barriers))
}
func (gl *lib) MemoryBarrierEXT(barriers uint32) {
	C.gllCall_glMemoryBarrierEXT(gl.glMemoryBarrierEXT, (C.uint32_t)(barriers))
}
func (gl *lib) MemoryObjectParameterivEXT(memoryObject uint32, pname uint32, params *int32) {
	C.gllCall_glMemoryObjectParameterivEXT(gl.glMemoryObjectParameterivEXT, (C.uint32_t)(memoryObject), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) MinSampleShading(value float32) {
	C.gllCall_glMinSampleShading(gl.glMinSampleShading, (C.float)(value))
}
func (gl *lib) MinSampleShadingARB(value float32) {
	C.gllCall_glMinSampleShadingARB(gl.glMinSampleShadingARB, (C.float)(value))
}
func (gl *lib) MinSampleShadingOES(value float32) {
	C.gllCall_glMinSampleShadingOES(gl.glMinSampleShadingOES, (C.float)(value))
}
func (gl *lib) Minmax(target uint32, internalformat uint32, sink bool) {
	C.gllCall_glMinmax(gl.glMinmax, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C._Bool)(sink))
}
func (gl *lib) MinmaxEXT(target uint32, internalformat uint32, sink bool) {
	C.gllCall_glMinmaxEXT(gl.glMinmaxEXT, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C._Bool)(sink))
}
func (gl *lib) MultMatrixd(m *float64) {
	C.gllCall_glMultMatrixd(gl.glMultMatrixd, (*C.double)(unsafe.Pointer(m)))
}
func (gl *lib) MultMatrixf(m *float32) {
	C.gllCall_glMultMatrixf(gl.glMultMatrixf, (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) MultMatrixx(m *int32) {
	C.gllCall_glMultMatrixx(gl.glMultMatrixx, (*C.int32_t)(unsafe.Pointer(m)))
}
func (gl *lib) MultMatrixxOES(m *int32) {
	C.gllCall_glMultMatrixxOES(gl.glMultMatrixxOES, (*C.int32_t)(unsafe.Pointer(m)))
}
func (gl *lib) MultTransposeMatrixd(m *float64) {
	C.gllCall_glMultTransposeMatrixd(gl.glMultTransposeMatrixd, (*C.double)(unsafe.Pointer(m)))
}
func (gl *lib) MultTransposeMatrixdARB(m *float64) {
	C.gllCall_glMultTransposeMatrixdARB(gl.glMultTransposeMatrixdARB, (*C.double)(unsafe.Pointer(m)))
}
func (gl *lib) MultTransposeMatrixf(m *float32) {
	C.gllCall_glMultTransposeMatrixf(gl.glMultTransposeMatrixf, (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) MultTransposeMatrixfARB(m *float32) {
	C.gllCall_glMultTransposeMatrixfARB(gl.glMultTransposeMatrixfARB, (*C.float)(unsafe.Pointer(m)))
}
func (gl *lib) MultTransposeMatrixxOES(m *int32) {
	C.gllCall_glMultTransposeMatrixxOES(gl.glMultTransposeMatrixxOES, (*C.int32_t)(unsafe.Pointer(m)))
}
func (gl *lib) MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32) {
	C.gllCall_glMultiDrawArrays(gl.glMultiDrawArrays, (C.uint32_t)(mode), (*C.int32_t)(unsafe.Pointer(first)), (*C.int32_t)(unsafe.Pointer(count)), (C.int32_t)(drawcount))
}
func (gl *lib) MultiDrawArraysEXT(mode uint32, first *int32, count *int32, primcount int32) {
	C.gllCall_glMultiDrawArraysEXT(gl.glMultiDrawArraysEXT, (C.uint32_t)(mode), (*C.int32_t)(unsafe.Pointer(first)), (*C.int32_t)(unsafe.Pointer(count)), (C.int32_t)(primcount))
}
func (gl *lib) MultiDrawArraysIndirect(mode uint32, indirect unsafe.Pointer, drawcount int32, stride int32) {
	C.gllCall_glMultiDrawArraysIndirect(gl.glMultiDrawArraysIndirect, (C.uint32_t)(mode), (unsafe.Pointer)(indirect), (C.int32_t)(drawcount), (C.int32_t)(stride))
}
func (gl *lib) MultiDrawArraysIndirectAMD(mode uint32, indirect unsafe.Pointer, primcount int32, stride int32) {
	C.gllCall_glMultiDrawArraysIndirectAMD(gl.glMultiDrawArraysIndirectAMD, (C.uint32_t)(mode), (unsafe.Pointer)(indirect), (C.int32_t)(primcount), (C.int32_t)(stride))
}
func (gl *lib) MultiDrawArraysIndirectBindlessCountNV(mode uint32, indirect unsafe.Pointer, drawCount int32, maxDrawCount int32, stride int32, vertexBufferCount int32) {
	C.gllCall_glMultiDrawArraysIndirectBindlessCountNV(gl.glMultiDrawArraysIndirectBindlessCountNV, (C.uint32_t)(mode), (unsafe.Pointer)(indirect), (C.int32_t)(drawCount), (C.int32_t)(maxDrawCount), (C.int32_t)(stride), (C.int32_t)(vertexBufferCount))
}
func (gl *lib) MultiDrawArraysIndirectBindlessNV(mode uint32, indirect unsafe.Pointer, drawCount int32, stride int32, vertexBufferCount int32) {
	C.gllCall_glMultiDrawArraysIndirectBindlessNV(gl.glMultiDrawArraysIndirectBindlessNV, (C.uint32_t)(mode), (unsafe.Pointer)(indirect), (C.int32_t)(drawCount), (C.int32_t)(stride), (C.int32_t)(vertexBufferCount))
}
func (gl *lib) MultiDrawArraysIndirectCount(mode uint32, indirect unsafe.Pointer, drawcount uintptr, maxdrawcount int32, stride int32) {
	C.gllCall_glMultiDrawArraysIndirectCount(gl.glMultiDrawArraysIndirectCount, (C.uint32_t)(mode), (unsafe.Pointer)(indirect), (C.intptr_t)(drawcount), (C.int32_t)(maxdrawcount), (C.int32_t)(stride))
}
func (gl *lib) MultiDrawArraysIndirectCountARB(mode uint32, indirect unsafe.Pointer, drawcount uintptr, maxdrawcount int32, stride int32) {
	C.gllCall_glMultiDrawArraysIndirectCountARB(gl.glMultiDrawArraysIndirectCountARB, (C.uint32_t)(mode), (unsafe.Pointer)(indirect), (C.intptr_t)(drawcount), (C.int32_t)(maxdrawcount), (C.int32_t)(stride))
}
func (gl *lib) MultiDrawArraysIndirectEXT(mode uint32, indirect unsafe.Pointer, drawcount int32, stride int32) {
	C.gllCall_glMultiDrawArraysIndirectEXT(gl.glMultiDrawArraysIndirectEXT, (C.uint32_t)(mode), (unsafe.Pointer)(indirect), (C.int32_t)(drawcount), (C.int32_t)(stride))
}
func (gl *lib) MultiDrawElementArrayAPPLE(mode uint32, first *int32, count *int32, primcount int32) {
	C.gllCall_glMultiDrawElementArrayAPPLE(gl.glMultiDrawElementArrayAPPLE, (C.uint32_t)(mode), (*C.int32_t)(unsafe.Pointer(first)), (*C.int32_t)(unsafe.Pointer(count)), (C.int32_t)(primcount))
}
func (gl *lib) MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32) {
	C.gllCall_glMultiDrawElements(gl.glMultiDrawElements, (C.uint32_t)(mode), (*C.int32_t)(unsafe.Pointer(count)), (C.uint32_t)(type_), (*unsafe.Pointer)(unsafe.Pointer(indices)), (C.int32_t)(drawcount))
}
func (gl *lib) MultiDrawElementsBaseVertex(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32) {
	C.gllCall_glMultiDrawElementsBaseVertex(gl.glMultiDrawElementsBaseVertex, (C.uint32_t)(mode), (*C.int32_t)(unsafe.Pointer(count)), (C.uint32_t)(type_), (*unsafe.Pointer)(unsafe.Pointer(indices)), (C.int32_t)(drawcount), (*C.int32_t)(unsafe.Pointer(basevertex)))
}
func (gl *lib) MultiDrawElementsBaseVertexEXT(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32) {
	C.gllCall_glMultiDrawElementsBaseVertexEXT(gl.glMultiDrawElementsBaseVertexEXT, (C.uint32_t)(mode), (*C.int32_t)(unsafe.Pointer(count)), (C.uint32_t)(type_), (*unsafe.Pointer)(unsafe.Pointer(indices)), (C.int32_t)(drawcount), (*C.int32_t)(unsafe.Pointer(basevertex)))
}
func (gl *lib) MultiDrawElementsEXT(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, primcount int32) {
	C.gllCall_glMultiDrawElementsEXT(gl.glMultiDrawElementsEXT, (C.uint32_t)(mode), (*C.int32_t)(unsafe.Pointer(count)), (C.uint32_t)(type_), (*unsafe.Pointer)(unsafe.Pointer(indices)), (C.int32_t)(primcount))
}
func (gl *lib) MultiDrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer, drawcount int32, stride int32) {
	C.gllCall_glMultiDrawElementsIndirect(gl.glMultiDrawElementsIndirect, (C.uint32_t)(mode), (C.uint32_t)(type_), (unsafe.Pointer)(indirect), (C.int32_t)(drawcount), (C.int32_t)(stride))
}
func (gl *lib) MultiDrawElementsIndirectAMD(mode uint32, type_ uint32, indirect unsafe.Pointer, primcount int32, stride int32) {
	C.gllCall_glMultiDrawElementsIndirectAMD(gl.glMultiDrawElementsIndirectAMD, (C.uint32_t)(mode), (C.uint32_t)(type_), (unsafe.Pointer)(indirect), (C.int32_t)(primcount), (C.int32_t)(stride))
}
func (gl *lib) MultiDrawElementsIndirectBindlessCountNV(mode uint32, type_ uint32, indirect unsafe.Pointer, drawCount int32, maxDrawCount int32, stride int32, vertexBufferCount int32) {
	C.gllCall_glMultiDrawElementsIndirectBindlessCountNV(gl.glMultiDrawElementsIndirectBindlessCountNV, (C.uint32_t)(mode), (C.uint32_t)(type_), (unsafe.Pointer)(indirect), (C.int32_t)(drawCount), (C.int32_t)(maxDrawCount), (C.int32_t)(stride), (C.int32_t)(vertexBufferCount))
}
func (gl *lib) MultiDrawElementsIndirectBindlessNV(mode uint32, type_ uint32, indirect unsafe.Pointer, drawCount int32, stride int32, vertexBufferCount int32) {
	C.gllCall_glMultiDrawElementsIndirectBindlessNV(gl.glMultiDrawElementsIndirectBindlessNV, (C.uint32_t)(mode), (C.uint32_t)(type_), (unsafe.Pointer)(indirect), (C.int32_t)(drawCount), (C.int32_t)(stride), (C.int32_t)(vertexBufferCount))
}
func (gl *lib) MultiDrawElementsIndirectCount(mode uint32, type_ uint32, indirect unsafe.Pointer, drawcount uintptr, maxdrawcount int32, stride int32) {
	C.gllCall_glMultiDrawElementsIndirectCount(gl.glMultiDrawElementsIndirectCount, (C.uint32_t)(mode), (C.uint32_t)(type_), (unsafe.Pointer)(indirect), (C.intptr_t)(drawcount), (C.int32_t)(maxdrawcount), (C.int32_t)(stride))
}
func (gl *lib) MultiDrawElementsIndirectCountARB(mode uint32, type_ uint32, indirect unsafe.Pointer, drawcount uintptr, maxdrawcount int32, stride int32) {
	C.gllCall_glMultiDrawElementsIndirectCountARB(gl.glMultiDrawElementsIndirectCountARB, (C.uint32_t)(mode), (C.uint32_t)(type_), (unsafe.Pointer)(indirect), (C.intptr_t)(drawcount), (C.int32_t)(maxdrawcount), (C.int32_t)(stride))
}
func (gl *lib) MultiDrawElementsIndirectEXT(mode uint32, type_ uint32, indirect unsafe.Pointer, drawcount int32, stride int32) {
	C.gllCall_glMultiDrawElementsIndirectEXT(gl.glMultiDrawElementsIndirectEXT, (C.uint32_t)(mode), (C.uint32_t)(type_), (unsafe.Pointer)(indirect), (C.int32_t)(drawcount), (C.int32_t)(stride))
}
func (gl *lib) MultiDrawMeshTasksIndirectNV(indirect uintptr, drawcount int32, stride int32) {
	C.gllCall_glMultiDrawMeshTasksIndirectNV(gl.glMultiDrawMeshTasksIndirectNV, (C.intptr_t)(indirect), (C.int32_t)(drawcount), (C.int32_t)(stride))
}
func (gl *lib) MultiDrawMeshTasksIndirectCountNV(indirect uintptr, drawcount uintptr, maxdrawcount int32, stride int32) {
	C.gllCall_glMultiDrawMeshTasksIndirectCountNV(gl.glMultiDrawMeshTasksIndirectCountNV, (C.intptr_t)(indirect), (C.intptr_t)(drawcount), (C.int32_t)(maxdrawcount), (C.int32_t)(stride))
}
func (gl *lib) MultiDrawRangeElementArrayAPPLE(mode uint32, start uint32, end uint32, first *int32, count *int32, primcount int32) {
	C.gllCall_glMultiDrawRangeElementArrayAPPLE(gl.glMultiDrawRangeElementArrayAPPLE, (C.uint32_t)(mode), (C.uint32_t)(start), (C.uint32_t)(end), (*C.int32_t)(unsafe.Pointer(first)), (*C.int32_t)(unsafe.Pointer(count)), (C.int32_t)(primcount))
}
func (gl *lib) MultiModeDrawArraysIBM(mode *uint32, first *int32, count *int32, primcount int32, modestride int32) {
	C.gllCall_glMultiModeDrawArraysIBM(gl.glMultiModeDrawArraysIBM, (*C.uint32_t)(unsafe.Pointer(mode)), (*C.int32_t)(unsafe.Pointer(first)), (*C.int32_t)(unsafe.Pointer(count)), (C.int32_t)(primcount), (C.int32_t)(modestride))
}
func (gl *lib) MultiModeDrawElementsIBM(mode *uint32, count *int32, type_ uint32, indices *unsafe.Pointer, primcount int32, modestride int32) {
	C.gllCall_glMultiModeDrawElementsIBM(gl.glMultiModeDrawElementsIBM, (*C.uint32_t)(unsafe.Pointer(mode)), (*C.int32_t)(unsafe.Pointer(count)), (C.uint32_t)(type_), (*unsafe.Pointer)(unsafe.Pointer(indices)), (C.int32_t)(primcount), (C.int32_t)(modestride))
}
func (gl *lib) MultiTexBufferEXT(texunit uint32, target uint32, internalformat uint32, buffer uint32) {
	C.gllCall_glMultiTexBufferEXT(gl.glMultiTexBufferEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.uint32_t)(buffer))
}
func (gl *lib) MultiTexCoord1bOES(texture uint32, s int8) {
	C.gllCall_glMultiTexCoord1bOES(gl.glMultiTexCoord1bOES, (C.uint32_t)(texture), (C.int8_t)(s))
}
func (gl *lib) MultiTexCoord1bvOES(texture uint32, coords *int8) {
	C.gllCall_glMultiTexCoord1bvOES(gl.glMultiTexCoord1bvOES, (C.uint32_t)(texture), (*C.int8_t)(unsafe.Pointer(coords)))
}
func (gl *lib) MultiTexCoord1d(target uint32, s float64) {
	C.gllCall_glMultiTexCoord1d(gl.glMultiTexCoord1d, (C.uint32_t)(target), (C.double)(s))
}
func (gl *lib) MultiTexCoord1dARB(target uint32, s float64) {
	C.gllCall_glMultiTexCoord1dARB(gl.glMultiTexCoord1dARB, (C.uint32_t)(target), (C.double)(s))
}
func (gl *lib) MultiTexCoord1dv(target uint32, v *float64) {
	C.gllCall_glMultiTexCoord1dv(gl.glMultiTexCoord1dv, (C.uint32_t)(target), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord1dvARB(target uint32, v *float64) {
	C.gllCall_glMultiTexCoord1dvARB(gl.glMultiTexCoord1dvARB, (C.uint32_t)(target), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord1f(target uint32, s float32) {
	C.gllCall_glMultiTexCoord1f(gl.glMultiTexCoord1f, (C.uint32_t)(target), (C.float)(s))
}
func (gl *lib) MultiTexCoord1fARB(target uint32, s float32) {
	C.gllCall_glMultiTexCoord1fARB(gl.glMultiTexCoord1fARB, (C.uint32_t)(target), (C.float)(s))
}
func (gl *lib) MultiTexCoord1fv(target uint32, v *float32) {
	C.gllCall_glMultiTexCoord1fv(gl.glMultiTexCoord1fv, (C.uint32_t)(target), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord1fvARB(target uint32, v *float32) {
	C.gllCall_glMultiTexCoord1fvARB(gl.glMultiTexCoord1fvARB, (C.uint32_t)(target), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord1hNV(target uint32, s uint16) {
	C.gllCall_glMultiTexCoord1hNV(gl.glMultiTexCoord1hNV, (C.uint32_t)(target), (C.uint16_t)(s))
}
func (gl *lib) MultiTexCoord1hvNV(target uint32, v *uint16) {
	C.gllCall_glMultiTexCoord1hvNV(gl.glMultiTexCoord1hvNV, (C.uint32_t)(target), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord1i(target uint32, s int32) {
	C.gllCall_glMultiTexCoord1i(gl.glMultiTexCoord1i, (C.uint32_t)(target), (C.int32_t)(s))
}
func (gl *lib) MultiTexCoord1iARB(target uint32, s int32) {
	C.gllCall_glMultiTexCoord1iARB(gl.glMultiTexCoord1iARB, (C.uint32_t)(target), (C.int32_t)(s))
}
func (gl *lib) MultiTexCoord1iv(target uint32, v *int32) {
	C.gllCall_glMultiTexCoord1iv(gl.glMultiTexCoord1iv, (C.uint32_t)(target), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord1ivARB(target uint32, v *int32) {
	C.gllCall_glMultiTexCoord1ivARB(gl.glMultiTexCoord1ivARB, (C.uint32_t)(target), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord1s(target uint32, s int16) {
	C.gllCall_glMultiTexCoord1s(gl.glMultiTexCoord1s, (C.uint32_t)(target), (C.int16_t)(s))
}
func (gl *lib) MultiTexCoord1sARB(target uint32, s int16) {
	C.gllCall_glMultiTexCoord1sARB(gl.glMultiTexCoord1sARB, (C.uint32_t)(target), (C.int16_t)(s))
}
func (gl *lib) MultiTexCoord1sv(target uint32, v *int16) {
	C.gllCall_glMultiTexCoord1sv(gl.glMultiTexCoord1sv, (C.uint32_t)(target), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord1svARB(target uint32, v *int16) {
	C.gllCall_glMultiTexCoord1svARB(gl.glMultiTexCoord1svARB, (C.uint32_t)(target), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord1xOES(texture uint32, s int32) {
	C.gllCall_glMultiTexCoord1xOES(gl.glMultiTexCoord1xOES, (C.uint32_t)(texture), (C.int32_t)(s))
}
func (gl *lib) MultiTexCoord1xvOES(texture uint32, coords *int32) {
	C.gllCall_glMultiTexCoord1xvOES(gl.glMultiTexCoord1xvOES, (C.uint32_t)(texture), (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) MultiTexCoord2bOES(texture uint32, s int8, t int8) {
	C.gllCall_glMultiTexCoord2bOES(gl.glMultiTexCoord2bOES, (C.uint32_t)(texture), (C.int8_t)(s), (C.int8_t)(t))
}
func (gl *lib) MultiTexCoord2bvOES(texture uint32, coords *int8) {
	C.gllCall_glMultiTexCoord2bvOES(gl.glMultiTexCoord2bvOES, (C.uint32_t)(texture), (*C.int8_t)(unsafe.Pointer(coords)))
}
func (gl *lib) MultiTexCoord2d(target uint32, s float64, t float64) {
	C.gllCall_glMultiTexCoord2d(gl.glMultiTexCoord2d, (C.uint32_t)(target), (C.double)(s), (C.double)(t))
}
func (gl *lib) MultiTexCoord2dARB(target uint32, s float64, t float64) {
	C.gllCall_glMultiTexCoord2dARB(gl.glMultiTexCoord2dARB, (C.uint32_t)(target), (C.double)(s), (C.double)(t))
}
func (gl *lib) MultiTexCoord2dv(target uint32, v *float64) {
	C.gllCall_glMultiTexCoord2dv(gl.glMultiTexCoord2dv, (C.uint32_t)(target), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord2dvARB(target uint32, v *float64) {
	C.gllCall_glMultiTexCoord2dvARB(gl.glMultiTexCoord2dvARB, (C.uint32_t)(target), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord2f(target uint32, s float32, t float32) {
	C.gllCall_glMultiTexCoord2f(gl.glMultiTexCoord2f, (C.uint32_t)(target), (C.float)(s), (C.float)(t))
}
func (gl *lib) MultiTexCoord2fARB(target uint32, s float32, t float32) {
	C.gllCall_glMultiTexCoord2fARB(gl.glMultiTexCoord2fARB, (C.uint32_t)(target), (C.float)(s), (C.float)(t))
}
func (gl *lib) MultiTexCoord2fv(target uint32, v *float32) {
	C.gllCall_glMultiTexCoord2fv(gl.glMultiTexCoord2fv, (C.uint32_t)(target), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord2fvARB(target uint32, v *float32) {
	C.gllCall_glMultiTexCoord2fvARB(gl.glMultiTexCoord2fvARB, (C.uint32_t)(target), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord2hNV(target uint32, s uint16, t uint16) {
	C.gllCall_glMultiTexCoord2hNV(gl.glMultiTexCoord2hNV, (C.uint32_t)(target), (C.uint16_t)(s), (C.uint16_t)(t))
}
func (gl *lib) MultiTexCoord2hvNV(target uint32, v *uint16) {
	C.gllCall_glMultiTexCoord2hvNV(gl.glMultiTexCoord2hvNV, (C.uint32_t)(target), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord2i(target uint32, s int32, t int32) {
	C.gllCall_glMultiTexCoord2i(gl.glMultiTexCoord2i, (C.uint32_t)(target), (C.int32_t)(s), (C.int32_t)(t))
}
func (gl *lib) MultiTexCoord2iARB(target uint32, s int32, t int32) {
	C.gllCall_glMultiTexCoord2iARB(gl.glMultiTexCoord2iARB, (C.uint32_t)(target), (C.int32_t)(s), (C.int32_t)(t))
}
func (gl *lib) MultiTexCoord2iv(target uint32, v *int32) {
	C.gllCall_glMultiTexCoord2iv(gl.glMultiTexCoord2iv, (C.uint32_t)(target), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord2ivARB(target uint32, v *int32) {
	C.gllCall_glMultiTexCoord2ivARB(gl.glMultiTexCoord2ivARB, (C.uint32_t)(target), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord2s(target uint32, s int16, t int16) {
	C.gllCall_glMultiTexCoord2s(gl.glMultiTexCoord2s, (C.uint32_t)(target), (C.int16_t)(s), (C.int16_t)(t))
}
func (gl *lib) MultiTexCoord2sARB(target uint32, s int16, t int16) {
	C.gllCall_glMultiTexCoord2sARB(gl.glMultiTexCoord2sARB, (C.uint32_t)(target), (C.int16_t)(s), (C.int16_t)(t))
}
func (gl *lib) MultiTexCoord2sv(target uint32, v *int16) {
	C.gllCall_glMultiTexCoord2sv(gl.glMultiTexCoord2sv, (C.uint32_t)(target), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord2svARB(target uint32, v *int16) {
	C.gllCall_glMultiTexCoord2svARB(gl.glMultiTexCoord2svARB, (C.uint32_t)(target), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord2xOES(texture uint32, s int32, t int32) {
	C.gllCall_glMultiTexCoord2xOES(gl.glMultiTexCoord2xOES, (C.uint32_t)(texture), (C.int32_t)(s), (C.int32_t)(t))
}
func (gl *lib) MultiTexCoord2xvOES(texture uint32, coords *int32) {
	C.gllCall_glMultiTexCoord2xvOES(gl.glMultiTexCoord2xvOES, (C.uint32_t)(texture), (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) MultiTexCoord3bOES(texture uint32, s int8, t int8, r int8) {
	C.gllCall_glMultiTexCoord3bOES(gl.glMultiTexCoord3bOES, (C.uint32_t)(texture), (C.int8_t)(s), (C.int8_t)(t), (C.int8_t)(r))
}
func (gl *lib) MultiTexCoord3bvOES(texture uint32, coords *int8) {
	C.gllCall_glMultiTexCoord3bvOES(gl.glMultiTexCoord3bvOES, (C.uint32_t)(texture), (*C.int8_t)(unsafe.Pointer(coords)))
}
func (gl *lib) MultiTexCoord3d(target uint32, s float64, t float64, r float64) {
	C.gllCall_glMultiTexCoord3d(gl.glMultiTexCoord3d, (C.uint32_t)(target), (C.double)(s), (C.double)(t), (C.double)(r))
}
func (gl *lib) MultiTexCoord3dARB(target uint32, s float64, t float64, r float64) {
	C.gllCall_glMultiTexCoord3dARB(gl.glMultiTexCoord3dARB, (C.uint32_t)(target), (C.double)(s), (C.double)(t), (C.double)(r))
}
func (gl *lib) MultiTexCoord3dv(target uint32, v *float64) {
	C.gllCall_glMultiTexCoord3dv(gl.glMultiTexCoord3dv, (C.uint32_t)(target), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord3dvARB(target uint32, v *float64) {
	C.gllCall_glMultiTexCoord3dvARB(gl.glMultiTexCoord3dvARB, (C.uint32_t)(target), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord3f(target uint32, s float32, t float32, r float32) {
	C.gllCall_glMultiTexCoord3f(gl.glMultiTexCoord3f, (C.uint32_t)(target), (C.float)(s), (C.float)(t), (C.float)(r))
}
func (gl *lib) MultiTexCoord3fARB(target uint32, s float32, t float32, r float32) {
	C.gllCall_glMultiTexCoord3fARB(gl.glMultiTexCoord3fARB, (C.uint32_t)(target), (C.float)(s), (C.float)(t), (C.float)(r))
}
func (gl *lib) MultiTexCoord3fv(target uint32, v *float32) {
	C.gllCall_glMultiTexCoord3fv(gl.glMultiTexCoord3fv, (C.uint32_t)(target), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord3fvARB(target uint32, v *float32) {
	C.gllCall_glMultiTexCoord3fvARB(gl.glMultiTexCoord3fvARB, (C.uint32_t)(target), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord3hNV(target uint32, s uint16, t uint16, r uint16) {
	C.gllCall_glMultiTexCoord3hNV(gl.glMultiTexCoord3hNV, (C.uint32_t)(target), (C.uint16_t)(s), (C.uint16_t)(t), (C.uint16_t)(r))
}
func (gl *lib) MultiTexCoord3hvNV(target uint32, v *uint16) {
	C.gllCall_glMultiTexCoord3hvNV(gl.glMultiTexCoord3hvNV, (C.uint32_t)(target), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord3i(target uint32, s int32, t int32, r int32) {
	C.gllCall_glMultiTexCoord3i(gl.glMultiTexCoord3i, (C.uint32_t)(target), (C.int32_t)(s), (C.int32_t)(t), (C.int32_t)(r))
}
func (gl *lib) MultiTexCoord3iARB(target uint32, s int32, t int32, r int32) {
	C.gllCall_glMultiTexCoord3iARB(gl.glMultiTexCoord3iARB, (C.uint32_t)(target), (C.int32_t)(s), (C.int32_t)(t), (C.int32_t)(r))
}
func (gl *lib) MultiTexCoord3iv(target uint32, v *int32) {
	C.gllCall_glMultiTexCoord3iv(gl.glMultiTexCoord3iv, (C.uint32_t)(target), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord3ivARB(target uint32, v *int32) {
	C.gllCall_glMultiTexCoord3ivARB(gl.glMultiTexCoord3ivARB, (C.uint32_t)(target), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord3s(target uint32, s int16, t int16, r int16) {
	C.gllCall_glMultiTexCoord3s(gl.glMultiTexCoord3s, (C.uint32_t)(target), (C.int16_t)(s), (C.int16_t)(t), (C.int16_t)(r))
}
func (gl *lib) MultiTexCoord3sARB(target uint32, s int16, t int16, r int16) {
	C.gllCall_glMultiTexCoord3sARB(gl.glMultiTexCoord3sARB, (C.uint32_t)(target), (C.int16_t)(s), (C.int16_t)(t), (C.int16_t)(r))
}
func (gl *lib) MultiTexCoord3sv(target uint32, v *int16) {
	C.gllCall_glMultiTexCoord3sv(gl.glMultiTexCoord3sv, (C.uint32_t)(target), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord3svARB(target uint32, v *int16) {
	C.gllCall_glMultiTexCoord3svARB(gl.glMultiTexCoord3svARB, (C.uint32_t)(target), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord3xOES(texture uint32, s int32, t int32, r int32) {
	C.gllCall_glMultiTexCoord3xOES(gl.glMultiTexCoord3xOES, (C.uint32_t)(texture), (C.int32_t)(s), (C.int32_t)(t), (C.int32_t)(r))
}
func (gl *lib) MultiTexCoord3xvOES(texture uint32, coords *int32) {
	C.gllCall_glMultiTexCoord3xvOES(gl.glMultiTexCoord3xvOES, (C.uint32_t)(texture), (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) MultiTexCoord4bOES(texture uint32, s int8, t int8, r int8, q int8) {
	C.gllCall_glMultiTexCoord4bOES(gl.glMultiTexCoord4bOES, (C.uint32_t)(texture), (C.int8_t)(s), (C.int8_t)(t), (C.int8_t)(r), (C.int8_t)(q))
}
func (gl *lib) MultiTexCoord4bvOES(texture uint32, coords *int8) {
	C.gllCall_glMultiTexCoord4bvOES(gl.glMultiTexCoord4bvOES, (C.uint32_t)(texture), (*C.int8_t)(unsafe.Pointer(coords)))
}
func (gl *lib) MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64) {
	C.gllCall_glMultiTexCoord4d(gl.glMultiTexCoord4d, (C.uint32_t)(target), (C.double)(s), (C.double)(t), (C.double)(r), (C.double)(q))
}
func (gl *lib) MultiTexCoord4dARB(target uint32, s float64, t float64, r float64, q float64) {
	C.gllCall_glMultiTexCoord4dARB(gl.glMultiTexCoord4dARB, (C.uint32_t)(target), (C.double)(s), (C.double)(t), (C.double)(r), (C.double)(q))
}
func (gl *lib) MultiTexCoord4dv(target uint32, v *float64) {
	C.gllCall_glMultiTexCoord4dv(gl.glMultiTexCoord4dv, (C.uint32_t)(target), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord4dvARB(target uint32, v *float64) {
	C.gllCall_glMultiTexCoord4dvARB(gl.glMultiTexCoord4dvARB, (C.uint32_t)(target), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32) {
	C.gllCall_glMultiTexCoord4f(gl.glMultiTexCoord4f, (C.uint32_t)(target), (C.float)(s), (C.float)(t), (C.float)(r), (C.float)(q))
}
func (gl *lib) MultiTexCoord4fARB(target uint32, s float32, t float32, r float32, q float32) {
	C.gllCall_glMultiTexCoord4fARB(gl.glMultiTexCoord4fARB, (C.uint32_t)(target), (C.float)(s), (C.float)(t), (C.float)(r), (C.float)(q))
}
func (gl *lib) MultiTexCoord4fv(target uint32, v *float32) {
	C.gllCall_glMultiTexCoord4fv(gl.glMultiTexCoord4fv, (C.uint32_t)(target), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord4fvARB(target uint32, v *float32) {
	C.gllCall_glMultiTexCoord4fvARB(gl.glMultiTexCoord4fvARB, (C.uint32_t)(target), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord4hNV(target uint32, s uint16, t uint16, r uint16, q uint16) {
	C.gllCall_glMultiTexCoord4hNV(gl.glMultiTexCoord4hNV, (C.uint32_t)(target), (C.uint16_t)(s), (C.uint16_t)(t), (C.uint16_t)(r), (C.uint16_t)(q))
}
func (gl *lib) MultiTexCoord4hvNV(target uint32, v *uint16) {
	C.gllCall_glMultiTexCoord4hvNV(gl.glMultiTexCoord4hvNV, (C.uint32_t)(target), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32) {
	C.gllCall_glMultiTexCoord4i(gl.glMultiTexCoord4i, (C.uint32_t)(target), (C.int32_t)(s), (C.int32_t)(t), (C.int32_t)(r), (C.int32_t)(q))
}
func (gl *lib) MultiTexCoord4iARB(target uint32, s int32, t int32, r int32, q int32) {
	C.gllCall_glMultiTexCoord4iARB(gl.glMultiTexCoord4iARB, (C.uint32_t)(target), (C.int32_t)(s), (C.int32_t)(t), (C.int32_t)(r), (C.int32_t)(q))
}
func (gl *lib) MultiTexCoord4iv(target uint32, v *int32) {
	C.gllCall_glMultiTexCoord4iv(gl.glMultiTexCoord4iv, (C.uint32_t)(target), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord4ivARB(target uint32, v *int32) {
	C.gllCall_glMultiTexCoord4ivARB(gl.glMultiTexCoord4ivARB, (C.uint32_t)(target), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16) {
	C.gllCall_glMultiTexCoord4s(gl.glMultiTexCoord4s, (C.uint32_t)(target), (C.int16_t)(s), (C.int16_t)(t), (C.int16_t)(r), (C.int16_t)(q))
}
func (gl *lib) MultiTexCoord4sARB(target uint32, s int16, t int16, r int16, q int16) {
	C.gllCall_glMultiTexCoord4sARB(gl.glMultiTexCoord4sARB, (C.uint32_t)(target), (C.int16_t)(s), (C.int16_t)(t), (C.int16_t)(r), (C.int16_t)(q))
}
func (gl *lib) MultiTexCoord4sv(target uint32, v *int16) {
	C.gllCall_glMultiTexCoord4sv(gl.glMultiTexCoord4sv, (C.uint32_t)(target), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord4svARB(target uint32, v *int16) {
	C.gllCall_glMultiTexCoord4svARB(gl.glMultiTexCoord4svARB, (C.uint32_t)(target), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) MultiTexCoord4x(texture uint32, s int32, t int32, r int32, q int32) {
	C.gllCall_glMultiTexCoord4x(gl.glMultiTexCoord4x, (C.uint32_t)(texture), (C.int32_t)(s), (C.int32_t)(t), (C.int32_t)(r), (C.int32_t)(q))
}
func (gl *lib) MultiTexCoord4xOES(texture uint32, s int32, t int32, r int32, q int32) {
	C.gllCall_glMultiTexCoord4xOES(gl.glMultiTexCoord4xOES, (C.uint32_t)(texture), (C.int32_t)(s), (C.int32_t)(t), (C.int32_t)(r), (C.int32_t)(q))
}
func (gl *lib) MultiTexCoord4xvOES(texture uint32, coords *int32) {
	C.gllCall_glMultiTexCoord4xvOES(gl.glMultiTexCoord4xvOES, (C.uint32_t)(texture), (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) MultiTexCoordP1ui(texture uint32, type_ uint32, coords uint32) {
	C.gllCall_glMultiTexCoordP1ui(gl.glMultiTexCoordP1ui, (C.uint32_t)(texture), (C.uint32_t)(type_), (C.uint32_t)(coords))
}
func (gl *lib) MultiTexCoordP1uiv(texture uint32, type_ uint32, coords *uint32) {
	C.gllCall_glMultiTexCoordP1uiv(gl.glMultiTexCoordP1uiv, (C.uint32_t)(texture), (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) MultiTexCoordP2ui(texture uint32, type_ uint32, coords uint32) {
	C.gllCall_glMultiTexCoordP2ui(gl.glMultiTexCoordP2ui, (C.uint32_t)(texture), (C.uint32_t)(type_), (C.uint32_t)(coords))
}
func (gl *lib) MultiTexCoordP2uiv(texture uint32, type_ uint32, coords *uint32) {
	C.gllCall_glMultiTexCoordP2uiv(gl.glMultiTexCoordP2uiv, (C.uint32_t)(texture), (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) MultiTexCoordP3ui(texture uint32, type_ uint32, coords uint32) {
	C.gllCall_glMultiTexCoordP3ui(gl.glMultiTexCoordP3ui, (C.uint32_t)(texture), (C.uint32_t)(type_), (C.uint32_t)(coords))
}
func (gl *lib) MultiTexCoordP3uiv(texture uint32, type_ uint32, coords *uint32) {
	C.gllCall_glMultiTexCoordP3uiv(gl.glMultiTexCoordP3uiv, (C.uint32_t)(texture), (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) MultiTexCoordP4ui(texture uint32, type_ uint32, coords uint32) {
	C.gllCall_glMultiTexCoordP4ui(gl.glMultiTexCoordP4ui, (C.uint32_t)(texture), (C.uint32_t)(type_), (C.uint32_t)(coords))
}
func (gl *lib) MultiTexCoordP4uiv(texture uint32, type_ uint32, coords *uint32) {
	C.gllCall_glMultiTexCoordP4uiv(gl.glMultiTexCoordP4uiv, (C.uint32_t)(texture), (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) MultiTexCoordPointerEXT(texunit uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glMultiTexCoordPointerEXT(gl.glMultiTexCoordPointerEXT, (C.uint32_t)(texunit), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) MultiTexEnvfEXT(texunit uint32, target uint32, pname uint32, param float32) {
	C.gllCall_glMultiTexEnvfEXT(gl.glMultiTexEnvfEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) MultiTexEnvfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
	C.gllCall_glMultiTexEnvfvEXT(gl.glMultiTexEnvfvEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) MultiTexEnviEXT(texunit uint32, target uint32, pname uint32, param int32) {
	C.gllCall_glMultiTexEnviEXT(gl.glMultiTexEnviEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) MultiTexEnvivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
	C.gllCall_glMultiTexEnvivEXT(gl.glMultiTexEnvivEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) MultiTexGendEXT(texunit uint32, coord uint32, pname uint32, param float64) {
	C.gllCall_glMultiTexGendEXT(gl.glMultiTexGendEXT, (C.uint32_t)(texunit), (C.uint32_t)(coord), (C.uint32_t)(pname), (C.double)(param))
}
func (gl *lib) MultiTexGendvEXT(texunit uint32, coord uint32, pname uint32, params *float64) {
	C.gllCall_glMultiTexGendvEXT(gl.glMultiTexGendvEXT, (C.uint32_t)(texunit), (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) MultiTexGenfEXT(texunit uint32, coord uint32, pname uint32, param float32) {
	C.gllCall_glMultiTexGenfEXT(gl.glMultiTexGenfEXT, (C.uint32_t)(texunit), (C.uint32_t)(coord), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) MultiTexGenfvEXT(texunit uint32, coord uint32, pname uint32, params *float32) {
	C.gllCall_glMultiTexGenfvEXT(gl.glMultiTexGenfvEXT, (C.uint32_t)(texunit), (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) MultiTexGeniEXT(texunit uint32, coord uint32, pname uint32, param int32) {
	C.gllCall_glMultiTexGeniEXT(gl.glMultiTexGeniEXT, (C.uint32_t)(texunit), (C.uint32_t)(coord), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) MultiTexGenivEXT(texunit uint32, coord uint32, pname uint32, params *int32) {
	C.gllCall_glMultiTexGenivEXT(gl.glMultiTexGenivEXT, (C.uint32_t)(texunit), (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) MultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glMultiTexImage1DEXT(gl.glMultiTexImage1DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(border), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) MultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glMultiTexImage2DEXT(gl.glMultiTexImage2DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(border), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) MultiTexImage3DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glMultiTexImage3DEXT(gl.glMultiTexImage3DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(border), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) MultiTexParameterIivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
	C.gllCall_glMultiTexParameterIivEXT(gl.glMultiTexParameterIivEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) MultiTexParameterIuivEXT(texunit uint32, target uint32, pname uint32, params *uint32) {
	C.gllCall_glMultiTexParameterIuivEXT(gl.glMultiTexParameterIuivEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) MultiTexParameterfEXT(texunit uint32, target uint32, pname uint32, param float32) {
	C.gllCall_glMultiTexParameterfEXT(gl.glMultiTexParameterfEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) MultiTexParameterfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
	C.gllCall_glMultiTexParameterfvEXT(gl.glMultiTexParameterfvEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) MultiTexParameteriEXT(texunit uint32, target uint32, pname uint32, param int32) {
	C.gllCall_glMultiTexParameteriEXT(gl.glMultiTexParameteriEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) MultiTexParameterivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
	C.gllCall_glMultiTexParameterivEXT(gl.glMultiTexParameterivEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) MultiTexRenderbufferEXT(texunit uint32, target uint32, renderbuffer uint32) {
	C.gllCall_glMultiTexRenderbufferEXT(gl.glMultiTexRenderbufferEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.uint32_t)(renderbuffer))
}
func (gl *lib) MultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glMultiTexSubImage1DEXT(gl.glMultiTexSubImage1DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(width), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) MultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glMultiTexSubImage2DEXT(gl.glMultiTexSubImage2DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) MultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glMultiTexSubImage3DEXT(gl.glMultiTexSubImage3DEXT, (C.uint32_t)(texunit), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) MulticastBarrierNV() {
	C.gllCall_glMulticastBarrierNV(gl.glMulticastBarrierNV)
}
func (gl *lib) MulticastBlitFramebufferNV(srcGpu uint32, dstGpu uint32, srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
	C.gllCall_glMulticastBlitFramebufferNV(gl.glMulticastBlitFramebufferNV, (C.uint32_t)(srcGpu), (C.uint32_t)(dstGpu), (C.int32_t)(srcX0), (C.int32_t)(srcY0), (C.int32_t)(srcX1), (C.int32_t)(srcY1), (C.int32_t)(dstX0), (C.int32_t)(dstY0), (C.int32_t)(dstX1), (C.int32_t)(dstY1), (C.uint32_t)(mask), (C.uint32_t)(filter))
}
func (gl *lib) MulticastBufferSubDataNV(gpuMask uint32, buffer uint32, offset uintptr, size int, data unsafe.Pointer) {
	C.gllCall_glMulticastBufferSubDataNV(gl.glMulticastBufferSubDataNV, (C.uint32_t)(gpuMask), (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size), (unsafe.Pointer)(data))
}
func (gl *lib) MulticastCopyBufferSubDataNV(readGpu uint32, writeGpuMask uint32, readBuffer uint32, writeBuffer uint32, readOffset uintptr, writeOffset uintptr, size int) {
	C.gllCall_glMulticastCopyBufferSubDataNV(gl.glMulticastCopyBufferSubDataNV, (C.uint32_t)(readGpu), (C.uint32_t)(writeGpuMask), (C.uint32_t)(readBuffer), (C.uint32_t)(writeBuffer), (C.intptr_t)(readOffset), (C.intptr_t)(writeOffset), (C.ssize_t)(size))
}
func (gl *lib) MulticastCopyImageSubDataNV(srcGpu uint32, dstGpuMask uint32, srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32) {
	C.gllCall_glMulticastCopyImageSubDataNV(gl.glMulticastCopyImageSubDataNV, (C.uint32_t)(srcGpu), (C.uint32_t)(dstGpuMask), (C.uint32_t)(srcName), (C.uint32_t)(srcTarget), (C.int32_t)(srcLevel), (C.int32_t)(srcX), (C.int32_t)(srcY), (C.int32_t)(srcZ), (C.uint32_t)(dstName), (C.uint32_t)(dstTarget), (C.int32_t)(dstLevel), (C.int32_t)(dstX), (C.int32_t)(dstY), (C.int32_t)(dstZ), (C.int32_t)(srcWidth), (C.int32_t)(srcHeight), (C.int32_t)(srcDepth))
}
func (gl *lib) MulticastFramebufferSampleLocationsfvNV(gpu uint32, framebuffer uint32, start uint32, count int32, v *float32) {
	C.gllCall_glMulticastFramebufferSampleLocationsfvNV(gl.glMulticastFramebufferSampleLocationsfvNV, (C.uint32_t)(gpu), (C.uint32_t)(framebuffer), (C.uint32_t)(start), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) MulticastGetQueryObjecti64vNV(gpu uint32, id uint32, pname uint32, params *int64) {
	C.gllCall_glMulticastGetQueryObjecti64vNV(gl.glMulticastGetQueryObjecti64vNV, (C.uint32_t)(gpu), (C.uint32_t)(id), (C.uint32_t)(pname), (*C.int64_t)(unsafe.Pointer(params)))
}
func (gl *lib) MulticastGetQueryObjectivNV(gpu uint32, id uint32, pname uint32, params *int32) {
	C.gllCall_glMulticastGetQueryObjectivNV(gl.glMulticastGetQueryObjectivNV, (C.uint32_t)(gpu), (C.uint32_t)(id), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) MulticastGetQueryObjectui64vNV(gpu uint32, id uint32, pname uint32, params *uint64) {
	C.gllCall_glMulticastGetQueryObjectui64vNV(gl.glMulticastGetQueryObjectui64vNV, (C.uint32_t)(gpu), (C.uint32_t)(id), (C.uint32_t)(pname), (*C.uint64_t)(unsafe.Pointer(params)))
}
func (gl *lib) MulticastGetQueryObjectuivNV(gpu uint32, id uint32, pname uint32, params *uint32) {
	C.gllCall_glMulticastGetQueryObjectuivNV(gl.glMulticastGetQueryObjectuivNV, (C.uint32_t)(gpu), (C.uint32_t)(id), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) MulticastScissorArrayvNVX(gpu uint32, first uint32, count int32, v *int32) {
	C.gllCall_glMulticastScissorArrayvNVX(gl.glMulticastScissorArrayvNVX, (C.uint32_t)(gpu), (C.uint32_t)(first), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) MulticastViewportArrayvNVX(gpu uint32, first uint32, count int32, v *float32) {
	C.gllCall_glMulticastViewportArrayvNVX(gl.glMulticastViewportArrayvNVX, (C.uint32_t)(gpu), (C.uint32_t)(first), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) MulticastViewportPositionWScaleNVX(gpu uint32, index uint32, xcoeff float32, ycoeff float32) {
	C.gllCall_glMulticastViewportPositionWScaleNVX(gl.glMulticastViewportPositionWScaleNVX, (C.uint32_t)(gpu), (C.uint32_t)(index), (C.float)(xcoeff), (C.float)(ycoeff))
}
func (gl *lib) MulticastWaitSyncNV(signalGpu uint32, waitGpuMask uint32) {
	C.gllCall_glMulticastWaitSyncNV(gl.glMulticastWaitSyncNV, (C.uint32_t)(signalGpu), (C.uint32_t)(waitGpuMask))
}
func (gl *lib) NamedBufferAttachMemoryNV(buffer uint32, memory uint32, offset uint64) {
	C.gllCall_glNamedBufferAttachMemoryNV(gl.glNamedBufferAttachMemoryNV, (C.uint32_t)(buffer), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) NamedBufferData(buffer uint32, size int, data unsafe.Pointer, usage uint32) {
	C.gllCall_glNamedBufferData(gl.glNamedBufferData, (C.uint32_t)(buffer), (C.ssize_t)(size), (unsafe.Pointer)(data), (C.uint32_t)(usage))
}
func (gl *lib) NamedBufferDataEXT(buffer uint32, size int, data unsafe.Pointer, usage uint32) {
	C.gllCall_glNamedBufferDataEXT(gl.glNamedBufferDataEXT, (C.uint32_t)(buffer), (C.ssize_t)(size), (unsafe.Pointer)(data), (C.uint32_t)(usage))
}
func (gl *lib) NamedBufferPageCommitmentARB(buffer uint32, offset uintptr, size int, commit bool) {
	C.gllCall_glNamedBufferPageCommitmentARB(gl.glNamedBufferPageCommitmentARB, (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size), (C._Bool)(commit))
}
func (gl *lib) NamedBufferPageCommitmentEXT(buffer uint32, offset uintptr, size int, commit bool) {
	C.gllCall_glNamedBufferPageCommitmentEXT(gl.glNamedBufferPageCommitmentEXT, (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size), (C._Bool)(commit))
}
func (gl *lib) NamedBufferPageCommitmentMemNV(buffer uint32, offset uintptr, size int, memory uint32, memOffset uint64, commit bool) {
	C.gllCall_glNamedBufferPageCommitmentMemNV(gl.glNamedBufferPageCommitmentMemNV, (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size), (C.uint32_t)(memory), (C.uint64_t)(memOffset), (C._Bool)(commit))
}
func (gl *lib) NamedBufferStorage(buffer uint32, size int, data unsafe.Pointer, flags uint32) {
	C.gllCall_glNamedBufferStorage(gl.glNamedBufferStorage, (C.uint32_t)(buffer), (C.ssize_t)(size), (unsafe.Pointer)(data), (C.uint32_t)(flags))
}
func (gl *lib) NamedBufferStorageEXT(buffer uint32, size int, data unsafe.Pointer, flags uint32) {
	C.gllCall_glNamedBufferStorageEXT(gl.glNamedBufferStorageEXT, (C.uint32_t)(buffer), (C.ssize_t)(size), (unsafe.Pointer)(data), (C.uint32_t)(flags))
}
func (gl *lib) NamedBufferStorageMemEXT(buffer uint32, size int, memory uint32, offset uint64) {
	C.gllCall_glNamedBufferStorageMemEXT(gl.glNamedBufferStorageMemEXT, (C.uint32_t)(buffer), (C.ssize_t)(size), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) NamedBufferSubData(buffer uint32, offset uintptr, size int, data unsafe.Pointer) {
	C.gllCall_glNamedBufferSubData(gl.glNamedBufferSubData, (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size), (unsafe.Pointer)(data))
}
func (gl *lib) NamedBufferSubDataEXT(buffer uint32, offset uintptr, size int, data unsafe.Pointer) {
	C.gllCall_glNamedBufferSubDataEXT(gl.glNamedBufferSubDataEXT, (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size), (unsafe.Pointer)(data))
}
func (gl *lib) NamedCopyBufferSubDataEXT(readBuffer uint32, writeBuffer uint32, readOffset uintptr, writeOffset uintptr, size int) {
	C.gllCall_glNamedCopyBufferSubDataEXT(gl.glNamedCopyBufferSubDataEXT, (C.uint32_t)(readBuffer), (C.uint32_t)(writeBuffer), (C.intptr_t)(readOffset), (C.intptr_t)(writeOffset), (C.ssize_t)(size))
}
func (gl *lib) NamedFramebufferDrawBuffer(framebuffer uint32, buf uint32) {
	C.gllCall_glNamedFramebufferDrawBuffer(gl.glNamedFramebufferDrawBuffer, (C.uint32_t)(framebuffer), (C.uint32_t)(buf))
}
func (gl *lib) NamedFramebufferDrawBuffers(framebuffer uint32, n int32, bufs *uint32) {
	C.gllCall_glNamedFramebufferDrawBuffers(gl.glNamedFramebufferDrawBuffers, (C.uint32_t)(framebuffer), (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(bufs)))
}
func (gl *lib) NamedFramebufferParameteri(framebuffer uint32, pname uint32, param int32) {
	C.gllCall_glNamedFramebufferParameteri(gl.glNamedFramebufferParameteri, (C.uint32_t)(framebuffer), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) NamedFramebufferParameteriEXT(framebuffer uint32, pname uint32, param int32) {
	C.gllCall_glNamedFramebufferParameteriEXT(gl.glNamedFramebufferParameteriEXT, (C.uint32_t)(framebuffer), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) NamedFramebufferReadBuffer(framebuffer uint32, src uint32) {
	C.gllCall_glNamedFramebufferReadBuffer(gl.glNamedFramebufferReadBuffer, (C.uint32_t)(framebuffer), (C.uint32_t)(src))
}
func (gl *lib) NamedFramebufferRenderbuffer(framebuffer uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
	C.gllCall_glNamedFramebufferRenderbuffer(gl.glNamedFramebufferRenderbuffer, (C.uint32_t)(framebuffer), (C.uint32_t)(attachment), (C.uint32_t)(renderbuffertarget), (C.uint32_t)(renderbuffer))
}
func (gl *lib) NamedFramebufferRenderbufferEXT(framebuffer uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
	C.gllCall_glNamedFramebufferRenderbufferEXT(gl.glNamedFramebufferRenderbufferEXT, (C.uint32_t)(framebuffer), (C.uint32_t)(attachment), (C.uint32_t)(renderbuffertarget), (C.uint32_t)(renderbuffer))
}
func (gl *lib) NamedFramebufferSampleLocationsfvARB(framebuffer uint32, start uint32, count int32, v *float32) {
	C.gllCall_glNamedFramebufferSampleLocationsfvARB(gl.glNamedFramebufferSampleLocationsfvARB, (C.uint32_t)(framebuffer), (C.uint32_t)(start), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) NamedFramebufferSampleLocationsfvNV(framebuffer uint32, start uint32, count int32, v *float32) {
	C.gllCall_glNamedFramebufferSampleLocationsfvNV(gl.glNamedFramebufferSampleLocationsfvNV, (C.uint32_t)(framebuffer), (C.uint32_t)(start), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) NamedFramebufferTexture(framebuffer uint32, attachment uint32, texture uint32, level int32) {
	C.gllCall_glNamedFramebufferTexture(gl.glNamedFramebufferTexture, (C.uint32_t)(framebuffer), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) NamedFramebufferSamplePositionsfvAMD(framebuffer uint32, numsamples uint32, pixelindex uint32, values *float32) {
	C.gllCall_glNamedFramebufferSamplePositionsfvAMD(gl.glNamedFramebufferSamplePositionsfvAMD, (C.uint32_t)(framebuffer), (C.uint32_t)(numsamples), (C.uint32_t)(pixelindex), (*C.float)(unsafe.Pointer(values)))
}
func (gl *lib) NamedFramebufferTexture1DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
	C.gllCall_glNamedFramebufferTexture1DEXT(gl.glNamedFramebufferTexture1DEXT, (C.uint32_t)(framebuffer), (C.uint32_t)(attachment), (C.uint32_t)(textarget), (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) NamedFramebufferTexture2DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
	C.gllCall_glNamedFramebufferTexture2DEXT(gl.glNamedFramebufferTexture2DEXT, (C.uint32_t)(framebuffer), (C.uint32_t)(attachment), (C.uint32_t)(textarget), (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) NamedFramebufferTexture3DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32) {
	C.gllCall_glNamedFramebufferTexture3DEXT(gl.glNamedFramebufferTexture3DEXT, (C.uint32_t)(framebuffer), (C.uint32_t)(attachment), (C.uint32_t)(textarget), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(zoffset))
}
func (gl *lib) NamedFramebufferTextureEXT(framebuffer uint32, attachment uint32, texture uint32, level int32) {
	C.gllCall_glNamedFramebufferTextureEXT(gl.glNamedFramebufferTextureEXT, (C.uint32_t)(framebuffer), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) NamedFramebufferTextureFaceEXT(framebuffer uint32, attachment uint32, texture uint32, level int32, face uint32) {
	C.gllCall_glNamedFramebufferTextureFaceEXT(gl.glNamedFramebufferTextureFaceEXT, (C.uint32_t)(framebuffer), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level), (C.uint32_t)(face))
}
func (gl *lib) NamedFramebufferTextureLayer(framebuffer uint32, attachment uint32, texture uint32, level int32, layer int32) {
	C.gllCall_glNamedFramebufferTextureLayer(gl.glNamedFramebufferTextureLayer, (C.uint32_t)(framebuffer), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(layer))
}
func (gl *lib) NamedFramebufferTextureLayerEXT(framebuffer uint32, attachment uint32, texture uint32, level int32, layer int32) {
	C.gllCall_glNamedFramebufferTextureLayerEXT(gl.glNamedFramebufferTextureLayerEXT, (C.uint32_t)(framebuffer), (C.uint32_t)(attachment), (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(layer))
}
func (gl *lib) NamedProgramLocalParameter4dEXT(program uint32, target uint32, index uint32, x float64, y float64, z float64, w float64) {
	C.gllCall_glNamedProgramLocalParameter4dEXT(gl.glNamedProgramLocalParameter4dEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) NamedProgramLocalParameter4dvEXT(program uint32, target uint32, index uint32, params *float64) {
	C.gllCall_glNamedProgramLocalParameter4dvEXT(gl.glNamedProgramLocalParameter4dvEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) NamedProgramLocalParameter4fEXT(program uint32, target uint32, index uint32, x float32, y float32, z float32, w float32) {
	C.gllCall_glNamedProgramLocalParameter4fEXT(gl.glNamedProgramLocalParameter4fEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(w))
}
func (gl *lib) NamedProgramLocalParameter4fvEXT(program uint32, target uint32, index uint32, params *float32) {
	C.gllCall_glNamedProgramLocalParameter4fvEXT(gl.glNamedProgramLocalParameter4fvEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) NamedProgramLocalParameterI4iEXT(program uint32, target uint32, index uint32, x int32, y int32, z int32, w int32) {
	C.gllCall_glNamedProgramLocalParameterI4iEXT(gl.glNamedProgramLocalParameterI4iEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z), (C.int32_t)(w))
}
func (gl *lib) NamedProgramLocalParameterI4ivEXT(program uint32, target uint32, index uint32, params *int32) {
	C.gllCall_glNamedProgramLocalParameterI4ivEXT(gl.glNamedProgramLocalParameterI4ivEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) NamedProgramLocalParameterI4uiEXT(program uint32, target uint32, index uint32, x uint32, y uint32, z uint32, w uint32) {
	C.gllCall_glNamedProgramLocalParameterI4uiEXT(gl.glNamedProgramLocalParameterI4uiEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(x), (C.uint32_t)(y), (C.uint32_t)(z), (C.uint32_t)(w))
}
func (gl *lib) NamedProgramLocalParameterI4uivEXT(program uint32, target uint32, index uint32, params *uint32) {
	C.gllCall_glNamedProgramLocalParameterI4uivEXT(gl.glNamedProgramLocalParameterI4uivEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) NamedProgramLocalParameters4fvEXT(program uint32, target uint32, index uint32, count int32, params *float32) {
	C.gllCall_glNamedProgramLocalParameters4fvEXT(gl.glNamedProgramLocalParameters4fvEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (C.int32_t)(count), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) NamedProgramLocalParametersI4ivEXT(program uint32, target uint32, index uint32, count int32, params *int32) {
	C.gllCall_glNamedProgramLocalParametersI4ivEXT(gl.glNamedProgramLocalParametersI4ivEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) NamedProgramLocalParametersI4uivEXT(program uint32, target uint32, index uint32, count int32, params *uint32) {
	C.gllCall_glNamedProgramLocalParametersI4uivEXT(gl.glNamedProgramLocalParametersI4uivEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(index), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) NamedProgramStringEXT(program uint32, target uint32, format uint32, len int32, string unsafe.Pointer) {
	C.gllCall_glNamedProgramStringEXT(gl.glNamedProgramStringEXT, (C.uint32_t)(program), (C.uint32_t)(target), (C.uint32_t)(format), (C.int32_t)(len), (unsafe.Pointer)(string))
}
func (gl *lib) NamedRenderbufferStorage(renderbuffer uint32, internalformat uint32, width int32, height int32) {
	C.gllCall_glNamedRenderbufferStorage(gl.glNamedRenderbufferStorage, (C.uint32_t)(renderbuffer), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) NamedRenderbufferStorageEXT(renderbuffer uint32, internalformat uint32, width int32, height int32) {
	C.gllCall_glNamedRenderbufferStorageEXT(gl.glNamedRenderbufferStorageEXT, (C.uint32_t)(renderbuffer), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) NamedRenderbufferStorageMultisample(renderbuffer uint32, samples int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glNamedRenderbufferStorageMultisample(gl.glNamedRenderbufferStorageMultisample, (C.uint32_t)(renderbuffer), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) NamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer uint32, samples int32, storageSamples int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glNamedRenderbufferStorageMultisampleAdvancedAMD(gl.glNamedRenderbufferStorageMultisampleAdvancedAMD, (C.uint32_t)(renderbuffer), (C.int32_t)(samples), (C.int32_t)(storageSamples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) NamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer uint32, coverageSamples int32, colorSamples int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glNamedRenderbufferStorageMultisampleCoverageEXT(gl.glNamedRenderbufferStorageMultisampleCoverageEXT, (C.uint32_t)(renderbuffer), (C.int32_t)(coverageSamples), (C.int32_t)(colorSamples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) NamedRenderbufferStorageMultisampleEXT(renderbuffer uint32, samples int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glNamedRenderbufferStorageMultisampleEXT(gl.glNamedRenderbufferStorageMultisampleEXT, (C.uint32_t)(renderbuffer), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) NamedStringARB(type_ uint32, namelen int32, name *uint8, stringlen int32, string *uint8) {
	C.gllCall_glNamedStringARB(gl.glNamedStringARB, (C.uint32_t)(type_), (C.int32_t)(namelen), (*C.uint8_t)(unsafe.Pointer(name)), (C.int32_t)(stringlen), (*C.uint8_t)(unsafe.Pointer(string)))
}
func (gl *lib) NewList(list uint32, mode uint32) {
	C.gllCall_glNewList(gl.glNewList, (C.uint32_t)(list), (C.uint32_t)(mode))
}
func (gl *lib) NewObjectBufferATI(size int32, pointer unsafe.Pointer, usage uint32) uint32 {
	return (uint32)(C.gllCall_glNewObjectBufferATI(gl.glNewObjectBufferATI, (C.int32_t)(size), (unsafe.Pointer)(pointer), (C.uint32_t)(usage)))
}
func (gl *lib) Normal3b(nx int8, ny int8, nz int8) {
	C.gllCall_glNormal3b(gl.glNormal3b, (C.int8_t)(nx), (C.int8_t)(ny), (C.int8_t)(nz))
}
func (gl *lib) Normal3bv(v *int8) {
	C.gllCall_glNormal3bv(gl.glNormal3bv, (*C.int8_t)(unsafe.Pointer(v)))
}
func (gl *lib) Normal3d(nx float64, ny float64, nz float64) {
	C.gllCall_glNormal3d(gl.glNormal3d, (C.double)(nx), (C.double)(ny), (C.double)(nz))
}
func (gl *lib) Normal3dv(v *float64) {
	C.gllCall_glNormal3dv(gl.glNormal3dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) Normal3f(nx float32, ny float32, nz float32) {
	C.gllCall_glNormal3f(gl.glNormal3f, (C.float)(nx), (C.float)(ny), (C.float)(nz))
}
func (gl *lib) Normal3fVertex3fSUN(nx float32, ny float32, nz float32, x float32, y float32, z float32) {
	C.gllCall_glNormal3fVertex3fSUN(gl.glNormal3fVertex3fSUN, (C.float)(nx), (C.float)(ny), (C.float)(nz), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) Normal3fVertex3fvSUN(n *float32, v *float32) {
	C.gllCall_glNormal3fVertex3fvSUN(gl.glNormal3fVertex3fvSUN, (*C.float)(unsafe.Pointer(n)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) Normal3fv(v *float32) {
	C.gllCall_glNormal3fv(gl.glNormal3fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) Normal3hNV(nx uint16, ny uint16, nz uint16) {
	C.gllCall_glNormal3hNV(gl.glNormal3hNV, (C.uint16_t)(nx), (C.uint16_t)(ny), (C.uint16_t)(nz))
}
func (gl *lib) Normal3hvNV(v *uint16) {
	C.gllCall_glNormal3hvNV(gl.glNormal3hvNV, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) Normal3i(nx int32, ny int32, nz int32) {
	C.gllCall_glNormal3i(gl.glNormal3i, (C.int32_t)(nx), (C.int32_t)(ny), (C.int32_t)(nz))
}
func (gl *lib) Normal3iv(v *int32) {
	C.gllCall_glNormal3iv(gl.glNormal3iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) Normal3s(nx int16, ny int16, nz int16) {
	C.gllCall_glNormal3s(gl.glNormal3s, (C.int16_t)(nx), (C.int16_t)(ny), (C.int16_t)(nz))
}
func (gl *lib) Normal3sv(v *int16) {
	C.gllCall_glNormal3sv(gl.glNormal3sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) Normal3x(nx int32, ny int32, nz int32) {
	C.gllCall_glNormal3x(gl.glNormal3x, (C.int32_t)(nx), (C.int32_t)(ny), (C.int32_t)(nz))
}
func (gl *lib) Normal3xOES(nx int32, ny int32, nz int32) {
	C.gllCall_glNormal3xOES(gl.glNormal3xOES, (C.int32_t)(nx), (C.int32_t)(ny), (C.int32_t)(nz))
}
func (gl *lib) Normal3xvOES(coords *int32) {
	C.gllCall_glNormal3xvOES(gl.glNormal3xvOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) NormalFormatNV(type_ uint32, stride int32) {
	C.gllCall_glNormalFormatNV(gl.glNormalFormatNV, (C.uint32_t)(type_), (C.int32_t)(stride))
}
func (gl *lib) NormalP3ui(type_ uint32, coords uint32) {
	C.gllCall_glNormalP3ui(gl.glNormalP3ui, (C.uint32_t)(type_), (C.uint32_t)(coords))
}
func (gl *lib) NormalP3uiv(type_ uint32, coords *uint32) {
	C.gllCall_glNormalP3uiv(gl.glNormalP3uiv, (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glNormalPointer(gl.glNormalPointer, (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) NormalPointerEXT(type_ uint32, stride int32, count int32, pointer unsafe.Pointer) {
	C.gllCall_glNormalPointerEXT(gl.glNormalPointerEXT, (C.uint32_t)(type_), (C.int32_t)(stride), (C.int32_t)(count), (unsafe.Pointer)(pointer))
}
func (gl *lib) NormalPointerListIBM(type_ uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
	C.gllCall_glNormalPointerListIBM(gl.glNormalPointerListIBM, (C.uint32_t)(type_), (C.int32_t)(stride), (*unsafe.Pointer)(unsafe.Pointer(pointer)), (C.int32_t)(ptrstride))
}
func (gl *lib) NormalPointervINTEL(type_ uint32, pointer *unsafe.Pointer) {
	C.gllCall_glNormalPointervINTEL(gl.glNormalPointervINTEL, (C.uint32_t)(type_), (*unsafe.Pointer)(unsafe.Pointer(pointer)))
}
func (gl *lib) NormalStream3bATI(stream uint32, nx int8, ny int8, nz int8) {
	C.gllCall_glNormalStream3bATI(gl.glNormalStream3bATI, (C.uint32_t)(stream), (C.int8_t)(nx), (C.int8_t)(ny), (C.int8_t)(nz))
}
func (gl *lib) NormalStream3bvATI(stream uint32, coords *int8) {
	C.gllCall_glNormalStream3bvATI(gl.glNormalStream3bvATI, (C.uint32_t)(stream), (*C.int8_t)(unsafe.Pointer(coords)))
}
func (gl *lib) NormalStream3dATI(stream uint32, nx float64, ny float64, nz float64) {
	C.gllCall_glNormalStream3dATI(gl.glNormalStream3dATI, (C.uint32_t)(stream), (C.double)(nx), (C.double)(ny), (C.double)(nz))
}
func (gl *lib) NormalStream3dvATI(stream uint32, coords *float64) {
	C.gllCall_glNormalStream3dvATI(gl.glNormalStream3dvATI, (C.uint32_t)(stream), (*C.double)(unsafe.Pointer(coords)))
}
func (gl *lib) NormalStream3fATI(stream uint32, nx float32, ny float32, nz float32) {
	C.gllCall_glNormalStream3fATI(gl.glNormalStream3fATI, (C.uint32_t)(stream), (C.float)(nx), (C.float)(ny), (C.float)(nz))
}
func (gl *lib) NormalStream3fvATI(stream uint32, coords *float32) {
	C.gllCall_glNormalStream3fvATI(gl.glNormalStream3fvATI, (C.uint32_t)(stream), (*C.float)(unsafe.Pointer(coords)))
}
func (gl *lib) NormalStream3iATI(stream uint32, nx int32, ny int32, nz int32) {
	C.gllCall_glNormalStream3iATI(gl.glNormalStream3iATI, (C.uint32_t)(stream), (C.int32_t)(nx), (C.int32_t)(ny), (C.int32_t)(nz))
}
func (gl *lib) NormalStream3ivATI(stream uint32, coords *int32) {
	C.gllCall_glNormalStream3ivATI(gl.glNormalStream3ivATI, (C.uint32_t)(stream), (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) NormalStream3sATI(stream uint32, nx int16, ny int16, nz int16) {
	C.gllCall_glNormalStream3sATI(gl.glNormalStream3sATI, (C.uint32_t)(stream), (C.int16_t)(nx), (C.int16_t)(ny), (C.int16_t)(nz))
}
func (gl *lib) NormalStream3svATI(stream uint32, coords *int16) {
	C.gllCall_glNormalStream3svATI(gl.glNormalStream3svATI, (C.uint32_t)(stream), (*C.int16_t)(unsafe.Pointer(coords)))
}
func (gl *lib) ObjectLabel(identifier uint32, name uint32, length int32, label *uint8) {
	C.gllCall_glObjectLabel(gl.glObjectLabel, (C.uint32_t)(identifier), (C.uint32_t)(name), (C.int32_t)(length), (*C.uint8_t)(unsafe.Pointer(label)))
}
func (gl *lib) ObjectLabelKHR(identifier uint32, name uint32, length int32, label *uint8) {
	C.gllCall_glObjectLabelKHR(gl.glObjectLabelKHR, (C.uint32_t)(identifier), (C.uint32_t)(name), (C.int32_t)(length), (*C.uint8_t)(unsafe.Pointer(label)))
}
func (gl *lib) ObjectPtrLabel(ptr unsafe.Pointer, length int32, label *uint8) {
	C.gllCall_glObjectPtrLabel(gl.glObjectPtrLabel, (unsafe.Pointer)(ptr), (C.int32_t)(length), (*C.uint8_t)(unsafe.Pointer(label)))
}
func (gl *lib) ObjectPtrLabelKHR(ptr unsafe.Pointer, length int32, label *uint8) {
	C.gllCall_glObjectPtrLabelKHR(gl.glObjectPtrLabelKHR, (unsafe.Pointer)(ptr), (C.int32_t)(length), (*C.uint8_t)(unsafe.Pointer(label)))
}
func (gl *lib) ObjectPurgeableAPPLE(objectType uint32, name uint32, option uint32) uint32 {
	return (uint32)(C.gllCall_glObjectPurgeableAPPLE(gl.glObjectPurgeableAPPLE, (C.uint32_t)(objectType), (C.uint32_t)(name), (C.uint32_t)(option)))
}
func (gl *lib) ObjectUnpurgeableAPPLE(objectType uint32, name uint32, option uint32) uint32 {
	return (uint32)(C.gllCall_glObjectUnpurgeableAPPLE(gl.glObjectUnpurgeableAPPLE, (C.uint32_t)(objectType), (C.uint32_t)(name), (C.uint32_t)(option)))
}
func (gl *lib) Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) {
	C.gllCall_glOrtho(gl.glOrtho, (C.double)(left), (C.double)(right), (C.double)(bottom), (C.double)(top), (C.double)(zNear), (C.double)(zFar))
}
func (gl *lib) Orthof(l float32, r float32, b float32, t float32, n float32, f float32) {
	C.gllCall_glOrthof(gl.glOrthof, (C.float)(l), (C.float)(r), (C.float)(b), (C.float)(t), (C.float)(n), (C.float)(f))
}
func (gl *lib) OrthofOES(l float32, r float32, b float32, t float32, n float32, f float32) {
	C.gllCall_glOrthofOES(gl.glOrthofOES, (C.float)(l), (C.float)(r), (C.float)(b), (C.float)(t), (C.float)(n), (C.float)(f))
}
func (gl *lib) Orthox(l int32, r int32, b int32, t int32, n int32, f int32) {
	C.gllCall_glOrthox(gl.glOrthox, (C.int32_t)(l), (C.int32_t)(r), (C.int32_t)(b), (C.int32_t)(t), (C.int32_t)(n), (C.int32_t)(f))
}
func (gl *lib) OrthoxOES(l int32, r int32, b int32, t int32, n int32, f int32) {
	C.gllCall_glOrthoxOES(gl.glOrthoxOES, (C.int32_t)(l), (C.int32_t)(r), (C.int32_t)(b), (C.int32_t)(t), (C.int32_t)(n), (C.int32_t)(f))
}
func (gl *lib) PNTrianglesfATI(pname uint32, param float32) {
	C.gllCall_glPNTrianglesfATI(gl.glPNTrianglesfATI, (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) PNTrianglesiATI(pname uint32, param int32) {
	C.gllCall_glPNTrianglesiATI(gl.glPNTrianglesiATI, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) PassTexCoordATI(dst uint32, coord uint32, swizzle uint32) {
	C.gllCall_glPassTexCoordATI(gl.glPassTexCoordATI, (C.uint32_t)(dst), (C.uint32_t)(coord), (C.uint32_t)(swizzle))
}
func (gl *lib) PassThrough(token float32) {
	C.gllCall_glPassThrough(gl.glPassThrough, (C.float)(token))
}
func (gl *lib) PassThroughxOES(token int32) {
	C.gllCall_glPassThroughxOES(gl.glPassThroughxOES, (C.int32_t)(token))
}
func (gl *lib) PatchParameterfv(pname uint32, values *float32) {
	C.gllCall_glPatchParameterfv(gl.glPatchParameterfv, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(values)))
}
func (gl *lib) PatchParameteri(pname uint32, value int32) {
	C.gllCall_glPatchParameteri(gl.glPatchParameteri, (C.uint32_t)(pname), (C.int32_t)(value))
}
func (gl *lib) PatchParameteriEXT(pname uint32, value int32) {
	C.gllCall_glPatchParameteriEXT(gl.glPatchParameteriEXT, (C.uint32_t)(pname), (C.int32_t)(value))
}
func (gl *lib) PatchParameteriOES(pname uint32, value int32) {
	C.gllCall_glPatchParameteriOES(gl.glPatchParameteriOES, (C.uint32_t)(pname), (C.int32_t)(value))
}
func (gl *lib) PathColorGenNV(color uint32, genMode uint32, colorFormat uint32, coeffs *float32) {
	C.gllCall_glPathColorGenNV(gl.glPathColorGenNV, (C.uint32_t)(color), (C.uint32_t)(genMode), (C.uint32_t)(colorFormat), (*C.float)(unsafe.Pointer(coeffs)))
}
func (gl *lib) PathCommandsNV(path uint32, numCommands int32, commands *uint8, numCoords int32, coordType uint32, coords unsafe.Pointer) {
	C.gllCall_glPathCommandsNV(gl.glPathCommandsNV, (C.uint32_t)(path), (C.int32_t)(numCommands), (*C.uint8_t)(unsafe.Pointer(commands)), (C.int32_t)(numCoords), (C.uint32_t)(coordType), (unsafe.Pointer)(coords))
}
func (gl *lib) PathCoordsNV(path uint32, numCoords int32, coordType uint32, coords unsafe.Pointer) {
	C.gllCall_glPathCoordsNV(gl.glPathCoordsNV, (C.uint32_t)(path), (C.int32_t)(numCoords), (C.uint32_t)(coordType), (unsafe.Pointer)(coords))
}
func (gl *lib) PathCoverDepthFuncNV(func_ uint32) {
	C.gllCall_glPathCoverDepthFuncNV(gl.glPathCoverDepthFuncNV, (C.uint32_t)(func_))
}
func (gl *lib) PathDashArrayNV(path uint32, dashCount int32, dashArray *float32) {
	C.gllCall_glPathDashArrayNV(gl.glPathDashArrayNV, (C.uint32_t)(path), (C.int32_t)(dashCount), (*C.float)(unsafe.Pointer(dashArray)))
}
func (gl *lib) PathFogGenNV(genMode uint32) {
	C.gllCall_glPathFogGenNV(gl.glPathFogGenNV, (C.uint32_t)(genMode))
}
func (gl *lib) PathGlyphIndexArrayNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, firstGlyphIndex uint32, numGlyphs int32, pathParameterTemplate uint32, emScale float32) uint32 {
	return (uint32)(C.gllCall_glPathGlyphIndexArrayNV(gl.glPathGlyphIndexArrayNV, (C.uint32_t)(firstPathName), (C.uint32_t)(fontTarget), (unsafe.Pointer)(fontName), (C.uint32_t)(fontStyle), (C.uint32_t)(firstGlyphIndex), (C.int32_t)(numGlyphs), (C.uint32_t)(pathParameterTemplate), (C.float)(emScale)))
}
func (gl *lib) PathGlyphIndexRangeNV(fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, pathParameterTemplate uint32, emScale float32, baseAndCount uint32) uint32 {
	return (uint32)(C.gllCall_glPathGlyphIndexRangeNV(gl.glPathGlyphIndexRangeNV, (C.uint32_t)(fontTarget), (unsafe.Pointer)(fontName), (C.uint32_t)(fontStyle), (C.uint32_t)(pathParameterTemplate), (C.float)(emScale), (C.uint32_t)(baseAndCount)))
}
func (gl *lib) PathGlyphRangeNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, firstGlyph uint32, numGlyphs int32, handleMissingGlyphs uint32, pathParameterTemplate uint32, emScale float32) {
	C.gllCall_glPathGlyphRangeNV(gl.glPathGlyphRangeNV, (C.uint32_t)(firstPathName), (C.uint32_t)(fontTarget), (unsafe.Pointer)(fontName), (C.uint32_t)(fontStyle), (C.uint32_t)(firstGlyph), (C.int32_t)(numGlyphs), (C.uint32_t)(handleMissingGlyphs), (C.uint32_t)(pathParameterTemplate), (C.float)(emScale))
}
func (gl *lib) PathGlyphsNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, numGlyphs int32, type_ uint32, charcodes unsafe.Pointer, handleMissingGlyphs uint32, pathParameterTemplate uint32, emScale float32) {
	C.gllCall_glPathGlyphsNV(gl.glPathGlyphsNV, (C.uint32_t)(firstPathName), (C.uint32_t)(fontTarget), (unsafe.Pointer)(fontName), (C.uint32_t)(fontStyle), (C.int32_t)(numGlyphs), (C.uint32_t)(type_), (unsafe.Pointer)(charcodes), (C.uint32_t)(handleMissingGlyphs), (C.uint32_t)(pathParameterTemplate), (C.float)(emScale))
}
func (gl *lib) PathMemoryGlyphIndexArrayNV(firstPathName uint32, fontTarget uint32, fontSize int, fontData unsafe.Pointer, faceIndex int32, firstGlyphIndex uint32, numGlyphs int32, pathParameterTemplate uint32, emScale float32) uint32 {
	return (uint32)(C.gllCall_glPathMemoryGlyphIndexArrayNV(gl.glPathMemoryGlyphIndexArrayNV, (C.uint32_t)(firstPathName), (C.uint32_t)(fontTarget), (C.ssize_t)(fontSize), (unsafe.Pointer)(fontData), (C.int32_t)(faceIndex), (C.uint32_t)(firstGlyphIndex), (C.int32_t)(numGlyphs), (C.uint32_t)(pathParameterTemplate), (C.float)(emScale)))
}
func (gl *lib) PathParameterfNV(path uint32, pname uint32, value float32) {
	C.gllCall_glPathParameterfNV(gl.glPathParameterfNV, (C.uint32_t)(path), (C.uint32_t)(pname), (C.float)(value))
}
func (gl *lib) PathParameterfvNV(path uint32, pname uint32, value *float32) {
	C.gllCall_glPathParameterfvNV(gl.glPathParameterfvNV, (C.uint32_t)(path), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) PathParameteriNV(path uint32, pname uint32, value int32) {
	C.gllCall_glPathParameteriNV(gl.glPathParameteriNV, (C.uint32_t)(path), (C.uint32_t)(pname), (C.int32_t)(value))
}
func (gl *lib) PathParameterivNV(path uint32, pname uint32, value *int32) {
	C.gllCall_glPathParameterivNV(gl.glPathParameterivNV, (C.uint32_t)(path), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) PathStencilDepthOffsetNV(factor float32, units float32) {
	C.gllCall_glPathStencilDepthOffsetNV(gl.glPathStencilDepthOffsetNV, (C.float)(factor), (C.float)(units))
}
func (gl *lib) PathStencilFuncNV(func_ uint32, ref int32, mask uint32) {
	C.gllCall_glPathStencilFuncNV(gl.glPathStencilFuncNV, (C.uint32_t)(func_), (C.int32_t)(ref), (C.uint32_t)(mask))
}
func (gl *lib) PathStringNV(path uint32, format uint32, length int32, pathString unsafe.Pointer) {
	C.gllCall_glPathStringNV(gl.glPathStringNV, (C.uint32_t)(path), (C.uint32_t)(format), (C.int32_t)(length), (unsafe.Pointer)(pathString))
}
func (gl *lib) PathSubCommandsNV(path uint32, commandStart int32, commandsToDelete int32, numCommands int32, commands *uint8, numCoords int32, coordType uint32, coords unsafe.Pointer) {
	C.gllCall_glPathSubCommandsNV(gl.glPathSubCommandsNV, (C.uint32_t)(path), (C.int32_t)(commandStart), (C.int32_t)(commandsToDelete), (C.int32_t)(numCommands), (*C.uint8_t)(unsafe.Pointer(commands)), (C.int32_t)(numCoords), (C.uint32_t)(coordType), (unsafe.Pointer)(coords))
}
func (gl *lib) PathSubCoordsNV(path uint32, coordStart int32, numCoords int32, coordType uint32, coords unsafe.Pointer) {
	C.gllCall_glPathSubCoordsNV(gl.glPathSubCoordsNV, (C.uint32_t)(path), (C.int32_t)(coordStart), (C.int32_t)(numCoords), (C.uint32_t)(coordType), (unsafe.Pointer)(coords))
}
func (gl *lib) PathTexGenNV(texCoordSet uint32, genMode uint32, components int32, coeffs *float32) {
	C.gllCall_glPathTexGenNV(gl.glPathTexGenNV, (C.uint32_t)(texCoordSet), (C.uint32_t)(genMode), (C.int32_t)(components), (*C.float)(unsafe.Pointer(coeffs)))
}
func (gl *lib) PauseTransformFeedback() {
	C.gllCall_glPauseTransformFeedback(gl.glPauseTransformFeedback)
}
func (gl *lib) PauseTransformFeedbackNV() {
	C.gllCall_glPauseTransformFeedbackNV(gl.glPauseTransformFeedbackNV)
}
func (gl *lib) PixelDataRangeNV(target uint32, length int32, pointer unsafe.Pointer) {
	C.gllCall_glPixelDataRangeNV(gl.glPixelDataRangeNV, (C.uint32_t)(target), (C.int32_t)(length), (unsafe.Pointer)(pointer))
}
func (gl *lib) PixelMapfv(map_ uint32, mapsize int32, values *float32) {
	C.gllCall_glPixelMapfv(gl.glPixelMapfv, (C.uint32_t)(map_), (C.int32_t)(mapsize), (*C.float)(unsafe.Pointer(values)))
}
func (gl *lib) PixelMapuiv(map_ uint32, mapsize int32, values *uint32) {
	C.gllCall_glPixelMapuiv(gl.glPixelMapuiv, (C.uint32_t)(map_), (C.int32_t)(mapsize), (*C.uint32_t)(unsafe.Pointer(values)))
}
func (gl *lib) PixelMapusv(map_ uint32, mapsize int32, values *uint16) {
	C.gllCall_glPixelMapusv(gl.glPixelMapusv, (C.uint32_t)(map_), (C.int32_t)(mapsize), (*C.uint16_t)(unsafe.Pointer(values)))
}
func (gl *lib) PixelMapx(map_ uint32, size int32, values *int32) {
	C.gllCall_glPixelMapx(gl.glPixelMapx, (C.uint32_t)(map_), (C.int32_t)(size), (*C.int32_t)(unsafe.Pointer(values)))
}
func (gl *lib) PixelStoref(pname uint32, param float32) {
	C.gllCall_glPixelStoref(gl.glPixelStoref, (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) PixelStorei(pname uint32, param int32) {
	C.gllCall_glPixelStorei(gl.glPixelStorei, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) PixelStorex(pname uint32, param int32) {
	C.gllCall_glPixelStorex(gl.glPixelStorex, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) PixelTexGenParameterfSGIS(pname uint32, param float32) {
	C.gllCall_glPixelTexGenParameterfSGIS(gl.glPixelTexGenParameterfSGIS, (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) PixelTexGenParameterfvSGIS(pname uint32, params *float32) {
	C.gllCall_glPixelTexGenParameterfvSGIS(gl.glPixelTexGenParameterfvSGIS, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) PixelTexGenParameteriSGIS(pname uint32, param int32) {
	C.gllCall_glPixelTexGenParameteriSGIS(gl.glPixelTexGenParameteriSGIS, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) PixelTexGenParameterivSGIS(pname uint32, params *int32) {
	C.gllCall_glPixelTexGenParameterivSGIS(gl.glPixelTexGenParameterivSGIS, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) PixelTexGenSGIX(mode uint32) {
	C.gllCall_glPixelTexGenSGIX(gl.glPixelTexGenSGIX, (C.uint32_t)(mode))
}
func (gl *lib) PixelTransferf(pname uint32, param float32) {
	C.gllCall_glPixelTransferf(gl.glPixelTransferf, (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) PixelTransferi(pname uint32, param int32) {
	C.gllCall_glPixelTransferi(gl.glPixelTransferi, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) PixelTransferxOES(pname uint32, param int32) {
	C.gllCall_glPixelTransferxOES(gl.glPixelTransferxOES, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) PixelTransformParameterfEXT(target uint32, pname uint32, param float32) {
	C.gllCall_glPixelTransformParameterfEXT(gl.glPixelTransformParameterfEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) PixelTransformParameterfvEXT(target uint32, pname uint32, params *float32) {
	C.gllCall_glPixelTransformParameterfvEXT(gl.glPixelTransformParameterfvEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) PixelTransformParameteriEXT(target uint32, pname uint32, param int32) {
	C.gllCall_glPixelTransformParameteriEXT(gl.glPixelTransformParameteriEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) PixelTransformParameterivEXT(target uint32, pname uint32, params *int32) {
	C.gllCall_glPixelTransformParameterivEXT(gl.glPixelTransformParameterivEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) PixelZoom(xfactor float32, yfactor float32) {
	C.gllCall_glPixelZoom(gl.glPixelZoom, (C.float)(xfactor), (C.float)(yfactor))
}
func (gl *lib) PixelZoomxOES(xfactor int32, yfactor int32) {
	C.gllCall_glPixelZoomxOES(gl.glPixelZoomxOES, (C.int32_t)(xfactor), (C.int32_t)(yfactor))
}
func (gl *lib) PointAlongPathNV(path uint32, startSegment int32, numSegments int32, distance float32, x *float32, y *float32, tangentX *float32, tangentY *float32) bool {
	return (bool)(C.gllCall_glPointAlongPathNV(gl.glPointAlongPathNV, (C.uint32_t)(path), (C.int32_t)(startSegment), (C.int32_t)(numSegments), (C.float)(distance), (*C.float)(unsafe.Pointer(x)), (*C.float)(unsafe.Pointer(y)), (*C.float)(unsafe.Pointer(tangentX)), (*C.float)(unsafe.Pointer(tangentY))))
}
func (gl *lib) PointParameterf(pname uint32, param float32) {
	C.gllCall_glPointParameterf(gl.glPointParameterf, (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) PointParameterfARB(pname uint32, param float32) {
	C.gllCall_glPointParameterfARB(gl.glPointParameterfARB, (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) PointParameterfEXT(pname uint32, param float32) {
	C.gllCall_glPointParameterfEXT(gl.glPointParameterfEXT, (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) PointParameterfSGIS(pname uint32, param float32) {
	C.gllCall_glPointParameterfSGIS(gl.glPointParameterfSGIS, (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) PointParameterfv(pname uint32, params *float32) {
	C.gllCall_glPointParameterfv(gl.glPointParameterfv, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) PointParameterfvARB(pname uint32, params *float32) {
	C.gllCall_glPointParameterfvARB(gl.glPointParameterfvARB, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) PointParameterfvEXT(pname uint32, params *float32) {
	C.gllCall_glPointParameterfvEXT(gl.glPointParameterfvEXT, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) PointParameterfvSGIS(pname uint32, params *float32) {
	C.gllCall_glPointParameterfvSGIS(gl.glPointParameterfvSGIS, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) PointParameteri(pname uint32, param int32) {
	C.gllCall_glPointParameteri(gl.glPointParameteri, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) PointParameteriNV(pname uint32, param int32) {
	C.gllCall_glPointParameteriNV(gl.glPointParameteriNV, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) PointParameteriv(pname uint32, params *int32) {
	C.gllCall_glPointParameteriv(gl.glPointParameteriv, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) PointParameterivNV(pname uint32, params *int32) {
	C.gllCall_glPointParameterivNV(gl.glPointParameterivNV, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) PointParameterx(pname uint32, param int32) {
	C.gllCall_glPointParameterx(gl.glPointParameterx, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) PointParameterxOES(pname uint32, param int32) {
	C.gllCall_glPointParameterxOES(gl.glPointParameterxOES, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) PointParameterxv(pname uint32, params *int32) {
	C.gllCall_glPointParameterxv(gl.glPointParameterxv, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) PointParameterxvOES(pname uint32, params *int32) {
	C.gllCall_glPointParameterxvOES(gl.glPointParameterxvOES, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) PointSize(size float32) {
	C.gllCall_glPointSize(gl.glPointSize, (C.float)(size))
}
func (gl *lib) PointSizePointerOES(type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glPointSizePointerOES(gl.glPointSizePointerOES, (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) PointSizex(size int32) {
	C.gllCall_glPointSizex(gl.glPointSizex, (C.int32_t)(size))
}
func (gl *lib) PointSizexOES(size int32) {
	C.gllCall_glPointSizexOES(gl.glPointSizexOES, (C.int32_t)(size))
}
func (gl *lib) PollAsyncSGIX(markerp *uint32) int32 {
	return (int32)(C.gllCall_glPollAsyncSGIX(gl.glPollAsyncSGIX, (*C.uint32_t)(unsafe.Pointer(markerp))))
}
func (gl *lib) PollInstrumentsSGIX(marker_p *int32) int32 {
	return (int32)(C.gllCall_glPollInstrumentsSGIX(gl.glPollInstrumentsSGIX, (*C.int32_t)(unsafe.Pointer(marker_p))))
}
func (gl *lib) PolygonMode(face uint32, mode uint32) {
	C.gllCall_glPolygonMode(gl.glPolygonMode, (C.uint32_t)(face), (C.uint32_t)(mode))
}
func (gl *lib) PolygonModeNV(face uint32, mode uint32) {
	C.gllCall_glPolygonModeNV(gl.glPolygonModeNV, (C.uint32_t)(face), (C.uint32_t)(mode))
}
func (gl *lib) PolygonOffset(factor float32, units float32) {
	C.gllCall_glPolygonOffset(gl.glPolygonOffset, (C.float)(factor), (C.float)(units))
}
func (gl *lib) PolygonOffsetClamp(factor float32, units float32, clamp float32) {
	C.gllCall_glPolygonOffsetClamp(gl.glPolygonOffsetClamp, (C.float)(factor), (C.float)(units), (C.float)(clamp))
}
func (gl *lib) PolygonOffsetClampEXT(factor float32, units float32, clamp float32) {
	C.gllCall_glPolygonOffsetClampEXT(gl.glPolygonOffsetClampEXT, (C.float)(factor), (C.float)(units), (C.float)(clamp))
}
func (gl *lib) PolygonOffsetEXT(factor float32, bias float32) {
	C.gllCall_glPolygonOffsetEXT(gl.glPolygonOffsetEXT, (C.float)(factor), (C.float)(bias))
}
func (gl *lib) PolygonOffsetx(factor int32, units int32) {
	C.gllCall_glPolygonOffsetx(gl.glPolygonOffsetx, (C.int32_t)(factor), (C.int32_t)(units))
}
func (gl *lib) PolygonOffsetxOES(factor int32, units int32) {
	C.gllCall_glPolygonOffsetxOES(gl.glPolygonOffsetxOES, (C.int32_t)(factor), (C.int32_t)(units))
}
func (gl *lib) PolygonStipple(mask *uint8) {
	C.gllCall_glPolygonStipple(gl.glPolygonStipple, (*C.uint8_t)(unsafe.Pointer(mask)))
}
func (gl *lib) PopAttrib() {
	C.gllCall_glPopAttrib(gl.glPopAttrib)
}
func (gl *lib) PopClientAttrib() {
	C.gllCall_glPopClientAttrib(gl.glPopClientAttrib)
}
func (gl *lib) PopDebugGroup() {
	C.gllCall_glPopDebugGroup(gl.glPopDebugGroup)
}
func (gl *lib) PopDebugGroupKHR() {
	C.gllCall_glPopDebugGroupKHR(gl.glPopDebugGroupKHR)
}
func (gl *lib) PopGroupMarkerEXT() {
	C.gllCall_glPopGroupMarkerEXT(gl.glPopGroupMarkerEXT)
}
func (gl *lib) PopMatrix() {
	C.gllCall_glPopMatrix(gl.glPopMatrix)
}
func (gl *lib) PopName() {
	C.gllCall_glPopName(gl.glPopName)
}
func (gl *lib) PresentFrameDualFillNV(video_slot uint32, minPresentTime uint64, beginPresentTimeId uint32, presentDurationId uint32, type_ uint32, target0 uint32, fill0 uint32, target1 uint32, fill1 uint32, target2 uint32, fill2 uint32, target3 uint32, fill3 uint32) {
	C.gllCall_glPresentFrameDualFillNV(gl.glPresentFrameDualFillNV, (C.uint32_t)(video_slot), (C.uint64_t)(minPresentTime), (C.uint32_t)(beginPresentTimeId), (C.uint32_t)(presentDurationId), (C.uint32_t)(type_), (C.uint32_t)(target0), (C.uint32_t)(fill0), (C.uint32_t)(target1), (C.uint32_t)(fill1), (C.uint32_t)(target2), (C.uint32_t)(fill2), (C.uint32_t)(target3), (C.uint32_t)(fill3))
}
func (gl *lib) PresentFrameKeyedNV(video_slot uint32, minPresentTime uint64, beginPresentTimeId uint32, presentDurationId uint32, type_ uint32, target0 uint32, fill0 uint32, key0 uint32, target1 uint32, fill1 uint32, key1 uint32) {
	C.gllCall_glPresentFrameKeyedNV(gl.glPresentFrameKeyedNV, (C.uint32_t)(video_slot), (C.uint64_t)(minPresentTime), (C.uint32_t)(beginPresentTimeId), (C.uint32_t)(presentDurationId), (C.uint32_t)(type_), (C.uint32_t)(target0), (C.uint32_t)(fill0), (C.uint32_t)(key0), (C.uint32_t)(target1), (C.uint32_t)(fill1), (C.uint32_t)(key1))
}
func (gl *lib) PrimitiveBoundingBox(minX float32, minY float32, minZ float32, minW float32, maxX float32, maxY float32, maxZ float32, maxW float32) {
	C.gllCall_glPrimitiveBoundingBox(gl.glPrimitiveBoundingBox, (C.float)(minX), (C.float)(minY), (C.float)(minZ), (C.float)(minW), (C.float)(maxX), (C.float)(maxY), (C.float)(maxZ), (C.float)(maxW))
}
func (gl *lib) PrimitiveBoundingBoxARB(minX float32, minY float32, minZ float32, minW float32, maxX float32, maxY float32, maxZ float32, maxW float32) {
	C.gllCall_glPrimitiveBoundingBoxARB(gl.glPrimitiveBoundingBoxARB, (C.float)(minX), (C.float)(minY), (C.float)(minZ), (C.float)(minW), (C.float)(maxX), (C.float)(maxY), (C.float)(maxZ), (C.float)(maxW))
}
func (gl *lib) PrimitiveBoundingBoxEXT(minX float32, minY float32, minZ float32, minW float32, maxX float32, maxY float32, maxZ float32, maxW float32) {
	C.gllCall_glPrimitiveBoundingBoxEXT(gl.glPrimitiveBoundingBoxEXT, (C.float)(minX), (C.float)(minY), (C.float)(minZ), (C.float)(minW), (C.float)(maxX), (C.float)(maxY), (C.float)(maxZ), (C.float)(maxW))
}
func (gl *lib) PrimitiveBoundingBoxOES(minX float32, minY float32, minZ float32, minW float32, maxX float32, maxY float32, maxZ float32, maxW float32) {
	C.gllCall_glPrimitiveBoundingBoxOES(gl.glPrimitiveBoundingBoxOES, (C.float)(minX), (C.float)(minY), (C.float)(minZ), (C.float)(minW), (C.float)(maxX), (C.float)(maxY), (C.float)(maxZ), (C.float)(maxW))
}
func (gl *lib) PrimitiveRestartIndex(index uint32) {
	C.gllCall_glPrimitiveRestartIndex(gl.glPrimitiveRestartIndex, (C.uint32_t)(index))
}
func (gl *lib) PrimitiveRestartIndexNV(index uint32) {
	C.gllCall_glPrimitiveRestartIndexNV(gl.glPrimitiveRestartIndexNV, (C.uint32_t)(index))
}
func (gl *lib) PrimitiveRestartNV() {
	C.gllCall_glPrimitiveRestartNV(gl.glPrimitiveRestartNV)
}
func (gl *lib) PrioritizeTextures(n int32, textures *uint32, priorities *float32) {
	C.gllCall_glPrioritizeTextures(gl.glPrioritizeTextures, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(textures)), (*C.float)(unsafe.Pointer(priorities)))
}
func (gl *lib) PrioritizeTexturesEXT(n int32, textures *uint32, priorities *float32) {
	C.gllCall_glPrioritizeTexturesEXT(gl.glPrioritizeTexturesEXT, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(textures)), (*C.float)(unsafe.Pointer(priorities)))
}
func (gl *lib) PrioritizeTexturesxOES(n int32, textures *uint32, priorities *int32) {
	C.gllCall_glPrioritizeTexturesxOES(gl.glPrioritizeTexturesxOES, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(textures)), (*C.int32_t)(unsafe.Pointer(priorities)))
}
func (gl *lib) ProgramBinary(program uint32, binaryFormat uint32, binary unsafe.Pointer, length int32) {
	C.gllCall_glProgramBinary(gl.glProgramBinary, (C.uint32_t)(program), (C.uint32_t)(binaryFormat), (unsafe.Pointer)(binary), (C.int32_t)(length))
}
func (gl *lib) ProgramBinaryOES(program uint32, binaryFormat uint32, binary unsafe.Pointer, length int32) {
	C.gllCall_glProgramBinaryOES(gl.glProgramBinaryOES, (C.uint32_t)(program), (C.uint32_t)(binaryFormat), (unsafe.Pointer)(binary), (C.int32_t)(length))
}
func (gl *lib) ProgramBufferParametersIivNV(target uint32, bindingIndex uint32, wordIndex uint32, count int32, params *int32) {
	C.gllCall_glProgramBufferParametersIivNV(gl.glProgramBufferParametersIivNV, (C.uint32_t)(target), (C.uint32_t)(bindingIndex), (C.uint32_t)(wordIndex), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramBufferParametersIuivNV(target uint32, bindingIndex uint32, wordIndex uint32, count int32, params *uint32) {
	C.gllCall_glProgramBufferParametersIuivNV(gl.glProgramBufferParametersIuivNV, (C.uint32_t)(target), (C.uint32_t)(bindingIndex), (C.uint32_t)(wordIndex), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramBufferParametersfvNV(target uint32, bindingIndex uint32, wordIndex uint32, count int32, params *float32) {
	C.gllCall_glProgramBufferParametersfvNV(gl.glProgramBufferParametersfvNV, (C.uint32_t)(target), (C.uint32_t)(bindingIndex), (C.uint32_t)(wordIndex), (C.int32_t)(count), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramEnvParameter4dARB(target uint32, index uint32, x float64, y float64, z float64, w float64) {
	C.gllCall_glProgramEnvParameter4dARB(gl.glProgramEnvParameter4dARB, (C.uint32_t)(target), (C.uint32_t)(index), (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) ProgramEnvParameter4dvARB(target uint32, index uint32, params *float64) {
	C.gllCall_glProgramEnvParameter4dvARB(gl.glProgramEnvParameter4dvARB, (C.uint32_t)(target), (C.uint32_t)(index), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramEnvParameter4fARB(target uint32, index uint32, x float32, y float32, z float32, w float32) {
	C.gllCall_glProgramEnvParameter4fARB(gl.glProgramEnvParameter4fARB, (C.uint32_t)(target), (C.uint32_t)(index), (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(w))
}
func (gl *lib) ProgramEnvParameter4fvARB(target uint32, index uint32, params *float32) {
	C.gllCall_glProgramEnvParameter4fvARB(gl.glProgramEnvParameter4fvARB, (C.uint32_t)(target), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramEnvParameterI4iNV(target uint32, index uint32, x int32, y int32, z int32, w int32) {
	C.gllCall_glProgramEnvParameterI4iNV(gl.glProgramEnvParameterI4iNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z), (C.int32_t)(w))
}
func (gl *lib) ProgramEnvParameterI4ivNV(target uint32, index uint32, params *int32) {
	C.gllCall_glProgramEnvParameterI4ivNV(gl.glProgramEnvParameterI4ivNV, (C.uint32_t)(target), (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramEnvParameterI4uiNV(target uint32, index uint32, x uint32, y uint32, z uint32, w uint32) {
	C.gllCall_glProgramEnvParameterI4uiNV(gl.glProgramEnvParameterI4uiNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(x), (C.uint32_t)(y), (C.uint32_t)(z), (C.uint32_t)(w))
}
func (gl *lib) ProgramEnvParameterI4uivNV(target uint32, index uint32, params *uint32) {
	C.gllCall_glProgramEnvParameterI4uivNV(gl.glProgramEnvParameterI4uivNV, (C.uint32_t)(target), (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramEnvParameters4fvEXT(target uint32, index uint32, count int32, params *float32) {
	C.gllCall_glProgramEnvParameters4fvEXT(gl.glProgramEnvParameters4fvEXT, (C.uint32_t)(target), (C.uint32_t)(index), (C.int32_t)(count), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramEnvParametersI4ivNV(target uint32, index uint32, count int32, params *int32) {
	C.gllCall_glProgramEnvParametersI4ivNV(gl.glProgramEnvParametersI4ivNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramEnvParametersI4uivNV(target uint32, index uint32, count int32, params *uint32) {
	C.gllCall_glProgramEnvParametersI4uivNV(gl.glProgramEnvParametersI4uivNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramLocalParameter4dARB(target uint32, index uint32, x float64, y float64, z float64, w float64) {
	C.gllCall_glProgramLocalParameter4dARB(gl.glProgramLocalParameter4dARB, (C.uint32_t)(target), (C.uint32_t)(index), (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) ProgramLocalParameter4dvARB(target uint32, index uint32, params *float64) {
	C.gllCall_glProgramLocalParameter4dvARB(gl.glProgramLocalParameter4dvARB, (C.uint32_t)(target), (C.uint32_t)(index), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramLocalParameter4fARB(target uint32, index uint32, x float32, y float32, z float32, w float32) {
	C.gllCall_glProgramLocalParameter4fARB(gl.glProgramLocalParameter4fARB, (C.uint32_t)(target), (C.uint32_t)(index), (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(w))
}
func (gl *lib) ProgramLocalParameter4fvARB(target uint32, index uint32, params *float32) {
	C.gllCall_glProgramLocalParameter4fvARB(gl.glProgramLocalParameter4fvARB, (C.uint32_t)(target), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramLocalParameterI4iNV(target uint32, index uint32, x int32, y int32, z int32, w int32) {
	C.gllCall_glProgramLocalParameterI4iNV(gl.glProgramLocalParameterI4iNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z), (C.int32_t)(w))
}
func (gl *lib) ProgramLocalParameterI4ivNV(target uint32, index uint32, params *int32) {
	C.gllCall_glProgramLocalParameterI4ivNV(gl.glProgramLocalParameterI4ivNV, (C.uint32_t)(target), (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramLocalParameterI4uiNV(target uint32, index uint32, x uint32, y uint32, z uint32, w uint32) {
	C.gllCall_glProgramLocalParameterI4uiNV(gl.glProgramLocalParameterI4uiNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.uint32_t)(x), (C.uint32_t)(y), (C.uint32_t)(z), (C.uint32_t)(w))
}
func (gl *lib) ProgramLocalParameterI4uivNV(target uint32, index uint32, params *uint32) {
	C.gllCall_glProgramLocalParameterI4uivNV(gl.glProgramLocalParameterI4uivNV, (C.uint32_t)(target), (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramLocalParameters4fvEXT(target uint32, index uint32, count int32, params *float32) {
	C.gllCall_glProgramLocalParameters4fvEXT(gl.glProgramLocalParameters4fvEXT, (C.uint32_t)(target), (C.uint32_t)(index), (C.int32_t)(count), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramLocalParametersI4ivNV(target uint32, index uint32, count int32, params *int32) {
	C.gllCall_glProgramLocalParametersI4ivNV(gl.glProgramLocalParametersI4ivNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramLocalParametersI4uivNV(target uint32, index uint32, count int32, params *uint32) {
	C.gllCall_glProgramLocalParametersI4uivNV(gl.glProgramLocalParametersI4uivNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramNamedParameter4dNV(id uint32, len int32, name *uint8, x float64, y float64, z float64, w float64) {
	C.gllCall_glProgramNamedParameter4dNV(gl.glProgramNamedParameter4dNV, (C.uint32_t)(id), (C.int32_t)(len), (*C.uint8_t)(unsafe.Pointer(name)), (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) ProgramNamedParameter4dvNV(id uint32, len int32, name *uint8, v *float64) {
	C.gllCall_glProgramNamedParameter4dvNV(gl.glProgramNamedParameter4dvNV, (C.uint32_t)(id), (C.int32_t)(len), (*C.uint8_t)(unsafe.Pointer(name)), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) ProgramNamedParameter4fNV(id uint32, len int32, name *uint8, x float32, y float32, z float32, w float32) {
	C.gllCall_glProgramNamedParameter4fNV(gl.glProgramNamedParameter4fNV, (C.uint32_t)(id), (C.int32_t)(len), (*C.uint8_t)(unsafe.Pointer(name)), (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(w))
}
func (gl *lib) ProgramNamedParameter4fvNV(id uint32, len int32, name *uint8, v *float32) {
	C.gllCall_glProgramNamedParameter4fvNV(gl.glProgramNamedParameter4fvNV, (C.uint32_t)(id), (C.int32_t)(len), (*C.uint8_t)(unsafe.Pointer(name)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ProgramParameter4dNV(target uint32, index uint32, x float64, y float64, z float64, w float64) {
	C.gllCall_glProgramParameter4dNV(gl.glProgramParameter4dNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) ProgramParameter4dvNV(target uint32, index uint32, v *float64) {
	C.gllCall_glProgramParameter4dvNV(gl.glProgramParameter4dvNV, (C.uint32_t)(target), (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) ProgramParameter4fNV(target uint32, index uint32, x float32, y float32, z float32, w float32) {
	C.gllCall_glProgramParameter4fNV(gl.glProgramParameter4fNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(w))
}
func (gl *lib) ProgramParameter4fvNV(target uint32, index uint32, v *float32) {
	C.gllCall_glProgramParameter4fvNV(gl.glProgramParameter4fvNV, (C.uint32_t)(target), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ProgramParameteri(program uint32, pname uint32, value int32) {
	C.gllCall_glProgramParameteri(gl.glProgramParameteri, (C.uint32_t)(program), (C.uint32_t)(pname), (C.int32_t)(value))
}
func (gl *lib) ProgramParameteriARB(program uint32, pname uint32, value int32) {
	C.gllCall_glProgramParameteriARB(gl.glProgramParameteriARB, (C.uint32_t)(program), (C.uint32_t)(pname), (C.int32_t)(value))
}
func (gl *lib) ProgramParameteriEXT(program uint32, pname uint32, value int32) {
	C.gllCall_glProgramParameteriEXT(gl.glProgramParameteriEXT, (C.uint32_t)(program), (C.uint32_t)(pname), (C.int32_t)(value))
}
func (gl *lib) ProgramParameters4dvNV(target uint32, index uint32, count int32, v *float64) {
	C.gllCall_glProgramParameters4dvNV(gl.glProgramParameters4dvNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.int32_t)(count), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) ProgramParameters4fvNV(target uint32, index uint32, count int32, v *float32) {
	C.gllCall_glProgramParameters4fvNV(gl.glProgramParameters4fvNV, (C.uint32_t)(target), (C.uint32_t)(index), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ProgramPathFragmentInputGenNV(program uint32, location int32, genMode uint32, components int32, coeffs *float32) {
	C.gllCall_glProgramPathFragmentInputGenNV(gl.glProgramPathFragmentInputGenNV, (C.uint32_t)(program), (C.int32_t)(location), (C.uint32_t)(genMode), (C.int32_t)(components), (*C.float)(unsafe.Pointer(coeffs)))
}
func (gl *lib) ProgramStringARB(target uint32, format uint32, len int32, string unsafe.Pointer) {
	C.gllCall_glProgramStringARB(gl.glProgramStringARB, (C.uint32_t)(target), (C.uint32_t)(format), (C.int32_t)(len), (unsafe.Pointer)(string))
}
func (gl *lib) ProgramSubroutineParametersuivNV(target uint32, count int32, params *uint32) {
	C.gllCall_glProgramSubroutineParametersuivNV(gl.glProgramSubroutineParametersuivNV, (C.uint32_t)(target), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) ProgramUniform1d(program uint32, location int32, v0 float64) {
	C.gllCall_glProgramUniform1d(gl.glProgramUniform1d, (C.uint32_t)(program), (C.int32_t)(location), (C.double)(v0))
}
func (gl *lib) ProgramUniform1dEXT(program uint32, location int32, x float64) {
	C.gllCall_glProgramUniform1dEXT(gl.glProgramUniform1dEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.double)(x))
}
func (gl *lib) ProgramUniform1dv(program uint32, location int32, count int32, value *float64) {
	C.gllCall_glProgramUniform1dv(gl.glProgramUniform1dv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform1dvEXT(program uint32, location int32, count int32, value *float64) {
	C.gllCall_glProgramUniform1dvEXT(gl.glProgramUniform1dvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform1f(program uint32, location int32, v0 float32) {
	C.gllCall_glProgramUniform1f(gl.glProgramUniform1f, (C.uint32_t)(program), (C.int32_t)(location), (C.float)(v0))
}
func (gl *lib) ProgramUniform1fEXT(program uint32, location int32, v0 float32) {
	C.gllCall_glProgramUniform1fEXT(gl.glProgramUniform1fEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.float)(v0))
}
func (gl *lib) ProgramUniform1fv(program uint32, location int32, count int32, value *float32) {
	C.gllCall_glProgramUniform1fv(gl.glProgramUniform1fv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform1fvEXT(program uint32, location int32, count int32, value *float32) {
	C.gllCall_glProgramUniform1fvEXT(gl.glProgramUniform1fvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform1i(program uint32, location int32, v0 int32) {
	C.gllCall_glProgramUniform1i(gl.glProgramUniform1i, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(v0))
}
func (gl *lib) ProgramUniform1i64ARB(program uint32, location int32, x int64) {
	C.gllCall_glProgramUniform1i64ARB(gl.glProgramUniform1i64ARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int64_t)(x))
}
func (gl *lib) ProgramUniform1i64NV(program uint32, location int32, x int64) {
	C.gllCall_glProgramUniform1i64NV(gl.glProgramUniform1i64NV, (C.uint32_t)(program), (C.int32_t)(location), (C.int64_t)(x))
}
func (gl *lib) ProgramUniform1i64vARB(program uint32, location int32, count int32, value *int64) {
	C.gllCall_glProgramUniform1i64vARB(gl.glProgramUniform1i64vARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform1i64vNV(program uint32, location int32, count int32, value *int64) {
	C.gllCall_glProgramUniform1i64vNV(gl.glProgramUniform1i64vNV, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform1iEXT(program uint32, location int32, v0 int32) {
	C.gllCall_glProgramUniform1iEXT(gl.glProgramUniform1iEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(v0))
}
func (gl *lib) ProgramUniform1iv(program uint32, location int32, count int32, value *int32) {
	C.gllCall_glProgramUniform1iv(gl.glProgramUniform1iv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform1ivEXT(program uint32, location int32, count int32, value *int32) {
	C.gllCall_glProgramUniform1ivEXT(gl.glProgramUniform1ivEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform1ui(program uint32, location int32, v0 uint32) {
	C.gllCall_glProgramUniform1ui(gl.glProgramUniform1ui, (C.uint32_t)(program), (C.int32_t)(location), (C.uint32_t)(v0))
}
func (gl *lib) ProgramUniform1ui64ARB(program uint32, location int32, x uint64) {
	C.gllCall_glProgramUniform1ui64ARB(gl.glProgramUniform1ui64ARB, (C.uint32_t)(program), (C.int32_t)(location), (C.uint64_t)(x))
}
func (gl *lib) ProgramUniform1ui64NV(program uint32, location int32, x uint64) {
	C.gllCall_glProgramUniform1ui64NV(gl.glProgramUniform1ui64NV, (C.uint32_t)(program), (C.int32_t)(location), (C.uint64_t)(x))
}
func (gl *lib) ProgramUniform1ui64vARB(program uint32, location int32, count int32, value *uint64) {
	C.gllCall_glProgramUniform1ui64vARB(gl.glProgramUniform1ui64vARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform1ui64vNV(program uint32, location int32, count int32, value *uint64) {
	C.gllCall_glProgramUniform1ui64vNV(gl.glProgramUniform1ui64vNV, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform1uiEXT(program uint32, location int32, v0 uint32) {
	C.gllCall_glProgramUniform1uiEXT(gl.glProgramUniform1uiEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.uint32_t)(v0))
}
func (gl *lib) ProgramUniform1uiv(program uint32, location int32, count int32, value *uint32) {
	C.gllCall_glProgramUniform1uiv(gl.glProgramUniform1uiv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform1uivEXT(program uint32, location int32, count int32, value *uint32) {
	C.gllCall_glProgramUniform1uivEXT(gl.glProgramUniform1uivEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform2d(program uint32, location int32, v0 float64, v1 float64) {
	C.gllCall_glProgramUniform2d(gl.glProgramUniform2d, (C.uint32_t)(program), (C.int32_t)(location), (C.double)(v0), (C.double)(v1))
}
func (gl *lib) ProgramUniform2dEXT(program uint32, location int32, x float64, y float64) {
	C.gllCall_glProgramUniform2dEXT(gl.glProgramUniform2dEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.double)(x), (C.double)(y))
}
func (gl *lib) ProgramUniform2dv(program uint32, location int32, count int32, value *float64) {
	C.gllCall_glProgramUniform2dv(gl.glProgramUniform2dv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform2dvEXT(program uint32, location int32, count int32, value *float64) {
	C.gllCall_glProgramUniform2dvEXT(gl.glProgramUniform2dvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32) {
	C.gllCall_glProgramUniform2f(gl.glProgramUniform2f, (C.uint32_t)(program), (C.int32_t)(location), (C.float)(v0), (C.float)(v1))
}
func (gl *lib) ProgramUniform2fEXT(program uint32, location int32, v0 float32, v1 float32) {
	C.gllCall_glProgramUniform2fEXT(gl.glProgramUniform2fEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.float)(v0), (C.float)(v1))
}
func (gl *lib) ProgramUniform2fv(program uint32, location int32, count int32, value *float32) {
	C.gllCall_glProgramUniform2fv(gl.glProgramUniform2fv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform2fvEXT(program uint32, location int32, count int32, value *float32) {
	C.gllCall_glProgramUniform2fvEXT(gl.glProgramUniform2fvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32) {
	C.gllCall_glProgramUniform2i(gl.glProgramUniform2i, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(v0), (C.int32_t)(v1))
}
func (gl *lib) ProgramUniform2i64ARB(program uint32, location int32, x int64, y int64) {
	C.gllCall_glProgramUniform2i64ARB(gl.glProgramUniform2i64ARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int64_t)(x), (C.int64_t)(y))
}
func (gl *lib) ProgramUniform2i64NV(program uint32, location int32, x int64, y int64) {
	C.gllCall_glProgramUniform2i64NV(gl.glProgramUniform2i64NV, (C.uint32_t)(program), (C.int32_t)(location), (C.int64_t)(x), (C.int64_t)(y))
}
func (gl *lib) ProgramUniform2i64vARB(program uint32, location int32, count int32, value *int64) {
	C.gllCall_glProgramUniform2i64vARB(gl.glProgramUniform2i64vARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform2i64vNV(program uint32, location int32, count int32, value *int64) {
	C.gllCall_glProgramUniform2i64vNV(gl.glProgramUniform2i64vNV, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform2iEXT(program uint32, location int32, v0 int32, v1 int32) {
	C.gllCall_glProgramUniform2iEXT(gl.glProgramUniform2iEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(v0), (C.int32_t)(v1))
}
func (gl *lib) ProgramUniform2iv(program uint32, location int32, count int32, value *int32) {
	C.gllCall_glProgramUniform2iv(gl.glProgramUniform2iv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform2ivEXT(program uint32, location int32, count int32, value *int32) {
	C.gllCall_glProgramUniform2ivEXT(gl.glProgramUniform2ivEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32) {
	C.gllCall_glProgramUniform2ui(gl.glProgramUniform2ui, (C.uint32_t)(program), (C.int32_t)(location), (C.uint32_t)(v0), (C.uint32_t)(v1))
}
func (gl *lib) ProgramUniform2ui64ARB(program uint32, location int32, x uint64, y uint64) {
	C.gllCall_glProgramUniform2ui64ARB(gl.glProgramUniform2ui64ARB, (C.uint32_t)(program), (C.int32_t)(location), (C.uint64_t)(x), (C.uint64_t)(y))
}
func (gl *lib) ProgramUniform2ui64NV(program uint32, location int32, x uint64, y uint64) {
	C.gllCall_glProgramUniform2ui64NV(gl.glProgramUniform2ui64NV, (C.uint32_t)(program), (C.int32_t)(location), (C.uint64_t)(x), (C.uint64_t)(y))
}
func (gl *lib) ProgramUniform2ui64vARB(program uint32, location int32, count int32, value *uint64) {
	C.gllCall_glProgramUniform2ui64vARB(gl.glProgramUniform2ui64vARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform2ui64vNV(program uint32, location int32, count int32, value *uint64) {
	C.gllCall_glProgramUniform2ui64vNV(gl.glProgramUniform2ui64vNV, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform2uiEXT(program uint32, location int32, v0 uint32, v1 uint32) {
	C.gllCall_glProgramUniform2uiEXT(gl.glProgramUniform2uiEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.uint32_t)(v0), (C.uint32_t)(v1))
}
func (gl *lib) ProgramUniform2uiv(program uint32, location int32, count int32, value *uint32) {
	C.gllCall_glProgramUniform2uiv(gl.glProgramUniform2uiv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform2uivEXT(program uint32, location int32, count int32, value *uint32) {
	C.gllCall_glProgramUniform2uivEXT(gl.glProgramUniform2uivEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform3d(program uint32, location int32, v0 float64, v1 float64, v2 float64) {
	C.gllCall_glProgramUniform3d(gl.glProgramUniform3d, (C.uint32_t)(program), (C.int32_t)(location), (C.double)(v0), (C.double)(v1), (C.double)(v2))
}
func (gl *lib) ProgramUniform3dEXT(program uint32, location int32, x float64, y float64, z float64) {
	C.gllCall_glProgramUniform3dEXT(gl.glProgramUniform3dEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) ProgramUniform3dv(program uint32, location int32, count int32, value *float64) {
	C.gllCall_glProgramUniform3dv(gl.glProgramUniform3dv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform3dvEXT(program uint32, location int32, count int32, value *float64) {
	C.gllCall_glProgramUniform3dvEXT(gl.glProgramUniform3dvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32) {
	C.gllCall_glProgramUniform3f(gl.glProgramUniform3f, (C.uint32_t)(program), (C.int32_t)(location), (C.float)(v0), (C.float)(v1), (C.float)(v2))
}
func (gl *lib) ProgramUniform3fEXT(program uint32, location int32, v0 float32, v1 float32, v2 float32) {
	C.gllCall_glProgramUniform3fEXT(gl.glProgramUniform3fEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.float)(v0), (C.float)(v1), (C.float)(v2))
}
func (gl *lib) ProgramUniform3fv(program uint32, location int32, count int32, value *float32) {
	C.gllCall_glProgramUniform3fv(gl.glProgramUniform3fv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform3fvEXT(program uint32, location int32, count int32, value *float32) {
	C.gllCall_glProgramUniform3fvEXT(gl.glProgramUniform3fvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32) {
	C.gllCall_glProgramUniform3i(gl.glProgramUniform3i, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(v0), (C.int32_t)(v1), (C.int32_t)(v2))
}
func (gl *lib) ProgramUniform3i64ARB(program uint32, location int32, x int64, y int64, z int64) {
	C.gllCall_glProgramUniform3i64ARB(gl.glProgramUniform3i64ARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int64_t)(x), (C.int64_t)(y), (C.int64_t)(z))
}
func (gl *lib) ProgramUniform3i64NV(program uint32, location int32, x int64, y int64, z int64) {
	C.gllCall_glProgramUniform3i64NV(gl.glProgramUniform3i64NV, (C.uint32_t)(program), (C.int32_t)(location), (C.int64_t)(x), (C.int64_t)(y), (C.int64_t)(z))
}
func (gl *lib) ProgramUniform3i64vARB(program uint32, location int32, count int32, value *int64) {
	C.gllCall_glProgramUniform3i64vARB(gl.glProgramUniform3i64vARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform3i64vNV(program uint32, location int32, count int32, value *int64) {
	C.gllCall_glProgramUniform3i64vNV(gl.glProgramUniform3i64vNV, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform3iEXT(program uint32, location int32, v0 int32, v1 int32, v2 int32) {
	C.gllCall_glProgramUniform3iEXT(gl.glProgramUniform3iEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(v0), (C.int32_t)(v1), (C.int32_t)(v2))
}
func (gl *lib) ProgramUniform3iv(program uint32, location int32, count int32, value *int32) {
	C.gllCall_glProgramUniform3iv(gl.glProgramUniform3iv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform3ivEXT(program uint32, location int32, count int32, value *int32) {
	C.gllCall_glProgramUniform3ivEXT(gl.glProgramUniform3ivEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32) {
	C.gllCall_glProgramUniform3ui(gl.glProgramUniform3ui, (C.uint32_t)(program), (C.int32_t)(location), (C.uint32_t)(v0), (C.uint32_t)(v1), (C.uint32_t)(v2))
}
func (gl *lib) ProgramUniform3ui64ARB(program uint32, location int32, x uint64, y uint64, z uint64) {
	C.gllCall_glProgramUniform3ui64ARB(gl.glProgramUniform3ui64ARB, (C.uint32_t)(program), (C.int32_t)(location), (C.uint64_t)(x), (C.uint64_t)(y), (C.uint64_t)(z))
}
func (gl *lib) ProgramUniform3ui64NV(program uint32, location int32, x uint64, y uint64, z uint64) {
	C.gllCall_glProgramUniform3ui64NV(gl.glProgramUniform3ui64NV, (C.uint32_t)(program), (C.int32_t)(location), (C.uint64_t)(x), (C.uint64_t)(y), (C.uint64_t)(z))
}
func (gl *lib) ProgramUniform3ui64vARB(program uint32, location int32, count int32, value *uint64) {
	C.gllCall_glProgramUniform3ui64vARB(gl.glProgramUniform3ui64vARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform3ui64vNV(program uint32, location int32, count int32, value *uint64) {
	C.gllCall_glProgramUniform3ui64vNV(gl.glProgramUniform3ui64vNV, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform3uiEXT(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32) {
	C.gllCall_glProgramUniform3uiEXT(gl.glProgramUniform3uiEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.uint32_t)(v0), (C.uint32_t)(v1), (C.uint32_t)(v2))
}
func (gl *lib) ProgramUniform3uiv(program uint32, location int32, count int32, value *uint32) {
	C.gllCall_glProgramUniform3uiv(gl.glProgramUniform3uiv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform3uivEXT(program uint32, location int32, count int32, value *uint32) {
	C.gllCall_glProgramUniform3uivEXT(gl.glProgramUniform3uivEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform4d(program uint32, location int32, v0 float64, v1 float64, v2 float64, v3 float64) {
	C.gllCall_glProgramUniform4d(gl.glProgramUniform4d, (C.uint32_t)(program), (C.int32_t)(location), (C.double)(v0), (C.double)(v1), (C.double)(v2), (C.double)(v3))
}
func (gl *lib) ProgramUniform4dEXT(program uint32, location int32, x float64, y float64, z float64, w float64) {
	C.gllCall_glProgramUniform4dEXT(gl.glProgramUniform4dEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) ProgramUniform4dv(program uint32, location int32, count int32, value *float64) {
	C.gllCall_glProgramUniform4dv(gl.glProgramUniform4dv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform4dvEXT(program uint32, location int32, count int32, value *float64) {
	C.gllCall_glProgramUniform4dvEXT(gl.glProgramUniform4dvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
	C.gllCall_glProgramUniform4f(gl.glProgramUniform4f, (C.uint32_t)(program), (C.int32_t)(location), (C.float)(v0), (C.float)(v1), (C.float)(v2), (C.float)(v3))
}
func (gl *lib) ProgramUniform4fEXT(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
	C.gllCall_glProgramUniform4fEXT(gl.glProgramUniform4fEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.float)(v0), (C.float)(v1), (C.float)(v2), (C.float)(v3))
}
func (gl *lib) ProgramUniform4fv(program uint32, location int32, count int32, value *float32) {
	C.gllCall_glProgramUniform4fv(gl.glProgramUniform4fv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform4fvEXT(program uint32, location int32, count int32, value *float32) {
	C.gllCall_glProgramUniform4fvEXT(gl.glProgramUniform4fvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
	C.gllCall_glProgramUniform4i(gl.glProgramUniform4i, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(v0), (C.int32_t)(v1), (C.int32_t)(v2), (C.int32_t)(v3))
}
func (gl *lib) ProgramUniform4i64ARB(program uint32, location int32, x int64, y int64, z int64, w int64) {
	C.gllCall_glProgramUniform4i64ARB(gl.glProgramUniform4i64ARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int64_t)(x), (C.int64_t)(y), (C.int64_t)(z), (C.int64_t)(w))
}
func (gl *lib) ProgramUniform4i64NV(program uint32, location int32, x int64, y int64, z int64, w int64) {
	C.gllCall_glProgramUniform4i64NV(gl.glProgramUniform4i64NV, (C.uint32_t)(program), (C.int32_t)(location), (C.int64_t)(x), (C.int64_t)(y), (C.int64_t)(z), (C.int64_t)(w))
}
func (gl *lib) ProgramUniform4i64vARB(program uint32, location int32, count int32, value *int64) {
	C.gllCall_glProgramUniform4i64vARB(gl.glProgramUniform4i64vARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform4i64vNV(program uint32, location int32, count int32, value *int64) {
	C.gllCall_glProgramUniform4i64vNV(gl.glProgramUniform4i64vNV, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform4iEXT(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
	C.gllCall_glProgramUniform4iEXT(gl.glProgramUniform4iEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(v0), (C.int32_t)(v1), (C.int32_t)(v2), (C.int32_t)(v3))
}
func (gl *lib) ProgramUniform4iv(program uint32, location int32, count int32, value *int32) {
	C.gllCall_glProgramUniform4iv(gl.glProgramUniform4iv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform4ivEXT(program uint32, location int32, count int32, value *int32) {
	C.gllCall_glProgramUniform4ivEXT(gl.glProgramUniform4ivEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
	C.gllCall_glProgramUniform4ui(gl.glProgramUniform4ui, (C.uint32_t)(program), (C.int32_t)(location), (C.uint32_t)(v0), (C.uint32_t)(v1), (C.uint32_t)(v2), (C.uint32_t)(v3))
}
func (gl *lib) ProgramUniform4ui64ARB(program uint32, location int32, x uint64, y uint64, z uint64, w uint64) {
	C.gllCall_glProgramUniform4ui64ARB(gl.glProgramUniform4ui64ARB, (C.uint32_t)(program), (C.int32_t)(location), (C.uint64_t)(x), (C.uint64_t)(y), (C.uint64_t)(z), (C.uint64_t)(w))
}
func (gl *lib) ProgramUniform4ui64NV(program uint32, location int32, x uint64, y uint64, z uint64, w uint64) {
	C.gllCall_glProgramUniform4ui64NV(gl.glProgramUniform4ui64NV, (C.uint32_t)(program), (C.int32_t)(location), (C.uint64_t)(x), (C.uint64_t)(y), (C.uint64_t)(z), (C.uint64_t)(w))
}
func (gl *lib) ProgramUniform4ui64vARB(program uint32, location int32, count int32, value *uint64) {
	C.gllCall_glProgramUniform4ui64vARB(gl.glProgramUniform4ui64vARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform4ui64vNV(program uint32, location int32, count int32, value *uint64) {
	C.gllCall_glProgramUniform4ui64vNV(gl.glProgramUniform4ui64vNV, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform4uiEXT(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
	C.gllCall_glProgramUniform4uiEXT(gl.glProgramUniform4uiEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.uint32_t)(v0), (C.uint32_t)(v1), (C.uint32_t)(v2), (C.uint32_t)(v3))
}
func (gl *lib) ProgramUniform4uiv(program uint32, location int32, count int32, value *uint32) {
	C.gllCall_glProgramUniform4uiv(gl.glProgramUniform4uiv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniform4uivEXT(program uint32, location int32, count int32, value *uint32) {
	C.gllCall_glProgramUniform4uivEXT(gl.glProgramUniform4uivEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformHandleui64ARB(program uint32, location int32, value uint64) {
	C.gllCall_glProgramUniformHandleui64ARB(gl.glProgramUniformHandleui64ARB, (C.uint32_t)(program), (C.int32_t)(location), (C.uint64_t)(value))
}
func (gl *lib) ProgramUniformHandleui64IMG(program uint32, location int32, value uint64) {
	C.gllCall_glProgramUniformHandleui64IMG(gl.glProgramUniformHandleui64IMG, (C.uint32_t)(program), (C.int32_t)(location), (C.uint64_t)(value))
}
func (gl *lib) ProgramUniformHandleui64NV(program uint32, location int32, value uint64) {
	C.gllCall_glProgramUniformHandleui64NV(gl.glProgramUniformHandleui64NV, (C.uint32_t)(program), (C.int32_t)(location), (C.uint64_t)(value))
}
func (gl *lib) ProgramUniformHandleui64vARB(program uint32, location int32, count int32, values *uint64) {
	C.gllCall_glProgramUniformHandleui64vARB(gl.glProgramUniformHandleui64vARB, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(values)))
}
func (gl *lib) ProgramUniformHandleui64vIMG(program uint32, location int32, count int32, values *uint64) {
	C.gllCall_glProgramUniformHandleui64vIMG(gl.glProgramUniformHandleui64vIMG, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(values)))
}
func (gl *lib) ProgramUniformHandleui64vNV(program uint32, location int32, count int32, values *uint64) {
	C.gllCall_glProgramUniformHandleui64vNV(gl.glProgramUniformHandleui64vNV, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(values)))
}
func (gl *lib) ProgramUniformMatrix2dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix2dv(gl.glProgramUniformMatrix2dv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix2dvEXT(gl.glProgramUniformMatrix2dvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix2fv(gl.glProgramUniformMatrix2fv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix2fvEXT(gl.glProgramUniformMatrix2fvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix2x3dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix2x3dv(gl.glProgramUniformMatrix2x3dv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix2x3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix2x3dvEXT(gl.glProgramUniformMatrix2x3dvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix2x3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix2x3fv(gl.glProgramUniformMatrix2x3fv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix2x3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix2x3fvEXT(gl.glProgramUniformMatrix2x3fvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix2x4dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix2x4dv(gl.glProgramUniformMatrix2x4dv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix2x4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix2x4dvEXT(gl.glProgramUniformMatrix2x4dvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix2x4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix2x4fv(gl.glProgramUniformMatrix2x4fv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix2x4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix2x4fvEXT(gl.glProgramUniformMatrix2x4fvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix3dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix3dv(gl.glProgramUniformMatrix3dv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix3dvEXT(gl.glProgramUniformMatrix3dvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix3fv(gl.glProgramUniformMatrix3fv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix3fvEXT(gl.glProgramUniformMatrix3fvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix3x2dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix3x2dv(gl.glProgramUniformMatrix3x2dv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix3x2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix3x2dvEXT(gl.glProgramUniformMatrix3x2dvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix3x2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix3x2fv(gl.glProgramUniformMatrix3x2fv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix3x2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix3x2fvEXT(gl.glProgramUniformMatrix3x2fvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix3x4dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix3x4dv(gl.glProgramUniformMatrix3x4dv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix3x4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix3x4dvEXT(gl.glProgramUniformMatrix3x4dvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix3x4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix3x4fv(gl.glProgramUniformMatrix3x4fv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix3x4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix3x4fvEXT(gl.glProgramUniformMatrix3x4fvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix4dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix4dv(gl.glProgramUniformMatrix4dv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix4dvEXT(gl.glProgramUniformMatrix4dvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix4fv(gl.glProgramUniformMatrix4fv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix4fvEXT(gl.glProgramUniformMatrix4fvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix4x2dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix4x2dv(gl.glProgramUniformMatrix4x2dv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix4x2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix4x2dvEXT(gl.glProgramUniformMatrix4x2dvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix4x2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix4x2fv(gl.glProgramUniformMatrix4x2fv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix4x2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix4x2fvEXT(gl.glProgramUniformMatrix4x2fvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix4x3dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix4x3dv(gl.glProgramUniformMatrix4x3dv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix4x3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glProgramUniformMatrix4x3dvEXT(gl.glProgramUniformMatrix4x3dvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix4x3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix4x3fv(gl.glProgramUniformMatrix4x3fv, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformMatrix4x3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glProgramUniformMatrix4x3fvEXT(gl.glProgramUniformMatrix4x3fvEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramUniformui64NV(program uint32, location int32, value uint64) {
	C.gllCall_glProgramUniformui64NV(gl.glProgramUniformui64NV, (C.uint32_t)(program), (C.int32_t)(location), (C.uint64_t)(value))
}
func (gl *lib) ProgramUniformui64vNV(program uint32, location int32, count int32, value *uint64) {
	C.gllCall_glProgramUniformui64vNV(gl.glProgramUniformui64vNV, (C.uint32_t)(program), (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) ProgramVertexLimitNV(target uint32, limit int32) {
	C.gllCall_glProgramVertexLimitNV(gl.glProgramVertexLimitNV, (C.uint32_t)(target), (C.int32_t)(limit))
}
func (gl *lib) ProvokingVertex(mode uint32) {
	C.gllCall_glProvokingVertex(gl.glProvokingVertex, (C.uint32_t)(mode))
}
func (gl *lib) ProvokingVertexEXT(mode uint32) {
	C.gllCall_glProvokingVertexEXT(gl.glProvokingVertexEXT, (C.uint32_t)(mode))
}
func (gl *lib) PushAttrib(mask uint32) {
	C.gllCall_glPushAttrib(gl.glPushAttrib, (C.uint32_t)(mask))
}
func (gl *lib) PushClientAttrib(mask uint32) {
	C.gllCall_glPushClientAttrib(gl.glPushClientAttrib, (C.uint32_t)(mask))
}
func (gl *lib) PushClientAttribDefaultEXT(mask uint32) {
	C.gllCall_glPushClientAttribDefaultEXT(gl.glPushClientAttribDefaultEXT, (C.uint32_t)(mask))
}
func (gl *lib) PushDebugGroup(source uint32, id uint32, length int32, message *uint8) {
	C.gllCall_glPushDebugGroup(gl.glPushDebugGroup, (C.uint32_t)(source), (C.uint32_t)(id), (C.int32_t)(length), (*C.uint8_t)(unsafe.Pointer(message)))
}
func (gl *lib) PushDebugGroupKHR(source uint32, id uint32, length int32, message *uint8) {
	C.gllCall_glPushDebugGroupKHR(gl.glPushDebugGroupKHR, (C.uint32_t)(source), (C.uint32_t)(id), (C.int32_t)(length), (*C.uint8_t)(unsafe.Pointer(message)))
}
func (gl *lib) PushGroupMarkerEXT(length int32, marker *uint8) {
	C.gllCall_glPushGroupMarkerEXT(gl.glPushGroupMarkerEXT, (C.int32_t)(length), (*C.uint8_t)(unsafe.Pointer(marker)))
}
func (gl *lib) PushMatrix() {
	C.gllCall_glPushMatrix(gl.glPushMatrix)
}
func (gl *lib) PushName(name uint32) {
	C.gllCall_glPushName(gl.glPushName, (C.uint32_t)(name))
}
func (gl *lib) QueryCounter(id uint32, target uint32) {
	C.gllCall_glQueryCounter(gl.glQueryCounter, (C.uint32_t)(id), (C.uint32_t)(target))
}
func (gl *lib) QueryCounterEXT(id uint32, target uint32) {
	C.gllCall_glQueryCounterEXT(gl.glQueryCounterEXT, (C.uint32_t)(id), (C.uint32_t)(target))
}
func (gl *lib) QueryMatrixxOES(mantissa *int32, exponent *int32) uint32 {
	return (uint32)(C.gllCall_glQueryMatrixxOES(gl.glQueryMatrixxOES, (*C.int32_t)(unsafe.Pointer(mantissa)), (*C.int32_t)(unsafe.Pointer(exponent))))
}
func (gl *lib) QueryObjectParameteruiAMD(target uint32, id uint32, pname uint32, param uint32) {
	C.gllCall_glQueryObjectParameteruiAMD(gl.glQueryObjectParameteruiAMD, (C.uint32_t)(target), (C.uint32_t)(id), (C.uint32_t)(pname), (C.uint32_t)(param))
}
func (gl *lib) QueryResourceNV(queryType uint32, tagId int32, count uint32, buffer *int32) int32 {
	return (int32)(C.gllCall_glQueryResourceNV(gl.glQueryResourceNV, (C.uint32_t)(queryType), (C.int32_t)(tagId), (C.uint32_t)(count), (*C.int32_t)(unsafe.Pointer(buffer))))
}
func (gl *lib) QueryResourceTagNV(tagId int32, tagString *uint8) {
	C.gllCall_glQueryResourceTagNV(gl.glQueryResourceTagNV, (C.int32_t)(tagId), (*C.uint8_t)(unsafe.Pointer(tagString)))
}
func (gl *lib) RasterPos2d(x float64, y float64) {
	C.gllCall_glRasterPos2d(gl.glRasterPos2d, (C.double)(x), (C.double)(y))
}
func (gl *lib) RasterPos2dv(v *float64) {
	C.gllCall_glRasterPos2dv(gl.glRasterPos2dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) RasterPos2f(x float32, y float32) {
	C.gllCall_glRasterPos2f(gl.glRasterPos2f, (C.float)(x), (C.float)(y))
}
func (gl *lib) RasterPos2fv(v *float32) {
	C.gllCall_glRasterPos2fv(gl.glRasterPos2fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) RasterPos2i(x int32, y int32) {
	C.gllCall_glRasterPos2i(gl.glRasterPos2i, (C.int32_t)(x), (C.int32_t)(y))
}
func (gl *lib) RasterPos2iv(v *int32) {
	C.gllCall_glRasterPos2iv(gl.glRasterPos2iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) RasterPos2s(x int16, y int16) {
	C.gllCall_glRasterPos2s(gl.glRasterPos2s, (C.int16_t)(x), (C.int16_t)(y))
}
func (gl *lib) RasterPos2sv(v *int16) {
	C.gllCall_glRasterPos2sv(gl.glRasterPos2sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) RasterPos2xOES(x int32, y int32) {
	C.gllCall_glRasterPos2xOES(gl.glRasterPos2xOES, (C.int32_t)(x), (C.int32_t)(y))
}
func (gl *lib) RasterPos2xvOES(coords *int32) {
	C.gllCall_glRasterPos2xvOES(gl.glRasterPos2xvOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) RasterPos3d(x float64, y float64, z float64) {
	C.gllCall_glRasterPos3d(gl.glRasterPos3d, (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) RasterPos3dv(v *float64) {
	C.gllCall_glRasterPos3dv(gl.glRasterPos3dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) RasterPos3f(x float32, y float32, z float32) {
	C.gllCall_glRasterPos3f(gl.glRasterPos3f, (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) RasterPos3fv(v *float32) {
	C.gllCall_glRasterPos3fv(gl.glRasterPos3fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) RasterPos3i(x int32, y int32, z int32) {
	C.gllCall_glRasterPos3i(gl.glRasterPos3i, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) RasterPos3iv(v *int32) {
	C.gllCall_glRasterPos3iv(gl.glRasterPos3iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) RasterPos3s(x int16, y int16, z int16) {
	C.gllCall_glRasterPos3s(gl.glRasterPos3s, (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z))
}
func (gl *lib) RasterPos3sv(v *int16) {
	C.gllCall_glRasterPos3sv(gl.glRasterPos3sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) RasterPos3xOES(x int32, y int32, z int32) {
	C.gllCall_glRasterPos3xOES(gl.glRasterPos3xOES, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) RasterPos3xvOES(coords *int32) {
	C.gllCall_glRasterPos3xvOES(gl.glRasterPos3xvOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) RasterPos4d(x float64, y float64, z float64, w float64) {
	C.gllCall_glRasterPos4d(gl.glRasterPos4d, (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) RasterPos4dv(v *float64) {
	C.gllCall_glRasterPos4dv(gl.glRasterPos4dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) RasterPos4f(x float32, y float32, z float32, w float32) {
	C.gllCall_glRasterPos4f(gl.glRasterPos4f, (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(w))
}
func (gl *lib) RasterPos4fv(v *float32) {
	C.gllCall_glRasterPos4fv(gl.glRasterPos4fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) RasterPos4i(x int32, y int32, z int32, w int32) {
	C.gllCall_glRasterPos4i(gl.glRasterPos4i, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z), (C.int32_t)(w))
}
func (gl *lib) RasterPos4iv(v *int32) {
	C.gllCall_glRasterPos4iv(gl.glRasterPos4iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) RasterPos4s(x int16, y int16, z int16, w int16) {
	C.gllCall_glRasterPos4s(gl.glRasterPos4s, (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z), (C.int16_t)(w))
}
func (gl *lib) RasterPos4sv(v *int16) {
	C.gllCall_glRasterPos4sv(gl.glRasterPos4sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) RasterPos4xOES(x int32, y int32, z int32, w int32) {
	C.gllCall_glRasterPos4xOES(gl.glRasterPos4xOES, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z), (C.int32_t)(w))
}
func (gl *lib) RasterPos4xvOES(coords *int32) {
	C.gllCall_glRasterPos4xvOES(gl.glRasterPos4xvOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) RasterSamplesEXT(samples uint32, fixedsamplelocations bool) {
	C.gllCall_glRasterSamplesEXT(gl.glRasterSamplesEXT, (C.uint32_t)(samples), (C._Bool)(fixedsamplelocations))
}
func (gl *lib) ReadBuffer(src uint32) {
	C.gllCall_glReadBuffer(gl.glReadBuffer, (C.uint32_t)(src))
}
func (gl *lib) ReadBufferIndexedEXT(src uint32, index int32) {
	C.gllCall_glReadBufferIndexedEXT(gl.glReadBufferIndexedEXT, (C.uint32_t)(src), (C.int32_t)(index))
}
func (gl *lib) ReadBufferNV(mode uint32) {
	C.gllCall_glReadBufferNV(gl.glReadBufferNV, (C.uint32_t)(mode))
}
func (gl *lib) ReadInstrumentsSGIX(marker int32) {
	C.gllCall_glReadInstrumentsSGIX(gl.glReadInstrumentsSGIX, (C.int32_t)(marker))
}
func (gl *lib) ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glReadPixels(gl.glReadPixels, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) ReadnPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, bufSize int32, data unsafe.Pointer) {
	C.gllCall_glReadnPixels(gl.glReadnPixels, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(data))
}
func (gl *lib) ReadnPixelsARB(x int32, y int32, width int32, height int32, format uint32, type_ uint32, bufSize int32, data unsafe.Pointer) {
	C.gllCall_glReadnPixelsARB(gl.glReadnPixelsARB, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(data))
}
func (gl *lib) ReadnPixelsEXT(x int32, y int32, width int32, height int32, format uint32, type_ uint32, bufSize int32, data unsafe.Pointer) {
	C.gllCall_glReadnPixelsEXT(gl.glReadnPixelsEXT, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(data))
}
func (gl *lib) ReadnPixelsKHR(x int32, y int32, width int32, height int32, format uint32, type_ uint32, bufSize int32, data unsafe.Pointer) {
	C.gllCall_glReadnPixelsKHR(gl.glReadnPixelsKHR, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (C.int32_t)(bufSize), (unsafe.Pointer)(data))
}
func (gl *lib) ReleaseKeyedMutexWin32EXT(memory uint32, key uint64) bool {
	return (bool)(C.gllCall_glReleaseKeyedMutexWin32EXT(gl.glReleaseKeyedMutexWin32EXT, (C.uint32_t)(memory), (C.uint64_t)(key)))
}
func (gl *lib) Rectd(x1 float64, y1 float64, x2 float64, y2 float64) {
	C.gllCall_glRectd(gl.glRectd, (C.double)(x1), (C.double)(y1), (C.double)(x2), (C.double)(y2))
}
func (gl *lib) Rectdv(v1 *float64, v2 *float64) {
	C.gllCall_glRectdv(gl.glRectdv, (*C.double)(unsafe.Pointer(v1)), (*C.double)(unsafe.Pointer(v2)))
}
func (gl *lib) Rectf(x1 float32, y1 float32, x2 float32, y2 float32) {
	C.gllCall_glRectf(gl.glRectf, (C.float)(x1), (C.float)(y1), (C.float)(x2), (C.float)(y2))
}
func (gl *lib) Rectfv(v1 *float32, v2 *float32) {
	C.gllCall_glRectfv(gl.glRectfv, (*C.float)(unsafe.Pointer(v1)), (*C.float)(unsafe.Pointer(v2)))
}
func (gl *lib) Recti(x1 int32, y1 int32, x2 int32, y2 int32) {
	C.gllCall_glRecti(gl.glRecti, (C.int32_t)(x1), (C.int32_t)(y1), (C.int32_t)(x2), (C.int32_t)(y2))
}
func (gl *lib) Rectiv(v1 *int32, v2 *int32) {
	C.gllCall_glRectiv(gl.glRectiv, (*C.int32_t)(unsafe.Pointer(v1)), (*C.int32_t)(unsafe.Pointer(v2)))
}
func (gl *lib) Rects(x1 int16, y1 int16, x2 int16, y2 int16) {
	C.gllCall_glRects(gl.glRects, (C.int16_t)(x1), (C.int16_t)(y1), (C.int16_t)(x2), (C.int16_t)(y2))
}
func (gl *lib) Rectsv(v1 *int16, v2 *int16) {
	C.gllCall_glRectsv(gl.glRectsv, (*C.int16_t)(unsafe.Pointer(v1)), (*C.int16_t)(unsafe.Pointer(v2)))
}
func (gl *lib) RectxOES(x1 int32, y1 int32, x2 int32, y2 int32) {
	C.gllCall_glRectxOES(gl.glRectxOES, (C.int32_t)(x1), (C.int32_t)(y1), (C.int32_t)(x2), (C.int32_t)(y2))
}
func (gl *lib) RectxvOES(v1 *int32, v2 *int32) {
	C.gllCall_glRectxvOES(gl.glRectxvOES, (*C.int32_t)(unsafe.Pointer(v1)), (*C.int32_t)(unsafe.Pointer(v2)))
}
func (gl *lib) ReferencePlaneSGIX(equation *float64) {
	C.gllCall_glReferencePlaneSGIX(gl.glReferencePlaneSGIX, (*C.double)(unsafe.Pointer(equation)))
}
func (gl *lib) ReleaseShaderCompiler() {
	C.gllCall_glReleaseShaderCompiler(gl.glReleaseShaderCompiler)
}
func (gl *lib) RenderGpuMaskNV(mask uint32) {
	C.gllCall_glRenderGpuMaskNV(gl.glRenderGpuMaskNV, (C.uint32_t)(mask))
}
func (gl *lib) RenderMode(mode uint32) int32 {
	return (int32)(C.gllCall_glRenderMode(gl.glRenderMode, (C.uint32_t)(mode)))
}
func (gl *lib) RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32) {
	C.gllCall_glRenderbufferStorage(gl.glRenderbufferStorage, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) RenderbufferStorageEXT(target uint32, internalformat uint32, width int32, height int32) {
	C.gllCall_glRenderbufferStorageEXT(gl.glRenderbufferStorageEXT, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glRenderbufferStorageMultisample(gl.glRenderbufferStorageMultisample, (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) RenderbufferStorageMultisampleANGLE(target uint32, samples int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glRenderbufferStorageMultisampleANGLE(gl.glRenderbufferStorageMultisampleANGLE, (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) RenderbufferStorageMultisampleAPPLE(target uint32, samples int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glRenderbufferStorageMultisampleAPPLE(gl.glRenderbufferStorageMultisampleAPPLE, (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) RenderbufferStorageMultisampleAdvancedAMD(target uint32, samples int32, storageSamples int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glRenderbufferStorageMultisampleAdvancedAMD(gl.glRenderbufferStorageMultisampleAdvancedAMD, (C.uint32_t)(target), (C.int32_t)(samples), (C.int32_t)(storageSamples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) RenderbufferStorageMultisampleCoverageNV(target uint32, coverageSamples int32, colorSamples int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glRenderbufferStorageMultisampleCoverageNV(gl.glRenderbufferStorageMultisampleCoverageNV, (C.uint32_t)(target), (C.int32_t)(coverageSamples), (C.int32_t)(colorSamples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) RenderbufferStorageMultisampleEXT(target uint32, samples int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glRenderbufferStorageMultisampleEXT(gl.glRenderbufferStorageMultisampleEXT, (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) RenderbufferStorageMultisampleIMG(target uint32, samples int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glRenderbufferStorageMultisampleIMG(gl.glRenderbufferStorageMultisampleIMG, (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) RenderbufferStorageMultisampleNV(target uint32, samples int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glRenderbufferStorageMultisampleNV(gl.glRenderbufferStorageMultisampleNV, (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) RenderbufferStorageOES(target uint32, internalformat uint32, width int32, height int32) {
	C.gllCall_glRenderbufferStorageOES(gl.glRenderbufferStorageOES, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) ReplacementCodePointerSUN(type_ uint32, stride int32, pointer *unsafe.Pointer) {
	C.gllCall_glReplacementCodePointerSUN(gl.glReplacementCodePointerSUN, (C.uint32_t)(type_), (C.int32_t)(stride), (*unsafe.Pointer)(unsafe.Pointer(pointer)))
}
func (gl *lib) ReplacementCodeubSUN(code uint8) {
	C.gllCall_glReplacementCodeubSUN(gl.glReplacementCodeubSUN, (C.uint8_t)(code))
}
func (gl *lib) ReplacementCodeubvSUN(code *uint8) {
	C.gllCall_glReplacementCodeubvSUN(gl.glReplacementCodeubvSUN, (*C.uint8_t)(unsafe.Pointer(code)))
}
func (gl *lib) ReplacementCodeuiColor3fVertex3fSUN(rc uint32, r float32, g float32, b float32, x float32, y float32, z float32) {
	C.gllCall_glReplacementCodeuiColor3fVertex3fSUN(gl.glReplacementCodeuiColor3fVertex3fSUN, (C.uint32_t)(rc), (C.float)(r), (C.float)(g), (C.float)(b), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) ReplacementCodeuiColor3fVertex3fvSUN(rc *uint32, c *float32, v *float32) {
	C.gllCall_glReplacementCodeuiColor3fVertex3fvSUN(gl.glReplacementCodeuiColor3fVertex3fvSUN, (*C.uint32_t)(unsafe.Pointer(rc)), (*C.float)(unsafe.Pointer(c)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ReplacementCodeuiColor4fNormal3fVertex3fSUN(rc uint32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
	C.gllCall_glReplacementCodeuiColor4fNormal3fVertex3fSUN(gl.glReplacementCodeuiColor4fNormal3fVertex3fSUN, (C.uint32_t)(rc), (C.float)(r), (C.float)(g), (C.float)(b), (C.float)(a), (C.float)(nx), (C.float)(ny), (C.float)(nz), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc *uint32, c *float32, n *float32, v *float32) {
	C.gllCall_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(gl.glReplacementCodeuiColor4fNormal3fVertex3fvSUN, (*C.uint32_t)(unsafe.Pointer(rc)), (*C.float)(unsafe.Pointer(c)), (*C.float)(unsafe.Pointer(n)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ReplacementCodeuiColor4ubVertex3fSUN(rc uint32, r uint8, g uint8, b uint8, a uint8, x float32, y float32, z float32) {
	C.gllCall_glReplacementCodeuiColor4ubVertex3fSUN(gl.glReplacementCodeuiColor4ubVertex3fSUN, (C.uint32_t)(rc), (C.uint8_t)(r), (C.uint8_t)(g), (C.uint8_t)(b), (C.uint8_t)(a), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) ReplacementCodeuiColor4ubVertex3fvSUN(rc *uint32, c *uint8, v *float32) {
	C.gllCall_glReplacementCodeuiColor4ubVertex3fvSUN(gl.glReplacementCodeuiColor4ubVertex3fvSUN, (*C.uint32_t)(unsafe.Pointer(rc)), (*C.uint8_t)(unsafe.Pointer(c)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ReplacementCodeuiNormal3fVertex3fSUN(rc uint32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
	C.gllCall_glReplacementCodeuiNormal3fVertex3fSUN(gl.glReplacementCodeuiNormal3fVertex3fSUN, (C.uint32_t)(rc), (C.float)(nx), (C.float)(ny), (C.float)(nz), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) ReplacementCodeuiNormal3fVertex3fvSUN(rc *uint32, n *float32, v *float32) {
	C.gllCall_glReplacementCodeuiNormal3fVertex3fvSUN(gl.glReplacementCodeuiNormal3fVertex3fvSUN, (*C.uint32_t)(unsafe.Pointer(rc)), (*C.float)(unsafe.Pointer(n)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ReplacementCodeuiSUN(code uint32) {
	C.gllCall_glReplacementCodeuiSUN(gl.glReplacementCodeuiSUN, (C.uint32_t)(code))
}
func (gl *lib) ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc uint32, s float32, t float32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
	C.gllCall_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(gl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, (C.uint32_t)(rc), (C.float)(s), (C.float)(t), (C.float)(r), (C.float)(g), (C.float)(b), (C.float)(a), (C.float)(nx), (C.float)(ny), (C.float)(nz), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc *uint32, tc *float32, c *float32, n *float32, v *float32) {
	C.gllCall_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(gl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, (*C.uint32_t)(unsafe.Pointer(rc)), (*C.float)(unsafe.Pointer(tc)), (*C.float)(unsafe.Pointer(c)), (*C.float)(unsafe.Pointer(n)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc uint32, s float32, t float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
	C.gllCall_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(gl.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, (C.uint32_t)(rc), (C.float)(s), (C.float)(t), (C.float)(nx), (C.float)(ny), (C.float)(nz), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc *uint32, tc *float32, n *float32, v *float32) {
	C.gllCall_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(gl.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, (*C.uint32_t)(unsafe.Pointer(rc)), (*C.float)(unsafe.Pointer(tc)), (*C.float)(unsafe.Pointer(n)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ReplacementCodeuiTexCoord2fVertex3fSUN(rc uint32, s float32, t float32, x float32, y float32, z float32) {
	C.gllCall_glReplacementCodeuiTexCoord2fVertex3fSUN(gl.glReplacementCodeuiTexCoord2fVertex3fSUN, (C.uint32_t)(rc), (C.float)(s), (C.float)(t), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) ReplacementCodeuiTexCoord2fVertex3fvSUN(rc *uint32, tc *float32, v *float32) {
	C.gllCall_glReplacementCodeuiTexCoord2fVertex3fvSUN(gl.glReplacementCodeuiTexCoord2fVertex3fvSUN, (*C.uint32_t)(unsafe.Pointer(rc)), (*C.float)(unsafe.Pointer(tc)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ReplacementCodeuiVertex3fSUN(rc uint32, x float32, y float32, z float32) {
	C.gllCall_glReplacementCodeuiVertex3fSUN(gl.glReplacementCodeuiVertex3fSUN, (C.uint32_t)(rc), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) ReplacementCodeuiVertex3fvSUN(rc *uint32, v *float32) {
	C.gllCall_glReplacementCodeuiVertex3fvSUN(gl.glReplacementCodeuiVertex3fvSUN, (*C.uint32_t)(unsafe.Pointer(rc)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ReplacementCodeuivSUN(code *uint32) {
	C.gllCall_glReplacementCodeuivSUN(gl.glReplacementCodeuivSUN, (*C.uint32_t)(unsafe.Pointer(code)))
}
func (gl *lib) ReplacementCodeusSUN(code uint16) {
	C.gllCall_glReplacementCodeusSUN(gl.glReplacementCodeusSUN, (C.uint16_t)(code))
}
func (gl *lib) ReplacementCodeusvSUN(code *uint16) {
	C.gllCall_glReplacementCodeusvSUN(gl.glReplacementCodeusvSUN, (*C.uint16_t)(unsafe.Pointer(code)))
}
func (gl *lib) RequestResidentProgramsNV(n int32, programs *uint32) {
	C.gllCall_glRequestResidentProgramsNV(gl.glRequestResidentProgramsNV, (C.int32_t)(n), (*C.uint32_t)(unsafe.Pointer(programs)))
}
func (gl *lib) ResetHistogram(target uint32) {
	C.gllCall_glResetHistogram(gl.glResetHistogram, (C.uint32_t)(target))
}
func (gl *lib) ResetHistogramEXT(target uint32) {
	C.gllCall_glResetHistogramEXT(gl.glResetHistogramEXT, (C.uint32_t)(target))
}
func (gl *lib) ResetMemoryObjectParameterNV(memory uint32, pname uint32) {
	C.gllCall_glResetMemoryObjectParameterNV(gl.glResetMemoryObjectParameterNV, (C.uint32_t)(memory), (C.uint32_t)(pname))
}
func (gl *lib) ResetMinmax(target uint32) {
	C.gllCall_glResetMinmax(gl.glResetMinmax, (C.uint32_t)(target))
}
func (gl *lib) ResetMinmaxEXT(target uint32) {
	C.gllCall_glResetMinmaxEXT(gl.glResetMinmaxEXT, (C.uint32_t)(target))
}
func (gl *lib) ResizeBuffersMESA() {
	C.gllCall_glResizeBuffersMESA(gl.glResizeBuffersMESA)
}
func (gl *lib) ResolveDepthValuesNV() {
	C.gllCall_glResolveDepthValuesNV(gl.glResolveDepthValuesNV)
}
func (gl *lib) ResolveMultisampleFramebufferAPPLE() {
	C.gllCall_glResolveMultisampleFramebufferAPPLE(gl.glResolveMultisampleFramebufferAPPLE)
}
func (gl *lib) ResumeTransformFeedback() {
	C.gllCall_glResumeTransformFeedback(gl.glResumeTransformFeedback)
}
func (gl *lib) ResumeTransformFeedbackNV() {
	C.gllCall_glResumeTransformFeedbackNV(gl.glResumeTransformFeedbackNV)
}
func (gl *lib) Rotated(angle float64, x float64, y float64, z float64) {
	C.gllCall_glRotated(gl.glRotated, (C.double)(angle), (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) Rotatef(angle float32, x float32, y float32, z float32) {
	C.gllCall_glRotatef(gl.glRotatef, (C.float)(angle), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) Rotatex(angle int32, x int32, y int32, z int32) {
	C.gllCall_glRotatex(gl.glRotatex, (C.int32_t)(angle), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) RotatexOES(angle int32, x int32, y int32, z int32) {
	C.gllCall_glRotatexOES(gl.glRotatexOES, (C.int32_t)(angle), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) SampleCoverage(value float32, invert bool) {
	C.gllCall_glSampleCoverage(gl.glSampleCoverage, (C.float)(value), (C._Bool)(invert))
}
func (gl *lib) SampleCoverageARB(value float32, invert bool) {
	C.gllCall_glSampleCoverageARB(gl.glSampleCoverageARB, (C.float)(value), (C._Bool)(invert))
}
func (gl *lib) SampleCoveragex(value int32, invert bool) {
	C.gllCall_glSampleCoveragex(gl.glSampleCoveragex, (C.int32_t)(value), (C._Bool)(invert))
}
func (gl *lib) SampleCoveragexOES(value int32, invert bool) {
	C.gllCall_glSampleCoveragexOES(gl.glSampleCoveragexOES, (C.int32_t)(value), (C._Bool)(invert))
}
func (gl *lib) SampleMapATI(dst uint32, interp uint32, swizzle uint32) {
	C.gllCall_glSampleMapATI(gl.glSampleMapATI, (C.uint32_t)(dst), (C.uint32_t)(interp), (C.uint32_t)(swizzle))
}
func (gl *lib) SampleMaskEXT(value float32, invert bool) {
	C.gllCall_glSampleMaskEXT(gl.glSampleMaskEXT, (C.float)(value), (C._Bool)(invert))
}
func (gl *lib) SampleMaskIndexedNV(index uint32, mask uint32) {
	C.gllCall_glSampleMaskIndexedNV(gl.glSampleMaskIndexedNV, (C.uint32_t)(index), (C.uint32_t)(mask))
}
func (gl *lib) SampleMaskSGIS(value float32, invert bool) {
	C.gllCall_glSampleMaskSGIS(gl.glSampleMaskSGIS, (C.float)(value), (C._Bool)(invert))
}
func (gl *lib) SampleMaski(maskNumber uint32, mask uint32) {
	C.gllCall_glSampleMaski(gl.glSampleMaski, (C.uint32_t)(maskNumber), (C.uint32_t)(mask))
}
func (gl *lib) SamplePatternEXT(pattern uint32) {
	C.gllCall_glSamplePatternEXT(gl.glSamplePatternEXT, (C.uint32_t)(pattern))
}
func (gl *lib) SamplePatternSGIS(pattern uint32) {
	C.gllCall_glSamplePatternSGIS(gl.glSamplePatternSGIS, (C.uint32_t)(pattern))
}
func (gl *lib) SamplerParameterIiv(sampler uint32, pname uint32, param *int32) {
	C.gllCall_glSamplerParameterIiv(gl.glSamplerParameterIiv, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) SamplerParameterIivEXT(sampler uint32, pname uint32, param *int32) {
	C.gllCall_glSamplerParameterIivEXT(gl.glSamplerParameterIivEXT, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) SamplerParameterIivOES(sampler uint32, pname uint32, param *int32) {
	C.gllCall_glSamplerParameterIivOES(gl.glSamplerParameterIivOES, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) SamplerParameterIuiv(sampler uint32, pname uint32, param *uint32) {
	C.gllCall_glSamplerParameterIuiv(gl.glSamplerParameterIuiv, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(param)))
}
func (gl *lib) SamplerParameterIuivEXT(sampler uint32, pname uint32, param *uint32) {
	C.gllCall_glSamplerParameterIuivEXT(gl.glSamplerParameterIuivEXT, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(param)))
}
func (gl *lib) SamplerParameterIuivOES(sampler uint32, pname uint32, param *uint32) {
	C.gllCall_glSamplerParameterIuivOES(gl.glSamplerParameterIuivOES, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(param)))
}
func (gl *lib) SamplerParameterf(sampler uint32, pname uint32, param float32) {
	C.gllCall_glSamplerParameterf(gl.glSamplerParameterf, (C.uint32_t)(sampler), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) SamplerParameterfv(sampler uint32, pname uint32, param *float32) {
	C.gllCall_glSamplerParameterfv(gl.glSamplerParameterfv, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(param)))
}
func (gl *lib) SamplerParameteri(sampler uint32, pname uint32, param int32) {
	C.gllCall_glSamplerParameteri(gl.glSamplerParameteri, (C.uint32_t)(sampler), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) SamplerParameteriv(sampler uint32, pname uint32, param *int32) {
	C.gllCall_glSamplerParameteriv(gl.glSamplerParameteriv, (C.uint32_t)(sampler), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) Scaled(x float64, y float64, z float64) {
	C.gllCall_glScaled(gl.glScaled, (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) Scalef(x float32, y float32, z float32) {
	C.gllCall_glScalef(gl.glScalef, (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) Scalex(x int32, y int32, z int32) {
	C.gllCall_glScalex(gl.glScalex, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) ScalexOES(x int32, y int32, z int32) {
	C.gllCall_glScalexOES(gl.glScalexOES, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) Scissor(x int32, y int32, width int32, height int32) {
	C.gllCall_glScissor(gl.glScissor, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) ScissorArrayv(first uint32, count int32, v *int32) {
	C.gllCall_glScissorArrayv(gl.glScissorArrayv, (C.uint32_t)(first), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) ScissorArrayvNV(first uint32, count int32, v *int32) {
	C.gllCall_glScissorArrayvNV(gl.glScissorArrayvNV, (C.uint32_t)(first), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) ScissorArrayvOES(first uint32, count int32, v *int32) {
	C.gllCall_glScissorArrayvOES(gl.glScissorArrayvOES, (C.uint32_t)(first), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) ScissorExclusiveArrayvNV(first uint32, count int32, v *int32) {
	C.gllCall_glScissorExclusiveArrayvNV(gl.glScissorExclusiveArrayvNV, (C.uint32_t)(first), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) ScissorExclusiveNV(x int32, y int32, width int32, height int32) {
	C.gllCall_glScissorExclusiveNV(gl.glScissorExclusiveNV, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) ScissorIndexed(index uint32, left int32, bottom int32, width int32, height int32) {
	C.gllCall_glScissorIndexed(gl.glScissorIndexed, (C.uint32_t)(index), (C.int32_t)(left), (C.int32_t)(bottom), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) ScissorIndexedNV(index uint32, left int32, bottom int32, width int32, height int32) {
	C.gllCall_glScissorIndexedNV(gl.glScissorIndexedNV, (C.uint32_t)(index), (C.int32_t)(left), (C.int32_t)(bottom), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) ScissorIndexedOES(index uint32, left int32, bottom int32, width int32, height int32) {
	C.gllCall_glScissorIndexedOES(gl.glScissorIndexedOES, (C.uint32_t)(index), (C.int32_t)(left), (C.int32_t)(bottom), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) ScissorIndexedv(index uint32, v *int32) {
	C.gllCall_glScissorIndexedv(gl.glScissorIndexedv, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) ScissorIndexedvNV(index uint32, v *int32) {
	C.gllCall_glScissorIndexedvNV(gl.glScissorIndexedvNV, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) ScissorIndexedvOES(index uint32, v *int32) {
	C.gllCall_glScissorIndexedvOES(gl.glScissorIndexedvOES, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3b(red int8, green int8, blue int8) {
	C.gllCall_glSecondaryColor3b(gl.glSecondaryColor3b, (C.int8_t)(red), (C.int8_t)(green), (C.int8_t)(blue))
}
func (gl *lib) SecondaryColor3bEXT(red int8, green int8, blue int8) {
	C.gllCall_glSecondaryColor3bEXT(gl.glSecondaryColor3bEXT, (C.int8_t)(red), (C.int8_t)(green), (C.int8_t)(blue))
}
func (gl *lib) SecondaryColor3bv(v *int8) {
	C.gllCall_glSecondaryColor3bv(gl.glSecondaryColor3bv, (*C.int8_t)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3bvEXT(v *int8) {
	C.gllCall_glSecondaryColor3bvEXT(gl.glSecondaryColor3bvEXT, (*C.int8_t)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3d(red float64, green float64, blue float64) {
	C.gllCall_glSecondaryColor3d(gl.glSecondaryColor3d, (C.double)(red), (C.double)(green), (C.double)(blue))
}
func (gl *lib) SecondaryColor3dEXT(red float64, green float64, blue float64) {
	C.gllCall_glSecondaryColor3dEXT(gl.glSecondaryColor3dEXT, (C.double)(red), (C.double)(green), (C.double)(blue))
}
func (gl *lib) SecondaryColor3dv(v *float64) {
	C.gllCall_glSecondaryColor3dv(gl.glSecondaryColor3dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3dvEXT(v *float64) {
	C.gllCall_glSecondaryColor3dvEXT(gl.glSecondaryColor3dvEXT, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3f(red float32, green float32, blue float32) {
	C.gllCall_glSecondaryColor3f(gl.glSecondaryColor3f, (C.float)(red), (C.float)(green), (C.float)(blue))
}
func (gl *lib) SecondaryColor3fEXT(red float32, green float32, blue float32) {
	C.gllCall_glSecondaryColor3fEXT(gl.glSecondaryColor3fEXT, (C.float)(red), (C.float)(green), (C.float)(blue))
}
func (gl *lib) SecondaryColor3fv(v *float32) {
	C.gllCall_glSecondaryColor3fv(gl.glSecondaryColor3fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3fvEXT(v *float32) {
	C.gllCall_glSecondaryColor3fvEXT(gl.glSecondaryColor3fvEXT, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3hNV(red uint16, green uint16, blue uint16) {
	C.gllCall_glSecondaryColor3hNV(gl.glSecondaryColor3hNV, (C.uint16_t)(red), (C.uint16_t)(green), (C.uint16_t)(blue))
}
func (gl *lib) SecondaryColor3hvNV(v *uint16) {
	C.gllCall_glSecondaryColor3hvNV(gl.glSecondaryColor3hvNV, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3i(red int32, green int32, blue int32) {
	C.gllCall_glSecondaryColor3i(gl.glSecondaryColor3i, (C.int32_t)(red), (C.int32_t)(green), (C.int32_t)(blue))
}
func (gl *lib) SecondaryColor3iEXT(red int32, green int32, blue int32) {
	C.gllCall_glSecondaryColor3iEXT(gl.glSecondaryColor3iEXT, (C.int32_t)(red), (C.int32_t)(green), (C.int32_t)(blue))
}
func (gl *lib) SecondaryColor3iv(v *int32) {
	C.gllCall_glSecondaryColor3iv(gl.glSecondaryColor3iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3ivEXT(v *int32) {
	C.gllCall_glSecondaryColor3ivEXT(gl.glSecondaryColor3ivEXT, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3s(red int16, green int16, blue int16) {
	C.gllCall_glSecondaryColor3s(gl.glSecondaryColor3s, (C.int16_t)(red), (C.int16_t)(green), (C.int16_t)(blue))
}
func (gl *lib) SecondaryColor3sEXT(red int16, green int16, blue int16) {
	C.gllCall_glSecondaryColor3sEXT(gl.glSecondaryColor3sEXT, (C.int16_t)(red), (C.int16_t)(green), (C.int16_t)(blue))
}
func (gl *lib) SecondaryColor3sv(v *int16) {
	C.gllCall_glSecondaryColor3sv(gl.glSecondaryColor3sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3svEXT(v *int16) {
	C.gllCall_glSecondaryColor3svEXT(gl.glSecondaryColor3svEXT, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3ub(red uint8, green uint8, blue uint8) {
	C.gllCall_glSecondaryColor3ub(gl.glSecondaryColor3ub, (C.uint8_t)(red), (C.uint8_t)(green), (C.uint8_t)(blue))
}
func (gl *lib) SecondaryColor3ubEXT(red uint8, green uint8, blue uint8) {
	C.gllCall_glSecondaryColor3ubEXT(gl.glSecondaryColor3ubEXT, (C.uint8_t)(red), (C.uint8_t)(green), (C.uint8_t)(blue))
}
func (gl *lib) SecondaryColor3ubv(v *uint8) {
	C.gllCall_glSecondaryColor3ubv(gl.glSecondaryColor3ubv, (*C.uint8_t)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3ubvEXT(v *uint8) {
	C.gllCall_glSecondaryColor3ubvEXT(gl.glSecondaryColor3ubvEXT, (*C.uint8_t)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3ui(red uint32, green uint32, blue uint32) {
	C.gllCall_glSecondaryColor3ui(gl.glSecondaryColor3ui, (C.uint32_t)(red), (C.uint32_t)(green), (C.uint32_t)(blue))
}
func (gl *lib) SecondaryColor3uiEXT(red uint32, green uint32, blue uint32) {
	C.gllCall_glSecondaryColor3uiEXT(gl.glSecondaryColor3uiEXT, (C.uint32_t)(red), (C.uint32_t)(green), (C.uint32_t)(blue))
}
func (gl *lib) SecondaryColor3uiv(v *uint32) {
	C.gllCall_glSecondaryColor3uiv(gl.glSecondaryColor3uiv, (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3uivEXT(v *uint32) {
	C.gllCall_glSecondaryColor3uivEXT(gl.glSecondaryColor3uivEXT, (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3us(red uint16, green uint16, blue uint16) {
	C.gllCall_glSecondaryColor3us(gl.glSecondaryColor3us, (C.uint16_t)(red), (C.uint16_t)(green), (C.uint16_t)(blue))
}
func (gl *lib) SecondaryColor3usEXT(red uint16, green uint16, blue uint16) {
	C.gllCall_glSecondaryColor3usEXT(gl.glSecondaryColor3usEXT, (C.uint16_t)(red), (C.uint16_t)(green), (C.uint16_t)(blue))
}
func (gl *lib) SecondaryColor3usv(v *uint16) {
	C.gllCall_glSecondaryColor3usv(gl.glSecondaryColor3usv, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColor3usvEXT(v *uint16) {
	C.gllCall_glSecondaryColor3usvEXT(gl.glSecondaryColor3usvEXT, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) SecondaryColorFormatNV(size int32, type_ uint32, stride int32) {
	C.gllCall_glSecondaryColorFormatNV(gl.glSecondaryColorFormatNV, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride))
}
func (gl *lib) SecondaryColorP3ui(type_ uint32, color uint32) {
	C.gllCall_glSecondaryColorP3ui(gl.glSecondaryColorP3ui, (C.uint32_t)(type_), (C.uint32_t)(color))
}
func (gl *lib) SecondaryColorP3uiv(type_ uint32, color *uint32) {
	C.gllCall_glSecondaryColorP3uiv(gl.glSecondaryColorP3uiv, (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(color)))
}
func (gl *lib) SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glSecondaryColorPointer(gl.glSecondaryColorPointer, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) SecondaryColorPointerEXT(size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glSecondaryColorPointerEXT(gl.glSecondaryColorPointerEXT, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) SecondaryColorPointerListIBM(size int32, type_ uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
	C.gllCall_glSecondaryColorPointerListIBM(gl.glSecondaryColorPointerListIBM, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (*unsafe.Pointer)(unsafe.Pointer(pointer)), (C.int32_t)(ptrstride))
}
func (gl *lib) SelectBuffer(size int32, buffer *uint32) {
	C.gllCall_glSelectBuffer(gl.glSelectBuffer, (C.int32_t)(size), (*C.uint32_t)(unsafe.Pointer(buffer)))
}
func (gl *lib) SelectPerfMonitorCountersAMD(monitor uint32, enable bool, group uint32, numCounters int32, counterList *uint32) {
	C.gllCall_glSelectPerfMonitorCountersAMD(gl.glSelectPerfMonitorCountersAMD, (C.uint32_t)(monitor), (C._Bool)(enable), (C.uint32_t)(group), (C.int32_t)(numCounters), (*C.uint32_t)(unsafe.Pointer(counterList)))
}
func (gl *lib) SemaphoreParameterivNV(semaphore uint32, pname uint32, params *int32) {
	C.gllCall_glSemaphoreParameterivNV(gl.glSemaphoreParameterivNV, (C.uint32_t)(semaphore), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) SemaphoreParameterui64vEXT(semaphore uint32, pname uint32, params *uint64) {
	C.gllCall_glSemaphoreParameterui64vEXT(gl.glSemaphoreParameterui64vEXT, (C.uint32_t)(semaphore), (C.uint32_t)(pname), (*C.uint64_t)(unsafe.Pointer(params)))
}
func (gl *lib) SeparableFilter2D(target uint32, internalformat uint32, width int32, height int32, format uint32, type_ uint32, row unsafe.Pointer, column unsafe.Pointer) {
	C.gllCall_glSeparableFilter2D(gl.glSeparableFilter2D, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(row), (unsafe.Pointer)(column))
}
func (gl *lib) SeparableFilter2DEXT(target uint32, internalformat uint32, width int32, height int32, format uint32, type_ uint32, row unsafe.Pointer, column unsafe.Pointer) {
	C.gllCall_glSeparableFilter2DEXT(gl.glSeparableFilter2DEXT, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(row), (unsafe.Pointer)(column))
}
func (gl *lib) SetFenceAPPLE(fence uint32) {
	C.gllCall_glSetFenceAPPLE(gl.glSetFenceAPPLE, (C.uint32_t)(fence))
}
func (gl *lib) SetFenceNV(fence uint32, condition uint32) {
	C.gllCall_glSetFenceNV(gl.glSetFenceNV, (C.uint32_t)(fence), (C.uint32_t)(condition))
}
func (gl *lib) SetFragmentShaderConstantATI(dst uint32, value *float32) {
	C.gllCall_glSetFragmentShaderConstantATI(gl.glSetFragmentShaderConstantATI, (C.uint32_t)(dst), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) SetInvariantEXT(id uint32, type_ uint32, addr unsafe.Pointer) {
	C.gllCall_glSetInvariantEXT(gl.glSetInvariantEXT, (C.uint32_t)(id), (C.uint32_t)(type_), (unsafe.Pointer)(addr))
}
func (gl *lib) SetLocalConstantEXT(id uint32, type_ uint32, addr unsafe.Pointer) {
	C.gllCall_glSetLocalConstantEXT(gl.glSetLocalConstantEXT, (C.uint32_t)(id), (C.uint32_t)(type_), (unsafe.Pointer)(addr))
}
func (gl *lib) SetMultisamplefvAMD(pname uint32, index uint32, val *float32) {
	C.gllCall_glSetMultisamplefvAMD(gl.glSetMultisamplefvAMD, (C.uint32_t)(pname), (C.uint32_t)(index), (*C.float)(unsafe.Pointer(val)))
}
func (gl *lib) ShadeModel(mode uint32) {
	C.gllCall_glShadeModel(gl.glShadeModel, (C.uint32_t)(mode))
}
func (gl *lib) ShaderBinary(count int32, shaders *uint32, binaryFormat uint32, binary unsafe.Pointer, length int32) {
	C.gllCall_glShaderBinary(gl.glShaderBinary, (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(shaders)), (C.uint32_t)(binaryFormat), (unsafe.Pointer)(binary), (C.int32_t)(length))
}
func (gl *lib) ShaderOp1EXT(op uint32, res uint32, arg1 uint32) {
	C.gllCall_glShaderOp1EXT(gl.glShaderOp1EXT, (C.uint32_t)(op), (C.uint32_t)(res), (C.uint32_t)(arg1))
}
func (gl *lib) ShaderOp2EXT(op uint32, res uint32, arg1 uint32, arg2 uint32) {
	C.gllCall_glShaderOp2EXT(gl.glShaderOp2EXT, (C.uint32_t)(op), (C.uint32_t)(res), (C.uint32_t)(arg1), (C.uint32_t)(arg2))
}
func (gl *lib) ShaderOp3EXT(op uint32, res uint32, arg1 uint32, arg2 uint32, arg3 uint32) {
	C.gllCall_glShaderOp3EXT(gl.glShaderOp3EXT, (C.uint32_t)(op), (C.uint32_t)(res), (C.uint32_t)(arg1), (C.uint32_t)(arg2), (C.uint32_t)(arg3))
}
func (gl *lib) ShaderSource(shader uint32, count int32, string **uint8, length *int32) {
	C.gllCall_glShaderSource(gl.glShaderSource, (C.uint32_t)(shader), (C.int32_t)(count), (**C.uint8_t)(unsafe.Pointer(string)), (*C.int32_t)(unsafe.Pointer(length)))
}
func (gl *lib) ShaderSourceARB(shaderObj GLhandleARB, count int32, string **uint8, length *int32) {
	C.gllCall_glShaderSourceARB(gl.glShaderSourceARB, (C.GLhandleARB)(shaderObj), (C.int32_t)(count), (**C.uint8_t)(unsafe.Pointer(string)), (*C.int32_t)(unsafe.Pointer(length)))
}
func (gl *lib) ShaderStorageBlockBinding(program uint32, storageBlockIndex uint32, storageBlockBinding uint32) {
	C.gllCall_glShaderStorageBlockBinding(gl.glShaderStorageBlockBinding, (C.uint32_t)(program), (C.uint32_t)(storageBlockIndex), (C.uint32_t)(storageBlockBinding))
}
func (gl *lib) ShadingRateImageBarrierNV(synchronize bool) {
	C.gllCall_glShadingRateImageBarrierNV(gl.glShadingRateImageBarrierNV, (C._Bool)(synchronize))
}
func (gl *lib) ShadingRateQCOM(rate uint32) {
	C.gllCall_glShadingRateQCOM(gl.glShadingRateQCOM, (C.uint32_t)(rate))
}
func (gl *lib) ShadingRateImagePaletteNV(viewport uint32, first uint32, count int32, rates *uint32) {
	C.gllCall_glShadingRateImagePaletteNV(gl.glShadingRateImagePaletteNV, (C.uint32_t)(viewport), (C.uint32_t)(first), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(rates)))
}
func (gl *lib) ShadingRateSampleOrderNV(order uint32) {
	C.gllCall_glShadingRateSampleOrderNV(gl.glShadingRateSampleOrderNV, (C.uint32_t)(order))
}
func (gl *lib) ShadingRateSampleOrderCustomNV(rate uint32, samples uint32, locations *int32) {
	C.gllCall_glShadingRateSampleOrderCustomNV(gl.glShadingRateSampleOrderCustomNV, (C.uint32_t)(rate), (C.uint32_t)(samples), (*C.int32_t)(unsafe.Pointer(locations)))
}
func (gl *lib) SharpenTexFuncSGIS(target uint32, n int32, points *float32) {
	C.gllCall_glSharpenTexFuncSGIS(gl.glSharpenTexFuncSGIS, (C.uint32_t)(target), (C.int32_t)(n), (*C.float)(unsafe.Pointer(points)))
}
func (gl *lib) SignalSemaphoreEXT(semaphore uint32, numBufferBarriers uint32, buffers *uint32, numTextureBarriers uint32, textures *uint32, dstLayouts *uint32) {
	C.gllCall_glSignalSemaphoreEXT(gl.glSignalSemaphoreEXT, (C.uint32_t)(semaphore), (C.uint32_t)(numBufferBarriers), (*C.uint32_t)(unsafe.Pointer(buffers)), (C.uint32_t)(numTextureBarriers), (*C.uint32_t)(unsafe.Pointer(textures)), (*C.uint32_t)(unsafe.Pointer(dstLayouts)))
}
func (gl *lib) SignalSemaphoreui64NVX(signalGpu uint32, fenceObjectCount int32, semaphoreArray *uint32, fenceValueArray *uint64) {
	C.gllCall_glSignalSemaphoreui64NVX(gl.glSignalSemaphoreui64NVX, (C.uint32_t)(signalGpu), (C.int32_t)(fenceObjectCount), (*C.uint32_t)(unsafe.Pointer(semaphoreArray)), (*C.uint64_t)(unsafe.Pointer(fenceValueArray)))
}
func (gl *lib) SpecializeShader(shader uint32, pEntryPoint *uint8, numSpecializationConstants uint32, pConstantIndex *uint32, pConstantValue *uint32) {
	C.gllCall_glSpecializeShader(gl.glSpecializeShader, (C.uint32_t)(shader), (*C.uint8_t)(unsafe.Pointer(pEntryPoint)), (C.uint32_t)(numSpecializationConstants), (*C.uint32_t)(unsafe.Pointer(pConstantIndex)), (*C.uint32_t)(unsafe.Pointer(pConstantValue)))
}
func (gl *lib) SpecializeShaderARB(shader uint32, pEntryPoint *uint8, numSpecializationConstants uint32, pConstantIndex *uint32, pConstantValue *uint32) {
	C.gllCall_glSpecializeShaderARB(gl.glSpecializeShaderARB, (C.uint32_t)(shader), (*C.uint8_t)(unsafe.Pointer(pEntryPoint)), (C.uint32_t)(numSpecializationConstants), (*C.uint32_t)(unsafe.Pointer(pConstantIndex)), (*C.uint32_t)(unsafe.Pointer(pConstantValue)))
}
func (gl *lib) SpriteParameterfSGIX(pname uint32, param float32) {
	C.gllCall_glSpriteParameterfSGIX(gl.glSpriteParameterfSGIX, (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) SpriteParameterfvSGIX(pname uint32, params *float32) {
	C.gllCall_glSpriteParameterfvSGIX(gl.glSpriteParameterfvSGIX, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) SpriteParameteriSGIX(pname uint32, param int32) {
	C.gllCall_glSpriteParameteriSGIX(gl.glSpriteParameteriSGIX, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) SpriteParameterivSGIX(pname uint32, params *int32) {
	C.gllCall_glSpriteParameterivSGIX(gl.glSpriteParameterivSGIX, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) StartInstrumentsSGIX() {
	C.gllCall_glStartInstrumentsSGIX(gl.glStartInstrumentsSGIX)
}
func (gl *lib) StartTilingQCOM(x uint32, y uint32, width uint32, height uint32, preserveMask uint32) {
	C.gllCall_glStartTilingQCOM(gl.glStartTilingQCOM, (C.uint32_t)(x), (C.uint32_t)(y), (C.uint32_t)(width), (C.uint32_t)(height), (C.uint32_t)(preserveMask))
}
func (gl *lib) StateCaptureNV(state uint32, mode uint32) {
	C.gllCall_glStateCaptureNV(gl.glStateCaptureNV, (C.uint32_t)(state), (C.uint32_t)(mode))
}
func (gl *lib) StencilClearTagEXT(stencilTagBits int32, stencilClearTag uint32) {
	C.gllCall_glStencilClearTagEXT(gl.glStencilClearTagEXT, (C.int32_t)(stencilTagBits), (C.uint32_t)(stencilClearTag))
}
func (gl *lib) StencilFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, fillMode uint32, mask uint32, transformType uint32, transformValues *float32) {
	C.gllCall_glStencilFillPathInstancedNV(gl.glStencilFillPathInstancedNV, (C.int32_t)(numPaths), (C.uint32_t)(pathNameType), (unsafe.Pointer)(paths), (C.uint32_t)(pathBase), (C.uint32_t)(fillMode), (C.uint32_t)(mask), (C.uint32_t)(transformType), (*C.float)(unsafe.Pointer(transformValues)))
}
func (gl *lib) StencilFillPathNV(path uint32, fillMode uint32, mask uint32) {
	C.gllCall_glStencilFillPathNV(gl.glStencilFillPathNV, (C.uint32_t)(path), (C.uint32_t)(fillMode), (C.uint32_t)(mask))
}
func (gl *lib) StencilFunc(func_ uint32, ref int32, mask uint32) {
	C.gllCall_glStencilFunc(gl.glStencilFunc, (C.uint32_t)(func_), (C.int32_t)(ref), (C.uint32_t)(mask))
}
func (gl *lib) StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32) {
	C.gllCall_glStencilFuncSeparate(gl.glStencilFuncSeparate, (C.uint32_t)(face), (C.uint32_t)(func_), (C.int32_t)(ref), (C.uint32_t)(mask))
}
func (gl *lib) StencilFuncSeparateATI(frontfunc uint32, backfunc uint32, ref int32, mask uint32) {
	C.gllCall_glStencilFuncSeparateATI(gl.glStencilFuncSeparateATI, (C.uint32_t)(frontfunc), (C.uint32_t)(backfunc), (C.int32_t)(ref), (C.uint32_t)(mask))
}
func (gl *lib) StencilMask(mask uint32) {
	C.gllCall_glStencilMask(gl.glStencilMask, (C.uint32_t)(mask))
}
func (gl *lib) StencilMaskSeparate(face uint32, mask uint32) {
	C.gllCall_glStencilMaskSeparate(gl.glStencilMaskSeparate, (C.uint32_t)(face), (C.uint32_t)(mask))
}
func (gl *lib) StencilOp(fail uint32, zfail uint32, zpass uint32) {
	C.gllCall_glStencilOp(gl.glStencilOp, (C.uint32_t)(fail), (C.uint32_t)(zfail), (C.uint32_t)(zpass))
}
func (gl *lib) StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32) {
	C.gllCall_glStencilOpSeparate(gl.glStencilOpSeparate, (C.uint32_t)(face), (C.uint32_t)(sfail), (C.uint32_t)(dpfail), (C.uint32_t)(dppass))
}
func (gl *lib) StencilOpSeparateATI(face uint32, sfail uint32, dpfail uint32, dppass uint32) {
	C.gllCall_glStencilOpSeparateATI(gl.glStencilOpSeparateATI, (C.uint32_t)(face), (C.uint32_t)(sfail), (C.uint32_t)(dpfail), (C.uint32_t)(dppass))
}
func (gl *lib) StencilOpValueAMD(face uint32, value uint32) {
	C.gllCall_glStencilOpValueAMD(gl.glStencilOpValueAMD, (C.uint32_t)(face), (C.uint32_t)(value))
}
func (gl *lib) StencilStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, reference int32, mask uint32, transformType uint32, transformValues *float32) {
	C.gllCall_glStencilStrokePathInstancedNV(gl.glStencilStrokePathInstancedNV, (C.int32_t)(numPaths), (C.uint32_t)(pathNameType), (unsafe.Pointer)(paths), (C.uint32_t)(pathBase), (C.int32_t)(reference), (C.uint32_t)(mask), (C.uint32_t)(transformType), (*C.float)(unsafe.Pointer(transformValues)))
}
func (gl *lib) StencilStrokePathNV(path uint32, reference int32, mask uint32) {
	C.gllCall_glStencilStrokePathNV(gl.glStencilStrokePathNV, (C.uint32_t)(path), (C.int32_t)(reference), (C.uint32_t)(mask))
}
func (gl *lib) StencilThenCoverFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, fillMode uint32, mask uint32, coverMode uint32, transformType uint32, transformValues *float32) {
	C.gllCall_glStencilThenCoverFillPathInstancedNV(gl.glStencilThenCoverFillPathInstancedNV, (C.int32_t)(numPaths), (C.uint32_t)(pathNameType), (unsafe.Pointer)(paths), (C.uint32_t)(pathBase), (C.uint32_t)(fillMode), (C.uint32_t)(mask), (C.uint32_t)(coverMode), (C.uint32_t)(transformType), (*C.float)(unsafe.Pointer(transformValues)))
}
func (gl *lib) StencilThenCoverFillPathNV(path uint32, fillMode uint32, mask uint32, coverMode uint32) {
	C.gllCall_glStencilThenCoverFillPathNV(gl.glStencilThenCoverFillPathNV, (C.uint32_t)(path), (C.uint32_t)(fillMode), (C.uint32_t)(mask), (C.uint32_t)(coverMode))
}
func (gl *lib) StencilThenCoverStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, reference int32, mask uint32, coverMode uint32, transformType uint32, transformValues *float32) {
	C.gllCall_glStencilThenCoverStrokePathInstancedNV(gl.glStencilThenCoverStrokePathInstancedNV, (C.int32_t)(numPaths), (C.uint32_t)(pathNameType), (unsafe.Pointer)(paths), (C.uint32_t)(pathBase), (C.int32_t)(reference), (C.uint32_t)(mask), (C.uint32_t)(coverMode), (C.uint32_t)(transformType), (*C.float)(unsafe.Pointer(transformValues)))
}
func (gl *lib) StencilThenCoverStrokePathNV(path uint32, reference int32, mask uint32, coverMode uint32) {
	C.gllCall_glStencilThenCoverStrokePathNV(gl.glStencilThenCoverStrokePathNV, (C.uint32_t)(path), (C.int32_t)(reference), (C.uint32_t)(mask), (C.uint32_t)(coverMode))
}
func (gl *lib) StopInstrumentsSGIX(marker int32) {
	C.gllCall_glStopInstrumentsSGIX(gl.glStopInstrumentsSGIX, (C.int32_t)(marker))
}
func (gl *lib) StringMarkerGREMEDY(len int32, string unsafe.Pointer) {
	C.gllCall_glStringMarkerGREMEDY(gl.glStringMarkerGREMEDY, (C.int32_t)(len), (unsafe.Pointer)(string))
}
func (gl *lib) SubpixelPrecisionBiasNV(xbits uint32, ybits uint32) {
	C.gllCall_glSubpixelPrecisionBiasNV(gl.glSubpixelPrecisionBiasNV, (C.uint32_t)(xbits), (C.uint32_t)(ybits))
}
func (gl *lib) SwizzleEXT(res uint32, in uint32, outX uint32, outY uint32, outZ uint32, outW uint32) {
	C.gllCall_glSwizzleEXT(gl.glSwizzleEXT, (C.uint32_t)(res), (C.uint32_t)(in), (C.uint32_t)(outX), (C.uint32_t)(outY), (C.uint32_t)(outZ), (C.uint32_t)(outW))
}
func (gl *lib) SyncTextureINTEL(texture uint32) {
	C.gllCall_glSyncTextureINTEL(gl.glSyncTextureINTEL, (C.uint32_t)(texture))
}
func (gl *lib) TagSampleBufferSGIX() {
	C.gllCall_glTagSampleBufferSGIX(gl.glTagSampleBufferSGIX)
}
func (gl *lib) Tangent3bEXT(tx int8, ty int8, tz int8) {
	C.gllCall_glTangent3bEXT(gl.glTangent3bEXT, (C.int8_t)(tx), (C.int8_t)(ty), (C.int8_t)(tz))
}
func (gl *lib) Tangent3bvEXT(v *int8) {
	C.gllCall_glTangent3bvEXT(gl.glTangent3bvEXT, (*C.int8_t)(unsafe.Pointer(v)))
}
func (gl *lib) Tangent3dEXT(tx float64, ty float64, tz float64) {
	C.gllCall_glTangent3dEXT(gl.glTangent3dEXT, (C.double)(tx), (C.double)(ty), (C.double)(tz))
}
func (gl *lib) Tangent3dvEXT(v *float64) {
	C.gllCall_glTangent3dvEXT(gl.glTangent3dvEXT, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) Tangent3fEXT(tx float32, ty float32, tz float32) {
	C.gllCall_glTangent3fEXT(gl.glTangent3fEXT, (C.float)(tx), (C.float)(ty), (C.float)(tz))
}
func (gl *lib) Tangent3fvEXT(v *float32) {
	C.gllCall_glTangent3fvEXT(gl.glTangent3fvEXT, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) Tangent3iEXT(tx int32, ty int32, tz int32) {
	C.gllCall_glTangent3iEXT(gl.glTangent3iEXT, (C.int32_t)(tx), (C.int32_t)(ty), (C.int32_t)(tz))
}
func (gl *lib) Tangent3ivEXT(v *int32) {
	C.gllCall_glTangent3ivEXT(gl.glTangent3ivEXT, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) Tangent3sEXT(tx int16, ty int16, tz int16) {
	C.gllCall_glTangent3sEXT(gl.glTangent3sEXT, (C.int16_t)(tx), (C.int16_t)(ty), (C.int16_t)(tz))
}
func (gl *lib) Tangent3svEXT(v *int16) {
	C.gllCall_glTangent3svEXT(gl.glTangent3svEXT, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) TangentPointerEXT(type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glTangentPointerEXT(gl.glTangentPointerEXT, (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) TbufferMask3DFX(mask uint32) {
	C.gllCall_glTbufferMask3DFX(gl.glTbufferMask3DFX, (C.uint32_t)(mask))
}
func (gl *lib) TessellationFactorAMD(factor float32) {
	C.gllCall_glTessellationFactorAMD(gl.glTessellationFactorAMD, (C.float)(factor))
}
func (gl *lib) TessellationModeAMD(mode uint32) {
	C.gllCall_glTessellationModeAMD(gl.glTessellationModeAMD, (C.uint32_t)(mode))
}
func (gl *lib) TestFenceAPPLE(fence uint32) bool {
	return (bool)(C.gllCall_glTestFenceAPPLE(gl.glTestFenceAPPLE, (C.uint32_t)(fence)))
}
func (gl *lib) TestFenceNV(fence uint32) bool {
	return (bool)(C.gllCall_glTestFenceNV(gl.glTestFenceNV, (C.uint32_t)(fence)))
}
func (gl *lib) TestObjectAPPLE(object uint32, name uint32) bool {
	return (bool)(C.gllCall_glTestObjectAPPLE(gl.glTestObjectAPPLE, (C.uint32_t)(object), (C.uint32_t)(name)))
}
func (gl *lib) TexAttachMemoryNV(target uint32, memory uint32, offset uint64) {
	C.gllCall_glTexAttachMemoryNV(gl.glTexAttachMemoryNV, (C.uint32_t)(target), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) TexBuffer(target uint32, internalformat uint32, buffer uint32) {
	C.gllCall_glTexBuffer(gl.glTexBuffer, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.uint32_t)(buffer))
}
func (gl *lib) TexBufferARB(target uint32, internalformat uint32, buffer uint32) {
	C.gllCall_glTexBufferARB(gl.glTexBufferARB, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.uint32_t)(buffer))
}
func (gl *lib) TexBufferEXT(target uint32, internalformat uint32, buffer uint32) {
	C.gllCall_glTexBufferEXT(gl.glTexBufferEXT, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.uint32_t)(buffer))
}
func (gl *lib) TexBufferOES(target uint32, internalformat uint32, buffer uint32) {
	C.gllCall_glTexBufferOES(gl.glTexBufferOES, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.uint32_t)(buffer))
}
func (gl *lib) TexBufferRange(target uint32, internalformat uint32, buffer uint32, offset uintptr, size int) {
	C.gllCall_glTexBufferRange(gl.glTexBufferRange, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size))
}
func (gl *lib) TexBufferRangeEXT(target uint32, internalformat uint32, buffer uint32, offset uintptr, size int) {
	C.gllCall_glTexBufferRangeEXT(gl.glTexBufferRangeEXT, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size))
}
func (gl *lib) TexBufferRangeOES(target uint32, internalformat uint32, buffer uint32, offset uintptr, size int) {
	C.gllCall_glTexBufferRangeOES(gl.glTexBufferRangeOES, (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size))
}
func (gl *lib) TexBumpParameterfvATI(pname uint32, param *float32) {
	C.gllCall_glTexBumpParameterfvATI(gl.glTexBumpParameterfvATI, (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(param)))
}
func (gl *lib) TexBumpParameterivATI(pname uint32, param *int32) {
	C.gllCall_glTexBumpParameterivATI(gl.glTexBumpParameterivATI, (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) TexCoord1bOES(s int8) {
	C.gllCall_glTexCoord1bOES(gl.glTexCoord1bOES, (C.int8_t)(s))
}
func (gl *lib) TexCoord1bvOES(coords *int8) {
	C.gllCall_glTexCoord1bvOES(gl.glTexCoord1bvOES, (*C.int8_t)(unsafe.Pointer(coords)))
}
func (gl *lib) TexCoord1d(s float64) {
	C.gllCall_glTexCoord1d(gl.glTexCoord1d, (C.double)(s))
}
func (gl *lib) TexCoord1dv(v *float64) {
	C.gllCall_glTexCoord1dv(gl.glTexCoord1dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord1f(s float32) {
	C.gllCall_glTexCoord1f(gl.glTexCoord1f, (C.float)(s))
}
func (gl *lib) TexCoord1fv(v *float32) {
	C.gllCall_glTexCoord1fv(gl.glTexCoord1fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord1hNV(s uint16) {
	C.gllCall_glTexCoord1hNV(gl.glTexCoord1hNV, (C.uint16_t)(s))
}
func (gl *lib) TexCoord1hvNV(v *uint16) {
	C.gllCall_glTexCoord1hvNV(gl.glTexCoord1hvNV, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord1i(s int32) {
	C.gllCall_glTexCoord1i(gl.glTexCoord1i, (C.int32_t)(s))
}
func (gl *lib) TexCoord1iv(v *int32) {
	C.gllCall_glTexCoord1iv(gl.glTexCoord1iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord1s(s int16) {
	C.gllCall_glTexCoord1s(gl.glTexCoord1s, (C.int16_t)(s))
}
func (gl *lib) TexCoord1sv(v *int16) {
	C.gllCall_glTexCoord1sv(gl.glTexCoord1sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord1xOES(s int32) {
	C.gllCall_glTexCoord1xOES(gl.glTexCoord1xOES, (C.int32_t)(s))
}
func (gl *lib) TexCoord1xvOES(coords *int32) {
	C.gllCall_glTexCoord1xvOES(gl.glTexCoord1xvOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) TexCoord2bOES(s int8, t int8) {
	C.gllCall_glTexCoord2bOES(gl.glTexCoord2bOES, (C.int8_t)(s), (C.int8_t)(t))
}
func (gl *lib) TexCoord2bvOES(coords *int8) {
	C.gllCall_glTexCoord2bvOES(gl.glTexCoord2bvOES, (*C.int8_t)(unsafe.Pointer(coords)))
}
func (gl *lib) TexCoord2d(s float64, t float64) {
	C.gllCall_glTexCoord2d(gl.glTexCoord2d, (C.double)(s), (C.double)(t))
}
func (gl *lib) TexCoord2dv(v *float64) {
	C.gllCall_glTexCoord2dv(gl.glTexCoord2dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord2f(s float32, t float32) {
	C.gllCall_glTexCoord2f(gl.glTexCoord2f, (C.float)(s), (C.float)(t))
}
func (gl *lib) TexCoord2fColor3fVertex3fSUN(s float32, t float32, r float32, g float32, b float32, x float32, y float32, z float32) {
	C.gllCall_glTexCoord2fColor3fVertex3fSUN(gl.glTexCoord2fColor3fVertex3fSUN, (C.float)(s), (C.float)(t), (C.float)(r), (C.float)(g), (C.float)(b), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) TexCoord2fColor3fVertex3fvSUN(tc *float32, c *float32, v *float32) {
	C.gllCall_glTexCoord2fColor3fVertex3fvSUN(gl.glTexCoord2fColor3fVertex3fvSUN, (*C.float)(unsafe.Pointer(tc)), (*C.float)(unsafe.Pointer(c)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord2fColor4fNormal3fVertex3fSUN(s float32, t float32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
	C.gllCall_glTexCoord2fColor4fNormal3fVertex3fSUN(gl.glTexCoord2fColor4fNormal3fVertex3fSUN, (C.float)(s), (C.float)(t), (C.float)(r), (C.float)(g), (C.float)(b), (C.float)(a), (C.float)(nx), (C.float)(ny), (C.float)(nz), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) TexCoord2fColor4fNormal3fVertex3fvSUN(tc *float32, c *float32, n *float32, v *float32) {
	C.gllCall_glTexCoord2fColor4fNormal3fVertex3fvSUN(gl.glTexCoord2fColor4fNormal3fVertex3fvSUN, (*C.float)(unsafe.Pointer(tc)), (*C.float)(unsafe.Pointer(c)), (*C.float)(unsafe.Pointer(n)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord2fColor4ubVertex3fSUN(s float32, t float32, r uint8, g uint8, b uint8, a uint8, x float32, y float32, z float32) {
	C.gllCall_glTexCoord2fColor4ubVertex3fSUN(gl.glTexCoord2fColor4ubVertex3fSUN, (C.float)(s), (C.float)(t), (C.uint8_t)(r), (C.uint8_t)(g), (C.uint8_t)(b), (C.uint8_t)(a), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) TexCoord2fColor4ubVertex3fvSUN(tc *float32, c *uint8, v *float32) {
	C.gllCall_glTexCoord2fColor4ubVertex3fvSUN(gl.glTexCoord2fColor4ubVertex3fvSUN, (*C.float)(unsafe.Pointer(tc)), (*C.uint8_t)(unsafe.Pointer(c)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord2fNormal3fVertex3fSUN(s float32, t float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
	C.gllCall_glTexCoord2fNormal3fVertex3fSUN(gl.glTexCoord2fNormal3fVertex3fSUN, (C.float)(s), (C.float)(t), (C.float)(nx), (C.float)(ny), (C.float)(nz), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) TexCoord2fNormal3fVertex3fvSUN(tc *float32, n *float32, v *float32) {
	C.gllCall_glTexCoord2fNormal3fVertex3fvSUN(gl.glTexCoord2fNormal3fVertex3fvSUN, (*C.float)(unsafe.Pointer(tc)), (*C.float)(unsafe.Pointer(n)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord2fVertex3fSUN(s float32, t float32, x float32, y float32, z float32) {
	C.gllCall_glTexCoord2fVertex3fSUN(gl.glTexCoord2fVertex3fSUN, (C.float)(s), (C.float)(t), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) TexCoord2fVertex3fvSUN(tc *float32, v *float32) {
	C.gllCall_glTexCoord2fVertex3fvSUN(gl.glTexCoord2fVertex3fvSUN, (*C.float)(unsafe.Pointer(tc)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord2fv(v *float32) {
	C.gllCall_glTexCoord2fv(gl.glTexCoord2fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord2hNV(s uint16, t uint16) {
	C.gllCall_glTexCoord2hNV(gl.glTexCoord2hNV, (C.uint16_t)(s), (C.uint16_t)(t))
}
func (gl *lib) TexCoord2hvNV(v *uint16) {
	C.gllCall_glTexCoord2hvNV(gl.glTexCoord2hvNV, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord2i(s int32, t int32) {
	C.gllCall_glTexCoord2i(gl.glTexCoord2i, (C.int32_t)(s), (C.int32_t)(t))
}
func (gl *lib) TexCoord2iv(v *int32) {
	C.gllCall_glTexCoord2iv(gl.glTexCoord2iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord2s(s int16, t int16) {
	C.gllCall_glTexCoord2s(gl.glTexCoord2s, (C.int16_t)(s), (C.int16_t)(t))
}
func (gl *lib) TexCoord2sv(v *int16) {
	C.gllCall_glTexCoord2sv(gl.glTexCoord2sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord2xOES(s int32, t int32) {
	C.gllCall_glTexCoord2xOES(gl.glTexCoord2xOES, (C.int32_t)(s), (C.int32_t)(t))
}
func (gl *lib) TexCoord2xvOES(coords *int32) {
	C.gllCall_glTexCoord2xvOES(gl.glTexCoord2xvOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) TexCoord3bOES(s int8, t int8, r int8) {
	C.gllCall_glTexCoord3bOES(gl.glTexCoord3bOES, (C.int8_t)(s), (C.int8_t)(t), (C.int8_t)(r))
}
func (gl *lib) TexCoord3bvOES(coords *int8) {
	C.gllCall_glTexCoord3bvOES(gl.glTexCoord3bvOES, (*C.int8_t)(unsafe.Pointer(coords)))
}
func (gl *lib) TexCoord3d(s float64, t float64, r float64) {
	C.gllCall_glTexCoord3d(gl.glTexCoord3d, (C.double)(s), (C.double)(t), (C.double)(r))
}
func (gl *lib) TexCoord3dv(v *float64) {
	C.gllCall_glTexCoord3dv(gl.glTexCoord3dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord3f(s float32, t float32, r float32) {
	C.gllCall_glTexCoord3f(gl.glTexCoord3f, (C.float)(s), (C.float)(t), (C.float)(r))
}
func (gl *lib) TexCoord3fv(v *float32) {
	C.gllCall_glTexCoord3fv(gl.glTexCoord3fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord3hNV(s uint16, t uint16, r uint16) {
	C.gllCall_glTexCoord3hNV(gl.glTexCoord3hNV, (C.uint16_t)(s), (C.uint16_t)(t), (C.uint16_t)(r))
}
func (gl *lib) TexCoord3hvNV(v *uint16) {
	C.gllCall_glTexCoord3hvNV(gl.glTexCoord3hvNV, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord3i(s int32, t int32, r int32) {
	C.gllCall_glTexCoord3i(gl.glTexCoord3i, (C.int32_t)(s), (C.int32_t)(t), (C.int32_t)(r))
}
func (gl *lib) TexCoord3iv(v *int32) {
	C.gllCall_glTexCoord3iv(gl.glTexCoord3iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord3s(s int16, t int16, r int16) {
	C.gllCall_glTexCoord3s(gl.glTexCoord3s, (C.int16_t)(s), (C.int16_t)(t), (C.int16_t)(r))
}
func (gl *lib) TexCoord3sv(v *int16) {
	C.gllCall_glTexCoord3sv(gl.glTexCoord3sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord3xOES(s int32, t int32, r int32) {
	C.gllCall_glTexCoord3xOES(gl.glTexCoord3xOES, (C.int32_t)(s), (C.int32_t)(t), (C.int32_t)(r))
}
func (gl *lib) TexCoord3xvOES(coords *int32) {
	C.gllCall_glTexCoord3xvOES(gl.glTexCoord3xvOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) TexCoord4bOES(s int8, t int8, r int8, q int8) {
	C.gllCall_glTexCoord4bOES(gl.glTexCoord4bOES, (C.int8_t)(s), (C.int8_t)(t), (C.int8_t)(r), (C.int8_t)(q))
}
func (gl *lib) TexCoord4bvOES(coords *int8) {
	C.gllCall_glTexCoord4bvOES(gl.glTexCoord4bvOES, (*C.int8_t)(unsafe.Pointer(coords)))
}
func (gl *lib) TexCoord4d(s float64, t float64, r float64, q float64) {
	C.gllCall_glTexCoord4d(gl.glTexCoord4d, (C.double)(s), (C.double)(t), (C.double)(r), (C.double)(q))
}
func (gl *lib) TexCoord4dv(v *float64) {
	C.gllCall_glTexCoord4dv(gl.glTexCoord4dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord4f(s float32, t float32, r float32, q float32) {
	C.gllCall_glTexCoord4f(gl.glTexCoord4f, (C.float)(s), (C.float)(t), (C.float)(r), (C.float)(q))
}
func (gl *lib) TexCoord4fColor4fNormal3fVertex4fSUN(s float32, t float32, p float32, q float32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32, w float32) {
	C.gllCall_glTexCoord4fColor4fNormal3fVertex4fSUN(gl.glTexCoord4fColor4fNormal3fVertex4fSUN, (C.float)(s), (C.float)(t), (C.float)(p), (C.float)(q), (C.float)(r), (C.float)(g), (C.float)(b), (C.float)(a), (C.float)(nx), (C.float)(ny), (C.float)(nz), (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(w))
}
func (gl *lib) TexCoord4fColor4fNormal3fVertex4fvSUN(tc *float32, c *float32, n *float32, v *float32) {
	C.gllCall_glTexCoord4fColor4fNormal3fVertex4fvSUN(gl.glTexCoord4fColor4fNormal3fVertex4fvSUN, (*C.float)(unsafe.Pointer(tc)), (*C.float)(unsafe.Pointer(c)), (*C.float)(unsafe.Pointer(n)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord4fVertex4fSUN(s float32, t float32, p float32, q float32, x float32, y float32, z float32, w float32) {
	C.gllCall_glTexCoord4fVertex4fSUN(gl.glTexCoord4fVertex4fSUN, (C.float)(s), (C.float)(t), (C.float)(p), (C.float)(q), (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(w))
}
func (gl *lib) TexCoord4fVertex4fvSUN(tc *float32, v *float32) {
	C.gllCall_glTexCoord4fVertex4fvSUN(gl.glTexCoord4fVertex4fvSUN, (*C.float)(unsafe.Pointer(tc)), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord4fv(v *float32) {
	C.gllCall_glTexCoord4fv(gl.glTexCoord4fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord4hNV(s uint16, t uint16, r uint16, q uint16) {
	C.gllCall_glTexCoord4hNV(gl.glTexCoord4hNV, (C.uint16_t)(s), (C.uint16_t)(t), (C.uint16_t)(r), (C.uint16_t)(q))
}
func (gl *lib) TexCoord4hvNV(v *uint16) {
	C.gllCall_glTexCoord4hvNV(gl.glTexCoord4hvNV, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord4i(s int32, t int32, r int32, q int32) {
	C.gllCall_glTexCoord4i(gl.glTexCoord4i, (C.int32_t)(s), (C.int32_t)(t), (C.int32_t)(r), (C.int32_t)(q))
}
func (gl *lib) TexCoord4iv(v *int32) {
	C.gllCall_glTexCoord4iv(gl.glTexCoord4iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord4s(s int16, t int16, r int16, q int16) {
	C.gllCall_glTexCoord4s(gl.glTexCoord4s, (C.int16_t)(s), (C.int16_t)(t), (C.int16_t)(r), (C.int16_t)(q))
}
func (gl *lib) TexCoord4sv(v *int16) {
	C.gllCall_glTexCoord4sv(gl.glTexCoord4sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) TexCoord4xOES(s int32, t int32, r int32, q int32) {
	C.gllCall_glTexCoord4xOES(gl.glTexCoord4xOES, (C.int32_t)(s), (C.int32_t)(t), (C.int32_t)(r), (C.int32_t)(q))
}
func (gl *lib) TexCoord4xvOES(coords *int32) {
	C.gllCall_glTexCoord4xvOES(gl.glTexCoord4xvOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) TexCoordFormatNV(size int32, type_ uint32, stride int32) {
	C.gllCall_glTexCoordFormatNV(gl.glTexCoordFormatNV, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride))
}
func (gl *lib) TexCoordP1ui(type_ uint32, coords uint32) {
	C.gllCall_glTexCoordP1ui(gl.glTexCoordP1ui, (C.uint32_t)(type_), (C.uint32_t)(coords))
}
func (gl *lib) TexCoordP1uiv(type_ uint32, coords *uint32) {
	C.gllCall_glTexCoordP1uiv(gl.glTexCoordP1uiv, (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) TexCoordP2ui(type_ uint32, coords uint32) {
	C.gllCall_glTexCoordP2ui(gl.glTexCoordP2ui, (C.uint32_t)(type_), (C.uint32_t)(coords))
}
func (gl *lib) TexCoordP2uiv(type_ uint32, coords *uint32) {
	C.gllCall_glTexCoordP2uiv(gl.glTexCoordP2uiv, (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) TexCoordP3ui(type_ uint32, coords uint32) {
	C.gllCall_glTexCoordP3ui(gl.glTexCoordP3ui, (C.uint32_t)(type_), (C.uint32_t)(coords))
}
func (gl *lib) TexCoordP3uiv(type_ uint32, coords *uint32) {
	C.gllCall_glTexCoordP3uiv(gl.glTexCoordP3uiv, (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) TexCoordP4ui(type_ uint32, coords uint32) {
	C.gllCall_glTexCoordP4ui(gl.glTexCoordP4ui, (C.uint32_t)(type_), (C.uint32_t)(coords))
}
func (gl *lib) TexCoordP4uiv(type_ uint32, coords *uint32) {
	C.gllCall_glTexCoordP4uiv(gl.glTexCoordP4uiv, (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glTexCoordPointer(gl.glTexCoordPointer, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) TexCoordPointerEXT(size int32, type_ uint32, stride int32, count int32, pointer unsafe.Pointer) {
	C.gllCall_glTexCoordPointerEXT(gl.glTexCoordPointerEXT, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (C.int32_t)(count), (unsafe.Pointer)(pointer))
}
func (gl *lib) TexCoordPointerListIBM(size int32, type_ uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
	C.gllCall_glTexCoordPointerListIBM(gl.glTexCoordPointerListIBM, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (*unsafe.Pointer)(unsafe.Pointer(pointer)), (C.int32_t)(ptrstride))
}
func (gl *lib) TexCoordPointervINTEL(size int32, type_ uint32, pointer *unsafe.Pointer) {
	C.gllCall_glTexCoordPointervINTEL(gl.glTexCoordPointervINTEL, (C.int32_t)(size), (C.uint32_t)(type_), (*unsafe.Pointer)(unsafe.Pointer(pointer)))
}
func (gl *lib) TexEnvf(target uint32, pname uint32, param float32) {
	C.gllCall_glTexEnvf(gl.glTexEnvf, (C.uint32_t)(target), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) TexEnvfv(target uint32, pname uint32, params *float32) {
	C.gllCall_glTexEnvfv(gl.glTexEnvfv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) TexEnvi(target uint32, pname uint32, param int32) {
	C.gllCall_glTexEnvi(gl.glTexEnvi, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) TexEnviv(target uint32, pname uint32, params *int32) {
	C.gllCall_glTexEnviv(gl.glTexEnviv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexEnvx(target uint32, pname uint32, param int32) {
	C.gllCall_glTexEnvx(gl.glTexEnvx, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) TexEnvxOES(target uint32, pname uint32, param int32) {
	C.gllCall_glTexEnvxOES(gl.glTexEnvxOES, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) TexEnvxv(target uint32, pname uint32, params *int32) {
	C.gllCall_glTexEnvxv(gl.glTexEnvxv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexEnvxvOES(target uint32, pname uint32, params *int32) {
	C.gllCall_glTexEnvxvOES(gl.glTexEnvxvOES, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexEstimateMotionQCOM(ref uint32, target uint32, output uint32) {
	C.gllCall_glTexEstimateMotionQCOM(gl.glTexEstimateMotionQCOM, (C.uint32_t)(ref), (C.uint32_t)(target), (C.uint32_t)(output))
}
func (gl *lib) TexEstimateMotionRegionsQCOM(ref uint32, target uint32, output uint32, mask uint32) {
	C.gllCall_glTexEstimateMotionRegionsQCOM(gl.glTexEstimateMotionRegionsQCOM, (C.uint32_t)(ref), (C.uint32_t)(target), (C.uint32_t)(output), (C.uint32_t)(mask))
}
func (gl *lib) ExtrapolateTex2DQCOM(src1 uint32, src2 uint32, output uint32, scaleFactor float32) {
	C.gllCall_glExtrapolateTex2DQCOM(gl.glExtrapolateTex2DQCOM, (C.uint32_t)(src1), (C.uint32_t)(src2), (C.uint32_t)(output), (C.float)(scaleFactor))
}
func (gl *lib) TexFilterFuncSGIS(target uint32, filter uint32, n int32, weights *float32) {
	C.gllCall_glTexFilterFuncSGIS(gl.glTexFilterFuncSGIS, (C.uint32_t)(target), (C.uint32_t)(filter), (C.int32_t)(n), (*C.float)(unsafe.Pointer(weights)))
}
func (gl *lib) TexGend(coord uint32, pname uint32, param float64) {
	C.gllCall_glTexGend(gl.glTexGend, (C.uint32_t)(coord), (C.uint32_t)(pname), (C.double)(param))
}
func (gl *lib) TexGendv(coord uint32, pname uint32, params *float64) {
	C.gllCall_glTexGendv(gl.glTexGendv, (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) TexGenf(coord uint32, pname uint32, param float32) {
	C.gllCall_glTexGenf(gl.glTexGenf, (C.uint32_t)(coord), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) TexGenfOES(coord uint32, pname uint32, param float32) {
	C.gllCall_glTexGenfOES(gl.glTexGenfOES, (C.uint32_t)(coord), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) TexGenfv(coord uint32, pname uint32, params *float32) {
	C.gllCall_glTexGenfv(gl.glTexGenfv, (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) TexGenfvOES(coord uint32, pname uint32, params *float32) {
	C.gllCall_glTexGenfvOES(gl.glTexGenfvOES, (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) TexGeni(coord uint32, pname uint32, param int32) {
	C.gllCall_glTexGeni(gl.glTexGeni, (C.uint32_t)(coord), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) TexGeniOES(coord uint32, pname uint32, param int32) {
	C.gllCall_glTexGeniOES(gl.glTexGeniOES, (C.uint32_t)(coord), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) TexGeniv(coord uint32, pname uint32, params *int32) {
	C.gllCall_glTexGeniv(gl.glTexGeniv, (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexGenivOES(coord uint32, pname uint32, params *int32) {
	C.gllCall_glTexGenivOES(gl.glTexGenivOES, (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexGenxOES(coord uint32, pname uint32, param int32) {
	C.gllCall_glTexGenxOES(gl.glTexGenxOES, (C.uint32_t)(coord), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) TexGenxvOES(coord uint32, pname uint32, params *int32) {
	C.gllCall_glTexGenxvOES(gl.glTexGenxvOES, (C.uint32_t)(coord), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTexImage1D(gl.glTexImage1D, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(border), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTexImage2D(gl.glTexImage2D, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(border), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TexImage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
	C.gllCall_glTexImage2DMultisample(gl.glTexImage2DMultisample, (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C._Bool)(fixedsamplelocations))
}
func (gl *lib) TexImage2DMultisampleCoverageNV(target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, fixedSampleLocations bool) {
	C.gllCall_glTexImage2DMultisampleCoverageNV(gl.glTexImage2DMultisampleCoverageNV, (C.uint32_t)(target), (C.int32_t)(coverageSamples), (C.int32_t)(colorSamples), (C.int32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C._Bool)(fixedSampleLocations))
}
func (gl *lib) TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTexImage3D(gl.glTexImage3D, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(border), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TexImage3DEXT(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTexImage3DEXT(gl.glTexImage3DEXT, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(border), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TexImage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
	C.gllCall_glTexImage3DMultisample(gl.glTexImage3DMultisample, (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C._Bool)(fixedsamplelocations))
}
func (gl *lib) TexImage3DMultisampleCoverageNV(target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, depth int32, fixedSampleLocations bool) {
	C.gllCall_glTexImage3DMultisampleCoverageNV(gl.glTexImage3DMultisampleCoverageNV, (C.uint32_t)(target), (C.int32_t)(coverageSamples), (C.int32_t)(colorSamples), (C.int32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C._Bool)(fixedSampleLocations))
}
func (gl *lib) TexImage3DOES(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTexImage3DOES(gl.glTexImage3DOES, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(border), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TexImage4DSGIS(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, size4d int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTexImage4DSGIS(gl.glTexImage4DSGIS, (C.uint32_t)(target), (C.int32_t)(level), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(size4d), (C.int32_t)(border), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TexPageCommitmentARB(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, commit bool) {
	C.gllCall_glTexPageCommitmentARB(gl.glTexPageCommitmentARB, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C._Bool)(commit))
}
func (gl *lib) TexPageCommitmentEXT(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, commit bool) {
	C.gllCall_glTexPageCommitmentEXT(gl.glTexPageCommitmentEXT, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C._Bool)(commit))
}
func (gl *lib) TexPageCommitmentMemNV(target uint32, layer int32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, memory uint32, offset uint64, commit bool) {
	C.gllCall_glTexPageCommitmentMemNV(gl.glTexPageCommitmentMemNV, (C.uint32_t)(target), (C.int32_t)(layer), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(memory), (C.uint64_t)(offset), (C._Bool)(commit))
}
func (gl *lib) TexParameterIiv(target uint32, pname uint32, params *int32) {
	C.gllCall_glTexParameterIiv(gl.glTexParameterIiv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexParameterIivEXT(target uint32, pname uint32, params *int32) {
	C.gllCall_glTexParameterIivEXT(gl.glTexParameterIivEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexParameterIivOES(target uint32, pname uint32, params *int32) {
	C.gllCall_glTexParameterIivOES(gl.glTexParameterIivOES, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexParameterIuiv(target uint32, pname uint32, params *uint32) {
	C.gllCall_glTexParameterIuiv(gl.glTexParameterIuiv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexParameterIuivEXT(target uint32, pname uint32, params *uint32) {
	C.gllCall_glTexParameterIuivEXT(gl.glTexParameterIuivEXT, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexParameterIuivOES(target uint32, pname uint32, params *uint32) {
	C.gllCall_glTexParameterIuivOES(gl.glTexParameterIuivOES, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexParameterf(target uint32, pname uint32, param float32) {
	C.gllCall_glTexParameterf(gl.glTexParameterf, (C.uint32_t)(target), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) TexParameterfv(target uint32, pname uint32, params *float32) {
	C.gllCall_glTexParameterfv(gl.glTexParameterfv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) TexParameteri(target uint32, pname uint32, param int32) {
	C.gllCall_glTexParameteri(gl.glTexParameteri, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) TexParameteriv(target uint32, pname uint32, params *int32) {
	C.gllCall_glTexParameteriv(gl.glTexParameteriv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexParameterx(target uint32, pname uint32, param int32) {
	C.gllCall_glTexParameterx(gl.glTexParameterx, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) TexParameterxOES(target uint32, pname uint32, param int32) {
	C.gllCall_glTexParameterxOES(gl.glTexParameterxOES, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) TexParameterxv(target uint32, pname uint32, params *int32) {
	C.gllCall_glTexParameterxv(gl.glTexParameterxv, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexParameterxvOES(target uint32, pname uint32, params *int32) {
	C.gllCall_glTexParameterxvOES(gl.glTexParameterxvOES, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TexRenderbufferNV(target uint32, renderbuffer uint32) {
	C.gllCall_glTexRenderbufferNV(gl.glTexRenderbufferNV, (C.uint32_t)(target), (C.uint32_t)(renderbuffer))
}
func (gl *lib) TexStorage1D(target uint32, levels int32, internalformat uint32, width int32) {
	C.gllCall_glTexStorage1D(gl.glTexStorage1D, (C.uint32_t)(target), (C.int32_t)(levels), (C.uint32_t)(internalformat), (C.int32_t)(width))
}
func (gl *lib) TexStorage1DEXT(target uint32, levels int32, internalformat uint32, width int32) {
	C.gllCall_glTexStorage1DEXT(gl.glTexStorage1DEXT, (C.uint32_t)(target), (C.int32_t)(levels), (C.uint32_t)(internalformat), (C.int32_t)(width))
}
func (gl *lib) TexStorage2D(target uint32, levels int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glTexStorage2D(gl.glTexStorage2D, (C.uint32_t)(target), (C.int32_t)(levels), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) TexStorage2DEXT(target uint32, levels int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glTexStorage2DEXT(gl.glTexStorage2DEXT, (C.uint32_t)(target), (C.int32_t)(levels), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) TexStorage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
	C.gllCall_glTexStorage2DMultisample(gl.glTexStorage2DMultisample, (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C._Bool)(fixedsamplelocations))
}
func (gl *lib) TexStorage3D(target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32) {
	C.gllCall_glTexStorage3D(gl.glTexStorage3D, (C.uint32_t)(target), (C.int32_t)(levels), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth))
}
func (gl *lib) TexStorage3DEXT(target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32) {
	C.gllCall_glTexStorage3DEXT(gl.glTexStorage3DEXT, (C.uint32_t)(target), (C.int32_t)(levels), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth))
}
func (gl *lib) TexStorage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
	C.gllCall_glTexStorage3DMultisample(gl.glTexStorage3DMultisample, (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C._Bool)(fixedsamplelocations))
}
func (gl *lib) TexStorage3DMultisampleOES(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
	C.gllCall_glTexStorage3DMultisampleOES(gl.glTexStorage3DMultisampleOES, (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C._Bool)(fixedsamplelocations))
}
func (gl *lib) TexStorageMem1DEXT(target uint32, levels int32, internalFormat uint32, width int32, memory uint32, offset uint64) {
	C.gllCall_glTexStorageMem1DEXT(gl.glTexStorageMem1DEXT, (C.uint32_t)(target), (C.int32_t)(levels), (C.uint32_t)(internalFormat), (C.int32_t)(width), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) TexStorageMem2DEXT(target uint32, levels int32, internalFormat uint32, width int32, height int32, memory uint32, offset uint64) {
	C.gllCall_glTexStorageMem2DEXT(gl.glTexStorageMem2DEXT, (C.uint32_t)(target), (C.int32_t)(levels), (C.uint32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) TexStorageMem2DMultisampleEXT(target uint32, samples int32, internalFormat uint32, width int32, height int32, fixedSampleLocations bool, memory uint32, offset uint64) {
	C.gllCall_glTexStorageMem2DMultisampleEXT(gl.glTexStorageMem2DMultisampleEXT, (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C._Bool)(fixedSampleLocations), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) TexStorageMem3DEXT(target uint32, levels int32, internalFormat uint32, width int32, height int32, depth int32, memory uint32, offset uint64) {
	C.gllCall_glTexStorageMem3DEXT(gl.glTexStorageMem3DEXT, (C.uint32_t)(target), (C.int32_t)(levels), (C.uint32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) TexStorageMem3DMultisampleEXT(target uint32, samples int32, internalFormat uint32, width int32, height int32, depth int32, fixedSampleLocations bool, memory uint32, offset uint64) {
	C.gllCall_glTexStorageMem3DMultisampleEXT(gl.glTexStorageMem3DMultisampleEXT, (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C._Bool)(fixedSampleLocations), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) TexStorageSparseAMD(target uint32, internalFormat uint32, width int32, height int32, depth int32, layers int32, flags uint32) {
	C.gllCall_glTexStorageSparseAMD(gl.glTexStorageSparseAMD, (C.uint32_t)(target), (C.uint32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(layers), (C.uint32_t)(flags))
}
func (gl *lib) TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTexSubImage1D(gl.glTexSubImage1D, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(width), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TexSubImage1DEXT(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTexSubImage1DEXT(gl.glTexSubImage1DEXT, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(width), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTexSubImage2D(gl.glTexSubImage2D, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TexSubImage2DEXT(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTexSubImage2DEXT(gl.glTexSubImage2DEXT, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTexSubImage3D(gl.glTexSubImage3D, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TexSubImage3DEXT(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTexSubImage3DEXT(gl.glTexSubImage3DEXT, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TexSubImage3DOES(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTexSubImage3DOES(gl.glTexSubImage3DOES, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TexSubImage4DSGIS(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, woffset int32, width int32, height int32, depth int32, size4d int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTexSubImage4DSGIS(gl.glTexSubImage4DSGIS, (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(woffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(size4d), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TextureAttachMemoryNV(texture uint32, memory uint32, offset uint64) {
	C.gllCall_glTextureAttachMemoryNV(gl.glTextureAttachMemoryNV, (C.uint32_t)(texture), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) TextureBarrier() {
	C.gllCall_glTextureBarrier(gl.glTextureBarrier)
}
func (gl *lib) TextureBarrierNV() {
	C.gllCall_glTextureBarrierNV(gl.glTextureBarrierNV)
}
func (gl *lib) TextureBuffer(texture uint32, internalformat uint32, buffer uint32) {
	C.gllCall_glTextureBuffer(gl.glTextureBuffer, (C.uint32_t)(texture), (C.uint32_t)(internalformat), (C.uint32_t)(buffer))
}
func (gl *lib) TextureBufferEXT(texture uint32, target uint32, internalformat uint32, buffer uint32) {
	C.gllCall_glTextureBufferEXT(gl.glTextureBufferEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.uint32_t)(buffer))
}
func (gl *lib) TextureBufferRange(texture uint32, internalformat uint32, buffer uint32, offset uintptr, size int) {
	C.gllCall_glTextureBufferRange(gl.glTextureBufferRange, (C.uint32_t)(texture), (C.uint32_t)(internalformat), (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size))
}
func (gl *lib) TextureBufferRangeEXT(texture uint32, target uint32, internalformat uint32, buffer uint32, offset uintptr, size int) {
	C.gllCall_glTextureBufferRangeEXT(gl.glTextureBufferRangeEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(internalformat), (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size))
}
func (gl *lib) TextureColorMaskSGIS(red bool, green bool, blue bool, alpha bool) {
	C.gllCall_glTextureColorMaskSGIS(gl.glTextureColorMaskSGIS, (C._Bool)(red), (C._Bool)(green), (C._Bool)(blue), (C._Bool)(alpha))
}
func (gl *lib) TextureFoveationParametersQCOM(texture uint32, layer uint32, focalPoint uint32, focalX float32, focalY float32, gainX float32, gainY float32, foveaArea float32) {
	C.gllCall_glTextureFoveationParametersQCOM(gl.glTextureFoveationParametersQCOM, (C.uint32_t)(texture), (C.uint32_t)(layer), (C.uint32_t)(focalPoint), (C.float)(focalX), (C.float)(focalY), (C.float)(gainX), (C.float)(gainY), (C.float)(foveaArea))
}
func (gl *lib) TextureImage1DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTextureImage1DEXT(gl.glTextureImage1DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(border), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TextureImage2DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTextureImage2DEXT(gl.glTextureImage2DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(border), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TextureImage2DMultisampleCoverageNV(texture uint32, target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, fixedSampleLocations bool) {
	C.gllCall_glTextureImage2DMultisampleCoverageNV(gl.glTextureImage2DMultisampleCoverageNV, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(coverageSamples), (C.int32_t)(colorSamples), (C.int32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C._Bool)(fixedSampleLocations))
}
func (gl *lib) TextureImage2DMultisampleNV(texture uint32, target uint32, samples int32, internalFormat int32, width int32, height int32, fixedSampleLocations bool) {
	C.gllCall_glTextureImage2DMultisampleNV(gl.glTextureImage2DMultisampleNV, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(samples), (C.int32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C._Bool)(fixedSampleLocations))
}
func (gl *lib) TextureImage3DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTextureImage3DEXT(gl.glTextureImage3DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(border), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TextureImage3DMultisampleCoverageNV(texture uint32, target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, depth int32, fixedSampleLocations bool) {
	C.gllCall_glTextureImage3DMultisampleCoverageNV(gl.glTextureImage3DMultisampleCoverageNV, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(coverageSamples), (C.int32_t)(colorSamples), (C.int32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C._Bool)(fixedSampleLocations))
}
func (gl *lib) TextureImage3DMultisampleNV(texture uint32, target uint32, samples int32, internalFormat int32, width int32, height int32, depth int32, fixedSampleLocations bool) {
	C.gllCall_glTextureImage3DMultisampleNV(gl.glTextureImage3DMultisampleNV, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(samples), (C.int32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C._Bool)(fixedSampleLocations))
}
func (gl *lib) TextureLightEXT(pname uint32) {
	C.gllCall_glTextureLightEXT(gl.glTextureLightEXT, (C.uint32_t)(pname))
}
func (gl *lib) TextureMaterialEXT(face uint32, mode uint32) {
	C.gllCall_glTextureMaterialEXT(gl.glTextureMaterialEXT, (C.uint32_t)(face), (C.uint32_t)(mode))
}
func (gl *lib) TextureNormalEXT(mode uint32) {
	C.gllCall_glTextureNormalEXT(gl.glTextureNormalEXT, (C.uint32_t)(mode))
}
func (gl *lib) TexturePageCommitmentEXT(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, commit bool) {
	C.gllCall_glTexturePageCommitmentEXT(gl.glTexturePageCommitmentEXT, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C._Bool)(commit))
}
func (gl *lib) TexturePageCommitmentMemNV(texture uint32, layer int32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, memory uint32, offset uint64, commit bool) {
	C.gllCall_glTexturePageCommitmentMemNV(gl.glTexturePageCommitmentMemNV, (C.uint32_t)(texture), (C.int32_t)(layer), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(memory), (C.uint64_t)(offset), (C._Bool)(commit))
}
func (gl *lib) TextureParameterIiv(texture uint32, pname uint32, params *int32) {
	C.gllCall_glTextureParameterIiv(gl.glTextureParameterIiv, (C.uint32_t)(texture), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TextureParameterIivEXT(texture uint32, target uint32, pname uint32, params *int32) {
	C.gllCall_glTextureParameterIivEXT(gl.glTextureParameterIivEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TextureParameterIuiv(texture uint32, pname uint32, params *uint32) {
	C.gllCall_glTextureParameterIuiv(gl.glTextureParameterIuiv, (C.uint32_t)(texture), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TextureParameterIuivEXT(texture uint32, target uint32, pname uint32, params *uint32) {
	C.gllCall_glTextureParameterIuivEXT(gl.glTextureParameterIuivEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.uint32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TextureParameterf(texture uint32, pname uint32, param float32) {
	C.gllCall_glTextureParameterf(gl.glTextureParameterf, (C.uint32_t)(texture), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) TextureParameterfEXT(texture uint32, target uint32, pname uint32, param float32) {
	C.gllCall_glTextureParameterfEXT(gl.glTextureParameterfEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) TextureParameterfv(texture uint32, pname uint32, param *float32) {
	C.gllCall_glTextureParameterfv(gl.glTextureParameterfv, (C.uint32_t)(texture), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(param)))
}
func (gl *lib) TextureParameterfvEXT(texture uint32, target uint32, pname uint32, params *float32) {
	C.gllCall_glTextureParameterfvEXT(gl.glTextureParameterfvEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) TextureParameteri(texture uint32, pname uint32, param int32) {
	C.gllCall_glTextureParameteri(gl.glTextureParameteri, (C.uint32_t)(texture), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) TextureParameteriEXT(texture uint32, target uint32, pname uint32, param int32) {
	C.gllCall_glTextureParameteriEXT(gl.glTextureParameteriEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) TextureParameteriv(texture uint32, pname uint32, param *int32) {
	C.gllCall_glTextureParameteriv(gl.glTextureParameteriv, (C.uint32_t)(texture), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(param)))
}
func (gl *lib) TextureParameterivEXT(texture uint32, target uint32, pname uint32, params *int32) {
	C.gllCall_glTextureParameterivEXT(gl.glTextureParameterivEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) TextureRangeAPPLE(target uint32, length int32, pointer unsafe.Pointer) {
	C.gllCall_glTextureRangeAPPLE(gl.glTextureRangeAPPLE, (C.uint32_t)(target), (C.int32_t)(length), (unsafe.Pointer)(pointer))
}
func (gl *lib) TextureRenderbufferEXT(texture uint32, target uint32, renderbuffer uint32) {
	C.gllCall_glTextureRenderbufferEXT(gl.glTextureRenderbufferEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(renderbuffer))
}
func (gl *lib) TextureStorage1D(texture uint32, levels int32, internalformat uint32, width int32) {
	C.gllCall_glTextureStorage1D(gl.glTextureStorage1D, (C.uint32_t)(texture), (C.int32_t)(levels), (C.uint32_t)(internalformat), (C.int32_t)(width))
}
func (gl *lib) TextureStorage1DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32) {
	C.gllCall_glTextureStorage1DEXT(gl.glTextureStorage1DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(levels), (C.uint32_t)(internalformat), (C.int32_t)(width))
}
func (gl *lib) TextureStorage2D(texture uint32, levels int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glTextureStorage2D(gl.glTextureStorage2D, (C.uint32_t)(texture), (C.int32_t)(levels), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) TextureStorage2DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32, height int32) {
	C.gllCall_glTextureStorage2DEXT(gl.glTextureStorage2DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(levels), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) TextureStorage2DMultisample(texture uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
	C.gllCall_glTextureStorage2DMultisample(gl.glTextureStorage2DMultisample, (C.uint32_t)(texture), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C._Bool)(fixedsamplelocations))
}
func (gl *lib) TextureStorage2DMultisampleEXT(texture uint32, target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
	C.gllCall_glTextureStorage2DMultisampleEXT(gl.glTextureStorage2DMultisampleEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C._Bool)(fixedsamplelocations))
}
func (gl *lib) TextureStorage3D(texture uint32, levels int32, internalformat uint32, width int32, height int32, depth int32) {
	C.gllCall_glTextureStorage3D(gl.glTextureStorage3D, (C.uint32_t)(texture), (C.int32_t)(levels), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth))
}
func (gl *lib) TextureStorage3DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32) {
	C.gllCall_glTextureStorage3DEXT(gl.glTextureStorage3DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(levels), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth))
}
func (gl *lib) TextureStorage3DMultisample(texture uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
	C.gllCall_glTextureStorage3DMultisample(gl.glTextureStorage3DMultisample, (C.uint32_t)(texture), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C._Bool)(fixedsamplelocations))
}
func (gl *lib) TextureStorage3DMultisampleEXT(texture uint32, target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
	C.gllCall_glTextureStorage3DMultisampleEXT(gl.glTextureStorage3DMultisampleEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(samples), (C.uint32_t)(internalformat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C._Bool)(fixedsamplelocations))
}
func (gl *lib) TextureStorageMem1DEXT(texture uint32, levels int32, internalFormat uint32, width int32, memory uint32, offset uint64) {
	C.gllCall_glTextureStorageMem1DEXT(gl.glTextureStorageMem1DEXT, (C.uint32_t)(texture), (C.int32_t)(levels), (C.uint32_t)(internalFormat), (C.int32_t)(width), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) TextureStorageMem2DEXT(texture uint32, levels int32, internalFormat uint32, width int32, height int32, memory uint32, offset uint64) {
	C.gllCall_glTextureStorageMem2DEXT(gl.glTextureStorageMem2DEXT, (C.uint32_t)(texture), (C.int32_t)(levels), (C.uint32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) TextureStorageMem2DMultisampleEXT(texture uint32, samples int32, internalFormat uint32, width int32, height int32, fixedSampleLocations bool, memory uint32, offset uint64) {
	C.gllCall_glTextureStorageMem2DMultisampleEXT(gl.glTextureStorageMem2DMultisampleEXT, (C.uint32_t)(texture), (C.int32_t)(samples), (C.uint32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C._Bool)(fixedSampleLocations), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) TextureStorageMem3DEXT(texture uint32, levels int32, internalFormat uint32, width int32, height int32, depth int32, memory uint32, offset uint64) {
	C.gllCall_glTextureStorageMem3DEXT(gl.glTextureStorageMem3DEXT, (C.uint32_t)(texture), (C.int32_t)(levels), (C.uint32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) TextureStorageMem3DMultisampleEXT(texture uint32, samples int32, internalFormat uint32, width int32, height int32, depth int32, fixedSampleLocations bool, memory uint32, offset uint64) {
	C.gllCall_glTextureStorageMem3DMultisampleEXT(gl.glTextureStorageMem3DMultisampleEXT, (C.uint32_t)(texture), (C.int32_t)(samples), (C.uint32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C._Bool)(fixedSampleLocations), (C.uint32_t)(memory), (C.uint64_t)(offset))
}
func (gl *lib) TextureStorageSparseAMD(texture uint32, target uint32, internalFormat uint32, width int32, height int32, depth int32, layers int32, flags uint32) {
	C.gllCall_glTextureStorageSparseAMD(gl.glTextureStorageSparseAMD, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(internalFormat), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.int32_t)(layers), (C.uint32_t)(flags))
}
func (gl *lib) TextureSubImage1D(texture uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTextureSubImage1D(gl.glTextureSubImage1D, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(width), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTextureSubImage1DEXT(gl.glTextureSubImage1DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(width), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTextureSubImage2D(gl.glTextureSubImage2D, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTextureSubImage2DEXT(gl.glTextureSubImage2DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(width), (C.int32_t)(height), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTextureSubImage3D(gl.glTextureSubImage3D, (C.uint32_t)(texture), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer) {
	C.gllCall_glTextureSubImage3DEXT(gl.glTextureSubImage3DEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.int32_t)(level), (C.int32_t)(xoffset), (C.int32_t)(yoffset), (C.int32_t)(zoffset), (C.int32_t)(width), (C.int32_t)(height), (C.int32_t)(depth), (C.uint32_t)(format), (C.uint32_t)(type_), (unsafe.Pointer)(pixels))
}
func (gl *lib) TextureView(texture uint32, target uint32, origtexture uint32, internalformat uint32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32) {
	C.gllCall_glTextureView(gl.glTextureView, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(origtexture), (C.uint32_t)(internalformat), (C.uint32_t)(minlevel), (C.uint32_t)(numlevels), (C.uint32_t)(minlayer), (C.uint32_t)(numlayers))
}
func (gl *lib) TextureViewEXT(texture uint32, target uint32, origtexture uint32, internalformat uint32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32) {
	C.gllCall_glTextureViewEXT(gl.glTextureViewEXT, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(origtexture), (C.uint32_t)(internalformat), (C.uint32_t)(minlevel), (C.uint32_t)(numlevels), (C.uint32_t)(minlayer), (C.uint32_t)(numlayers))
}
func (gl *lib) TextureViewOES(texture uint32, target uint32, origtexture uint32, internalformat uint32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32) {
	C.gllCall_glTextureViewOES(gl.glTextureViewOES, (C.uint32_t)(texture), (C.uint32_t)(target), (C.uint32_t)(origtexture), (C.uint32_t)(internalformat), (C.uint32_t)(minlevel), (C.uint32_t)(numlevels), (C.uint32_t)(minlayer), (C.uint32_t)(numlayers))
}
func (gl *lib) TrackMatrixNV(target uint32, address uint32, matrix uint32, transform uint32) {
	C.gllCall_glTrackMatrixNV(gl.glTrackMatrixNV, (C.uint32_t)(target), (C.uint32_t)(address), (C.uint32_t)(matrix), (C.uint32_t)(transform))
}
func (gl *lib) TransformFeedbackAttribsNV(count int32, attribs *int32, bufferMode uint32) {
	C.gllCall_glTransformFeedbackAttribsNV(gl.glTransformFeedbackAttribsNV, (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(attribs)), (C.uint32_t)(bufferMode))
}
func (gl *lib) TransformFeedbackBufferBase(xfb uint32, index uint32, buffer uint32) {
	C.gllCall_glTransformFeedbackBufferBase(gl.glTransformFeedbackBufferBase, (C.uint32_t)(xfb), (C.uint32_t)(index), (C.uint32_t)(buffer))
}
func (gl *lib) TransformFeedbackBufferRange(xfb uint32, index uint32, buffer uint32, offset uintptr, size int) {
	C.gllCall_glTransformFeedbackBufferRange(gl.glTransformFeedbackBufferRange, (C.uint32_t)(xfb), (C.uint32_t)(index), (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.ssize_t)(size))
}
func (gl *lib) TransformFeedbackStreamAttribsNV(count int32, attribs *int32, nbuffers int32, bufstreams *int32, bufferMode uint32) {
	C.gllCall_glTransformFeedbackStreamAttribsNV(gl.glTransformFeedbackStreamAttribsNV, (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(attribs)), (C.int32_t)(nbuffers), (*C.int32_t)(unsafe.Pointer(bufstreams)), (C.uint32_t)(bufferMode))
}
func (gl *lib) TransformFeedbackVaryings(program uint32, count int32, varyings **uint8, bufferMode uint32) {
	C.gllCall_glTransformFeedbackVaryings(gl.glTransformFeedbackVaryings, (C.uint32_t)(program), (C.int32_t)(count), (**C.uint8_t)(unsafe.Pointer(varyings)), (C.uint32_t)(bufferMode))
}
func (gl *lib) TransformFeedbackVaryingsEXT(program uint32, count int32, varyings **uint8, bufferMode uint32) {
	C.gllCall_glTransformFeedbackVaryingsEXT(gl.glTransformFeedbackVaryingsEXT, (C.uint32_t)(program), (C.int32_t)(count), (**C.uint8_t)(unsafe.Pointer(varyings)), (C.uint32_t)(bufferMode))
}
func (gl *lib) TransformFeedbackVaryingsNV(program uint32, count int32, locations *int32, bufferMode uint32) {
	C.gllCall_glTransformFeedbackVaryingsNV(gl.glTransformFeedbackVaryingsNV, (C.uint32_t)(program), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(locations)), (C.uint32_t)(bufferMode))
}
func (gl *lib) TransformPathNV(resultPath uint32, srcPath uint32, transformType uint32, transformValues *float32) {
	C.gllCall_glTransformPathNV(gl.glTransformPathNV, (C.uint32_t)(resultPath), (C.uint32_t)(srcPath), (C.uint32_t)(transformType), (*C.float)(unsafe.Pointer(transformValues)))
}
func (gl *lib) Translated(x float64, y float64, z float64) {
	C.gllCall_glTranslated(gl.glTranslated, (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) Translatef(x float32, y float32, z float32) {
	C.gllCall_glTranslatef(gl.glTranslatef, (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) Translatex(x int32, y int32, z int32) {
	C.gllCall_glTranslatex(gl.glTranslatex, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) TranslatexOES(x int32, y int32, z int32) {
	C.gllCall_glTranslatexOES(gl.glTranslatexOES, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) Uniform1d(location int32, x float64) {
	C.gllCall_glUniform1d(gl.glUniform1d, (C.int32_t)(location), (C.double)(x))
}
func (gl *lib) Uniform1dv(location int32, count int32, value *float64) {
	C.gllCall_glUniform1dv(gl.glUniform1dv, (C.int32_t)(location), (C.int32_t)(count), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform1f(location int32, v0 float32) {
	C.gllCall_glUniform1f(gl.glUniform1f, (C.int32_t)(location), (C.float)(v0))
}
func (gl *lib) Uniform1fARB(location int32, v0 float32) {
	C.gllCall_glUniform1fARB(gl.glUniform1fARB, (C.int32_t)(location), (C.float)(v0))
}
func (gl *lib) Uniform1fv(location int32, count int32, value *float32) {
	C.gllCall_glUniform1fv(gl.glUniform1fv, (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform1fvARB(location int32, count int32, value *float32) {
	C.gllCall_glUniform1fvARB(gl.glUniform1fvARB, (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform1i(location int32, v0 int32) {
	C.gllCall_glUniform1i(gl.glUniform1i, (C.int32_t)(location), (C.int32_t)(v0))
}
func (gl *lib) Uniform1i64ARB(location int32, x int64) {
	C.gllCall_glUniform1i64ARB(gl.glUniform1i64ARB, (C.int32_t)(location), (C.int64_t)(x))
}
func (gl *lib) Uniform1i64NV(location int32, x int64) {
	C.gllCall_glUniform1i64NV(gl.glUniform1i64NV, (C.int32_t)(location), (C.int64_t)(x))
}
func (gl *lib) Uniform1i64vARB(location int32, count int32, value *int64) {
	C.gllCall_glUniform1i64vARB(gl.glUniform1i64vARB, (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform1i64vNV(location int32, count int32, value *int64) {
	C.gllCall_glUniform1i64vNV(gl.glUniform1i64vNV, (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform1iARB(location int32, v0 int32) {
	C.gllCall_glUniform1iARB(gl.glUniform1iARB, (C.int32_t)(location), (C.int32_t)(v0))
}
func (gl *lib) Uniform1iv(location int32, count int32, value *int32) {
	C.gllCall_glUniform1iv(gl.glUniform1iv, (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform1ivARB(location int32, count int32, value *int32) {
	C.gllCall_glUniform1ivARB(gl.glUniform1ivARB, (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform1ui(location int32, v0 uint32) {
	C.gllCall_glUniform1ui(gl.glUniform1ui, (C.int32_t)(location), (C.uint32_t)(v0))
}
func (gl *lib) Uniform1ui64ARB(location int32, x uint64) {
	C.gllCall_glUniform1ui64ARB(gl.glUniform1ui64ARB, (C.int32_t)(location), (C.uint64_t)(x))
}
func (gl *lib) Uniform1ui64NV(location int32, x uint64) {
	C.gllCall_glUniform1ui64NV(gl.glUniform1ui64NV, (C.int32_t)(location), (C.uint64_t)(x))
}
func (gl *lib) Uniform1ui64vARB(location int32, count int32, value *uint64) {
	C.gllCall_glUniform1ui64vARB(gl.glUniform1ui64vARB, (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform1ui64vNV(location int32, count int32, value *uint64) {
	C.gllCall_glUniform1ui64vNV(gl.glUniform1ui64vNV, (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform1uiEXT(location int32, v0 uint32) {
	C.gllCall_glUniform1uiEXT(gl.glUniform1uiEXT, (C.int32_t)(location), (C.uint32_t)(v0))
}
func (gl *lib) Uniform1uiv(location int32, count int32, value *uint32) {
	C.gllCall_glUniform1uiv(gl.glUniform1uiv, (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform1uivEXT(location int32, count int32, value *uint32) {
	C.gllCall_glUniform1uivEXT(gl.glUniform1uivEXT, (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform2d(location int32, x float64, y float64) {
	C.gllCall_glUniform2d(gl.glUniform2d, (C.int32_t)(location), (C.double)(x), (C.double)(y))
}
func (gl *lib) Uniform2dv(location int32, count int32, value *float64) {
	C.gllCall_glUniform2dv(gl.glUniform2dv, (C.int32_t)(location), (C.int32_t)(count), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform2f(location int32, v0 float32, v1 float32) {
	C.gllCall_glUniform2f(gl.glUniform2f, (C.int32_t)(location), (C.float)(v0), (C.float)(v1))
}
func (gl *lib) Uniform2fARB(location int32, v0 float32, v1 float32) {
	C.gllCall_glUniform2fARB(gl.glUniform2fARB, (C.int32_t)(location), (C.float)(v0), (C.float)(v1))
}
func (gl *lib) Uniform2fv(location int32, count int32, value *float32) {
	C.gllCall_glUniform2fv(gl.glUniform2fv, (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform2fvARB(location int32, count int32, value *float32) {
	C.gllCall_glUniform2fvARB(gl.glUniform2fvARB, (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform2i(location int32, v0 int32, v1 int32) {
	C.gllCall_glUniform2i(gl.glUniform2i, (C.int32_t)(location), (C.int32_t)(v0), (C.int32_t)(v1))
}
func (gl *lib) Uniform2i64ARB(location int32, x int64, y int64) {
	C.gllCall_glUniform2i64ARB(gl.glUniform2i64ARB, (C.int32_t)(location), (C.int64_t)(x), (C.int64_t)(y))
}
func (gl *lib) Uniform2i64NV(location int32, x int64, y int64) {
	C.gllCall_glUniform2i64NV(gl.glUniform2i64NV, (C.int32_t)(location), (C.int64_t)(x), (C.int64_t)(y))
}
func (gl *lib) Uniform2i64vARB(location int32, count int32, value *int64) {
	C.gllCall_glUniform2i64vARB(gl.glUniform2i64vARB, (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform2i64vNV(location int32, count int32, value *int64) {
	C.gllCall_glUniform2i64vNV(gl.glUniform2i64vNV, (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform2iARB(location int32, v0 int32, v1 int32) {
	C.gllCall_glUniform2iARB(gl.glUniform2iARB, (C.int32_t)(location), (C.int32_t)(v0), (C.int32_t)(v1))
}
func (gl *lib) Uniform2iv(location int32, count int32, value *int32) {
	C.gllCall_glUniform2iv(gl.glUniform2iv, (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform2ivARB(location int32, count int32, value *int32) {
	C.gllCall_glUniform2ivARB(gl.glUniform2ivARB, (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform2ui(location int32, v0 uint32, v1 uint32) {
	C.gllCall_glUniform2ui(gl.glUniform2ui, (C.int32_t)(location), (C.uint32_t)(v0), (C.uint32_t)(v1))
}
func (gl *lib) Uniform2ui64ARB(location int32, x uint64, y uint64) {
	C.gllCall_glUniform2ui64ARB(gl.glUniform2ui64ARB, (C.int32_t)(location), (C.uint64_t)(x), (C.uint64_t)(y))
}
func (gl *lib) Uniform2ui64NV(location int32, x uint64, y uint64) {
	C.gllCall_glUniform2ui64NV(gl.glUniform2ui64NV, (C.int32_t)(location), (C.uint64_t)(x), (C.uint64_t)(y))
}
func (gl *lib) Uniform2ui64vARB(location int32, count int32, value *uint64) {
	C.gllCall_glUniform2ui64vARB(gl.glUniform2ui64vARB, (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform2ui64vNV(location int32, count int32, value *uint64) {
	C.gllCall_glUniform2ui64vNV(gl.glUniform2ui64vNV, (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform2uiEXT(location int32, v0 uint32, v1 uint32) {
	C.gllCall_glUniform2uiEXT(gl.glUniform2uiEXT, (C.int32_t)(location), (C.uint32_t)(v0), (C.uint32_t)(v1))
}
func (gl *lib) Uniform2uiv(location int32, count int32, value *uint32) {
	C.gllCall_glUniform2uiv(gl.glUniform2uiv, (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform2uivEXT(location int32, count int32, value *uint32) {
	C.gllCall_glUniform2uivEXT(gl.glUniform2uivEXT, (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform3d(location int32, x float64, y float64, z float64) {
	C.gllCall_glUniform3d(gl.glUniform3d, (C.int32_t)(location), (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) Uniform3dv(location int32, count int32, value *float64) {
	C.gllCall_glUniform3dv(gl.glUniform3dv, (C.int32_t)(location), (C.int32_t)(count), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform3f(location int32, v0 float32, v1 float32, v2 float32) {
	C.gllCall_glUniform3f(gl.glUniform3f, (C.int32_t)(location), (C.float)(v0), (C.float)(v1), (C.float)(v2))
}
func (gl *lib) Uniform3fARB(location int32, v0 float32, v1 float32, v2 float32) {
	C.gllCall_glUniform3fARB(gl.glUniform3fARB, (C.int32_t)(location), (C.float)(v0), (C.float)(v1), (C.float)(v2))
}
func (gl *lib) Uniform3fv(location int32, count int32, value *float32) {
	C.gllCall_glUniform3fv(gl.glUniform3fv, (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform3fvARB(location int32, count int32, value *float32) {
	C.gllCall_glUniform3fvARB(gl.glUniform3fvARB, (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform3i(location int32, v0 int32, v1 int32, v2 int32) {
	C.gllCall_glUniform3i(gl.glUniform3i, (C.int32_t)(location), (C.int32_t)(v0), (C.int32_t)(v1), (C.int32_t)(v2))
}
func (gl *lib) Uniform3i64ARB(location int32, x int64, y int64, z int64) {
	C.gllCall_glUniform3i64ARB(gl.glUniform3i64ARB, (C.int32_t)(location), (C.int64_t)(x), (C.int64_t)(y), (C.int64_t)(z))
}
func (gl *lib) Uniform3i64NV(location int32, x int64, y int64, z int64) {
	C.gllCall_glUniform3i64NV(gl.glUniform3i64NV, (C.int32_t)(location), (C.int64_t)(x), (C.int64_t)(y), (C.int64_t)(z))
}
func (gl *lib) Uniform3i64vARB(location int32, count int32, value *int64) {
	C.gllCall_glUniform3i64vARB(gl.glUniform3i64vARB, (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform3i64vNV(location int32, count int32, value *int64) {
	C.gllCall_glUniform3i64vNV(gl.glUniform3i64vNV, (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform3iARB(location int32, v0 int32, v1 int32, v2 int32) {
	C.gllCall_glUniform3iARB(gl.glUniform3iARB, (C.int32_t)(location), (C.int32_t)(v0), (C.int32_t)(v1), (C.int32_t)(v2))
}
func (gl *lib) Uniform3iv(location int32, count int32, value *int32) {
	C.gllCall_glUniform3iv(gl.glUniform3iv, (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform3ivARB(location int32, count int32, value *int32) {
	C.gllCall_glUniform3ivARB(gl.glUniform3ivARB, (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32) {
	C.gllCall_glUniform3ui(gl.glUniform3ui, (C.int32_t)(location), (C.uint32_t)(v0), (C.uint32_t)(v1), (C.uint32_t)(v2))
}
func (gl *lib) Uniform3ui64ARB(location int32, x uint64, y uint64, z uint64) {
	C.gllCall_glUniform3ui64ARB(gl.glUniform3ui64ARB, (C.int32_t)(location), (C.uint64_t)(x), (C.uint64_t)(y), (C.uint64_t)(z))
}
func (gl *lib) Uniform3ui64NV(location int32, x uint64, y uint64, z uint64) {
	C.gllCall_glUniform3ui64NV(gl.glUniform3ui64NV, (C.int32_t)(location), (C.uint64_t)(x), (C.uint64_t)(y), (C.uint64_t)(z))
}
func (gl *lib) Uniform3ui64vARB(location int32, count int32, value *uint64) {
	C.gllCall_glUniform3ui64vARB(gl.glUniform3ui64vARB, (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform3ui64vNV(location int32, count int32, value *uint64) {
	C.gllCall_glUniform3ui64vNV(gl.glUniform3ui64vNV, (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform3uiEXT(location int32, v0 uint32, v1 uint32, v2 uint32) {
	C.gllCall_glUniform3uiEXT(gl.glUniform3uiEXT, (C.int32_t)(location), (C.uint32_t)(v0), (C.uint32_t)(v1), (C.uint32_t)(v2))
}
func (gl *lib) Uniform3uiv(location int32, count int32, value *uint32) {
	C.gllCall_glUniform3uiv(gl.glUniform3uiv, (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform3uivEXT(location int32, count int32, value *uint32) {
	C.gllCall_glUniform3uivEXT(gl.glUniform3uivEXT, (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform4d(location int32, x float64, y float64, z float64, w float64) {
	C.gllCall_glUniform4d(gl.glUniform4d, (C.int32_t)(location), (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) Uniform4dv(location int32, count int32, value *float64) {
	C.gllCall_glUniform4dv(gl.glUniform4dv, (C.int32_t)(location), (C.int32_t)(count), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
	C.gllCall_glUniform4f(gl.glUniform4f, (C.int32_t)(location), (C.float)(v0), (C.float)(v1), (C.float)(v2), (C.float)(v3))
}
func (gl *lib) Uniform4fARB(location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
	C.gllCall_glUniform4fARB(gl.glUniform4fARB, (C.int32_t)(location), (C.float)(v0), (C.float)(v1), (C.float)(v2), (C.float)(v3))
}
func (gl *lib) Uniform4fv(location int32, count int32, value *float32) {
	C.gllCall_glUniform4fv(gl.glUniform4fv, (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform4fvARB(location int32, count int32, value *float32) {
	C.gllCall_glUniform4fvARB(gl.glUniform4fvARB, (C.int32_t)(location), (C.int32_t)(count), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
	C.gllCall_glUniform4i(gl.glUniform4i, (C.int32_t)(location), (C.int32_t)(v0), (C.int32_t)(v1), (C.int32_t)(v2), (C.int32_t)(v3))
}
func (gl *lib) Uniform4i64ARB(location int32, x int64, y int64, z int64, w int64) {
	C.gllCall_glUniform4i64ARB(gl.glUniform4i64ARB, (C.int32_t)(location), (C.int64_t)(x), (C.int64_t)(y), (C.int64_t)(z), (C.int64_t)(w))
}
func (gl *lib) Uniform4i64NV(location int32, x int64, y int64, z int64, w int64) {
	C.gllCall_glUniform4i64NV(gl.glUniform4i64NV, (C.int32_t)(location), (C.int64_t)(x), (C.int64_t)(y), (C.int64_t)(z), (C.int64_t)(w))
}
func (gl *lib) Uniform4i64vARB(location int32, count int32, value *int64) {
	C.gllCall_glUniform4i64vARB(gl.glUniform4i64vARB, (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform4i64vNV(location int32, count int32, value *int64) {
	C.gllCall_glUniform4i64vNV(gl.glUniform4i64vNV, (C.int32_t)(location), (C.int32_t)(count), (*C.int64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform4iARB(location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
	C.gllCall_glUniform4iARB(gl.glUniform4iARB, (C.int32_t)(location), (C.int32_t)(v0), (C.int32_t)(v1), (C.int32_t)(v2), (C.int32_t)(v3))
}
func (gl *lib) Uniform4iv(location int32, count int32, value *int32) {
	C.gllCall_glUniform4iv(gl.glUniform4iv, (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform4ivARB(location int32, count int32, value *int32) {
	C.gllCall_glUniform4ivARB(gl.glUniform4ivARB, (C.int32_t)(location), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
	C.gllCall_glUniform4ui(gl.glUniform4ui, (C.int32_t)(location), (C.uint32_t)(v0), (C.uint32_t)(v1), (C.uint32_t)(v2), (C.uint32_t)(v3))
}
func (gl *lib) Uniform4ui64ARB(location int32, x uint64, y uint64, z uint64, w uint64) {
	C.gllCall_glUniform4ui64ARB(gl.glUniform4ui64ARB, (C.int32_t)(location), (C.uint64_t)(x), (C.uint64_t)(y), (C.uint64_t)(z), (C.uint64_t)(w))
}
func (gl *lib) Uniform4ui64NV(location int32, x uint64, y uint64, z uint64, w uint64) {
	C.gllCall_glUniform4ui64NV(gl.glUniform4ui64NV, (C.int32_t)(location), (C.uint64_t)(x), (C.uint64_t)(y), (C.uint64_t)(z), (C.uint64_t)(w))
}
func (gl *lib) Uniform4ui64vARB(location int32, count int32, value *uint64) {
	C.gllCall_glUniform4ui64vARB(gl.glUniform4ui64vARB, (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform4ui64vNV(location int32, count int32, value *uint64) {
	C.gllCall_glUniform4ui64vNV(gl.glUniform4ui64vNV, (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform4uiEXT(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
	C.gllCall_glUniform4uiEXT(gl.glUniform4uiEXT, (C.int32_t)(location), (C.uint32_t)(v0), (C.uint32_t)(v1), (C.uint32_t)(v2), (C.uint32_t)(v3))
}
func (gl *lib) Uniform4uiv(location int32, count int32, value *uint32) {
	C.gllCall_glUniform4uiv(gl.glUniform4uiv, (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) Uniform4uivEXT(location int32, count int32, value *uint32) {
	C.gllCall_glUniform4uivEXT(gl.glUniform4uivEXT, (C.int32_t)(location), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32) {
	C.gllCall_glUniformBlockBinding(gl.glUniformBlockBinding, (C.uint32_t)(program), (C.uint32_t)(uniformBlockIndex), (C.uint32_t)(uniformBlockBinding))
}
func (gl *lib) UniformBufferEXT(program uint32, location int32, buffer uint32) {
	C.gllCall_glUniformBufferEXT(gl.glUniformBufferEXT, (C.uint32_t)(program), (C.int32_t)(location), (C.uint32_t)(buffer))
}
func (gl *lib) UniformHandleui64ARB(location int32, value uint64) {
	C.gllCall_glUniformHandleui64ARB(gl.glUniformHandleui64ARB, (C.int32_t)(location), (C.uint64_t)(value))
}
func (gl *lib) UniformHandleui64IMG(location int32, value uint64) {
	C.gllCall_glUniformHandleui64IMG(gl.glUniformHandleui64IMG, (C.int32_t)(location), (C.uint64_t)(value))
}
func (gl *lib) UniformHandleui64NV(location int32, value uint64) {
	C.gllCall_glUniformHandleui64NV(gl.glUniformHandleui64NV, (C.int32_t)(location), (C.uint64_t)(value))
}
func (gl *lib) UniformHandleui64vARB(location int32, count int32, value *uint64) {
	C.gllCall_glUniformHandleui64vARB(gl.glUniformHandleui64vARB, (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) UniformHandleui64vIMG(location int32, count int32, value *uint64) {
	C.gllCall_glUniformHandleui64vIMG(gl.glUniformHandleui64vIMG, (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) UniformHandleui64vNV(location int32, count int32, value *uint64) {
	C.gllCall_glUniformHandleui64vNV(gl.glUniformHandleui64vNV, (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix2dv(location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glUniformMatrix2dv(gl.glUniformMatrix2dv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix2fv(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix2fv(gl.glUniformMatrix2fv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix2fvARB(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix2fvARB(gl.glUniformMatrix2fvARB, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix2x3dv(location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glUniformMatrix2x3dv(gl.glUniformMatrix2x3dv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix2x3fv(gl.glUniformMatrix2x3fv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix2x3fvNV(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix2x3fvNV(gl.glUniformMatrix2x3fvNV, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix2x4dv(location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glUniformMatrix2x4dv(gl.glUniformMatrix2x4dv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix2x4fv(gl.glUniformMatrix2x4fv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix2x4fvNV(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix2x4fvNV(gl.glUniformMatrix2x4fvNV, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix3dv(location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glUniformMatrix3dv(gl.glUniformMatrix3dv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix3fv(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix3fv(gl.glUniformMatrix3fv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix3fvARB(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix3fvARB(gl.glUniformMatrix3fvARB, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix3x2dv(location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glUniformMatrix3x2dv(gl.glUniformMatrix3x2dv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix3x2fv(gl.glUniformMatrix3x2fv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix3x2fvNV(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix3x2fvNV(gl.glUniformMatrix3x2fvNV, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix3x4dv(location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glUniformMatrix3x4dv(gl.glUniformMatrix3x4dv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix3x4fv(gl.glUniformMatrix3x4fv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix3x4fvNV(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix3x4fvNV(gl.glUniformMatrix3x4fvNV, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix4dv(location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glUniformMatrix4dv(gl.glUniformMatrix4dv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix4fv(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix4fv(gl.glUniformMatrix4fv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix4fvARB(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix4fvARB(gl.glUniformMatrix4fvARB, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix4x2dv(location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glUniformMatrix4x2dv(gl.glUniformMatrix4x2dv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix4x2fv(gl.glUniformMatrix4x2fv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix4x2fvNV(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix4x2fvNV(gl.glUniformMatrix4x2fvNV, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix4x3dv(location int32, count int32, transpose bool, value *float64) {
	C.gllCall_glUniformMatrix4x3dv(gl.glUniformMatrix4x3dv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.double)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix4x3fv(gl.glUniformMatrix4x3fv, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformMatrix4x3fvNV(location int32, count int32, transpose bool, value *float32) {
	C.gllCall_glUniformMatrix4x3fvNV(gl.glUniformMatrix4x3fvNV, (C.int32_t)(location), (C.int32_t)(count), (C._Bool)(transpose), (*C.float)(unsafe.Pointer(value)))
}
func (gl *lib) UniformSubroutinesuiv(shadertype uint32, count int32, indices *uint32) {
	C.gllCall_glUniformSubroutinesuiv(gl.glUniformSubroutinesuiv, (C.uint32_t)(shadertype), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(indices)))
}
func (gl *lib) Uniformui64NV(location int32, value uint64) {
	C.gllCall_glUniformui64NV(gl.glUniformui64NV, (C.int32_t)(location), (C.uint64_t)(value))
}
func (gl *lib) Uniformui64vNV(location int32, count int32, value *uint64) {
	C.gllCall_glUniformui64vNV(gl.glUniformui64vNV, (C.int32_t)(location), (C.int32_t)(count), (*C.uint64_t)(unsafe.Pointer(value)))
}
func (gl *lib) UnlockArraysEXT() {
	C.gllCall_glUnlockArraysEXT(gl.glUnlockArraysEXT)
}
func (gl *lib) UnmapBuffer(target uint32) bool {
	return (bool)(C.gllCall_glUnmapBuffer(gl.glUnmapBuffer, (C.uint32_t)(target)))
}
func (gl *lib) UnmapBufferARB(target uint32) bool {
	return (bool)(C.gllCall_glUnmapBufferARB(gl.glUnmapBufferARB, (C.uint32_t)(target)))
}
func (gl *lib) UnmapBufferOES(target uint32) bool {
	return (bool)(C.gllCall_glUnmapBufferOES(gl.glUnmapBufferOES, (C.uint32_t)(target)))
}
func (gl *lib) UnmapNamedBuffer(buffer uint32) bool {
	return (bool)(C.gllCall_glUnmapNamedBuffer(gl.glUnmapNamedBuffer, (C.uint32_t)(buffer)))
}
func (gl *lib) UnmapNamedBufferEXT(buffer uint32) bool {
	return (bool)(C.gllCall_glUnmapNamedBufferEXT(gl.glUnmapNamedBufferEXT, (C.uint32_t)(buffer)))
}
func (gl *lib) UnmapObjectBufferATI(buffer uint32) {
	C.gllCall_glUnmapObjectBufferATI(gl.glUnmapObjectBufferATI, (C.uint32_t)(buffer))
}
func (gl *lib) UnmapTexture2DINTEL(texture uint32, level int32) {
	C.gllCall_glUnmapTexture2DINTEL(gl.glUnmapTexture2DINTEL, (C.uint32_t)(texture), (C.int32_t)(level))
}
func (gl *lib) UpdateObjectBufferATI(buffer uint32, offset uint32, size int32, pointer unsafe.Pointer, preserve uint32) {
	C.gllCall_glUpdateObjectBufferATI(gl.glUpdateObjectBufferATI, (C.uint32_t)(buffer), (C.uint32_t)(offset), (C.int32_t)(size), (unsafe.Pointer)(pointer), (C.uint32_t)(preserve))
}
func (gl *lib) UploadGpuMaskNVX(mask uint32) {
	C.gllCall_glUploadGpuMaskNVX(gl.glUploadGpuMaskNVX, (C.uint32_t)(mask))
}
func (gl *lib) UseProgram(program uint32) {
	C.gllCall_glUseProgram(gl.glUseProgram, (C.uint32_t)(program))
}
func (gl *lib) UseProgramObjectARB(programObj GLhandleARB) {
	C.gllCall_glUseProgramObjectARB(gl.glUseProgramObjectARB, (C.GLhandleARB)(programObj))
}
func (gl *lib) UseProgramStages(pipeline uint32, stages uint32, program uint32) {
	C.gllCall_glUseProgramStages(gl.glUseProgramStages, (C.uint32_t)(pipeline), (C.uint32_t)(stages), (C.uint32_t)(program))
}
func (gl *lib) UseProgramStagesEXT(pipeline uint32, stages uint32, program uint32) {
	C.gllCall_glUseProgramStagesEXT(gl.glUseProgramStagesEXT, (C.uint32_t)(pipeline), (C.uint32_t)(stages), (C.uint32_t)(program))
}
func (gl *lib) UseShaderProgramEXT(type_ uint32, program uint32) {
	C.gllCall_glUseShaderProgramEXT(gl.glUseShaderProgramEXT, (C.uint32_t)(type_), (C.uint32_t)(program))
}
func (gl *lib) VDPAUFiniNV() {
	C.gllCall_glVDPAUFiniNV(gl.glVDPAUFiniNV)
}
func (gl *lib) VDPAUGetSurfaceivNV(surface uintptr, pname uint32, count int32, length *int32, values *int32) {
	C.gllCall_glVDPAUGetSurfaceivNV(gl.glVDPAUGetSurfaceivNV, (C.intptr_t)(surface), (C.uint32_t)(pname), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(length)), (*C.int32_t)(unsafe.Pointer(values)))
}
func (gl *lib) VDPAUInitNV(vdpDevice unsafe.Pointer, getProcAddress unsafe.Pointer) {
	C.gllCall_glVDPAUInitNV(gl.glVDPAUInitNV, (unsafe.Pointer)(vdpDevice), (unsafe.Pointer)(getProcAddress))
}
func (gl *lib) VDPAUIsSurfaceNV(surface uintptr) bool {
	return (bool)(C.gllCall_glVDPAUIsSurfaceNV(gl.glVDPAUIsSurfaceNV, (C.intptr_t)(surface)))
}
func (gl *lib) VDPAUMapSurfacesNV(numSurfaces int32, surfaces *uintptr) {
	C.gllCall_glVDPAUMapSurfacesNV(gl.glVDPAUMapSurfacesNV, (C.int32_t)(numSurfaces), (*C.intptr_t)(unsafe.Pointer(surfaces)))
}
func (gl *lib) VDPAURegisterOutputSurfaceNV(vdpSurface unsafe.Pointer, target uint32, numTextureNames int32, textureNames *uint32) uintptr {
	return (uintptr)(C.gllCall_glVDPAURegisterOutputSurfaceNV(gl.glVDPAURegisterOutputSurfaceNV, (unsafe.Pointer)(vdpSurface), (C.uint32_t)(target), (C.int32_t)(numTextureNames), (*C.uint32_t)(unsafe.Pointer(textureNames))))
}
func (gl *lib) VDPAURegisterVideoSurfaceNV(vdpSurface unsafe.Pointer, target uint32, numTextureNames int32, textureNames *uint32) uintptr {
	return (uintptr)(C.gllCall_glVDPAURegisterVideoSurfaceNV(gl.glVDPAURegisterVideoSurfaceNV, (unsafe.Pointer)(vdpSurface), (C.uint32_t)(target), (C.int32_t)(numTextureNames), (*C.uint32_t)(unsafe.Pointer(textureNames))))
}
func (gl *lib) VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface unsafe.Pointer, target uint32, numTextureNames int32, textureNames *uint32, isFrameStructure bool) uintptr {
	return (uintptr)(C.gllCall_glVDPAURegisterVideoSurfaceWithPictureStructureNV(gl.glVDPAURegisterVideoSurfaceWithPictureStructureNV, (unsafe.Pointer)(vdpSurface), (C.uint32_t)(target), (C.int32_t)(numTextureNames), (*C.uint32_t)(unsafe.Pointer(textureNames)), (C._Bool)(isFrameStructure)))
}
func (gl *lib) VDPAUSurfaceAccessNV(surface uintptr, access uint32) {
	C.gllCall_glVDPAUSurfaceAccessNV(gl.glVDPAUSurfaceAccessNV, (C.intptr_t)(surface), (C.uint32_t)(access))
}
func (gl *lib) VDPAUUnmapSurfacesNV(numSurface int32, surfaces *uintptr) {
	C.gllCall_glVDPAUUnmapSurfacesNV(gl.glVDPAUUnmapSurfacesNV, (C.int32_t)(numSurface), (*C.intptr_t)(unsafe.Pointer(surfaces)))
}
func (gl *lib) VDPAUUnregisterSurfaceNV(surface uintptr) {
	C.gllCall_glVDPAUUnregisterSurfaceNV(gl.glVDPAUUnregisterSurfaceNV, (C.intptr_t)(surface))
}
func (gl *lib) ValidateProgram(program uint32) {
	C.gllCall_glValidateProgram(gl.glValidateProgram, (C.uint32_t)(program))
}
func (gl *lib) ValidateProgramARB(programObj GLhandleARB) {
	C.gllCall_glValidateProgramARB(gl.glValidateProgramARB, (C.GLhandleARB)(programObj))
}
func (gl *lib) ValidateProgramPipeline(pipeline uint32) {
	C.gllCall_glValidateProgramPipeline(gl.glValidateProgramPipeline, (C.uint32_t)(pipeline))
}
func (gl *lib) ValidateProgramPipelineEXT(pipeline uint32) {
	C.gllCall_glValidateProgramPipelineEXT(gl.glValidateProgramPipelineEXT, (C.uint32_t)(pipeline))
}
func (gl *lib) VariantArrayObjectATI(id uint32, type_ uint32, stride int32, buffer uint32, offset uint32) {
	C.gllCall_glVariantArrayObjectATI(gl.glVariantArrayObjectATI, (C.uint32_t)(id), (C.uint32_t)(type_), (C.int32_t)(stride), (C.uint32_t)(buffer), (C.uint32_t)(offset))
}
func (gl *lib) VariantPointerEXT(id uint32, type_ uint32, stride uint32, addr unsafe.Pointer) {
	C.gllCall_glVariantPointerEXT(gl.glVariantPointerEXT, (C.uint32_t)(id), (C.uint32_t)(type_), (C.uint32_t)(stride), (unsafe.Pointer)(addr))
}
func (gl *lib) VariantbvEXT(id uint32, addr *int8) {
	C.gllCall_glVariantbvEXT(gl.glVariantbvEXT, (C.uint32_t)(id), (*C.int8_t)(unsafe.Pointer(addr)))
}
func (gl *lib) VariantdvEXT(id uint32, addr *float64) {
	C.gllCall_glVariantdvEXT(gl.glVariantdvEXT, (C.uint32_t)(id), (*C.double)(unsafe.Pointer(addr)))
}
func (gl *lib) VariantfvEXT(id uint32, addr *float32) {
	C.gllCall_glVariantfvEXT(gl.glVariantfvEXT, (C.uint32_t)(id), (*C.float)(unsafe.Pointer(addr)))
}
func (gl *lib) VariantivEXT(id uint32, addr *int32) {
	C.gllCall_glVariantivEXT(gl.glVariantivEXT, (C.uint32_t)(id), (*C.int32_t)(unsafe.Pointer(addr)))
}
func (gl *lib) VariantsvEXT(id uint32, addr *int16) {
	C.gllCall_glVariantsvEXT(gl.glVariantsvEXT, (C.uint32_t)(id), (*C.int16_t)(unsafe.Pointer(addr)))
}
func (gl *lib) VariantubvEXT(id uint32, addr *uint8) {
	C.gllCall_glVariantubvEXT(gl.glVariantubvEXT, (C.uint32_t)(id), (*C.uint8_t)(unsafe.Pointer(addr)))
}
func (gl *lib) VariantuivEXT(id uint32, addr *uint32) {
	C.gllCall_glVariantuivEXT(gl.glVariantuivEXT, (C.uint32_t)(id), (*C.uint32_t)(unsafe.Pointer(addr)))
}
func (gl *lib) VariantusvEXT(id uint32, addr *uint16) {
	C.gllCall_glVariantusvEXT(gl.glVariantusvEXT, (C.uint32_t)(id), (*C.uint16_t)(unsafe.Pointer(addr)))
}
func (gl *lib) Vertex2bOES(x int8, y int8) {
	C.gllCall_glVertex2bOES(gl.glVertex2bOES, (C.int8_t)(x), (C.int8_t)(y))
}
func (gl *lib) Vertex2bvOES(coords *int8) {
	C.gllCall_glVertex2bvOES(gl.glVertex2bvOES, (*C.int8_t)(unsafe.Pointer(coords)))
}
func (gl *lib) Vertex2d(x float64, y float64) {
	C.gllCall_glVertex2d(gl.glVertex2d, (C.double)(x), (C.double)(y))
}
func (gl *lib) Vertex2dv(v *float64) {
	C.gllCall_glVertex2dv(gl.glVertex2dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex2f(x float32, y float32) {
	C.gllCall_glVertex2f(gl.glVertex2f, (C.float)(x), (C.float)(y))
}
func (gl *lib) Vertex2fv(v *float32) {
	C.gllCall_glVertex2fv(gl.glVertex2fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex2hNV(x uint16, y uint16) {
	C.gllCall_glVertex2hNV(gl.glVertex2hNV, (C.uint16_t)(x), (C.uint16_t)(y))
}
func (gl *lib) Vertex2hvNV(v *uint16) {
	C.gllCall_glVertex2hvNV(gl.glVertex2hvNV, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex2i(x int32, y int32) {
	C.gllCall_glVertex2i(gl.glVertex2i, (C.int32_t)(x), (C.int32_t)(y))
}
func (gl *lib) Vertex2iv(v *int32) {
	C.gllCall_glVertex2iv(gl.glVertex2iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex2s(x int16, y int16) {
	C.gllCall_glVertex2s(gl.glVertex2s, (C.int16_t)(x), (C.int16_t)(y))
}
func (gl *lib) Vertex2sv(v *int16) {
	C.gllCall_glVertex2sv(gl.glVertex2sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex2xOES(x int32) {
	C.gllCall_glVertex2xOES(gl.glVertex2xOES, (C.int32_t)(x))
}
func (gl *lib) Vertex2xvOES(coords *int32) {
	C.gllCall_glVertex2xvOES(gl.glVertex2xvOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) Vertex3bOES(x int8, y int8, z int8) {
	C.gllCall_glVertex3bOES(gl.glVertex3bOES, (C.int8_t)(x), (C.int8_t)(y), (C.int8_t)(z))
}
func (gl *lib) Vertex3bvOES(coords *int8) {
	C.gllCall_glVertex3bvOES(gl.glVertex3bvOES, (*C.int8_t)(unsafe.Pointer(coords)))
}
func (gl *lib) Vertex3d(x float64, y float64, z float64) {
	C.gllCall_glVertex3d(gl.glVertex3d, (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) Vertex3dv(v *float64) {
	C.gllCall_glVertex3dv(gl.glVertex3dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex3f(x float32, y float32, z float32) {
	C.gllCall_glVertex3f(gl.glVertex3f, (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) Vertex3fv(v *float32) {
	C.gllCall_glVertex3fv(gl.glVertex3fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex3hNV(x uint16, y uint16, z uint16) {
	C.gllCall_glVertex3hNV(gl.glVertex3hNV, (C.uint16_t)(x), (C.uint16_t)(y), (C.uint16_t)(z))
}
func (gl *lib) Vertex3hvNV(v *uint16) {
	C.gllCall_glVertex3hvNV(gl.glVertex3hvNV, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex3i(x int32, y int32, z int32) {
	C.gllCall_glVertex3i(gl.glVertex3i, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) Vertex3iv(v *int32) {
	C.gllCall_glVertex3iv(gl.glVertex3iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex3s(x int16, y int16, z int16) {
	C.gllCall_glVertex3s(gl.glVertex3s, (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z))
}
func (gl *lib) Vertex3sv(v *int16) {
	C.gllCall_glVertex3sv(gl.glVertex3sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex3xOES(x int32, y int32) {
	C.gllCall_glVertex3xOES(gl.glVertex3xOES, (C.int32_t)(x), (C.int32_t)(y))
}
func (gl *lib) Vertex3xvOES(coords *int32) {
	C.gllCall_glVertex3xvOES(gl.glVertex3xvOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) Vertex4bOES(x int8, y int8, z int8, w int8) {
	C.gllCall_glVertex4bOES(gl.glVertex4bOES, (C.int8_t)(x), (C.int8_t)(y), (C.int8_t)(z), (C.int8_t)(w))
}
func (gl *lib) Vertex4bvOES(coords *int8) {
	C.gllCall_glVertex4bvOES(gl.glVertex4bvOES, (*C.int8_t)(unsafe.Pointer(coords)))
}
func (gl *lib) Vertex4d(x float64, y float64, z float64, w float64) {
	C.gllCall_glVertex4d(gl.glVertex4d, (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) Vertex4dv(v *float64) {
	C.gllCall_glVertex4dv(gl.glVertex4dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex4f(x float32, y float32, z float32, w float32) {
	C.gllCall_glVertex4f(gl.glVertex4f, (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(w))
}
func (gl *lib) Vertex4fv(v *float32) {
	C.gllCall_glVertex4fv(gl.glVertex4fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex4hNV(x uint16, y uint16, z uint16, w uint16) {
	C.gllCall_glVertex4hNV(gl.glVertex4hNV, (C.uint16_t)(x), (C.uint16_t)(y), (C.uint16_t)(z), (C.uint16_t)(w))
}
func (gl *lib) Vertex4hvNV(v *uint16) {
	C.gllCall_glVertex4hvNV(gl.glVertex4hvNV, (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex4i(x int32, y int32, z int32, w int32) {
	C.gllCall_glVertex4i(gl.glVertex4i, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z), (C.int32_t)(w))
}
func (gl *lib) Vertex4iv(v *int32) {
	C.gllCall_glVertex4iv(gl.glVertex4iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex4s(x int16, y int16, z int16, w int16) {
	C.gllCall_glVertex4s(gl.glVertex4s, (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z), (C.int16_t)(w))
}
func (gl *lib) Vertex4sv(v *int16) {
	C.gllCall_glVertex4sv(gl.glVertex4sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) Vertex4xOES(x int32, y int32, z int32) {
	C.gllCall_glVertex4xOES(gl.glVertex4xOES, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) Vertex4xvOES(coords *int32) {
	C.gllCall_glVertex4xvOES(gl.glVertex4xvOES, (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexArrayAttribBinding(vaobj uint32, attribindex uint32, bindingindex uint32) {
	C.gllCall_glVertexArrayAttribBinding(gl.glVertexArrayAttribBinding, (C.uint32_t)(vaobj), (C.uint32_t)(attribindex), (C.uint32_t)(bindingindex))
}
func (gl *lib) VertexArrayAttribFormat(vaobj uint32, attribindex uint32, size int32, type_ uint32, normalized bool, relativeoffset uint32) {
	C.gllCall_glVertexArrayAttribFormat(gl.glVertexArrayAttribFormat, (C.uint32_t)(vaobj), (C.uint32_t)(attribindex), (C.int32_t)(size), (C.uint32_t)(type_), (C._Bool)(normalized), (C.uint32_t)(relativeoffset))
}
func (gl *lib) VertexArrayAttribIFormat(vaobj uint32, attribindex uint32, size int32, type_ uint32, relativeoffset uint32) {
	C.gllCall_glVertexArrayAttribIFormat(gl.glVertexArrayAttribIFormat, (C.uint32_t)(vaobj), (C.uint32_t)(attribindex), (C.int32_t)(size), (C.uint32_t)(type_), (C.uint32_t)(relativeoffset))
}
func (gl *lib) VertexArrayAttribLFormat(vaobj uint32, attribindex uint32, size int32, type_ uint32, relativeoffset uint32) {
	C.gllCall_glVertexArrayAttribLFormat(gl.glVertexArrayAttribLFormat, (C.uint32_t)(vaobj), (C.uint32_t)(attribindex), (C.int32_t)(size), (C.uint32_t)(type_), (C.uint32_t)(relativeoffset))
}
func (gl *lib) VertexArrayBindVertexBufferEXT(vaobj uint32, bindingindex uint32, buffer uint32, offset uintptr, stride int32) {
	C.gllCall_glVertexArrayBindVertexBufferEXT(gl.glVertexArrayBindVertexBufferEXT, (C.uint32_t)(vaobj), (C.uint32_t)(bindingindex), (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.int32_t)(stride))
}
func (gl *lib) VertexArrayBindingDivisor(vaobj uint32, bindingindex uint32, divisor uint32) {
	C.gllCall_glVertexArrayBindingDivisor(gl.glVertexArrayBindingDivisor, (C.uint32_t)(vaobj), (C.uint32_t)(bindingindex), (C.uint32_t)(divisor))
}
func (gl *lib) VertexArrayColorOffsetEXT(vaobj uint32, buffer uint32, size int32, type_ uint32, stride int32, offset uintptr) {
	C.gllCall_glVertexArrayColorOffsetEXT(gl.glVertexArrayColorOffsetEXT, (C.uint32_t)(vaobj), (C.uint32_t)(buffer), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (C.intptr_t)(offset))
}
func (gl *lib) VertexArrayEdgeFlagOffsetEXT(vaobj uint32, buffer uint32, stride int32, offset uintptr) {
	C.gllCall_glVertexArrayEdgeFlagOffsetEXT(gl.glVertexArrayEdgeFlagOffsetEXT, (C.uint32_t)(vaobj), (C.uint32_t)(buffer), (C.int32_t)(stride), (C.intptr_t)(offset))
}
func (gl *lib) VertexArrayElementBuffer(vaobj uint32, buffer uint32) {
	C.gllCall_glVertexArrayElementBuffer(gl.glVertexArrayElementBuffer, (C.uint32_t)(vaobj), (C.uint32_t)(buffer))
}
func (gl *lib) VertexArrayFogCoordOffsetEXT(vaobj uint32, buffer uint32, type_ uint32, stride int32, offset uintptr) {
	C.gllCall_glVertexArrayFogCoordOffsetEXT(gl.glVertexArrayFogCoordOffsetEXT, (C.uint32_t)(vaobj), (C.uint32_t)(buffer), (C.uint32_t)(type_), (C.int32_t)(stride), (C.intptr_t)(offset))
}
func (gl *lib) VertexArrayIndexOffsetEXT(vaobj uint32, buffer uint32, type_ uint32, stride int32, offset uintptr) {
	C.gllCall_glVertexArrayIndexOffsetEXT(gl.glVertexArrayIndexOffsetEXT, (C.uint32_t)(vaobj), (C.uint32_t)(buffer), (C.uint32_t)(type_), (C.int32_t)(stride), (C.intptr_t)(offset))
}
func (gl *lib) VertexArrayMultiTexCoordOffsetEXT(vaobj uint32, buffer uint32, texunit uint32, size int32, type_ uint32, stride int32, offset uintptr) {
	C.gllCall_glVertexArrayMultiTexCoordOffsetEXT(gl.glVertexArrayMultiTexCoordOffsetEXT, (C.uint32_t)(vaobj), (C.uint32_t)(buffer), (C.uint32_t)(texunit), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (C.intptr_t)(offset))
}
func (gl *lib) VertexArrayNormalOffsetEXT(vaobj uint32, buffer uint32, type_ uint32, stride int32, offset uintptr) {
	C.gllCall_glVertexArrayNormalOffsetEXT(gl.glVertexArrayNormalOffsetEXT, (C.uint32_t)(vaobj), (C.uint32_t)(buffer), (C.uint32_t)(type_), (C.int32_t)(stride), (C.intptr_t)(offset))
}
func (gl *lib) VertexArrayParameteriAPPLE(pname uint32, param int32) {
	C.gllCall_glVertexArrayParameteriAPPLE(gl.glVertexArrayParameteriAPPLE, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) VertexArrayRangeAPPLE(length int32, pointer unsafe.Pointer) {
	C.gllCall_glVertexArrayRangeAPPLE(gl.glVertexArrayRangeAPPLE, (C.int32_t)(length), (unsafe.Pointer)(pointer))
}
func (gl *lib) VertexArrayRangeNV(length int32, pointer unsafe.Pointer) {
	C.gllCall_glVertexArrayRangeNV(gl.glVertexArrayRangeNV, (C.int32_t)(length), (unsafe.Pointer)(pointer))
}
func (gl *lib) VertexArraySecondaryColorOffsetEXT(vaobj uint32, buffer uint32, size int32, type_ uint32, stride int32, offset uintptr) {
	C.gllCall_glVertexArraySecondaryColorOffsetEXT(gl.glVertexArraySecondaryColorOffsetEXT, (C.uint32_t)(vaobj), (C.uint32_t)(buffer), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (C.intptr_t)(offset))
}
func (gl *lib) VertexArrayTexCoordOffsetEXT(vaobj uint32, buffer uint32, size int32, type_ uint32, stride int32, offset uintptr) {
	C.gllCall_glVertexArrayTexCoordOffsetEXT(gl.glVertexArrayTexCoordOffsetEXT, (C.uint32_t)(vaobj), (C.uint32_t)(buffer), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (C.intptr_t)(offset))
}
func (gl *lib) VertexArrayVertexAttribBindingEXT(vaobj uint32, attribindex uint32, bindingindex uint32) {
	C.gllCall_glVertexArrayVertexAttribBindingEXT(gl.glVertexArrayVertexAttribBindingEXT, (C.uint32_t)(vaobj), (C.uint32_t)(attribindex), (C.uint32_t)(bindingindex))
}
func (gl *lib) VertexArrayVertexAttribDivisorEXT(vaobj uint32, index uint32, divisor uint32) {
	C.gllCall_glVertexArrayVertexAttribDivisorEXT(gl.glVertexArrayVertexAttribDivisorEXT, (C.uint32_t)(vaobj), (C.uint32_t)(index), (C.uint32_t)(divisor))
}
func (gl *lib) VertexArrayVertexAttribFormatEXT(vaobj uint32, attribindex uint32, size int32, type_ uint32, normalized bool, relativeoffset uint32) {
	C.gllCall_glVertexArrayVertexAttribFormatEXT(gl.glVertexArrayVertexAttribFormatEXT, (C.uint32_t)(vaobj), (C.uint32_t)(attribindex), (C.int32_t)(size), (C.uint32_t)(type_), (C._Bool)(normalized), (C.uint32_t)(relativeoffset))
}
func (gl *lib) VertexArrayVertexAttribIFormatEXT(vaobj uint32, attribindex uint32, size int32, type_ uint32, relativeoffset uint32) {
	C.gllCall_glVertexArrayVertexAttribIFormatEXT(gl.glVertexArrayVertexAttribIFormatEXT, (C.uint32_t)(vaobj), (C.uint32_t)(attribindex), (C.int32_t)(size), (C.uint32_t)(type_), (C.uint32_t)(relativeoffset))
}
func (gl *lib) VertexArrayVertexAttribIOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, type_ uint32, stride int32, offset uintptr) {
	C.gllCall_glVertexArrayVertexAttribIOffsetEXT(gl.glVertexArrayVertexAttribIOffsetEXT, (C.uint32_t)(vaobj), (C.uint32_t)(buffer), (C.uint32_t)(index), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (C.intptr_t)(offset))
}
func (gl *lib) VertexArrayVertexAttribLFormatEXT(vaobj uint32, attribindex uint32, size int32, type_ uint32, relativeoffset uint32) {
	C.gllCall_glVertexArrayVertexAttribLFormatEXT(gl.glVertexArrayVertexAttribLFormatEXT, (C.uint32_t)(vaobj), (C.uint32_t)(attribindex), (C.int32_t)(size), (C.uint32_t)(type_), (C.uint32_t)(relativeoffset))
}
func (gl *lib) VertexArrayVertexAttribLOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, type_ uint32, stride int32, offset uintptr) {
	C.gllCall_glVertexArrayVertexAttribLOffsetEXT(gl.glVertexArrayVertexAttribLOffsetEXT, (C.uint32_t)(vaobj), (C.uint32_t)(buffer), (C.uint32_t)(index), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (C.intptr_t)(offset))
}
func (gl *lib) VertexArrayVertexAttribOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, type_ uint32, normalized bool, stride int32, offset uintptr) {
	C.gllCall_glVertexArrayVertexAttribOffsetEXT(gl.glVertexArrayVertexAttribOffsetEXT, (C.uint32_t)(vaobj), (C.uint32_t)(buffer), (C.uint32_t)(index), (C.int32_t)(size), (C.uint32_t)(type_), (C._Bool)(normalized), (C.int32_t)(stride), (C.intptr_t)(offset))
}
func (gl *lib) VertexArrayVertexBindingDivisorEXT(vaobj uint32, bindingindex uint32, divisor uint32) {
	C.gllCall_glVertexArrayVertexBindingDivisorEXT(gl.glVertexArrayVertexBindingDivisorEXT, (C.uint32_t)(vaobj), (C.uint32_t)(bindingindex), (C.uint32_t)(divisor))
}
func (gl *lib) VertexArrayVertexBuffer(vaobj uint32, bindingindex uint32, buffer uint32, offset uintptr, stride int32) {
	C.gllCall_glVertexArrayVertexBuffer(gl.glVertexArrayVertexBuffer, (C.uint32_t)(vaobj), (C.uint32_t)(bindingindex), (C.uint32_t)(buffer), (C.intptr_t)(offset), (C.int32_t)(stride))
}
func (gl *lib) VertexArrayVertexBuffers(vaobj uint32, first uint32, count int32, buffers *uint32, offsets *uintptr, strides *int32) {
	C.gllCall_glVertexArrayVertexBuffers(gl.glVertexArrayVertexBuffers, (C.uint32_t)(vaobj), (C.uint32_t)(first), (C.int32_t)(count), (*C.uint32_t)(unsafe.Pointer(buffers)), (*C.intptr_t)(unsafe.Pointer(offsets)), (*C.int32_t)(unsafe.Pointer(strides)))
}
func (gl *lib) VertexArrayVertexOffsetEXT(vaobj uint32, buffer uint32, size int32, type_ uint32, stride int32, offset uintptr) {
	C.gllCall_glVertexArrayVertexOffsetEXT(gl.glVertexArrayVertexOffsetEXT, (C.uint32_t)(vaobj), (C.uint32_t)(buffer), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (C.intptr_t)(offset))
}
func (gl *lib) VertexAttrib1d(index uint32, x float64) {
	C.gllCall_glVertexAttrib1d(gl.glVertexAttrib1d, (C.uint32_t)(index), (C.double)(x))
}
func (gl *lib) VertexAttrib1dARB(index uint32, x float64) {
	C.gllCall_glVertexAttrib1dARB(gl.glVertexAttrib1dARB, (C.uint32_t)(index), (C.double)(x))
}
func (gl *lib) VertexAttrib1dNV(index uint32, x float64) {
	C.gllCall_glVertexAttrib1dNV(gl.glVertexAttrib1dNV, (C.uint32_t)(index), (C.double)(x))
}
func (gl *lib) VertexAttrib1dv(index uint32, v *float64) {
	C.gllCall_glVertexAttrib1dv(gl.glVertexAttrib1dv, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib1dvARB(index uint32, v *float64) {
	C.gllCall_glVertexAttrib1dvARB(gl.glVertexAttrib1dvARB, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib1dvNV(index uint32, v *float64) {
	C.gllCall_glVertexAttrib1dvNV(gl.glVertexAttrib1dvNV, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib1f(index uint32, x float32) {
	C.gllCall_glVertexAttrib1f(gl.glVertexAttrib1f, (C.uint32_t)(index), (C.float)(x))
}
func (gl *lib) VertexAttrib1fARB(index uint32, x float32) {
	C.gllCall_glVertexAttrib1fARB(gl.glVertexAttrib1fARB, (C.uint32_t)(index), (C.float)(x))
}
func (gl *lib) VertexAttrib1fNV(index uint32, x float32) {
	C.gllCall_glVertexAttrib1fNV(gl.glVertexAttrib1fNV, (C.uint32_t)(index), (C.float)(x))
}
func (gl *lib) VertexAttrib1fv(index uint32, v *float32) {
	C.gllCall_glVertexAttrib1fv(gl.glVertexAttrib1fv, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib1fvARB(index uint32, v *float32) {
	C.gllCall_glVertexAttrib1fvARB(gl.glVertexAttrib1fvARB, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib1fvNV(index uint32, v *float32) {
	C.gllCall_glVertexAttrib1fvNV(gl.glVertexAttrib1fvNV, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib1hNV(index uint32, x uint16) {
	C.gllCall_glVertexAttrib1hNV(gl.glVertexAttrib1hNV, (C.uint32_t)(index), (C.uint16_t)(x))
}
func (gl *lib) VertexAttrib1hvNV(index uint32, v *uint16) {
	C.gllCall_glVertexAttrib1hvNV(gl.glVertexAttrib1hvNV, (C.uint32_t)(index), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib1s(index uint32, x int16) {
	C.gllCall_glVertexAttrib1s(gl.glVertexAttrib1s, (C.uint32_t)(index), (C.int16_t)(x))
}
func (gl *lib) VertexAttrib1sARB(index uint32, x int16) {
	C.gllCall_glVertexAttrib1sARB(gl.glVertexAttrib1sARB, (C.uint32_t)(index), (C.int16_t)(x))
}
func (gl *lib) VertexAttrib1sNV(index uint32, x int16) {
	C.gllCall_glVertexAttrib1sNV(gl.glVertexAttrib1sNV, (C.uint32_t)(index), (C.int16_t)(x))
}
func (gl *lib) VertexAttrib1sv(index uint32, v *int16) {
	C.gllCall_glVertexAttrib1sv(gl.glVertexAttrib1sv, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib1svARB(index uint32, v *int16) {
	C.gllCall_glVertexAttrib1svARB(gl.glVertexAttrib1svARB, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib1svNV(index uint32, v *int16) {
	C.gllCall_glVertexAttrib1svNV(gl.glVertexAttrib1svNV, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib2d(index uint32, x float64, y float64) {
	C.gllCall_glVertexAttrib2d(gl.glVertexAttrib2d, (C.uint32_t)(index), (C.double)(x), (C.double)(y))
}
func (gl *lib) VertexAttrib2dARB(index uint32, x float64, y float64) {
	C.gllCall_glVertexAttrib2dARB(gl.glVertexAttrib2dARB, (C.uint32_t)(index), (C.double)(x), (C.double)(y))
}
func (gl *lib) VertexAttrib2dNV(index uint32, x float64, y float64) {
	C.gllCall_glVertexAttrib2dNV(gl.glVertexAttrib2dNV, (C.uint32_t)(index), (C.double)(x), (C.double)(y))
}
func (gl *lib) VertexAttrib2dv(index uint32, v *float64) {
	C.gllCall_glVertexAttrib2dv(gl.glVertexAttrib2dv, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib2dvARB(index uint32, v *float64) {
	C.gllCall_glVertexAttrib2dvARB(gl.glVertexAttrib2dvARB, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib2dvNV(index uint32, v *float64) {
	C.gllCall_glVertexAttrib2dvNV(gl.glVertexAttrib2dvNV, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib2f(index uint32, x float32, y float32) {
	C.gllCall_glVertexAttrib2f(gl.glVertexAttrib2f, (C.uint32_t)(index), (C.float)(x), (C.float)(y))
}
func (gl *lib) VertexAttrib2fARB(index uint32, x float32, y float32) {
	C.gllCall_glVertexAttrib2fARB(gl.glVertexAttrib2fARB, (C.uint32_t)(index), (C.float)(x), (C.float)(y))
}
func (gl *lib) VertexAttrib2fNV(index uint32, x float32, y float32) {
	C.gllCall_glVertexAttrib2fNV(gl.glVertexAttrib2fNV, (C.uint32_t)(index), (C.float)(x), (C.float)(y))
}
func (gl *lib) VertexAttrib2fv(index uint32, v *float32) {
	C.gllCall_glVertexAttrib2fv(gl.glVertexAttrib2fv, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib2fvARB(index uint32, v *float32) {
	C.gllCall_glVertexAttrib2fvARB(gl.glVertexAttrib2fvARB, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib2fvNV(index uint32, v *float32) {
	C.gllCall_glVertexAttrib2fvNV(gl.glVertexAttrib2fvNV, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib2hNV(index uint32, x uint16, y uint16) {
	C.gllCall_glVertexAttrib2hNV(gl.glVertexAttrib2hNV, (C.uint32_t)(index), (C.uint16_t)(x), (C.uint16_t)(y))
}
func (gl *lib) VertexAttrib2hvNV(index uint32, v *uint16) {
	C.gllCall_glVertexAttrib2hvNV(gl.glVertexAttrib2hvNV, (C.uint32_t)(index), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib2s(index uint32, x int16, y int16) {
	C.gllCall_glVertexAttrib2s(gl.glVertexAttrib2s, (C.uint32_t)(index), (C.int16_t)(x), (C.int16_t)(y))
}
func (gl *lib) VertexAttrib2sARB(index uint32, x int16, y int16) {
	C.gllCall_glVertexAttrib2sARB(gl.glVertexAttrib2sARB, (C.uint32_t)(index), (C.int16_t)(x), (C.int16_t)(y))
}
func (gl *lib) VertexAttrib2sNV(index uint32, x int16, y int16) {
	C.gllCall_glVertexAttrib2sNV(gl.glVertexAttrib2sNV, (C.uint32_t)(index), (C.int16_t)(x), (C.int16_t)(y))
}
func (gl *lib) VertexAttrib2sv(index uint32, v *int16) {
	C.gllCall_glVertexAttrib2sv(gl.glVertexAttrib2sv, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib2svARB(index uint32, v *int16) {
	C.gllCall_glVertexAttrib2svARB(gl.glVertexAttrib2svARB, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib2svNV(index uint32, v *int16) {
	C.gllCall_glVertexAttrib2svNV(gl.glVertexAttrib2svNV, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib3d(index uint32, x float64, y float64, z float64) {
	C.gllCall_glVertexAttrib3d(gl.glVertexAttrib3d, (C.uint32_t)(index), (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) VertexAttrib3dARB(index uint32, x float64, y float64, z float64) {
	C.gllCall_glVertexAttrib3dARB(gl.glVertexAttrib3dARB, (C.uint32_t)(index), (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) VertexAttrib3dNV(index uint32, x float64, y float64, z float64) {
	C.gllCall_glVertexAttrib3dNV(gl.glVertexAttrib3dNV, (C.uint32_t)(index), (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) VertexAttrib3dv(index uint32, v *float64) {
	C.gllCall_glVertexAttrib3dv(gl.glVertexAttrib3dv, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib3dvARB(index uint32, v *float64) {
	C.gllCall_glVertexAttrib3dvARB(gl.glVertexAttrib3dvARB, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib3dvNV(index uint32, v *float64) {
	C.gllCall_glVertexAttrib3dvNV(gl.glVertexAttrib3dvNV, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib3f(index uint32, x float32, y float32, z float32) {
	C.gllCall_glVertexAttrib3f(gl.glVertexAttrib3f, (C.uint32_t)(index), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) VertexAttrib3fARB(index uint32, x float32, y float32, z float32) {
	C.gllCall_glVertexAttrib3fARB(gl.glVertexAttrib3fARB, (C.uint32_t)(index), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) VertexAttrib3fNV(index uint32, x float32, y float32, z float32) {
	C.gllCall_glVertexAttrib3fNV(gl.glVertexAttrib3fNV, (C.uint32_t)(index), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) VertexAttrib3fv(index uint32, v *float32) {
	C.gllCall_glVertexAttrib3fv(gl.glVertexAttrib3fv, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib3fvARB(index uint32, v *float32) {
	C.gllCall_glVertexAttrib3fvARB(gl.glVertexAttrib3fvARB, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib3fvNV(index uint32, v *float32) {
	C.gllCall_glVertexAttrib3fvNV(gl.glVertexAttrib3fvNV, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib3hNV(index uint32, x uint16, y uint16, z uint16) {
	C.gllCall_glVertexAttrib3hNV(gl.glVertexAttrib3hNV, (C.uint32_t)(index), (C.uint16_t)(x), (C.uint16_t)(y), (C.uint16_t)(z))
}
func (gl *lib) VertexAttrib3hvNV(index uint32, v *uint16) {
	C.gllCall_glVertexAttrib3hvNV(gl.glVertexAttrib3hvNV, (C.uint32_t)(index), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib3s(index uint32, x int16, y int16, z int16) {
	C.gllCall_glVertexAttrib3s(gl.glVertexAttrib3s, (C.uint32_t)(index), (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z))
}
func (gl *lib) VertexAttrib3sARB(index uint32, x int16, y int16, z int16) {
	C.gllCall_glVertexAttrib3sARB(gl.glVertexAttrib3sARB, (C.uint32_t)(index), (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z))
}
func (gl *lib) VertexAttrib3sNV(index uint32, x int16, y int16, z int16) {
	C.gllCall_glVertexAttrib3sNV(gl.glVertexAttrib3sNV, (C.uint32_t)(index), (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z))
}
func (gl *lib) VertexAttrib3sv(index uint32, v *int16) {
	C.gllCall_glVertexAttrib3sv(gl.glVertexAttrib3sv, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib3svARB(index uint32, v *int16) {
	C.gllCall_glVertexAttrib3svARB(gl.glVertexAttrib3svARB, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib3svNV(index uint32, v *int16) {
	C.gllCall_glVertexAttrib3svNV(gl.glVertexAttrib3svNV, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4Nbv(index uint32, v *int8) {
	C.gllCall_glVertexAttrib4Nbv(gl.glVertexAttrib4Nbv, (C.uint32_t)(index), (*C.int8_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4NbvARB(index uint32, v *int8) {
	C.gllCall_glVertexAttrib4NbvARB(gl.glVertexAttrib4NbvARB, (C.uint32_t)(index), (*C.int8_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4Niv(index uint32, v *int32) {
	C.gllCall_glVertexAttrib4Niv(gl.glVertexAttrib4Niv, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4NivARB(index uint32, v *int32) {
	C.gllCall_glVertexAttrib4NivARB(gl.glVertexAttrib4NivARB, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4Nsv(index uint32, v *int16) {
	C.gllCall_glVertexAttrib4Nsv(gl.glVertexAttrib4Nsv, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4NsvARB(index uint32, v *int16) {
	C.gllCall_glVertexAttrib4NsvARB(gl.glVertexAttrib4NsvARB, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8) {
	C.gllCall_glVertexAttrib4Nub(gl.glVertexAttrib4Nub, (C.uint32_t)(index), (C.uint8_t)(x), (C.uint8_t)(y), (C.uint8_t)(z), (C.uint8_t)(w))
}
func (gl *lib) VertexAttrib4NubARB(index uint32, x uint8, y uint8, z uint8, w uint8) {
	C.gllCall_glVertexAttrib4NubARB(gl.glVertexAttrib4NubARB, (C.uint32_t)(index), (C.uint8_t)(x), (C.uint8_t)(y), (C.uint8_t)(z), (C.uint8_t)(w))
}
func (gl *lib) VertexAttrib4Nubv(index uint32, v *uint8) {
	C.gllCall_glVertexAttrib4Nubv(gl.glVertexAttrib4Nubv, (C.uint32_t)(index), (*C.uint8_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4NubvARB(index uint32, v *uint8) {
	C.gllCall_glVertexAttrib4NubvARB(gl.glVertexAttrib4NubvARB, (C.uint32_t)(index), (*C.uint8_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4Nuiv(index uint32, v *uint32) {
	C.gllCall_glVertexAttrib4Nuiv(gl.glVertexAttrib4Nuiv, (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4NuivARB(index uint32, v *uint32) {
	C.gllCall_glVertexAttrib4NuivARB(gl.glVertexAttrib4NuivARB, (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4Nusv(index uint32, v *uint16) {
	C.gllCall_glVertexAttrib4Nusv(gl.glVertexAttrib4Nusv, (C.uint32_t)(index), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4NusvARB(index uint32, v *uint16) {
	C.gllCall_glVertexAttrib4NusvARB(gl.glVertexAttrib4NusvARB, (C.uint32_t)(index), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4bv(index uint32, v *int8) {
	C.gllCall_glVertexAttrib4bv(gl.glVertexAttrib4bv, (C.uint32_t)(index), (*C.int8_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4bvARB(index uint32, v *int8) {
	C.gllCall_glVertexAttrib4bvARB(gl.glVertexAttrib4bvARB, (C.uint32_t)(index), (*C.int8_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64) {
	C.gllCall_glVertexAttrib4d(gl.glVertexAttrib4d, (C.uint32_t)(index), (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) VertexAttrib4dARB(index uint32, x float64, y float64, z float64, w float64) {
	C.gllCall_glVertexAttrib4dARB(gl.glVertexAttrib4dARB, (C.uint32_t)(index), (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) VertexAttrib4dNV(index uint32, x float64, y float64, z float64, w float64) {
	C.gllCall_glVertexAttrib4dNV(gl.glVertexAttrib4dNV, (C.uint32_t)(index), (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) VertexAttrib4dv(index uint32, v *float64) {
	C.gllCall_glVertexAttrib4dv(gl.glVertexAttrib4dv, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4dvARB(index uint32, v *float64) {
	C.gllCall_glVertexAttrib4dvARB(gl.glVertexAttrib4dvARB, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4dvNV(index uint32, v *float64) {
	C.gllCall_glVertexAttrib4dvNV(gl.glVertexAttrib4dvNV, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32) {
	C.gllCall_glVertexAttrib4f(gl.glVertexAttrib4f, (C.uint32_t)(index), (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(w))
}
func (gl *lib) VertexAttrib4fARB(index uint32, x float32, y float32, z float32, w float32) {
	C.gllCall_glVertexAttrib4fARB(gl.glVertexAttrib4fARB, (C.uint32_t)(index), (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(w))
}
func (gl *lib) VertexAttrib4fNV(index uint32, x float32, y float32, z float32, w float32) {
	C.gllCall_glVertexAttrib4fNV(gl.glVertexAttrib4fNV, (C.uint32_t)(index), (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(w))
}
func (gl *lib) VertexAttrib4fv(index uint32, v *float32) {
	C.gllCall_glVertexAttrib4fv(gl.glVertexAttrib4fv, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4fvARB(index uint32, v *float32) {
	C.gllCall_glVertexAttrib4fvARB(gl.glVertexAttrib4fvARB, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4fvNV(index uint32, v *float32) {
	C.gllCall_glVertexAttrib4fvNV(gl.glVertexAttrib4fvNV, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4hNV(index uint32, x uint16, y uint16, z uint16, w uint16) {
	C.gllCall_glVertexAttrib4hNV(gl.glVertexAttrib4hNV, (C.uint32_t)(index), (C.uint16_t)(x), (C.uint16_t)(y), (C.uint16_t)(z), (C.uint16_t)(w))
}
func (gl *lib) VertexAttrib4hvNV(index uint32, v *uint16) {
	C.gllCall_glVertexAttrib4hvNV(gl.glVertexAttrib4hvNV, (C.uint32_t)(index), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4iv(index uint32, v *int32) {
	C.gllCall_glVertexAttrib4iv(gl.glVertexAttrib4iv, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4ivARB(index uint32, v *int32) {
	C.gllCall_glVertexAttrib4ivARB(gl.glVertexAttrib4ivARB, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16) {
	C.gllCall_glVertexAttrib4s(gl.glVertexAttrib4s, (C.uint32_t)(index), (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z), (C.int16_t)(w))
}
func (gl *lib) VertexAttrib4sARB(index uint32, x int16, y int16, z int16, w int16) {
	C.gllCall_glVertexAttrib4sARB(gl.glVertexAttrib4sARB, (C.uint32_t)(index), (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z), (C.int16_t)(w))
}
func (gl *lib) VertexAttrib4sNV(index uint32, x int16, y int16, z int16, w int16) {
	C.gllCall_glVertexAttrib4sNV(gl.glVertexAttrib4sNV, (C.uint32_t)(index), (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z), (C.int16_t)(w))
}
func (gl *lib) VertexAttrib4sv(index uint32, v *int16) {
	C.gllCall_glVertexAttrib4sv(gl.glVertexAttrib4sv, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4svARB(index uint32, v *int16) {
	C.gllCall_glVertexAttrib4svARB(gl.glVertexAttrib4svARB, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4svNV(index uint32, v *int16) {
	C.gllCall_glVertexAttrib4svNV(gl.glVertexAttrib4svNV, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4ubNV(index uint32, x uint8, y uint8, z uint8, w uint8) {
	C.gllCall_glVertexAttrib4ubNV(gl.glVertexAttrib4ubNV, (C.uint32_t)(index), (C.uint8_t)(x), (C.uint8_t)(y), (C.uint8_t)(z), (C.uint8_t)(w))
}
func (gl *lib) VertexAttrib4ubv(index uint32, v *uint8) {
	C.gllCall_glVertexAttrib4ubv(gl.glVertexAttrib4ubv, (C.uint32_t)(index), (*C.uint8_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4ubvARB(index uint32, v *uint8) {
	C.gllCall_glVertexAttrib4ubvARB(gl.glVertexAttrib4ubvARB, (C.uint32_t)(index), (*C.uint8_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4ubvNV(index uint32, v *uint8) {
	C.gllCall_glVertexAttrib4ubvNV(gl.glVertexAttrib4ubvNV, (C.uint32_t)(index), (*C.uint8_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4uiv(index uint32, v *uint32) {
	C.gllCall_glVertexAttrib4uiv(gl.glVertexAttrib4uiv, (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4uivARB(index uint32, v *uint32) {
	C.gllCall_glVertexAttrib4uivARB(gl.glVertexAttrib4uivARB, (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4usv(index uint32, v *uint16) {
	C.gllCall_glVertexAttrib4usv(gl.glVertexAttrib4usv, (C.uint32_t)(index), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttrib4usvARB(index uint32, v *uint16) {
	C.gllCall_glVertexAttrib4usvARB(gl.glVertexAttrib4usvARB, (C.uint32_t)(index), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribArrayObjectATI(index uint32, size int32, type_ uint32, normalized bool, stride int32, buffer uint32, offset uint32) {
	C.gllCall_glVertexAttribArrayObjectATI(gl.glVertexAttribArrayObjectATI, (C.uint32_t)(index), (C.int32_t)(size), (C.uint32_t)(type_), (C._Bool)(normalized), (C.int32_t)(stride), (C.uint32_t)(buffer), (C.uint32_t)(offset))
}
func (gl *lib) VertexAttribBinding(attribindex uint32, bindingindex uint32) {
	C.gllCall_glVertexAttribBinding(gl.glVertexAttribBinding, (C.uint32_t)(attribindex), (C.uint32_t)(bindingindex))
}
func (gl *lib) VertexAttribDivisor(index uint32, divisor uint32) {
	C.gllCall_glVertexAttribDivisor(gl.glVertexAttribDivisor, (C.uint32_t)(index), (C.uint32_t)(divisor))
}
func (gl *lib) VertexAttribDivisorANGLE(index uint32, divisor uint32) {
	C.gllCall_glVertexAttribDivisorANGLE(gl.glVertexAttribDivisorANGLE, (C.uint32_t)(index), (C.uint32_t)(divisor))
}
func (gl *lib) VertexAttribDivisorARB(index uint32, divisor uint32) {
	C.gllCall_glVertexAttribDivisorARB(gl.glVertexAttribDivisorARB, (C.uint32_t)(index), (C.uint32_t)(divisor))
}
func (gl *lib) VertexAttribDivisorEXT(index uint32, divisor uint32) {
	C.gllCall_glVertexAttribDivisorEXT(gl.glVertexAttribDivisorEXT, (C.uint32_t)(index), (C.uint32_t)(divisor))
}
func (gl *lib) VertexAttribDivisorNV(index uint32, divisor uint32) {
	C.gllCall_glVertexAttribDivisorNV(gl.glVertexAttribDivisorNV, (C.uint32_t)(index), (C.uint32_t)(divisor))
}
func (gl *lib) VertexAttribFormat(attribindex uint32, size int32, type_ uint32, normalized bool, relativeoffset uint32) {
	C.gllCall_glVertexAttribFormat(gl.glVertexAttribFormat, (C.uint32_t)(attribindex), (C.int32_t)(size), (C.uint32_t)(type_), (C._Bool)(normalized), (C.uint32_t)(relativeoffset))
}
func (gl *lib) VertexAttribFormatNV(index uint32, size int32, type_ uint32, normalized bool, stride int32) {
	C.gllCall_glVertexAttribFormatNV(gl.glVertexAttribFormatNV, (C.uint32_t)(index), (C.int32_t)(size), (C.uint32_t)(type_), (C._Bool)(normalized), (C.int32_t)(stride))
}
func (gl *lib) VertexAttribI1i(index uint32, x int32) {
	C.gllCall_glVertexAttribI1i(gl.glVertexAttribI1i, (C.uint32_t)(index), (C.int32_t)(x))
}
func (gl *lib) VertexAttribI1iEXT(index uint32, x int32) {
	C.gllCall_glVertexAttribI1iEXT(gl.glVertexAttribI1iEXT, (C.uint32_t)(index), (C.int32_t)(x))
}
func (gl *lib) VertexAttribI1iv(index uint32, v *int32) {
	C.gllCall_glVertexAttribI1iv(gl.glVertexAttribI1iv, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI1ivEXT(index uint32, v *int32) {
	C.gllCall_glVertexAttribI1ivEXT(gl.glVertexAttribI1ivEXT, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI1ui(index uint32, x uint32) {
	C.gllCall_glVertexAttribI1ui(gl.glVertexAttribI1ui, (C.uint32_t)(index), (C.uint32_t)(x))
}
func (gl *lib) VertexAttribI1uiEXT(index uint32, x uint32) {
	C.gllCall_glVertexAttribI1uiEXT(gl.glVertexAttribI1uiEXT, (C.uint32_t)(index), (C.uint32_t)(x))
}
func (gl *lib) VertexAttribI1uiv(index uint32, v *uint32) {
	C.gllCall_glVertexAttribI1uiv(gl.glVertexAttribI1uiv, (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI1uivEXT(index uint32, v *uint32) {
	C.gllCall_glVertexAttribI1uivEXT(gl.glVertexAttribI1uivEXT, (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI2i(index uint32, x int32, y int32) {
	C.gllCall_glVertexAttribI2i(gl.glVertexAttribI2i, (C.uint32_t)(index), (C.int32_t)(x), (C.int32_t)(y))
}
func (gl *lib) VertexAttribI2iEXT(index uint32, x int32, y int32) {
	C.gllCall_glVertexAttribI2iEXT(gl.glVertexAttribI2iEXT, (C.uint32_t)(index), (C.int32_t)(x), (C.int32_t)(y))
}
func (gl *lib) VertexAttribI2iv(index uint32, v *int32) {
	C.gllCall_glVertexAttribI2iv(gl.glVertexAttribI2iv, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI2ivEXT(index uint32, v *int32) {
	C.gllCall_glVertexAttribI2ivEXT(gl.glVertexAttribI2ivEXT, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI2ui(index uint32, x uint32, y uint32) {
	C.gllCall_glVertexAttribI2ui(gl.glVertexAttribI2ui, (C.uint32_t)(index), (C.uint32_t)(x), (C.uint32_t)(y))
}
func (gl *lib) VertexAttribI2uiEXT(index uint32, x uint32, y uint32) {
	C.gllCall_glVertexAttribI2uiEXT(gl.glVertexAttribI2uiEXT, (C.uint32_t)(index), (C.uint32_t)(x), (C.uint32_t)(y))
}
func (gl *lib) VertexAttribI2uiv(index uint32, v *uint32) {
	C.gllCall_glVertexAttribI2uiv(gl.glVertexAttribI2uiv, (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI2uivEXT(index uint32, v *uint32) {
	C.gllCall_glVertexAttribI2uivEXT(gl.glVertexAttribI2uivEXT, (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI3i(index uint32, x int32, y int32, z int32) {
	C.gllCall_glVertexAttribI3i(gl.glVertexAttribI3i, (C.uint32_t)(index), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) VertexAttribI3iEXT(index uint32, x int32, y int32, z int32) {
	C.gllCall_glVertexAttribI3iEXT(gl.glVertexAttribI3iEXT, (C.uint32_t)(index), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) VertexAttribI3iv(index uint32, v *int32) {
	C.gllCall_glVertexAttribI3iv(gl.glVertexAttribI3iv, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI3ivEXT(index uint32, v *int32) {
	C.gllCall_glVertexAttribI3ivEXT(gl.glVertexAttribI3ivEXT, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32) {
	C.gllCall_glVertexAttribI3ui(gl.glVertexAttribI3ui, (C.uint32_t)(index), (C.uint32_t)(x), (C.uint32_t)(y), (C.uint32_t)(z))
}
func (gl *lib) VertexAttribI3uiEXT(index uint32, x uint32, y uint32, z uint32) {
	C.gllCall_glVertexAttribI3uiEXT(gl.glVertexAttribI3uiEXT, (C.uint32_t)(index), (C.uint32_t)(x), (C.uint32_t)(y), (C.uint32_t)(z))
}
func (gl *lib) VertexAttribI3uiv(index uint32, v *uint32) {
	C.gllCall_glVertexAttribI3uiv(gl.glVertexAttribI3uiv, (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI3uivEXT(index uint32, v *uint32) {
	C.gllCall_glVertexAttribI3uivEXT(gl.glVertexAttribI3uivEXT, (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI4bv(index uint32, v *int8) {
	C.gllCall_glVertexAttribI4bv(gl.glVertexAttribI4bv, (C.uint32_t)(index), (*C.int8_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI4bvEXT(index uint32, v *int8) {
	C.gllCall_glVertexAttribI4bvEXT(gl.glVertexAttribI4bvEXT, (C.uint32_t)(index), (*C.int8_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32) {
	C.gllCall_glVertexAttribI4i(gl.glVertexAttribI4i, (C.uint32_t)(index), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z), (C.int32_t)(w))
}
func (gl *lib) VertexAttribI4iEXT(index uint32, x int32, y int32, z int32, w int32) {
	C.gllCall_glVertexAttribI4iEXT(gl.glVertexAttribI4iEXT, (C.uint32_t)(index), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z), (C.int32_t)(w))
}
func (gl *lib) VertexAttribI4iv(index uint32, v *int32) {
	C.gllCall_glVertexAttribI4iv(gl.glVertexAttribI4iv, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI4ivEXT(index uint32, v *int32) {
	C.gllCall_glVertexAttribI4ivEXT(gl.glVertexAttribI4ivEXT, (C.uint32_t)(index), (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI4sv(index uint32, v *int16) {
	C.gllCall_glVertexAttribI4sv(gl.glVertexAttribI4sv, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI4svEXT(index uint32, v *int16) {
	C.gllCall_glVertexAttribI4svEXT(gl.glVertexAttribI4svEXT, (C.uint32_t)(index), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI4ubv(index uint32, v *uint8) {
	C.gllCall_glVertexAttribI4ubv(gl.glVertexAttribI4ubv, (C.uint32_t)(index), (*C.uint8_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI4ubvEXT(index uint32, v *uint8) {
	C.gllCall_glVertexAttribI4ubvEXT(gl.glVertexAttribI4ubvEXT, (C.uint32_t)(index), (*C.uint8_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32) {
	C.gllCall_glVertexAttribI4ui(gl.glVertexAttribI4ui, (C.uint32_t)(index), (C.uint32_t)(x), (C.uint32_t)(y), (C.uint32_t)(z), (C.uint32_t)(w))
}
func (gl *lib) VertexAttribI4uiEXT(index uint32, x uint32, y uint32, z uint32, w uint32) {
	C.gllCall_glVertexAttribI4uiEXT(gl.glVertexAttribI4uiEXT, (C.uint32_t)(index), (C.uint32_t)(x), (C.uint32_t)(y), (C.uint32_t)(z), (C.uint32_t)(w))
}
func (gl *lib) VertexAttribI4uiv(index uint32, v *uint32) {
	C.gllCall_glVertexAttribI4uiv(gl.glVertexAttribI4uiv, (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI4uivEXT(index uint32, v *uint32) {
	C.gllCall_glVertexAttribI4uivEXT(gl.glVertexAttribI4uivEXT, (C.uint32_t)(index), (*C.uint32_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI4usv(index uint32, v *uint16) {
	C.gllCall_glVertexAttribI4usv(gl.glVertexAttribI4usv, (C.uint32_t)(index), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribI4usvEXT(index uint32, v *uint16) {
	C.gllCall_glVertexAttribI4usvEXT(gl.glVertexAttribI4usvEXT, (C.uint32_t)(index), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribIFormat(attribindex uint32, size int32, type_ uint32, relativeoffset uint32) {
	C.gllCall_glVertexAttribIFormat(gl.glVertexAttribIFormat, (C.uint32_t)(attribindex), (C.int32_t)(size), (C.uint32_t)(type_), (C.uint32_t)(relativeoffset))
}
func (gl *lib) VertexAttribIFormatNV(index uint32, size int32, type_ uint32, stride int32) {
	C.gllCall_glVertexAttribIFormatNV(gl.glVertexAttribIFormatNV, (C.uint32_t)(index), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride))
}
func (gl *lib) VertexAttribIPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glVertexAttribIPointer(gl.glVertexAttribIPointer, (C.uint32_t)(index), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) VertexAttribIPointerEXT(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glVertexAttribIPointerEXT(gl.glVertexAttribIPointerEXT, (C.uint32_t)(index), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) VertexAttribL1d(index uint32, x float64) {
	C.gllCall_glVertexAttribL1d(gl.glVertexAttribL1d, (C.uint32_t)(index), (C.double)(x))
}
func (gl *lib) VertexAttribL1dEXT(index uint32, x float64) {
	C.gllCall_glVertexAttribL1dEXT(gl.glVertexAttribL1dEXT, (C.uint32_t)(index), (C.double)(x))
}
func (gl *lib) VertexAttribL1dv(index uint32, v *float64) {
	C.gllCall_glVertexAttribL1dv(gl.glVertexAttribL1dv, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL1dvEXT(index uint32, v *float64) {
	C.gllCall_glVertexAttribL1dvEXT(gl.glVertexAttribL1dvEXT, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL1i64NV(index uint32, x int64) {
	C.gllCall_glVertexAttribL1i64NV(gl.glVertexAttribL1i64NV, (C.uint32_t)(index), (C.int64_t)(x))
}
func (gl *lib) VertexAttribL1i64vNV(index uint32, v *int64) {
	C.gllCall_glVertexAttribL1i64vNV(gl.glVertexAttribL1i64vNV, (C.uint32_t)(index), (*C.int64_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL1ui64ARB(index uint32, x uint64) {
	C.gllCall_glVertexAttribL1ui64ARB(gl.glVertexAttribL1ui64ARB, (C.uint32_t)(index), (C.uint64_t)(x))
}
func (gl *lib) VertexAttribL1ui64NV(index uint32, x uint64) {
	C.gllCall_glVertexAttribL1ui64NV(gl.glVertexAttribL1ui64NV, (C.uint32_t)(index), (C.uint64_t)(x))
}
func (gl *lib) VertexAttribL1ui64vARB(index uint32, v *uint64) {
	C.gllCall_glVertexAttribL1ui64vARB(gl.glVertexAttribL1ui64vARB, (C.uint32_t)(index), (*C.uint64_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL1ui64vNV(index uint32, v *uint64) {
	C.gllCall_glVertexAttribL1ui64vNV(gl.glVertexAttribL1ui64vNV, (C.uint32_t)(index), (*C.uint64_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL2d(index uint32, x float64, y float64) {
	C.gllCall_glVertexAttribL2d(gl.glVertexAttribL2d, (C.uint32_t)(index), (C.double)(x), (C.double)(y))
}
func (gl *lib) VertexAttribL2dEXT(index uint32, x float64, y float64) {
	C.gllCall_glVertexAttribL2dEXT(gl.glVertexAttribL2dEXT, (C.uint32_t)(index), (C.double)(x), (C.double)(y))
}
func (gl *lib) VertexAttribL2dv(index uint32, v *float64) {
	C.gllCall_glVertexAttribL2dv(gl.glVertexAttribL2dv, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL2dvEXT(index uint32, v *float64) {
	C.gllCall_glVertexAttribL2dvEXT(gl.glVertexAttribL2dvEXT, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL2i64NV(index uint32, x int64, y int64) {
	C.gllCall_glVertexAttribL2i64NV(gl.glVertexAttribL2i64NV, (C.uint32_t)(index), (C.int64_t)(x), (C.int64_t)(y))
}
func (gl *lib) VertexAttribL2i64vNV(index uint32, v *int64) {
	C.gllCall_glVertexAttribL2i64vNV(gl.glVertexAttribL2i64vNV, (C.uint32_t)(index), (*C.int64_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL2ui64NV(index uint32, x uint64, y uint64) {
	C.gllCall_glVertexAttribL2ui64NV(gl.glVertexAttribL2ui64NV, (C.uint32_t)(index), (C.uint64_t)(x), (C.uint64_t)(y))
}
func (gl *lib) VertexAttribL2ui64vNV(index uint32, v *uint64) {
	C.gllCall_glVertexAttribL2ui64vNV(gl.glVertexAttribL2ui64vNV, (C.uint32_t)(index), (*C.uint64_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL3d(index uint32, x float64, y float64, z float64) {
	C.gllCall_glVertexAttribL3d(gl.glVertexAttribL3d, (C.uint32_t)(index), (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) VertexAttribL3dEXT(index uint32, x float64, y float64, z float64) {
	C.gllCall_glVertexAttribL3dEXT(gl.glVertexAttribL3dEXT, (C.uint32_t)(index), (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) VertexAttribL3dv(index uint32, v *float64) {
	C.gllCall_glVertexAttribL3dv(gl.glVertexAttribL3dv, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL3dvEXT(index uint32, v *float64) {
	C.gllCall_glVertexAttribL3dvEXT(gl.glVertexAttribL3dvEXT, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL3i64NV(index uint32, x int64, y int64, z int64) {
	C.gllCall_glVertexAttribL3i64NV(gl.glVertexAttribL3i64NV, (C.uint32_t)(index), (C.int64_t)(x), (C.int64_t)(y), (C.int64_t)(z))
}
func (gl *lib) VertexAttribL3i64vNV(index uint32, v *int64) {
	C.gllCall_glVertexAttribL3i64vNV(gl.glVertexAttribL3i64vNV, (C.uint32_t)(index), (*C.int64_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL3ui64NV(index uint32, x uint64, y uint64, z uint64) {
	C.gllCall_glVertexAttribL3ui64NV(gl.glVertexAttribL3ui64NV, (C.uint32_t)(index), (C.uint64_t)(x), (C.uint64_t)(y), (C.uint64_t)(z))
}
func (gl *lib) VertexAttribL3ui64vNV(index uint32, v *uint64) {
	C.gllCall_glVertexAttribL3ui64vNV(gl.glVertexAttribL3ui64vNV, (C.uint32_t)(index), (*C.uint64_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL4d(index uint32, x float64, y float64, z float64, w float64) {
	C.gllCall_glVertexAttribL4d(gl.glVertexAttribL4d, (C.uint32_t)(index), (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) VertexAttribL4dEXT(index uint32, x float64, y float64, z float64, w float64) {
	C.gllCall_glVertexAttribL4dEXT(gl.glVertexAttribL4dEXT, (C.uint32_t)(index), (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) VertexAttribL4dv(index uint32, v *float64) {
	C.gllCall_glVertexAttribL4dv(gl.glVertexAttribL4dv, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL4dvEXT(index uint32, v *float64) {
	C.gllCall_glVertexAttribL4dvEXT(gl.glVertexAttribL4dvEXT, (C.uint32_t)(index), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL4i64NV(index uint32, x int64, y int64, z int64, w int64) {
	C.gllCall_glVertexAttribL4i64NV(gl.glVertexAttribL4i64NV, (C.uint32_t)(index), (C.int64_t)(x), (C.int64_t)(y), (C.int64_t)(z), (C.int64_t)(w))
}
func (gl *lib) VertexAttribL4i64vNV(index uint32, v *int64) {
	C.gllCall_glVertexAttribL4i64vNV(gl.glVertexAttribL4i64vNV, (C.uint32_t)(index), (*C.int64_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribL4ui64NV(index uint32, x uint64, y uint64, z uint64, w uint64) {
	C.gllCall_glVertexAttribL4ui64NV(gl.glVertexAttribL4ui64NV, (C.uint32_t)(index), (C.uint64_t)(x), (C.uint64_t)(y), (C.uint64_t)(z), (C.uint64_t)(w))
}
func (gl *lib) VertexAttribL4ui64vNV(index uint32, v *uint64) {
	C.gllCall_glVertexAttribL4ui64vNV(gl.glVertexAttribL4ui64vNV, (C.uint32_t)(index), (*C.uint64_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribLFormat(attribindex uint32, size int32, type_ uint32, relativeoffset uint32) {
	C.gllCall_glVertexAttribLFormat(gl.glVertexAttribLFormat, (C.uint32_t)(attribindex), (C.int32_t)(size), (C.uint32_t)(type_), (C.uint32_t)(relativeoffset))
}
func (gl *lib) VertexAttribLFormatNV(index uint32, size int32, type_ uint32, stride int32) {
	C.gllCall_glVertexAttribLFormatNV(gl.glVertexAttribLFormatNV, (C.uint32_t)(index), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride))
}
func (gl *lib) VertexAttribLPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glVertexAttribLPointer(gl.glVertexAttribLPointer, (C.uint32_t)(index), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) VertexAttribLPointerEXT(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glVertexAttribLPointerEXT(gl.glVertexAttribLPointerEXT, (C.uint32_t)(index), (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) VertexAttribP1ui(index uint32, type_ uint32, normalized bool, value uint32) {
	C.gllCall_glVertexAttribP1ui(gl.glVertexAttribP1ui, (C.uint32_t)(index), (C.uint32_t)(type_), (C._Bool)(normalized), (C.uint32_t)(value))
}
func (gl *lib) VertexAttribP1uiv(index uint32, type_ uint32, normalized bool, value *uint32) {
	C.gllCall_glVertexAttribP1uiv(gl.glVertexAttribP1uiv, (C.uint32_t)(index), (C.uint32_t)(type_), (C._Bool)(normalized), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) VertexAttribP2ui(index uint32, type_ uint32, normalized bool, value uint32) {
	C.gllCall_glVertexAttribP2ui(gl.glVertexAttribP2ui, (C.uint32_t)(index), (C.uint32_t)(type_), (C._Bool)(normalized), (C.uint32_t)(value))
}
func (gl *lib) VertexAttribP2uiv(index uint32, type_ uint32, normalized bool, value *uint32) {
	C.gllCall_glVertexAttribP2uiv(gl.glVertexAttribP2uiv, (C.uint32_t)(index), (C.uint32_t)(type_), (C._Bool)(normalized), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) VertexAttribP3ui(index uint32, type_ uint32, normalized bool, value uint32) {
	C.gllCall_glVertexAttribP3ui(gl.glVertexAttribP3ui, (C.uint32_t)(index), (C.uint32_t)(type_), (C._Bool)(normalized), (C.uint32_t)(value))
}
func (gl *lib) VertexAttribP3uiv(index uint32, type_ uint32, normalized bool, value *uint32) {
	C.gllCall_glVertexAttribP3uiv(gl.glVertexAttribP3uiv, (C.uint32_t)(index), (C.uint32_t)(type_), (C._Bool)(normalized), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) VertexAttribP4ui(index uint32, type_ uint32, normalized bool, value uint32) {
	C.gllCall_glVertexAttribP4ui(gl.glVertexAttribP4ui, (C.uint32_t)(index), (C.uint32_t)(type_), (C._Bool)(normalized), (C.uint32_t)(value))
}
func (gl *lib) VertexAttribP4uiv(index uint32, type_ uint32, normalized bool, value *uint32) {
	C.gllCall_glVertexAttribP4uiv(gl.glVertexAttribP4uiv, (C.uint32_t)(index), (C.uint32_t)(type_), (C._Bool)(normalized), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) VertexAttribParameteriAMD(index uint32, pname uint32, param int32) {
	C.gllCall_glVertexAttribParameteriAMD(gl.glVertexAttribParameteriAMD, (C.uint32_t)(index), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) VertexAttribPointer(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glVertexAttribPointer(gl.glVertexAttribPointer, (C.uint32_t)(index), (C.int32_t)(size), (C.uint32_t)(type_), (C._Bool)(normalized), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) VertexAttribPointerARB(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glVertexAttribPointerARB(gl.glVertexAttribPointerARB, (C.uint32_t)(index), (C.int32_t)(size), (C.uint32_t)(type_), (C._Bool)(normalized), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) VertexAttribPointerNV(index uint32, fsize int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glVertexAttribPointerNV(gl.glVertexAttribPointerNV, (C.uint32_t)(index), (C.int32_t)(fsize), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) VertexAttribs1dvNV(index uint32, count int32, v *float64) {
	C.gllCall_glVertexAttribs1dvNV(gl.glVertexAttribs1dvNV, (C.uint32_t)(index), (C.int32_t)(count), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs1fvNV(index uint32, count int32, v *float32) {
	C.gllCall_glVertexAttribs1fvNV(gl.glVertexAttribs1fvNV, (C.uint32_t)(index), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs1hvNV(index uint32, n int32, v *uint16) {
	C.gllCall_glVertexAttribs1hvNV(gl.glVertexAttribs1hvNV, (C.uint32_t)(index), (C.int32_t)(n), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs1svNV(index uint32, count int32, v *int16) {
	C.gllCall_glVertexAttribs1svNV(gl.glVertexAttribs1svNV, (C.uint32_t)(index), (C.int32_t)(count), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs2dvNV(index uint32, count int32, v *float64) {
	C.gllCall_glVertexAttribs2dvNV(gl.glVertexAttribs2dvNV, (C.uint32_t)(index), (C.int32_t)(count), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs2fvNV(index uint32, count int32, v *float32) {
	C.gllCall_glVertexAttribs2fvNV(gl.glVertexAttribs2fvNV, (C.uint32_t)(index), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs2hvNV(index uint32, n int32, v *uint16) {
	C.gllCall_glVertexAttribs2hvNV(gl.glVertexAttribs2hvNV, (C.uint32_t)(index), (C.int32_t)(n), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs2svNV(index uint32, count int32, v *int16) {
	C.gllCall_glVertexAttribs2svNV(gl.glVertexAttribs2svNV, (C.uint32_t)(index), (C.int32_t)(count), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs3dvNV(index uint32, count int32, v *float64) {
	C.gllCall_glVertexAttribs3dvNV(gl.glVertexAttribs3dvNV, (C.uint32_t)(index), (C.int32_t)(count), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs3fvNV(index uint32, count int32, v *float32) {
	C.gllCall_glVertexAttribs3fvNV(gl.glVertexAttribs3fvNV, (C.uint32_t)(index), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs3hvNV(index uint32, n int32, v *uint16) {
	C.gllCall_glVertexAttribs3hvNV(gl.glVertexAttribs3hvNV, (C.uint32_t)(index), (C.int32_t)(n), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs3svNV(index uint32, count int32, v *int16) {
	C.gllCall_glVertexAttribs3svNV(gl.glVertexAttribs3svNV, (C.uint32_t)(index), (C.int32_t)(count), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs4dvNV(index uint32, count int32, v *float64) {
	C.gllCall_glVertexAttribs4dvNV(gl.glVertexAttribs4dvNV, (C.uint32_t)(index), (C.int32_t)(count), (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs4fvNV(index uint32, count int32, v *float32) {
	C.gllCall_glVertexAttribs4fvNV(gl.glVertexAttribs4fvNV, (C.uint32_t)(index), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs4hvNV(index uint32, n int32, v *uint16) {
	C.gllCall_glVertexAttribs4hvNV(gl.glVertexAttribs4hvNV, (C.uint32_t)(index), (C.int32_t)(n), (*C.uint16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs4svNV(index uint32, count int32, v *int16) {
	C.gllCall_glVertexAttribs4svNV(gl.glVertexAttribs4svNV, (C.uint32_t)(index), (C.int32_t)(count), (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexAttribs4ubvNV(index uint32, count int32, v *uint8) {
	C.gllCall_glVertexAttribs4ubvNV(gl.glVertexAttribs4ubvNV, (C.uint32_t)(index), (C.int32_t)(count), (*C.uint8_t)(unsafe.Pointer(v)))
}
func (gl *lib) VertexBindingDivisor(bindingindex uint32, divisor uint32) {
	C.gllCall_glVertexBindingDivisor(gl.glVertexBindingDivisor, (C.uint32_t)(bindingindex), (C.uint32_t)(divisor))
}
func (gl *lib) VertexBlendARB(count int32) {
	C.gllCall_glVertexBlendARB(gl.glVertexBlendARB, (C.int32_t)(count))
}
func (gl *lib) VertexBlendEnvfATI(pname uint32, param float32) {
	C.gllCall_glVertexBlendEnvfATI(gl.glVertexBlendEnvfATI, (C.uint32_t)(pname), (C.float)(param))
}
func (gl *lib) VertexBlendEnviATI(pname uint32, param int32) {
	C.gllCall_glVertexBlendEnviATI(gl.glVertexBlendEnviATI, (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) VertexFormatNV(size int32, type_ uint32, stride int32) {
	C.gllCall_glVertexFormatNV(gl.glVertexFormatNV, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride))
}
func (gl *lib) VertexP2ui(type_ uint32, value uint32) {
	C.gllCall_glVertexP2ui(gl.glVertexP2ui, (C.uint32_t)(type_), (C.uint32_t)(value))
}
func (gl *lib) VertexP2uiv(type_ uint32, value *uint32) {
	C.gllCall_glVertexP2uiv(gl.glVertexP2uiv, (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) VertexP3ui(type_ uint32, value uint32) {
	C.gllCall_glVertexP3ui(gl.glVertexP3ui, (C.uint32_t)(type_), (C.uint32_t)(value))
}
func (gl *lib) VertexP3uiv(type_ uint32, value *uint32) {
	C.gllCall_glVertexP3uiv(gl.glVertexP3uiv, (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) VertexP4ui(type_ uint32, value uint32) {
	C.gllCall_glVertexP4ui(gl.glVertexP4ui, (C.uint32_t)(type_), (C.uint32_t)(value))
}
func (gl *lib) VertexP4uiv(type_ uint32, value *uint32) {
	C.gllCall_glVertexP4uiv(gl.glVertexP4uiv, (C.uint32_t)(type_), (*C.uint32_t)(unsafe.Pointer(value)))
}
func (gl *lib) VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glVertexPointer(gl.glVertexPointer, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) VertexPointerEXT(size int32, type_ uint32, stride int32, count int32, pointer unsafe.Pointer) {
	C.gllCall_glVertexPointerEXT(gl.glVertexPointerEXT, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (C.int32_t)(count), (unsafe.Pointer)(pointer))
}
func (gl *lib) VertexPointerListIBM(size int32, type_ uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
	C.gllCall_glVertexPointerListIBM(gl.glVertexPointerListIBM, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (*unsafe.Pointer)(unsafe.Pointer(pointer)), (C.int32_t)(ptrstride))
}
func (gl *lib) VertexPointervINTEL(size int32, type_ uint32, pointer *unsafe.Pointer) {
	C.gllCall_glVertexPointervINTEL(gl.glVertexPointervINTEL, (C.int32_t)(size), (C.uint32_t)(type_), (*unsafe.Pointer)(unsafe.Pointer(pointer)))
}
func (gl *lib) VertexStream1dATI(stream uint32, x float64) {
	C.gllCall_glVertexStream1dATI(gl.glVertexStream1dATI, (C.uint32_t)(stream), (C.double)(x))
}
func (gl *lib) VertexStream1dvATI(stream uint32, coords *float64) {
	C.gllCall_glVertexStream1dvATI(gl.glVertexStream1dvATI, (C.uint32_t)(stream), (*C.double)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream1fATI(stream uint32, x float32) {
	C.gllCall_glVertexStream1fATI(gl.glVertexStream1fATI, (C.uint32_t)(stream), (C.float)(x))
}
func (gl *lib) VertexStream1fvATI(stream uint32, coords *float32) {
	C.gllCall_glVertexStream1fvATI(gl.glVertexStream1fvATI, (C.uint32_t)(stream), (*C.float)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream1iATI(stream uint32, x int32) {
	C.gllCall_glVertexStream1iATI(gl.glVertexStream1iATI, (C.uint32_t)(stream), (C.int32_t)(x))
}
func (gl *lib) VertexStream1ivATI(stream uint32, coords *int32) {
	C.gllCall_glVertexStream1ivATI(gl.glVertexStream1ivATI, (C.uint32_t)(stream), (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream1sATI(stream uint32, x int16) {
	C.gllCall_glVertexStream1sATI(gl.glVertexStream1sATI, (C.uint32_t)(stream), (C.int16_t)(x))
}
func (gl *lib) VertexStream1svATI(stream uint32, coords *int16) {
	C.gllCall_glVertexStream1svATI(gl.glVertexStream1svATI, (C.uint32_t)(stream), (*C.int16_t)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream2dATI(stream uint32, x float64, y float64) {
	C.gllCall_glVertexStream2dATI(gl.glVertexStream2dATI, (C.uint32_t)(stream), (C.double)(x), (C.double)(y))
}
func (gl *lib) VertexStream2dvATI(stream uint32, coords *float64) {
	C.gllCall_glVertexStream2dvATI(gl.glVertexStream2dvATI, (C.uint32_t)(stream), (*C.double)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream2fATI(stream uint32, x float32, y float32) {
	C.gllCall_glVertexStream2fATI(gl.glVertexStream2fATI, (C.uint32_t)(stream), (C.float)(x), (C.float)(y))
}
func (gl *lib) VertexStream2fvATI(stream uint32, coords *float32) {
	C.gllCall_glVertexStream2fvATI(gl.glVertexStream2fvATI, (C.uint32_t)(stream), (*C.float)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream2iATI(stream uint32, x int32, y int32) {
	C.gllCall_glVertexStream2iATI(gl.glVertexStream2iATI, (C.uint32_t)(stream), (C.int32_t)(x), (C.int32_t)(y))
}
func (gl *lib) VertexStream2ivATI(stream uint32, coords *int32) {
	C.gllCall_glVertexStream2ivATI(gl.glVertexStream2ivATI, (C.uint32_t)(stream), (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream2sATI(stream uint32, x int16, y int16) {
	C.gllCall_glVertexStream2sATI(gl.glVertexStream2sATI, (C.uint32_t)(stream), (C.int16_t)(x), (C.int16_t)(y))
}
func (gl *lib) VertexStream2svATI(stream uint32, coords *int16) {
	C.gllCall_glVertexStream2svATI(gl.glVertexStream2svATI, (C.uint32_t)(stream), (*C.int16_t)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream3dATI(stream uint32, x float64, y float64, z float64) {
	C.gllCall_glVertexStream3dATI(gl.glVertexStream3dATI, (C.uint32_t)(stream), (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) VertexStream3dvATI(stream uint32, coords *float64) {
	C.gllCall_glVertexStream3dvATI(gl.glVertexStream3dvATI, (C.uint32_t)(stream), (*C.double)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream3fATI(stream uint32, x float32, y float32, z float32) {
	C.gllCall_glVertexStream3fATI(gl.glVertexStream3fATI, (C.uint32_t)(stream), (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) VertexStream3fvATI(stream uint32, coords *float32) {
	C.gllCall_glVertexStream3fvATI(gl.glVertexStream3fvATI, (C.uint32_t)(stream), (*C.float)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream3iATI(stream uint32, x int32, y int32, z int32) {
	C.gllCall_glVertexStream3iATI(gl.glVertexStream3iATI, (C.uint32_t)(stream), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) VertexStream3ivATI(stream uint32, coords *int32) {
	C.gllCall_glVertexStream3ivATI(gl.glVertexStream3ivATI, (C.uint32_t)(stream), (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream3sATI(stream uint32, x int16, y int16, z int16) {
	C.gllCall_glVertexStream3sATI(gl.glVertexStream3sATI, (C.uint32_t)(stream), (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z))
}
func (gl *lib) VertexStream3svATI(stream uint32, coords *int16) {
	C.gllCall_glVertexStream3svATI(gl.glVertexStream3svATI, (C.uint32_t)(stream), (*C.int16_t)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream4dATI(stream uint32, x float64, y float64, z float64, w float64) {
	C.gllCall_glVertexStream4dATI(gl.glVertexStream4dATI, (C.uint32_t)(stream), (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) VertexStream4dvATI(stream uint32, coords *float64) {
	C.gllCall_glVertexStream4dvATI(gl.glVertexStream4dvATI, (C.uint32_t)(stream), (*C.double)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream4fATI(stream uint32, x float32, y float32, z float32, w float32) {
	C.gllCall_glVertexStream4fATI(gl.glVertexStream4fATI, (C.uint32_t)(stream), (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(w))
}
func (gl *lib) VertexStream4fvATI(stream uint32, coords *float32) {
	C.gllCall_glVertexStream4fvATI(gl.glVertexStream4fvATI, (C.uint32_t)(stream), (*C.float)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream4iATI(stream uint32, x int32, y int32, z int32, w int32) {
	C.gllCall_glVertexStream4iATI(gl.glVertexStream4iATI, (C.uint32_t)(stream), (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z), (C.int32_t)(w))
}
func (gl *lib) VertexStream4ivATI(stream uint32, coords *int32) {
	C.gllCall_glVertexStream4ivATI(gl.glVertexStream4ivATI, (C.uint32_t)(stream), (*C.int32_t)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexStream4sATI(stream uint32, x int16, y int16, z int16, w int16) {
	C.gllCall_glVertexStream4sATI(gl.glVertexStream4sATI, (C.uint32_t)(stream), (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z), (C.int16_t)(w))
}
func (gl *lib) VertexStream4svATI(stream uint32, coords *int16) {
	C.gllCall_glVertexStream4svATI(gl.glVertexStream4svATI, (C.uint32_t)(stream), (*C.int16_t)(unsafe.Pointer(coords)))
}
func (gl *lib) VertexWeightPointerEXT(size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glVertexWeightPointerEXT(gl.glVertexWeightPointerEXT, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) VertexWeightfEXT(weight float32) {
	C.gllCall_glVertexWeightfEXT(gl.glVertexWeightfEXT, (C.float)(weight))
}
func (gl *lib) VertexWeightfvEXT(weight *float32) {
	C.gllCall_glVertexWeightfvEXT(gl.glVertexWeightfvEXT, (*C.float)(unsafe.Pointer(weight)))
}
func (gl *lib) VertexWeighthNV(weight uint16) {
	C.gllCall_glVertexWeighthNV(gl.glVertexWeighthNV, (C.uint16_t)(weight))
}
func (gl *lib) VertexWeighthvNV(weight *uint16) {
	C.gllCall_glVertexWeighthvNV(gl.glVertexWeighthvNV, (*C.uint16_t)(unsafe.Pointer(weight)))
}
func (gl *lib) VideoCaptureNV(video_capture_slot uint32, sequence_num *uint32, capture_time *uint64) uint32 {
	return (uint32)(C.gllCall_glVideoCaptureNV(gl.glVideoCaptureNV, (C.uint32_t)(video_capture_slot), (*C.uint32_t)(unsafe.Pointer(sequence_num)), (*C.uint64_t)(unsafe.Pointer(capture_time))))
}
func (gl *lib) VideoCaptureStreamParameterdvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float64) {
	C.gllCall_glVideoCaptureStreamParameterdvNV(gl.glVideoCaptureStreamParameterdvNV, (C.uint32_t)(video_capture_slot), (C.uint32_t)(stream), (C.uint32_t)(pname), (*C.double)(unsafe.Pointer(params)))
}
func (gl *lib) VideoCaptureStreamParameterfvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float32) {
	C.gllCall_glVideoCaptureStreamParameterfvNV(gl.glVideoCaptureStreamParameterfvNV, (C.uint32_t)(video_capture_slot), (C.uint32_t)(stream), (C.uint32_t)(pname), (*C.float)(unsafe.Pointer(params)))
}
func (gl *lib) VideoCaptureStreamParameterivNV(video_capture_slot uint32, stream uint32, pname uint32, params *int32) {
	C.gllCall_glVideoCaptureStreamParameterivNV(gl.glVideoCaptureStreamParameterivNV, (C.uint32_t)(video_capture_slot), (C.uint32_t)(stream), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}
func (gl *lib) Viewport(x int32, y int32, width int32, height int32) {
	C.gllCall_glViewport(gl.glViewport, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(width), (C.int32_t)(height))
}
func (gl *lib) ViewportArrayv(first uint32, count int32, v *float32) {
	C.gllCall_glViewportArrayv(gl.glViewportArrayv, (C.uint32_t)(first), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ViewportArrayvNV(first uint32, count int32, v *float32) {
	C.gllCall_glViewportArrayvNV(gl.glViewportArrayvNV, (C.uint32_t)(first), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ViewportArrayvOES(first uint32, count int32, v *float32) {
	C.gllCall_glViewportArrayvOES(gl.glViewportArrayvOES, (C.uint32_t)(first), (C.int32_t)(count), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ViewportIndexedf(index uint32, x float32, y float32, w float32, h float32) {
	C.gllCall_glViewportIndexedf(gl.glViewportIndexedf, (C.uint32_t)(index), (C.float)(x), (C.float)(y), (C.float)(w), (C.float)(h))
}
func (gl *lib) ViewportIndexedfOES(index uint32, x float32, y float32, w float32, h float32) {
	C.gllCall_glViewportIndexedfOES(gl.glViewportIndexedfOES, (C.uint32_t)(index), (C.float)(x), (C.float)(y), (C.float)(w), (C.float)(h))
}
func (gl *lib) ViewportIndexedfNV(index uint32, x float32, y float32, w float32, h float32) {
	C.gllCall_glViewportIndexedfNV(gl.glViewportIndexedfNV, (C.uint32_t)(index), (C.float)(x), (C.float)(y), (C.float)(w), (C.float)(h))
}
func (gl *lib) ViewportIndexedfv(index uint32, v *float32) {
	C.gllCall_glViewportIndexedfv(gl.glViewportIndexedfv, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ViewportIndexedfvOES(index uint32, v *float32) {
	C.gllCall_glViewportIndexedfvOES(gl.glViewportIndexedfvOES, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ViewportIndexedfvNV(index uint32, v *float32) {
	C.gllCall_glViewportIndexedfvNV(gl.glViewportIndexedfvNV, (C.uint32_t)(index), (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) ViewportPositionWScaleNV(index uint32, xcoeff float32, ycoeff float32) {
	C.gllCall_glViewportPositionWScaleNV(gl.glViewportPositionWScaleNV, (C.uint32_t)(index), (C.float)(xcoeff), (C.float)(ycoeff))
}
func (gl *lib) ViewportSwizzleNV(index uint32, swizzlex uint32, swizzley uint32, swizzlez uint32, swizzlew uint32) {
	C.gllCall_glViewportSwizzleNV(gl.glViewportSwizzleNV, (C.uint32_t)(index), (C.uint32_t)(swizzlex), (C.uint32_t)(swizzley), (C.uint32_t)(swizzlez), (C.uint32_t)(swizzlew))
}
func (gl *lib) WaitSemaphoreEXT(semaphore uint32, numBufferBarriers uint32, buffers *uint32, numTextureBarriers uint32, textures *uint32, srcLayouts *uint32) {
	C.gllCall_glWaitSemaphoreEXT(gl.glWaitSemaphoreEXT, (C.uint32_t)(semaphore), (C.uint32_t)(numBufferBarriers), (*C.uint32_t)(unsafe.Pointer(buffers)), (C.uint32_t)(numTextureBarriers), (*C.uint32_t)(unsafe.Pointer(textures)), (*C.uint32_t)(unsafe.Pointer(srcLayouts)))
}
func (gl *lib) WaitSemaphoreui64NVX(waitGpu uint32, fenceObjectCount int32, semaphoreArray *uint32, fenceValueArray *uint64) {
	C.gllCall_glWaitSemaphoreui64NVX(gl.glWaitSemaphoreui64NVX, (C.uint32_t)(waitGpu), (C.int32_t)(fenceObjectCount), (*C.uint32_t)(unsafe.Pointer(semaphoreArray)), (*C.uint64_t)(unsafe.Pointer(fenceValueArray)))
}
func (gl *lib) WaitSync(sync GLsync, flags uint32, timeout uint64) {
	C.gllCall_glWaitSync(gl.glWaitSync, (C.GLsync)(sync), (C.uint32_t)(flags), (C.uint64_t)(timeout))
}
func (gl *lib) WaitSyncAPPLE(sync GLsync, flags uint32, timeout uint64) {
	C.gllCall_glWaitSyncAPPLE(gl.glWaitSyncAPPLE, (C.GLsync)(sync), (C.uint32_t)(flags), (C.uint64_t)(timeout))
}
func (gl *lib) WeightPathsNV(resultPath uint32, numPaths int32, paths *uint32, weights *float32) {
	C.gllCall_glWeightPathsNV(gl.glWeightPathsNV, (C.uint32_t)(resultPath), (C.int32_t)(numPaths), (*C.uint32_t)(unsafe.Pointer(paths)), (*C.float)(unsafe.Pointer(weights)))
}
func (gl *lib) WeightPointerARB(size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glWeightPointerARB(gl.glWeightPointerARB, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) WeightPointerOES(size int32, type_ uint32, stride int32, pointer unsafe.Pointer) {
	C.gllCall_glWeightPointerOES(gl.glWeightPointerOES, (C.int32_t)(size), (C.uint32_t)(type_), (C.int32_t)(stride), (unsafe.Pointer)(pointer))
}
func (gl *lib) WeightbvARB(size int32, weights *int8) {
	C.gllCall_glWeightbvARB(gl.glWeightbvARB, (C.int32_t)(size), (*C.int8_t)(unsafe.Pointer(weights)))
}
func (gl *lib) WeightdvARB(size int32, weights *float64) {
	C.gllCall_glWeightdvARB(gl.glWeightdvARB, (C.int32_t)(size), (*C.double)(unsafe.Pointer(weights)))
}
func (gl *lib) WeightfvARB(size int32, weights *float32) {
	C.gllCall_glWeightfvARB(gl.glWeightfvARB, (C.int32_t)(size), (*C.float)(unsafe.Pointer(weights)))
}
func (gl *lib) WeightivARB(size int32, weights *int32) {
	C.gllCall_glWeightivARB(gl.glWeightivARB, (C.int32_t)(size), (*C.int32_t)(unsafe.Pointer(weights)))
}
func (gl *lib) WeightsvARB(size int32, weights *int16) {
	C.gllCall_glWeightsvARB(gl.glWeightsvARB, (C.int32_t)(size), (*C.int16_t)(unsafe.Pointer(weights)))
}
func (gl *lib) WeightubvARB(size int32, weights *uint8) {
	C.gllCall_glWeightubvARB(gl.glWeightubvARB, (C.int32_t)(size), (*C.uint8_t)(unsafe.Pointer(weights)))
}
func (gl *lib) WeightuivARB(size int32, weights *uint32) {
	C.gllCall_glWeightuivARB(gl.glWeightuivARB, (C.int32_t)(size), (*C.uint32_t)(unsafe.Pointer(weights)))
}
func (gl *lib) WeightusvARB(size int32, weights *uint16) {
	C.gllCall_glWeightusvARB(gl.glWeightusvARB, (C.int32_t)(size), (*C.uint16_t)(unsafe.Pointer(weights)))
}
func (gl *lib) WindowPos2d(x float64, y float64) {
	C.gllCall_glWindowPos2d(gl.glWindowPos2d, (C.double)(x), (C.double)(y))
}
func (gl *lib) WindowPos2dARB(x float64, y float64) {
	C.gllCall_glWindowPos2dARB(gl.glWindowPos2dARB, (C.double)(x), (C.double)(y))
}
func (gl *lib) WindowPos2dMESA(x float64, y float64) {
	C.gllCall_glWindowPos2dMESA(gl.glWindowPos2dMESA, (C.double)(x), (C.double)(y))
}
func (gl *lib) WindowPos2dv(v *float64) {
	C.gllCall_glWindowPos2dv(gl.glWindowPos2dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos2dvARB(v *float64) {
	C.gllCall_glWindowPos2dvARB(gl.glWindowPos2dvARB, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos2dvMESA(v *float64) {
	C.gllCall_glWindowPos2dvMESA(gl.glWindowPos2dvMESA, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos2f(x float32, y float32) {
	C.gllCall_glWindowPos2f(gl.glWindowPos2f, (C.float)(x), (C.float)(y))
}
func (gl *lib) WindowPos2fARB(x float32, y float32) {
	C.gllCall_glWindowPos2fARB(gl.glWindowPos2fARB, (C.float)(x), (C.float)(y))
}
func (gl *lib) WindowPos2fMESA(x float32, y float32) {
	C.gllCall_glWindowPos2fMESA(gl.glWindowPos2fMESA, (C.float)(x), (C.float)(y))
}
func (gl *lib) WindowPos2fv(v *float32) {
	C.gllCall_glWindowPos2fv(gl.glWindowPos2fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos2fvARB(v *float32) {
	C.gllCall_glWindowPos2fvARB(gl.glWindowPos2fvARB, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos2fvMESA(v *float32) {
	C.gllCall_glWindowPos2fvMESA(gl.glWindowPos2fvMESA, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos2i(x int32, y int32) {
	C.gllCall_glWindowPos2i(gl.glWindowPos2i, (C.int32_t)(x), (C.int32_t)(y))
}
func (gl *lib) WindowPos2iARB(x int32, y int32) {
	C.gllCall_glWindowPos2iARB(gl.glWindowPos2iARB, (C.int32_t)(x), (C.int32_t)(y))
}
func (gl *lib) WindowPos2iMESA(x int32, y int32) {
	C.gllCall_glWindowPos2iMESA(gl.glWindowPos2iMESA, (C.int32_t)(x), (C.int32_t)(y))
}
func (gl *lib) WindowPos2iv(v *int32) {
	C.gllCall_glWindowPos2iv(gl.glWindowPos2iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos2ivARB(v *int32) {
	C.gllCall_glWindowPos2ivARB(gl.glWindowPos2ivARB, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos2ivMESA(v *int32) {
	C.gllCall_glWindowPos2ivMESA(gl.glWindowPos2ivMESA, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos2s(x int16, y int16) {
	C.gllCall_glWindowPos2s(gl.glWindowPos2s, (C.int16_t)(x), (C.int16_t)(y))
}
func (gl *lib) WindowPos2sARB(x int16, y int16) {
	C.gllCall_glWindowPos2sARB(gl.glWindowPos2sARB, (C.int16_t)(x), (C.int16_t)(y))
}
func (gl *lib) WindowPos2sMESA(x int16, y int16) {
	C.gllCall_glWindowPos2sMESA(gl.glWindowPos2sMESA, (C.int16_t)(x), (C.int16_t)(y))
}
func (gl *lib) WindowPos2sv(v *int16) {
	C.gllCall_glWindowPos2sv(gl.glWindowPos2sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos2svARB(v *int16) {
	C.gllCall_glWindowPos2svARB(gl.glWindowPos2svARB, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos2svMESA(v *int16) {
	C.gllCall_glWindowPos2svMESA(gl.glWindowPos2svMESA, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos3d(x float64, y float64, z float64) {
	C.gllCall_glWindowPos3d(gl.glWindowPos3d, (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) WindowPos3dARB(x float64, y float64, z float64) {
	C.gllCall_glWindowPos3dARB(gl.glWindowPos3dARB, (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) WindowPos3dMESA(x float64, y float64, z float64) {
	C.gllCall_glWindowPos3dMESA(gl.glWindowPos3dMESA, (C.double)(x), (C.double)(y), (C.double)(z))
}
func (gl *lib) WindowPos3dv(v *float64) {
	C.gllCall_glWindowPos3dv(gl.glWindowPos3dv, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos3dvARB(v *float64) {
	C.gllCall_glWindowPos3dvARB(gl.glWindowPos3dvARB, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos3dvMESA(v *float64) {
	C.gllCall_glWindowPos3dvMESA(gl.glWindowPos3dvMESA, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos3f(x float32, y float32, z float32) {
	C.gllCall_glWindowPos3f(gl.glWindowPos3f, (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) WindowPos3fARB(x float32, y float32, z float32) {
	C.gllCall_glWindowPos3fARB(gl.glWindowPos3fARB, (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) WindowPos3fMESA(x float32, y float32, z float32) {
	C.gllCall_glWindowPos3fMESA(gl.glWindowPos3fMESA, (C.float)(x), (C.float)(y), (C.float)(z))
}
func (gl *lib) WindowPos3fv(v *float32) {
	C.gllCall_glWindowPos3fv(gl.glWindowPos3fv, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos3fvARB(v *float32) {
	C.gllCall_glWindowPos3fvARB(gl.glWindowPos3fvARB, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos3fvMESA(v *float32) {
	C.gllCall_glWindowPos3fvMESA(gl.glWindowPos3fvMESA, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos3i(x int32, y int32, z int32) {
	C.gllCall_glWindowPos3i(gl.glWindowPos3i, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) WindowPos3iARB(x int32, y int32, z int32) {
	C.gllCall_glWindowPos3iARB(gl.glWindowPos3iARB, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) WindowPos3iMESA(x int32, y int32, z int32) {
	C.gllCall_glWindowPos3iMESA(gl.glWindowPos3iMESA, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z))
}
func (gl *lib) WindowPos3iv(v *int32) {
	C.gllCall_glWindowPos3iv(gl.glWindowPos3iv, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos3ivARB(v *int32) {
	C.gllCall_glWindowPos3ivARB(gl.glWindowPos3ivARB, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos3ivMESA(v *int32) {
	C.gllCall_glWindowPos3ivMESA(gl.glWindowPos3ivMESA, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos3s(x int16, y int16, z int16) {
	C.gllCall_glWindowPos3s(gl.glWindowPos3s, (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z))
}
func (gl *lib) WindowPos3sARB(x int16, y int16, z int16) {
	C.gllCall_glWindowPos3sARB(gl.glWindowPos3sARB, (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z))
}
func (gl *lib) WindowPos3sMESA(x int16, y int16, z int16) {
	C.gllCall_glWindowPos3sMESA(gl.glWindowPos3sMESA, (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z))
}
func (gl *lib) WindowPos3sv(v *int16) {
	C.gllCall_glWindowPos3sv(gl.glWindowPos3sv, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos3svARB(v *int16) {
	C.gllCall_glWindowPos3svARB(gl.glWindowPos3svARB, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos3svMESA(v *int16) {
	C.gllCall_glWindowPos3svMESA(gl.glWindowPos3svMESA, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos4dMESA(x float64, y float64, z float64, w float64) {
	C.gllCall_glWindowPos4dMESA(gl.glWindowPos4dMESA, (C.double)(x), (C.double)(y), (C.double)(z), (C.double)(w))
}
func (gl *lib) WindowPos4dvMESA(v *float64) {
	C.gllCall_glWindowPos4dvMESA(gl.glWindowPos4dvMESA, (*C.double)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos4fMESA(x float32, y float32, z float32, w float32) {
	C.gllCall_glWindowPos4fMESA(gl.glWindowPos4fMESA, (C.float)(x), (C.float)(y), (C.float)(z), (C.float)(w))
}
func (gl *lib) WindowPos4fvMESA(v *float32) {
	C.gllCall_glWindowPos4fvMESA(gl.glWindowPos4fvMESA, (*C.float)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos4iMESA(x int32, y int32, z int32, w int32) {
	C.gllCall_glWindowPos4iMESA(gl.glWindowPos4iMESA, (C.int32_t)(x), (C.int32_t)(y), (C.int32_t)(z), (C.int32_t)(w))
}
func (gl *lib) WindowPos4ivMESA(v *int32) {
	C.gllCall_glWindowPos4ivMESA(gl.glWindowPos4ivMESA, (*C.int32_t)(unsafe.Pointer(v)))
}
func (gl *lib) WindowPos4sMESA(x int16, y int16, z int16, w int16) {
	C.gllCall_glWindowPos4sMESA(gl.glWindowPos4sMESA, (C.int16_t)(x), (C.int16_t)(y), (C.int16_t)(z), (C.int16_t)(w))
}
func (gl *lib) WindowPos4svMESA(v *int16) {
	C.gllCall_glWindowPos4svMESA(gl.glWindowPos4svMESA, (*C.int16_t)(unsafe.Pointer(v)))
}
func (gl *lib) WindowRectanglesEXT(mode uint32, count int32, box *int32) {
	C.gllCall_glWindowRectanglesEXT(gl.glWindowRectanglesEXT, (C.uint32_t)(mode), (C.int32_t)(count), (*C.int32_t)(unsafe.Pointer(box)))
}
func (gl *lib) WriteMaskEXT(res uint32, in uint32, outX uint32, outY uint32, outZ uint32, outW uint32) {
	C.gllCall_glWriteMaskEXT(gl.glWriteMaskEXT, (C.uint32_t)(res), (C.uint32_t)(in), (C.uint32_t)(outX), (C.uint32_t)(outY), (C.uint32_t)(outZ), (C.uint32_t)(outW))
}
func (gl *lib) DrawVkImageNV(vkImage uint64, sampler uint32, x0 float32, y0 float32, x1 float32, y1 float32, z float32, s0 float32, t0 float32, s1 float32, t1 float32) {
	C.gllCall_glDrawVkImageNV(gl.glDrawVkImageNV, (C.uint64_t)(vkImage), (C.uint32_t)(sampler), (C.float)(x0), (C.float)(y0), (C.float)(x1), (C.float)(y1), (C.float)(z), (C.float)(s0), (C.float)(t0), (C.float)(s1), (C.float)(t1))
}
func (gl *lib) WaitVkSemaphoreNV(vkSemaphore uint64) {
	C.gllCall_glWaitVkSemaphoreNV(gl.glWaitVkSemaphoreNV, (C.uint64_t)(vkSemaphore))
}
func (gl *lib) SignalVkSemaphoreNV(vkSemaphore uint64) {
	C.gllCall_glSignalVkSemaphoreNV(gl.glSignalVkSemaphoreNV, (C.uint64_t)(vkSemaphore))
}
func (gl *lib) SignalVkFenceNV(vkFence uint64) {
	C.gllCall_glSignalVkFenceNV(gl.glSignalVkFenceNV, (C.uint64_t)(vkFence))
}
func (gl *lib) FramebufferParameteriMESA(target uint32, pname uint32, param int32) {
	C.gllCall_glFramebufferParameteriMESA(gl.glFramebufferParameteriMESA, (C.uint32_t)(target), (C.uint32_t)(pname), (C.int32_t)(param))
}
func (gl *lib) GetFramebufferParameterivMESA(target uint32, pname uint32, params *int32) {
	C.gllCall_glGetFramebufferParameterivMESA(gl.glGetFramebufferParameterivMESA, (C.uint32_t)(target), (C.uint32_t)(pname), (*C.int32_t)(unsafe.Pointer(params)))
}

type lib struct {
	debugState
	glAccum                                                  unsafe.Pointer
	glAccumxOES                                              unsafe.Pointer
	glActiveProgramEXT                                       unsafe.Pointer
	glActiveShaderProgram                                    unsafe.Pointer
	glActiveShaderProgramEXT                                 unsafe.Pointer
	glActiveStencilFaceEXT                                   unsafe.Pointer
	glActiveTexture                                          unsafe.Pointer
	glActiveTextureARB                                       unsafe.Pointer
	glActiveVaryingNV                                        unsafe.Pointer
	glAlphaFragmentOp1ATI                                    unsafe.Pointer
	glAlphaFragmentOp2ATI                                    unsafe.Pointer
	glAlphaFragmentOp3ATI                                    unsafe.Pointer
	glAlphaFunc                                              unsafe.Pointer
	glAlphaFuncQCOM                                          unsafe.Pointer
	glAlphaFuncx                                             unsafe.Pointer
	glAlphaFuncxOES                                          unsafe.Pointer
	glAlphaToCoverageDitherControlNV                         unsafe.Pointer
	glApplyFramebufferAttachmentCMAAINTEL                    unsafe.Pointer
	glApplyTextureEXT                                        unsafe.Pointer
	glAcquireKeyedMutexWin32EXT                              unsafe.Pointer
	glAreProgramsResidentNV                                  unsafe.Pointer
	glAreTexturesResident                                    unsafe.Pointer
	glAreTexturesResidentEXT                                 unsafe.Pointer
	glArrayElement                                           unsafe.Pointer
	glArrayElementEXT                                        unsafe.Pointer
	glArrayObjectATI                                         unsafe.Pointer
	glAsyncCopyBufferSubDataNVX                              unsafe.Pointer
	glAsyncCopyImageSubDataNVX                               unsafe.Pointer
	glAsyncMarkerSGIX                                        unsafe.Pointer
	glAttachObjectARB                                        unsafe.Pointer
	glAttachShader                                           unsafe.Pointer
	glBegin                                                  unsafe.Pointer
	glBeginConditionalRender                                 unsafe.Pointer
	glBeginConditionalRenderNV                               unsafe.Pointer
	glBeginConditionalRenderNVX                              unsafe.Pointer
	glBeginFragmentShaderATI                                 unsafe.Pointer
	glBeginOcclusionQueryNV                                  unsafe.Pointer
	glBeginPerfMonitorAMD                                    unsafe.Pointer
	glBeginPerfQueryINTEL                                    unsafe.Pointer
	glBeginQuery                                             unsafe.Pointer
	glBeginQueryARB                                          unsafe.Pointer
	glBeginQueryEXT                                          unsafe.Pointer
	glBeginQueryIndexed                                      unsafe.Pointer
	glBeginTransformFeedback                                 unsafe.Pointer
	glBeginTransformFeedbackEXT                              unsafe.Pointer
	glBeginTransformFeedbackNV                               unsafe.Pointer
	glBeginVertexShaderEXT                                   unsafe.Pointer
	glBeginVideoCaptureNV                                    unsafe.Pointer
	glBindAttribLocation                                     unsafe.Pointer
	glBindAttribLocationARB                                  unsafe.Pointer
	glBindBuffer                                             unsafe.Pointer
	glBindBufferARB                                          unsafe.Pointer
	glBindBufferBase                                         unsafe.Pointer
	glBindBufferBaseEXT                                      unsafe.Pointer
	glBindBufferBaseNV                                       unsafe.Pointer
	glBindBufferOffsetEXT                                    unsafe.Pointer
	glBindBufferOffsetNV                                     unsafe.Pointer
	glBindBufferRange                                        unsafe.Pointer
	glBindBufferRangeEXT                                     unsafe.Pointer
	glBindBufferRangeNV                                      unsafe.Pointer
	glBindBuffersBase                                        unsafe.Pointer
	glBindBuffersRange                                       unsafe.Pointer
	glBindFragDataLocation                                   unsafe.Pointer
	glBindFragDataLocationEXT                                unsafe.Pointer
	glBindFragDataLocationIndexed                            unsafe.Pointer
	glBindFragDataLocationIndexedEXT                         unsafe.Pointer
	glBindFragmentShaderATI                                  unsafe.Pointer
	glBindFramebuffer                                        unsafe.Pointer
	glBindFramebufferEXT                                     unsafe.Pointer
	glBindFramebufferOES                                     unsafe.Pointer
	glBindImageTexture                                       unsafe.Pointer
	glBindImageTextureEXT                                    unsafe.Pointer
	glBindImageTextures                                      unsafe.Pointer
	glBindLightParameterEXT                                  unsafe.Pointer
	glBindMaterialParameterEXT                               unsafe.Pointer
	glBindMultiTextureEXT                                    unsafe.Pointer
	glBindParameterEXT                                       unsafe.Pointer
	glBindProgramARB                                         unsafe.Pointer
	glBindProgramNV                                          unsafe.Pointer
	glBindProgramPipeline                                    unsafe.Pointer
	glBindProgramPipelineEXT                                 unsafe.Pointer
	glBindRenderbuffer                                       unsafe.Pointer
	glBindRenderbufferEXT                                    unsafe.Pointer
	glBindRenderbufferOES                                    unsafe.Pointer
	glBindSampler                                            unsafe.Pointer
	glBindSamplers                                           unsafe.Pointer
	glBindShadingRateImageNV                                 unsafe.Pointer
	glBindTexGenParameterEXT                                 unsafe.Pointer
	glBindTexture                                            unsafe.Pointer
	glBindTextureEXT                                         unsafe.Pointer
	glBindTextureUnit                                        unsafe.Pointer
	glBindTextureUnitParameterEXT                            unsafe.Pointer
	glBindTextures                                           unsafe.Pointer
	glBindTransformFeedback                                  unsafe.Pointer
	glBindTransformFeedbackNV                                unsafe.Pointer
	glBindVertexArray                                        unsafe.Pointer
	glBindVertexArrayAPPLE                                   unsafe.Pointer
	glBindVertexArrayOES                                     unsafe.Pointer
	glBindVertexBuffer                                       unsafe.Pointer
	glBindVertexBuffers                                      unsafe.Pointer
	glBindVertexShaderEXT                                    unsafe.Pointer
	glBindVideoCaptureStreamBufferNV                         unsafe.Pointer
	glBindVideoCaptureStreamTextureNV                        unsafe.Pointer
	glBinormal3bEXT                                          unsafe.Pointer
	glBinormal3bvEXT                                         unsafe.Pointer
	glBinormal3dEXT                                          unsafe.Pointer
	glBinormal3dvEXT                                         unsafe.Pointer
	glBinormal3fEXT                                          unsafe.Pointer
	glBinormal3fvEXT                                         unsafe.Pointer
	glBinormal3iEXT                                          unsafe.Pointer
	glBinormal3ivEXT                                         unsafe.Pointer
	glBinormal3sEXT                                          unsafe.Pointer
	glBinormal3svEXT                                         unsafe.Pointer
	glBinormalPointerEXT                                     unsafe.Pointer
	glBitmap                                                 unsafe.Pointer
	glBitmapxOES                                             unsafe.Pointer
	glBlendBarrier                                           unsafe.Pointer
	glBlendBarrierKHR                                        unsafe.Pointer
	glBlendBarrierNV                                         unsafe.Pointer
	glBlendColor                                             unsafe.Pointer
	glBlendColorEXT                                          unsafe.Pointer
	glBlendColorxOES                                         unsafe.Pointer
	glBlendEquation                                          unsafe.Pointer
	glBlendEquationEXT                                       unsafe.Pointer
	glBlendEquationIndexedAMD                                unsafe.Pointer
	glBlendEquationOES                                       unsafe.Pointer
	glBlendEquationSeparate                                  unsafe.Pointer
	glBlendEquationSeparateEXT                               unsafe.Pointer
	glBlendEquationSeparateIndexedAMD                        unsafe.Pointer
	glBlendEquationSeparateOES                               unsafe.Pointer
	glBlendEquationSeparatei                                 unsafe.Pointer
	glBlendEquationSeparateiARB                              unsafe.Pointer
	glBlendEquationSeparateiEXT                              unsafe.Pointer
	glBlendEquationSeparateiOES                              unsafe.Pointer
	glBlendEquationi                                         unsafe.Pointer
	glBlendEquationiARB                                      unsafe.Pointer
	glBlendEquationiEXT                                      unsafe.Pointer
	glBlendEquationiOES                                      unsafe.Pointer
	glBlendFunc                                              unsafe.Pointer
	glBlendFuncIndexedAMD                                    unsafe.Pointer
	glBlendFuncSeparate                                      unsafe.Pointer
	glBlendFuncSeparateEXT                                   unsafe.Pointer
	glBlendFuncSeparateINGR                                  unsafe.Pointer
	glBlendFuncSeparateIndexedAMD                            unsafe.Pointer
	glBlendFuncSeparateOES                                   unsafe.Pointer
	glBlendFuncSeparatei                                     unsafe.Pointer
	glBlendFuncSeparateiARB                                  unsafe.Pointer
	glBlendFuncSeparateiEXT                                  unsafe.Pointer
	glBlendFuncSeparateiOES                                  unsafe.Pointer
	glBlendFunci                                             unsafe.Pointer
	glBlendFunciARB                                          unsafe.Pointer
	glBlendFunciEXT                                          unsafe.Pointer
	glBlendFunciOES                                          unsafe.Pointer
	glBlendParameteriNV                                      unsafe.Pointer
	glBlitFramebuffer                                        unsafe.Pointer
	glBlitFramebufferANGLE                                   unsafe.Pointer
	glBlitFramebufferEXT                                     unsafe.Pointer
	glBlitFramebufferNV                                      unsafe.Pointer
	glBlitNamedFramebuffer                                   unsafe.Pointer
	glBufferAddressRangeNV                                   unsafe.Pointer
	glBufferAttachMemoryNV                                   unsafe.Pointer
	glBufferData                                             unsafe.Pointer
	glBufferDataARB                                          unsafe.Pointer
	glBufferPageCommitmentARB                                unsafe.Pointer
	glBufferPageCommitmentMemNV                              unsafe.Pointer
	glBufferParameteriAPPLE                                  unsafe.Pointer
	glBufferStorage                                          unsafe.Pointer
	glBufferStorageEXT                                       unsafe.Pointer
	glBufferStorageMemEXT                                    unsafe.Pointer
	glBufferSubData                                          unsafe.Pointer
	glBufferSubDataARB                                       unsafe.Pointer
	glCallCommandListNV                                      unsafe.Pointer
	glCallList                                               unsafe.Pointer
	glCallLists                                              unsafe.Pointer
	glCheckFramebufferStatus                                 unsafe.Pointer
	glCheckFramebufferStatusEXT                              unsafe.Pointer
	glCheckFramebufferStatusOES                              unsafe.Pointer
	glCheckNamedFramebufferStatus                            unsafe.Pointer
	glCheckNamedFramebufferStatusEXT                         unsafe.Pointer
	glClampColor                                             unsafe.Pointer
	glClampColorARB                                          unsafe.Pointer
	glClear                                                  unsafe.Pointer
	glClearAccum                                             unsafe.Pointer
	glClearAccumxOES                                         unsafe.Pointer
	glClearBufferData                                        unsafe.Pointer
	glClearBufferSubData                                     unsafe.Pointer
	glClearBufferfi                                          unsafe.Pointer
	glClearBufferfv                                          unsafe.Pointer
	glClearBufferiv                                          unsafe.Pointer
	glClearBufferuiv                                         unsafe.Pointer
	glClearColor                                             unsafe.Pointer
	glClearColorIiEXT                                        unsafe.Pointer
	glClearColorIuiEXT                                       unsafe.Pointer
	glClearColorx                                            unsafe.Pointer
	glClearColorxOES                                         unsafe.Pointer
	glClearDepth                                             unsafe.Pointer
	glClearDepthdNV                                          unsafe.Pointer
	glClearDepthf                                            unsafe.Pointer
	glClearDepthfOES                                         unsafe.Pointer
	glClearDepthx                                            unsafe.Pointer
	glClearDepthxOES                                         unsafe.Pointer
	glClearIndex                                             unsafe.Pointer
	glClearNamedBufferData                                   unsafe.Pointer
	glClearNamedBufferDataEXT                                unsafe.Pointer
	glClearNamedBufferSubData                                unsafe.Pointer
	glClearNamedBufferSubDataEXT                             unsafe.Pointer
	glClearNamedFramebufferfi                                unsafe.Pointer
	glClearNamedFramebufferfv                                unsafe.Pointer
	glClearNamedFramebufferiv                                unsafe.Pointer
	glClearNamedFramebufferuiv                               unsafe.Pointer
	glClearPixelLocalStorageuiEXT                            unsafe.Pointer
	glClearStencil                                           unsafe.Pointer
	glClearTexImage                                          unsafe.Pointer
	glClearTexImageEXT                                       unsafe.Pointer
	glClearTexSubImage                                       unsafe.Pointer
	glClearTexSubImageEXT                                    unsafe.Pointer
	glClientActiveTexture                                    unsafe.Pointer
	glClientActiveTextureARB                                 unsafe.Pointer
	glClientActiveVertexStreamATI                            unsafe.Pointer
	glClientAttribDefaultEXT                                 unsafe.Pointer
	glClientWaitSemaphoreui64NVX                             unsafe.Pointer
	glClientWaitSync                                         unsafe.Pointer
	glClientWaitSyncAPPLE                                    unsafe.Pointer
	glClipControl                                            unsafe.Pointer
	glClipControlEXT                                         unsafe.Pointer
	glClipPlane                                              unsafe.Pointer
	glClipPlanef                                             unsafe.Pointer
	glClipPlanefIMG                                          unsafe.Pointer
	glClipPlanefOES                                          unsafe.Pointer
	glClipPlanex                                             unsafe.Pointer
	glClipPlanexIMG                                          unsafe.Pointer
	glClipPlanexOES                                          unsafe.Pointer
	glColor3b                                                unsafe.Pointer
	glColor3bv                                               unsafe.Pointer
	glColor3d                                                unsafe.Pointer
	glColor3dv                                               unsafe.Pointer
	glColor3f                                                unsafe.Pointer
	glColor3fVertex3fSUN                                     unsafe.Pointer
	glColor3fVertex3fvSUN                                    unsafe.Pointer
	glColor3fv                                               unsafe.Pointer
	glColor3hNV                                              unsafe.Pointer
	glColor3hvNV                                             unsafe.Pointer
	glColor3i                                                unsafe.Pointer
	glColor3iv                                               unsafe.Pointer
	glColor3s                                                unsafe.Pointer
	glColor3sv                                               unsafe.Pointer
	glColor3ub                                               unsafe.Pointer
	glColor3ubv                                              unsafe.Pointer
	glColor3ui                                               unsafe.Pointer
	glColor3uiv                                              unsafe.Pointer
	glColor3us                                               unsafe.Pointer
	glColor3usv                                              unsafe.Pointer
	glColor3xOES                                             unsafe.Pointer
	glColor3xvOES                                            unsafe.Pointer
	glColor4b                                                unsafe.Pointer
	glColor4bv                                               unsafe.Pointer
	glColor4d                                                unsafe.Pointer
	glColor4dv                                               unsafe.Pointer
	glColor4f                                                unsafe.Pointer
	glColor4fNormal3fVertex3fSUN                             unsafe.Pointer
	glColor4fNormal3fVertex3fvSUN                            unsafe.Pointer
	glColor4fv                                               unsafe.Pointer
	glColor4hNV                                              unsafe.Pointer
	glColor4hvNV                                             unsafe.Pointer
	glColor4i                                                unsafe.Pointer
	glColor4iv                                               unsafe.Pointer
	glColor4s                                                unsafe.Pointer
	glColor4sv                                               unsafe.Pointer
	glColor4ub                                               unsafe.Pointer
	glColor4ubVertex2fSUN                                    unsafe.Pointer
	glColor4ubVertex2fvSUN                                   unsafe.Pointer
	glColor4ubVertex3fSUN                                    unsafe.Pointer
	glColor4ubVertex3fvSUN                                   unsafe.Pointer
	glColor4ubv                                              unsafe.Pointer
	glColor4ui                                               unsafe.Pointer
	glColor4uiv                                              unsafe.Pointer
	glColor4us                                               unsafe.Pointer
	glColor4usv                                              unsafe.Pointer
	glColor4x                                                unsafe.Pointer
	glColor4xOES                                             unsafe.Pointer
	glColor4xvOES                                            unsafe.Pointer
	glColorFormatNV                                          unsafe.Pointer
	glColorFragmentOp1ATI                                    unsafe.Pointer
	glColorFragmentOp2ATI                                    unsafe.Pointer
	glColorFragmentOp3ATI                                    unsafe.Pointer
	glColorMask                                              unsafe.Pointer
	glColorMaskIndexedEXT                                    unsafe.Pointer
	glColorMaski                                             unsafe.Pointer
	glColorMaskiEXT                                          unsafe.Pointer
	glColorMaskiOES                                          unsafe.Pointer
	glColorMaterial                                          unsafe.Pointer
	glColorP3ui                                              unsafe.Pointer
	glColorP3uiv                                             unsafe.Pointer
	glColorP4ui                                              unsafe.Pointer
	glColorP4uiv                                             unsafe.Pointer
	glColorPointer                                           unsafe.Pointer
	glColorPointerEXT                                        unsafe.Pointer
	glColorPointerListIBM                                    unsafe.Pointer
	glColorPointervINTEL                                     unsafe.Pointer
	glColorSubTable                                          unsafe.Pointer
	glColorSubTableEXT                                       unsafe.Pointer
	glColorTable                                             unsafe.Pointer
	glColorTableEXT                                          unsafe.Pointer
	glColorTableParameterfv                                  unsafe.Pointer
	glColorTableParameterfvSGI                               unsafe.Pointer
	glColorTableParameteriv                                  unsafe.Pointer
	glColorTableParameterivSGI                               unsafe.Pointer
	glColorTableSGI                                          unsafe.Pointer
	glCombinerInputNV                                        unsafe.Pointer
	glCombinerOutputNV                                       unsafe.Pointer
	glCombinerParameterfNV                                   unsafe.Pointer
	glCombinerParameterfvNV                                  unsafe.Pointer
	glCombinerParameteriNV                                   unsafe.Pointer
	glCombinerParameterivNV                                  unsafe.Pointer
	glCombinerStageParameterfvNV                             unsafe.Pointer
	glCommandListSegmentsNV                                  unsafe.Pointer
	glCompileCommandListNV                                   unsafe.Pointer
	glCompileShader                                          unsafe.Pointer
	glCompileShaderARB                                       unsafe.Pointer
	glCompileShaderIncludeARB                                unsafe.Pointer
	glCompressedMultiTexImage1DEXT                           unsafe.Pointer
	glCompressedMultiTexImage2DEXT                           unsafe.Pointer
	glCompressedMultiTexImage3DEXT                           unsafe.Pointer
	glCompressedMultiTexSubImage1DEXT                        unsafe.Pointer
	glCompressedMultiTexSubImage2DEXT                        unsafe.Pointer
	glCompressedMultiTexSubImage3DEXT                        unsafe.Pointer
	glCompressedTexImage1D                                   unsafe.Pointer
	glCompressedTexImage1DARB                                unsafe.Pointer
	glCompressedTexImage2D                                   unsafe.Pointer
	glCompressedTexImage2DARB                                unsafe.Pointer
	glCompressedTexImage3D                                   unsafe.Pointer
	glCompressedTexImage3DARB                                unsafe.Pointer
	glCompressedTexImage3DOES                                unsafe.Pointer
	glCompressedTexSubImage1D                                unsafe.Pointer
	glCompressedTexSubImage1DARB                             unsafe.Pointer
	glCompressedTexSubImage2D                                unsafe.Pointer
	glCompressedTexSubImage2DARB                             unsafe.Pointer
	glCompressedTexSubImage3D                                unsafe.Pointer
	glCompressedTexSubImage3DARB                             unsafe.Pointer
	glCompressedTexSubImage3DOES                             unsafe.Pointer
	glCompressedTextureImage1DEXT                            unsafe.Pointer
	glCompressedTextureImage2DEXT                            unsafe.Pointer
	glCompressedTextureImage3DEXT                            unsafe.Pointer
	glCompressedTextureSubImage1D                            unsafe.Pointer
	glCompressedTextureSubImage1DEXT                         unsafe.Pointer
	glCompressedTextureSubImage2D                            unsafe.Pointer
	glCompressedTextureSubImage2DEXT                         unsafe.Pointer
	glCompressedTextureSubImage3D                            unsafe.Pointer
	glCompressedTextureSubImage3DEXT                         unsafe.Pointer
	glConservativeRasterParameterfNV                         unsafe.Pointer
	glConservativeRasterParameteriNV                         unsafe.Pointer
	glConvolutionFilter1D                                    unsafe.Pointer
	glConvolutionFilter1DEXT                                 unsafe.Pointer
	glConvolutionFilter2D                                    unsafe.Pointer
	glConvolutionFilter2DEXT                                 unsafe.Pointer
	glConvolutionParameterf                                  unsafe.Pointer
	glConvolutionParameterfEXT                               unsafe.Pointer
	glConvolutionParameterfv                                 unsafe.Pointer
	glConvolutionParameterfvEXT                              unsafe.Pointer
	glConvolutionParameteri                                  unsafe.Pointer
	glConvolutionParameteriEXT                               unsafe.Pointer
	glConvolutionParameteriv                                 unsafe.Pointer
	glConvolutionParameterivEXT                              unsafe.Pointer
	glConvolutionParameterxOES                               unsafe.Pointer
	glConvolutionParameterxvOES                              unsafe.Pointer
	glCopyBufferSubData                                      unsafe.Pointer
	glCopyBufferSubDataNV                                    unsafe.Pointer
	glCopyColorSubTable                                      unsafe.Pointer
	glCopyColorSubTableEXT                                   unsafe.Pointer
	glCopyColorTable                                         unsafe.Pointer
	glCopyColorTableSGI                                      unsafe.Pointer
	glCopyConvolutionFilter1D                                unsafe.Pointer
	glCopyConvolutionFilter1DEXT                             unsafe.Pointer
	glCopyConvolutionFilter2D                                unsafe.Pointer
	glCopyConvolutionFilter2DEXT                             unsafe.Pointer
	glCopyImageSubData                                       unsafe.Pointer
	glCopyImageSubDataEXT                                    unsafe.Pointer
	glCopyImageSubDataNV                                     unsafe.Pointer
	glCopyImageSubDataOES                                    unsafe.Pointer
	glCopyMultiTexImage1DEXT                                 unsafe.Pointer
	glCopyMultiTexImage2DEXT                                 unsafe.Pointer
	glCopyMultiTexSubImage1DEXT                              unsafe.Pointer
	glCopyMultiTexSubImage2DEXT                              unsafe.Pointer
	glCopyMultiTexSubImage3DEXT                              unsafe.Pointer
	glCopyNamedBufferSubData                                 unsafe.Pointer
	glCopyPathNV                                             unsafe.Pointer
	glCopyPixels                                             unsafe.Pointer
	glCopyTexImage1D                                         unsafe.Pointer
	glCopyTexImage1DEXT                                      unsafe.Pointer
	glCopyTexImage2D                                         unsafe.Pointer
	glCopyTexImage2DEXT                                      unsafe.Pointer
	glCopyTexSubImage1D                                      unsafe.Pointer
	glCopyTexSubImage1DEXT                                   unsafe.Pointer
	glCopyTexSubImage2D                                      unsafe.Pointer
	glCopyTexSubImage2DEXT                                   unsafe.Pointer
	glCopyTexSubImage3D                                      unsafe.Pointer
	glCopyTexSubImage3DEXT                                   unsafe.Pointer
	glCopyTexSubImage3DOES                                   unsafe.Pointer
	glCopyTextureImage1DEXT                                  unsafe.Pointer
	glCopyTextureImage2DEXT                                  unsafe.Pointer
	glCopyTextureLevelsAPPLE                                 unsafe.Pointer
	glCopyTextureSubImage1D                                  unsafe.Pointer
	glCopyTextureSubImage1DEXT                               unsafe.Pointer
	glCopyTextureSubImage2D                                  unsafe.Pointer
	glCopyTextureSubImage2DEXT                               unsafe.Pointer
	glCopyTextureSubImage3D                                  unsafe.Pointer
	glCopyTextureSubImage3DEXT                               unsafe.Pointer
	glCoverFillPathInstancedNV                               unsafe.Pointer
	glCoverFillPathNV                                        unsafe.Pointer
	glCoverStrokePathInstancedNV                             unsafe.Pointer
	glCoverStrokePathNV                                      unsafe.Pointer
	glCoverageMaskNV                                         unsafe.Pointer
	glCoverageModulationNV                                   unsafe.Pointer
	glCoverageModulationTableNV                              unsafe.Pointer
	glCoverageOperationNV                                    unsafe.Pointer
	glCreateBuffers                                          unsafe.Pointer
	glCreateCommandListsNV                                   unsafe.Pointer
	glCreateFramebuffers                                     unsafe.Pointer
	glCreateMemoryObjectsEXT                                 unsafe.Pointer
	glCreatePerfQueryINTEL                                   unsafe.Pointer
	glCreateProgram                                          unsafe.Pointer
	glCreateProgramObjectARB                                 unsafe.Pointer
	glCreateProgramPipelines                                 unsafe.Pointer
	glCreateProgressFenceNVX                                 unsafe.Pointer
	glCreateQueries                                          unsafe.Pointer
	glCreateRenderbuffers                                    unsafe.Pointer
	glCreateSamplers                                         unsafe.Pointer
	glCreateSemaphoresNV                                     unsafe.Pointer
	glCreateShader                                           unsafe.Pointer
	glCreateShaderObjectARB                                  unsafe.Pointer
	glCreateShaderProgramEXT                                 unsafe.Pointer
	glCreateShaderProgramv                                   unsafe.Pointer
	glCreateShaderProgramvEXT                                unsafe.Pointer
	glCreateStatesNV                                         unsafe.Pointer
	glCreateTextures                                         unsafe.Pointer
	glCreateTransformFeedbacks                               unsafe.Pointer
	glCreateVertexArrays                                     unsafe.Pointer
	glCullFace                                               unsafe.Pointer
	glCullParameterdvEXT                                     unsafe.Pointer
	glCullParameterfvEXT                                     unsafe.Pointer
	glCurrentPaletteMatrixARB                                unsafe.Pointer
	glCurrentPaletteMatrixOES                                unsafe.Pointer
	glDebugMessageCallback                                   unsafe.Pointer
	glDebugMessageCallbackAMD                                unsafe.Pointer
	glDebugMessageCallbackARB                                unsafe.Pointer
	glDebugMessageCallbackKHR                                unsafe.Pointer
	glDebugMessageControl                                    unsafe.Pointer
	glDebugMessageControlARB                                 unsafe.Pointer
	glDebugMessageControlKHR                                 unsafe.Pointer
	glDebugMessageEnableAMD                                  unsafe.Pointer
	glDebugMessageInsert                                     unsafe.Pointer
	glDebugMessageInsertAMD                                  unsafe.Pointer
	glDebugMessageInsertARB                                  unsafe.Pointer
	glDebugMessageInsertKHR                                  unsafe.Pointer
	glDeformSGIX                                             unsafe.Pointer
	glDeformationMap3dSGIX                                   unsafe.Pointer
	glDeformationMap3fSGIX                                   unsafe.Pointer
	glDeleteAsyncMarkersSGIX                                 unsafe.Pointer
	glDeleteBuffers                                          unsafe.Pointer
	glDeleteBuffersARB                                       unsafe.Pointer
	glDeleteCommandListsNV                                   unsafe.Pointer
	glDeleteFencesAPPLE                                      unsafe.Pointer
	glDeleteFencesNV                                         unsafe.Pointer
	glDeleteFragmentShaderATI                                unsafe.Pointer
	glDeleteFramebuffers                                     unsafe.Pointer
	glDeleteFramebuffersEXT                                  unsafe.Pointer
	glDeleteFramebuffersOES                                  unsafe.Pointer
	glDeleteLists                                            unsafe.Pointer
	glDeleteMemoryObjectsEXT                                 unsafe.Pointer
	glDeleteNamedStringARB                                   unsafe.Pointer
	glDeleteNamesAMD                                         unsafe.Pointer
	glDeleteObjectARB                                        unsafe.Pointer
	glDeleteOcclusionQueriesNV                               unsafe.Pointer
	glDeletePathsNV                                          unsafe.Pointer
	glDeletePerfMonitorsAMD                                  unsafe.Pointer
	glDeletePerfQueryINTEL                                   unsafe.Pointer
	glDeleteProgram                                          unsafe.Pointer
	glDeleteProgramPipelines                                 unsafe.Pointer
	glDeleteProgramPipelinesEXT                              unsafe.Pointer
	glDeleteProgramsARB                                      unsafe.Pointer
	glDeleteProgramsNV                                       unsafe.Pointer
	glDeleteQueries                                          unsafe.Pointer
	glDeleteQueriesARB                                       unsafe.Pointer
	glDeleteQueriesEXT                                       unsafe.Pointer
	glDeleteQueryResourceTagNV                               unsafe.Pointer
	glDeleteRenderbuffers                                    unsafe.Pointer
	glDeleteRenderbuffersEXT                                 unsafe.Pointer
	glDeleteRenderbuffersOES                                 unsafe.Pointer
	glDeleteSamplers                                         unsafe.Pointer
	glDeleteSemaphoresEXT                                    unsafe.Pointer
	glDeleteShader                                           unsafe.Pointer
	glDeleteStatesNV                                         unsafe.Pointer
	glDeleteSync                                             unsafe.Pointer
	glDeleteSyncAPPLE                                        unsafe.Pointer
	glDeleteTextures                                         unsafe.Pointer
	glDeleteTexturesEXT                                      unsafe.Pointer
	glDeleteTransformFeedbacks                               unsafe.Pointer
	glDeleteTransformFeedbacksNV                             unsafe.Pointer
	glDeleteVertexArrays                                     unsafe.Pointer
	glDeleteVertexArraysAPPLE                                unsafe.Pointer
	glDeleteVertexArraysOES                                  unsafe.Pointer
	glDeleteVertexShaderEXT                                  unsafe.Pointer
	glDepthBoundsEXT                                         unsafe.Pointer
	glDepthBoundsdNV                                         unsafe.Pointer
	glDepthFunc                                              unsafe.Pointer
	glDepthMask                                              unsafe.Pointer
	glDepthRange                                             unsafe.Pointer
	glDepthRangeArraydvNV                                    unsafe.Pointer
	glDepthRangeArrayfvNV                                    unsafe.Pointer
	glDepthRangeArrayfvOES                                   unsafe.Pointer
	glDepthRangeArrayv                                       unsafe.Pointer
	glDepthRangeIndexed                                      unsafe.Pointer
	glDepthRangeIndexeddNV                                   unsafe.Pointer
	glDepthRangeIndexedfNV                                   unsafe.Pointer
	glDepthRangeIndexedfOES                                  unsafe.Pointer
	glDepthRangedNV                                          unsafe.Pointer
	glDepthRangef                                            unsafe.Pointer
	glDepthRangefOES                                         unsafe.Pointer
	glDepthRangex                                            unsafe.Pointer
	glDepthRangexOES                                         unsafe.Pointer
	glDetachObjectARB                                        unsafe.Pointer
	glDetachShader                                           unsafe.Pointer
	glDetailTexFuncSGIS                                      unsafe.Pointer
	glDisable                                                unsafe.Pointer
	glDisableClientState                                     unsafe.Pointer
	glDisableClientStateIndexedEXT                           unsafe.Pointer
	glDisableClientStateiEXT                                 unsafe.Pointer
	glDisableDriverControlQCOM                               unsafe.Pointer
	glDisableIndexedEXT                                      unsafe.Pointer
	glDisableVariantClientStateEXT                           unsafe.Pointer
	glDisableVertexArrayAttrib                               unsafe.Pointer
	glDisableVertexArrayAttribEXT                            unsafe.Pointer
	glDisableVertexArrayEXT                                  unsafe.Pointer
	glDisableVertexAttribAPPLE                               unsafe.Pointer
	glDisableVertexAttribArray                               unsafe.Pointer
	glDisableVertexAttribArrayARB                            unsafe.Pointer
	glDisablei                                               unsafe.Pointer
	glDisableiEXT                                            unsafe.Pointer
	glDisableiNV                                             unsafe.Pointer
	glDisableiOES                                            unsafe.Pointer
	glDiscardFramebufferEXT                                  unsafe.Pointer
	glDispatchCompute                                        unsafe.Pointer
	glDispatchComputeGroupSizeARB                            unsafe.Pointer
	glDispatchComputeIndirect                                unsafe.Pointer
	glDrawArrays                                             unsafe.Pointer
	glDrawArraysEXT                                          unsafe.Pointer
	glDrawArraysIndirect                                     unsafe.Pointer
	glDrawArraysInstanced                                    unsafe.Pointer
	glDrawArraysInstancedANGLE                               unsafe.Pointer
	glDrawArraysInstancedARB                                 unsafe.Pointer
	glDrawArraysInstancedBaseInstance                        unsafe.Pointer
	glDrawArraysInstancedBaseInstanceEXT                     unsafe.Pointer
	glDrawArraysInstancedEXT                                 unsafe.Pointer
	glDrawArraysInstancedNV                                  unsafe.Pointer
	glDrawBuffer                                             unsafe.Pointer
	glDrawBuffers                                            unsafe.Pointer
	glDrawBuffersARB                                         unsafe.Pointer
	glDrawBuffersATI                                         unsafe.Pointer
	glDrawBuffersEXT                                         unsafe.Pointer
	glDrawBuffersIndexedEXT                                  unsafe.Pointer
	glDrawBuffersNV                                          unsafe.Pointer
	glDrawCommandsAddressNV                                  unsafe.Pointer
	glDrawCommandsNV                                         unsafe.Pointer
	glDrawCommandsStatesAddressNV                            unsafe.Pointer
	glDrawCommandsStatesNV                                   unsafe.Pointer
	glDrawElementArrayAPPLE                                  unsafe.Pointer
	glDrawElementArrayATI                                    unsafe.Pointer
	glDrawElements                                           unsafe.Pointer
	glDrawElementsBaseVertex                                 unsafe.Pointer
	glDrawElementsBaseVertexEXT                              unsafe.Pointer
	glDrawElementsBaseVertexOES                              unsafe.Pointer
	glDrawElementsIndirect                                   unsafe.Pointer
	glDrawElementsInstanced                                  unsafe.Pointer
	glDrawElementsInstancedANGLE                             unsafe.Pointer
	glDrawElementsInstancedARB                               unsafe.Pointer
	glDrawElementsInstancedBaseInstance                      unsafe.Pointer
	glDrawElementsInstancedBaseInstanceEXT                   unsafe.Pointer
	glDrawElementsInstancedBaseVertex                        unsafe.Pointer
	glDrawElementsInstancedBaseVertexBaseInstance            unsafe.Pointer
	glDrawElementsInstancedBaseVertexBaseInstanceEXT         unsafe.Pointer
	glDrawElementsInstancedBaseVertexEXT                     unsafe.Pointer
	glDrawElementsInstancedBaseVertexOES                     unsafe.Pointer
	glDrawElementsInstancedEXT                               unsafe.Pointer
	glDrawElementsInstancedNV                                unsafe.Pointer
	glDrawMeshArraysSUN                                      unsafe.Pointer
	glDrawMeshTasksNV                                        unsafe.Pointer
	glDrawMeshTasksIndirectNV                                unsafe.Pointer
	glDrawPixels                                             unsafe.Pointer
	glDrawRangeElementArrayAPPLE                             unsafe.Pointer
	glDrawRangeElementArrayATI                               unsafe.Pointer
	glDrawRangeElements                                      unsafe.Pointer
	glDrawRangeElementsBaseVertex                            unsafe.Pointer
	glDrawRangeElementsBaseVertexEXT                         unsafe.Pointer
	glDrawRangeElementsBaseVertexOES                         unsafe.Pointer
	glDrawRangeElementsEXT                                   unsafe.Pointer
	glDrawTexfOES                                            unsafe.Pointer
	glDrawTexfvOES                                           unsafe.Pointer
	glDrawTexiOES                                            unsafe.Pointer
	glDrawTexivOES                                           unsafe.Pointer
	glDrawTexsOES                                            unsafe.Pointer
	glDrawTexsvOES                                           unsafe.Pointer
	glDrawTextureNV                                          unsafe.Pointer
	glDrawTexxOES                                            unsafe.Pointer
	glDrawTexxvOES                                           unsafe.Pointer
	glDrawTransformFeedback                                  unsafe.Pointer
	glDrawTransformFeedbackEXT                               unsafe.Pointer
	glDrawTransformFeedbackInstanced                         unsafe.Pointer
	glDrawTransformFeedbackInstancedEXT                      unsafe.Pointer
	glDrawTransformFeedbackNV                                unsafe.Pointer
	glDrawTransformFeedbackStream                            unsafe.Pointer
	glDrawTransformFeedbackStreamInstanced                   unsafe.Pointer
	glEdgeFlag                                               unsafe.Pointer
	glEdgeFlagFormatNV                                       unsafe.Pointer
	glEdgeFlagPointer                                        unsafe.Pointer
	glEdgeFlagPointerEXT                                     unsafe.Pointer
	glEdgeFlagPointerListIBM                                 unsafe.Pointer
	glEdgeFlagv                                              unsafe.Pointer
	glElementPointerAPPLE                                    unsafe.Pointer
	glElementPointerATI                                      unsafe.Pointer
	glEnable                                                 unsafe.Pointer
	glEnableClientState                                      unsafe.Pointer
	glEnableClientStateIndexedEXT                            unsafe.Pointer
	glEnableClientStateiEXT                                  unsafe.Pointer
	glEnableDriverControlQCOM                                unsafe.Pointer
	glEnableIndexedEXT                                       unsafe.Pointer
	glEnableVariantClientStateEXT                            unsafe.Pointer
	glEnableVertexArrayAttrib                                unsafe.Pointer
	glEnableVertexArrayAttribEXT                             unsafe.Pointer
	glEnableVertexArrayEXT                                   unsafe.Pointer
	glEnableVertexAttribAPPLE                                unsafe.Pointer
	glEnableVertexAttribArray                                unsafe.Pointer
	glEnableVertexAttribArrayARB                             unsafe.Pointer
	glEnablei                                                unsafe.Pointer
	glEnableiEXT                                             unsafe.Pointer
	glEnableiNV                                              unsafe.Pointer
	glEnableiOES                                             unsafe.Pointer
	glEnd                                                    unsafe.Pointer
	glEndConditionalRender                                   unsafe.Pointer
	glEndConditionalRenderNV                                 unsafe.Pointer
	glEndConditionalRenderNVX                                unsafe.Pointer
	glEndFragmentShaderATI                                   unsafe.Pointer
	glEndList                                                unsafe.Pointer
	glEndOcclusionQueryNV                                    unsafe.Pointer
	glEndPerfMonitorAMD                                      unsafe.Pointer
	glEndPerfQueryINTEL                                      unsafe.Pointer
	glEndQuery                                               unsafe.Pointer
	glEndQueryARB                                            unsafe.Pointer
	glEndQueryEXT                                            unsafe.Pointer
	glEndQueryIndexed                                        unsafe.Pointer
	glEndTilingQCOM                                          unsafe.Pointer
	glEndTransformFeedback                                   unsafe.Pointer
	glEndTransformFeedbackEXT                                unsafe.Pointer
	glEndTransformFeedbackNV                                 unsafe.Pointer
	glEndVertexShaderEXT                                     unsafe.Pointer
	glEndVideoCaptureNV                                      unsafe.Pointer
	glEvalCoord1d                                            unsafe.Pointer
	glEvalCoord1dv                                           unsafe.Pointer
	glEvalCoord1f                                            unsafe.Pointer
	glEvalCoord1fv                                           unsafe.Pointer
	glEvalCoord1xOES                                         unsafe.Pointer
	glEvalCoord1xvOES                                        unsafe.Pointer
	glEvalCoord2d                                            unsafe.Pointer
	glEvalCoord2dv                                           unsafe.Pointer
	glEvalCoord2f                                            unsafe.Pointer
	glEvalCoord2fv                                           unsafe.Pointer
	glEvalCoord2xOES                                         unsafe.Pointer
	glEvalCoord2xvOES                                        unsafe.Pointer
	glEvalMapsNV                                             unsafe.Pointer
	glEvalMesh1                                              unsafe.Pointer
	glEvalMesh2                                              unsafe.Pointer
	glEvalPoint1                                             unsafe.Pointer
	glEvalPoint2                                             unsafe.Pointer
	glEvaluateDepthValuesARB                                 unsafe.Pointer
	glExecuteProgramNV                                       unsafe.Pointer
	glExtGetBufferPointervQCOM                               unsafe.Pointer
	glExtGetBuffersQCOM                                      unsafe.Pointer
	glExtGetFramebuffersQCOM                                 unsafe.Pointer
	glExtGetProgramBinarySourceQCOM                          unsafe.Pointer
	glExtGetProgramsQCOM                                     unsafe.Pointer
	glExtGetRenderbuffersQCOM                                unsafe.Pointer
	glExtGetShadersQCOM                                      unsafe.Pointer
	glExtGetTexLevelParameterivQCOM                          unsafe.Pointer
	glExtGetTexSubImageQCOM                                  unsafe.Pointer
	glExtGetTexturesQCOM                                     unsafe.Pointer
	glExtIsProgramBinaryQCOM                                 unsafe.Pointer
	glExtTexObjectStateOverrideiQCOM                         unsafe.Pointer
	glExtractComponentEXT                                    unsafe.Pointer
	glFeedbackBuffer                                         unsafe.Pointer
	glFeedbackBufferxOES                                     unsafe.Pointer
	glFenceSync                                              unsafe.Pointer
	glFenceSyncAPPLE                                         unsafe.Pointer
	glFinalCombinerInputNV                                   unsafe.Pointer
	glFinish                                                 unsafe.Pointer
	glFinishAsyncSGIX                                        unsafe.Pointer
	glFinishFenceAPPLE                                       unsafe.Pointer
	glFinishFenceNV                                          unsafe.Pointer
	glFinishObjectAPPLE                                      unsafe.Pointer
	glFinishTextureSUNX                                      unsafe.Pointer
	glFlush                                                  unsafe.Pointer
	glFlushMappedBufferRange                                 unsafe.Pointer
	glFlushMappedBufferRangeAPPLE                            unsafe.Pointer
	glFlushMappedBufferRangeEXT                              unsafe.Pointer
	glFlushMappedNamedBufferRange                            unsafe.Pointer
	glFlushMappedNamedBufferRangeEXT                         unsafe.Pointer
	glFlushPixelDataRangeNV                                  unsafe.Pointer
	glFlushRasterSGIX                                        unsafe.Pointer
	glFlushStaticDataIBM                                     unsafe.Pointer
	glFlushVertexArrayRangeAPPLE                             unsafe.Pointer
	glFlushVertexArrayRangeNV                                unsafe.Pointer
	glFogCoordFormatNV                                       unsafe.Pointer
	glFogCoordPointer                                        unsafe.Pointer
	glFogCoordPointerEXT                                     unsafe.Pointer
	glFogCoordPointerListIBM                                 unsafe.Pointer
	glFogCoordd                                              unsafe.Pointer
	glFogCoorddEXT                                           unsafe.Pointer
	glFogCoorddv                                             unsafe.Pointer
	glFogCoorddvEXT                                          unsafe.Pointer
	glFogCoordf                                              unsafe.Pointer
	glFogCoordfEXT                                           unsafe.Pointer
	glFogCoordfv                                             unsafe.Pointer
	glFogCoordfvEXT                                          unsafe.Pointer
	glFogCoordhNV                                            unsafe.Pointer
	glFogCoordhvNV                                           unsafe.Pointer
	glFogFuncSGIS                                            unsafe.Pointer
	glFogf                                                   unsafe.Pointer
	glFogfv                                                  unsafe.Pointer
	glFogi                                                   unsafe.Pointer
	glFogiv                                                  unsafe.Pointer
	glFogx                                                   unsafe.Pointer
	glFogxOES                                                unsafe.Pointer
	glFogxv                                                  unsafe.Pointer
	glFogxvOES                                               unsafe.Pointer
	glFragmentColorMaterialSGIX                              unsafe.Pointer
	glFragmentCoverageColorNV                                unsafe.Pointer
	glFragmentLightModelfSGIX                                unsafe.Pointer
	glFragmentLightModelfvSGIX                               unsafe.Pointer
	glFragmentLightModeliSGIX                                unsafe.Pointer
	glFragmentLightModelivSGIX                               unsafe.Pointer
	glFragmentLightfSGIX                                     unsafe.Pointer
	glFragmentLightfvSGIX                                    unsafe.Pointer
	glFragmentLightiSGIX                                     unsafe.Pointer
	glFragmentLightivSGIX                                    unsafe.Pointer
	glFragmentMaterialfSGIX                                  unsafe.Pointer
	glFragmentMaterialfvSGIX                                 unsafe.Pointer
	glFragmentMaterialiSGIX                                  unsafe.Pointer
	glFragmentMaterialivSGIX                                 unsafe.Pointer
	glFrameTerminatorGREMEDY                                 unsafe.Pointer
	glFrameZoomSGIX                                          unsafe.Pointer
	glFramebufferDrawBufferEXT                               unsafe.Pointer
	glFramebufferDrawBuffersEXT                              unsafe.Pointer
	glFramebufferFetchBarrierEXT                             unsafe.Pointer
	glFramebufferFetchBarrierQCOM                            unsafe.Pointer
	glFramebufferFoveationConfigQCOM                         unsafe.Pointer
	glFramebufferFoveationParametersQCOM                     unsafe.Pointer
	glFramebufferParameteri                                  unsafe.Pointer
	glFramebufferPixelLocalStorageSizeEXT                    unsafe.Pointer
	glFramebufferReadBufferEXT                               unsafe.Pointer
	glFramebufferRenderbuffer                                unsafe.Pointer
	glFramebufferRenderbufferEXT                             unsafe.Pointer
	glFramebufferRenderbufferOES                             unsafe.Pointer
	glFramebufferSampleLocationsfvARB                        unsafe.Pointer
	glFramebufferSampleLocationsfvNV                         unsafe.Pointer
	glFramebufferSamplePositionsfvAMD                        unsafe.Pointer
	glFramebufferTexture                                     unsafe.Pointer
	glFramebufferTexture1D                                   unsafe.Pointer
	glFramebufferTexture1DEXT                                unsafe.Pointer
	glFramebufferTexture2D                                   unsafe.Pointer
	glFramebufferTexture2DEXT                                unsafe.Pointer
	glFramebufferTexture2DDownsampleIMG                      unsafe.Pointer
	glFramebufferTexture2DMultisampleEXT                     unsafe.Pointer
	glFramebufferTexture2DMultisampleIMG                     unsafe.Pointer
	glFramebufferTexture2DOES                                unsafe.Pointer
	glFramebufferTexture3D                                   unsafe.Pointer
	glFramebufferTexture3DEXT                                unsafe.Pointer
	glFramebufferTexture3DOES                                unsafe.Pointer
	glFramebufferTextureARB                                  unsafe.Pointer
	glFramebufferTextureEXT                                  unsafe.Pointer
	glFramebufferTextureFaceARB                              unsafe.Pointer
	glFramebufferTextureFaceEXT                              unsafe.Pointer
	glFramebufferTextureLayer                                unsafe.Pointer
	glFramebufferTextureLayerARB                             unsafe.Pointer
	glFramebufferTextureLayerEXT                             unsafe.Pointer
	glFramebufferTextureLayerDownsampleIMG                   unsafe.Pointer
	glFramebufferTextureMultisampleMultiviewOVR              unsafe.Pointer
	glFramebufferTextureMultiviewOVR                         unsafe.Pointer
	glFramebufferTextureOES                                  unsafe.Pointer
	glFreeObjectBufferATI                                    unsafe.Pointer
	glFrontFace                                              unsafe.Pointer
	glFrustum                                                unsafe.Pointer
	glFrustumf                                               unsafe.Pointer
	glFrustumfOES                                            unsafe.Pointer
	glFrustumx                                               unsafe.Pointer
	glFrustumxOES                                            unsafe.Pointer
	glGenAsyncMarkersSGIX                                    unsafe.Pointer
	glGenBuffers                                             unsafe.Pointer
	glGenBuffersARB                                          unsafe.Pointer
	glGenFencesAPPLE                                         unsafe.Pointer
	glGenFencesNV                                            unsafe.Pointer
	glGenFragmentShadersATI                                  unsafe.Pointer
	glGenFramebuffers                                        unsafe.Pointer
	glGenFramebuffersEXT                                     unsafe.Pointer
	glGenFramebuffersOES                                     unsafe.Pointer
	glGenLists                                               unsafe.Pointer
	glGenNamesAMD                                            unsafe.Pointer
	glGenOcclusionQueriesNV                                  unsafe.Pointer
	glGenPathsNV                                             unsafe.Pointer
	glGenPerfMonitorsAMD                                     unsafe.Pointer
	glGenProgramPipelines                                    unsafe.Pointer
	glGenProgramPipelinesEXT                                 unsafe.Pointer
	glGenProgramsARB                                         unsafe.Pointer
	glGenProgramsNV                                          unsafe.Pointer
	glGenQueries                                             unsafe.Pointer
	glGenQueriesARB                                          unsafe.Pointer
	glGenQueriesEXT                                          unsafe.Pointer
	glGenQueryResourceTagNV                                  unsafe.Pointer
	glGenRenderbuffers                                       unsafe.Pointer
	glGenRenderbuffersEXT                                    unsafe.Pointer
	glGenRenderbuffersOES                                    unsafe.Pointer
	glGenSamplers                                            unsafe.Pointer
	glGenSemaphoresEXT                                       unsafe.Pointer
	glGenSymbolsEXT                                          unsafe.Pointer
	glGenTextures                                            unsafe.Pointer
	glGenTexturesEXT                                         unsafe.Pointer
	glGenTransformFeedbacks                                  unsafe.Pointer
	glGenTransformFeedbacksNV                                unsafe.Pointer
	glGenVertexArrays                                        unsafe.Pointer
	glGenVertexArraysAPPLE                                   unsafe.Pointer
	glGenVertexArraysOES                                     unsafe.Pointer
	glGenVertexShadersEXT                                    unsafe.Pointer
	glGenerateMipmap                                         unsafe.Pointer
	glGenerateMipmapEXT                                      unsafe.Pointer
	glGenerateMipmapOES                                      unsafe.Pointer
	glGenerateMultiTexMipmapEXT                              unsafe.Pointer
	glGenerateTextureMipmap                                  unsafe.Pointer
	glGenerateTextureMipmapEXT                               unsafe.Pointer
	glGetActiveAtomicCounterBufferiv                         unsafe.Pointer
	glGetActiveAttrib                                        unsafe.Pointer
	glGetActiveAttribARB                                     unsafe.Pointer
	glGetActiveSubroutineName                                unsafe.Pointer
	glGetActiveSubroutineUniformName                         unsafe.Pointer
	glGetActiveSubroutineUniformiv                           unsafe.Pointer
	glGetActiveUniform                                       unsafe.Pointer
	glGetActiveUniformARB                                    unsafe.Pointer
	glGetActiveUniformBlockName                              unsafe.Pointer
	glGetActiveUniformBlockiv                                unsafe.Pointer
	glGetActiveUniformName                                   unsafe.Pointer
	glGetActiveUniformsiv                                    unsafe.Pointer
	glGetActiveVaryingNV                                     unsafe.Pointer
	glGetArrayObjectfvATI                                    unsafe.Pointer
	glGetArrayObjectivATI                                    unsafe.Pointer
	glGetAttachedObjectsARB                                  unsafe.Pointer
	glGetAttachedShaders                                     unsafe.Pointer
	glGetAttribLocation                                      unsafe.Pointer
	glGetAttribLocationARB                                   unsafe.Pointer
	glGetBooleanIndexedvEXT                                  unsafe.Pointer
	glGetBooleani_v                                          unsafe.Pointer
	glGetBooleanv                                            unsafe.Pointer
	glGetBufferParameteri64v                                 unsafe.Pointer
	glGetBufferParameteriv                                   unsafe.Pointer
	glGetBufferParameterivARB                                unsafe.Pointer
	glGetBufferParameterui64vNV                              unsafe.Pointer
	glGetBufferPointerv                                      unsafe.Pointer
	glGetBufferPointervARB                                   unsafe.Pointer
	glGetBufferPointervOES                                   unsafe.Pointer
	glGetBufferSubData                                       unsafe.Pointer
	glGetBufferSubDataARB                                    unsafe.Pointer
	glGetClipPlane                                           unsafe.Pointer
	glGetClipPlanef                                          unsafe.Pointer
	glGetClipPlanefOES                                       unsafe.Pointer
	glGetClipPlanex                                          unsafe.Pointer
	glGetClipPlanexOES                                       unsafe.Pointer
	glGetColorTable                                          unsafe.Pointer
	glGetColorTableEXT                                       unsafe.Pointer
	glGetColorTableParameterfv                               unsafe.Pointer
	glGetColorTableParameterfvEXT                            unsafe.Pointer
	glGetColorTableParameterfvSGI                            unsafe.Pointer
	glGetColorTableParameteriv                               unsafe.Pointer
	glGetColorTableParameterivEXT                            unsafe.Pointer
	glGetColorTableParameterivSGI                            unsafe.Pointer
	glGetColorTableSGI                                       unsafe.Pointer
	glGetCombinerInputParameterfvNV                          unsafe.Pointer
	glGetCombinerInputParameterivNV                          unsafe.Pointer
	glGetCombinerOutputParameterfvNV                         unsafe.Pointer
	glGetCombinerOutputParameterivNV                         unsafe.Pointer
	glGetCombinerStageParameterfvNV                          unsafe.Pointer
	glGetCommandHeaderNV                                     unsafe.Pointer
	glGetCompressedMultiTexImageEXT                          unsafe.Pointer
	glGetCompressedTexImage                                  unsafe.Pointer
	glGetCompressedTexImageARB                               unsafe.Pointer
	glGetCompressedTextureImage                              unsafe.Pointer
	glGetCompressedTextureImageEXT                           unsafe.Pointer
	glGetCompressedTextureSubImage                           unsafe.Pointer
	glGetConvolutionFilter                                   unsafe.Pointer
	glGetConvolutionFilterEXT                                unsafe.Pointer
	glGetConvolutionParameterfv                              unsafe.Pointer
	glGetConvolutionParameterfvEXT                           unsafe.Pointer
	glGetConvolutionParameteriv                              unsafe.Pointer
	glGetConvolutionParameterivEXT                           unsafe.Pointer
	glGetConvolutionParameterxvOES                           unsafe.Pointer
	glGetCoverageModulationTableNV                           unsafe.Pointer
	glGetDebugMessageLog                                     unsafe.Pointer
	glGetDebugMessageLogAMD                                  unsafe.Pointer
	glGetDebugMessageLogARB                                  unsafe.Pointer
	glGetDebugMessageLogKHR                                  unsafe.Pointer
	glGetDetailTexFuncSGIS                                   unsafe.Pointer
	glGetDoubleIndexedvEXT                                   unsafe.Pointer
	glGetDoublei_v                                           unsafe.Pointer
	glGetDoublei_vEXT                                        unsafe.Pointer
	glGetDoublev                                             unsafe.Pointer
	glGetDriverControlStringQCOM                             unsafe.Pointer
	glGetDriverControlsQCOM                                  unsafe.Pointer
	glGetError                                               unsafe.Pointer
	glGetFenceivNV                                           unsafe.Pointer
	glGetFinalCombinerInputParameterfvNV                     unsafe.Pointer
	glGetFinalCombinerInputParameterivNV                     unsafe.Pointer
	glGetFirstPerfQueryIdINTEL                               unsafe.Pointer
	glGetFixedv                                              unsafe.Pointer
	glGetFixedvOES                                           unsafe.Pointer
	glGetFloatIndexedvEXT                                    unsafe.Pointer
	glGetFloati_v                                            unsafe.Pointer
	glGetFloati_vEXT                                         unsafe.Pointer
	glGetFloati_vNV                                          unsafe.Pointer
	glGetFloati_vOES                                         unsafe.Pointer
	glGetFloatv                                              unsafe.Pointer
	glGetFogFuncSGIS                                         unsafe.Pointer
	glGetFragDataIndex                                       unsafe.Pointer
	glGetFragDataIndexEXT                                    unsafe.Pointer
	glGetFragDataLocation                                    unsafe.Pointer
	glGetFragDataLocationEXT                                 unsafe.Pointer
	glGetFragmentLightfvSGIX                                 unsafe.Pointer
	glGetFragmentLightivSGIX                                 unsafe.Pointer
	glGetFragmentMaterialfvSGIX                              unsafe.Pointer
	glGetFragmentMaterialivSGIX                              unsafe.Pointer
	glGetFramebufferAttachmentParameteriv                    unsafe.Pointer
	glGetFramebufferAttachmentParameterivEXT                 unsafe.Pointer
	glGetFramebufferAttachmentParameterivOES                 unsafe.Pointer
	glGetFramebufferParameterfvAMD                           unsafe.Pointer
	glGetFramebufferParameteriv                              unsafe.Pointer
	glGetFramebufferParameterivEXT                           unsafe.Pointer
	glGetFramebufferPixelLocalStorageSizeEXT                 unsafe.Pointer
	glGetGraphicsResetStatus                                 unsafe.Pointer
	glGetGraphicsResetStatusARB                              unsafe.Pointer
	glGetGraphicsResetStatusEXT                              unsafe.Pointer
	glGetGraphicsResetStatusKHR                              unsafe.Pointer
	glGetHandleARB                                           unsafe.Pointer
	glGetHistogram                                           unsafe.Pointer
	glGetHistogramEXT                                        unsafe.Pointer
	glGetHistogramParameterfv                                unsafe.Pointer
	glGetHistogramParameterfvEXT                             unsafe.Pointer
	glGetHistogramParameteriv                                unsafe.Pointer
	glGetHistogramParameterivEXT                             unsafe.Pointer
	glGetHistogramParameterxvOES                             unsafe.Pointer
	glGetImageHandleARB                                      unsafe.Pointer
	glGetImageHandleNV                                       unsafe.Pointer
	glGetImageTransformParameterfvHP                         unsafe.Pointer
	glGetImageTransformParameterivHP                         unsafe.Pointer
	glGetInfoLogARB                                          unsafe.Pointer
	glGetInstrumentsSGIX                                     unsafe.Pointer
	glGetInteger64i_v                                        unsafe.Pointer
	glGetInteger64v                                          unsafe.Pointer
	glGetInteger64vAPPLE                                     unsafe.Pointer
	glGetInteger64vEXT                                       unsafe.Pointer
	glGetIntegerIndexedvEXT                                  unsafe.Pointer
	glGetIntegeri_v                                          unsafe.Pointer
	glGetIntegeri_vEXT                                       unsafe.Pointer
	glGetIntegerui64i_vNV                                    unsafe.Pointer
	glGetIntegerui64vNV                                      unsafe.Pointer
	glGetIntegerv                                            unsafe.Pointer
	glGetInternalformatSampleivNV                            unsafe.Pointer
	glGetInternalformati64v                                  unsafe.Pointer
	glGetInternalformativ                                    unsafe.Pointer
	glGetInvariantBooleanvEXT                                unsafe.Pointer
	glGetInvariantFloatvEXT                                  unsafe.Pointer
	glGetInvariantIntegervEXT                                unsafe.Pointer
	glGetLightfv                                             unsafe.Pointer
	glGetLightiv                                             unsafe.Pointer
	glGetLightxOES                                           unsafe.Pointer
	glGetLightxv                                             unsafe.Pointer
	glGetLightxvOES                                          unsafe.Pointer
	glGetListParameterfvSGIX                                 unsafe.Pointer
	glGetListParameterivSGIX                                 unsafe.Pointer
	glGetLocalConstantBooleanvEXT                            unsafe.Pointer
	glGetLocalConstantFloatvEXT                              unsafe.Pointer
	glGetLocalConstantIntegervEXT                            unsafe.Pointer
	glGetMapAttribParameterfvNV                              unsafe.Pointer
	glGetMapAttribParameterivNV                              unsafe.Pointer
	glGetMapControlPointsNV                                  unsafe.Pointer
	glGetMapParameterfvNV                                    unsafe.Pointer
	glGetMapParameterivNV                                    unsafe.Pointer
	glGetMapdv                                               unsafe.Pointer
	glGetMapfv                                               unsafe.Pointer
	glGetMapiv                                               unsafe.Pointer
	glGetMapxvOES                                            unsafe.Pointer
	glGetMaterialfv                                          unsafe.Pointer
	glGetMaterialiv                                          unsafe.Pointer
	glGetMaterialxOES                                        unsafe.Pointer
	glGetMaterialxv                                          unsafe.Pointer
	glGetMaterialxvOES                                       unsafe.Pointer
	glGetMemoryObjectDetachedResourcesuivNV                  unsafe.Pointer
	glGetMemoryObjectParameterivEXT                          unsafe.Pointer
	glGetMinmax                                              unsafe.Pointer
	glGetMinmaxEXT                                           unsafe.Pointer
	glGetMinmaxParameterfv                                   unsafe.Pointer
	glGetMinmaxParameterfvEXT                                unsafe.Pointer
	glGetMinmaxParameteriv                                   unsafe.Pointer
	glGetMinmaxParameterivEXT                                unsafe.Pointer
	glGetMultiTexEnvfvEXT                                    unsafe.Pointer
	glGetMultiTexEnvivEXT                                    unsafe.Pointer
	glGetMultiTexGendvEXT                                    unsafe.Pointer
	glGetMultiTexGenfvEXT                                    unsafe.Pointer
	glGetMultiTexGenivEXT                                    unsafe.Pointer
	glGetMultiTexImageEXT                                    unsafe.Pointer
	glGetMultiTexLevelParameterfvEXT                         unsafe.Pointer
	glGetMultiTexLevelParameterivEXT                         unsafe.Pointer
	glGetMultiTexParameterIivEXT                             unsafe.Pointer
	glGetMultiTexParameterIuivEXT                            unsafe.Pointer
	glGetMultiTexParameterfvEXT                              unsafe.Pointer
	glGetMultiTexParameterivEXT                              unsafe.Pointer
	glGetMultisamplefv                                       unsafe.Pointer
	glGetMultisamplefvNV                                     unsafe.Pointer
	glGetNamedBufferParameteri64v                            unsafe.Pointer
	glGetNamedBufferParameteriv                              unsafe.Pointer
	glGetNamedBufferParameterivEXT                           unsafe.Pointer
	glGetNamedBufferParameterui64vNV                         unsafe.Pointer
	glGetNamedBufferPointerv                                 unsafe.Pointer
	glGetNamedBufferPointervEXT                              unsafe.Pointer
	glGetNamedBufferSubData                                  unsafe.Pointer
	glGetNamedBufferSubDataEXT                               unsafe.Pointer
	glGetNamedFramebufferParameterfvAMD                      unsafe.Pointer
	glGetNamedFramebufferAttachmentParameteriv               unsafe.Pointer
	glGetNamedFramebufferAttachmentParameterivEXT            unsafe.Pointer
	glGetNamedFramebufferParameteriv                         unsafe.Pointer
	glGetNamedFramebufferParameterivEXT                      unsafe.Pointer
	glGetNamedProgramLocalParameterIivEXT                    unsafe.Pointer
	glGetNamedProgramLocalParameterIuivEXT                   unsafe.Pointer
	glGetNamedProgramLocalParameterdvEXT                     unsafe.Pointer
	glGetNamedProgramLocalParameterfvEXT                     unsafe.Pointer
	glGetNamedProgramStringEXT                               unsafe.Pointer
	glGetNamedProgramivEXT                                   unsafe.Pointer
	glGetNamedRenderbufferParameteriv                        unsafe.Pointer
	glGetNamedRenderbufferParameterivEXT                     unsafe.Pointer
	glGetNamedStringARB                                      unsafe.Pointer
	glGetNamedStringivARB                                    unsafe.Pointer
	glGetNextPerfQueryIdINTEL                                unsafe.Pointer
	glGetObjectBufferfvATI                                   unsafe.Pointer
	glGetObjectBufferivATI                                   unsafe.Pointer
	glGetObjectLabel                                         unsafe.Pointer
	glGetObjectLabelEXT                                      unsafe.Pointer
	glGetObjectLabelKHR                                      unsafe.Pointer
	glGetObjectParameterfvARB                                unsafe.Pointer
	glGetObjectParameterivAPPLE                              unsafe.Pointer
	glGetObjectParameterivARB                                unsafe.Pointer
	glGetObjectPtrLabel                                      unsafe.Pointer
	glGetObjectPtrLabelKHR                                   unsafe.Pointer
	glGetOcclusionQueryivNV                                  unsafe.Pointer
	glGetOcclusionQueryuivNV                                 unsafe.Pointer
	glGetPathColorGenfvNV                                    unsafe.Pointer
	glGetPathColorGenivNV                                    unsafe.Pointer
	glGetPathCommandsNV                                      unsafe.Pointer
	glGetPathCoordsNV                                        unsafe.Pointer
	glGetPathDashArrayNV                                     unsafe.Pointer
	glGetPathLengthNV                                        unsafe.Pointer
	glGetPathMetricRangeNV                                   unsafe.Pointer
	glGetPathMetricsNV                                       unsafe.Pointer
	glGetPathParameterfvNV                                   unsafe.Pointer
	glGetPathParameterivNV                                   unsafe.Pointer
	glGetPathSpacingNV                                       unsafe.Pointer
	glGetPathTexGenfvNV                                      unsafe.Pointer
	glGetPathTexGenivNV                                      unsafe.Pointer
	glGetPerfCounterInfoINTEL                                unsafe.Pointer
	glGetPerfMonitorCounterDataAMD                           unsafe.Pointer
	glGetPerfMonitorCounterInfoAMD                           unsafe.Pointer
	glGetPerfMonitorCounterStringAMD                         unsafe.Pointer
	glGetPerfMonitorCountersAMD                              unsafe.Pointer
	glGetPerfMonitorGroupStringAMD                           unsafe.Pointer
	glGetPerfMonitorGroupsAMD                                unsafe.Pointer
	glGetPerfQueryDataINTEL                                  unsafe.Pointer
	glGetPerfQueryIdByNameINTEL                              unsafe.Pointer
	glGetPerfQueryInfoINTEL                                  unsafe.Pointer
	glGetPixelMapfv                                          unsafe.Pointer
	glGetPixelMapuiv                                         unsafe.Pointer
	glGetPixelMapusv                                         unsafe.Pointer
	glGetPixelMapxv                                          unsafe.Pointer
	glGetPixelTexGenParameterfvSGIS                          unsafe.Pointer
	glGetPixelTexGenParameterivSGIS                          unsafe.Pointer
	glGetPixelTransformParameterfvEXT                        unsafe.Pointer
	glGetPixelTransformParameterivEXT                        unsafe.Pointer
	glGetPointerIndexedvEXT                                  unsafe.Pointer
	glGetPointeri_vEXT                                       unsafe.Pointer
	glGetPointerv                                            unsafe.Pointer
	glGetPointervEXT                                         unsafe.Pointer
	glGetPointervKHR                                         unsafe.Pointer
	glGetPolygonStipple                                      unsafe.Pointer
	glGetProgramBinary                                       unsafe.Pointer
	glGetProgramBinaryOES                                    unsafe.Pointer
	glGetProgramEnvParameterIivNV                            unsafe.Pointer
	glGetProgramEnvParameterIuivNV                           unsafe.Pointer
	glGetProgramEnvParameterdvARB                            unsafe.Pointer
	glGetProgramEnvParameterfvARB                            unsafe.Pointer
	glGetProgramInfoLog                                      unsafe.Pointer
	glGetProgramInterfaceiv                                  unsafe.Pointer
	glGetProgramLocalParameterIivNV                          unsafe.Pointer
	glGetProgramLocalParameterIuivNV                         unsafe.Pointer
	glGetProgramLocalParameterdvARB                          unsafe.Pointer
	glGetProgramLocalParameterfvARB                          unsafe.Pointer
	glGetProgramNamedParameterdvNV                           unsafe.Pointer
	glGetProgramNamedParameterfvNV                           unsafe.Pointer
	glGetProgramParameterdvNV                                unsafe.Pointer
	glGetProgramParameterfvNV                                unsafe.Pointer
	glGetProgramPipelineInfoLog                              unsafe.Pointer
	glGetProgramPipelineInfoLogEXT                           unsafe.Pointer
	glGetProgramPipelineiv                                   unsafe.Pointer
	glGetProgramPipelineivEXT                                unsafe.Pointer
	glGetProgramResourceIndex                                unsafe.Pointer
	glGetProgramResourceLocation                             unsafe.Pointer
	glGetProgramResourceLocationIndex                        unsafe.Pointer
	glGetProgramResourceLocationIndexEXT                     unsafe.Pointer
	glGetProgramResourceName                                 unsafe.Pointer
	glGetProgramResourcefvNV                                 unsafe.Pointer
	glGetProgramResourceiv                                   unsafe.Pointer
	glGetProgramStageiv                                      unsafe.Pointer
	glGetProgramStringARB                                    unsafe.Pointer
	glGetProgramStringNV                                     unsafe.Pointer
	glGetProgramSubroutineParameteruivNV                     unsafe.Pointer
	glGetProgramiv                                           unsafe.Pointer
	glGetProgramivARB                                        unsafe.Pointer
	glGetProgramivNV                                         unsafe.Pointer
	glGetQueryBufferObjecti64v                               unsafe.Pointer
	glGetQueryBufferObjectiv                                 unsafe.Pointer
	glGetQueryBufferObjectui64v                              unsafe.Pointer
	glGetQueryBufferObjectuiv                                unsafe.Pointer
	glGetQueryIndexediv                                      unsafe.Pointer
	glGetQueryObjecti64v                                     unsafe.Pointer
	glGetQueryObjecti64vEXT                                  unsafe.Pointer
	glGetQueryObjectiv                                       unsafe.Pointer
	glGetQueryObjectivARB                                    unsafe.Pointer
	glGetQueryObjectivEXT                                    unsafe.Pointer
	glGetQueryObjectui64v                                    unsafe.Pointer
	glGetQueryObjectui64vEXT                                 unsafe.Pointer
	glGetQueryObjectuiv                                      unsafe.Pointer
	glGetQueryObjectuivARB                                   unsafe.Pointer
	glGetQueryObjectuivEXT                                   unsafe.Pointer
	glGetQueryiv                                             unsafe.Pointer
	glGetQueryivARB                                          unsafe.Pointer
	glGetQueryivEXT                                          unsafe.Pointer
	glGetRenderbufferParameteriv                             unsafe.Pointer
	glGetRenderbufferParameterivEXT                          unsafe.Pointer
	glGetRenderbufferParameterivOES                          unsafe.Pointer
	glGetSamplerParameterIiv                                 unsafe.Pointer
	glGetSamplerParameterIivEXT                              unsafe.Pointer
	glGetSamplerParameterIivOES                              unsafe.Pointer
	glGetSamplerParameterIuiv                                unsafe.Pointer
	glGetSamplerParameterIuivEXT                             unsafe.Pointer
	glGetSamplerParameterIuivOES                             unsafe.Pointer
	glGetSamplerParameterfv                                  unsafe.Pointer
	glGetSamplerParameteriv                                  unsafe.Pointer
	glGetSemaphoreParameterivNV                              unsafe.Pointer
	glGetSemaphoreParameterui64vEXT                          unsafe.Pointer
	glGetSeparableFilter                                     unsafe.Pointer
	glGetSeparableFilterEXT                                  unsafe.Pointer
	glGetShaderInfoLog                                       unsafe.Pointer
	glGetShaderPrecisionFormat                               unsafe.Pointer
	glGetShaderSource                                        unsafe.Pointer
	glGetShaderSourceARB                                     unsafe.Pointer
	glGetShaderiv                                            unsafe.Pointer
	glGetShadingRateImagePaletteNV                           unsafe.Pointer
	glGetShadingRateSampleLocationivNV                       unsafe.Pointer
	glGetSharpenTexFuncSGIS                                  unsafe.Pointer
	glGetStageIndexNV                                        unsafe.Pointer
	glGetString                                              unsafe.Pointer
	glGetStringi                                             unsafe.Pointer
	glGetSubroutineIndex                                     unsafe.Pointer
	glGetSubroutineUniformLocation                           unsafe.Pointer
	glGetSynciv                                              unsafe.Pointer
	glGetSyncivAPPLE                                         unsafe.Pointer
	glGetTexBumpParameterfvATI                               unsafe.Pointer
	glGetTexBumpParameterivATI                               unsafe.Pointer
	glGetTexEnvfv                                            unsafe.Pointer
	glGetTexEnviv                                            unsafe.Pointer
	glGetTexEnvxv                                            unsafe.Pointer
	glGetTexEnvxvOES                                         unsafe.Pointer
	glGetTexFilterFuncSGIS                                   unsafe.Pointer
	glGetTexGendv                                            unsafe.Pointer
	glGetTexGenfv                                            unsafe.Pointer
	glGetTexGenfvOES                                         unsafe.Pointer
	glGetTexGeniv                                            unsafe.Pointer
	glGetTexGenivOES                                         unsafe.Pointer
	glGetTexGenxvOES                                         unsafe.Pointer
	glGetTexImage                                            unsafe.Pointer
	glGetTexLevelParameterfv                                 unsafe.Pointer
	glGetTexLevelParameteriv                                 unsafe.Pointer
	glGetTexLevelParameterxvOES                              unsafe.Pointer
	glGetTexParameterIiv                                     unsafe.Pointer
	glGetTexParameterIivEXT                                  unsafe.Pointer
	glGetTexParameterIivOES                                  unsafe.Pointer
	glGetTexParameterIuiv                                    unsafe.Pointer
	glGetTexParameterIuivEXT                                 unsafe.Pointer
	glGetTexParameterIuivOES                                 unsafe.Pointer
	glGetTexParameterPointervAPPLE                           unsafe.Pointer
	glGetTexParameterfv                                      unsafe.Pointer
	glGetTexParameteriv                                      unsafe.Pointer
	glGetTexParameterxv                                      unsafe.Pointer
	glGetTexParameterxvOES                                   unsafe.Pointer
	glGetTextureHandleARB                                    unsafe.Pointer
	glGetTextureHandleIMG                                    unsafe.Pointer
	glGetTextureHandleNV                                     unsafe.Pointer
	glGetTextureImage                                        unsafe.Pointer
	glGetTextureImageEXT                                     unsafe.Pointer
	glGetTextureLevelParameterfv                             unsafe.Pointer
	glGetTextureLevelParameterfvEXT                          unsafe.Pointer
	glGetTextureLevelParameteriv                             unsafe.Pointer
	glGetTextureLevelParameterivEXT                          unsafe.Pointer
	glGetTextureParameterIiv                                 unsafe.Pointer
	glGetTextureParameterIivEXT                              unsafe.Pointer
	glGetTextureParameterIuiv                                unsafe.Pointer
	glGetTextureParameterIuivEXT                             unsafe.Pointer
	glGetTextureParameterfv                                  unsafe.Pointer
	glGetTextureParameterfvEXT                               unsafe.Pointer
	glGetTextureParameteriv                                  unsafe.Pointer
	glGetTextureParameterivEXT                               unsafe.Pointer
	glGetTextureSamplerHandleARB                             unsafe.Pointer
	glGetTextureSamplerHandleIMG                             unsafe.Pointer
	glGetTextureSamplerHandleNV                              unsafe.Pointer
	glGetTextureSubImage                                     unsafe.Pointer
	glGetTrackMatrixivNV                                     unsafe.Pointer
	glGetTransformFeedbackVarying                            unsafe.Pointer
	glGetTransformFeedbackVaryingEXT                         unsafe.Pointer
	glGetTransformFeedbackVaryingNV                          unsafe.Pointer
	glGetTransformFeedbacki64_v                              unsafe.Pointer
	glGetTransformFeedbacki_v                                unsafe.Pointer
	glGetTransformFeedbackiv                                 unsafe.Pointer
	glGetTranslatedShaderSourceANGLE                         unsafe.Pointer
	glGetUniformBlockIndex                                   unsafe.Pointer
	glGetUniformBufferSizeEXT                                unsafe.Pointer
	glGetUniformIndices                                      unsafe.Pointer
	glGetUniformLocation                                     unsafe.Pointer
	glGetUniformLocationARB                                  unsafe.Pointer
	glGetUniformOffsetEXT                                    unsafe.Pointer
	glGetUniformSubroutineuiv                                unsafe.Pointer
	glGetUniformdv                                           unsafe.Pointer
	glGetUniformfv                                           unsafe.Pointer
	glGetUniformfvARB                                        unsafe.Pointer
	glGetUniformi64vARB                                      unsafe.Pointer
	glGetUniformi64vNV                                       unsafe.Pointer
	glGetUniformiv                                           unsafe.Pointer
	glGetUniformivARB                                        unsafe.Pointer
	glGetUniformui64vARB                                     unsafe.Pointer
	glGetUniformui64vNV                                      unsafe.Pointer
	glGetUniformuiv                                          unsafe.Pointer
	glGetUniformuivEXT                                       unsafe.Pointer
	glGetUnsignedBytevEXT                                    unsafe.Pointer
	glGetUnsignedBytei_vEXT                                  unsafe.Pointer
	glGetVariantArrayObjectfvATI                             unsafe.Pointer
	glGetVariantArrayObjectivATI                             unsafe.Pointer
	glGetVariantBooleanvEXT                                  unsafe.Pointer
	glGetVariantFloatvEXT                                    unsafe.Pointer
	glGetVariantIntegervEXT                                  unsafe.Pointer
	glGetVariantPointervEXT                                  unsafe.Pointer
	glGetVaryingLocationNV                                   unsafe.Pointer
	glGetVertexArrayIndexed64iv                              unsafe.Pointer
	glGetVertexArrayIndexediv                                unsafe.Pointer
	glGetVertexArrayIntegeri_vEXT                            unsafe.Pointer
	glGetVertexArrayIntegervEXT                              unsafe.Pointer
	glGetVertexArrayPointeri_vEXT                            unsafe.Pointer
	glGetVertexArrayPointervEXT                              unsafe.Pointer
	glGetVertexArrayiv                                       unsafe.Pointer
	glGetVertexAttribArrayObjectfvATI                        unsafe.Pointer
	glGetVertexAttribArrayObjectivATI                        unsafe.Pointer
	glGetVertexAttribIiv                                     unsafe.Pointer
	glGetVertexAttribIivEXT                                  unsafe.Pointer
	glGetVertexAttribIuiv                                    unsafe.Pointer
	glGetVertexAttribIuivEXT                                 unsafe.Pointer
	glGetVertexAttribLdv                                     unsafe.Pointer
	glGetVertexAttribLdvEXT                                  unsafe.Pointer
	glGetVertexAttribLi64vNV                                 unsafe.Pointer
	glGetVertexAttribLui64vARB                               unsafe.Pointer
	glGetVertexAttribLui64vNV                                unsafe.Pointer
	glGetVertexAttribPointerv                                unsafe.Pointer
	glGetVertexAttribPointervARB                             unsafe.Pointer
	glGetVertexAttribPointervNV                              unsafe.Pointer
	glGetVertexAttribdv                                      unsafe.Pointer
	glGetVertexAttribdvARB                                   unsafe.Pointer
	glGetVertexAttribdvNV                                    unsafe.Pointer
	glGetVertexAttribfv                                      unsafe.Pointer
	glGetVertexAttribfvARB                                   unsafe.Pointer
	glGetVertexAttribfvNV                                    unsafe.Pointer
	glGetVertexAttribiv                                      unsafe.Pointer
	glGetVertexAttribivARB                                   unsafe.Pointer
	glGetVertexAttribivNV                                    unsafe.Pointer
	glGetVideoCaptureStreamdvNV                              unsafe.Pointer
	glGetVideoCaptureStreamfvNV                              unsafe.Pointer
	glGetVideoCaptureStreamivNV                              unsafe.Pointer
	glGetVideoCaptureivNV                                    unsafe.Pointer
	glGetVideoi64vNV                                         unsafe.Pointer
	glGetVideoivNV                                           unsafe.Pointer
	glGetVideoui64vNV                                        unsafe.Pointer
	glGetVideouivNV                                          unsafe.Pointer
	glGetnColorTable                                         unsafe.Pointer
	glGetnColorTableARB                                      unsafe.Pointer
	glGetnCompressedTexImage                                 unsafe.Pointer
	glGetnCompressedTexImageARB                              unsafe.Pointer
	glGetnConvolutionFilter                                  unsafe.Pointer
	glGetnConvolutionFilterARB                               unsafe.Pointer
	glGetnHistogram                                          unsafe.Pointer
	glGetnHistogramARB                                       unsafe.Pointer
	glGetnMapdv                                              unsafe.Pointer
	glGetnMapdvARB                                           unsafe.Pointer
	glGetnMapfv                                              unsafe.Pointer
	glGetnMapfvARB                                           unsafe.Pointer
	glGetnMapiv                                              unsafe.Pointer
	glGetnMapivARB                                           unsafe.Pointer
	glGetnMinmax                                             unsafe.Pointer
	glGetnMinmaxARB                                          unsafe.Pointer
	glGetnPixelMapfv                                         unsafe.Pointer
	glGetnPixelMapfvARB                                      unsafe.Pointer
	glGetnPixelMapuiv                                        unsafe.Pointer
	glGetnPixelMapuivARB                                     unsafe.Pointer
	glGetnPixelMapusv                                        unsafe.Pointer
	glGetnPixelMapusvARB                                     unsafe.Pointer
	glGetnPolygonStipple                                     unsafe.Pointer
	glGetnPolygonStippleARB                                  unsafe.Pointer
	glGetnSeparableFilter                                    unsafe.Pointer
	glGetnSeparableFilterARB                                 unsafe.Pointer
	glGetnTexImage                                           unsafe.Pointer
	glGetnTexImageARB                                        unsafe.Pointer
	glGetnUniformdv                                          unsafe.Pointer
	glGetnUniformdvARB                                       unsafe.Pointer
	glGetnUniformfv                                          unsafe.Pointer
	glGetnUniformfvARB                                       unsafe.Pointer
	glGetnUniformfvEXT                                       unsafe.Pointer
	glGetnUniformfvKHR                                       unsafe.Pointer
	glGetnUniformi64vARB                                     unsafe.Pointer
	glGetnUniformiv                                          unsafe.Pointer
	glGetnUniformivARB                                       unsafe.Pointer
	glGetnUniformivEXT                                       unsafe.Pointer
	glGetnUniformivKHR                                       unsafe.Pointer
	glGetnUniformui64vARB                                    unsafe.Pointer
	glGetnUniformuiv                                         unsafe.Pointer
	glGetnUniformuivARB                                      unsafe.Pointer
	glGetnUniformuivKHR                                      unsafe.Pointer
	glGlobalAlphaFactorbSUN                                  unsafe.Pointer
	glGlobalAlphaFactordSUN                                  unsafe.Pointer
	glGlobalAlphaFactorfSUN                                  unsafe.Pointer
	glGlobalAlphaFactoriSUN                                  unsafe.Pointer
	glGlobalAlphaFactorsSUN                                  unsafe.Pointer
	glGlobalAlphaFactorubSUN                                 unsafe.Pointer
	glGlobalAlphaFactoruiSUN                                 unsafe.Pointer
	glGlobalAlphaFactorusSUN                                 unsafe.Pointer
	glHint                                                   unsafe.Pointer
	glHintPGI                                                unsafe.Pointer
	glHistogram                                              unsafe.Pointer
	glHistogramEXT                                           unsafe.Pointer
	glIglooInterfaceSGIX                                     unsafe.Pointer
	glImageTransformParameterfHP                             unsafe.Pointer
	glImageTransformParameterfvHP                            unsafe.Pointer
	glImageTransformParameteriHP                             unsafe.Pointer
	glImageTransformParameterivHP                            unsafe.Pointer
	glImportMemoryFdEXT                                      unsafe.Pointer
	glImportMemoryWin32HandleEXT                             unsafe.Pointer
	glImportMemoryWin32NameEXT                               unsafe.Pointer
	glImportSemaphoreFdEXT                                   unsafe.Pointer
	glImportSemaphoreWin32HandleEXT                          unsafe.Pointer
	glImportSemaphoreWin32NameEXT                            unsafe.Pointer
	glImportSyncEXT                                          unsafe.Pointer
	glIndexFormatNV                                          unsafe.Pointer
	glIndexFuncEXT                                           unsafe.Pointer
	glIndexMask                                              unsafe.Pointer
	glIndexMaterialEXT                                       unsafe.Pointer
	glIndexPointer                                           unsafe.Pointer
	glIndexPointerEXT                                        unsafe.Pointer
	glIndexPointerListIBM                                    unsafe.Pointer
	glIndexd                                                 unsafe.Pointer
	glIndexdv                                                unsafe.Pointer
	glIndexf                                                 unsafe.Pointer
	glIndexfv                                                unsafe.Pointer
	glIndexi                                                 unsafe.Pointer
	glIndexiv                                                unsafe.Pointer
	glIndexs                                                 unsafe.Pointer
	glIndexsv                                                unsafe.Pointer
	glIndexub                                                unsafe.Pointer
	glIndexubv                                               unsafe.Pointer
	glIndexxOES                                              unsafe.Pointer
	glIndexxvOES                                             unsafe.Pointer
	glInitNames                                              unsafe.Pointer
	glInsertComponentEXT                                     unsafe.Pointer
	glInsertEventMarkerEXT                                   unsafe.Pointer
	glInstrumentsBufferSGIX                                  unsafe.Pointer
	glInterleavedArrays                                      unsafe.Pointer
	glInterpolatePathsNV                                     unsafe.Pointer
	glInvalidateBufferData                                   unsafe.Pointer
	glInvalidateBufferSubData                                unsafe.Pointer
	glInvalidateFramebuffer                                  unsafe.Pointer
	glInvalidateNamedFramebufferData                         unsafe.Pointer
	glInvalidateNamedFramebufferSubData                      unsafe.Pointer
	glInvalidateSubFramebuffer                               unsafe.Pointer
	glInvalidateTexImage                                     unsafe.Pointer
	glInvalidateTexSubImage                                  unsafe.Pointer
	glIsAsyncMarkerSGIX                                      unsafe.Pointer
	glIsBuffer                                               unsafe.Pointer
	glIsBufferARB                                            unsafe.Pointer
	glIsBufferResidentNV                                     unsafe.Pointer
	glIsCommandListNV                                        unsafe.Pointer
	glIsEnabled                                              unsafe.Pointer
	glIsEnabledIndexedEXT                                    unsafe.Pointer
	glIsEnabledi                                             unsafe.Pointer
	glIsEnablediEXT                                          unsafe.Pointer
	glIsEnablediNV                                           unsafe.Pointer
	glIsEnablediOES                                          unsafe.Pointer
	glIsFenceAPPLE                                           unsafe.Pointer
	glIsFenceNV                                              unsafe.Pointer
	glIsFramebuffer                                          unsafe.Pointer
	glIsFramebufferEXT                                       unsafe.Pointer
	glIsFramebufferOES                                       unsafe.Pointer
	glIsImageHandleResidentARB                               unsafe.Pointer
	glIsImageHandleResidentNV                                unsafe.Pointer
	glIsList                                                 unsafe.Pointer
	glIsMemoryObjectEXT                                      unsafe.Pointer
	glIsNameAMD                                              unsafe.Pointer
	glIsNamedBufferResidentNV                                unsafe.Pointer
	glIsNamedStringARB                                       unsafe.Pointer
	glIsObjectBufferATI                                      unsafe.Pointer
	glIsOcclusionQueryNV                                     unsafe.Pointer
	glIsPathNV                                               unsafe.Pointer
	glIsPointInFillPathNV                                    unsafe.Pointer
	glIsPointInStrokePathNV                                  unsafe.Pointer
	glIsProgram                                              unsafe.Pointer
	glIsProgramARB                                           unsafe.Pointer
	glIsProgramNV                                            unsafe.Pointer
	glIsProgramPipeline                                      unsafe.Pointer
	glIsProgramPipelineEXT                                   unsafe.Pointer
	glIsQuery                                                unsafe.Pointer
	glIsQueryARB                                             unsafe.Pointer
	glIsQueryEXT                                             unsafe.Pointer
	glIsRenderbuffer                                         unsafe.Pointer
	glIsRenderbufferEXT                                      unsafe.Pointer
	glIsRenderbufferOES                                      unsafe.Pointer
	glIsSemaphoreEXT                                         unsafe.Pointer
	glIsSampler                                              unsafe.Pointer
	glIsShader                                               unsafe.Pointer
	glIsStateNV                                              unsafe.Pointer
	glIsSync                                                 unsafe.Pointer
	glIsSyncAPPLE                                            unsafe.Pointer
	glIsTexture                                              unsafe.Pointer
	glIsTextureEXT                                           unsafe.Pointer
	glIsTextureHandleResidentARB                             unsafe.Pointer
	glIsTextureHandleResidentNV                              unsafe.Pointer
	glIsTransformFeedback                                    unsafe.Pointer
	glIsTransformFeedbackNV                                  unsafe.Pointer
	glIsVariantEnabledEXT                                    unsafe.Pointer
	glIsVertexArray                                          unsafe.Pointer
	glIsVertexArrayAPPLE                                     unsafe.Pointer
	glIsVertexArrayOES                                       unsafe.Pointer
	glIsVertexAttribEnabledAPPLE                             unsafe.Pointer
	glLGPUCopyImageSubDataNVX                                unsafe.Pointer
	glLGPUInterlockNVX                                       unsafe.Pointer
	glLGPUNamedBufferSubDataNVX                              unsafe.Pointer
	glLabelObjectEXT                                         unsafe.Pointer
	glLightEnviSGIX                                          unsafe.Pointer
	glLightModelf                                            unsafe.Pointer
	glLightModelfv                                           unsafe.Pointer
	glLightModeli                                            unsafe.Pointer
	glLightModeliv                                           unsafe.Pointer
	glLightModelx                                            unsafe.Pointer
	glLightModelxOES                                         unsafe.Pointer
	glLightModelxv                                           unsafe.Pointer
	glLightModelxvOES                                        unsafe.Pointer
	glLightf                                                 unsafe.Pointer
	glLightfv                                                unsafe.Pointer
	glLighti                                                 unsafe.Pointer
	glLightiv                                                unsafe.Pointer
	glLightx                                                 unsafe.Pointer
	glLightxOES                                              unsafe.Pointer
	glLightxv                                                unsafe.Pointer
	glLightxvOES                                             unsafe.Pointer
	glLineStipple                                            unsafe.Pointer
	glLineWidth                                              unsafe.Pointer
	glLineWidthx                                             unsafe.Pointer
	glLineWidthxOES                                          unsafe.Pointer
	glLinkProgram                                            unsafe.Pointer
	glLinkProgramARB                                         unsafe.Pointer
	glListBase                                               unsafe.Pointer
	glListDrawCommandsStatesClientNV                         unsafe.Pointer
	glListParameterfSGIX                                     unsafe.Pointer
	glListParameterfvSGIX                                    unsafe.Pointer
	glListParameteriSGIX                                     unsafe.Pointer
	glListParameterivSGIX                                    unsafe.Pointer
	glLoadIdentity                                           unsafe.Pointer
	glLoadIdentityDeformationMapSGIX                         unsafe.Pointer
	glLoadMatrixd                                            unsafe.Pointer
	glLoadMatrixf                                            unsafe.Pointer
	glLoadMatrixx                                            unsafe.Pointer
	glLoadMatrixxOES                                         unsafe.Pointer
	glLoadName                                               unsafe.Pointer
	glLoadPaletteFromModelViewMatrixOES                      unsafe.Pointer
	glLoadProgramNV                                          unsafe.Pointer
	glLoadTransposeMatrixd                                   unsafe.Pointer
	glLoadTransposeMatrixdARB                                unsafe.Pointer
	glLoadTransposeMatrixf                                   unsafe.Pointer
	glLoadTransposeMatrixfARB                                unsafe.Pointer
	glLoadTransposeMatrixxOES                                unsafe.Pointer
	glLockArraysEXT                                          unsafe.Pointer
	glLogicOp                                                unsafe.Pointer
	glMakeBufferNonResidentNV                                unsafe.Pointer
	glMakeBufferResidentNV                                   unsafe.Pointer
	glMakeImageHandleNonResidentARB                          unsafe.Pointer
	glMakeImageHandleNonResidentNV                           unsafe.Pointer
	glMakeImageHandleResidentARB                             unsafe.Pointer
	glMakeImageHandleResidentNV                              unsafe.Pointer
	glMakeNamedBufferNonResidentNV                           unsafe.Pointer
	glMakeNamedBufferResidentNV                              unsafe.Pointer
	glMakeTextureHandleNonResidentARB                        unsafe.Pointer
	glMakeTextureHandleNonResidentNV                         unsafe.Pointer
	glMakeTextureHandleResidentARB                           unsafe.Pointer
	glMakeTextureHandleResidentNV                            unsafe.Pointer
	glMap1d                                                  unsafe.Pointer
	glMap1f                                                  unsafe.Pointer
	glMap1xOES                                               unsafe.Pointer
	glMap2d                                                  unsafe.Pointer
	glMap2f                                                  unsafe.Pointer
	glMap2xOES                                               unsafe.Pointer
	glMapBuffer                                              unsafe.Pointer
	glMapBufferARB                                           unsafe.Pointer
	glMapBufferOES                                           unsafe.Pointer
	glMapBufferRange                                         unsafe.Pointer
	glMapBufferRangeEXT                                      unsafe.Pointer
	glMapControlPointsNV                                     unsafe.Pointer
	glMapGrid1d                                              unsafe.Pointer
	glMapGrid1f                                              unsafe.Pointer
	glMapGrid1xOES                                           unsafe.Pointer
	glMapGrid2d                                              unsafe.Pointer
	glMapGrid2f                                              unsafe.Pointer
	glMapGrid2xOES                                           unsafe.Pointer
	glMapNamedBuffer                                         unsafe.Pointer
	glMapNamedBufferEXT                                      unsafe.Pointer
	glMapNamedBufferRange                                    unsafe.Pointer
	glMapNamedBufferRangeEXT                                 unsafe.Pointer
	glMapObjectBufferATI                                     unsafe.Pointer
	glMapParameterfvNV                                       unsafe.Pointer
	glMapParameterivNV                                       unsafe.Pointer
	glMapTexture2DINTEL                                      unsafe.Pointer
	glMapVertexAttrib1dAPPLE                                 unsafe.Pointer
	glMapVertexAttrib1fAPPLE                                 unsafe.Pointer
	glMapVertexAttrib2dAPPLE                                 unsafe.Pointer
	glMapVertexAttrib2fAPPLE                                 unsafe.Pointer
	glMaterialf                                              unsafe.Pointer
	glMaterialfv                                             unsafe.Pointer
	glMateriali                                              unsafe.Pointer
	glMaterialiv                                             unsafe.Pointer
	glMaterialx                                              unsafe.Pointer
	glMaterialxOES                                           unsafe.Pointer
	glMaterialxv                                             unsafe.Pointer
	glMaterialxvOES                                          unsafe.Pointer
	glMatrixFrustumEXT                                       unsafe.Pointer
	glMatrixIndexPointerARB                                  unsafe.Pointer
	glMatrixIndexPointerOES                                  unsafe.Pointer
	glMatrixIndexubvARB                                      unsafe.Pointer
	glMatrixIndexuivARB                                      unsafe.Pointer
	glMatrixIndexusvARB                                      unsafe.Pointer
	glMatrixLoad3x2fNV                                       unsafe.Pointer
	glMatrixLoad3x3fNV                                       unsafe.Pointer
	glMatrixLoadIdentityEXT                                  unsafe.Pointer
	glMatrixLoadTranspose3x3fNV                              unsafe.Pointer
	glMatrixLoadTransposedEXT                                unsafe.Pointer
	glMatrixLoadTransposefEXT                                unsafe.Pointer
	glMatrixLoaddEXT                                         unsafe.Pointer
	glMatrixLoadfEXT                                         unsafe.Pointer
	glMatrixMode                                             unsafe.Pointer
	glMatrixMult3x2fNV                                       unsafe.Pointer
	glMatrixMult3x3fNV                                       unsafe.Pointer
	glMatrixMultTranspose3x3fNV                              unsafe.Pointer
	glMatrixMultTransposedEXT                                unsafe.Pointer
	glMatrixMultTransposefEXT                                unsafe.Pointer
	glMatrixMultdEXT                                         unsafe.Pointer
	glMatrixMultfEXT                                         unsafe.Pointer
	glMatrixOrthoEXT                                         unsafe.Pointer
	glMatrixPopEXT                                           unsafe.Pointer
	glMatrixPushEXT                                          unsafe.Pointer
	glMatrixRotatedEXT                                       unsafe.Pointer
	glMatrixRotatefEXT                                       unsafe.Pointer
	glMatrixScaledEXT                                        unsafe.Pointer
	glMatrixScalefEXT                                        unsafe.Pointer
	glMatrixTranslatedEXT                                    unsafe.Pointer
	glMatrixTranslatefEXT                                    unsafe.Pointer
	glMaxShaderCompilerThreadsKHR                            unsafe.Pointer
	glMaxShaderCompilerThreadsARB                            unsafe.Pointer
	glMemoryBarrier                                          unsafe.Pointer
	glMemoryBarrierByRegion                                  unsafe.Pointer
	glMemoryBarrierEXT                                       unsafe.Pointer
	glMemoryObjectParameterivEXT                             unsafe.Pointer
	glMinSampleShading                                       unsafe.Pointer
	glMinSampleShadingARB                                    unsafe.Pointer
	glMinSampleShadingOES                                    unsafe.Pointer
	glMinmax                                                 unsafe.Pointer
	glMinmaxEXT                                              unsafe.Pointer
	glMultMatrixd                                            unsafe.Pointer
	glMultMatrixf                                            unsafe.Pointer
	glMultMatrixx                                            unsafe.Pointer
	glMultMatrixxOES                                         unsafe.Pointer
	glMultTransposeMatrixd                                   unsafe.Pointer
	glMultTransposeMatrixdARB                                unsafe.Pointer
	glMultTransposeMatrixf                                   unsafe.Pointer
	glMultTransposeMatrixfARB                                unsafe.Pointer
	glMultTransposeMatrixxOES                                unsafe.Pointer
	glMultiDrawArrays                                        unsafe.Pointer
	glMultiDrawArraysEXT                                     unsafe.Pointer
	glMultiDrawArraysIndirect                                unsafe.Pointer
	glMultiDrawArraysIndirectAMD                             unsafe.Pointer
	glMultiDrawArraysIndirectBindlessCountNV                 unsafe.Pointer
	glMultiDrawArraysIndirectBindlessNV                      unsafe.Pointer
	glMultiDrawArraysIndirectCount                           unsafe.Pointer
	glMultiDrawArraysIndirectCountARB                        unsafe.Pointer
	glMultiDrawArraysIndirectEXT                             unsafe.Pointer
	glMultiDrawElementArrayAPPLE                             unsafe.Pointer
	glMultiDrawElements                                      unsafe.Pointer
	glMultiDrawElementsBaseVertex                            unsafe.Pointer
	glMultiDrawElementsBaseVertexEXT                         unsafe.Pointer
	glMultiDrawElementsEXT                                   unsafe.Pointer
	glMultiDrawElementsIndirect                              unsafe.Pointer
	glMultiDrawElementsIndirectAMD                           unsafe.Pointer
	glMultiDrawElementsIndirectBindlessCountNV               unsafe.Pointer
	glMultiDrawElementsIndirectBindlessNV                    unsafe.Pointer
	glMultiDrawElementsIndirectCount                         unsafe.Pointer
	glMultiDrawElementsIndirectCountARB                      unsafe.Pointer
	glMultiDrawElementsIndirectEXT                           unsafe.Pointer
	glMultiDrawMeshTasksIndirectNV                           unsafe.Pointer
	glMultiDrawMeshTasksIndirectCountNV                      unsafe.Pointer
	glMultiDrawRangeElementArrayAPPLE                        unsafe.Pointer
	glMultiModeDrawArraysIBM                                 unsafe.Pointer
	glMultiModeDrawElementsIBM                               unsafe.Pointer
	glMultiTexBufferEXT                                      unsafe.Pointer
	glMultiTexCoord1bOES                                     unsafe.Pointer
	glMultiTexCoord1bvOES                                    unsafe.Pointer
	glMultiTexCoord1d                                        unsafe.Pointer
	glMultiTexCoord1dARB                                     unsafe.Pointer
	glMultiTexCoord1dv                                       unsafe.Pointer
	glMultiTexCoord1dvARB                                    unsafe.Pointer
	glMultiTexCoord1f                                        unsafe.Pointer
	glMultiTexCoord1fARB                                     unsafe.Pointer
	glMultiTexCoord1fv                                       unsafe.Pointer
	glMultiTexCoord1fvARB                                    unsafe.Pointer
	glMultiTexCoord1hNV                                      unsafe.Pointer
	glMultiTexCoord1hvNV                                     unsafe.Pointer
	glMultiTexCoord1i                                        unsafe.Pointer
	glMultiTexCoord1iARB                                     unsafe.Pointer
	glMultiTexCoord1iv                                       unsafe.Pointer
	glMultiTexCoord1ivARB                                    unsafe.Pointer
	glMultiTexCoord1s                                        unsafe.Pointer
	glMultiTexCoord1sARB                                     unsafe.Pointer
	glMultiTexCoord1sv                                       unsafe.Pointer
	glMultiTexCoord1svARB                                    unsafe.Pointer
	glMultiTexCoord1xOES                                     unsafe.Pointer
	glMultiTexCoord1xvOES                                    unsafe.Pointer
	glMultiTexCoord2bOES                                     unsafe.Pointer
	glMultiTexCoord2bvOES                                    unsafe.Pointer
	glMultiTexCoord2d                                        unsafe.Pointer
	glMultiTexCoord2dARB                                     unsafe.Pointer
	glMultiTexCoord2dv                                       unsafe.Pointer
	glMultiTexCoord2dvARB                                    unsafe.Pointer
	glMultiTexCoord2f                                        unsafe.Pointer
	glMultiTexCoord2fARB                                     unsafe.Pointer
	glMultiTexCoord2fv                                       unsafe.Pointer
	glMultiTexCoord2fvARB                                    unsafe.Pointer
	glMultiTexCoord2hNV                                      unsafe.Pointer
	glMultiTexCoord2hvNV                                     unsafe.Pointer
	glMultiTexCoord2i                                        unsafe.Pointer
	glMultiTexCoord2iARB                                     unsafe.Pointer
	glMultiTexCoord2iv                                       unsafe.Pointer
	glMultiTexCoord2ivARB                                    unsafe.Pointer
	glMultiTexCoord2s                                        unsafe.Pointer
	glMultiTexCoord2sARB                                     unsafe.Pointer
	glMultiTexCoord2sv                                       unsafe.Pointer
	glMultiTexCoord2svARB                                    unsafe.Pointer
	glMultiTexCoord2xOES                                     unsafe.Pointer
	glMultiTexCoord2xvOES                                    unsafe.Pointer
	glMultiTexCoord3bOES                                     unsafe.Pointer
	glMultiTexCoord3bvOES                                    unsafe.Pointer
	glMultiTexCoord3d                                        unsafe.Pointer
	glMultiTexCoord3dARB                                     unsafe.Pointer
	glMultiTexCoord3dv                                       unsafe.Pointer
	glMultiTexCoord3dvARB                                    unsafe.Pointer
	glMultiTexCoord3f                                        unsafe.Pointer
	glMultiTexCoord3fARB                                     unsafe.Pointer
	glMultiTexCoord3fv                                       unsafe.Pointer
	glMultiTexCoord3fvARB                                    unsafe.Pointer
	glMultiTexCoord3hNV                                      unsafe.Pointer
	glMultiTexCoord3hvNV                                     unsafe.Pointer
	glMultiTexCoord3i                                        unsafe.Pointer
	glMultiTexCoord3iARB                                     unsafe.Pointer
	glMultiTexCoord3iv                                       unsafe.Pointer
	glMultiTexCoord3ivARB                                    unsafe.Pointer
	glMultiTexCoord3s                                        unsafe.Pointer
	glMultiTexCoord3sARB                                     unsafe.Pointer
	glMultiTexCoord3sv                                       unsafe.Pointer
	glMultiTexCoord3svARB                                    unsafe.Pointer
	glMultiTexCoord3xOES                                     unsafe.Pointer
	glMultiTexCoord3xvOES                                    unsafe.Pointer
	glMultiTexCoord4bOES                                     unsafe.Pointer
	glMultiTexCoord4bvOES                                    unsafe.Pointer
	glMultiTexCoord4d                                        unsafe.Pointer
	glMultiTexCoord4dARB                                     unsafe.Pointer
	glMultiTexCoord4dv                                       unsafe.Pointer
	glMultiTexCoord4dvARB                                    unsafe.Pointer
	glMultiTexCoord4f                                        unsafe.Pointer
	glMultiTexCoord4fARB                                     unsafe.Pointer
	glMultiTexCoord4fv                                       unsafe.Pointer
	glMultiTexCoord4fvARB                                    unsafe.Pointer
	glMultiTexCoord4hNV                                      unsafe.Pointer
	glMultiTexCoord4hvNV                                     unsafe.Pointer
	glMultiTexCoord4i                                        unsafe.Pointer
	glMultiTexCoord4iARB                                     unsafe.Pointer
	glMultiTexCoord4iv                                       unsafe.Pointer
	glMultiTexCoord4ivARB                                    unsafe.Pointer
	glMultiTexCoord4s                                        unsafe.Pointer
	glMultiTexCoord4sARB                                     unsafe.Pointer
	glMultiTexCoord4sv                                       unsafe.Pointer
	glMultiTexCoord4svARB                                    unsafe.Pointer
	glMultiTexCoord4x                                        unsafe.Pointer
	glMultiTexCoord4xOES                                     unsafe.Pointer
	glMultiTexCoord4xvOES                                    unsafe.Pointer
	glMultiTexCoordP1ui                                      unsafe.Pointer
	glMultiTexCoordP1uiv                                     unsafe.Pointer
	glMultiTexCoordP2ui                                      unsafe.Pointer
	glMultiTexCoordP2uiv                                     unsafe.Pointer
	glMultiTexCoordP3ui                                      unsafe.Pointer
	glMultiTexCoordP3uiv                                     unsafe.Pointer
	glMultiTexCoordP4ui                                      unsafe.Pointer
	glMultiTexCoordP4uiv                                     unsafe.Pointer
	glMultiTexCoordPointerEXT                                unsafe.Pointer
	glMultiTexEnvfEXT                                        unsafe.Pointer
	glMultiTexEnvfvEXT                                       unsafe.Pointer
	glMultiTexEnviEXT                                        unsafe.Pointer
	glMultiTexEnvivEXT                                       unsafe.Pointer
	glMultiTexGendEXT                                        unsafe.Pointer
	glMultiTexGendvEXT                                       unsafe.Pointer
	glMultiTexGenfEXT                                        unsafe.Pointer
	glMultiTexGenfvEXT                                       unsafe.Pointer
	glMultiTexGeniEXT                                        unsafe.Pointer
	glMultiTexGenivEXT                                       unsafe.Pointer
	glMultiTexImage1DEXT                                     unsafe.Pointer
	glMultiTexImage2DEXT                                     unsafe.Pointer
	glMultiTexImage3DEXT                                     unsafe.Pointer
	glMultiTexParameterIivEXT                                unsafe.Pointer
	glMultiTexParameterIuivEXT                               unsafe.Pointer
	glMultiTexParameterfEXT                                  unsafe.Pointer
	glMultiTexParameterfvEXT                                 unsafe.Pointer
	glMultiTexParameteriEXT                                  unsafe.Pointer
	glMultiTexParameterivEXT                                 unsafe.Pointer
	glMultiTexRenderbufferEXT                                unsafe.Pointer
	glMultiTexSubImage1DEXT                                  unsafe.Pointer
	glMultiTexSubImage2DEXT                                  unsafe.Pointer
	glMultiTexSubImage3DEXT                                  unsafe.Pointer
	glMulticastBarrierNV                                     unsafe.Pointer
	glMulticastBlitFramebufferNV                             unsafe.Pointer
	glMulticastBufferSubDataNV                               unsafe.Pointer
	glMulticastCopyBufferSubDataNV                           unsafe.Pointer
	glMulticastCopyImageSubDataNV                            unsafe.Pointer
	glMulticastFramebufferSampleLocationsfvNV                unsafe.Pointer
	glMulticastGetQueryObjecti64vNV                          unsafe.Pointer
	glMulticastGetQueryObjectivNV                            unsafe.Pointer
	glMulticastGetQueryObjectui64vNV                         unsafe.Pointer
	glMulticastGetQueryObjectuivNV                           unsafe.Pointer
	glMulticastScissorArrayvNVX                              unsafe.Pointer
	glMulticastViewportArrayvNVX                             unsafe.Pointer
	glMulticastViewportPositionWScaleNVX                     unsafe.Pointer
	glMulticastWaitSyncNV                                    unsafe.Pointer
	glNamedBufferAttachMemoryNV                              unsafe.Pointer
	glNamedBufferData                                        unsafe.Pointer
	glNamedBufferDataEXT                                     unsafe.Pointer
	glNamedBufferPageCommitmentARB                           unsafe.Pointer
	glNamedBufferPageCommitmentEXT                           unsafe.Pointer
	glNamedBufferPageCommitmentMemNV                         unsafe.Pointer
	glNamedBufferStorage                                     unsafe.Pointer
	glNamedBufferStorageEXT                                  unsafe.Pointer
	glNamedBufferStorageMemEXT                               unsafe.Pointer
	glNamedBufferSubData                                     unsafe.Pointer
	glNamedBufferSubDataEXT                                  unsafe.Pointer
	glNamedCopyBufferSubDataEXT                              unsafe.Pointer
	glNamedFramebufferDrawBuffer                             unsafe.Pointer
	glNamedFramebufferDrawBuffers                            unsafe.Pointer
	glNamedFramebufferParameteri                             unsafe.Pointer
	glNamedFramebufferParameteriEXT                          unsafe.Pointer
	glNamedFramebufferReadBuffer                             unsafe.Pointer
	glNamedFramebufferRenderbuffer                           unsafe.Pointer
	glNamedFramebufferRenderbufferEXT                        unsafe.Pointer
	glNamedFramebufferSampleLocationsfvARB                   unsafe.Pointer
	glNamedFramebufferSampleLocationsfvNV                    unsafe.Pointer
	glNamedFramebufferTexture                                unsafe.Pointer
	glNamedFramebufferSamplePositionsfvAMD                   unsafe.Pointer
	glNamedFramebufferTexture1DEXT                           unsafe.Pointer
	glNamedFramebufferTexture2DEXT                           unsafe.Pointer
	glNamedFramebufferTexture3DEXT                           unsafe.Pointer
	glNamedFramebufferTextureEXT                             unsafe.Pointer
	glNamedFramebufferTextureFaceEXT                         unsafe.Pointer
	glNamedFramebufferTextureLayer                           unsafe.Pointer
	glNamedFramebufferTextureLayerEXT                        unsafe.Pointer
	glNamedProgramLocalParameter4dEXT                        unsafe.Pointer
	glNamedProgramLocalParameter4dvEXT                       unsafe.Pointer
	glNamedProgramLocalParameter4fEXT                        unsafe.Pointer
	glNamedProgramLocalParameter4fvEXT                       unsafe.Pointer
	glNamedProgramLocalParameterI4iEXT                       unsafe.Pointer
	glNamedProgramLocalParameterI4ivEXT                      unsafe.Pointer
	glNamedProgramLocalParameterI4uiEXT                      unsafe.Pointer
	glNamedProgramLocalParameterI4uivEXT                     unsafe.Pointer
	glNamedProgramLocalParameters4fvEXT                      unsafe.Pointer
	glNamedProgramLocalParametersI4ivEXT                     unsafe.Pointer
	glNamedProgramLocalParametersI4uivEXT                    unsafe.Pointer
	glNamedProgramStringEXT                                  unsafe.Pointer
	glNamedRenderbufferStorage                               unsafe.Pointer
	glNamedRenderbufferStorageEXT                            unsafe.Pointer
	glNamedRenderbufferStorageMultisample                    unsafe.Pointer
	glNamedRenderbufferStorageMultisampleAdvancedAMD         unsafe.Pointer
	glNamedRenderbufferStorageMultisampleCoverageEXT         unsafe.Pointer
	glNamedRenderbufferStorageMultisampleEXT                 unsafe.Pointer
	glNamedStringARB                                         unsafe.Pointer
	glNewList                                                unsafe.Pointer
	glNewObjectBufferATI                                     unsafe.Pointer
	glNormal3b                                               unsafe.Pointer
	glNormal3bv                                              unsafe.Pointer
	glNormal3d                                               unsafe.Pointer
	glNormal3dv                                              unsafe.Pointer
	glNormal3f                                               unsafe.Pointer
	glNormal3fVertex3fSUN                                    unsafe.Pointer
	glNormal3fVertex3fvSUN                                   unsafe.Pointer
	glNormal3fv                                              unsafe.Pointer
	glNormal3hNV                                             unsafe.Pointer
	glNormal3hvNV                                            unsafe.Pointer
	glNormal3i                                               unsafe.Pointer
	glNormal3iv                                              unsafe.Pointer
	glNormal3s                                               unsafe.Pointer
	glNormal3sv                                              unsafe.Pointer
	glNormal3x                                               unsafe.Pointer
	glNormal3xOES                                            unsafe.Pointer
	glNormal3xvOES                                           unsafe.Pointer
	glNormalFormatNV                                         unsafe.Pointer
	glNormalP3ui                                             unsafe.Pointer
	glNormalP3uiv                                            unsafe.Pointer
	glNormalPointer                                          unsafe.Pointer
	glNormalPointerEXT                                       unsafe.Pointer
	glNormalPointerListIBM                                   unsafe.Pointer
	glNormalPointervINTEL                                    unsafe.Pointer
	glNormalStream3bATI                                      unsafe.Pointer
	glNormalStream3bvATI                                     unsafe.Pointer
	glNormalStream3dATI                                      unsafe.Pointer
	glNormalStream3dvATI                                     unsafe.Pointer
	glNormalStream3fATI                                      unsafe.Pointer
	glNormalStream3fvATI                                     unsafe.Pointer
	glNormalStream3iATI                                      unsafe.Pointer
	glNormalStream3ivATI                                     unsafe.Pointer
	glNormalStream3sATI                                      unsafe.Pointer
	glNormalStream3svATI                                     unsafe.Pointer
	glObjectLabel                                            unsafe.Pointer
	glObjectLabelKHR                                         unsafe.Pointer
	glObjectPtrLabel                                         unsafe.Pointer
	glObjectPtrLabelKHR                                      unsafe.Pointer
	glObjectPurgeableAPPLE                                   unsafe.Pointer
	glObjectUnpurgeableAPPLE                                 unsafe.Pointer
	glOrtho                                                  unsafe.Pointer
	glOrthof                                                 unsafe.Pointer
	glOrthofOES                                              unsafe.Pointer
	glOrthox                                                 unsafe.Pointer
	glOrthoxOES                                              unsafe.Pointer
	glPNTrianglesfATI                                        unsafe.Pointer
	glPNTrianglesiATI                                        unsafe.Pointer
	glPassTexCoordATI                                        unsafe.Pointer
	glPassThrough                                            unsafe.Pointer
	glPassThroughxOES                                        unsafe.Pointer
	glPatchParameterfv                                       unsafe.Pointer
	glPatchParameteri                                        unsafe.Pointer
	glPatchParameteriEXT                                     unsafe.Pointer
	glPatchParameteriOES                                     unsafe.Pointer
	glPathColorGenNV                                         unsafe.Pointer
	glPathCommandsNV                                         unsafe.Pointer
	glPathCoordsNV                                           unsafe.Pointer
	glPathCoverDepthFuncNV                                   unsafe.Pointer
	glPathDashArrayNV                                        unsafe.Pointer
	glPathFogGenNV                                           unsafe.Pointer
	glPathGlyphIndexArrayNV                                  unsafe.Pointer
	glPathGlyphIndexRangeNV                                  unsafe.Pointer
	glPathGlyphRangeNV                                       unsafe.Pointer
	glPathGlyphsNV                                           unsafe.Pointer
	glPathMemoryGlyphIndexArrayNV                            unsafe.Pointer
	glPathParameterfNV                                       unsafe.Pointer
	glPathParameterfvNV                                      unsafe.Pointer
	glPathParameteriNV                                       unsafe.Pointer
	glPathParameterivNV                                      unsafe.Pointer
	glPathStencilDepthOffsetNV                               unsafe.Pointer
	glPathStencilFuncNV                                      unsafe.Pointer
	glPathStringNV                                           unsafe.Pointer
	glPathSubCommandsNV                                      unsafe.Pointer
	glPathSubCoordsNV                                        unsafe.Pointer
	glPathTexGenNV                                           unsafe.Pointer
	glPauseTransformFeedback                                 unsafe.Pointer
	glPauseTransformFeedbackNV                               unsafe.Pointer
	glPixelDataRangeNV                                       unsafe.Pointer
	glPixelMapfv                                             unsafe.Pointer
	glPixelMapuiv                                            unsafe.Pointer
	glPixelMapusv                                            unsafe.Pointer
	glPixelMapx                                              unsafe.Pointer
	glPixelStoref                                            unsafe.Pointer
	glPixelStorei                                            unsafe.Pointer
	glPixelStorex                                            unsafe.Pointer
	glPixelTexGenParameterfSGIS                              unsafe.Pointer
	glPixelTexGenParameterfvSGIS                             unsafe.Pointer
	glPixelTexGenParameteriSGIS                              unsafe.Pointer
	glPixelTexGenParameterivSGIS                             unsafe.Pointer
	glPixelTexGenSGIX                                        unsafe.Pointer
	glPixelTransferf                                         unsafe.Pointer
	glPixelTransferi                                         unsafe.Pointer
	glPixelTransferxOES                                      unsafe.Pointer
	glPixelTransformParameterfEXT                            unsafe.Pointer
	glPixelTransformParameterfvEXT                           unsafe.Pointer
	glPixelTransformParameteriEXT                            unsafe.Pointer
	glPixelTransformParameterivEXT                           unsafe.Pointer
	glPixelZoom                                              unsafe.Pointer
	glPixelZoomxOES                                          unsafe.Pointer
	glPointAlongPathNV                                       unsafe.Pointer
	glPointParameterf                                        unsafe.Pointer
	glPointParameterfARB                                     unsafe.Pointer
	glPointParameterfEXT                                     unsafe.Pointer
	glPointParameterfSGIS                                    unsafe.Pointer
	glPointParameterfv                                       unsafe.Pointer
	glPointParameterfvARB                                    unsafe.Pointer
	glPointParameterfvEXT                                    unsafe.Pointer
	glPointParameterfvSGIS                                   unsafe.Pointer
	glPointParameteri                                        unsafe.Pointer
	glPointParameteriNV                                      unsafe.Pointer
	glPointParameteriv                                       unsafe.Pointer
	glPointParameterivNV                                     unsafe.Pointer
	glPointParameterx                                        unsafe.Pointer
	glPointParameterxOES                                     unsafe.Pointer
	glPointParameterxv                                       unsafe.Pointer
	glPointParameterxvOES                                    unsafe.Pointer
	glPointSize                                              unsafe.Pointer
	glPointSizePointerOES                                    unsafe.Pointer
	glPointSizex                                             unsafe.Pointer
	glPointSizexOES                                          unsafe.Pointer
	glPollAsyncSGIX                                          unsafe.Pointer
	glPollInstrumentsSGIX                                    unsafe.Pointer
	glPolygonMode                                            unsafe.Pointer
	glPolygonModeNV                                          unsafe.Pointer
	glPolygonOffset                                          unsafe.Pointer
	glPolygonOffsetClamp                                     unsafe.Pointer
	glPolygonOffsetClampEXT                                  unsafe.Pointer
	glPolygonOffsetEXT                                       unsafe.Pointer
	glPolygonOffsetx                                         unsafe.Pointer
	glPolygonOffsetxOES                                      unsafe.Pointer
	glPolygonStipple                                         unsafe.Pointer
	glPopAttrib                                              unsafe.Pointer
	glPopClientAttrib                                        unsafe.Pointer
	glPopDebugGroup                                          unsafe.Pointer
	glPopDebugGroupKHR                                       unsafe.Pointer
	glPopGroupMarkerEXT                                      unsafe.Pointer
	glPopMatrix                                              unsafe.Pointer
	glPopName                                                unsafe.Pointer
	glPresentFrameDualFillNV                                 unsafe.Pointer
	glPresentFrameKeyedNV                                    unsafe.Pointer
	glPrimitiveBoundingBox                                   unsafe.Pointer
	glPrimitiveBoundingBoxARB                                unsafe.Pointer
	glPrimitiveBoundingBoxEXT                                unsafe.Pointer
	glPrimitiveBoundingBoxOES                                unsafe.Pointer
	glPrimitiveRestartIndex                                  unsafe.Pointer
	glPrimitiveRestartIndexNV                                unsafe.Pointer
	glPrimitiveRestartNV                                     unsafe.Pointer
	glPrioritizeTextures                                     unsafe.Pointer
	glPrioritizeTexturesEXT                                  unsafe.Pointer
	glPrioritizeTexturesxOES                                 unsafe.Pointer
	glProgramBinary                                          unsafe.Pointer
	glProgramBinaryOES                                       unsafe.Pointer
	glProgramBufferParametersIivNV                           unsafe.Pointer
	glProgramBufferParametersIuivNV                          unsafe.Pointer
	glProgramBufferParametersfvNV                            unsafe.Pointer
	glProgramEnvParameter4dARB                               unsafe.Pointer
	glProgramEnvParameter4dvARB                              unsafe.Pointer
	glProgramEnvParameter4fARB                               unsafe.Pointer
	glProgramEnvParameter4fvARB                              unsafe.Pointer
	glProgramEnvParameterI4iNV                               unsafe.Pointer
	glProgramEnvParameterI4ivNV                              unsafe.Pointer
	glProgramEnvParameterI4uiNV                              unsafe.Pointer
	glProgramEnvParameterI4uivNV                             unsafe.Pointer
	glProgramEnvParameters4fvEXT                             unsafe.Pointer
	glProgramEnvParametersI4ivNV                             unsafe.Pointer
	glProgramEnvParametersI4uivNV                            unsafe.Pointer
	glProgramLocalParameter4dARB                             unsafe.Pointer
	glProgramLocalParameter4dvARB                            unsafe.Pointer
	glProgramLocalParameter4fARB                             unsafe.Pointer
	glProgramLocalParameter4fvARB                            unsafe.Pointer
	glProgramLocalParameterI4iNV                             unsafe.Pointer
	glProgramLocalParameterI4ivNV                            unsafe.Pointer
	glProgramLocalParameterI4uiNV                            unsafe.Pointer
	glProgramLocalParameterI4uivNV                           unsafe.Pointer
	glProgramLocalParameters4fvEXT                           unsafe.Pointer
	glProgramLocalParametersI4ivNV                           unsafe.Pointer
	glProgramLocalParametersI4uivNV                          unsafe.Pointer
	glProgramNamedParameter4dNV                              unsafe.Pointer
	glProgramNamedParameter4dvNV                             unsafe.Pointer
	glProgramNamedParameter4fNV                              unsafe.Pointer
	glProgramNamedParameter4fvNV                             unsafe.Pointer
	glProgramParameter4dNV                                   unsafe.Pointer
	glProgramParameter4dvNV                                  unsafe.Pointer
	glProgramParameter4fNV                                   unsafe.Pointer
	glProgramParameter4fvNV                                  unsafe.Pointer
	glProgramParameteri                                      unsafe.Pointer
	glProgramParameteriARB                                   unsafe.Pointer
	glProgramParameteriEXT                                   unsafe.Pointer
	glProgramParameters4dvNV                                 unsafe.Pointer
	glProgramParameters4fvNV                                 unsafe.Pointer
	glProgramPathFragmentInputGenNV                          unsafe.Pointer
	glProgramStringARB                                       unsafe.Pointer
	glProgramSubroutineParametersuivNV                       unsafe.Pointer
	glProgramUniform1d                                       unsafe.Pointer
	glProgramUniform1dEXT                                    unsafe.Pointer
	glProgramUniform1dv                                      unsafe.Pointer
	glProgramUniform1dvEXT                                   unsafe.Pointer
	glProgramUniform1f                                       unsafe.Pointer
	glProgramUniform1fEXT                                    unsafe.Pointer
	glProgramUniform1fv                                      unsafe.Pointer
	glProgramUniform1fvEXT                                   unsafe.Pointer
	glProgramUniform1i                                       unsafe.Pointer
	glProgramUniform1i64ARB                                  unsafe.Pointer
	glProgramUniform1i64NV                                   unsafe.Pointer
	glProgramUniform1i64vARB                                 unsafe.Pointer
	glProgramUniform1i64vNV                                  unsafe.Pointer
	glProgramUniform1iEXT                                    unsafe.Pointer
	glProgramUniform1iv                                      unsafe.Pointer
	glProgramUniform1ivEXT                                   unsafe.Pointer
	glProgramUniform1ui                                      unsafe.Pointer
	glProgramUniform1ui64ARB                                 unsafe.Pointer
	glProgramUniform1ui64NV                                  unsafe.Pointer
	glProgramUniform1ui64vARB                                unsafe.Pointer
	glProgramUniform1ui64vNV                                 unsafe.Pointer
	glProgramUniform1uiEXT                                   unsafe.Pointer
	glProgramUniform1uiv                                     unsafe.Pointer
	glProgramUniform1uivEXT                                  unsafe.Pointer
	glProgramUniform2d                                       unsafe.Pointer
	glProgramUniform2dEXT                                    unsafe.Pointer
	glProgramUniform2dv                                      unsafe.Pointer
	glProgramUniform2dvEXT                                   unsafe.Pointer
	glProgramUniform2f                                       unsafe.Pointer
	glProgramUniform2fEXT                                    unsafe.Pointer
	glProgramUniform2fv                                      unsafe.Pointer
	glProgramUniform2fvEXT                                   unsafe.Pointer
	glProgramUniform2i                                       unsafe.Pointer
	glProgramUniform2i64ARB                                  unsafe.Pointer
	glProgramUniform2i64NV                                   unsafe.Pointer
	glProgramUniform2i64vARB                                 unsafe.Pointer
	glProgramUniform2i64vNV                                  unsafe.Pointer
	glProgramUniform2iEXT                                    unsafe.Pointer
	glProgramUniform2iv                                      unsafe.Pointer
	glProgramUniform2ivEXT                                   unsafe.Pointer
	glProgramUniform2ui                                      unsafe.Pointer
	glProgramUniform2ui64ARB                                 unsafe.Pointer
	glProgramUniform2ui64NV                                  unsafe.Pointer
	glProgramUniform2ui64vARB                                unsafe.Pointer
	glProgramUniform2ui64vNV                                 unsafe.Pointer
	glProgramUniform2uiEXT                                   unsafe.Pointer
	glProgramUniform2uiv                                     unsafe.Pointer
	glProgramUniform2uivEXT                                  unsafe.Pointer
	glProgramUniform3d                                       unsafe.Pointer
	glProgramUniform3dEXT                                    unsafe.Pointer
	glProgramUniform3dv                                      unsafe.Pointer
	glProgramUniform3dvEXT                                   unsafe.Pointer
	glProgramUniform3f                                       unsafe.Pointer
	glProgramUniform3fEXT                                    unsafe.Pointer
	glProgramUniform3fv                                      unsafe.Pointer
	glProgramUniform3fvEXT                                   unsafe.Pointer
	glProgramUniform3i                                       unsafe.Pointer
	glProgramUniform3i64ARB                                  unsafe.Pointer
	glProgramUniform3i64NV                                   unsafe.Pointer
	glProgramUniform3i64vARB                                 unsafe.Pointer
	glProgramUniform3i64vNV                                  unsafe.Pointer
	glProgramUniform3iEXT                                    unsafe.Pointer
	glProgramUniform3iv                                      unsafe.Pointer
	glProgramUniform3ivEXT                                   unsafe.Pointer
	glProgramUniform3ui                                      unsafe.Pointer
	glProgramUniform3ui64ARB                                 unsafe.Pointer
	glProgramUniform3ui64NV                                  unsafe.Pointer
	glProgramUniform3ui64vARB                                unsafe.Pointer
	glProgramUniform3ui64vNV                                 unsafe.Pointer
	glProgramUniform3uiEXT                                   unsafe.Pointer
	glProgramUniform3uiv                                     unsafe.Pointer
	glProgramUniform3uivEXT                                  unsafe.Pointer
	glProgramUniform4d                                       unsafe.Pointer
	glProgramUniform4dEXT                                    unsafe.Pointer
	glProgramUniform4dv                                      unsafe.Pointer
	glProgramUniform4dvEXT                                   unsafe.Pointer
	glProgramUniform4f                                       unsafe.Pointer
	glProgramUniform4fEXT                                    unsafe.Pointer
	glProgramUniform4fv                                      unsafe.Pointer
	glProgramUniform4fvEXT                                   unsafe.Pointer
	glProgramUniform4i                                       unsafe.Pointer
	glProgramUniform4i64ARB                                  unsafe.Pointer
	glProgramUniform4i64NV                                   unsafe.Pointer
	glProgramUniform4i64vARB                                 unsafe.Pointer
	glProgramUniform4i64vNV                                  unsafe.Pointer
	glProgramUniform4iEXT                                    unsafe.Pointer
	glProgramUniform4iv                                      unsafe.Pointer
	glProgramUniform4ivEXT                                   unsafe.Pointer
	glProgramUniform4ui                                      unsafe.Pointer
	glProgramUniform4ui64ARB                                 unsafe.Pointer
	glProgramUniform4ui64NV                                  unsafe.Pointer
	glProgramUniform4ui64vARB                                unsafe.Pointer
	glProgramUniform4ui64vNV                                 unsafe.Pointer
	glProgramUniform4uiEXT                                   unsafe.Pointer
	glProgramUniform4uiv                                     unsafe.Pointer
	glProgramUniform4uivEXT                                  unsafe.Pointer
	glProgramUniformHandleui64ARB                            unsafe.Pointer
	glProgramUniformHandleui64IMG                            unsafe.Pointer
	glProgramUniformHandleui64NV                             unsafe.Pointer
	glProgramUniformHandleui64vARB                           unsafe.Pointer
	glProgramUniformHandleui64vIMG                           unsafe.Pointer
	glProgramUniformHandleui64vNV                            unsafe.Pointer
	glProgramUniformMatrix2dv                                unsafe.Pointer
	glProgramUniformMatrix2dvEXT                             unsafe.Pointer
	glProgramUniformMatrix2fv                                unsafe.Pointer
	glProgramUniformMatrix2fvEXT                             unsafe.Pointer
	glProgramUniformMatrix2x3dv                              unsafe.Pointer
	glProgramUniformMatrix2x3dvEXT                           unsafe.Pointer
	glProgramUniformMatrix2x3fv                              unsafe.Pointer
	glProgramUniformMatrix2x3fvEXT                           unsafe.Pointer
	glProgramUniformMatrix2x4dv                              unsafe.Pointer
	glProgramUniformMatrix2x4dvEXT                           unsafe.Pointer
	glProgramUniformMatrix2x4fv                              unsafe.Pointer
	glProgramUniformMatrix2x4fvEXT                           unsafe.Pointer
	glProgramUniformMatrix3dv                                unsafe.Pointer
	glProgramUniformMatrix3dvEXT                             unsafe.Pointer
	glProgramUniformMatrix3fv                                unsafe.Pointer
	glProgramUniformMatrix3fvEXT                             unsafe.Pointer
	glProgramUniformMatrix3x2dv                              unsafe.Pointer
	glProgramUniformMatrix3x2dvEXT                           unsafe.Pointer
	glProgramUniformMatrix3x2fv                              unsafe.Pointer
	glProgramUniformMatrix3x2fvEXT                           unsafe.Pointer
	glProgramUniformMatrix3x4dv                              unsafe.Pointer
	glProgramUniformMatrix3x4dvEXT                           unsafe.Pointer
	glProgramUniformMatrix3x4fv                              unsafe.Pointer
	glProgramUniformMatrix3x4fvEXT                           unsafe.Pointer
	glProgramUniformMatrix4dv                                unsafe.Pointer
	glProgramUniformMatrix4dvEXT                             unsafe.Pointer
	glProgramUniformMatrix4fv                                unsafe.Pointer
	glProgramUniformMatrix4fvEXT                             unsafe.Pointer
	glProgramUniformMatrix4x2dv                              unsafe.Pointer
	glProgramUniformMatrix4x2dvEXT                           unsafe.Pointer
	glProgramUniformMatrix4x2fv                              unsafe.Pointer
	glProgramUniformMatrix4x2fvEXT                           unsafe.Pointer
	glProgramUniformMatrix4x3dv                              unsafe.Pointer
	glProgramUniformMatrix4x3dvEXT                           unsafe.Pointer
	glProgramUniformMatrix4x3fv                              unsafe.Pointer
	glProgramUniformMatrix4x3fvEXT                           unsafe.Pointer
	glProgramUniformui64NV                                   unsafe.Pointer
	glProgramUniformui64vNV                                  unsafe.Pointer
	glProgramVertexLimitNV                                   unsafe.Pointer
	glProvokingVertex                                        unsafe.Pointer
	glProvokingVertexEXT                                     unsafe.Pointer
	glPushAttrib                                             unsafe.Pointer
	glPushClientAttrib                                       unsafe.Pointer
	glPushClientAttribDefaultEXT                             unsafe.Pointer
	glPushDebugGroup                                         unsafe.Pointer
	glPushDebugGroupKHR                                      unsafe.Pointer
	glPushGroupMarkerEXT                                     unsafe.Pointer
	glPushMatrix                                             unsafe.Pointer
	glPushName                                               unsafe.Pointer
	glQueryCounter                                           unsafe.Pointer
	glQueryCounterEXT                                        unsafe.Pointer
	glQueryMatrixxOES                                        unsafe.Pointer
	glQueryObjectParameteruiAMD                              unsafe.Pointer
	glQueryResourceNV                                        unsafe.Pointer
	glQueryResourceTagNV                                     unsafe.Pointer
	glRasterPos2d                                            unsafe.Pointer
	glRasterPos2dv                                           unsafe.Pointer
	glRasterPos2f                                            unsafe.Pointer
	glRasterPos2fv                                           unsafe.Pointer
	glRasterPos2i                                            unsafe.Pointer
	glRasterPos2iv                                           unsafe.Pointer
	glRasterPos2s                                            unsafe.Pointer
	glRasterPos2sv                                           unsafe.Pointer
	glRasterPos2xOES                                         unsafe.Pointer
	glRasterPos2xvOES                                        unsafe.Pointer
	glRasterPos3d                                            unsafe.Pointer
	glRasterPos3dv                                           unsafe.Pointer
	glRasterPos3f                                            unsafe.Pointer
	glRasterPos3fv                                           unsafe.Pointer
	glRasterPos3i                                            unsafe.Pointer
	glRasterPos3iv                                           unsafe.Pointer
	glRasterPos3s                                            unsafe.Pointer
	glRasterPos3sv                                           unsafe.Pointer
	glRasterPos3xOES                                         unsafe.Pointer
	glRasterPos3xvOES                                        unsafe.Pointer
	glRasterPos4d                                            unsafe.Pointer
	glRasterPos4dv                                           unsafe.Pointer
	glRasterPos4f                                            unsafe.Pointer
	glRasterPos4fv                                           unsafe.Pointer
	glRasterPos4i                                            unsafe.Pointer
	glRasterPos4iv                                           unsafe.Pointer
	glRasterPos4s                                            unsafe.Pointer
	glRasterPos4sv                                           unsafe.Pointer
	glRasterPos4xOES                                         unsafe.Pointer
	glRasterPos4xvOES                                        unsafe.Pointer
	glRasterSamplesEXT                                       unsafe.Pointer
	glReadBuffer                                             unsafe.Pointer
	glReadBufferIndexedEXT                                   unsafe.Pointer
	glReadBufferNV                                           unsafe.Pointer
	glReadInstrumentsSGIX                                    unsafe.Pointer
	glReadPixels                                             unsafe.Pointer
	glReadnPixels                                            unsafe.Pointer
	glReadnPixelsARB                                         unsafe.Pointer
	glReadnPixelsEXT                                         unsafe.Pointer
	glReadnPixelsKHR                                         unsafe.Pointer
	glReleaseKeyedMutexWin32EXT                              unsafe.Pointer
	glRectd                                                  unsafe.Pointer
	glRectdv                                                 unsafe.Pointer
	glRectf                                                  unsafe.Pointer
	glRectfv                                                 unsafe.Pointer
	glRecti                                                  unsafe.Pointer
	glRectiv                                                 unsafe.Pointer
	glRects                                                  unsafe.Pointer
	glRectsv                                                 unsafe.Pointer
	glRectxOES                                               unsafe.Pointer
	glRectxvOES                                              unsafe.Pointer
	glReferencePlaneSGIX                                     unsafe.Pointer
	glReleaseShaderCompiler                                  unsafe.Pointer
	glRenderGpuMaskNV                                        unsafe.Pointer
	glRenderMode                                             unsafe.Pointer
	glRenderbufferStorage                                    unsafe.Pointer
	glRenderbufferStorageEXT                                 unsafe.Pointer
	glRenderbufferStorageMultisample                         unsafe.Pointer
	glRenderbufferStorageMultisampleANGLE                    unsafe.Pointer
	glRenderbufferStorageMultisampleAPPLE                    unsafe.Pointer
	glRenderbufferStorageMultisampleAdvancedAMD              unsafe.Pointer
	glRenderbufferStorageMultisampleCoverageNV               unsafe.Pointer
	glRenderbufferStorageMultisampleEXT                      unsafe.Pointer
	glRenderbufferStorageMultisampleIMG                      unsafe.Pointer
	glRenderbufferStorageMultisampleNV                       unsafe.Pointer
	glRenderbufferStorageOES                                 unsafe.Pointer
	glReplacementCodePointerSUN                              unsafe.Pointer
	glReplacementCodeubSUN                                   unsafe.Pointer
	glReplacementCodeubvSUN                                  unsafe.Pointer
	glReplacementCodeuiColor3fVertex3fSUN                    unsafe.Pointer
	glReplacementCodeuiColor3fVertex3fvSUN                   unsafe.Pointer
	glReplacementCodeuiColor4fNormal3fVertex3fSUN            unsafe.Pointer
	glReplacementCodeuiColor4fNormal3fVertex3fvSUN           unsafe.Pointer
	glReplacementCodeuiColor4ubVertex3fSUN                   unsafe.Pointer
	glReplacementCodeuiColor4ubVertex3fvSUN                  unsafe.Pointer
	glReplacementCodeuiNormal3fVertex3fSUN                   unsafe.Pointer
	glReplacementCodeuiNormal3fVertex3fvSUN                  unsafe.Pointer
	glReplacementCodeuiSUN                                   unsafe.Pointer
	glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN  unsafe.Pointer
	glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN unsafe.Pointer
	glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN         unsafe.Pointer
	glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN        unsafe.Pointer
	glReplacementCodeuiTexCoord2fVertex3fSUN                 unsafe.Pointer
	glReplacementCodeuiTexCoord2fVertex3fvSUN                unsafe.Pointer
	glReplacementCodeuiVertex3fSUN                           unsafe.Pointer
	glReplacementCodeuiVertex3fvSUN                          unsafe.Pointer
	glReplacementCodeuivSUN                                  unsafe.Pointer
	glReplacementCodeusSUN                                   unsafe.Pointer
	glReplacementCodeusvSUN                                  unsafe.Pointer
	glRequestResidentProgramsNV                              unsafe.Pointer
	glResetHistogram                                         unsafe.Pointer
	glResetHistogramEXT                                      unsafe.Pointer
	glResetMemoryObjectParameterNV                           unsafe.Pointer
	glResetMinmax                                            unsafe.Pointer
	glResetMinmaxEXT                                         unsafe.Pointer
	glResizeBuffersMESA                                      unsafe.Pointer
	glResolveDepthValuesNV                                   unsafe.Pointer
	glResolveMultisampleFramebufferAPPLE                     unsafe.Pointer
	glResumeTransformFeedback                                unsafe.Pointer
	glResumeTransformFeedbackNV                              unsafe.Pointer
	glRotated                                                unsafe.Pointer
	glRotatef                                                unsafe.Pointer
	glRotatex                                                unsafe.Pointer
	glRotatexOES                                             unsafe.Pointer
	glSampleCoverage                                         unsafe.Pointer
	glSampleCoverageARB                                      unsafe.Pointer
	glSampleCoveragex                                        unsafe.Pointer
	glSampleCoveragexOES                                     unsafe.Pointer
	glSampleMapATI                                           unsafe.Pointer
	glSampleMaskEXT                                          unsafe.Pointer
	glSampleMaskIndexedNV                                    unsafe.Pointer
	glSampleMaskSGIS                                         unsafe.Pointer
	glSampleMaski                                            unsafe.Pointer
	glSamplePatternEXT                                       unsafe.Pointer
	glSamplePatternSGIS                                      unsafe.Pointer
	glSamplerParameterIiv                                    unsafe.Pointer
	glSamplerParameterIivEXT                                 unsafe.Pointer
	glSamplerParameterIivOES                                 unsafe.Pointer
	glSamplerParameterIuiv                                   unsafe.Pointer
	glSamplerParameterIuivEXT                                unsafe.Pointer
	glSamplerParameterIuivOES                                unsafe.Pointer
	glSamplerParameterf                                      unsafe.Pointer
	glSamplerParameterfv                                     unsafe.Pointer
	glSamplerParameteri                                      unsafe.Pointer
	glSamplerParameteriv                                     unsafe.Pointer
	glScaled                                                 unsafe.Pointer
	glScalef                                                 unsafe.Pointer
	glScalex                                                 unsafe.Pointer
	glScalexOES                                              unsafe.Pointer
	glScissor                                                unsafe.Pointer
	glScissorArrayv                                          unsafe.Pointer
	glScissorArrayvNV                                        unsafe.Pointer
	glScissorArrayvOES                                       unsafe.Pointer
	glScissorExclusiveArrayvNV                               unsafe.Pointer
	glScissorExclusiveNV                                     unsafe.Pointer
	glScissorIndexed                                         unsafe.Pointer
	glScissorIndexedNV                                       unsafe.Pointer
	glScissorIndexedOES                                      unsafe.Pointer
	glScissorIndexedv                                        unsafe.Pointer
	glScissorIndexedvNV                                      unsafe.Pointer
	glScissorIndexedvOES                                     unsafe.Pointer
	glSecondaryColor3b                                       unsafe.Pointer
	glSecondaryColor3bEXT                                    unsafe.Pointer
	glSecondaryColor3bv                                      unsafe.Pointer
	glSecondaryColor3bvEXT                                   unsafe.Pointer
	glSecondaryColor3d                                       unsafe.Pointer
	glSecondaryColor3dEXT                                    unsafe.Pointer
	glSecondaryColor3dv                                      unsafe.Pointer
	glSecondaryColor3dvEXT                                   unsafe.Pointer
	glSecondaryColor3f                                       unsafe.Pointer
	glSecondaryColor3fEXT                                    unsafe.Pointer
	glSecondaryColor3fv                                      unsafe.Pointer
	glSecondaryColor3fvEXT                                   unsafe.Pointer
	glSecondaryColor3hNV                                     unsafe.Pointer
	glSecondaryColor3hvNV                                    unsafe.Pointer
	glSecondaryColor3i                                       unsafe.Pointer
	glSecondaryColor3iEXT                                    unsafe.Pointer
	glSecondaryColor3iv                                      unsafe.Pointer
	glSecondaryColor3ivEXT                                   unsafe.Pointer
	glSecondaryColor3s                                       unsafe.Pointer
	glSecondaryColor3sEXT                                    unsafe.Pointer
	glSecondaryColor3sv                                      unsafe.Pointer
	glSecondaryColor3svEXT                                   unsafe.Pointer
	glSecondaryColor3ub                                      unsafe.Pointer
	glSecondaryColor3ubEXT                                   unsafe.Pointer
	glSecondaryColor3ubv                                     unsafe.Pointer
	glSecondaryColor3ubvEXT                                  unsafe.Pointer
	glSecondaryColor3ui                                      unsafe.Pointer
	glSecondaryColor3uiEXT                                   unsafe.Pointer
	glSecondaryColor3uiv                                     unsafe.Pointer
	glSecondaryColor3uivEXT                                  unsafe.Pointer
	glSecondaryColor3us                                      unsafe.Pointer
	glSecondaryColor3usEXT                                   unsafe.Pointer
	glSecondaryColor3usv                                     unsafe.Pointer
	glSecondaryColor3usvEXT                                  unsafe.Pointer
	glSecondaryColorFormatNV                                 unsafe.Pointer
	glSecondaryColorP3ui                                     unsafe.Pointer
	glSecondaryColorP3uiv                                    unsafe.Pointer
	glSecondaryColorPointer                                  unsafe.Pointer
	glSecondaryColorPointerEXT                               unsafe.Pointer
	glSecondaryColorPointerListIBM                           unsafe.Pointer
	glSelectBuffer                                           unsafe.Pointer
	glSelectPerfMonitorCountersAMD                           unsafe.Pointer
	glSemaphoreParameterivNV                                 unsafe.Pointer
	glSemaphoreParameterui64vEXT                             unsafe.Pointer
	glSeparableFilter2D                                      unsafe.Pointer
	glSeparableFilter2DEXT                                   unsafe.Pointer
	glSetFenceAPPLE                                          unsafe.Pointer
	glSetFenceNV                                             unsafe.Pointer
	glSetFragmentShaderConstantATI                           unsafe.Pointer
	glSetInvariantEXT                                        unsafe.Pointer
	glSetLocalConstantEXT                                    unsafe.Pointer
	glSetMultisamplefvAMD                                    unsafe.Pointer
	glShadeModel                                             unsafe.Pointer
	glShaderBinary                                           unsafe.Pointer
	glShaderOp1EXT                                           unsafe.Pointer
	glShaderOp2EXT                                           unsafe.Pointer
	glShaderOp3EXT                                           unsafe.Pointer
	glShaderSource                                           unsafe.Pointer
	glShaderSourceARB                                        unsafe.Pointer
	glShaderStorageBlockBinding                              unsafe.Pointer
	glShadingRateImageBarrierNV                              unsafe.Pointer
	glShadingRateQCOM                                        unsafe.Pointer
	glShadingRateImagePaletteNV                              unsafe.Pointer
	glShadingRateSampleOrderNV                               unsafe.Pointer
	glShadingRateSampleOrderCustomNV                         unsafe.Pointer
	glSharpenTexFuncSGIS                                     unsafe.Pointer
	glSignalSemaphoreEXT                                     unsafe.Pointer
	glSignalSemaphoreui64NVX                                 unsafe.Pointer
	glSpecializeShader                                       unsafe.Pointer
	glSpecializeShaderARB                                    unsafe.Pointer
	glSpriteParameterfSGIX                                   unsafe.Pointer
	glSpriteParameterfvSGIX                                  unsafe.Pointer
	glSpriteParameteriSGIX                                   unsafe.Pointer
	glSpriteParameterivSGIX                                  unsafe.Pointer
	glStartInstrumentsSGIX                                   unsafe.Pointer
	glStartTilingQCOM                                        unsafe.Pointer
	glStateCaptureNV                                         unsafe.Pointer
	glStencilClearTagEXT                                     unsafe.Pointer
	glStencilFillPathInstancedNV                             unsafe.Pointer
	glStencilFillPathNV                                      unsafe.Pointer
	glStencilFunc                                            unsafe.Pointer
	glStencilFuncSeparate                                    unsafe.Pointer
	glStencilFuncSeparateATI                                 unsafe.Pointer
	glStencilMask                                            unsafe.Pointer
	glStencilMaskSeparate                                    unsafe.Pointer
	glStencilOp                                              unsafe.Pointer
	glStencilOpSeparate                                      unsafe.Pointer
	glStencilOpSeparateATI                                   unsafe.Pointer
	glStencilOpValueAMD                                      unsafe.Pointer
	glStencilStrokePathInstancedNV                           unsafe.Pointer
	glStencilStrokePathNV                                    unsafe.Pointer
	glStencilThenCoverFillPathInstancedNV                    unsafe.Pointer
	glStencilThenCoverFillPathNV                             unsafe.Pointer
	glStencilThenCoverStrokePathInstancedNV                  unsafe.Pointer
	glStencilThenCoverStrokePathNV                           unsafe.Pointer
	glStopInstrumentsSGIX                                    unsafe.Pointer
	glStringMarkerGREMEDY                                    unsafe.Pointer
	glSubpixelPrecisionBiasNV                                unsafe.Pointer
	glSwizzleEXT                                             unsafe.Pointer
	glSyncTextureINTEL                                       unsafe.Pointer
	glTagSampleBufferSGIX                                    unsafe.Pointer
	glTangent3bEXT                                           unsafe.Pointer
	glTangent3bvEXT                                          unsafe.Pointer
	glTangent3dEXT                                           unsafe.Pointer
	glTangent3dvEXT                                          unsafe.Pointer
	glTangent3fEXT                                           unsafe.Pointer
	glTangent3fvEXT                                          unsafe.Pointer
	glTangent3iEXT                                           unsafe.Pointer
	glTangent3ivEXT                                          unsafe.Pointer
	glTangent3sEXT                                           unsafe.Pointer
	glTangent3svEXT                                          unsafe.Pointer
	glTangentPointerEXT                                      unsafe.Pointer
	glTbufferMask3DFX                                        unsafe.Pointer
	glTessellationFactorAMD                                  unsafe.Pointer
	glTessellationModeAMD                                    unsafe.Pointer
	glTestFenceAPPLE                                         unsafe.Pointer
	glTestFenceNV                                            unsafe.Pointer
	glTestObjectAPPLE                                        unsafe.Pointer
	glTexAttachMemoryNV                                      unsafe.Pointer
	glTexBuffer                                              unsafe.Pointer
	glTexBufferARB                                           unsafe.Pointer
	glTexBufferEXT                                           unsafe.Pointer
	glTexBufferOES                                           unsafe.Pointer
	glTexBufferRange                                         unsafe.Pointer
	glTexBufferRangeEXT                                      unsafe.Pointer
	glTexBufferRangeOES                                      unsafe.Pointer
	glTexBumpParameterfvATI                                  unsafe.Pointer
	glTexBumpParameterivATI                                  unsafe.Pointer
	glTexCoord1bOES                                          unsafe.Pointer
	glTexCoord1bvOES                                         unsafe.Pointer
	glTexCoord1d                                             unsafe.Pointer
	glTexCoord1dv                                            unsafe.Pointer
	glTexCoord1f                                             unsafe.Pointer
	glTexCoord1fv                                            unsafe.Pointer
	glTexCoord1hNV                                           unsafe.Pointer
	glTexCoord1hvNV                                          unsafe.Pointer
	glTexCoord1i                                             unsafe.Pointer
	glTexCoord1iv                                            unsafe.Pointer
	glTexCoord1s                                             unsafe.Pointer
	glTexCoord1sv                                            unsafe.Pointer
	glTexCoord1xOES                                          unsafe.Pointer
	glTexCoord1xvOES                                         unsafe.Pointer
	glTexCoord2bOES                                          unsafe.Pointer
	glTexCoord2bvOES                                         unsafe.Pointer
	glTexCoord2d                                             unsafe.Pointer
	glTexCoord2dv                                            unsafe.Pointer
	glTexCoord2f                                             unsafe.Pointer
	glTexCoord2fColor3fVertex3fSUN                           unsafe.Pointer
	glTexCoord2fColor3fVertex3fvSUN                          unsafe.Pointer
	glTexCoord2fColor4fNormal3fVertex3fSUN                   unsafe.Pointer
	glTexCoord2fColor4fNormal3fVertex3fvSUN                  unsafe.Pointer
	glTexCoord2fColor4ubVertex3fSUN                          unsafe.Pointer
	glTexCoord2fColor4ubVertex3fvSUN                         unsafe.Pointer
	glTexCoord2fNormal3fVertex3fSUN                          unsafe.Pointer
	glTexCoord2fNormal3fVertex3fvSUN                         unsafe.Pointer
	glTexCoord2fVertex3fSUN                                  unsafe.Pointer
	glTexCoord2fVertex3fvSUN                                 unsafe.Pointer
	glTexCoord2fv                                            unsafe.Pointer
	glTexCoord2hNV                                           unsafe.Pointer
	glTexCoord2hvNV                                          unsafe.Pointer
	glTexCoord2i                                             unsafe.Pointer
	glTexCoord2iv                                            unsafe.Pointer
	glTexCoord2s                                             unsafe.Pointer
	glTexCoord2sv                                            unsafe.Pointer
	glTexCoord2xOES                                          unsafe.Pointer
	glTexCoord2xvOES                                         unsafe.Pointer
	glTexCoord3bOES                                          unsafe.Pointer
	glTexCoord3bvOES                                         unsafe.Pointer
	glTexCoord3d                                             unsafe.Pointer
	glTexCoord3dv                                            unsafe.Pointer
	glTexCoord3f                                             unsafe.Pointer
	glTexCoord3fv                                            unsafe.Pointer
	glTexCoord3hNV                                           unsafe.Pointer
	glTexCoord3hvNV                                          unsafe.Pointer
	glTexCoord3i                                             unsafe.Pointer
	glTexCoord3iv                                            unsafe.Pointer
	glTexCoord3s                                             unsafe.Pointer
	glTexCoord3sv                                            unsafe.Pointer
	glTexCoord3xOES                                          unsafe.Pointer
	glTexCoord3xvOES                                         unsafe.Pointer
	glTexCoord4bOES                                          unsafe.Pointer
	glTexCoord4bvOES                                         unsafe.Pointer
	glTexCoord4d                                             unsafe.Pointer
	glTexCoord4dv                                            unsafe.Pointer
	glTexCoord4f                                             unsafe.Pointer
	glTexCoord4fColor4fNormal3fVertex4fSUN                   unsafe.Pointer
	glTexCoord4fColor4fNormal3fVertex4fvSUN                  unsafe.Pointer
	glTexCoord4fVertex4fSUN                                  unsafe.Pointer
	glTexCoord4fVertex4fvSUN                                 unsafe.Pointer
	glTexCoord4fv                                            unsafe.Pointer
	glTexCoord4hNV                                           unsafe.Pointer
	glTexCoord4hvNV                                          unsafe.Pointer
	glTexCoord4i                                             unsafe.Pointer
	glTexCoord4iv                                            unsafe.Pointer
	glTexCoord4s                                             unsafe.Pointer
	glTexCoord4sv                                            unsafe.Pointer
	glTexCoord4xOES                                          unsafe.Pointer
	glTexCoord4xvOES                                         unsafe.Pointer
	glTexCoordFormatNV                                       unsafe.Pointer
	glTexCoordP1ui                                           unsafe.Pointer
	glTexCoordP1uiv                                          unsafe.Pointer
	glTexCoordP2ui                                           unsafe.Pointer
	glTexCoordP2uiv                                          unsafe.Pointer
	glTexCoordP3ui                                           unsafe.Pointer
	glTexCoordP3uiv                                          unsafe.Pointer
	glTexCoordP4ui                                           unsafe.Pointer
	glTexCoordP4uiv                                          unsafe.Pointer
	glTexCoordPointer                                        unsafe.Pointer
	glTexCoordPointerEXT                                     unsafe.Pointer
	glTexCoordPointerListIBM                                 unsafe.Pointer
	glTexCoordPointervINTEL                                  unsafe.Pointer
	glTexEnvf                                                unsafe.Pointer
	glTexEnvfv                                               unsafe.Pointer
	glTexEnvi                                                unsafe.Pointer
	glTexEnviv                                               unsafe.Pointer
	glTexEnvx                                                unsafe.Pointer
	glTexEnvxOES                                             unsafe.Pointer
	glTexEnvxv                                               unsafe.Pointer
	glTexEnvxvOES                                            unsafe.Pointer
	glTexEstimateMotionQCOM                                  unsafe.Pointer
	glTexEstimateMotionRegionsQCOM                           unsafe.Pointer
	glExtrapolateTex2DQCOM                                   unsafe.Pointer
	glTexFilterFuncSGIS                                      unsafe.Pointer
	glTexGend                                                unsafe.Pointer
	glTexGendv                                               unsafe.Pointer
	glTexGenf                                                unsafe.Pointer
	glTexGenfOES                                             unsafe.Pointer
	glTexGenfv                                               unsafe.Pointer
	glTexGenfvOES                                            unsafe.Pointer
	glTexGeni                                                unsafe.Pointer
	glTexGeniOES                                             unsafe.Pointer
	glTexGeniv                                               unsafe.Pointer
	glTexGenivOES                                            unsafe.Pointer
	glTexGenxOES                                             unsafe.Pointer
	glTexGenxvOES                                            unsafe.Pointer
	glTexImage1D                                             unsafe.Pointer
	glTexImage2D                                             unsafe.Pointer
	glTexImage2DMultisample                                  unsafe.Pointer
	glTexImage2DMultisampleCoverageNV                        unsafe.Pointer
	glTexImage3D                                             unsafe.Pointer
	glTexImage3DEXT                                          unsafe.Pointer
	glTexImage3DMultisample                                  unsafe.Pointer
	glTexImage3DMultisampleCoverageNV                        unsafe.Pointer
	glTexImage3DOES                                          unsafe.Pointer
	glTexImage4DSGIS                                         unsafe.Pointer
	glTexPageCommitmentARB                                   unsafe.Pointer
	glTexPageCommitmentEXT                                   unsafe.Pointer
	glTexPageCommitmentMemNV                                 unsafe.Pointer
	glTexParameterIiv                                        unsafe.Pointer
	glTexParameterIivEXT                                     unsafe.Pointer
	glTexParameterIivOES                                     unsafe.Pointer
	glTexParameterIuiv                                       unsafe.Pointer
	glTexParameterIuivEXT                                    unsafe.Pointer
	glTexParameterIuivOES                                    unsafe.Pointer
	glTexParameterf                                          unsafe.Pointer
	glTexParameterfv                                         unsafe.Pointer
	glTexParameteri                                          unsafe.Pointer
	glTexParameteriv                                         unsafe.Pointer
	glTexParameterx                                          unsafe.Pointer
	glTexParameterxOES                                       unsafe.Pointer
	glTexParameterxv                                         unsafe.Pointer
	glTexParameterxvOES                                      unsafe.Pointer
	glTexRenderbufferNV                                      unsafe.Pointer
	glTexStorage1D                                           unsafe.Pointer
	glTexStorage1DEXT                                        unsafe.Pointer
	glTexStorage2D                                           unsafe.Pointer
	glTexStorage2DEXT                                        unsafe.Pointer
	glTexStorage2DMultisample                                unsafe.Pointer
	glTexStorage3D                                           unsafe.Pointer
	glTexStorage3DEXT                                        unsafe.Pointer
	glTexStorage3DMultisample                                unsafe.Pointer
	glTexStorage3DMultisampleOES                             unsafe.Pointer
	glTexStorageMem1DEXT                                     unsafe.Pointer
	glTexStorageMem2DEXT                                     unsafe.Pointer
	glTexStorageMem2DMultisampleEXT                          unsafe.Pointer
	glTexStorageMem3DEXT                                     unsafe.Pointer
	glTexStorageMem3DMultisampleEXT                          unsafe.Pointer
	glTexStorageSparseAMD                                    unsafe.Pointer
	glTexSubImage1D                                          unsafe.Pointer
	glTexSubImage1DEXT                                       unsafe.Pointer
	glTexSubImage2D                                          unsafe.Pointer
	glTexSubImage2DEXT                                       unsafe.Pointer
	glTexSubImage3D                                          unsafe.Pointer
	glTexSubImage3DEXT                                       unsafe.Pointer
	glTexSubImage3DOES                                       unsafe.Pointer
	glTexSubImage4DSGIS                                      unsafe.Pointer
	glTextureAttachMemoryNV                                  unsafe.Pointer
	glTextureBarrier                                         unsafe.Pointer
	glTextureBarrierNV                                       unsafe.Pointer
	glTextureBuffer                                          unsafe.Pointer
	glTextureBufferEXT                                       unsafe.Pointer
	glTextureBufferRange                                     unsafe.Pointer
	glTextureBufferRangeEXT                                  unsafe.Pointer
	glTextureColorMaskSGIS                                   unsafe.Pointer
	glTextureFoveationParametersQCOM                         unsafe.Pointer
	glTextureImage1DEXT                                      unsafe.Pointer
	glTextureImage2DEXT                                      unsafe.Pointer
	glTextureImage2DMultisampleCoverageNV                    unsafe.Pointer
	glTextureImage2DMultisampleNV                            unsafe.Pointer
	glTextureImage3DEXT                                      unsafe.Pointer
	glTextureImage3DMultisampleCoverageNV                    unsafe.Pointer
	glTextureImage3DMultisampleNV                            unsafe.Pointer
	glTextureLightEXT                                        unsafe.Pointer
	glTextureMaterialEXT                                     unsafe.Pointer
	glTextureNormalEXT                                       unsafe.Pointer
	glTexturePageCommitmentEXT                               unsafe.Pointer
	glTexturePageCommitmentMemNV                             unsafe.Pointer
	glTextureParameterIiv                                    unsafe.Pointer
	glTextureParameterIivEXT                                 unsafe.Pointer
	glTextureParameterIuiv                                   unsafe.Pointer
	glTextureParameterIuivEXT                                unsafe.Pointer
	glTextureParameterf                                      unsafe.Pointer
	glTextureParameterfEXT                                   unsafe.Pointer
	glTextureParameterfv                                     unsafe.Pointer
	glTextureParameterfvEXT                                  unsafe.Pointer
	glTextureParameteri                                      unsafe.Pointer
	glTextureParameteriEXT                                   unsafe.Pointer
	glTextureParameteriv                                     unsafe.Pointer
	glTextureParameterivEXT                                  unsafe.Pointer
	glTextureRangeAPPLE                                      unsafe.Pointer
	glTextureRenderbufferEXT                                 unsafe.Pointer
	glTextureStorage1D                                       unsafe.Pointer
	glTextureStorage1DEXT                                    unsafe.Pointer
	glTextureStorage2D                                       unsafe.Pointer
	glTextureStorage2DEXT                                    unsafe.Pointer
	glTextureStorage2DMultisample                            unsafe.Pointer
	glTextureStorage2DMultisampleEXT                         unsafe.Pointer
	glTextureStorage3D                                       unsafe.Pointer
	glTextureStorage3DEXT                                    unsafe.Pointer
	glTextureStorage3DMultisample                            unsafe.Pointer
	glTextureStorage3DMultisampleEXT                         unsafe.Pointer
	glTextureStorageMem1DEXT                                 unsafe.Pointer
	glTextureStorageMem2DEXT                                 unsafe.Pointer
	glTextureStorageMem2DMultisampleEXT                      unsafe.Pointer
	glTextureStorageMem3DEXT                                 unsafe.Pointer
	glTextureStorageMem3DMultisampleEXT                      unsafe.Pointer
	glTextureStorageSparseAMD                                unsafe.Pointer
	glTextureSubImage1D                                      unsafe.Pointer
	glTextureSubImage1DEXT                                   unsafe.Pointer
	glTextureSubImage2D                                      unsafe.Pointer
	glTextureSubImage2DEXT                                   unsafe.Pointer
	glTextureSubImage3D                                      unsafe.Pointer
	glTextureSubImage3DEXT                                   unsafe.Pointer
	glTextureView                                            unsafe.Pointer
	glTextureViewEXT                                         unsafe.Pointer
	glTextureViewOES                                         unsafe.Pointer
	glTrackMatrixNV                                          unsafe.Pointer
	glTransformFeedbackAttribsNV                             unsafe.Pointer
	glTransformFeedbackBufferBase                            unsafe.Pointer
	glTransformFeedbackBufferRange                           unsafe.Pointer
	glTransformFeedbackStreamAttribsNV                       unsafe.Pointer
	glTransformFeedbackVaryings                              unsafe.Pointer
	glTransformFeedbackVaryingsEXT                           unsafe.Pointer
	glTransformFeedbackVaryingsNV                            unsafe.Pointer
	glTransformPathNV                                        unsafe.Pointer
	glTranslated                                             unsafe.Pointer
	glTranslatef                                             unsafe.Pointer
	glTranslatex                                             unsafe.Pointer
	glTranslatexOES                                          unsafe.Pointer
	glUniform1d                                              unsafe.Pointer
	glUniform1dv                                             unsafe.Pointer
	glUniform1f                                              unsafe.Pointer
	glUniform1fARB                                           unsafe.Pointer
	glUniform1fv                                             unsafe.Pointer
	glUniform1fvARB                                          unsafe.Pointer
	glUniform1i                                              unsafe.Pointer
	glUniform1i64ARB                                         unsafe.Pointer
	glUniform1i64NV                                          unsafe.Pointer
	glUniform1i64vARB                                        unsafe.Pointer
	glUniform1i64vNV                                         unsafe.Pointer
	glUniform1iARB                                           unsafe.Pointer
	glUniform1iv                                             unsafe.Pointer
	glUniform1ivARB                                          unsafe.Pointer
	glUniform1ui                                             unsafe.Pointer
	glUniform1ui64ARB                                        unsafe.Pointer
	glUniform1ui64NV                                         unsafe.Pointer
	glUniform1ui64vARB                                       unsafe.Pointer
	glUniform1ui64vNV                                        unsafe.Pointer
	glUniform1uiEXT                                          unsafe.Pointer
	glUniform1uiv                                            unsafe.Pointer
	glUniform1uivEXT                                         unsafe.Pointer
	glUniform2d                                              unsafe.Pointer
	glUniform2dv                                             unsafe.Pointer
	glUniform2f                                              unsafe.Pointer
	glUniform2fARB                                           unsafe.Pointer
	glUniform2fv                                             unsafe.Pointer
	glUniform2fvARB                                          unsafe.Pointer
	glUniform2i                                              unsafe.Pointer
	glUniform2i64ARB                                         unsafe.Pointer
	glUniform2i64NV                                          unsafe.Pointer
	glUniform2i64vARB                                        unsafe.Pointer
	glUniform2i64vNV                                         unsafe.Pointer
	glUniform2iARB                                           unsafe.Pointer
	glUniform2iv                                             unsafe.Pointer
	glUniform2ivARB                                          unsafe.Pointer
	glUniform2ui                                             unsafe.Pointer
	glUniform2ui64ARB                                        unsafe.Pointer
	glUniform2ui64NV                                         unsafe.Pointer
	glUniform2ui64vARB                                       unsafe.Pointer
	glUniform2ui64vNV                                        unsafe.Pointer
	glUniform2uiEXT                                          unsafe.Pointer
	glUniform2uiv                                            unsafe.Pointer
	glUniform2uivEXT                                         unsafe.Pointer
	glUniform3d                                              unsafe.Pointer
	glUniform3dv                                             unsafe.Pointer
	glUniform3f                                              unsafe.Pointer
	glUniform3fARB                                           unsafe.Pointer
	glUniform3fv                                             unsafe.Pointer
	glUniform3fvARB                                          unsafe.Pointer
	glUniform3i                                              unsafe.Pointer
	glUniform3i64ARB                                         unsafe.Pointer
	glUniform3i64NV                                          unsafe.Pointer
	glUniform3i64vARB                                        unsafe.Pointer
	glUniform3i64vNV                                         unsafe.Pointer
	glUniform3iARB                                           unsafe.Pointer
	glUniform3iv                                             unsafe.Pointer
	glUniform3ivARB                                          unsafe.Pointer
	glUniform3ui                                             unsafe.Pointer
	glUniform3ui64ARB                                        unsafe.Pointer
	glUniform3ui64NV                                         unsafe.Pointer
	glUniform3ui64vARB                                       unsafe.Pointer
	glUniform3ui64vNV                                        unsafe.Pointer
	glUniform3uiEXT                                          unsafe.Pointer
	glUniform3uiv                                            unsafe.Pointer
	glUniform3uivEXT                                         unsafe.Pointer
	glUniform4d                                              unsafe.Pointer
	glUniform4dv                                             unsafe.Pointer
	glUniform4f                                              unsafe.Pointer
	glUniform4fARB                                           unsafe.Pointer
	glUniform4fv                                             unsafe.Pointer
	glUniform4fvARB                                          unsafe.Pointer
	glUniform4i                                              unsafe.Pointer
	glUniform4i64ARB                                         unsafe.Pointer
	glUniform4i64NV                                          unsafe.Pointer
	glUniform4i64vARB                                        unsafe.Pointer
	glUniform4i64vNV                                         unsafe.Pointer
	glUniform4iARB                                           unsafe.Pointer
	glUniform4iv                                             unsafe.Pointer
	glUniform4ivARB                                          unsafe.Pointer
	glUniform4ui                                             unsafe.Pointer
	glUniform4ui64ARB                                        unsafe.Pointer
	glUniform4ui64NV                                         unsafe.Pointer
	glUniform4ui64vARB                                       unsafe.Pointer
	glUniform4ui64vNV                                        unsafe.Pointer
	glUniform4uiEXT                                          unsafe.Pointer
	glUniform4uiv                                            unsafe.Pointer
	glUniform4uivEXT                                         unsafe.Pointer
	glUniformBlockBinding                                    unsafe.Pointer
	glUniformBufferEXT                                       unsafe.Pointer
	glUniformHandleui64ARB                                   unsafe.Pointer
	glUniformHandleui64IMG                                   unsafe.Pointer
	glUniformHandleui64NV                                    unsafe.Pointer
	glUniformHandleui64vARB                                  unsafe.Pointer
	glUniformHandleui64vIMG                                  unsafe.Pointer
	glUniformHandleui64vNV                                   unsafe.Pointer
	glUniformMatrix2dv                                       unsafe.Pointer
	glUniformMatrix2fv                                       unsafe.Pointer
	glUniformMatrix2fvARB                                    unsafe.Pointer
	glUniformMatrix2x3dv                                     unsafe.Pointer
	glUniformMatrix2x3fv                                     unsafe.Pointer
	glUniformMatrix2x3fvNV                                   unsafe.Pointer
	glUniformMatrix2x4dv                                     unsafe.Pointer
	glUniformMatrix2x4fv                                     unsafe.Pointer
	glUniformMatrix2x4fvNV                                   unsafe.Pointer
	glUniformMatrix3dv                                       unsafe.Pointer
	glUniformMatrix3fv                                       unsafe.Pointer
	glUniformMatrix3fvARB                                    unsafe.Pointer
	glUniformMatrix3x2dv                                     unsafe.Pointer
	glUniformMatrix3x2fv                                     unsafe.Pointer
	glUniformMatrix3x2fvNV                                   unsafe.Pointer
	glUniformMatrix3x4dv                                     unsafe.Pointer
	glUniformMatrix3x4fv                                     unsafe.Pointer
	glUniformMatrix3x4fvNV                                   unsafe.Pointer
	glUniformMatrix4dv                                       unsafe.Pointer
	glUniformMatrix4fv                                       unsafe.Pointer
	glUniformMatrix4fvARB                                    unsafe.Pointer
	glUniformMatrix4x2dv                                     unsafe.Pointer
	glUniformMatrix4x2fv                                     unsafe.Pointer
	glUniformMatrix4x2fvNV                                   unsafe.Pointer
	glUniformMatrix4x3dv                                     unsafe.Pointer
	glUniformMatrix4x3fv                                     unsafe.Pointer
	glUniformMatrix4x3fvNV                                   unsafe.Pointer
	glUniformSubroutinesuiv                                  unsafe.Pointer
	glUniformui64NV                                          unsafe.Pointer
	glUniformui64vNV                                         unsafe.Pointer
	glUnlockArraysEXT                                        unsafe.Pointer
	glUnmapBuffer                                            unsafe.Pointer
	glUnmapBufferARB                                         unsafe.Pointer
	glUnmapBufferOES                                         unsafe.Pointer
	glUnmapNamedBuffer                                       unsafe.Pointer
	glUnmapNamedBufferEXT                                    unsafe.Pointer
	glUnmapObjectBufferATI                                   unsafe.Pointer
	glUnmapTexture2DINTEL                                    unsafe.Pointer
	glUpdateObjectBufferATI                                  unsafe.Pointer
	glUploadGpuMaskNVX                                       unsafe.Pointer
	glUseProgram                                             unsafe.Pointer
	glUseProgramObjectARB                                    unsafe.Pointer
	glUseProgramStages                                       unsafe.Pointer
	glUseProgramStagesEXT                                    unsafe.Pointer
	glUseShaderProgramEXT                                    unsafe.Pointer
	glVDPAUFiniNV                                            unsafe.Pointer
	glVDPAUGetSurfaceivNV                                    unsafe.Pointer
	glVDPAUInitNV                                            unsafe.Pointer
	glVDPAUIsSurfaceNV                                       unsafe.Pointer
	glVDPAUMapSurfacesNV                                     unsafe.Pointer
	glVDPAURegisterOutputSurfaceNV                           unsafe.Pointer
	glVDPAURegisterVideoSurfaceNV                            unsafe.Pointer
	glVDPAURegisterVideoSurfaceWithPictureStructureNV        unsafe.Pointer
	glVDPAUSurfaceAccessNV                                   unsafe.Pointer
	glVDPAUUnmapSurfacesNV                                   unsafe.Pointer
	glVDPAUUnregisterSurfaceNV                               unsafe.Pointer
	glValidateProgram                                        unsafe.Pointer
	glValidateProgramARB                                     unsafe.Pointer
	glValidateProgramPipeline                                unsafe.Pointer
	glValidateProgramPipelineEXT                             unsafe.Pointer
	glVariantArrayObjectATI                                  unsafe.Pointer
	glVariantPointerEXT                                      unsafe.Pointer
	glVariantbvEXT                                           unsafe.Pointer
	glVariantdvEXT                                           unsafe.Pointer
	glVariantfvEXT                                           unsafe.Pointer
	glVariantivEXT                                           unsafe.Pointer
	glVariantsvEXT                                           unsafe.Pointer
	glVariantubvEXT                                          unsafe.Pointer
	glVariantuivEXT                                          unsafe.Pointer
	glVariantusvEXT                                          unsafe.Pointer
	glVertex2bOES                                            unsafe.Pointer
	glVertex2bvOES                                           unsafe.Pointer
	glVertex2d                                               unsafe.Pointer
	glVertex2dv                                              unsafe.Pointer
	glVertex2f                                               unsafe.Pointer
	glVertex2fv                                              unsafe.Pointer
	glVertex2hNV                                             unsafe.Pointer
	glVertex2hvNV                                            unsafe.Pointer
	glVertex2i                                               unsafe.Pointer
	glVertex2iv                                              unsafe.Pointer
	glVertex2s                                               unsafe.Pointer
	glVertex2sv                                              unsafe.Pointer
	glVertex2xOES                                            unsafe.Pointer
	glVertex2xvOES                                           unsafe.Pointer
	glVertex3bOES                                            unsafe.Pointer
	glVertex3bvOES                                           unsafe.Pointer
	glVertex3d                                               unsafe.Pointer
	glVertex3dv                                              unsafe.Pointer
	glVertex3f                                               unsafe.Pointer
	glVertex3fv                                              unsafe.Pointer
	glVertex3hNV                                             unsafe.Pointer
	glVertex3hvNV                                            unsafe.Pointer
	glVertex3i                                               unsafe.Pointer
	glVertex3iv                                              unsafe.Pointer
	glVertex3s                                               unsafe.Pointer
	glVertex3sv                                              unsafe.Pointer
	glVertex3xOES                                            unsafe.Pointer
	glVertex3xvOES                                           unsafe.Pointer
	glVertex4bOES                                            unsafe.Pointer
	glVertex4bvOES                                           unsafe.Pointer
	glVertex4d                                               unsafe.Pointer
	glVertex4dv                                              unsafe.Pointer
	glVertex4f                                               unsafe.Pointer
	glVertex4fv                                              unsafe.Pointer
	glVertex4hNV                                             unsafe.Pointer
	glVertex4hvNV                                            unsafe.Pointer
	glVertex4i                                               unsafe.Pointer
	glVertex4iv                                              unsafe.Pointer
	glVertex4s                                               unsafe.Pointer
	glVertex4sv                                              unsafe.Pointer
	glVertex4xOES                                            unsafe.Pointer
	glVertex4xvOES                                           unsafe.Pointer
	glVertexArrayAttribBinding                               unsafe.Pointer
	glVertexArrayAttribFormat                                unsafe.Pointer
	glVertexArrayAttribIFormat                               unsafe.Pointer
	glVertexArrayAttribLFormat                               unsafe.Pointer
	glVertexArrayBindVertexBufferEXT                         unsafe.Pointer
	glVertexArrayBindingDivisor                              unsafe.Pointer
	glVertexArrayColorOffsetEXT                              unsafe.Pointer
	glVertexArrayEdgeFlagOffsetEXT                           unsafe.Pointer
	glVertexArrayElementBuffer                               unsafe.Pointer
	glVertexArrayFogCoordOffsetEXT                           unsafe.Pointer
	glVertexArrayIndexOffsetEXT                              unsafe.Pointer
	glVertexArrayMultiTexCoordOffsetEXT                      unsafe.Pointer
	glVertexArrayNormalOffsetEXT                             unsafe.Pointer
	glVertexArrayParameteriAPPLE                             unsafe.Pointer
	glVertexArrayRangeAPPLE                                  unsafe.Pointer
	glVertexArrayRangeNV                                     unsafe.Pointer
	glVertexArraySecondaryColorOffsetEXT                     unsafe.Pointer
	glVertexArrayTexCoordOffsetEXT                           unsafe.Pointer
	glVertexArrayVertexAttribBindingEXT                      unsafe.Pointer
	glVertexArrayVertexAttribDivisorEXT                      unsafe.Pointer
	glVertexArrayVertexAttribFormatEXT                       unsafe.Pointer
	glVertexArrayVertexAttribIFormatEXT                      unsafe.Pointer
	glVertexArrayVertexAttribIOffsetEXT                      unsafe.Pointer
	glVertexArrayVertexAttribLFormatEXT                      unsafe.Pointer
	glVertexArrayVertexAttribLOffsetEXT                      unsafe.Pointer
	glVertexArrayVertexAttribOffsetEXT                       unsafe.Pointer
	glVertexArrayVertexBindingDivisorEXT                     unsafe.Pointer
	glVertexArrayVertexBuffer                                unsafe.Pointer
	glVertexArrayVertexBuffers                               unsafe.Pointer
	glVertexArrayVertexOffsetEXT                             unsafe.Pointer
	glVertexAttrib1d                                         unsafe.Pointer
	glVertexAttrib1dARB                                      unsafe.Pointer
	glVertexAttrib1dNV                                       unsafe.Pointer
	glVertexAttrib1dv                                        unsafe.Pointer
	glVertexAttrib1dvARB                                     unsafe.Pointer
	glVertexAttrib1dvNV                                      unsafe.Pointer
	glVertexAttrib1f                                         unsafe.Pointer
	glVertexAttrib1fARB                                      unsafe.Pointer
	glVertexAttrib1fNV                                       unsafe.Pointer
	glVertexAttrib1fv                                        unsafe.Pointer
	glVertexAttrib1fvARB                                     unsafe.Pointer
	glVertexAttrib1fvNV                                      unsafe.Pointer
	glVertexAttrib1hNV                                       unsafe.Pointer
	glVertexAttrib1hvNV                                      unsafe.Pointer
	glVertexAttrib1s                                         unsafe.Pointer
	glVertexAttrib1sARB                                      unsafe.Pointer
	glVertexAttrib1sNV                                       unsafe.Pointer
	glVertexAttrib1sv                                        unsafe.Pointer
	glVertexAttrib1svARB                                     unsafe.Pointer
	glVertexAttrib1svNV                                      unsafe.Pointer
	glVertexAttrib2d                                         unsafe.Pointer
	glVertexAttrib2dARB                                      unsafe.Pointer
	glVertexAttrib2dNV                                       unsafe.Pointer
	glVertexAttrib2dv                                        unsafe.Pointer
	glVertexAttrib2dvARB                                     unsafe.Pointer
	glVertexAttrib2dvNV                                      unsafe.Pointer
	glVertexAttrib2f                                         unsafe.Pointer
	glVertexAttrib2fARB                                      unsafe.Pointer
	glVertexAttrib2fNV                                       unsafe.Pointer
	glVertexAttrib2fv                                        unsafe.Pointer
	glVertexAttrib2fvARB                                     unsafe.Pointer
	glVertexAttrib2fvNV                                      unsafe.Pointer
	glVertexAttrib2hNV                                       unsafe.Pointer
	glVertexAttrib2hvNV                                      unsafe.Pointer
	glVertexAttrib2s                                         unsafe.Pointer
	glVertexAttrib2sARB                                      unsafe.Pointer
	glVertexAttrib2sNV                                       unsafe.Pointer
	glVertexAttrib2sv                                        unsafe.Pointer
	glVertexAttrib2svARB                                     unsafe.Pointer
	glVertexAttrib2svNV                                      unsafe.Pointer
	glVertexAttrib3d                                         unsafe.Pointer
	glVertexAttrib3dARB                                      unsafe.Pointer
	glVertexAttrib3dNV                                       unsafe.Pointer
	glVertexAttrib3dv                                        unsafe.Pointer
	glVertexAttrib3dvARB                                     unsafe.Pointer
	glVertexAttrib3dvNV                                      unsafe.Pointer
	glVertexAttrib3f                                         unsafe.Pointer
	glVertexAttrib3fARB                                      unsafe.Pointer
	glVertexAttrib3fNV                                       unsafe.Pointer
	glVertexAttrib3fv                                        unsafe.Pointer
	glVertexAttrib3fvARB                                     unsafe.Pointer
	glVertexAttrib3fvNV                                      unsafe.Pointer
	glVertexAttrib3hNV                                       unsafe.Pointer
	glVertexAttrib3hvNV                                      unsafe.Pointer
	glVertexAttrib3s                                         unsafe.Pointer
	glVertexAttrib3sARB                                      unsafe.Pointer
	glVertexAttrib3sNV                                       unsafe.Pointer
	glVertexAttrib3sv                                        unsafe.Pointer
	glVertexAttrib3svARB                                     unsafe.Pointer
	glVertexAttrib3svNV                                      unsafe.Pointer
	glVertexAttrib4Nbv                                       unsafe.Pointer
	glVertexAttrib4NbvARB                                    unsafe.Pointer
	glVertexAttrib4Niv                                       unsafe.Pointer
	glVertexAttrib4NivARB                                    unsafe.Pointer
	glVertexAttrib4Nsv                                       unsafe.Pointer
	glVertexAttrib4NsvARB                                    unsafe.Pointer
	glVertexAttrib4Nub                                       unsafe.Pointer
	glVertexAttrib4NubARB                                    unsafe.Pointer
	glVertexAttrib4Nubv                                      unsafe.Pointer
	glVertexAttrib4NubvARB                                   unsafe.Pointer
	glVertexAttrib4Nuiv                                      unsafe.Pointer
	glVertexAttrib4NuivARB                                   unsafe.Pointer
	glVertexAttrib4Nusv                                      unsafe.Pointer
	glVertexAttrib4NusvARB                                   unsafe.Pointer
	glVertexAttrib4bv                                        unsafe.Pointer
	glVertexAttrib4bvARB                                     unsafe.Pointer
	glVertexAttrib4d                                         unsafe.Pointer
	glVertexAttrib4dARB                                      unsafe.Pointer
	glVertexAttrib4dNV                                       unsafe.Pointer
	glVertexAttrib4dv                                        unsafe.Pointer
	glVertexAttrib4dvARB                                     unsafe.Pointer
	glVertexAttrib4dvNV                                      unsafe.Pointer
	glVertexAttrib4f                                         unsafe.Pointer
	glVertexAttrib4fARB                                      unsafe.Pointer
	glVertexAttrib4fNV                                       unsafe.Pointer
	glVertexAttrib4fv                                        unsafe.Pointer
	glVertexAttrib4fvARB                                     unsafe.Pointer
	glVertexAttrib4fvNV                                      unsafe.Pointer
	glVertexAttrib4hNV                                       unsafe.Pointer
	glVertexAttrib4hvNV                                      unsafe.Pointer
	glVertexAttrib4iv                                        unsafe.Pointer
	glVertexAttrib4ivARB                                     unsafe.Pointer
	glVertexAttrib4s                                         unsafe.Pointer
	glVertexAttrib4sARB                                      unsafe.Pointer
	glVertexAttrib4sNV                                       unsafe.Pointer
	glVertexAttrib4sv                                        unsafe.Pointer
	glVertexAttrib4svARB                                     unsafe.Pointer
	glVertexAttrib4svNV                                      unsafe.Pointer
	glVertexAttrib4ubNV                                      unsafe.Pointer
	glVertexAttrib4ubv                                       unsafe.Pointer
	glVertexAttrib4ubvARB                                    unsafe.Pointer
	glVertexAttrib4ubvNV                                     unsafe.Pointer
	glVertexAttrib4uiv                                       unsafe.Pointer
	glVertexAttrib4uivARB                                    unsafe.Pointer
	glVertexAttrib4usv                                       unsafe.Pointer
	glVertexAttrib4usvARB                                    unsafe.Pointer
	glVertexAttribArrayObjectATI                             unsafe.Pointer
	glVertexAttribBinding                                    unsafe.Pointer
	glVertexAttribDivisor                                    unsafe.Pointer
	glVertexAttribDivisorANGLE                               unsafe.Pointer
	glVertexAttribDivisorARB                                 unsafe.Pointer
	glVertexAttribDivisorEXT                                 unsafe.Pointer
	glVertexAttribDivisorNV                                  unsafe.Pointer
	glVertexAttribFormat                                     unsafe.Pointer
	glVertexAttribFormatNV                                   unsafe.Pointer
	glVertexAttribI1i                                        unsafe.Pointer
	glVertexAttribI1iEXT                                     unsafe.Pointer
	glVertexAttribI1iv                                       unsafe.Pointer
	glVertexAttribI1ivEXT                                    unsafe.Pointer
	glVertexAttribI1ui                                       unsafe.Pointer
	glVertexAttribI1uiEXT                                    unsafe.Pointer
	glVertexAttribI1uiv                                      unsafe.Pointer
	glVertexAttribI1uivEXT                                   unsafe.Pointer
	glVertexAttribI2i                                        unsafe.Pointer
	glVertexAttribI2iEXT                                     unsafe.Pointer
	glVertexAttribI2iv                                       unsafe.Pointer
	glVertexAttribI2ivEXT                                    unsafe.Pointer
	glVertexAttribI2ui                                       unsafe.Pointer
	glVertexAttribI2uiEXT                                    unsafe.Pointer
	glVertexAttribI2uiv                                      unsafe.Pointer
	glVertexAttribI2uivEXT                                   unsafe.Pointer
	glVertexAttribI3i                                        unsafe.Pointer
	glVertexAttribI3iEXT                                     unsafe.Pointer
	glVertexAttribI3iv                                       unsafe.Pointer
	glVertexAttribI3ivEXT                                    unsafe.Pointer
	glVertexAttribI3ui                                       unsafe.Pointer
	glVertexAttribI3uiEXT                                    unsafe.Pointer
	glVertexAttribI3uiv                                      unsafe.Pointer
	glVertexAttribI3uivEXT                                   unsafe.Pointer
	glVertexAttribI4bv                                       unsafe.Pointer
	glVertexAttribI4bvEXT                                    unsafe.Pointer
	glVertexAttribI4i                                        unsafe.Pointer
	glVertexAttribI4iEXT                                     unsafe.Pointer
	glVertexAttribI4iv                                       unsafe.Pointer
	glVertexAttribI4ivEXT                                    unsafe.Pointer
	glVertexAttribI4sv                                       unsafe.Pointer
	glVertexAttribI4svEXT                                    unsafe.Pointer
	glVertexAttribI4ubv                                      unsafe.Pointer
	glVertexAttribI4ubvEXT                                   unsafe.Pointer
	glVertexAttribI4ui                                       unsafe.Pointer
	glVertexAttribI4uiEXT                                    unsafe.Pointer
	glVertexAttribI4uiv                                      unsafe.Pointer
	glVertexAttribI4uivEXT                                   unsafe.Pointer
	glVertexAttribI4usv                                      unsafe.Pointer
	glVertexAttribI4usvEXT                                   unsafe.Pointer
	glVertexAttribIFormat                                    unsafe.Pointer
	glVertexAttribIFormatNV                                  unsafe.Pointer
	glVertexAttribIPointer                                   unsafe.Pointer
	glVertexAttribIPointerEXT                                unsafe.Pointer
	glVertexAttribL1d                                        unsafe.Pointer
	glVertexAttribL1dEXT                                     unsafe.Pointer
	glVertexAttribL1dv                                       unsafe.Pointer
	glVertexAttribL1dvEXT                                    unsafe.Pointer
	glVertexAttribL1i64NV                                    unsafe.Pointer
	glVertexAttribL1i64vNV                                   unsafe.Pointer
	glVertexAttribL1ui64ARB                                  unsafe.Pointer
	glVertexAttribL1ui64NV                                   unsafe.Pointer
	glVertexAttribL1ui64vARB                                 unsafe.Pointer
	glVertexAttribL1ui64vNV                                  unsafe.Pointer
	glVertexAttribL2d                                        unsafe.Pointer
	glVertexAttribL2dEXT                                     unsafe.Pointer
	glVertexAttribL2dv                                       unsafe.Pointer
	glVertexAttribL2dvEXT                                    unsafe.Pointer
	glVertexAttribL2i64NV                                    unsafe.Pointer
	glVertexAttribL2i64vNV                                   unsafe.Pointer
	glVertexAttribL2ui64NV                                   unsafe.Pointer
	glVertexAttribL2ui64vNV                                  unsafe.Pointer
	glVertexAttribL3d                                        unsafe.Pointer
	glVertexAttribL3dEXT                                     unsafe.Pointer
	glVertexAttribL3dv                                       unsafe.Pointer
	glVertexAttribL3dvEXT                                    unsafe.Pointer
	glVertexAttribL3i64NV                                    unsafe.Pointer
	glVertexAttribL3i64vNV                                   unsafe.Pointer
	glVertexAttribL3ui64NV                                   unsafe.Pointer
	glVertexAttribL3ui64vNV                                  unsafe.Pointer
	glVertexAttribL4d                                        unsafe.Pointer
	glVertexAttribL4dEXT                                     unsafe.Pointer
	glVertexAttribL4dv                                       unsafe.Pointer
	glVertexAttribL4dvEXT                                    unsafe.Pointer
	glVertexAttribL4i64NV                                    unsafe.Pointer
	glVertexAttribL4i64vNV                                   unsafe.Pointer
	glVertexAttribL4ui64NV                                   unsafe.Pointer
	glVertexAttribL4ui64vNV                                  unsafe.Pointer
	glVertexAttribLFormat                                    unsafe.Pointer
	glVertexAttribLFormatNV                                  unsafe.Pointer
	glVertexAttribLPointer                                   unsafe.Pointer
	glVertexAttribLPointerEXT                                unsafe.Pointer
	glVertexAttribP1ui                                       unsafe.Pointer
	glVertexAttribP1uiv                                      unsafe.Pointer
	glVertexAttribP2ui                                       unsafe.Pointer
	glVertexAttribP2uiv                                      unsafe.Pointer
	glVertexAttribP3ui                                       unsafe.Pointer
	glVertexAttribP3uiv                                      unsafe.Pointer
	glVertexAttribP4ui                                       unsafe.Pointer
	glVertexAttribP4uiv                                      unsafe.Pointer
	glVertexAttribParameteriAMD                              unsafe.Pointer
	glVertexAttribPointer                                    unsafe.Pointer
	glVertexAttribPointerARB                                 unsafe.Pointer
	glVertexAttribPointerNV                                  unsafe.Pointer
	glVertexAttribs1dvNV                                     unsafe.Pointer
	glVertexAttribs1fvNV                                     unsafe.Pointer
	glVertexAttribs1hvNV                                     unsafe.Pointer
	glVertexAttribs1svNV                                     unsafe.Pointer
	glVertexAttribs2dvNV                                     unsafe.Pointer
	glVertexAttribs2fvNV                                     unsafe.Pointer
	glVertexAttribs2hvNV                                     unsafe.Pointer
	glVertexAttribs2svNV                                     unsafe.Pointer
	glVertexAttribs3dvNV                                     unsafe.Pointer
	glVertexAttribs3fvNV                                     unsafe.Pointer
	glVertexAttribs3hvNV                                     unsafe.Pointer
	glVertexAttribs3svNV                                     unsafe.Pointer
	glVertexAttribs4dvNV                                     unsafe.Pointer
	glVertexAttribs4fvNV                                     unsafe.Pointer
	glVertexAttribs4hvNV                                     unsafe.Pointer
	glVertexAttribs4svNV                                     unsafe.Pointer
	glVertexAttribs4ubvNV                                    unsafe.Pointer
	glVertexBindingDivisor                                   unsafe.Pointer
	glVertexBlendARB                                         unsafe.Pointer
	glVertexBlendEnvfATI                                     unsafe.Pointer
	glVertexBlendEnviATI                                     unsafe.Pointer
	glVertexFormatNV                                         unsafe.Pointer
	glVertexP2ui                                             unsafe.Pointer
	glVertexP2uiv                                            unsafe.Pointer
	glVertexP3ui                                             unsafe.Pointer
	glVertexP3uiv                                            unsafe.Pointer
	glVertexP4ui                                             unsafe.Pointer
	glVertexP4uiv                                            unsafe.Pointer
	glVertexPointer                                          unsafe.Pointer
	glVertexPointerEXT                                       unsafe.Pointer
	glVertexPointerListIBM                                   unsafe.Pointer
	glVertexPointervINTEL                                    unsafe.Pointer
	glVertexStream1dATI                                      unsafe.Pointer
	glVertexStream1dvATI                                     unsafe.Pointer
	glVertexStream1fATI                                      unsafe.Pointer
	glVertexStream1fvATI                                     unsafe.Pointer
	glVertexStream1iATI                                      unsafe.Pointer
	glVertexStream1ivATI                                     unsafe.Pointer
	glVertexStream1sATI                                      unsafe.Pointer
	glVertexStream1svATI                                     unsafe.Pointer
	glVertexStream2dATI                                      unsafe.Pointer
	glVertexStream2dvATI                                     unsafe.Pointer
	glVertexStream2fATI                                      unsafe.Pointer
	glVertexStream2fvATI                                     unsafe.Pointer
	glVertexStream2iATI                                      unsafe.Pointer
	glVertexStream2ivATI                                     unsafe.Pointer
	glVertexStream2sATI                                      unsafe.Pointer
	glVertexStream2svATI                                     unsafe.Pointer
	glVertexStream3dATI                                      unsafe.Pointer
	glVertexStream3dvATI                                     unsafe.Pointer
	glVertexStream3fATI                                      unsafe.Pointer
	glVertexStream3fvATI                                     unsafe.Pointer
	glVertexStream3iATI                                      unsafe.Pointer
	glVertexStream3ivATI                                     unsafe.Pointer
	glVertexStream3sATI                                      unsafe.Pointer
	glVertexStream3svATI                                     unsafe.Pointer
	glVertexStream4dATI                                      unsafe.Pointer
	glVertexStream4dvATI                                     unsafe.Pointer
	glVertexStream4fATI                                      unsafe.Pointer
	glVertexStream4fvATI                                     unsafe.Pointer
	glVertexStream4iATI                                      unsafe.Pointer
	glVertexStream4ivATI                                     unsafe.Pointer
	glVertexStream4sATI                                      unsafe.Pointer
	glVertexStream4svATI                                     unsafe.Pointer
	glVertexWeightPointerEXT                                 unsafe.Pointer
	glVertexWeightfEXT                                       unsafe.Pointer
	glVertexWeightfvEXT                                      unsafe.Pointer
	glVertexWeighthNV                                        unsafe.Pointer
	glVertexWeighthvNV                                       unsafe.Pointer
	glVideoCaptureNV                                         unsafe.Pointer
	glVideoCaptureStreamParameterdvNV                        unsafe.Pointer
	glVideoCaptureStreamParameterfvNV                        unsafe.Pointer
	glVideoCaptureStreamParameterivNV                        unsafe.Pointer
	glViewport                                               unsafe.Pointer
	glViewportArrayv                                         unsafe.Pointer
	glViewportArrayvNV                                       unsafe.Pointer
	glViewportArrayvOES                                      unsafe.Pointer
	glViewportIndexedf                                       unsafe.Pointer
	glViewportIndexedfOES                                    unsafe.Pointer
	glViewportIndexedfNV                                     unsafe.Pointer
	glViewportIndexedfv                                      unsafe.Pointer
	glViewportIndexedfvOES                                   unsafe.Pointer
	glViewportIndexedfvNV                                    unsafe.Pointer
	glViewportPositionWScaleNV                               unsafe.Pointer
	glViewportSwizzleNV                                      unsafe.Pointer
	glWaitSemaphoreEXT                                       unsafe.Pointer
	glWaitSemaphoreui64NVX                                   unsafe.Pointer
	glWaitSync                                               unsafe.Pointer
	glWaitSyncAPPLE                                          unsafe.Pointer
	glWeightPathsNV                                          unsafe.Pointer
	glWeightPointerARB                                       unsafe.Pointer
	glWeightPointerOES                                       unsafe.Pointer
	glWeightbvARB                                            unsafe.Pointer
	glWeightdvARB                                            unsafe.Pointer
	glWeightfvARB                                            unsafe.Pointer
	glWeightivARB                                            unsafe.Pointer
	glWeightsvARB                                            unsafe.Pointer
	glWeightubvARB                                           unsafe.Pointer
	glWeightuivARB                                           unsafe.Pointer
	glWeightusvARB                                           unsafe.Pointer
	glWindowPos2d                                            unsafe.Pointer
	glWindowPos2dARB                                         unsafe.Pointer
	glWindowPos2dMESA                                        unsafe.Pointer
	glWindowPos2dv                                           unsafe.Pointer
	glWindowPos2dvARB                                        unsafe.Pointer
	glWindowPos2dvMESA                                       unsafe.Pointer
	glWindowPos2f                                            unsafe.Pointer
	glWindowPos2fARB                                         unsafe.Pointer
	glWindowPos2fMESA                                        unsafe.Pointer
	glWindowPos2fv                                           unsafe.Pointer
	glWindowPos2fvARB                                        unsafe.Pointer
	glWindowPos2fvMESA                                       unsafe.Pointer
	glWindowPos2i                                            unsafe.Pointer
	glWindowPos2iARB                                         unsafe.Pointer
	glWindowPos2iMESA                                        unsafe.Pointer
	glWindowPos2iv                                           unsafe.Pointer
	glWindowPos2ivARB                                        unsafe.Pointer
	glWindowPos2ivMESA                                       unsafe.Pointer
	glWindowPos2s                                            unsafe.Pointer
	glWindowPos2sARB                                         unsafe.Pointer
	glWindowPos2sMESA                                        unsafe.Pointer
	glWindowPos2sv                                           unsafe.Pointer
	glWindowPos2svARB                                        unsafe.Pointer
	glWindowPos2svMESA                                       unsafe.Pointer
	glWindowPos3d                                            unsafe.Pointer
	glWindowPos3dARB                                         unsafe.Pointer
	glWindowPos3dMESA                                        unsafe.Pointer
	glWindowPos3dv                                           unsafe.Pointer
	glWindowPos3dvARB                                        unsafe.Pointer
	glWindowPos3dvMESA                                       unsafe.Pointer
	glWindowPos3f                                            unsafe.Pointer
	glWindowPos3fARB                                         unsafe.Pointer
	glWindowPos3fMESA                                        unsafe.Pointer
	glWindowPos3fv                                           unsafe.Pointer
	glWindowPos3fvARB                                        unsafe.Pointer
	glWindowPos3fvMESA                                       unsafe.Pointer
	glWindowPos3i                                            unsafe.Pointer
	glWindowPos3iARB                                         unsafe.Pointer
	glWindowPos3iMESA                                        unsafe.Pointer
	glWindowPos3iv                                           unsafe.Pointer
	glWindowPos3ivARB                                        unsafe.Pointer
	glWindowPos3ivMESA                                       unsafe.Pointer
	glWindowPos3s                                            unsafe.Pointer
	glWindowPos3sARB                                         unsafe.Pointer
	glWindowPos3sMESA                                        unsafe.Pointer
	glWindowPos3sv                                           unsafe.Pointer
	glWindowPos3svARB                                        unsafe.Pointer
	glWindowPos3svMESA                                       unsafe.Pointer
	glWindowPos4dMESA                                        unsafe.Pointer
	glWindowPos4dvMESA                                       unsafe.Pointer
	glWindowPos4fMESA                                        unsafe.Pointer
	glWindowPos4fvMESA                                       unsafe.Pointer
	glWindowPos4iMESA                                        unsafe.Pointer
	glWindowPos4ivMESA                                       unsafe.Pointer
	glWindowPos4sMESA                                        unsafe.Pointer
	glWindowPos4svMESA                                       unsafe.Pointer
	glWindowRectanglesEXT                                    unsafe.Pointer
	glWriteMaskEXT                                           unsafe.Pointer
	glDrawVkImageNV                                          unsafe.Pointer
	glWaitVkSemaphoreNV                                      unsafe.Pointer
	glSignalVkSemaphoreNV                                    unsafe.Pointer
	glSignalVkFenceNV                                        unsafe.Pointer
	glFramebufferParameteriMESA                              unsafe.Pointer
	glGetFramebufferParameterivMESA                          unsafe.Pointer
}
type GL100 interface {
	Extensions
	Accum(op uint32, value float32)
	AlphaFunc(func_ uint32, ref float32)
	Begin(mode uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendFunc(sfactor uint32, dfactor uint32)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaterial(face uint32, mode uint32)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CullFace(mode uint32)
	DeleteLists(list uint32, range_ int32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	Disable(cap uint32)
	DrawBuffer(buf uint32)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	EdgeFlag(flag bool)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	End()
	EndList()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	Finish()
	Flush()
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenLists(range_ int32) uint32
	GetBooleanv(pname uint32, data *bool)
	GetClipPlane(plane uint32, equation *float64)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloatv(pname uint32, data *float32)
	GetIntegerv(pname uint32, data *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPolygonStipple(mask *uint8)
	GetString(name uint32) *uint8
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	InitNames()
	IsEnabled(cap uint32) bool
	IsList(list uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopMatrix()
	PopName()
	PushAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	RenderMode(mode uint32) int32
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	Viewport(x int32, y int32, width int32, height int32)
}

func New100(getProcAddr func(name string) unsafe.Pointer) GL100 {
	gl := &lib{
		glAccum:                  getProcAddr("glAccum"),
		glAlphaFunc:              getProcAddr("glAlphaFunc"),
		glBegin:                  getProcAddr("glBegin"),
		glBitmap:                 getProcAddr("glBitmap"),
		glBlendFunc:              getProcAddr("glBlendFunc"),
		glCallList:               getProcAddr("glCallList"),
		glCallLists:              getProcAddr("glCallLists"),
		glClear:                  getProcAddr("glClear"),
		glClearAccum:             getProcAddr("glClearAccum"),
		glClearColor:             getProcAddr("glClearColor"),
		glClearDepth:             getProcAddr("glClearDepth"),
		glClearIndex:             getProcAddr("glClearIndex"),
		glClearStencil:           getProcAddr("glClearStencil"),
		glClipPlane:              getProcAddr("glClipPlane"),
		glColor3b:                getProcAddr("glColor3b"),
		glColor3bv:               getProcAddr("glColor3bv"),
		glColor3d:                getProcAddr("glColor3d"),
		glColor3dv:               getProcAddr("glColor3dv"),
		glColor3f:                getProcAddr("glColor3f"),
		glColor3fv:               getProcAddr("glColor3fv"),
		glColor3i:                getProcAddr("glColor3i"),
		glColor3iv:               getProcAddr("glColor3iv"),
		glColor3s:                getProcAddr("glColor3s"),
		glColor3sv:               getProcAddr("glColor3sv"),
		glColor3ub:               getProcAddr("glColor3ub"),
		glColor3ubv:              getProcAddr("glColor3ubv"),
		glColor3ui:               getProcAddr("glColor3ui"),
		glColor3uiv:              getProcAddr("glColor3uiv"),
		glColor3us:               getProcAddr("glColor3us"),
		glColor3usv:              getProcAddr("glColor3usv"),
		glColor4b:                getProcAddr("glColor4b"),
		glColor4bv:               getProcAddr("glColor4bv"),
		glColor4d:                getProcAddr("glColor4d"),
		glColor4dv:               getProcAddr("glColor4dv"),
		glColor4f:                getProcAddr("glColor4f"),
		glColor4fv:               getProcAddr("glColor4fv"),
		glColor4i:                getProcAddr("glColor4i"),
		glColor4iv:               getProcAddr("glColor4iv"),
		glColor4s:                getProcAddr("glColor4s"),
		glColor4sv:               getProcAddr("glColor4sv"),
		glColor4ub:               getProcAddr("glColor4ub"),
		glColor4ubv:              getProcAddr("glColor4ubv"),
		glColor4ui:               getProcAddr("glColor4ui"),
		glColor4uiv:              getProcAddr("glColor4uiv"),
		glColor4us:               getProcAddr("glColor4us"),
		glColor4usv:              getProcAddr("glColor4usv"),
		glColorMask:              getProcAddr("glColorMask"),
		glColorMaterial:          getProcAddr("glColorMaterial"),
		glCopyPixels:             getProcAddr("glCopyPixels"),
		glCullFace:               getProcAddr("glCullFace"),
		glDeleteLists:            getProcAddr("glDeleteLists"),
		glDepthFunc:              getProcAddr("glDepthFunc"),
		glDepthMask:              getProcAddr("glDepthMask"),
		glDepthRange:             getProcAddr("glDepthRange"),
		glDisable:                getProcAddr("glDisable"),
		glDrawBuffer:             getProcAddr("glDrawBuffer"),
		glDrawPixels:             getProcAddr("glDrawPixels"),
		glEdgeFlag:               getProcAddr("glEdgeFlag"),
		glEdgeFlagv:              getProcAddr("glEdgeFlagv"),
		glEnable:                 getProcAddr("glEnable"),
		glEnd:                    getProcAddr("glEnd"),
		glEndList:                getProcAddr("glEndList"),
		glEvalCoord1d:            getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:           getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:            getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:           getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:            getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:           getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:            getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:           getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:              getProcAddr("glEvalMesh1"),
		glEvalMesh2:              getProcAddr("glEvalMesh2"),
		glEvalPoint1:             getProcAddr("glEvalPoint1"),
		glEvalPoint2:             getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:         getProcAddr("glFeedbackBuffer"),
		glFinish:                 getProcAddr("glFinish"),
		glFlush:                  getProcAddr("glFlush"),
		glFogf:                   getProcAddr("glFogf"),
		glFogfv:                  getProcAddr("glFogfv"),
		glFogi:                   getProcAddr("glFogi"),
		glFogiv:                  getProcAddr("glFogiv"),
		glFrontFace:              getProcAddr("glFrontFace"),
		glFrustum:                getProcAddr("glFrustum"),
		glGenLists:               getProcAddr("glGenLists"),
		glGetBooleanv:            getProcAddr("glGetBooleanv"),
		glGetClipPlane:           getProcAddr("glGetClipPlane"),
		glGetDoublev:             getProcAddr("glGetDoublev"),
		glGetError:               getProcAddr("glGetError"),
		glGetFloatv:              getProcAddr("glGetFloatv"),
		glGetIntegerv:            getProcAddr("glGetIntegerv"),
		glGetLightfv:             getProcAddr("glGetLightfv"),
		glGetLightiv:             getProcAddr("glGetLightiv"),
		glGetMapdv:               getProcAddr("glGetMapdv"),
		glGetMapfv:               getProcAddr("glGetMapfv"),
		glGetMapiv:               getProcAddr("glGetMapiv"),
		glGetMaterialfv:          getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:          getProcAddr("glGetMaterialiv"),
		glGetPixelMapfv:          getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:         getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:         getProcAddr("glGetPixelMapusv"),
		glGetPolygonStipple:      getProcAddr("glGetPolygonStipple"),
		glGetString:              getProcAddr("glGetString"),
		glGetTexEnvfv:            getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:            getProcAddr("glGetTexEnviv"),
		glGetTexGendv:            getProcAddr("glGetTexGendv"),
		glGetTexGenfv:            getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:            getProcAddr("glGetTexGeniv"),
		glGetTexImage:            getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv: getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv: getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterfv:      getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:      getProcAddr("glGetTexParameteriv"),
		glHint:                   getProcAddr("glHint"),
		glIndexMask:              getProcAddr("glIndexMask"),
		glIndexd:                 getProcAddr("glIndexd"),
		glIndexdv:                getProcAddr("glIndexdv"),
		glIndexf:                 getProcAddr("glIndexf"),
		glIndexfv:                getProcAddr("glIndexfv"),
		glIndexi:                 getProcAddr("glIndexi"),
		glIndexiv:                getProcAddr("glIndexiv"),
		glIndexs:                 getProcAddr("glIndexs"),
		glIndexsv:                getProcAddr("glIndexsv"),
		glInitNames:              getProcAddr("glInitNames"),
		glIsEnabled:              getProcAddr("glIsEnabled"),
		glIsList:                 getProcAddr("glIsList"),
		glLightModelf:            getProcAddr("glLightModelf"),
		glLightModelfv:           getProcAddr("glLightModelfv"),
		glLightModeli:            getProcAddr("glLightModeli"),
		glLightModeliv:           getProcAddr("glLightModeliv"),
		glLightf:                 getProcAddr("glLightf"),
		glLightfv:                getProcAddr("glLightfv"),
		glLighti:                 getProcAddr("glLighti"),
		glLightiv:                getProcAddr("glLightiv"),
		glLineStipple:            getProcAddr("glLineStipple"),
		glLineWidth:              getProcAddr("glLineWidth"),
		glListBase:               getProcAddr("glListBase"),
		glLoadIdentity:           getProcAddr("glLoadIdentity"),
		glLoadMatrixd:            getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:            getProcAddr("glLoadMatrixf"),
		glLoadName:               getProcAddr("glLoadName"),
		glLogicOp:                getProcAddr("glLogicOp"),
		glMap1d:                  getProcAddr("glMap1d"),
		glMap1f:                  getProcAddr("glMap1f"),
		glMap2d:                  getProcAddr("glMap2d"),
		glMap2f:                  getProcAddr("glMap2f"),
		glMapGrid1d:              getProcAddr("glMapGrid1d"),
		glMapGrid1f:              getProcAddr("glMapGrid1f"),
		glMapGrid2d:              getProcAddr("glMapGrid2d"),
		glMapGrid2f:              getProcAddr("glMapGrid2f"),
		glMaterialf:              getProcAddr("glMaterialf"),
		glMaterialfv:             getProcAddr("glMaterialfv"),
		glMateriali:              getProcAddr("glMateriali"),
		glMaterialiv:             getProcAddr("glMaterialiv"),
		glMatrixMode:             getProcAddr("glMatrixMode"),
		glMultMatrixd:            getProcAddr("glMultMatrixd"),
		glMultMatrixf:            getProcAddr("glMultMatrixf"),
		glNewList:                getProcAddr("glNewList"),
		glNormal3b:               getProcAddr("glNormal3b"),
		glNormal3bv:              getProcAddr("glNormal3bv"),
		glNormal3d:               getProcAddr("glNormal3d"),
		glNormal3dv:              getProcAddr("glNormal3dv"),
		glNormal3f:               getProcAddr("glNormal3f"),
		glNormal3fv:              getProcAddr("glNormal3fv"),
		glNormal3i:               getProcAddr("glNormal3i"),
		glNormal3iv:              getProcAddr("glNormal3iv"),
		glNormal3s:               getProcAddr("glNormal3s"),
		glNormal3sv:              getProcAddr("glNormal3sv"),
		glOrtho:                  getProcAddr("glOrtho"),
		glPassThrough:            getProcAddr("glPassThrough"),
		glPixelMapfv:             getProcAddr("glPixelMapfv"),
		glPixelMapuiv:            getProcAddr("glPixelMapuiv"),
		glPixelMapusv:            getProcAddr("glPixelMapusv"),
		glPixelStoref:            getProcAddr("glPixelStoref"),
		glPixelStorei:            getProcAddr("glPixelStorei"),
		glPixelTransferf:         getProcAddr("glPixelTransferf"),
		glPixelTransferi:         getProcAddr("glPixelTransferi"),
		glPixelZoom:              getProcAddr("glPixelZoom"),
		glPointSize:              getProcAddr("glPointSize"),
		glPolygonMode:            getProcAddr("glPolygonMode"),
		glPolygonStipple:         getProcAddr("glPolygonStipple"),
		glPopAttrib:              getProcAddr("glPopAttrib"),
		glPopMatrix:              getProcAddr("glPopMatrix"),
		glPopName:                getProcAddr("glPopName"),
		glPushAttrib:             getProcAddr("glPushAttrib"),
		glPushMatrix:             getProcAddr("glPushMatrix"),
		glPushName:               getProcAddr("glPushName"),
		glRasterPos2d:            getProcAddr("glRasterPos2d"),
		glRasterPos2dv:           getProcAddr("glRasterPos2dv"),
		glRasterPos2f:            getProcAddr("glRasterPos2f"),
		glRasterPos2fv:           getProcAddr("glRasterPos2fv"),
		glRasterPos2i:            getProcAddr("glRasterPos2i"),
		glRasterPos2iv:           getProcAddr("glRasterPos2iv"),
		glRasterPos2s:            getProcAddr("glRasterPos2s"),
		glRasterPos2sv:           getProcAddr("glRasterPos2sv"),
		glRasterPos3d:            getProcAddr("glRasterPos3d"),
		glRasterPos3dv:           getProcAddr("glRasterPos3dv"),
		glRasterPos3f:            getProcAddr("glRasterPos3f"),
		glRasterPos3fv:           getProcAddr("glRasterPos3fv"),
		glRasterPos3i:            getProcAddr("glRasterPos3i"),
		glRasterPos3iv:           getProcAddr("glRasterPos3iv"),
		glRasterPos3s:            getProcAddr("glRasterPos3s"),
		glRasterPos3sv:           getProcAddr("glRasterPos3sv"),
		glRasterPos4d:            getProcAddr("glRasterPos4d"),
		glRasterPos4dv:           getProcAddr("glRasterPos4dv"),
		glRasterPos4f:            getProcAddr("glRasterPos4f"),
		glRasterPos4fv:           getProcAddr("glRasterPos4fv"),
		glRasterPos4i:            getProcAddr("glRasterPos4i"),
		glRasterPos4iv:           getProcAddr("glRasterPos4iv"),
		glRasterPos4s:            getProcAddr("glRasterPos4s"),
		glRasterPos4sv:           getProcAddr("glRasterPos4sv"),
		glReadBuffer:             getProcAddr("glReadBuffer"),
		glReadPixels:             getProcAddr("glReadPixels"),
		glRectd:                  getProcAddr("glRectd"),
		glRectdv:                 getProcAddr("glRectdv"),
		glRectf:                  getProcAddr("glRectf"),
		glRectfv:                 getProcAddr("glRectfv"),
		glRecti:                  getProcAddr("glRecti"),
		glRectiv:                 getProcAddr("glRectiv"),
		glRects:                  getProcAddr("glRects"),
		glRectsv:                 getProcAddr("glRectsv"),
		glRenderMode:             getProcAddr("glRenderMode"),
		glRotated:                getProcAddr("glRotated"),
		glRotatef:                getProcAddr("glRotatef"),
		glScaled:                 getProcAddr("glScaled"),
		glScalef:                 getProcAddr("glScalef"),
		glScissor:                getProcAddr("glScissor"),
		glSelectBuffer:           getProcAddr("glSelectBuffer"),
		glShadeModel:             getProcAddr("glShadeModel"),
		glStencilFunc:            getProcAddr("glStencilFunc"),
		glStencilMask:            getProcAddr("glStencilMask"),
		glStencilOp:              getProcAddr("glStencilOp"),
		glTexCoord1d:             getProcAddr("glTexCoord1d"),
		glTexCoord1dv:            getProcAddr("glTexCoord1dv"),
		glTexCoord1f:             getProcAddr("glTexCoord1f"),
		glTexCoord1fv:            getProcAddr("glTexCoord1fv"),
		glTexCoord1i:             getProcAddr("glTexCoord1i"),
		glTexCoord1iv:            getProcAddr("glTexCoord1iv"),
		glTexCoord1s:             getProcAddr("glTexCoord1s"),
		glTexCoord1sv:            getProcAddr("glTexCoord1sv"),
		glTexCoord2d:             getProcAddr("glTexCoord2d"),
		glTexCoord2dv:            getProcAddr("glTexCoord2dv"),
		glTexCoord2f:             getProcAddr("glTexCoord2f"),
		glTexCoord2fv:            getProcAddr("glTexCoord2fv"),
		glTexCoord2i:             getProcAddr("glTexCoord2i"),
		glTexCoord2iv:            getProcAddr("glTexCoord2iv"),
		glTexCoord2s:             getProcAddr("glTexCoord2s"),
		glTexCoord2sv:            getProcAddr("glTexCoord2sv"),
		glTexCoord3d:             getProcAddr("glTexCoord3d"),
		glTexCoord3dv:            getProcAddr("glTexCoord3dv"),
		glTexCoord3f:             getProcAddr("glTexCoord3f"),
		glTexCoord3fv:            getProcAddr("glTexCoord3fv"),
		glTexCoord3i:             getProcAddr("glTexCoord3i"),
		glTexCoord3iv:            getProcAddr("glTexCoord3iv"),
		glTexCoord3s:             getProcAddr("glTexCoord3s"),
		glTexCoord3sv:            getProcAddr("glTexCoord3sv"),
		glTexCoord4d:             getProcAddr("glTexCoord4d"),
		glTexCoord4dv:            getProcAddr("glTexCoord4dv"),
		glTexCoord4f:             getProcAddr("glTexCoord4f"),
		glTexCoord4fv:            getProcAddr("glTexCoord4fv"),
		glTexCoord4i:             getProcAddr("glTexCoord4i"),
		glTexCoord4iv:            getProcAddr("glTexCoord4iv"),
		glTexCoord4s:             getProcAddr("glTexCoord4s"),
		glTexCoord4sv:            getProcAddr("glTexCoord4sv"),
		glTexEnvf:                getProcAddr("glTexEnvf"),
		glTexEnvfv:               getProcAddr("glTexEnvfv"),
		glTexEnvi:                getProcAddr("glTexEnvi"),
		glTexEnviv:               getProcAddr("glTexEnviv"),
		glTexGend:                getProcAddr("glTexGend"),
		glTexGendv:               getProcAddr("glTexGendv"),
		glTexGenf:                getProcAddr("glTexGenf"),
		glTexGenfv:               getProcAddr("glTexGenfv"),
		glTexGeni:                getProcAddr("glTexGeni"),
		glTexGeniv:               getProcAddr("glTexGeniv"),
		glTexImage1D:             getProcAddr("glTexImage1D"),
		glTexImage2D:             getProcAddr("glTexImage2D"),
		glTexParameterf:          getProcAddr("glTexParameterf"),
		glTexParameterfv:         getProcAddr("glTexParameterfv"),
		glTexParameteri:          getProcAddr("glTexParameteri"),
		glTexParameteriv:         getProcAddr("glTexParameteriv"),
		glTranslated:             getProcAddr("glTranslated"),
		glTranslatef:             getProcAddr("glTranslatef"),
		glVertex2d:               getProcAddr("glVertex2d"),
		glVertex2dv:              getProcAddr("glVertex2dv"),
		glVertex2f:               getProcAddr("glVertex2f"),
		glVertex2fv:              getProcAddr("glVertex2fv"),
		glVertex2i:               getProcAddr("glVertex2i"),
		glVertex2iv:              getProcAddr("glVertex2iv"),
		glVertex2s:               getProcAddr("glVertex2s"),
		glVertex2sv:              getProcAddr("glVertex2sv"),
		glVertex3d:               getProcAddr("glVertex3d"),
		glVertex3dv:              getProcAddr("glVertex3dv"),
		glVertex3f:               getProcAddr("glVertex3f"),
		glVertex3fv:              getProcAddr("glVertex3fv"),
		glVertex3i:               getProcAddr("glVertex3i"),
		glVertex3iv:              getProcAddr("glVertex3iv"),
		glVertex3s:               getProcAddr("glVertex3s"),
		glVertex3sv:              getProcAddr("glVertex3sv"),
		glVertex4d:               getProcAddr("glVertex4d"),
		glVertex4dv:              getProcAddr("glVertex4dv"),
		glVertex4f:               getProcAddr("glVertex4f"),
		glVertex4fv:              getProcAddr("glVertex4fv"),
		glVertex4i:               getProcAddr("glVertex4i"),
		glVertex4iv:              getProcAddr("glVertex4iv"),
		glVertex4s:               getProcAddr("glVertex4s"),
		glVertex4sv:              getProcAddr("glVertex4sv"),
		glViewport:               getProcAddr("glViewport"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL110 interface {
	Extensions
	Accum(op uint32, value float32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	Begin(mode uint32)
	BindTexture(target uint32, texture uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendFunc(sfactor uint32, dfactor uint32)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaterial(face uint32, mode uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CullFace(mode uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteTextures(n int32, textures *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DrawArrays(mode uint32, first int32, count int32)
	DrawBuffer(buf uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	End()
	EndList()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	Finish()
	Flush()
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenLists(range_ int32) uint32
	GenTextures(n int32, textures *uint32)
	GetBooleanv(pname uint32, data *bool)
	GetClipPlane(plane uint32, equation *float64)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloatv(pname uint32, data *float32)
	GetIntegerv(pname uint32, data *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetString(name uint32) *uint8
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	IsEnabled(cap uint32) bool
	IsList(list uint32) bool
	IsTexture(texture uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopMatrix()
	PopName()
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	RenderMode(mode uint32) int32
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
}

func New110(getProcAddr func(name string) unsafe.Pointer) GL110 {
	gl := &lib{
		glAccum:                  getProcAddr("glAccum"),
		glAlphaFunc:              getProcAddr("glAlphaFunc"),
		glAreTexturesResident:    getProcAddr("glAreTexturesResident"),
		glArrayElement:           getProcAddr("glArrayElement"),
		glBegin:                  getProcAddr("glBegin"),
		glBindTexture:            getProcAddr("glBindTexture"),
		glBitmap:                 getProcAddr("glBitmap"),
		glBlendFunc:              getProcAddr("glBlendFunc"),
		glCallList:               getProcAddr("glCallList"),
		glCallLists:              getProcAddr("glCallLists"),
		glClear:                  getProcAddr("glClear"),
		glClearAccum:             getProcAddr("glClearAccum"),
		glClearColor:             getProcAddr("glClearColor"),
		glClearDepth:             getProcAddr("glClearDepth"),
		glClearIndex:             getProcAddr("glClearIndex"),
		glClearStencil:           getProcAddr("glClearStencil"),
		glClipPlane:              getProcAddr("glClipPlane"),
		glColor3b:                getProcAddr("glColor3b"),
		glColor3bv:               getProcAddr("glColor3bv"),
		glColor3d:                getProcAddr("glColor3d"),
		glColor3dv:               getProcAddr("glColor3dv"),
		glColor3f:                getProcAddr("glColor3f"),
		glColor3fv:               getProcAddr("glColor3fv"),
		glColor3i:                getProcAddr("glColor3i"),
		glColor3iv:               getProcAddr("glColor3iv"),
		glColor3s:                getProcAddr("glColor3s"),
		glColor3sv:               getProcAddr("glColor3sv"),
		glColor3ub:               getProcAddr("glColor3ub"),
		glColor3ubv:              getProcAddr("glColor3ubv"),
		glColor3ui:               getProcAddr("glColor3ui"),
		glColor3uiv:              getProcAddr("glColor3uiv"),
		glColor3us:               getProcAddr("glColor3us"),
		glColor3usv:              getProcAddr("glColor3usv"),
		glColor4b:                getProcAddr("glColor4b"),
		glColor4bv:               getProcAddr("glColor4bv"),
		glColor4d:                getProcAddr("glColor4d"),
		glColor4dv:               getProcAddr("glColor4dv"),
		glColor4f:                getProcAddr("glColor4f"),
		glColor4fv:               getProcAddr("glColor4fv"),
		glColor4i:                getProcAddr("glColor4i"),
		glColor4iv:               getProcAddr("glColor4iv"),
		glColor4s:                getProcAddr("glColor4s"),
		glColor4sv:               getProcAddr("glColor4sv"),
		glColor4ub:               getProcAddr("glColor4ub"),
		glColor4ubv:              getProcAddr("glColor4ubv"),
		glColor4ui:               getProcAddr("glColor4ui"),
		glColor4uiv:              getProcAddr("glColor4uiv"),
		glColor4us:               getProcAddr("glColor4us"),
		glColor4usv:              getProcAddr("glColor4usv"),
		glColorMask:              getProcAddr("glColorMask"),
		glColorMaterial:          getProcAddr("glColorMaterial"),
		glColorPointer:           getProcAddr("glColorPointer"),
		glCopyPixels:             getProcAddr("glCopyPixels"),
		glCopyTexImage1D:         getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:         getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:      getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:      getProcAddr("glCopyTexSubImage2D"),
		glCullFace:               getProcAddr("glCullFace"),
		glDeleteLists:            getProcAddr("glDeleteLists"),
		glDeleteTextures:         getProcAddr("glDeleteTextures"),
		glDepthFunc:              getProcAddr("glDepthFunc"),
		glDepthMask:              getProcAddr("glDepthMask"),
		glDepthRange:             getProcAddr("glDepthRange"),
		glDisable:                getProcAddr("glDisable"),
		glDisableClientState:     getProcAddr("glDisableClientState"),
		glDrawArrays:             getProcAddr("glDrawArrays"),
		glDrawBuffer:             getProcAddr("glDrawBuffer"),
		glDrawElements:           getProcAddr("glDrawElements"),
		glDrawPixels:             getProcAddr("glDrawPixels"),
		glEdgeFlag:               getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:        getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:              getProcAddr("glEdgeFlagv"),
		glEnable:                 getProcAddr("glEnable"),
		glEnableClientState:      getProcAddr("glEnableClientState"),
		glEnd:                    getProcAddr("glEnd"),
		glEndList:                getProcAddr("glEndList"),
		glEvalCoord1d:            getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:           getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:            getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:           getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:            getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:           getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:            getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:           getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:              getProcAddr("glEvalMesh1"),
		glEvalMesh2:              getProcAddr("glEvalMesh2"),
		glEvalPoint1:             getProcAddr("glEvalPoint1"),
		glEvalPoint2:             getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:         getProcAddr("glFeedbackBuffer"),
		glFinish:                 getProcAddr("glFinish"),
		glFlush:                  getProcAddr("glFlush"),
		glFogf:                   getProcAddr("glFogf"),
		glFogfv:                  getProcAddr("glFogfv"),
		glFogi:                   getProcAddr("glFogi"),
		glFogiv:                  getProcAddr("glFogiv"),
		glFrontFace:              getProcAddr("glFrontFace"),
		glFrustum:                getProcAddr("glFrustum"),
		glGenLists:               getProcAddr("glGenLists"),
		glGenTextures:            getProcAddr("glGenTextures"),
		glGetBooleanv:            getProcAddr("glGetBooleanv"),
		glGetClipPlane:           getProcAddr("glGetClipPlane"),
		glGetDoublev:             getProcAddr("glGetDoublev"),
		glGetError:               getProcAddr("glGetError"),
		glGetFloatv:              getProcAddr("glGetFloatv"),
		glGetIntegerv:            getProcAddr("glGetIntegerv"),
		glGetLightfv:             getProcAddr("glGetLightfv"),
		glGetLightiv:             getProcAddr("glGetLightiv"),
		glGetMapdv:               getProcAddr("glGetMapdv"),
		glGetMapfv:               getProcAddr("glGetMapfv"),
		glGetMapiv:               getProcAddr("glGetMapiv"),
		glGetMaterialfv:          getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:          getProcAddr("glGetMaterialiv"),
		glGetPixelMapfv:          getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:         getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:         getProcAddr("glGetPixelMapusv"),
		glGetPointerv:            getProcAddr("glGetPointerv"),
		glGetPolygonStipple:      getProcAddr("glGetPolygonStipple"),
		glGetString:              getProcAddr("glGetString"),
		glGetTexEnvfv:            getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:            getProcAddr("glGetTexEnviv"),
		glGetTexGendv:            getProcAddr("glGetTexGendv"),
		glGetTexGenfv:            getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:            getProcAddr("glGetTexGeniv"),
		glGetTexImage:            getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv: getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv: getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterfv:      getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:      getProcAddr("glGetTexParameteriv"),
		glHint:                   getProcAddr("glHint"),
		glIndexMask:              getProcAddr("glIndexMask"),
		glIndexPointer:           getProcAddr("glIndexPointer"),
		glIndexd:                 getProcAddr("glIndexd"),
		glIndexdv:                getProcAddr("glIndexdv"),
		glIndexf:                 getProcAddr("glIndexf"),
		glIndexfv:                getProcAddr("glIndexfv"),
		glIndexi:                 getProcAddr("glIndexi"),
		glIndexiv:                getProcAddr("glIndexiv"),
		glIndexs:                 getProcAddr("glIndexs"),
		glIndexsv:                getProcAddr("glIndexsv"),
		glIndexub:                getProcAddr("glIndexub"),
		glIndexubv:               getProcAddr("glIndexubv"),
		glInitNames:              getProcAddr("glInitNames"),
		glInterleavedArrays:      getProcAddr("glInterleavedArrays"),
		glIsEnabled:              getProcAddr("glIsEnabled"),
		glIsList:                 getProcAddr("glIsList"),
		glIsTexture:              getProcAddr("glIsTexture"),
		glLightModelf:            getProcAddr("glLightModelf"),
		glLightModelfv:           getProcAddr("glLightModelfv"),
		glLightModeli:            getProcAddr("glLightModeli"),
		glLightModeliv:           getProcAddr("glLightModeliv"),
		glLightf:                 getProcAddr("glLightf"),
		glLightfv:                getProcAddr("glLightfv"),
		glLighti:                 getProcAddr("glLighti"),
		glLightiv:                getProcAddr("glLightiv"),
		glLineStipple:            getProcAddr("glLineStipple"),
		glLineWidth:              getProcAddr("glLineWidth"),
		glListBase:               getProcAddr("glListBase"),
		glLoadIdentity:           getProcAddr("glLoadIdentity"),
		glLoadMatrixd:            getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:            getProcAddr("glLoadMatrixf"),
		glLoadName:               getProcAddr("glLoadName"),
		glLogicOp:                getProcAddr("glLogicOp"),
		glMap1d:                  getProcAddr("glMap1d"),
		glMap1f:                  getProcAddr("glMap1f"),
		glMap2d:                  getProcAddr("glMap2d"),
		glMap2f:                  getProcAddr("glMap2f"),
		glMapGrid1d:              getProcAddr("glMapGrid1d"),
		glMapGrid1f:              getProcAddr("glMapGrid1f"),
		glMapGrid2d:              getProcAddr("glMapGrid2d"),
		glMapGrid2f:              getProcAddr("glMapGrid2f"),
		glMaterialf:              getProcAddr("glMaterialf"),
		glMaterialfv:             getProcAddr("glMaterialfv"),
		glMateriali:              getProcAddr("glMateriali"),
		glMaterialiv:             getProcAddr("glMaterialiv"),
		glMatrixMode:             getProcAddr("glMatrixMode"),
		glMultMatrixd:            getProcAddr("glMultMatrixd"),
		glMultMatrixf:            getProcAddr("glMultMatrixf"),
		glNewList:                getProcAddr("glNewList"),
		glNormal3b:               getProcAddr("glNormal3b"),
		glNormal3bv:              getProcAddr("glNormal3bv"),
		glNormal3d:               getProcAddr("glNormal3d"),
		glNormal3dv:              getProcAddr("glNormal3dv"),
		glNormal3f:               getProcAddr("glNormal3f"),
		glNormal3fv:              getProcAddr("glNormal3fv"),
		glNormal3i:               getProcAddr("glNormal3i"),
		glNormal3iv:              getProcAddr("glNormal3iv"),
		glNormal3s:               getProcAddr("glNormal3s"),
		glNormal3sv:              getProcAddr("glNormal3sv"),
		glNormalPointer:          getProcAddr("glNormalPointer"),
		glOrtho:                  getProcAddr("glOrtho"),
		glPassThrough:            getProcAddr("glPassThrough"),
		glPixelMapfv:             getProcAddr("glPixelMapfv"),
		glPixelMapuiv:            getProcAddr("glPixelMapuiv"),
		glPixelMapusv:            getProcAddr("glPixelMapusv"),
		glPixelStoref:            getProcAddr("glPixelStoref"),
		glPixelStorei:            getProcAddr("glPixelStorei"),
		glPixelTransferf:         getProcAddr("glPixelTransferf"),
		glPixelTransferi:         getProcAddr("glPixelTransferi"),
		glPixelZoom:              getProcAddr("glPixelZoom"),
		glPointSize:              getProcAddr("glPointSize"),
		glPolygonMode:            getProcAddr("glPolygonMode"),
		glPolygonOffset:          getProcAddr("glPolygonOffset"),
		glPolygonStipple:         getProcAddr("glPolygonStipple"),
		glPopAttrib:              getProcAddr("glPopAttrib"),
		glPopClientAttrib:        getProcAddr("glPopClientAttrib"),
		glPopMatrix:              getProcAddr("glPopMatrix"),
		glPopName:                getProcAddr("glPopName"),
		glPrioritizeTextures:     getProcAddr("glPrioritizeTextures"),
		glPushAttrib:             getProcAddr("glPushAttrib"),
		glPushClientAttrib:       getProcAddr("glPushClientAttrib"),
		glPushMatrix:             getProcAddr("glPushMatrix"),
		glPushName:               getProcAddr("glPushName"),
		glRasterPos2d:            getProcAddr("glRasterPos2d"),
		glRasterPos2dv:           getProcAddr("glRasterPos2dv"),
		glRasterPos2f:            getProcAddr("glRasterPos2f"),
		glRasterPos2fv:           getProcAddr("glRasterPos2fv"),
		glRasterPos2i:            getProcAddr("glRasterPos2i"),
		glRasterPos2iv:           getProcAddr("glRasterPos2iv"),
		glRasterPos2s:            getProcAddr("glRasterPos2s"),
		glRasterPos2sv:           getProcAddr("glRasterPos2sv"),
		glRasterPos3d:            getProcAddr("glRasterPos3d"),
		glRasterPos3dv:           getProcAddr("glRasterPos3dv"),
		glRasterPos3f:            getProcAddr("glRasterPos3f"),
		glRasterPos3fv:           getProcAddr("glRasterPos3fv"),
		glRasterPos3i:            getProcAddr("glRasterPos3i"),
		glRasterPos3iv:           getProcAddr("glRasterPos3iv"),
		glRasterPos3s:            getProcAddr("glRasterPos3s"),
		glRasterPos3sv:           getProcAddr("glRasterPos3sv"),
		glRasterPos4d:            getProcAddr("glRasterPos4d"),
		glRasterPos4dv:           getProcAddr("glRasterPos4dv"),
		glRasterPos4f:            getProcAddr("glRasterPos4f"),
		glRasterPos4fv:           getProcAddr("glRasterPos4fv"),
		glRasterPos4i:            getProcAddr("glRasterPos4i"),
		glRasterPos4iv:           getProcAddr("glRasterPos4iv"),
		glRasterPos4s:            getProcAddr("glRasterPos4s"),
		glRasterPos4sv:           getProcAddr("glRasterPos4sv"),
		glReadBuffer:             getProcAddr("glReadBuffer"),
		glReadPixels:             getProcAddr("glReadPixels"),
		glRectd:                  getProcAddr("glRectd"),
		glRectdv:                 getProcAddr("glRectdv"),
		glRectf:                  getProcAddr("glRectf"),
		glRectfv:                 getProcAddr("glRectfv"),
		glRecti:                  getProcAddr("glRecti"),
		glRectiv:                 getProcAddr("glRectiv"),
		glRects:                  getProcAddr("glRects"),
		glRectsv:                 getProcAddr("glRectsv"),
		glRenderMode:             getProcAddr("glRenderMode"),
		glRotated:                getProcAddr("glRotated"),
		glRotatef:                getProcAddr("glRotatef"),
		glScaled:                 getProcAddr("glScaled"),
		glScalef:                 getProcAddr("glScalef"),
		glScissor:                getProcAddr("glScissor"),
		glSelectBuffer:           getProcAddr("glSelectBuffer"),
		glShadeModel:             getProcAddr("glShadeModel"),
		glStencilFunc:            getProcAddr("glStencilFunc"),
		glStencilMask:            getProcAddr("glStencilMask"),
		glStencilOp:              getProcAddr("glStencilOp"),
		glTexCoord1d:             getProcAddr("glTexCoord1d"),
		glTexCoord1dv:            getProcAddr("glTexCoord1dv"),
		glTexCoord1f:             getProcAddr("glTexCoord1f"),
		glTexCoord1fv:            getProcAddr("glTexCoord1fv"),
		glTexCoord1i:             getProcAddr("glTexCoord1i"),
		glTexCoord1iv:            getProcAddr("glTexCoord1iv"),
		glTexCoord1s:             getProcAddr("glTexCoord1s"),
		glTexCoord1sv:            getProcAddr("glTexCoord1sv"),
		glTexCoord2d:             getProcAddr("glTexCoord2d"),
		glTexCoord2dv:            getProcAddr("glTexCoord2dv"),
		glTexCoord2f:             getProcAddr("glTexCoord2f"),
		glTexCoord2fv:            getProcAddr("glTexCoord2fv"),
		glTexCoord2i:             getProcAddr("glTexCoord2i"),
		glTexCoord2iv:            getProcAddr("glTexCoord2iv"),
		glTexCoord2s:             getProcAddr("glTexCoord2s"),
		glTexCoord2sv:            getProcAddr("glTexCoord2sv"),
		glTexCoord3d:             getProcAddr("glTexCoord3d"),
		glTexCoord3dv:            getProcAddr("glTexCoord3dv"),
		glTexCoord3f:             getProcAddr("glTexCoord3f"),
		glTexCoord3fv:            getProcAddr("glTexCoord3fv"),
		glTexCoord3i:             getProcAddr("glTexCoord3i"),
		glTexCoord3iv:            getProcAddr("glTexCoord3iv"),
		glTexCoord3s:             getProcAddr("glTexCoord3s"),
		glTexCoord3sv:            getProcAddr("glTexCoord3sv"),
		glTexCoord4d:             getProcAddr("glTexCoord4d"),
		glTexCoord4dv:            getProcAddr("glTexCoord4dv"),
		glTexCoord4f:             getProcAddr("glTexCoord4f"),
		glTexCoord4fv:            getProcAddr("glTexCoord4fv"),
		glTexCoord4i:             getProcAddr("glTexCoord4i"),
		glTexCoord4iv:            getProcAddr("glTexCoord4iv"),
		glTexCoord4s:             getProcAddr("glTexCoord4s"),
		glTexCoord4sv:            getProcAddr("glTexCoord4sv"),
		glTexCoordPointer:        getProcAddr("glTexCoordPointer"),
		glTexEnvf:                getProcAddr("glTexEnvf"),
		glTexEnvfv:               getProcAddr("glTexEnvfv"),
		glTexEnvi:                getProcAddr("glTexEnvi"),
		glTexEnviv:               getProcAddr("glTexEnviv"),
		glTexGend:                getProcAddr("glTexGend"),
		glTexGendv:               getProcAddr("glTexGendv"),
		glTexGenf:                getProcAddr("glTexGenf"),
		glTexGenfv:               getProcAddr("glTexGenfv"),
		glTexGeni:                getProcAddr("glTexGeni"),
		glTexGeniv:               getProcAddr("glTexGeniv"),
		glTexImage1D:             getProcAddr("glTexImage1D"),
		glTexImage2D:             getProcAddr("glTexImage2D"),
		glTexParameterf:          getProcAddr("glTexParameterf"),
		glTexParameterfv:         getProcAddr("glTexParameterfv"),
		glTexParameteri:          getProcAddr("glTexParameteri"),
		glTexParameteriv:         getProcAddr("glTexParameteriv"),
		glTexSubImage1D:          getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:          getProcAddr("glTexSubImage2D"),
		glTranslated:             getProcAddr("glTranslated"),
		glTranslatef:             getProcAddr("glTranslatef"),
		glVertex2d:               getProcAddr("glVertex2d"),
		glVertex2dv:              getProcAddr("glVertex2dv"),
		glVertex2f:               getProcAddr("glVertex2f"),
		glVertex2fv:              getProcAddr("glVertex2fv"),
		glVertex2i:               getProcAddr("glVertex2i"),
		glVertex2iv:              getProcAddr("glVertex2iv"),
		glVertex2s:               getProcAddr("glVertex2s"),
		glVertex2sv:              getProcAddr("glVertex2sv"),
		glVertex3d:               getProcAddr("glVertex3d"),
		glVertex3dv:              getProcAddr("glVertex3dv"),
		glVertex3f:               getProcAddr("glVertex3f"),
		glVertex3fv:              getProcAddr("glVertex3fv"),
		glVertex3i:               getProcAddr("glVertex3i"),
		glVertex3iv:              getProcAddr("glVertex3iv"),
		glVertex3s:               getProcAddr("glVertex3s"),
		glVertex3sv:              getProcAddr("glVertex3sv"),
		glVertex4d:               getProcAddr("glVertex4d"),
		glVertex4dv:              getProcAddr("glVertex4dv"),
		glVertex4f:               getProcAddr("glVertex4f"),
		glVertex4fv:              getProcAddr("glVertex4fv"),
		glVertex4i:               getProcAddr("glVertex4i"),
		glVertex4iv:              getProcAddr("glVertex4iv"),
		glVertex4s:               getProcAddr("glVertex4s"),
		glVertex4sv:              getProcAddr("glVertex4sv"),
		glVertexPointer:          getProcAddr("glVertexPointer"),
		glViewport:               getProcAddr("glViewport"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL120 interface {
	Extensions
	Accum(op uint32, value float32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	Begin(mode uint32)
	BindTexture(target uint32, texture uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendFunc(sfactor uint32, dfactor uint32)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaterial(face uint32, mode uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CullFace(mode uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteTextures(n int32, textures *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DrawArrays(mode uint32, first int32, count int32)
	DrawBuffer(buf uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	End()
	EndList()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	Finish()
	Flush()
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenLists(range_ int32) uint32
	GenTextures(n int32, textures *uint32)
	GetBooleanv(pname uint32, data *bool)
	GetClipPlane(plane uint32, equation *float64)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloatv(pname uint32, data *float32)
	GetIntegerv(pname uint32, data *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetString(name uint32) *uint8
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	IsEnabled(cap uint32) bool
	IsList(list uint32) bool
	IsTexture(texture uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopMatrix()
	PopName()
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	RenderMode(mode uint32) int32
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
}

func New120(getProcAddr func(name string) unsafe.Pointer) GL120 {
	gl := &lib{
		glAccum:                  getProcAddr("glAccum"),
		glAlphaFunc:              getProcAddr("glAlphaFunc"),
		glAreTexturesResident:    getProcAddr("glAreTexturesResident"),
		glArrayElement:           getProcAddr("glArrayElement"),
		glBegin:                  getProcAddr("glBegin"),
		glBindTexture:            getProcAddr("glBindTexture"),
		glBitmap:                 getProcAddr("glBitmap"),
		glBlendFunc:              getProcAddr("glBlendFunc"),
		glCallList:               getProcAddr("glCallList"),
		glCallLists:              getProcAddr("glCallLists"),
		glClear:                  getProcAddr("glClear"),
		glClearAccum:             getProcAddr("glClearAccum"),
		glClearColor:             getProcAddr("glClearColor"),
		glClearDepth:             getProcAddr("glClearDepth"),
		glClearIndex:             getProcAddr("glClearIndex"),
		glClearStencil:           getProcAddr("glClearStencil"),
		glClipPlane:              getProcAddr("glClipPlane"),
		glColor3b:                getProcAddr("glColor3b"),
		glColor3bv:               getProcAddr("glColor3bv"),
		glColor3d:                getProcAddr("glColor3d"),
		glColor3dv:               getProcAddr("glColor3dv"),
		glColor3f:                getProcAddr("glColor3f"),
		glColor3fv:               getProcAddr("glColor3fv"),
		glColor3i:                getProcAddr("glColor3i"),
		glColor3iv:               getProcAddr("glColor3iv"),
		glColor3s:                getProcAddr("glColor3s"),
		glColor3sv:               getProcAddr("glColor3sv"),
		glColor3ub:               getProcAddr("glColor3ub"),
		glColor3ubv:              getProcAddr("glColor3ubv"),
		glColor3ui:               getProcAddr("glColor3ui"),
		glColor3uiv:              getProcAddr("glColor3uiv"),
		glColor3us:               getProcAddr("glColor3us"),
		glColor3usv:              getProcAddr("glColor3usv"),
		glColor4b:                getProcAddr("glColor4b"),
		glColor4bv:               getProcAddr("glColor4bv"),
		glColor4d:                getProcAddr("glColor4d"),
		glColor4dv:               getProcAddr("glColor4dv"),
		glColor4f:                getProcAddr("glColor4f"),
		glColor4fv:               getProcAddr("glColor4fv"),
		glColor4i:                getProcAddr("glColor4i"),
		glColor4iv:               getProcAddr("glColor4iv"),
		glColor4s:                getProcAddr("glColor4s"),
		glColor4sv:               getProcAddr("glColor4sv"),
		glColor4ub:               getProcAddr("glColor4ub"),
		glColor4ubv:              getProcAddr("glColor4ubv"),
		glColor4ui:               getProcAddr("glColor4ui"),
		glColor4uiv:              getProcAddr("glColor4uiv"),
		glColor4us:               getProcAddr("glColor4us"),
		glColor4usv:              getProcAddr("glColor4usv"),
		glColorMask:              getProcAddr("glColorMask"),
		glColorMaterial:          getProcAddr("glColorMaterial"),
		glColorPointer:           getProcAddr("glColorPointer"),
		glCopyPixels:             getProcAddr("glCopyPixels"),
		glCopyTexImage1D:         getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:         getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:      getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:      getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:      getProcAddr("glCopyTexSubImage3D"),
		glCullFace:               getProcAddr("glCullFace"),
		glDeleteLists:            getProcAddr("glDeleteLists"),
		glDeleteTextures:         getProcAddr("glDeleteTextures"),
		glDepthFunc:              getProcAddr("glDepthFunc"),
		glDepthMask:              getProcAddr("glDepthMask"),
		glDepthRange:             getProcAddr("glDepthRange"),
		glDisable:                getProcAddr("glDisable"),
		glDisableClientState:     getProcAddr("glDisableClientState"),
		glDrawArrays:             getProcAddr("glDrawArrays"),
		glDrawBuffer:             getProcAddr("glDrawBuffer"),
		glDrawElements:           getProcAddr("glDrawElements"),
		glDrawPixels:             getProcAddr("glDrawPixels"),
		glDrawRangeElements:      getProcAddr("glDrawRangeElements"),
		glEdgeFlag:               getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:        getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:              getProcAddr("glEdgeFlagv"),
		glEnable:                 getProcAddr("glEnable"),
		glEnableClientState:      getProcAddr("glEnableClientState"),
		glEnd:                    getProcAddr("glEnd"),
		glEndList:                getProcAddr("glEndList"),
		glEvalCoord1d:            getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:           getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:            getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:           getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:            getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:           getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:            getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:           getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:              getProcAddr("glEvalMesh1"),
		glEvalMesh2:              getProcAddr("glEvalMesh2"),
		glEvalPoint1:             getProcAddr("glEvalPoint1"),
		glEvalPoint2:             getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:         getProcAddr("glFeedbackBuffer"),
		glFinish:                 getProcAddr("glFinish"),
		glFlush:                  getProcAddr("glFlush"),
		glFogf:                   getProcAddr("glFogf"),
		glFogfv:                  getProcAddr("glFogfv"),
		glFogi:                   getProcAddr("glFogi"),
		glFogiv:                  getProcAddr("glFogiv"),
		glFrontFace:              getProcAddr("glFrontFace"),
		glFrustum:                getProcAddr("glFrustum"),
		glGenLists:               getProcAddr("glGenLists"),
		glGenTextures:            getProcAddr("glGenTextures"),
		glGetBooleanv:            getProcAddr("glGetBooleanv"),
		glGetClipPlane:           getProcAddr("glGetClipPlane"),
		glGetDoublev:             getProcAddr("glGetDoublev"),
		glGetError:               getProcAddr("glGetError"),
		glGetFloatv:              getProcAddr("glGetFloatv"),
		glGetIntegerv:            getProcAddr("glGetIntegerv"),
		glGetLightfv:             getProcAddr("glGetLightfv"),
		glGetLightiv:             getProcAddr("glGetLightiv"),
		glGetMapdv:               getProcAddr("glGetMapdv"),
		glGetMapfv:               getProcAddr("glGetMapfv"),
		glGetMapiv:               getProcAddr("glGetMapiv"),
		glGetMaterialfv:          getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:          getProcAddr("glGetMaterialiv"),
		glGetPixelMapfv:          getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:         getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:         getProcAddr("glGetPixelMapusv"),
		glGetPointerv:            getProcAddr("glGetPointerv"),
		glGetPolygonStipple:      getProcAddr("glGetPolygonStipple"),
		glGetString:              getProcAddr("glGetString"),
		glGetTexEnvfv:            getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:            getProcAddr("glGetTexEnviv"),
		glGetTexGendv:            getProcAddr("glGetTexGendv"),
		glGetTexGenfv:            getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:            getProcAddr("glGetTexGeniv"),
		glGetTexImage:            getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv: getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv: getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterfv:      getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:      getProcAddr("glGetTexParameteriv"),
		glHint:                   getProcAddr("glHint"),
		glIndexMask:              getProcAddr("glIndexMask"),
		glIndexPointer:           getProcAddr("glIndexPointer"),
		glIndexd:                 getProcAddr("glIndexd"),
		glIndexdv:                getProcAddr("glIndexdv"),
		glIndexf:                 getProcAddr("glIndexf"),
		glIndexfv:                getProcAddr("glIndexfv"),
		glIndexi:                 getProcAddr("glIndexi"),
		glIndexiv:                getProcAddr("glIndexiv"),
		glIndexs:                 getProcAddr("glIndexs"),
		glIndexsv:                getProcAddr("glIndexsv"),
		glIndexub:                getProcAddr("glIndexub"),
		glIndexubv:               getProcAddr("glIndexubv"),
		glInitNames:              getProcAddr("glInitNames"),
		glInterleavedArrays:      getProcAddr("glInterleavedArrays"),
		glIsEnabled:              getProcAddr("glIsEnabled"),
		glIsList:                 getProcAddr("glIsList"),
		glIsTexture:              getProcAddr("glIsTexture"),
		glLightModelf:            getProcAddr("glLightModelf"),
		glLightModelfv:           getProcAddr("glLightModelfv"),
		glLightModeli:            getProcAddr("glLightModeli"),
		glLightModeliv:           getProcAddr("glLightModeliv"),
		glLightf:                 getProcAddr("glLightf"),
		glLightfv:                getProcAddr("glLightfv"),
		glLighti:                 getProcAddr("glLighti"),
		glLightiv:                getProcAddr("glLightiv"),
		glLineStipple:            getProcAddr("glLineStipple"),
		glLineWidth:              getProcAddr("glLineWidth"),
		glListBase:               getProcAddr("glListBase"),
		glLoadIdentity:           getProcAddr("glLoadIdentity"),
		glLoadMatrixd:            getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:            getProcAddr("glLoadMatrixf"),
		glLoadName:               getProcAddr("glLoadName"),
		glLogicOp:                getProcAddr("glLogicOp"),
		glMap1d:                  getProcAddr("glMap1d"),
		glMap1f:                  getProcAddr("glMap1f"),
		glMap2d:                  getProcAddr("glMap2d"),
		glMap2f:                  getProcAddr("glMap2f"),
		glMapGrid1d:              getProcAddr("glMapGrid1d"),
		glMapGrid1f:              getProcAddr("glMapGrid1f"),
		glMapGrid2d:              getProcAddr("glMapGrid2d"),
		glMapGrid2f:              getProcAddr("glMapGrid2f"),
		glMaterialf:              getProcAddr("glMaterialf"),
		glMaterialfv:             getProcAddr("glMaterialfv"),
		glMateriali:              getProcAddr("glMateriali"),
		glMaterialiv:             getProcAddr("glMaterialiv"),
		glMatrixMode:             getProcAddr("glMatrixMode"),
		glMultMatrixd:            getProcAddr("glMultMatrixd"),
		glMultMatrixf:            getProcAddr("glMultMatrixf"),
		glNewList:                getProcAddr("glNewList"),
		glNormal3b:               getProcAddr("glNormal3b"),
		glNormal3bv:              getProcAddr("glNormal3bv"),
		glNormal3d:               getProcAddr("glNormal3d"),
		glNormal3dv:              getProcAddr("glNormal3dv"),
		glNormal3f:               getProcAddr("glNormal3f"),
		glNormal3fv:              getProcAddr("glNormal3fv"),
		glNormal3i:               getProcAddr("glNormal3i"),
		glNormal3iv:              getProcAddr("glNormal3iv"),
		glNormal3s:               getProcAddr("glNormal3s"),
		glNormal3sv:              getProcAddr("glNormal3sv"),
		glNormalPointer:          getProcAddr("glNormalPointer"),
		glOrtho:                  getProcAddr("glOrtho"),
		glPassThrough:            getProcAddr("glPassThrough"),
		glPixelMapfv:             getProcAddr("glPixelMapfv"),
		glPixelMapuiv:            getProcAddr("glPixelMapuiv"),
		glPixelMapusv:            getProcAddr("glPixelMapusv"),
		glPixelStoref:            getProcAddr("glPixelStoref"),
		glPixelStorei:            getProcAddr("glPixelStorei"),
		glPixelTransferf:         getProcAddr("glPixelTransferf"),
		glPixelTransferi:         getProcAddr("glPixelTransferi"),
		glPixelZoom:              getProcAddr("glPixelZoom"),
		glPointSize:              getProcAddr("glPointSize"),
		glPolygonMode:            getProcAddr("glPolygonMode"),
		glPolygonOffset:          getProcAddr("glPolygonOffset"),
		glPolygonStipple:         getProcAddr("glPolygonStipple"),
		glPopAttrib:              getProcAddr("glPopAttrib"),
		glPopClientAttrib:        getProcAddr("glPopClientAttrib"),
		glPopMatrix:              getProcAddr("glPopMatrix"),
		glPopName:                getProcAddr("glPopName"),
		glPrioritizeTextures:     getProcAddr("glPrioritizeTextures"),
		glPushAttrib:             getProcAddr("glPushAttrib"),
		glPushClientAttrib:       getProcAddr("glPushClientAttrib"),
		glPushMatrix:             getProcAddr("glPushMatrix"),
		glPushName:               getProcAddr("glPushName"),
		glRasterPos2d:            getProcAddr("glRasterPos2d"),
		glRasterPos2dv:           getProcAddr("glRasterPos2dv"),
		glRasterPos2f:            getProcAddr("glRasterPos2f"),
		glRasterPos2fv:           getProcAddr("glRasterPos2fv"),
		glRasterPos2i:            getProcAddr("glRasterPos2i"),
		glRasterPos2iv:           getProcAddr("glRasterPos2iv"),
		glRasterPos2s:            getProcAddr("glRasterPos2s"),
		glRasterPos2sv:           getProcAddr("glRasterPos2sv"),
		glRasterPos3d:            getProcAddr("glRasterPos3d"),
		glRasterPos3dv:           getProcAddr("glRasterPos3dv"),
		glRasterPos3f:            getProcAddr("glRasterPos3f"),
		glRasterPos3fv:           getProcAddr("glRasterPos3fv"),
		glRasterPos3i:            getProcAddr("glRasterPos3i"),
		glRasterPos3iv:           getProcAddr("glRasterPos3iv"),
		glRasterPos3s:            getProcAddr("glRasterPos3s"),
		glRasterPos3sv:           getProcAddr("glRasterPos3sv"),
		glRasterPos4d:            getProcAddr("glRasterPos4d"),
		glRasterPos4dv:           getProcAddr("glRasterPos4dv"),
		glRasterPos4f:            getProcAddr("glRasterPos4f"),
		glRasterPos4fv:           getProcAddr("glRasterPos4fv"),
		glRasterPos4i:            getProcAddr("glRasterPos4i"),
		glRasterPos4iv:           getProcAddr("glRasterPos4iv"),
		glRasterPos4s:            getProcAddr("glRasterPos4s"),
		glRasterPos4sv:           getProcAddr("glRasterPos4sv"),
		glReadBuffer:             getProcAddr("glReadBuffer"),
		glReadPixels:             getProcAddr("glReadPixels"),
		glRectd:                  getProcAddr("glRectd"),
		glRectdv:                 getProcAddr("glRectdv"),
		glRectf:                  getProcAddr("glRectf"),
		glRectfv:                 getProcAddr("glRectfv"),
		glRecti:                  getProcAddr("glRecti"),
		glRectiv:                 getProcAddr("glRectiv"),
		glRects:                  getProcAddr("glRects"),
		glRectsv:                 getProcAddr("glRectsv"),
		glRenderMode:             getProcAddr("glRenderMode"),
		glRotated:                getProcAddr("glRotated"),
		glRotatef:                getProcAddr("glRotatef"),
		glScaled:                 getProcAddr("glScaled"),
		glScalef:                 getProcAddr("glScalef"),
		glScissor:                getProcAddr("glScissor"),
		glSelectBuffer:           getProcAddr("glSelectBuffer"),
		glShadeModel:             getProcAddr("glShadeModel"),
		glStencilFunc:            getProcAddr("glStencilFunc"),
		glStencilMask:            getProcAddr("glStencilMask"),
		glStencilOp:              getProcAddr("glStencilOp"),
		glTexCoord1d:             getProcAddr("glTexCoord1d"),
		glTexCoord1dv:            getProcAddr("glTexCoord1dv"),
		glTexCoord1f:             getProcAddr("glTexCoord1f"),
		glTexCoord1fv:            getProcAddr("glTexCoord1fv"),
		glTexCoord1i:             getProcAddr("glTexCoord1i"),
		glTexCoord1iv:            getProcAddr("glTexCoord1iv"),
		glTexCoord1s:             getProcAddr("glTexCoord1s"),
		glTexCoord1sv:            getProcAddr("glTexCoord1sv"),
		glTexCoord2d:             getProcAddr("glTexCoord2d"),
		glTexCoord2dv:            getProcAddr("glTexCoord2dv"),
		glTexCoord2f:             getProcAddr("glTexCoord2f"),
		glTexCoord2fv:            getProcAddr("glTexCoord2fv"),
		glTexCoord2i:             getProcAddr("glTexCoord2i"),
		glTexCoord2iv:            getProcAddr("glTexCoord2iv"),
		glTexCoord2s:             getProcAddr("glTexCoord2s"),
		glTexCoord2sv:            getProcAddr("glTexCoord2sv"),
		glTexCoord3d:             getProcAddr("glTexCoord3d"),
		glTexCoord3dv:            getProcAddr("glTexCoord3dv"),
		glTexCoord3f:             getProcAddr("glTexCoord3f"),
		glTexCoord3fv:            getProcAddr("glTexCoord3fv"),
		glTexCoord3i:             getProcAddr("glTexCoord3i"),
		glTexCoord3iv:            getProcAddr("glTexCoord3iv"),
		glTexCoord3s:             getProcAddr("glTexCoord3s"),
		glTexCoord3sv:            getProcAddr("glTexCoord3sv"),
		glTexCoord4d:             getProcAddr("glTexCoord4d"),
		glTexCoord4dv:            getProcAddr("glTexCoord4dv"),
		glTexCoord4f:             getProcAddr("glTexCoord4f"),
		glTexCoord4fv:            getProcAddr("glTexCoord4fv"),
		glTexCoord4i:             getProcAddr("glTexCoord4i"),
		glTexCoord4iv:            getProcAddr("glTexCoord4iv"),
		glTexCoord4s:             getProcAddr("glTexCoord4s"),
		glTexCoord4sv:            getProcAddr("glTexCoord4sv"),
		glTexCoordPointer:        getProcAddr("glTexCoordPointer"),
		glTexEnvf:                getProcAddr("glTexEnvf"),
		glTexEnvfv:               getProcAddr("glTexEnvfv"),
		glTexEnvi:                getProcAddr("glTexEnvi"),
		glTexEnviv:               getProcAddr("glTexEnviv"),
		glTexGend:                getProcAddr("glTexGend"),
		glTexGendv:               getProcAddr("glTexGendv"),
		glTexGenf:                getProcAddr("glTexGenf"),
		glTexGenfv:               getProcAddr("glTexGenfv"),
		glTexGeni:                getProcAddr("glTexGeni"),
		glTexGeniv:               getProcAddr("glTexGeniv"),
		glTexImage1D:             getProcAddr("glTexImage1D"),
		glTexImage2D:             getProcAddr("glTexImage2D"),
		glTexImage3D:             getProcAddr("glTexImage3D"),
		glTexParameterf:          getProcAddr("glTexParameterf"),
		glTexParameterfv:         getProcAddr("glTexParameterfv"),
		glTexParameteri:          getProcAddr("glTexParameteri"),
		glTexParameteriv:         getProcAddr("glTexParameteriv"),
		glTexSubImage1D:          getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:          getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:          getProcAddr("glTexSubImage3D"),
		glTranslated:             getProcAddr("glTranslated"),
		glTranslatef:             getProcAddr("glTranslatef"),
		glVertex2d:               getProcAddr("glVertex2d"),
		glVertex2dv:              getProcAddr("glVertex2dv"),
		glVertex2f:               getProcAddr("glVertex2f"),
		glVertex2fv:              getProcAddr("glVertex2fv"),
		glVertex2i:               getProcAddr("glVertex2i"),
		glVertex2iv:              getProcAddr("glVertex2iv"),
		glVertex2s:               getProcAddr("glVertex2s"),
		glVertex2sv:              getProcAddr("glVertex2sv"),
		glVertex3d:               getProcAddr("glVertex3d"),
		glVertex3dv:              getProcAddr("glVertex3dv"),
		glVertex3f:               getProcAddr("glVertex3f"),
		glVertex3fv:              getProcAddr("glVertex3fv"),
		glVertex3i:               getProcAddr("glVertex3i"),
		glVertex3iv:              getProcAddr("glVertex3iv"),
		glVertex3s:               getProcAddr("glVertex3s"),
		glVertex3sv:              getProcAddr("glVertex3sv"),
		glVertex4d:               getProcAddr("glVertex4d"),
		glVertex4dv:              getProcAddr("glVertex4dv"),
		glVertex4f:               getProcAddr("glVertex4f"),
		glVertex4fv:              getProcAddr("glVertex4fv"),
		glVertex4i:               getProcAddr("glVertex4i"),
		glVertex4iv:              getProcAddr("glVertex4iv"),
		glVertex4s:               getProcAddr("glVertex4s"),
		glVertex4sv:              getProcAddr("glVertex4sv"),
		glVertexPointer:          getProcAddr("glVertexPointer"),
		glViewport:               getProcAddr("glViewport"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL130 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	Begin(mode uint32)
	BindTexture(target uint32, texture uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendFunc(sfactor uint32, dfactor uint32)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClientActiveTexture(texture uint32)
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaterial(face uint32, mode uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CullFace(mode uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteTextures(n int32, textures *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DrawArrays(mode uint32, first int32, count int32)
	DrawBuffer(buf uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	End()
	EndList()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	Finish()
	Flush()
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenLists(range_ int32) uint32
	GenTextures(n int32, textures *uint32)
	GetBooleanv(pname uint32, data *bool)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloatv(pname uint32, data *float32)
	GetIntegerv(pname uint32, data *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetString(name uint32) *uint8
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	IsEnabled(cap uint32) bool
	IsList(list uint32) bool
	IsTexture(texture uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopMatrix()
	PopName()
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	RenderMode(mode uint32) int32
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
}

func New130(getProcAddr func(name string) unsafe.Pointer) GL130 {
	gl := &lib{
		glAccum:                   getProcAddr("glAccum"),
		glActiveTexture:           getProcAddr("glActiveTexture"),
		glAlphaFunc:               getProcAddr("glAlphaFunc"),
		glAreTexturesResident:     getProcAddr("glAreTexturesResident"),
		glArrayElement:            getProcAddr("glArrayElement"),
		glBegin:                   getProcAddr("glBegin"),
		glBindTexture:             getProcAddr("glBindTexture"),
		glBitmap:                  getProcAddr("glBitmap"),
		glBlendFunc:               getProcAddr("glBlendFunc"),
		glCallList:                getProcAddr("glCallList"),
		glCallLists:               getProcAddr("glCallLists"),
		glClear:                   getProcAddr("glClear"),
		glClearAccum:              getProcAddr("glClearAccum"),
		glClearColor:              getProcAddr("glClearColor"),
		glClearDepth:              getProcAddr("glClearDepth"),
		glClearIndex:              getProcAddr("glClearIndex"),
		glClearStencil:            getProcAddr("glClearStencil"),
		glClientActiveTexture:     getProcAddr("glClientActiveTexture"),
		glClipPlane:               getProcAddr("glClipPlane"),
		glColor3b:                 getProcAddr("glColor3b"),
		glColor3bv:                getProcAddr("glColor3bv"),
		glColor3d:                 getProcAddr("glColor3d"),
		glColor3dv:                getProcAddr("glColor3dv"),
		glColor3f:                 getProcAddr("glColor3f"),
		glColor3fv:                getProcAddr("glColor3fv"),
		glColor3i:                 getProcAddr("glColor3i"),
		glColor3iv:                getProcAddr("glColor3iv"),
		glColor3s:                 getProcAddr("glColor3s"),
		glColor3sv:                getProcAddr("glColor3sv"),
		glColor3ub:                getProcAddr("glColor3ub"),
		glColor3ubv:               getProcAddr("glColor3ubv"),
		glColor3ui:                getProcAddr("glColor3ui"),
		glColor3uiv:               getProcAddr("glColor3uiv"),
		glColor3us:                getProcAddr("glColor3us"),
		glColor3usv:               getProcAddr("glColor3usv"),
		glColor4b:                 getProcAddr("glColor4b"),
		glColor4bv:                getProcAddr("glColor4bv"),
		glColor4d:                 getProcAddr("glColor4d"),
		glColor4dv:                getProcAddr("glColor4dv"),
		glColor4f:                 getProcAddr("glColor4f"),
		glColor4fv:                getProcAddr("glColor4fv"),
		glColor4i:                 getProcAddr("glColor4i"),
		glColor4iv:                getProcAddr("glColor4iv"),
		glColor4s:                 getProcAddr("glColor4s"),
		glColor4sv:                getProcAddr("glColor4sv"),
		glColor4ub:                getProcAddr("glColor4ub"),
		glColor4ubv:               getProcAddr("glColor4ubv"),
		glColor4ui:                getProcAddr("glColor4ui"),
		glColor4uiv:               getProcAddr("glColor4uiv"),
		glColor4us:                getProcAddr("glColor4us"),
		glColor4usv:               getProcAddr("glColor4usv"),
		glColorMask:               getProcAddr("glColorMask"),
		glColorMaterial:           getProcAddr("glColorMaterial"),
		glColorPointer:            getProcAddr("glColorPointer"),
		glCompressedTexImage1D:    getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:    getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:    getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D: getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D: getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D: getProcAddr("glCompressedTexSubImage3D"),
		glCopyPixels:              getProcAddr("glCopyPixels"),
		glCopyTexImage1D:          getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:          getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:       getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:       getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:       getProcAddr("glCopyTexSubImage3D"),
		glCullFace:                getProcAddr("glCullFace"),
		glDeleteLists:             getProcAddr("glDeleteLists"),
		glDeleteTextures:          getProcAddr("glDeleteTextures"),
		glDepthFunc:               getProcAddr("glDepthFunc"),
		glDepthMask:               getProcAddr("glDepthMask"),
		glDepthRange:              getProcAddr("glDepthRange"),
		glDisable:                 getProcAddr("glDisable"),
		glDisableClientState:      getProcAddr("glDisableClientState"),
		glDrawArrays:              getProcAddr("glDrawArrays"),
		glDrawBuffer:              getProcAddr("glDrawBuffer"),
		glDrawElements:            getProcAddr("glDrawElements"),
		glDrawPixels:              getProcAddr("glDrawPixels"),
		glDrawRangeElements:       getProcAddr("glDrawRangeElements"),
		glEdgeFlag:                getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:         getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:               getProcAddr("glEdgeFlagv"),
		glEnable:                  getProcAddr("glEnable"),
		glEnableClientState:       getProcAddr("glEnableClientState"),
		glEnd:                     getProcAddr("glEnd"),
		glEndList:                 getProcAddr("glEndList"),
		glEvalCoord1d:             getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:            getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:             getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:            getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:             getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:            getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:             getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:            getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:               getProcAddr("glEvalMesh1"),
		glEvalMesh2:               getProcAddr("glEvalMesh2"),
		glEvalPoint1:              getProcAddr("glEvalPoint1"),
		glEvalPoint2:              getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:          getProcAddr("glFeedbackBuffer"),
		glFinish:                  getProcAddr("glFinish"),
		glFlush:                   getProcAddr("glFlush"),
		glFogf:                    getProcAddr("glFogf"),
		glFogfv:                   getProcAddr("glFogfv"),
		glFogi:                    getProcAddr("glFogi"),
		glFogiv:                   getProcAddr("glFogiv"),
		glFrontFace:               getProcAddr("glFrontFace"),
		glFrustum:                 getProcAddr("glFrustum"),
		glGenLists:                getProcAddr("glGenLists"),
		glGenTextures:             getProcAddr("glGenTextures"),
		glGetBooleanv:             getProcAddr("glGetBooleanv"),
		glGetClipPlane:            getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:   getProcAddr("glGetCompressedTexImage"),
		glGetDoublev:              getProcAddr("glGetDoublev"),
		glGetError:                getProcAddr("glGetError"),
		glGetFloatv:               getProcAddr("glGetFloatv"),
		glGetIntegerv:             getProcAddr("glGetIntegerv"),
		glGetLightfv:              getProcAddr("glGetLightfv"),
		glGetLightiv:              getProcAddr("glGetLightiv"),
		glGetMapdv:                getProcAddr("glGetMapdv"),
		glGetMapfv:                getProcAddr("glGetMapfv"),
		glGetMapiv:                getProcAddr("glGetMapiv"),
		glGetMaterialfv:           getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:           getProcAddr("glGetMaterialiv"),
		glGetPixelMapfv:           getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:          getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:          getProcAddr("glGetPixelMapusv"),
		glGetPointerv:             getProcAddr("glGetPointerv"),
		glGetPolygonStipple:       getProcAddr("glGetPolygonStipple"),
		glGetString:               getProcAddr("glGetString"),
		glGetTexEnvfv:             getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:             getProcAddr("glGetTexEnviv"),
		glGetTexGendv:             getProcAddr("glGetTexGendv"),
		glGetTexGenfv:             getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:             getProcAddr("glGetTexGeniv"),
		glGetTexImage:             getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:  getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:  getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterfv:       getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:       getProcAddr("glGetTexParameteriv"),
		glHint:                    getProcAddr("glHint"),
		glIndexMask:               getProcAddr("glIndexMask"),
		glIndexPointer:            getProcAddr("glIndexPointer"),
		glIndexd:                  getProcAddr("glIndexd"),
		glIndexdv:                 getProcAddr("glIndexdv"),
		glIndexf:                  getProcAddr("glIndexf"),
		glIndexfv:                 getProcAddr("glIndexfv"),
		glIndexi:                  getProcAddr("glIndexi"),
		glIndexiv:                 getProcAddr("glIndexiv"),
		glIndexs:                  getProcAddr("glIndexs"),
		glIndexsv:                 getProcAddr("glIndexsv"),
		glIndexub:                 getProcAddr("glIndexub"),
		glIndexubv:                getProcAddr("glIndexubv"),
		glInitNames:               getProcAddr("glInitNames"),
		glInterleavedArrays:       getProcAddr("glInterleavedArrays"),
		glIsEnabled:               getProcAddr("glIsEnabled"),
		glIsList:                  getProcAddr("glIsList"),
		glIsTexture:               getProcAddr("glIsTexture"),
		glLightModelf:             getProcAddr("glLightModelf"),
		glLightModelfv:            getProcAddr("glLightModelfv"),
		glLightModeli:             getProcAddr("glLightModeli"),
		glLightModeliv:            getProcAddr("glLightModeliv"),
		glLightf:                  getProcAddr("glLightf"),
		glLightfv:                 getProcAddr("glLightfv"),
		glLighti:                  getProcAddr("glLighti"),
		glLightiv:                 getProcAddr("glLightiv"),
		glLineStipple:             getProcAddr("glLineStipple"),
		glLineWidth:               getProcAddr("glLineWidth"),
		glListBase:                getProcAddr("glListBase"),
		glLoadIdentity:            getProcAddr("glLoadIdentity"),
		glLoadMatrixd:             getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:             getProcAddr("glLoadMatrixf"),
		glLoadName:                getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:    getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:    getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                 getProcAddr("glLogicOp"),
		glMap1d:                   getProcAddr("glMap1d"),
		glMap1f:                   getProcAddr("glMap1f"),
		glMap2d:                   getProcAddr("glMap2d"),
		glMap2f:                   getProcAddr("glMap2f"),
		glMapGrid1d:               getProcAddr("glMapGrid1d"),
		glMapGrid1f:               getProcAddr("glMapGrid1f"),
		glMapGrid2d:               getProcAddr("glMapGrid2d"),
		glMapGrid2f:               getProcAddr("glMapGrid2f"),
		glMaterialf:               getProcAddr("glMaterialf"),
		glMaterialfv:              getProcAddr("glMaterialfv"),
		glMateriali:               getProcAddr("glMateriali"),
		glMaterialiv:              getProcAddr("glMaterialiv"),
		glMatrixMode:              getProcAddr("glMatrixMode"),
		glMultMatrixd:             getProcAddr("glMultMatrixd"),
		glMultMatrixf:             getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:    getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:    getProcAddr("glMultTransposeMatrixf"),
		glMultiTexCoord1d:         getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:        getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:         getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:        getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:         getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:        getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:         getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:        getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:         getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:        getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:         getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:        getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:         getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:        getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:         getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:        getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:         getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:        getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:         getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:        getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:         getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:        getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:         getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:        getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:         getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:        getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:         getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:        getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:         getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:        getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:         getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:        getProcAddr("glMultiTexCoord4sv"),
		glNewList:                 getProcAddr("glNewList"),
		glNormal3b:                getProcAddr("glNormal3b"),
		glNormal3bv:               getProcAddr("glNormal3bv"),
		glNormal3d:                getProcAddr("glNormal3d"),
		glNormal3dv:               getProcAddr("glNormal3dv"),
		glNormal3f:                getProcAddr("glNormal3f"),
		glNormal3fv:               getProcAddr("glNormal3fv"),
		glNormal3i:                getProcAddr("glNormal3i"),
		glNormal3iv:               getProcAddr("glNormal3iv"),
		glNormal3s:                getProcAddr("glNormal3s"),
		glNormal3sv:               getProcAddr("glNormal3sv"),
		glNormalPointer:           getProcAddr("glNormalPointer"),
		glOrtho:                   getProcAddr("glOrtho"),
		glPassThrough:             getProcAddr("glPassThrough"),
		glPixelMapfv:              getProcAddr("glPixelMapfv"),
		glPixelMapuiv:             getProcAddr("glPixelMapuiv"),
		glPixelMapusv:             getProcAddr("glPixelMapusv"),
		glPixelStoref:             getProcAddr("glPixelStoref"),
		glPixelStorei:             getProcAddr("glPixelStorei"),
		glPixelTransferf:          getProcAddr("glPixelTransferf"),
		glPixelTransferi:          getProcAddr("glPixelTransferi"),
		glPixelZoom:               getProcAddr("glPixelZoom"),
		glPointSize:               getProcAddr("glPointSize"),
		glPolygonMode:             getProcAddr("glPolygonMode"),
		glPolygonOffset:           getProcAddr("glPolygonOffset"),
		glPolygonStipple:          getProcAddr("glPolygonStipple"),
		glPopAttrib:               getProcAddr("glPopAttrib"),
		glPopClientAttrib:         getProcAddr("glPopClientAttrib"),
		glPopMatrix:               getProcAddr("glPopMatrix"),
		glPopName:                 getProcAddr("glPopName"),
		glPrioritizeTextures:      getProcAddr("glPrioritizeTextures"),
		glPushAttrib:              getProcAddr("glPushAttrib"),
		glPushClientAttrib:        getProcAddr("glPushClientAttrib"),
		glPushMatrix:              getProcAddr("glPushMatrix"),
		glPushName:                getProcAddr("glPushName"),
		glRasterPos2d:             getProcAddr("glRasterPos2d"),
		glRasterPos2dv:            getProcAddr("glRasterPos2dv"),
		glRasterPos2f:             getProcAddr("glRasterPos2f"),
		glRasterPos2fv:            getProcAddr("glRasterPos2fv"),
		glRasterPos2i:             getProcAddr("glRasterPos2i"),
		glRasterPos2iv:            getProcAddr("glRasterPos2iv"),
		glRasterPos2s:             getProcAddr("glRasterPos2s"),
		glRasterPos2sv:            getProcAddr("glRasterPos2sv"),
		glRasterPos3d:             getProcAddr("glRasterPos3d"),
		glRasterPos3dv:            getProcAddr("glRasterPos3dv"),
		glRasterPos3f:             getProcAddr("glRasterPos3f"),
		glRasterPos3fv:            getProcAddr("glRasterPos3fv"),
		glRasterPos3i:             getProcAddr("glRasterPos3i"),
		glRasterPos3iv:            getProcAddr("glRasterPos3iv"),
		glRasterPos3s:             getProcAddr("glRasterPos3s"),
		glRasterPos3sv:            getProcAddr("glRasterPos3sv"),
		glRasterPos4d:             getProcAddr("glRasterPos4d"),
		glRasterPos4dv:            getProcAddr("glRasterPos4dv"),
		glRasterPos4f:             getProcAddr("glRasterPos4f"),
		glRasterPos4fv:            getProcAddr("glRasterPos4fv"),
		glRasterPos4i:             getProcAddr("glRasterPos4i"),
		glRasterPos4iv:            getProcAddr("glRasterPos4iv"),
		glRasterPos4s:             getProcAddr("glRasterPos4s"),
		glRasterPos4sv:            getProcAddr("glRasterPos4sv"),
		glReadBuffer:              getProcAddr("glReadBuffer"),
		glReadPixels:              getProcAddr("glReadPixels"),
		glRectd:                   getProcAddr("glRectd"),
		glRectdv:                  getProcAddr("glRectdv"),
		glRectf:                   getProcAddr("glRectf"),
		glRectfv:                  getProcAddr("glRectfv"),
		glRecti:                   getProcAddr("glRecti"),
		glRectiv:                  getProcAddr("glRectiv"),
		glRects:                   getProcAddr("glRects"),
		glRectsv:                  getProcAddr("glRectsv"),
		glRenderMode:              getProcAddr("glRenderMode"),
		glRotated:                 getProcAddr("glRotated"),
		glRotatef:                 getProcAddr("glRotatef"),
		glSampleCoverage:          getProcAddr("glSampleCoverage"),
		glScaled:                  getProcAddr("glScaled"),
		glScalef:                  getProcAddr("glScalef"),
		glScissor:                 getProcAddr("glScissor"),
		glSelectBuffer:            getProcAddr("glSelectBuffer"),
		glShadeModel:              getProcAddr("glShadeModel"),
		glStencilFunc:             getProcAddr("glStencilFunc"),
		glStencilMask:             getProcAddr("glStencilMask"),
		glStencilOp:               getProcAddr("glStencilOp"),
		glTexCoord1d:              getProcAddr("glTexCoord1d"),
		glTexCoord1dv:             getProcAddr("glTexCoord1dv"),
		glTexCoord1f:              getProcAddr("glTexCoord1f"),
		glTexCoord1fv:             getProcAddr("glTexCoord1fv"),
		glTexCoord1i:              getProcAddr("glTexCoord1i"),
		glTexCoord1iv:             getProcAddr("glTexCoord1iv"),
		glTexCoord1s:              getProcAddr("glTexCoord1s"),
		glTexCoord1sv:             getProcAddr("glTexCoord1sv"),
		glTexCoord2d:              getProcAddr("glTexCoord2d"),
		glTexCoord2dv:             getProcAddr("glTexCoord2dv"),
		glTexCoord2f:              getProcAddr("glTexCoord2f"),
		glTexCoord2fv:             getProcAddr("glTexCoord2fv"),
		glTexCoord2i:              getProcAddr("glTexCoord2i"),
		glTexCoord2iv:             getProcAddr("glTexCoord2iv"),
		glTexCoord2s:              getProcAddr("glTexCoord2s"),
		glTexCoord2sv:             getProcAddr("glTexCoord2sv"),
		glTexCoord3d:              getProcAddr("glTexCoord3d"),
		glTexCoord3dv:             getProcAddr("glTexCoord3dv"),
		glTexCoord3f:              getProcAddr("glTexCoord3f"),
		glTexCoord3fv:             getProcAddr("glTexCoord3fv"),
		glTexCoord3i:              getProcAddr("glTexCoord3i"),
		glTexCoord3iv:             getProcAddr("glTexCoord3iv"),
		glTexCoord3s:              getProcAddr("glTexCoord3s"),
		glTexCoord3sv:             getProcAddr("glTexCoord3sv"),
		glTexCoord4d:              getProcAddr("glTexCoord4d"),
		glTexCoord4dv:             getProcAddr("glTexCoord4dv"),
		glTexCoord4f:              getProcAddr("glTexCoord4f"),
		glTexCoord4fv:             getProcAddr("glTexCoord4fv"),
		glTexCoord4i:              getProcAddr("glTexCoord4i"),
		glTexCoord4iv:             getProcAddr("glTexCoord4iv"),
		glTexCoord4s:              getProcAddr("glTexCoord4s"),
		glTexCoord4sv:             getProcAddr("glTexCoord4sv"),
		glTexCoordPointer:         getProcAddr("glTexCoordPointer"),
		glTexEnvf:                 getProcAddr("glTexEnvf"),
		glTexEnvfv:                getProcAddr("glTexEnvfv"),
		glTexEnvi:                 getProcAddr("glTexEnvi"),
		glTexEnviv:                getProcAddr("glTexEnviv"),
		glTexGend:                 getProcAddr("glTexGend"),
		glTexGendv:                getProcAddr("glTexGendv"),
		glTexGenf:                 getProcAddr("glTexGenf"),
		glTexGenfv:                getProcAddr("glTexGenfv"),
		glTexGeni:                 getProcAddr("glTexGeni"),
		glTexGeniv:                getProcAddr("glTexGeniv"),
		glTexImage1D:              getProcAddr("glTexImage1D"),
		glTexImage2D:              getProcAddr("glTexImage2D"),
		glTexImage3D:              getProcAddr("glTexImage3D"),
		glTexParameterf:           getProcAddr("glTexParameterf"),
		glTexParameterfv:          getProcAddr("glTexParameterfv"),
		glTexParameteri:           getProcAddr("glTexParameteri"),
		glTexParameteriv:          getProcAddr("glTexParameteriv"),
		glTexSubImage1D:           getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:           getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:           getProcAddr("glTexSubImage3D"),
		glTranslated:              getProcAddr("glTranslated"),
		glTranslatef:              getProcAddr("glTranslatef"),
		glVertex2d:                getProcAddr("glVertex2d"),
		glVertex2dv:               getProcAddr("glVertex2dv"),
		glVertex2f:                getProcAddr("glVertex2f"),
		glVertex2fv:               getProcAddr("glVertex2fv"),
		glVertex2i:                getProcAddr("glVertex2i"),
		glVertex2iv:               getProcAddr("glVertex2iv"),
		glVertex2s:                getProcAddr("glVertex2s"),
		glVertex2sv:               getProcAddr("glVertex2sv"),
		glVertex3d:                getProcAddr("glVertex3d"),
		glVertex3dv:               getProcAddr("glVertex3dv"),
		glVertex3f:                getProcAddr("glVertex3f"),
		glVertex3fv:               getProcAddr("glVertex3fv"),
		glVertex3i:                getProcAddr("glVertex3i"),
		glVertex3iv:               getProcAddr("glVertex3iv"),
		glVertex3s:                getProcAddr("glVertex3s"),
		glVertex3sv:               getProcAddr("glVertex3sv"),
		glVertex4d:                getProcAddr("glVertex4d"),
		glVertex4dv:               getProcAddr("glVertex4dv"),
		glVertex4f:                getProcAddr("glVertex4f"),
		glVertex4fv:               getProcAddr("glVertex4fv"),
		glVertex4i:                getProcAddr("glVertex4i"),
		glVertex4iv:               getProcAddr("glVertex4iv"),
		glVertex4s:                getProcAddr("glVertex4s"),
		glVertex4sv:               getProcAddr("glVertex4sv"),
		glVertexPointer:           getProcAddr("glVertexPointer"),
		glViewport:                getProcAddr("glViewport"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL140 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	Begin(mode uint32)
	BindTexture(target uint32, texture uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClientActiveTexture(texture uint32)
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaterial(face uint32, mode uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CullFace(mode uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteTextures(n int32, textures *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DrawArrays(mode uint32, first int32, count int32)
	DrawBuffer(buf uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	End()
	EndList()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	Finish()
	Flush()
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenLists(range_ int32) uint32
	GenTextures(n int32, textures *uint32)
	GetBooleanv(pname uint32, data *bool)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloatv(pname uint32, data *float32)
	GetIntegerv(pname uint32, data *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetString(name uint32) *uint8
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	IsEnabled(cap uint32) bool
	IsList(list uint32) bool
	IsTexture(texture uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopMatrix()
	PopName()
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	RenderMode(mode uint32) int32
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New140(getProcAddr func(name string) unsafe.Pointer) GL140 {
	gl := &lib{
		glAccum:                   getProcAddr("glAccum"),
		glActiveTexture:           getProcAddr("glActiveTexture"),
		glAlphaFunc:               getProcAddr("glAlphaFunc"),
		glAreTexturesResident:     getProcAddr("glAreTexturesResident"),
		glArrayElement:            getProcAddr("glArrayElement"),
		glBegin:                   getProcAddr("glBegin"),
		glBindTexture:             getProcAddr("glBindTexture"),
		glBitmap:                  getProcAddr("glBitmap"),
		glBlendColor:              getProcAddr("glBlendColor"),
		glBlendEquation:           getProcAddr("glBlendEquation"),
		glBlendFunc:               getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:       getProcAddr("glBlendFuncSeparate"),
		glCallList:                getProcAddr("glCallList"),
		glCallLists:               getProcAddr("glCallLists"),
		glClear:                   getProcAddr("glClear"),
		glClearAccum:              getProcAddr("glClearAccum"),
		glClearColor:              getProcAddr("glClearColor"),
		glClearDepth:              getProcAddr("glClearDepth"),
		glClearIndex:              getProcAddr("glClearIndex"),
		glClearStencil:            getProcAddr("glClearStencil"),
		glClientActiveTexture:     getProcAddr("glClientActiveTexture"),
		glClipPlane:               getProcAddr("glClipPlane"),
		glColor3b:                 getProcAddr("glColor3b"),
		glColor3bv:                getProcAddr("glColor3bv"),
		glColor3d:                 getProcAddr("glColor3d"),
		glColor3dv:                getProcAddr("glColor3dv"),
		glColor3f:                 getProcAddr("glColor3f"),
		glColor3fv:                getProcAddr("glColor3fv"),
		glColor3i:                 getProcAddr("glColor3i"),
		glColor3iv:                getProcAddr("glColor3iv"),
		glColor3s:                 getProcAddr("glColor3s"),
		glColor3sv:                getProcAddr("glColor3sv"),
		glColor3ub:                getProcAddr("glColor3ub"),
		glColor3ubv:               getProcAddr("glColor3ubv"),
		glColor3ui:                getProcAddr("glColor3ui"),
		glColor3uiv:               getProcAddr("glColor3uiv"),
		glColor3us:                getProcAddr("glColor3us"),
		glColor3usv:               getProcAddr("glColor3usv"),
		glColor4b:                 getProcAddr("glColor4b"),
		glColor4bv:                getProcAddr("glColor4bv"),
		glColor4d:                 getProcAddr("glColor4d"),
		glColor4dv:                getProcAddr("glColor4dv"),
		glColor4f:                 getProcAddr("glColor4f"),
		glColor4fv:                getProcAddr("glColor4fv"),
		glColor4i:                 getProcAddr("glColor4i"),
		glColor4iv:                getProcAddr("glColor4iv"),
		glColor4s:                 getProcAddr("glColor4s"),
		glColor4sv:                getProcAddr("glColor4sv"),
		glColor4ub:                getProcAddr("glColor4ub"),
		glColor4ubv:               getProcAddr("glColor4ubv"),
		glColor4ui:                getProcAddr("glColor4ui"),
		glColor4uiv:               getProcAddr("glColor4uiv"),
		glColor4us:                getProcAddr("glColor4us"),
		glColor4usv:               getProcAddr("glColor4usv"),
		glColorMask:               getProcAddr("glColorMask"),
		glColorMaterial:           getProcAddr("glColorMaterial"),
		glColorPointer:            getProcAddr("glColorPointer"),
		glCompressedTexImage1D:    getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:    getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:    getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D: getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D: getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D: getProcAddr("glCompressedTexSubImage3D"),
		glCopyPixels:              getProcAddr("glCopyPixels"),
		glCopyTexImage1D:          getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:          getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:       getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:       getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:       getProcAddr("glCopyTexSubImage3D"),
		glCullFace:                getProcAddr("glCullFace"),
		glDeleteLists:             getProcAddr("glDeleteLists"),
		glDeleteTextures:          getProcAddr("glDeleteTextures"),
		glDepthFunc:               getProcAddr("glDepthFunc"),
		glDepthMask:               getProcAddr("glDepthMask"),
		glDepthRange:              getProcAddr("glDepthRange"),
		glDisable:                 getProcAddr("glDisable"),
		glDisableClientState:      getProcAddr("glDisableClientState"),
		glDrawArrays:              getProcAddr("glDrawArrays"),
		glDrawBuffer:              getProcAddr("glDrawBuffer"),
		glDrawElements:            getProcAddr("glDrawElements"),
		glDrawPixels:              getProcAddr("glDrawPixels"),
		glDrawRangeElements:       getProcAddr("glDrawRangeElements"),
		glEdgeFlag:                getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:         getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:               getProcAddr("glEdgeFlagv"),
		glEnable:                  getProcAddr("glEnable"),
		glEnableClientState:       getProcAddr("glEnableClientState"),
		glEnd:                     getProcAddr("glEnd"),
		glEndList:                 getProcAddr("glEndList"),
		glEvalCoord1d:             getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:            getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:             getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:            getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:             getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:            getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:             getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:            getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:               getProcAddr("glEvalMesh1"),
		glEvalMesh2:               getProcAddr("glEvalMesh2"),
		glEvalPoint1:              getProcAddr("glEvalPoint1"),
		glEvalPoint2:              getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:          getProcAddr("glFeedbackBuffer"),
		glFinish:                  getProcAddr("glFinish"),
		glFlush:                   getProcAddr("glFlush"),
		glFogCoordPointer:         getProcAddr("glFogCoordPointer"),
		glFogCoordd:               getProcAddr("glFogCoordd"),
		glFogCoorddv:              getProcAddr("glFogCoorddv"),
		glFogCoordf:               getProcAddr("glFogCoordf"),
		glFogCoordfv:              getProcAddr("glFogCoordfv"),
		glFogf:                    getProcAddr("glFogf"),
		glFogfv:                   getProcAddr("glFogfv"),
		glFogi:                    getProcAddr("glFogi"),
		glFogiv:                   getProcAddr("glFogiv"),
		glFrontFace:               getProcAddr("glFrontFace"),
		glFrustum:                 getProcAddr("glFrustum"),
		glGenLists:                getProcAddr("glGenLists"),
		glGenTextures:             getProcAddr("glGenTextures"),
		glGetBooleanv:             getProcAddr("glGetBooleanv"),
		glGetClipPlane:            getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:   getProcAddr("glGetCompressedTexImage"),
		glGetDoublev:              getProcAddr("glGetDoublev"),
		glGetError:                getProcAddr("glGetError"),
		glGetFloatv:               getProcAddr("glGetFloatv"),
		glGetIntegerv:             getProcAddr("glGetIntegerv"),
		glGetLightfv:              getProcAddr("glGetLightfv"),
		glGetLightiv:              getProcAddr("glGetLightiv"),
		glGetMapdv:                getProcAddr("glGetMapdv"),
		glGetMapfv:                getProcAddr("glGetMapfv"),
		glGetMapiv:                getProcAddr("glGetMapiv"),
		glGetMaterialfv:           getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:           getProcAddr("glGetMaterialiv"),
		glGetPixelMapfv:           getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:          getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:          getProcAddr("glGetPixelMapusv"),
		glGetPointerv:             getProcAddr("glGetPointerv"),
		glGetPolygonStipple:       getProcAddr("glGetPolygonStipple"),
		glGetString:               getProcAddr("glGetString"),
		glGetTexEnvfv:             getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:             getProcAddr("glGetTexEnviv"),
		glGetTexGendv:             getProcAddr("glGetTexGendv"),
		glGetTexGenfv:             getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:             getProcAddr("glGetTexGeniv"),
		glGetTexImage:             getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:  getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:  getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterfv:       getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:       getProcAddr("glGetTexParameteriv"),
		glHint:                    getProcAddr("glHint"),
		glIndexMask:               getProcAddr("glIndexMask"),
		glIndexPointer:            getProcAddr("glIndexPointer"),
		glIndexd:                  getProcAddr("glIndexd"),
		glIndexdv:                 getProcAddr("glIndexdv"),
		glIndexf:                  getProcAddr("glIndexf"),
		glIndexfv:                 getProcAddr("glIndexfv"),
		glIndexi:                  getProcAddr("glIndexi"),
		glIndexiv:                 getProcAddr("glIndexiv"),
		glIndexs:                  getProcAddr("glIndexs"),
		glIndexsv:                 getProcAddr("glIndexsv"),
		glIndexub:                 getProcAddr("glIndexub"),
		glIndexubv:                getProcAddr("glIndexubv"),
		glInitNames:               getProcAddr("glInitNames"),
		glInterleavedArrays:       getProcAddr("glInterleavedArrays"),
		glIsEnabled:               getProcAddr("glIsEnabled"),
		glIsList:                  getProcAddr("glIsList"),
		glIsTexture:               getProcAddr("glIsTexture"),
		glLightModelf:             getProcAddr("glLightModelf"),
		glLightModelfv:            getProcAddr("glLightModelfv"),
		glLightModeli:             getProcAddr("glLightModeli"),
		glLightModeliv:            getProcAddr("glLightModeliv"),
		glLightf:                  getProcAddr("glLightf"),
		glLightfv:                 getProcAddr("glLightfv"),
		glLighti:                  getProcAddr("glLighti"),
		glLightiv:                 getProcAddr("glLightiv"),
		glLineStipple:             getProcAddr("glLineStipple"),
		glLineWidth:               getProcAddr("glLineWidth"),
		glListBase:                getProcAddr("glListBase"),
		glLoadIdentity:            getProcAddr("glLoadIdentity"),
		glLoadMatrixd:             getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:             getProcAddr("glLoadMatrixf"),
		glLoadName:                getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:    getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:    getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                 getProcAddr("glLogicOp"),
		glMap1d:                   getProcAddr("glMap1d"),
		glMap1f:                   getProcAddr("glMap1f"),
		glMap2d:                   getProcAddr("glMap2d"),
		glMap2f:                   getProcAddr("glMap2f"),
		glMapGrid1d:               getProcAddr("glMapGrid1d"),
		glMapGrid1f:               getProcAddr("glMapGrid1f"),
		glMapGrid2d:               getProcAddr("glMapGrid2d"),
		glMapGrid2f:               getProcAddr("glMapGrid2f"),
		glMaterialf:               getProcAddr("glMaterialf"),
		glMaterialfv:              getProcAddr("glMaterialfv"),
		glMateriali:               getProcAddr("glMateriali"),
		glMaterialiv:              getProcAddr("glMaterialiv"),
		glMatrixMode:              getProcAddr("glMatrixMode"),
		glMultMatrixd:             getProcAddr("glMultMatrixd"),
		glMultMatrixf:             getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:    getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:    getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:         getProcAddr("glMultiDrawArrays"),
		glMultiDrawElements:       getProcAddr("glMultiDrawElements"),
		glMultiTexCoord1d:         getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:        getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:         getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:        getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:         getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:        getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:         getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:        getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:         getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:        getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:         getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:        getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:         getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:        getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:         getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:        getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:         getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:        getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:         getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:        getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:         getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:        getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:         getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:        getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:         getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:        getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:         getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:        getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:         getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:        getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:         getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:        getProcAddr("glMultiTexCoord4sv"),
		glNewList:                 getProcAddr("glNewList"),
		glNormal3b:                getProcAddr("glNormal3b"),
		glNormal3bv:               getProcAddr("glNormal3bv"),
		glNormal3d:                getProcAddr("glNormal3d"),
		glNormal3dv:               getProcAddr("glNormal3dv"),
		glNormal3f:                getProcAddr("glNormal3f"),
		glNormal3fv:               getProcAddr("glNormal3fv"),
		glNormal3i:                getProcAddr("glNormal3i"),
		glNormal3iv:               getProcAddr("glNormal3iv"),
		glNormal3s:                getProcAddr("glNormal3s"),
		glNormal3sv:               getProcAddr("glNormal3sv"),
		glNormalPointer:           getProcAddr("glNormalPointer"),
		glOrtho:                   getProcAddr("glOrtho"),
		glPassThrough:             getProcAddr("glPassThrough"),
		glPixelMapfv:              getProcAddr("glPixelMapfv"),
		glPixelMapuiv:             getProcAddr("glPixelMapuiv"),
		glPixelMapusv:             getProcAddr("glPixelMapusv"),
		glPixelStoref:             getProcAddr("glPixelStoref"),
		glPixelStorei:             getProcAddr("glPixelStorei"),
		glPixelTransferf:          getProcAddr("glPixelTransferf"),
		glPixelTransferi:          getProcAddr("glPixelTransferi"),
		glPixelZoom:               getProcAddr("glPixelZoom"),
		glPointParameterf:         getProcAddr("glPointParameterf"),
		glPointParameterfv:        getProcAddr("glPointParameterfv"),
		glPointParameteri:         getProcAddr("glPointParameteri"),
		glPointParameteriv:        getProcAddr("glPointParameteriv"),
		glPointSize:               getProcAddr("glPointSize"),
		glPolygonMode:             getProcAddr("glPolygonMode"),
		glPolygonOffset:           getProcAddr("glPolygonOffset"),
		glPolygonStipple:          getProcAddr("glPolygonStipple"),
		glPopAttrib:               getProcAddr("glPopAttrib"),
		glPopClientAttrib:         getProcAddr("glPopClientAttrib"),
		glPopMatrix:               getProcAddr("glPopMatrix"),
		glPopName:                 getProcAddr("glPopName"),
		glPrioritizeTextures:      getProcAddr("glPrioritizeTextures"),
		glPushAttrib:              getProcAddr("glPushAttrib"),
		glPushClientAttrib:        getProcAddr("glPushClientAttrib"),
		glPushMatrix:              getProcAddr("glPushMatrix"),
		glPushName:                getProcAddr("glPushName"),
		glRasterPos2d:             getProcAddr("glRasterPos2d"),
		glRasterPos2dv:            getProcAddr("glRasterPos2dv"),
		glRasterPos2f:             getProcAddr("glRasterPos2f"),
		glRasterPos2fv:            getProcAddr("glRasterPos2fv"),
		glRasterPos2i:             getProcAddr("glRasterPos2i"),
		glRasterPos2iv:            getProcAddr("glRasterPos2iv"),
		glRasterPos2s:             getProcAddr("glRasterPos2s"),
		glRasterPos2sv:            getProcAddr("glRasterPos2sv"),
		glRasterPos3d:             getProcAddr("glRasterPos3d"),
		glRasterPos3dv:            getProcAddr("glRasterPos3dv"),
		glRasterPos3f:             getProcAddr("glRasterPos3f"),
		glRasterPos3fv:            getProcAddr("glRasterPos3fv"),
		glRasterPos3i:             getProcAddr("glRasterPos3i"),
		glRasterPos3iv:            getProcAddr("glRasterPos3iv"),
		glRasterPos3s:             getProcAddr("glRasterPos3s"),
		glRasterPos3sv:            getProcAddr("glRasterPos3sv"),
		glRasterPos4d:             getProcAddr("glRasterPos4d"),
		glRasterPos4dv:            getProcAddr("glRasterPos4dv"),
		glRasterPos4f:             getProcAddr("glRasterPos4f"),
		glRasterPos4fv:            getProcAddr("glRasterPos4fv"),
		glRasterPos4i:             getProcAddr("glRasterPos4i"),
		glRasterPos4iv:            getProcAddr("glRasterPos4iv"),
		glRasterPos4s:             getProcAddr("glRasterPos4s"),
		glRasterPos4sv:            getProcAddr("glRasterPos4sv"),
		glReadBuffer:              getProcAddr("glReadBuffer"),
		glReadPixels:              getProcAddr("glReadPixels"),
		glRectd:                   getProcAddr("glRectd"),
		glRectdv:                  getProcAddr("glRectdv"),
		glRectf:                   getProcAddr("glRectf"),
		glRectfv:                  getProcAddr("glRectfv"),
		glRecti:                   getProcAddr("glRecti"),
		glRectiv:                  getProcAddr("glRectiv"),
		glRects:                   getProcAddr("glRects"),
		glRectsv:                  getProcAddr("glRectsv"),
		glRenderMode:              getProcAddr("glRenderMode"),
		glRotated:                 getProcAddr("glRotated"),
		glRotatef:                 getProcAddr("glRotatef"),
		glSampleCoverage:          getProcAddr("glSampleCoverage"),
		glScaled:                  getProcAddr("glScaled"),
		glScalef:                  getProcAddr("glScalef"),
		glScissor:                 getProcAddr("glScissor"),
		glSecondaryColor3b:        getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:       getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:        getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:       getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:        getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:       getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:        getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:       getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:        getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:       getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:       getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:      getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:       getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:      getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:       getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:      getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorPointer:   getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:            getProcAddr("glSelectBuffer"),
		glShadeModel:              getProcAddr("glShadeModel"),
		glStencilFunc:             getProcAddr("glStencilFunc"),
		glStencilMask:             getProcAddr("glStencilMask"),
		glStencilOp:               getProcAddr("glStencilOp"),
		glTexCoord1d:              getProcAddr("glTexCoord1d"),
		glTexCoord1dv:             getProcAddr("glTexCoord1dv"),
		glTexCoord1f:              getProcAddr("glTexCoord1f"),
		glTexCoord1fv:             getProcAddr("glTexCoord1fv"),
		glTexCoord1i:              getProcAddr("glTexCoord1i"),
		glTexCoord1iv:             getProcAddr("glTexCoord1iv"),
		glTexCoord1s:              getProcAddr("glTexCoord1s"),
		glTexCoord1sv:             getProcAddr("glTexCoord1sv"),
		glTexCoord2d:              getProcAddr("glTexCoord2d"),
		glTexCoord2dv:             getProcAddr("glTexCoord2dv"),
		glTexCoord2f:              getProcAddr("glTexCoord2f"),
		glTexCoord2fv:             getProcAddr("glTexCoord2fv"),
		glTexCoord2i:              getProcAddr("glTexCoord2i"),
		glTexCoord2iv:             getProcAddr("glTexCoord2iv"),
		glTexCoord2s:              getProcAddr("glTexCoord2s"),
		glTexCoord2sv:             getProcAddr("glTexCoord2sv"),
		glTexCoord3d:              getProcAddr("glTexCoord3d"),
		glTexCoord3dv:             getProcAddr("glTexCoord3dv"),
		glTexCoord3f:              getProcAddr("glTexCoord3f"),
		glTexCoord3fv:             getProcAddr("glTexCoord3fv"),
		glTexCoord3i:              getProcAddr("glTexCoord3i"),
		glTexCoord3iv:             getProcAddr("glTexCoord3iv"),
		glTexCoord3s:              getProcAddr("glTexCoord3s"),
		glTexCoord3sv:             getProcAddr("glTexCoord3sv"),
		glTexCoord4d:              getProcAddr("glTexCoord4d"),
		glTexCoord4dv:             getProcAddr("glTexCoord4dv"),
		glTexCoord4f:              getProcAddr("glTexCoord4f"),
		glTexCoord4fv:             getProcAddr("glTexCoord4fv"),
		glTexCoord4i:              getProcAddr("glTexCoord4i"),
		glTexCoord4iv:             getProcAddr("glTexCoord4iv"),
		glTexCoord4s:              getProcAddr("glTexCoord4s"),
		glTexCoord4sv:             getProcAddr("glTexCoord4sv"),
		glTexCoordPointer:         getProcAddr("glTexCoordPointer"),
		glTexEnvf:                 getProcAddr("glTexEnvf"),
		glTexEnvfv:                getProcAddr("glTexEnvfv"),
		glTexEnvi:                 getProcAddr("glTexEnvi"),
		glTexEnviv:                getProcAddr("glTexEnviv"),
		glTexGend:                 getProcAddr("glTexGend"),
		glTexGendv:                getProcAddr("glTexGendv"),
		glTexGenf:                 getProcAddr("glTexGenf"),
		glTexGenfv:                getProcAddr("glTexGenfv"),
		glTexGeni:                 getProcAddr("glTexGeni"),
		glTexGeniv:                getProcAddr("glTexGeniv"),
		glTexImage1D:              getProcAddr("glTexImage1D"),
		glTexImage2D:              getProcAddr("glTexImage2D"),
		glTexImage3D:              getProcAddr("glTexImage3D"),
		glTexParameterf:           getProcAddr("glTexParameterf"),
		glTexParameterfv:          getProcAddr("glTexParameterfv"),
		glTexParameteri:           getProcAddr("glTexParameteri"),
		glTexParameteriv:          getProcAddr("glTexParameteriv"),
		glTexSubImage1D:           getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:           getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:           getProcAddr("glTexSubImage3D"),
		glTranslated:              getProcAddr("glTranslated"),
		glTranslatef:              getProcAddr("glTranslatef"),
		glVertex2d:                getProcAddr("glVertex2d"),
		glVertex2dv:               getProcAddr("glVertex2dv"),
		glVertex2f:                getProcAddr("glVertex2f"),
		glVertex2fv:               getProcAddr("glVertex2fv"),
		glVertex2i:                getProcAddr("glVertex2i"),
		glVertex2iv:               getProcAddr("glVertex2iv"),
		glVertex2s:                getProcAddr("glVertex2s"),
		glVertex2sv:               getProcAddr("glVertex2sv"),
		glVertex3d:                getProcAddr("glVertex3d"),
		glVertex3dv:               getProcAddr("glVertex3dv"),
		glVertex3f:                getProcAddr("glVertex3f"),
		glVertex3fv:               getProcAddr("glVertex3fv"),
		glVertex3i:                getProcAddr("glVertex3i"),
		glVertex3iv:               getProcAddr("glVertex3iv"),
		glVertex3s:                getProcAddr("glVertex3s"),
		glVertex3sv:               getProcAddr("glVertex3sv"),
		glVertex4d:                getProcAddr("glVertex4d"),
		glVertex4dv:               getProcAddr("glVertex4dv"),
		glVertex4f:                getProcAddr("glVertex4f"),
		glVertex4fv:               getProcAddr("glVertex4fv"),
		glVertex4i:                getProcAddr("glVertex4i"),
		glVertex4iv:               getProcAddr("glVertex4iv"),
		glVertex4s:                getProcAddr("glVertex4s"),
		glVertex4sv:               getProcAddr("glVertex4sv"),
		glVertexPointer:           getProcAddr("glVertexPointer"),
		glViewport:                getProcAddr("glViewport"),
		glWindowPos2d:             getProcAddr("glWindowPos2d"),
		glWindowPos2dv:            getProcAddr("glWindowPos2dv"),
		glWindowPos2f:             getProcAddr("glWindowPos2f"),
		glWindowPos2fv:            getProcAddr("glWindowPos2fv"),
		glWindowPos2i:             getProcAddr("glWindowPos2i"),
		glWindowPos2iv:            getProcAddr("glWindowPos2iv"),
		glWindowPos2s:             getProcAddr("glWindowPos2s"),
		glWindowPos2sv:            getProcAddr("glWindowPos2sv"),
		glWindowPos3d:             getProcAddr("glWindowPos3d"),
		glWindowPos3dv:            getProcAddr("glWindowPos3dv"),
		glWindowPos3f:             getProcAddr("glWindowPos3f"),
		glWindowPos3fv:            getProcAddr("glWindowPos3fv"),
		glWindowPos3i:             getProcAddr("glWindowPos3i"),
		glWindowPos3iv:            getProcAddr("glWindowPos3iv"),
		glWindowPos3s:             getProcAddr("glWindowPos3s"),
		glWindowPos3sv:            getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL150 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	Begin(mode uint32)
	BeginQuery(target uint32, id uint32)
	BindBuffer(target uint32, buffer uint32)
	BindTexture(target uint32, texture uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClientActiveTexture(texture uint32)
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaterial(face uint32, mode uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CullFace(mode uint32)
	DeleteBuffers(n int32, buffers *uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteQueries(n int32, ids *uint32)
	DeleteTextures(n int32, textures *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DrawArrays(mode uint32, first int32, count int32)
	DrawBuffer(buf uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	End()
	EndList()
	EndQuery(target uint32)
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	Finish()
	Flush()
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenBuffers(n int32, buffers *uint32)
	GenLists(range_ int32) uint32
	GenQueries(n int32, ids *uint32)
	GenTextures(n int32, textures *uint32)
	GetBooleanv(pname uint32, data *bool)
	GetBufferParameteriv(target uint32, pname uint32, params *int32)
	GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)
	GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloatv(pname uint32, data *float32)
	GetIntegerv(pname uint32, data *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetQueryObjectiv(id uint32, pname uint32, params *int32)
	GetQueryObjectuiv(id uint32, pname uint32, params *uint32)
	GetQueryiv(target uint32, pname uint32, params *int32)
	GetString(name uint32) *uint8
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	IsBuffer(buffer uint32) bool
	IsEnabled(cap uint32) bool
	IsList(list uint32) bool
	IsQuery(id uint32) bool
	IsTexture(texture uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapBuffer(target uint32, access uint32) unsafe.Pointer
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopMatrix()
	PopName()
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	RenderMode(mode uint32) int32
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	UnmapBuffer(target uint32) bool
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New150(getProcAddr func(name string) unsafe.Pointer) GL150 {
	gl := &lib{
		glAccum:                   getProcAddr("glAccum"),
		glActiveTexture:           getProcAddr("glActiveTexture"),
		glAlphaFunc:               getProcAddr("glAlphaFunc"),
		glAreTexturesResident:     getProcAddr("glAreTexturesResident"),
		glArrayElement:            getProcAddr("glArrayElement"),
		glBegin:                   getProcAddr("glBegin"),
		glBeginQuery:              getProcAddr("glBeginQuery"),
		glBindBuffer:              getProcAddr("glBindBuffer"),
		glBindTexture:             getProcAddr("glBindTexture"),
		glBitmap:                  getProcAddr("glBitmap"),
		glBlendColor:              getProcAddr("glBlendColor"),
		glBlendEquation:           getProcAddr("glBlendEquation"),
		glBlendFunc:               getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:       getProcAddr("glBlendFuncSeparate"),
		glBufferData:              getProcAddr("glBufferData"),
		glBufferSubData:           getProcAddr("glBufferSubData"),
		glCallList:                getProcAddr("glCallList"),
		glCallLists:               getProcAddr("glCallLists"),
		glClear:                   getProcAddr("glClear"),
		glClearAccum:              getProcAddr("glClearAccum"),
		glClearColor:              getProcAddr("glClearColor"),
		glClearDepth:              getProcAddr("glClearDepth"),
		glClearIndex:              getProcAddr("glClearIndex"),
		glClearStencil:            getProcAddr("glClearStencil"),
		glClientActiveTexture:     getProcAddr("glClientActiveTexture"),
		glClipPlane:               getProcAddr("glClipPlane"),
		glColor3b:                 getProcAddr("glColor3b"),
		glColor3bv:                getProcAddr("glColor3bv"),
		glColor3d:                 getProcAddr("glColor3d"),
		glColor3dv:                getProcAddr("glColor3dv"),
		glColor3f:                 getProcAddr("glColor3f"),
		glColor3fv:                getProcAddr("glColor3fv"),
		glColor3i:                 getProcAddr("glColor3i"),
		glColor3iv:                getProcAddr("glColor3iv"),
		glColor3s:                 getProcAddr("glColor3s"),
		glColor3sv:                getProcAddr("glColor3sv"),
		glColor3ub:                getProcAddr("glColor3ub"),
		glColor3ubv:               getProcAddr("glColor3ubv"),
		glColor3ui:                getProcAddr("glColor3ui"),
		glColor3uiv:               getProcAddr("glColor3uiv"),
		glColor3us:                getProcAddr("glColor3us"),
		glColor3usv:               getProcAddr("glColor3usv"),
		glColor4b:                 getProcAddr("glColor4b"),
		glColor4bv:                getProcAddr("glColor4bv"),
		glColor4d:                 getProcAddr("glColor4d"),
		glColor4dv:                getProcAddr("glColor4dv"),
		glColor4f:                 getProcAddr("glColor4f"),
		glColor4fv:                getProcAddr("glColor4fv"),
		glColor4i:                 getProcAddr("glColor4i"),
		glColor4iv:                getProcAddr("glColor4iv"),
		glColor4s:                 getProcAddr("glColor4s"),
		glColor4sv:                getProcAddr("glColor4sv"),
		glColor4ub:                getProcAddr("glColor4ub"),
		glColor4ubv:               getProcAddr("glColor4ubv"),
		glColor4ui:                getProcAddr("glColor4ui"),
		glColor4uiv:               getProcAddr("glColor4uiv"),
		glColor4us:                getProcAddr("glColor4us"),
		glColor4usv:               getProcAddr("glColor4usv"),
		glColorMask:               getProcAddr("glColorMask"),
		glColorMaterial:           getProcAddr("glColorMaterial"),
		glColorPointer:            getProcAddr("glColorPointer"),
		glCompressedTexImage1D:    getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:    getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:    getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D: getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D: getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D: getProcAddr("glCompressedTexSubImage3D"),
		glCopyPixels:              getProcAddr("glCopyPixels"),
		glCopyTexImage1D:          getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:          getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:       getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:       getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:       getProcAddr("glCopyTexSubImage3D"),
		glCullFace:                getProcAddr("glCullFace"),
		glDeleteBuffers:           getProcAddr("glDeleteBuffers"),
		glDeleteLists:             getProcAddr("glDeleteLists"),
		glDeleteQueries:           getProcAddr("glDeleteQueries"),
		glDeleteTextures:          getProcAddr("glDeleteTextures"),
		glDepthFunc:               getProcAddr("glDepthFunc"),
		glDepthMask:               getProcAddr("glDepthMask"),
		glDepthRange:              getProcAddr("glDepthRange"),
		glDisable:                 getProcAddr("glDisable"),
		glDisableClientState:      getProcAddr("glDisableClientState"),
		glDrawArrays:              getProcAddr("glDrawArrays"),
		glDrawBuffer:              getProcAddr("glDrawBuffer"),
		glDrawElements:            getProcAddr("glDrawElements"),
		glDrawPixels:              getProcAddr("glDrawPixels"),
		glDrawRangeElements:       getProcAddr("glDrawRangeElements"),
		glEdgeFlag:                getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:         getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:               getProcAddr("glEdgeFlagv"),
		glEnable:                  getProcAddr("glEnable"),
		glEnableClientState:       getProcAddr("glEnableClientState"),
		glEnd:                     getProcAddr("glEnd"),
		glEndList:                 getProcAddr("glEndList"),
		glEndQuery:                getProcAddr("glEndQuery"),
		glEvalCoord1d:             getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:            getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:             getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:            getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:             getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:            getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:             getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:            getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:               getProcAddr("glEvalMesh1"),
		glEvalMesh2:               getProcAddr("glEvalMesh2"),
		glEvalPoint1:              getProcAddr("glEvalPoint1"),
		glEvalPoint2:              getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:          getProcAddr("glFeedbackBuffer"),
		glFinish:                  getProcAddr("glFinish"),
		glFlush:                   getProcAddr("glFlush"),
		glFogCoordPointer:         getProcAddr("glFogCoordPointer"),
		glFogCoordd:               getProcAddr("glFogCoordd"),
		glFogCoorddv:              getProcAddr("glFogCoorddv"),
		glFogCoordf:               getProcAddr("glFogCoordf"),
		glFogCoordfv:              getProcAddr("glFogCoordfv"),
		glFogf:                    getProcAddr("glFogf"),
		glFogfv:                   getProcAddr("glFogfv"),
		glFogi:                    getProcAddr("glFogi"),
		glFogiv:                   getProcAddr("glFogiv"),
		glFrontFace:               getProcAddr("glFrontFace"),
		glFrustum:                 getProcAddr("glFrustum"),
		glGenBuffers:              getProcAddr("glGenBuffers"),
		glGenLists:                getProcAddr("glGenLists"),
		glGenQueries:              getProcAddr("glGenQueries"),
		glGenTextures:             getProcAddr("glGenTextures"),
		glGetBooleanv:             getProcAddr("glGetBooleanv"),
		glGetBufferParameteriv:    getProcAddr("glGetBufferParameteriv"),
		glGetBufferPointerv:       getProcAddr("glGetBufferPointerv"),
		glGetBufferSubData:        getProcAddr("glGetBufferSubData"),
		glGetClipPlane:            getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:   getProcAddr("glGetCompressedTexImage"),
		glGetDoublev:              getProcAddr("glGetDoublev"),
		glGetError:                getProcAddr("glGetError"),
		glGetFloatv:               getProcAddr("glGetFloatv"),
		glGetIntegerv:             getProcAddr("glGetIntegerv"),
		glGetLightfv:              getProcAddr("glGetLightfv"),
		glGetLightiv:              getProcAddr("glGetLightiv"),
		glGetMapdv:                getProcAddr("glGetMapdv"),
		glGetMapfv:                getProcAddr("glGetMapfv"),
		glGetMapiv:                getProcAddr("glGetMapiv"),
		glGetMaterialfv:           getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:           getProcAddr("glGetMaterialiv"),
		glGetPixelMapfv:           getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:          getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:          getProcAddr("glGetPixelMapusv"),
		glGetPointerv:             getProcAddr("glGetPointerv"),
		glGetPolygonStipple:       getProcAddr("glGetPolygonStipple"),
		glGetQueryObjectiv:        getProcAddr("glGetQueryObjectiv"),
		glGetQueryObjectuiv:       getProcAddr("glGetQueryObjectuiv"),
		glGetQueryiv:              getProcAddr("glGetQueryiv"),
		glGetString:               getProcAddr("glGetString"),
		glGetTexEnvfv:             getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:             getProcAddr("glGetTexEnviv"),
		glGetTexGendv:             getProcAddr("glGetTexGendv"),
		glGetTexGenfv:             getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:             getProcAddr("glGetTexGeniv"),
		glGetTexImage:             getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:  getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:  getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterfv:       getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:       getProcAddr("glGetTexParameteriv"),
		glHint:                    getProcAddr("glHint"),
		glIndexMask:               getProcAddr("glIndexMask"),
		glIndexPointer:            getProcAddr("glIndexPointer"),
		glIndexd:                  getProcAddr("glIndexd"),
		glIndexdv:                 getProcAddr("glIndexdv"),
		glIndexf:                  getProcAddr("glIndexf"),
		glIndexfv:                 getProcAddr("glIndexfv"),
		glIndexi:                  getProcAddr("glIndexi"),
		glIndexiv:                 getProcAddr("glIndexiv"),
		glIndexs:                  getProcAddr("glIndexs"),
		glIndexsv:                 getProcAddr("glIndexsv"),
		glIndexub:                 getProcAddr("glIndexub"),
		glIndexubv:                getProcAddr("glIndexubv"),
		glInitNames:               getProcAddr("glInitNames"),
		glInterleavedArrays:       getProcAddr("glInterleavedArrays"),
		glIsBuffer:                getProcAddr("glIsBuffer"),
		glIsEnabled:               getProcAddr("glIsEnabled"),
		glIsList:                  getProcAddr("glIsList"),
		glIsQuery:                 getProcAddr("glIsQuery"),
		glIsTexture:               getProcAddr("glIsTexture"),
		glLightModelf:             getProcAddr("glLightModelf"),
		glLightModelfv:            getProcAddr("glLightModelfv"),
		glLightModeli:             getProcAddr("glLightModeli"),
		glLightModeliv:            getProcAddr("glLightModeliv"),
		glLightf:                  getProcAddr("glLightf"),
		glLightfv:                 getProcAddr("glLightfv"),
		glLighti:                  getProcAddr("glLighti"),
		glLightiv:                 getProcAddr("glLightiv"),
		glLineStipple:             getProcAddr("glLineStipple"),
		glLineWidth:               getProcAddr("glLineWidth"),
		glListBase:                getProcAddr("glListBase"),
		glLoadIdentity:            getProcAddr("glLoadIdentity"),
		glLoadMatrixd:             getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:             getProcAddr("glLoadMatrixf"),
		glLoadName:                getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:    getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:    getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                 getProcAddr("glLogicOp"),
		glMap1d:                   getProcAddr("glMap1d"),
		glMap1f:                   getProcAddr("glMap1f"),
		glMap2d:                   getProcAddr("glMap2d"),
		glMap2f:                   getProcAddr("glMap2f"),
		glMapBuffer:               getProcAddr("glMapBuffer"),
		glMapGrid1d:               getProcAddr("glMapGrid1d"),
		glMapGrid1f:               getProcAddr("glMapGrid1f"),
		glMapGrid2d:               getProcAddr("glMapGrid2d"),
		glMapGrid2f:               getProcAddr("glMapGrid2f"),
		glMaterialf:               getProcAddr("glMaterialf"),
		glMaterialfv:              getProcAddr("glMaterialfv"),
		glMateriali:               getProcAddr("glMateriali"),
		glMaterialiv:              getProcAddr("glMaterialiv"),
		glMatrixMode:              getProcAddr("glMatrixMode"),
		glMultMatrixd:             getProcAddr("glMultMatrixd"),
		glMultMatrixf:             getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:    getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:    getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:         getProcAddr("glMultiDrawArrays"),
		glMultiDrawElements:       getProcAddr("glMultiDrawElements"),
		glMultiTexCoord1d:         getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:        getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:         getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:        getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:         getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:        getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:         getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:        getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:         getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:        getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:         getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:        getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:         getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:        getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:         getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:        getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:         getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:        getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:         getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:        getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:         getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:        getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:         getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:        getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:         getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:        getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:         getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:        getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:         getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:        getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:         getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:        getProcAddr("glMultiTexCoord4sv"),
		glNewList:                 getProcAddr("glNewList"),
		glNormal3b:                getProcAddr("glNormal3b"),
		glNormal3bv:               getProcAddr("glNormal3bv"),
		glNormal3d:                getProcAddr("glNormal3d"),
		glNormal3dv:               getProcAddr("glNormal3dv"),
		glNormal3f:                getProcAddr("glNormal3f"),
		glNormal3fv:               getProcAddr("glNormal3fv"),
		glNormal3i:                getProcAddr("glNormal3i"),
		glNormal3iv:               getProcAddr("glNormal3iv"),
		glNormal3s:                getProcAddr("glNormal3s"),
		glNormal3sv:               getProcAddr("glNormal3sv"),
		glNormalPointer:           getProcAddr("glNormalPointer"),
		glOrtho:                   getProcAddr("glOrtho"),
		glPassThrough:             getProcAddr("glPassThrough"),
		glPixelMapfv:              getProcAddr("glPixelMapfv"),
		glPixelMapuiv:             getProcAddr("glPixelMapuiv"),
		glPixelMapusv:             getProcAddr("glPixelMapusv"),
		glPixelStoref:             getProcAddr("glPixelStoref"),
		glPixelStorei:             getProcAddr("glPixelStorei"),
		glPixelTransferf:          getProcAddr("glPixelTransferf"),
		glPixelTransferi:          getProcAddr("glPixelTransferi"),
		glPixelZoom:               getProcAddr("glPixelZoom"),
		glPointParameterf:         getProcAddr("glPointParameterf"),
		glPointParameterfv:        getProcAddr("glPointParameterfv"),
		glPointParameteri:         getProcAddr("glPointParameteri"),
		glPointParameteriv:        getProcAddr("glPointParameteriv"),
		glPointSize:               getProcAddr("glPointSize"),
		glPolygonMode:             getProcAddr("glPolygonMode"),
		glPolygonOffset:           getProcAddr("glPolygonOffset"),
		glPolygonStipple:          getProcAddr("glPolygonStipple"),
		glPopAttrib:               getProcAddr("glPopAttrib"),
		glPopClientAttrib:         getProcAddr("glPopClientAttrib"),
		glPopMatrix:               getProcAddr("glPopMatrix"),
		glPopName:                 getProcAddr("glPopName"),
		glPrioritizeTextures:      getProcAddr("glPrioritizeTextures"),
		glPushAttrib:              getProcAddr("glPushAttrib"),
		glPushClientAttrib:        getProcAddr("glPushClientAttrib"),
		glPushMatrix:              getProcAddr("glPushMatrix"),
		glPushName:                getProcAddr("glPushName"),
		glRasterPos2d:             getProcAddr("glRasterPos2d"),
		glRasterPos2dv:            getProcAddr("glRasterPos2dv"),
		glRasterPos2f:             getProcAddr("glRasterPos2f"),
		glRasterPos2fv:            getProcAddr("glRasterPos2fv"),
		glRasterPos2i:             getProcAddr("glRasterPos2i"),
		glRasterPos2iv:            getProcAddr("glRasterPos2iv"),
		glRasterPos2s:             getProcAddr("glRasterPos2s"),
		glRasterPos2sv:            getProcAddr("glRasterPos2sv"),
		glRasterPos3d:             getProcAddr("glRasterPos3d"),
		glRasterPos3dv:            getProcAddr("glRasterPos3dv"),
		glRasterPos3f:             getProcAddr("glRasterPos3f"),
		glRasterPos3fv:            getProcAddr("glRasterPos3fv"),
		glRasterPos3i:             getProcAddr("glRasterPos3i"),
		glRasterPos3iv:            getProcAddr("glRasterPos3iv"),
		glRasterPos3s:             getProcAddr("glRasterPos3s"),
		glRasterPos3sv:            getProcAddr("glRasterPos3sv"),
		glRasterPos4d:             getProcAddr("glRasterPos4d"),
		glRasterPos4dv:            getProcAddr("glRasterPos4dv"),
		glRasterPos4f:             getProcAddr("glRasterPos4f"),
		glRasterPos4fv:            getProcAddr("glRasterPos4fv"),
		glRasterPos4i:             getProcAddr("glRasterPos4i"),
		glRasterPos4iv:            getProcAddr("glRasterPos4iv"),
		glRasterPos4s:             getProcAddr("glRasterPos4s"),
		glRasterPos4sv:            getProcAddr("glRasterPos4sv"),
		glReadBuffer:              getProcAddr("glReadBuffer"),
		glReadPixels:              getProcAddr("glReadPixels"),
		glRectd:                   getProcAddr("glRectd"),
		glRectdv:                  getProcAddr("glRectdv"),
		glRectf:                   getProcAddr("glRectf"),
		glRectfv:                  getProcAddr("glRectfv"),
		glRecti:                   getProcAddr("glRecti"),
		glRectiv:                  getProcAddr("glRectiv"),
		glRects:                   getProcAddr("glRects"),
		glRectsv:                  getProcAddr("glRectsv"),
		glRenderMode:              getProcAddr("glRenderMode"),
		glRotated:                 getProcAddr("glRotated"),
		glRotatef:                 getProcAddr("glRotatef"),
		glSampleCoverage:          getProcAddr("glSampleCoverage"),
		glScaled:                  getProcAddr("glScaled"),
		glScalef:                  getProcAddr("glScalef"),
		glScissor:                 getProcAddr("glScissor"),
		glSecondaryColor3b:        getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:       getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:        getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:       getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:        getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:       getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:        getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:       getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:        getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:       getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:       getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:      getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:       getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:      getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:       getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:      getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorPointer:   getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:            getProcAddr("glSelectBuffer"),
		glShadeModel:              getProcAddr("glShadeModel"),
		glStencilFunc:             getProcAddr("glStencilFunc"),
		glStencilMask:             getProcAddr("glStencilMask"),
		glStencilOp:               getProcAddr("glStencilOp"),
		glTexCoord1d:              getProcAddr("glTexCoord1d"),
		glTexCoord1dv:             getProcAddr("glTexCoord1dv"),
		glTexCoord1f:              getProcAddr("glTexCoord1f"),
		glTexCoord1fv:             getProcAddr("glTexCoord1fv"),
		glTexCoord1i:              getProcAddr("glTexCoord1i"),
		glTexCoord1iv:             getProcAddr("glTexCoord1iv"),
		glTexCoord1s:              getProcAddr("glTexCoord1s"),
		glTexCoord1sv:             getProcAddr("glTexCoord1sv"),
		glTexCoord2d:              getProcAddr("glTexCoord2d"),
		glTexCoord2dv:             getProcAddr("glTexCoord2dv"),
		glTexCoord2f:              getProcAddr("glTexCoord2f"),
		glTexCoord2fv:             getProcAddr("glTexCoord2fv"),
		glTexCoord2i:              getProcAddr("glTexCoord2i"),
		glTexCoord2iv:             getProcAddr("glTexCoord2iv"),
		glTexCoord2s:              getProcAddr("glTexCoord2s"),
		glTexCoord2sv:             getProcAddr("glTexCoord2sv"),
		glTexCoord3d:              getProcAddr("glTexCoord3d"),
		glTexCoord3dv:             getProcAddr("glTexCoord3dv"),
		glTexCoord3f:              getProcAddr("glTexCoord3f"),
		glTexCoord3fv:             getProcAddr("glTexCoord3fv"),
		glTexCoord3i:              getProcAddr("glTexCoord3i"),
		glTexCoord3iv:             getProcAddr("glTexCoord3iv"),
		glTexCoord3s:              getProcAddr("glTexCoord3s"),
		glTexCoord3sv:             getProcAddr("glTexCoord3sv"),
		glTexCoord4d:              getProcAddr("glTexCoord4d"),
		glTexCoord4dv:             getProcAddr("glTexCoord4dv"),
		glTexCoord4f:              getProcAddr("glTexCoord4f"),
		glTexCoord4fv:             getProcAddr("glTexCoord4fv"),
		glTexCoord4i:              getProcAddr("glTexCoord4i"),
		glTexCoord4iv:             getProcAddr("glTexCoord4iv"),
		glTexCoord4s:              getProcAddr("glTexCoord4s"),
		glTexCoord4sv:             getProcAddr("glTexCoord4sv"),
		glTexCoordPointer:         getProcAddr("glTexCoordPointer"),
		glTexEnvf:                 getProcAddr("glTexEnvf"),
		glTexEnvfv:                getProcAddr("glTexEnvfv"),
		glTexEnvi:                 getProcAddr("glTexEnvi"),
		glTexEnviv:                getProcAddr("glTexEnviv"),
		glTexGend:                 getProcAddr("glTexGend"),
		glTexGendv:                getProcAddr("glTexGendv"),
		glTexGenf:                 getProcAddr("glTexGenf"),
		glTexGenfv:                getProcAddr("glTexGenfv"),
		glTexGeni:                 getProcAddr("glTexGeni"),
		glTexGeniv:                getProcAddr("glTexGeniv"),
		glTexImage1D:              getProcAddr("glTexImage1D"),
		glTexImage2D:              getProcAddr("glTexImage2D"),
		glTexImage3D:              getProcAddr("glTexImage3D"),
		glTexParameterf:           getProcAddr("glTexParameterf"),
		glTexParameterfv:          getProcAddr("glTexParameterfv"),
		glTexParameteri:           getProcAddr("glTexParameteri"),
		glTexParameteriv:          getProcAddr("glTexParameteriv"),
		glTexSubImage1D:           getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:           getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:           getProcAddr("glTexSubImage3D"),
		glTranslated:              getProcAddr("glTranslated"),
		glTranslatef:              getProcAddr("glTranslatef"),
		glUnmapBuffer:             getProcAddr("glUnmapBuffer"),
		glVertex2d:                getProcAddr("glVertex2d"),
		glVertex2dv:               getProcAddr("glVertex2dv"),
		glVertex2f:                getProcAddr("glVertex2f"),
		glVertex2fv:               getProcAddr("glVertex2fv"),
		glVertex2i:                getProcAddr("glVertex2i"),
		glVertex2iv:               getProcAddr("glVertex2iv"),
		glVertex2s:                getProcAddr("glVertex2s"),
		glVertex2sv:               getProcAddr("glVertex2sv"),
		glVertex3d:                getProcAddr("glVertex3d"),
		glVertex3dv:               getProcAddr("glVertex3dv"),
		glVertex3f:                getProcAddr("glVertex3f"),
		glVertex3fv:               getProcAddr("glVertex3fv"),
		glVertex3i:                getProcAddr("glVertex3i"),
		glVertex3iv:               getProcAddr("glVertex3iv"),
		glVertex3s:                getProcAddr("glVertex3s"),
		glVertex3sv:               getProcAddr("glVertex3sv"),
		glVertex4d:                getProcAddr("glVertex4d"),
		glVertex4dv:               getProcAddr("glVertex4dv"),
		glVertex4f:                getProcAddr("glVertex4f"),
		glVertex4fv:               getProcAddr("glVertex4fv"),
		glVertex4i:                getProcAddr("glVertex4i"),
		glVertex4iv:               getProcAddr("glVertex4iv"),
		glVertex4s:                getProcAddr("glVertex4s"),
		glVertex4sv:               getProcAddr("glVertex4sv"),
		glVertexPointer:           getProcAddr("glVertexPointer"),
		glViewport:                getProcAddr("glViewport"),
		glWindowPos2d:             getProcAddr("glWindowPos2d"),
		glWindowPos2dv:            getProcAddr("glWindowPos2dv"),
		glWindowPos2f:             getProcAddr("glWindowPos2f"),
		glWindowPos2fv:            getProcAddr("glWindowPos2fv"),
		glWindowPos2i:             getProcAddr("glWindowPos2i"),
		glWindowPos2iv:            getProcAddr("glWindowPos2iv"),
		glWindowPos2s:             getProcAddr("glWindowPos2s"),
		glWindowPos2sv:            getProcAddr("glWindowPos2sv"),
		glWindowPos3d:             getProcAddr("glWindowPos3d"),
		glWindowPos3dv:            getProcAddr("glWindowPos3dv"),
		glWindowPos3f:             getProcAddr("glWindowPos3f"),
		glWindowPos3fv:            getProcAddr("glWindowPos3fv"),
		glWindowPos3i:             getProcAddr("glWindowPos3i"),
		glWindowPos3iv:            getProcAddr("glWindowPos3iv"),
		glWindowPos3s:             getProcAddr("glWindowPos3s"),
		glWindowPos3sv:            getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL200 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	AttachShader(program uint32, shader uint32)
	Begin(mode uint32)
	BeginQuery(target uint32, id uint32)
	BindAttribLocation(program uint32, index uint32, name *uint8)
	BindBuffer(target uint32, buffer uint32)
	BindTexture(target uint32, texture uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClientActiveTexture(texture uint32)
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaterial(face uint32, mode uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompileShader(shader uint32)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CreateProgram() uint32
	CreateShader(type_ uint32) uint32
	CullFace(mode uint32)
	DeleteBuffers(n int32, buffers *uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteProgram(program uint32)
	DeleteQueries(n int32, ids *uint32)
	DeleteShader(shader uint32)
	DeleteTextures(n int32, textures *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	DetachShader(program uint32, shader uint32)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DisableVertexAttribArray(index uint32)
	DrawArrays(mode uint32, first int32, count int32)
	DrawBuffer(buf uint32)
	DrawBuffers(n int32, bufs *uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	EnableVertexAttribArray(index uint32)
	End()
	EndList()
	EndQuery(target uint32)
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	Finish()
	Flush()
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenBuffers(n int32, buffers *uint32)
	GenLists(range_ int32) uint32
	GenQueries(n int32, ids *uint32)
	GenTextures(n int32, textures *uint32)
	GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)
	GetAttribLocation(program uint32, name *uint8) int32
	GetBooleanv(pname uint32, data *bool)
	GetBufferParameteriv(target uint32, pname uint32, params *int32)
	GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)
	GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloatv(pname uint32, data *float32)
	GetIntegerv(pname uint32, data *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramiv(program uint32, pname uint32, params *int32)
	GetQueryObjectiv(id uint32, pname uint32, params *int32)
	GetQueryObjectuiv(id uint32, pname uint32, params *uint32)
	GetQueryiv(target uint32, pname uint32, params *int32)
	GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8)
	GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8)
	GetShaderiv(shader uint32, pname uint32, params *int32)
	GetString(name uint32) *uint8
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	GetUniformLocation(program uint32, name *uint8) int32
	GetUniformfv(program uint32, location int32, params *float32)
	GetUniformiv(program uint32, location int32, params *int32)
	GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)
	GetVertexAttribdv(index uint32, pname uint32, params *float64)
	GetVertexAttribfv(index uint32, pname uint32, params *float32)
	GetVertexAttribiv(index uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	IsBuffer(buffer uint32) bool
	IsEnabled(cap uint32) bool
	IsList(list uint32) bool
	IsProgram(program uint32) bool
	IsQuery(id uint32) bool
	IsShader(shader uint32) bool
	IsTexture(texture uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	LinkProgram(program uint32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapBuffer(target uint32, access uint32) unsafe.Pointer
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopMatrix()
	PopName()
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	RenderMode(mode uint32) int32
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	ShaderSource(shader uint32, count int32, string **uint8, length *int32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilMaskSeparate(face uint32, mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Uniform1f(location int32, v0 float32)
	Uniform1fv(location int32, count int32, value *float32)
	Uniform1i(location int32, v0 int32)
	Uniform1iv(location int32, count int32, value *int32)
	Uniform2f(location int32, v0 float32, v1 float32)
	Uniform2fv(location int32, count int32, value *float32)
	Uniform2i(location int32, v0 int32, v1 int32)
	Uniform2iv(location int32, count int32, value *int32)
	Uniform3f(location int32, v0 float32, v1 float32, v2 float32)
	Uniform3fv(location int32, count int32, value *float32)
	Uniform3i(location int32, v0 int32, v1 int32, v2 int32)
	Uniform3iv(location int32, count int32, value *int32)
	Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	Uniform4fv(location int32, count int32, value *float32)
	Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	Uniform4iv(location int32, count int32, value *int32)
	UniformMatrix2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4fv(location int32, count int32, transpose bool, value *float32)
	UnmapBuffer(target uint32) bool
	UseProgram(program uint32)
	ValidateProgram(program uint32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexAttrib1d(index uint32, x float64)
	VertexAttrib1dv(index uint32, v *float64)
	VertexAttrib1f(index uint32, x float32)
	VertexAttrib1fv(index uint32, v *float32)
	VertexAttrib1s(index uint32, x int16)
	VertexAttrib1sv(index uint32, v *int16)
	VertexAttrib2d(index uint32, x float64, y float64)
	VertexAttrib2dv(index uint32, v *float64)
	VertexAttrib2f(index uint32, x float32, y float32)
	VertexAttrib2fv(index uint32, v *float32)
	VertexAttrib2s(index uint32, x int16, y int16)
	VertexAttrib2sv(index uint32, v *int16)
	VertexAttrib3d(index uint32, x float64, y float64, z float64)
	VertexAttrib3dv(index uint32, v *float64)
	VertexAttrib3f(index uint32, x float32, y float32, z float32)
	VertexAttrib3fv(index uint32, v *float32)
	VertexAttrib3s(index uint32, x int16, y int16, z int16)
	VertexAttrib3sv(index uint32, v *int16)
	VertexAttrib4Nbv(index uint32, v *int8)
	VertexAttrib4Niv(index uint32, v *int32)
	VertexAttrib4Nsv(index uint32, v *int16)
	VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4Nubv(index uint32, v *uint8)
	VertexAttrib4Nuiv(index uint32, v *uint32)
	VertexAttrib4Nusv(index uint32, v *uint16)
	VertexAttrib4bv(index uint32, v *int8)
	VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dv(index uint32, v *float64)
	VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fv(index uint32, v *float32)
	VertexAttrib4iv(index uint32, v *int32)
	VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4sv(index uint32, v *int16)
	VertexAttrib4ubv(index uint32, v *uint8)
	VertexAttrib4uiv(index uint32, v *uint32)
	VertexAttrib4usv(index uint32, v *uint16)
	VertexAttribPointer(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New200(getProcAddr func(name string) unsafe.Pointer) GL200 {
	gl := &lib{
		glAccum:                    getProcAddr("glAccum"),
		glActiveTexture:            getProcAddr("glActiveTexture"),
		glAlphaFunc:                getProcAddr("glAlphaFunc"),
		glAreTexturesResident:      getProcAddr("glAreTexturesResident"),
		glArrayElement:             getProcAddr("glArrayElement"),
		glAttachShader:             getProcAddr("glAttachShader"),
		glBegin:                    getProcAddr("glBegin"),
		glBeginQuery:               getProcAddr("glBeginQuery"),
		glBindAttribLocation:       getProcAddr("glBindAttribLocation"),
		glBindBuffer:               getProcAddr("glBindBuffer"),
		glBindTexture:              getProcAddr("glBindTexture"),
		glBitmap:                   getProcAddr("glBitmap"),
		glBlendColor:               getProcAddr("glBlendColor"),
		glBlendEquation:            getProcAddr("glBlendEquation"),
		glBlendEquationSeparate:    getProcAddr("glBlendEquationSeparate"),
		glBlendFunc:                getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:        getProcAddr("glBlendFuncSeparate"),
		glBufferData:               getProcAddr("glBufferData"),
		glBufferSubData:            getProcAddr("glBufferSubData"),
		glCallList:                 getProcAddr("glCallList"),
		glCallLists:                getProcAddr("glCallLists"),
		glClear:                    getProcAddr("glClear"),
		glClearAccum:               getProcAddr("glClearAccum"),
		glClearColor:               getProcAddr("glClearColor"),
		glClearDepth:               getProcAddr("glClearDepth"),
		glClearIndex:               getProcAddr("glClearIndex"),
		glClearStencil:             getProcAddr("glClearStencil"),
		glClientActiveTexture:      getProcAddr("glClientActiveTexture"),
		glClipPlane:                getProcAddr("glClipPlane"),
		glColor3b:                  getProcAddr("glColor3b"),
		glColor3bv:                 getProcAddr("glColor3bv"),
		glColor3d:                  getProcAddr("glColor3d"),
		glColor3dv:                 getProcAddr("glColor3dv"),
		glColor3f:                  getProcAddr("glColor3f"),
		glColor3fv:                 getProcAddr("glColor3fv"),
		glColor3i:                  getProcAddr("glColor3i"),
		glColor3iv:                 getProcAddr("glColor3iv"),
		glColor3s:                  getProcAddr("glColor3s"),
		glColor3sv:                 getProcAddr("glColor3sv"),
		glColor3ub:                 getProcAddr("glColor3ub"),
		glColor3ubv:                getProcAddr("glColor3ubv"),
		glColor3ui:                 getProcAddr("glColor3ui"),
		glColor3uiv:                getProcAddr("glColor3uiv"),
		glColor3us:                 getProcAddr("glColor3us"),
		glColor3usv:                getProcAddr("glColor3usv"),
		glColor4b:                  getProcAddr("glColor4b"),
		glColor4bv:                 getProcAddr("glColor4bv"),
		glColor4d:                  getProcAddr("glColor4d"),
		glColor4dv:                 getProcAddr("glColor4dv"),
		glColor4f:                  getProcAddr("glColor4f"),
		glColor4fv:                 getProcAddr("glColor4fv"),
		glColor4i:                  getProcAddr("glColor4i"),
		glColor4iv:                 getProcAddr("glColor4iv"),
		glColor4s:                  getProcAddr("glColor4s"),
		glColor4sv:                 getProcAddr("glColor4sv"),
		glColor4ub:                 getProcAddr("glColor4ub"),
		glColor4ubv:                getProcAddr("glColor4ubv"),
		glColor4ui:                 getProcAddr("glColor4ui"),
		glColor4uiv:                getProcAddr("glColor4uiv"),
		glColor4us:                 getProcAddr("glColor4us"),
		glColor4usv:                getProcAddr("glColor4usv"),
		glColorMask:                getProcAddr("glColorMask"),
		glColorMaterial:            getProcAddr("glColorMaterial"),
		glColorPointer:             getProcAddr("glColorPointer"),
		glCompileShader:            getProcAddr("glCompileShader"),
		glCompressedTexImage1D:     getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:     getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:     getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D:  getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D:  getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D:  getProcAddr("glCompressedTexSubImage3D"),
		glCopyPixels:               getProcAddr("glCopyPixels"),
		glCopyTexImage1D:           getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:           getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:        getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:        getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:        getProcAddr("glCopyTexSubImage3D"),
		glCreateProgram:            getProcAddr("glCreateProgram"),
		glCreateShader:             getProcAddr("glCreateShader"),
		glCullFace:                 getProcAddr("glCullFace"),
		glDeleteBuffers:            getProcAddr("glDeleteBuffers"),
		glDeleteLists:              getProcAddr("glDeleteLists"),
		glDeleteProgram:            getProcAddr("glDeleteProgram"),
		glDeleteQueries:            getProcAddr("glDeleteQueries"),
		glDeleteShader:             getProcAddr("glDeleteShader"),
		glDeleteTextures:           getProcAddr("glDeleteTextures"),
		glDepthFunc:                getProcAddr("glDepthFunc"),
		glDepthMask:                getProcAddr("glDepthMask"),
		glDepthRange:               getProcAddr("glDepthRange"),
		glDetachShader:             getProcAddr("glDetachShader"),
		glDisable:                  getProcAddr("glDisable"),
		glDisableClientState:       getProcAddr("glDisableClientState"),
		glDisableVertexAttribArray: getProcAddr("glDisableVertexAttribArray"),
		glDrawArrays:               getProcAddr("glDrawArrays"),
		glDrawBuffer:               getProcAddr("glDrawBuffer"),
		glDrawBuffers:              getProcAddr("glDrawBuffers"),
		glDrawElements:             getProcAddr("glDrawElements"),
		glDrawPixels:               getProcAddr("glDrawPixels"),
		glDrawRangeElements:        getProcAddr("glDrawRangeElements"),
		glEdgeFlag:                 getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:          getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:                getProcAddr("glEdgeFlagv"),
		glEnable:                   getProcAddr("glEnable"),
		glEnableClientState:        getProcAddr("glEnableClientState"),
		glEnableVertexAttribArray:  getProcAddr("glEnableVertexAttribArray"),
		glEnd:                      getProcAddr("glEnd"),
		glEndList:                  getProcAddr("glEndList"),
		glEndQuery:                 getProcAddr("glEndQuery"),
		glEvalCoord1d:              getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:             getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:              getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:             getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:              getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:             getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:              getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:             getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:                getProcAddr("glEvalMesh1"),
		glEvalMesh2:                getProcAddr("glEvalMesh2"),
		glEvalPoint1:               getProcAddr("glEvalPoint1"),
		glEvalPoint2:               getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:           getProcAddr("glFeedbackBuffer"),
		glFinish:                   getProcAddr("glFinish"),
		glFlush:                    getProcAddr("glFlush"),
		glFogCoordPointer:          getProcAddr("glFogCoordPointer"),
		glFogCoordd:                getProcAddr("glFogCoordd"),
		glFogCoorddv:               getProcAddr("glFogCoorddv"),
		glFogCoordf:                getProcAddr("glFogCoordf"),
		glFogCoordfv:               getProcAddr("glFogCoordfv"),
		glFogf:                     getProcAddr("glFogf"),
		glFogfv:                    getProcAddr("glFogfv"),
		glFogi:                     getProcAddr("glFogi"),
		glFogiv:                    getProcAddr("glFogiv"),
		glFrontFace:                getProcAddr("glFrontFace"),
		glFrustum:                  getProcAddr("glFrustum"),
		glGenBuffers:               getProcAddr("glGenBuffers"),
		glGenLists:                 getProcAddr("glGenLists"),
		glGenQueries:               getProcAddr("glGenQueries"),
		glGenTextures:              getProcAddr("glGenTextures"),
		glGetActiveAttrib:          getProcAddr("glGetActiveAttrib"),
		glGetActiveUniform:         getProcAddr("glGetActiveUniform"),
		glGetAttachedShaders:       getProcAddr("glGetAttachedShaders"),
		glGetAttribLocation:        getProcAddr("glGetAttribLocation"),
		glGetBooleanv:              getProcAddr("glGetBooleanv"),
		glGetBufferParameteriv:     getProcAddr("glGetBufferParameteriv"),
		glGetBufferPointerv:        getProcAddr("glGetBufferPointerv"),
		glGetBufferSubData:         getProcAddr("glGetBufferSubData"),
		glGetClipPlane:             getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:    getProcAddr("glGetCompressedTexImage"),
		glGetDoublev:               getProcAddr("glGetDoublev"),
		glGetError:                 getProcAddr("glGetError"),
		glGetFloatv:                getProcAddr("glGetFloatv"),
		glGetIntegerv:              getProcAddr("glGetIntegerv"),
		glGetLightfv:               getProcAddr("glGetLightfv"),
		glGetLightiv:               getProcAddr("glGetLightiv"),
		glGetMapdv:                 getProcAddr("glGetMapdv"),
		glGetMapfv:                 getProcAddr("glGetMapfv"),
		glGetMapiv:                 getProcAddr("glGetMapiv"),
		glGetMaterialfv:            getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:            getProcAddr("glGetMaterialiv"),
		glGetPixelMapfv:            getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:           getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:           getProcAddr("glGetPixelMapusv"),
		glGetPointerv:              getProcAddr("glGetPointerv"),
		glGetPolygonStipple:        getProcAddr("glGetPolygonStipple"),
		glGetProgramInfoLog:        getProcAddr("glGetProgramInfoLog"),
		glGetProgramiv:             getProcAddr("glGetProgramiv"),
		glGetQueryObjectiv:         getProcAddr("glGetQueryObjectiv"),
		glGetQueryObjectuiv:        getProcAddr("glGetQueryObjectuiv"),
		glGetQueryiv:               getProcAddr("glGetQueryiv"),
		glGetShaderInfoLog:         getProcAddr("glGetShaderInfoLog"),
		glGetShaderSource:          getProcAddr("glGetShaderSource"),
		glGetShaderiv:              getProcAddr("glGetShaderiv"),
		glGetString:                getProcAddr("glGetString"),
		glGetTexEnvfv:              getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:              getProcAddr("glGetTexEnviv"),
		glGetTexGendv:              getProcAddr("glGetTexGendv"),
		glGetTexGenfv:              getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:              getProcAddr("glGetTexGeniv"),
		glGetTexImage:              getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:   getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:   getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterfv:        getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:        getProcAddr("glGetTexParameteriv"),
		glGetUniformLocation:       getProcAddr("glGetUniformLocation"),
		glGetUniformfv:             getProcAddr("glGetUniformfv"),
		glGetUniformiv:             getProcAddr("glGetUniformiv"),
		glGetVertexAttribPointerv:  getProcAddr("glGetVertexAttribPointerv"),
		glGetVertexAttribdv:        getProcAddr("glGetVertexAttribdv"),
		glGetVertexAttribfv:        getProcAddr("glGetVertexAttribfv"),
		glGetVertexAttribiv:        getProcAddr("glGetVertexAttribiv"),
		glHint:                     getProcAddr("glHint"),
		glIndexMask:                getProcAddr("glIndexMask"),
		glIndexPointer:             getProcAddr("glIndexPointer"),
		glIndexd:                   getProcAddr("glIndexd"),
		glIndexdv:                  getProcAddr("glIndexdv"),
		glIndexf:                   getProcAddr("glIndexf"),
		glIndexfv:                  getProcAddr("glIndexfv"),
		glIndexi:                   getProcAddr("glIndexi"),
		glIndexiv:                  getProcAddr("glIndexiv"),
		glIndexs:                   getProcAddr("glIndexs"),
		glIndexsv:                  getProcAddr("glIndexsv"),
		glIndexub:                  getProcAddr("glIndexub"),
		glIndexubv:                 getProcAddr("glIndexubv"),
		glInitNames:                getProcAddr("glInitNames"),
		glInterleavedArrays:        getProcAddr("glInterleavedArrays"),
		glIsBuffer:                 getProcAddr("glIsBuffer"),
		glIsEnabled:                getProcAddr("glIsEnabled"),
		glIsList:                   getProcAddr("glIsList"),
		glIsProgram:                getProcAddr("glIsProgram"),
		glIsQuery:                  getProcAddr("glIsQuery"),
		glIsShader:                 getProcAddr("glIsShader"),
		glIsTexture:                getProcAddr("glIsTexture"),
		glLightModelf:              getProcAddr("glLightModelf"),
		glLightModelfv:             getProcAddr("glLightModelfv"),
		glLightModeli:              getProcAddr("glLightModeli"),
		glLightModeliv:             getProcAddr("glLightModeliv"),
		glLightf:                   getProcAddr("glLightf"),
		glLightfv:                  getProcAddr("glLightfv"),
		glLighti:                   getProcAddr("glLighti"),
		glLightiv:                  getProcAddr("glLightiv"),
		glLineStipple:              getProcAddr("glLineStipple"),
		glLineWidth:                getProcAddr("glLineWidth"),
		glLinkProgram:              getProcAddr("glLinkProgram"),
		glListBase:                 getProcAddr("glListBase"),
		glLoadIdentity:             getProcAddr("glLoadIdentity"),
		glLoadMatrixd:              getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:              getProcAddr("glLoadMatrixf"),
		glLoadName:                 getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:     getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:     getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                  getProcAddr("glLogicOp"),
		glMap1d:                    getProcAddr("glMap1d"),
		glMap1f:                    getProcAddr("glMap1f"),
		glMap2d:                    getProcAddr("glMap2d"),
		glMap2f:                    getProcAddr("glMap2f"),
		glMapBuffer:                getProcAddr("glMapBuffer"),
		glMapGrid1d:                getProcAddr("glMapGrid1d"),
		glMapGrid1f:                getProcAddr("glMapGrid1f"),
		glMapGrid2d:                getProcAddr("glMapGrid2d"),
		glMapGrid2f:                getProcAddr("glMapGrid2f"),
		glMaterialf:                getProcAddr("glMaterialf"),
		glMaterialfv:               getProcAddr("glMaterialfv"),
		glMateriali:                getProcAddr("glMateriali"),
		glMaterialiv:               getProcAddr("glMaterialiv"),
		glMatrixMode:               getProcAddr("glMatrixMode"),
		glMultMatrixd:              getProcAddr("glMultMatrixd"),
		glMultMatrixf:              getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:     getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:     getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:          getProcAddr("glMultiDrawArrays"),
		glMultiDrawElements:        getProcAddr("glMultiDrawElements"),
		glMultiTexCoord1d:          getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:         getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:          getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:         getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:          getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:         getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:          getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:         getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:          getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:         getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:          getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:         getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:          getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:         getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:          getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:         getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:          getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:         getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:          getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:         getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:          getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:         getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:          getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:         getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:          getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:         getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:          getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:         getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:          getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:         getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:          getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:         getProcAddr("glMultiTexCoord4sv"),
		glNewList:                  getProcAddr("glNewList"),
		glNormal3b:                 getProcAddr("glNormal3b"),
		glNormal3bv:                getProcAddr("glNormal3bv"),
		glNormal3d:                 getProcAddr("glNormal3d"),
		glNormal3dv:                getProcAddr("glNormal3dv"),
		glNormal3f:                 getProcAddr("glNormal3f"),
		glNormal3fv:                getProcAddr("glNormal3fv"),
		glNormal3i:                 getProcAddr("glNormal3i"),
		glNormal3iv:                getProcAddr("glNormal3iv"),
		glNormal3s:                 getProcAddr("glNormal3s"),
		glNormal3sv:                getProcAddr("glNormal3sv"),
		glNormalPointer:            getProcAddr("glNormalPointer"),
		glOrtho:                    getProcAddr("glOrtho"),
		glPassThrough:              getProcAddr("glPassThrough"),
		glPixelMapfv:               getProcAddr("glPixelMapfv"),
		glPixelMapuiv:              getProcAddr("glPixelMapuiv"),
		glPixelMapusv:              getProcAddr("glPixelMapusv"),
		glPixelStoref:              getProcAddr("glPixelStoref"),
		glPixelStorei:              getProcAddr("glPixelStorei"),
		glPixelTransferf:           getProcAddr("glPixelTransferf"),
		glPixelTransferi:           getProcAddr("glPixelTransferi"),
		glPixelZoom:                getProcAddr("glPixelZoom"),
		glPointParameterf:          getProcAddr("glPointParameterf"),
		glPointParameterfv:         getProcAddr("glPointParameterfv"),
		glPointParameteri:          getProcAddr("glPointParameteri"),
		glPointParameteriv:         getProcAddr("glPointParameteriv"),
		glPointSize:                getProcAddr("glPointSize"),
		glPolygonMode:              getProcAddr("glPolygonMode"),
		glPolygonOffset:            getProcAddr("glPolygonOffset"),
		glPolygonStipple:           getProcAddr("glPolygonStipple"),
		glPopAttrib:                getProcAddr("glPopAttrib"),
		glPopClientAttrib:          getProcAddr("glPopClientAttrib"),
		glPopMatrix:                getProcAddr("glPopMatrix"),
		glPopName:                  getProcAddr("glPopName"),
		glPrioritizeTextures:       getProcAddr("glPrioritizeTextures"),
		glPushAttrib:               getProcAddr("glPushAttrib"),
		glPushClientAttrib:         getProcAddr("glPushClientAttrib"),
		glPushMatrix:               getProcAddr("glPushMatrix"),
		glPushName:                 getProcAddr("glPushName"),
		glRasterPos2d:              getProcAddr("glRasterPos2d"),
		glRasterPos2dv:             getProcAddr("glRasterPos2dv"),
		glRasterPos2f:              getProcAddr("glRasterPos2f"),
		glRasterPos2fv:             getProcAddr("glRasterPos2fv"),
		glRasterPos2i:              getProcAddr("glRasterPos2i"),
		glRasterPos2iv:             getProcAddr("glRasterPos2iv"),
		glRasterPos2s:              getProcAddr("glRasterPos2s"),
		glRasterPos2sv:             getProcAddr("glRasterPos2sv"),
		glRasterPos3d:              getProcAddr("glRasterPos3d"),
		glRasterPos3dv:             getProcAddr("glRasterPos3dv"),
		glRasterPos3f:              getProcAddr("glRasterPos3f"),
		glRasterPos3fv:             getProcAddr("glRasterPos3fv"),
		glRasterPos3i:              getProcAddr("glRasterPos3i"),
		glRasterPos3iv:             getProcAddr("glRasterPos3iv"),
		glRasterPos3s:              getProcAddr("glRasterPos3s"),
		glRasterPos3sv:             getProcAddr("glRasterPos3sv"),
		glRasterPos4d:              getProcAddr("glRasterPos4d"),
		glRasterPos4dv:             getProcAddr("glRasterPos4dv"),
		glRasterPos4f:              getProcAddr("glRasterPos4f"),
		glRasterPos4fv:             getProcAddr("glRasterPos4fv"),
		glRasterPos4i:              getProcAddr("glRasterPos4i"),
		glRasterPos4iv:             getProcAddr("glRasterPos4iv"),
		glRasterPos4s:              getProcAddr("glRasterPos4s"),
		glRasterPos4sv:             getProcAddr("glRasterPos4sv"),
		glReadBuffer:               getProcAddr("glReadBuffer"),
		glReadPixels:               getProcAddr("glReadPixels"),
		glRectd:                    getProcAddr("glRectd"),
		glRectdv:                   getProcAddr("glRectdv"),
		glRectf:                    getProcAddr("glRectf"),
		glRectfv:                   getProcAddr("glRectfv"),
		glRecti:                    getProcAddr("glRecti"),
		glRectiv:                   getProcAddr("glRectiv"),
		glRects:                    getProcAddr("glRects"),
		glRectsv:                   getProcAddr("glRectsv"),
		glRenderMode:               getProcAddr("glRenderMode"),
		glRotated:                  getProcAddr("glRotated"),
		glRotatef:                  getProcAddr("glRotatef"),
		glSampleCoverage:           getProcAddr("glSampleCoverage"),
		glScaled:                   getProcAddr("glScaled"),
		glScalef:                   getProcAddr("glScalef"),
		glScissor:                  getProcAddr("glScissor"),
		glSecondaryColor3b:         getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:        getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:         getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:        getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:         getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:        getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:         getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:        getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:         getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:        getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:        getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:       getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:        getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:       getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:        getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:       getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorPointer:    getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:             getProcAddr("glSelectBuffer"),
		glShadeModel:               getProcAddr("glShadeModel"),
		glShaderSource:             getProcAddr("glShaderSource"),
		glStencilFunc:              getProcAddr("glStencilFunc"),
		glStencilFuncSeparate:      getProcAddr("glStencilFuncSeparate"),
		glStencilMask:              getProcAddr("glStencilMask"),
		glStencilMaskSeparate:      getProcAddr("glStencilMaskSeparate"),
		glStencilOp:                getProcAddr("glStencilOp"),
		glStencilOpSeparate:        getProcAddr("glStencilOpSeparate"),
		glTexCoord1d:               getProcAddr("glTexCoord1d"),
		glTexCoord1dv:              getProcAddr("glTexCoord1dv"),
		glTexCoord1f:               getProcAddr("glTexCoord1f"),
		glTexCoord1fv:              getProcAddr("glTexCoord1fv"),
		glTexCoord1i:               getProcAddr("glTexCoord1i"),
		glTexCoord1iv:              getProcAddr("glTexCoord1iv"),
		glTexCoord1s:               getProcAddr("glTexCoord1s"),
		glTexCoord1sv:              getProcAddr("glTexCoord1sv"),
		glTexCoord2d:               getProcAddr("glTexCoord2d"),
		glTexCoord2dv:              getProcAddr("glTexCoord2dv"),
		glTexCoord2f:               getProcAddr("glTexCoord2f"),
		glTexCoord2fv:              getProcAddr("glTexCoord2fv"),
		glTexCoord2i:               getProcAddr("glTexCoord2i"),
		glTexCoord2iv:              getProcAddr("glTexCoord2iv"),
		glTexCoord2s:               getProcAddr("glTexCoord2s"),
		glTexCoord2sv:              getProcAddr("glTexCoord2sv"),
		glTexCoord3d:               getProcAddr("glTexCoord3d"),
		glTexCoord3dv:              getProcAddr("glTexCoord3dv"),
		glTexCoord3f:               getProcAddr("glTexCoord3f"),
		glTexCoord3fv:              getProcAddr("glTexCoord3fv"),
		glTexCoord3i:               getProcAddr("glTexCoord3i"),
		glTexCoord3iv:              getProcAddr("glTexCoord3iv"),
		glTexCoord3s:               getProcAddr("glTexCoord3s"),
		glTexCoord3sv:              getProcAddr("glTexCoord3sv"),
		glTexCoord4d:               getProcAddr("glTexCoord4d"),
		glTexCoord4dv:              getProcAddr("glTexCoord4dv"),
		glTexCoord4f:               getProcAddr("glTexCoord4f"),
		glTexCoord4fv:              getProcAddr("glTexCoord4fv"),
		glTexCoord4i:               getProcAddr("glTexCoord4i"),
		glTexCoord4iv:              getProcAddr("glTexCoord4iv"),
		glTexCoord4s:               getProcAddr("glTexCoord4s"),
		glTexCoord4sv:              getProcAddr("glTexCoord4sv"),
		glTexCoordPointer:          getProcAddr("glTexCoordPointer"),
		glTexEnvf:                  getProcAddr("glTexEnvf"),
		glTexEnvfv:                 getProcAddr("glTexEnvfv"),
		glTexEnvi:                  getProcAddr("glTexEnvi"),
		glTexEnviv:                 getProcAddr("glTexEnviv"),
		glTexGend:                  getProcAddr("glTexGend"),
		glTexGendv:                 getProcAddr("glTexGendv"),
		glTexGenf:                  getProcAddr("glTexGenf"),
		glTexGenfv:                 getProcAddr("glTexGenfv"),
		glTexGeni:                  getProcAddr("glTexGeni"),
		glTexGeniv:                 getProcAddr("glTexGeniv"),
		glTexImage1D:               getProcAddr("glTexImage1D"),
		glTexImage2D:               getProcAddr("glTexImage2D"),
		glTexImage3D:               getProcAddr("glTexImage3D"),
		glTexParameterf:            getProcAddr("glTexParameterf"),
		glTexParameterfv:           getProcAddr("glTexParameterfv"),
		glTexParameteri:            getProcAddr("glTexParameteri"),
		glTexParameteriv:           getProcAddr("glTexParameteriv"),
		glTexSubImage1D:            getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:            getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:            getProcAddr("glTexSubImage3D"),
		glTranslated:               getProcAddr("glTranslated"),
		glTranslatef:               getProcAddr("glTranslatef"),
		glUniform1f:                getProcAddr("glUniform1f"),
		glUniform1fv:               getProcAddr("glUniform1fv"),
		glUniform1i:                getProcAddr("glUniform1i"),
		glUniform1iv:               getProcAddr("glUniform1iv"),
		glUniform2f:                getProcAddr("glUniform2f"),
		glUniform2fv:               getProcAddr("glUniform2fv"),
		glUniform2i:                getProcAddr("glUniform2i"),
		glUniform2iv:               getProcAddr("glUniform2iv"),
		glUniform3f:                getProcAddr("glUniform3f"),
		glUniform3fv:               getProcAddr("glUniform3fv"),
		glUniform3i:                getProcAddr("glUniform3i"),
		glUniform3iv:               getProcAddr("glUniform3iv"),
		glUniform4f:                getProcAddr("glUniform4f"),
		glUniform4fv:               getProcAddr("glUniform4fv"),
		glUniform4i:                getProcAddr("glUniform4i"),
		glUniform4iv:               getProcAddr("glUniform4iv"),
		glUniformMatrix2fv:         getProcAddr("glUniformMatrix2fv"),
		glUniformMatrix3fv:         getProcAddr("glUniformMatrix3fv"),
		glUniformMatrix4fv:         getProcAddr("glUniformMatrix4fv"),
		glUnmapBuffer:              getProcAddr("glUnmapBuffer"),
		glUseProgram:               getProcAddr("glUseProgram"),
		glValidateProgram:          getProcAddr("glValidateProgram"),
		glVertex2d:                 getProcAddr("glVertex2d"),
		glVertex2dv:                getProcAddr("glVertex2dv"),
		glVertex2f:                 getProcAddr("glVertex2f"),
		glVertex2fv:                getProcAddr("glVertex2fv"),
		glVertex2i:                 getProcAddr("glVertex2i"),
		glVertex2iv:                getProcAddr("glVertex2iv"),
		glVertex2s:                 getProcAddr("glVertex2s"),
		glVertex2sv:                getProcAddr("glVertex2sv"),
		glVertex3d:                 getProcAddr("glVertex3d"),
		glVertex3dv:                getProcAddr("glVertex3dv"),
		glVertex3f:                 getProcAddr("glVertex3f"),
		glVertex3fv:                getProcAddr("glVertex3fv"),
		glVertex3i:                 getProcAddr("glVertex3i"),
		glVertex3iv:                getProcAddr("glVertex3iv"),
		glVertex3s:                 getProcAddr("glVertex3s"),
		glVertex3sv:                getProcAddr("glVertex3sv"),
		glVertex4d:                 getProcAddr("glVertex4d"),
		glVertex4dv:                getProcAddr("glVertex4dv"),
		glVertex4f:                 getProcAddr("glVertex4f"),
		glVertex4fv:                getProcAddr("glVertex4fv"),
		glVertex4i:                 getProcAddr("glVertex4i"),
		glVertex4iv:                getProcAddr("glVertex4iv"),
		glVertex4s:                 getProcAddr("glVertex4s"),
		glVertex4sv:                getProcAddr("glVertex4sv"),
		glVertexAttrib1d:           getProcAddr("glVertexAttrib1d"),
		glVertexAttrib1dv:          getProcAddr("glVertexAttrib1dv"),
		glVertexAttrib1f:           getProcAddr("glVertexAttrib1f"),
		glVertexAttrib1fv:          getProcAddr("glVertexAttrib1fv"),
		glVertexAttrib1s:           getProcAddr("glVertexAttrib1s"),
		glVertexAttrib1sv:          getProcAddr("glVertexAttrib1sv"),
		glVertexAttrib2d:           getProcAddr("glVertexAttrib2d"),
		glVertexAttrib2dv:          getProcAddr("glVertexAttrib2dv"),
		glVertexAttrib2f:           getProcAddr("glVertexAttrib2f"),
		glVertexAttrib2fv:          getProcAddr("glVertexAttrib2fv"),
		glVertexAttrib2s:           getProcAddr("glVertexAttrib2s"),
		glVertexAttrib2sv:          getProcAddr("glVertexAttrib2sv"),
		glVertexAttrib3d:           getProcAddr("glVertexAttrib3d"),
		glVertexAttrib3dv:          getProcAddr("glVertexAttrib3dv"),
		glVertexAttrib3f:           getProcAddr("glVertexAttrib3f"),
		glVertexAttrib3fv:          getProcAddr("glVertexAttrib3fv"),
		glVertexAttrib3s:           getProcAddr("glVertexAttrib3s"),
		glVertexAttrib3sv:          getProcAddr("glVertexAttrib3sv"),
		glVertexAttrib4Nbv:         getProcAddr("glVertexAttrib4Nbv"),
		glVertexAttrib4Niv:         getProcAddr("glVertexAttrib4Niv"),
		glVertexAttrib4Nsv:         getProcAddr("glVertexAttrib4Nsv"),
		glVertexAttrib4Nub:         getProcAddr("glVertexAttrib4Nub"),
		glVertexAttrib4Nubv:        getProcAddr("glVertexAttrib4Nubv"),
		glVertexAttrib4Nuiv:        getProcAddr("glVertexAttrib4Nuiv"),
		glVertexAttrib4Nusv:        getProcAddr("glVertexAttrib4Nusv"),
		glVertexAttrib4bv:          getProcAddr("glVertexAttrib4bv"),
		glVertexAttrib4d:           getProcAddr("glVertexAttrib4d"),
		glVertexAttrib4dv:          getProcAddr("glVertexAttrib4dv"),
		glVertexAttrib4f:           getProcAddr("glVertexAttrib4f"),
		glVertexAttrib4fv:          getProcAddr("glVertexAttrib4fv"),
		glVertexAttrib4iv:          getProcAddr("glVertexAttrib4iv"),
		glVertexAttrib4s:           getProcAddr("glVertexAttrib4s"),
		glVertexAttrib4sv:          getProcAddr("glVertexAttrib4sv"),
		glVertexAttrib4ubv:         getProcAddr("glVertexAttrib4ubv"),
		glVertexAttrib4uiv:         getProcAddr("glVertexAttrib4uiv"),
		glVertexAttrib4usv:         getProcAddr("glVertexAttrib4usv"),
		glVertexAttribPointer:      getProcAddr("glVertexAttribPointer"),
		glVertexPointer:            getProcAddr("glVertexPointer"),
		glViewport:                 getProcAddr("glViewport"),
		glWindowPos2d:              getProcAddr("glWindowPos2d"),
		glWindowPos2dv:             getProcAddr("glWindowPos2dv"),
		glWindowPos2f:              getProcAddr("glWindowPos2f"),
		glWindowPos2fv:             getProcAddr("glWindowPos2fv"),
		glWindowPos2i:              getProcAddr("glWindowPos2i"),
		glWindowPos2iv:             getProcAddr("glWindowPos2iv"),
		glWindowPos2s:              getProcAddr("glWindowPos2s"),
		glWindowPos2sv:             getProcAddr("glWindowPos2sv"),
		glWindowPos3d:              getProcAddr("glWindowPos3d"),
		glWindowPos3dv:             getProcAddr("glWindowPos3dv"),
		glWindowPos3f:              getProcAddr("glWindowPos3f"),
		glWindowPos3fv:             getProcAddr("glWindowPos3fv"),
		glWindowPos3i:              getProcAddr("glWindowPos3i"),
		glWindowPos3iv:             getProcAddr("glWindowPos3iv"),
		glWindowPos3s:              getProcAddr("glWindowPos3s"),
		glWindowPos3sv:             getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL210 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	AttachShader(program uint32, shader uint32)
	Begin(mode uint32)
	BeginQuery(target uint32, id uint32)
	BindAttribLocation(program uint32, index uint32, name *uint8)
	BindBuffer(target uint32, buffer uint32)
	BindTexture(target uint32, texture uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClientActiveTexture(texture uint32)
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaterial(face uint32, mode uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompileShader(shader uint32)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CreateProgram() uint32
	CreateShader(type_ uint32) uint32
	CullFace(mode uint32)
	DeleteBuffers(n int32, buffers *uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteProgram(program uint32)
	DeleteQueries(n int32, ids *uint32)
	DeleteShader(shader uint32)
	DeleteTextures(n int32, textures *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	DetachShader(program uint32, shader uint32)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DisableVertexAttribArray(index uint32)
	DrawArrays(mode uint32, first int32, count int32)
	DrawBuffer(buf uint32)
	DrawBuffers(n int32, bufs *uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	EnableVertexAttribArray(index uint32)
	End()
	EndList()
	EndQuery(target uint32)
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	Finish()
	Flush()
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenBuffers(n int32, buffers *uint32)
	GenLists(range_ int32) uint32
	GenQueries(n int32, ids *uint32)
	GenTextures(n int32, textures *uint32)
	GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)
	GetAttribLocation(program uint32, name *uint8) int32
	GetBooleanv(pname uint32, data *bool)
	GetBufferParameteriv(target uint32, pname uint32, params *int32)
	GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)
	GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloatv(pname uint32, data *float32)
	GetIntegerv(pname uint32, data *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramiv(program uint32, pname uint32, params *int32)
	GetQueryObjectiv(id uint32, pname uint32, params *int32)
	GetQueryObjectuiv(id uint32, pname uint32, params *uint32)
	GetQueryiv(target uint32, pname uint32, params *int32)
	GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8)
	GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8)
	GetShaderiv(shader uint32, pname uint32, params *int32)
	GetString(name uint32) *uint8
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	GetUniformLocation(program uint32, name *uint8) int32
	GetUniformfv(program uint32, location int32, params *float32)
	GetUniformiv(program uint32, location int32, params *int32)
	GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)
	GetVertexAttribdv(index uint32, pname uint32, params *float64)
	GetVertexAttribfv(index uint32, pname uint32, params *float32)
	GetVertexAttribiv(index uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	IsBuffer(buffer uint32) bool
	IsEnabled(cap uint32) bool
	IsList(list uint32) bool
	IsProgram(program uint32) bool
	IsQuery(id uint32) bool
	IsShader(shader uint32) bool
	IsTexture(texture uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	LinkProgram(program uint32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapBuffer(target uint32, access uint32) unsafe.Pointer
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopMatrix()
	PopName()
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	RenderMode(mode uint32) int32
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	ShaderSource(shader uint32, count int32, string **uint8, length *int32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilMaskSeparate(face uint32, mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Uniform1f(location int32, v0 float32)
	Uniform1fv(location int32, count int32, value *float32)
	Uniform1i(location int32, v0 int32)
	Uniform1iv(location int32, count int32, value *int32)
	Uniform2f(location int32, v0 float32, v1 float32)
	Uniform2fv(location int32, count int32, value *float32)
	Uniform2i(location int32, v0 int32, v1 int32)
	Uniform2iv(location int32, count int32, value *int32)
	Uniform3f(location int32, v0 float32, v1 float32, v2 float32)
	Uniform3fv(location int32, count int32, value *float32)
	Uniform3i(location int32, v0 int32, v1 int32, v2 int32)
	Uniform3iv(location int32, count int32, value *int32)
	Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	Uniform4fv(location int32, count int32, value *float32)
	Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	Uniform4iv(location int32, count int32, value *int32)
	UniformMatrix2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32)
	UnmapBuffer(target uint32) bool
	UseProgram(program uint32)
	ValidateProgram(program uint32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexAttrib1d(index uint32, x float64)
	VertexAttrib1dv(index uint32, v *float64)
	VertexAttrib1f(index uint32, x float32)
	VertexAttrib1fv(index uint32, v *float32)
	VertexAttrib1s(index uint32, x int16)
	VertexAttrib1sv(index uint32, v *int16)
	VertexAttrib2d(index uint32, x float64, y float64)
	VertexAttrib2dv(index uint32, v *float64)
	VertexAttrib2f(index uint32, x float32, y float32)
	VertexAttrib2fv(index uint32, v *float32)
	VertexAttrib2s(index uint32, x int16, y int16)
	VertexAttrib2sv(index uint32, v *int16)
	VertexAttrib3d(index uint32, x float64, y float64, z float64)
	VertexAttrib3dv(index uint32, v *float64)
	VertexAttrib3f(index uint32, x float32, y float32, z float32)
	VertexAttrib3fv(index uint32, v *float32)
	VertexAttrib3s(index uint32, x int16, y int16, z int16)
	VertexAttrib3sv(index uint32, v *int16)
	VertexAttrib4Nbv(index uint32, v *int8)
	VertexAttrib4Niv(index uint32, v *int32)
	VertexAttrib4Nsv(index uint32, v *int16)
	VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4Nubv(index uint32, v *uint8)
	VertexAttrib4Nuiv(index uint32, v *uint32)
	VertexAttrib4Nusv(index uint32, v *uint16)
	VertexAttrib4bv(index uint32, v *int8)
	VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dv(index uint32, v *float64)
	VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fv(index uint32, v *float32)
	VertexAttrib4iv(index uint32, v *int32)
	VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4sv(index uint32, v *int16)
	VertexAttrib4ubv(index uint32, v *uint8)
	VertexAttrib4uiv(index uint32, v *uint32)
	VertexAttrib4usv(index uint32, v *uint16)
	VertexAttribPointer(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New210(getProcAddr func(name string) unsafe.Pointer) GL210 {
	gl := &lib{
		glAccum:                    getProcAddr("glAccum"),
		glActiveTexture:            getProcAddr("glActiveTexture"),
		glAlphaFunc:                getProcAddr("glAlphaFunc"),
		glAreTexturesResident:      getProcAddr("glAreTexturesResident"),
		glArrayElement:             getProcAddr("glArrayElement"),
		glAttachShader:             getProcAddr("glAttachShader"),
		glBegin:                    getProcAddr("glBegin"),
		glBeginQuery:               getProcAddr("glBeginQuery"),
		glBindAttribLocation:       getProcAddr("glBindAttribLocation"),
		glBindBuffer:               getProcAddr("glBindBuffer"),
		glBindTexture:              getProcAddr("glBindTexture"),
		glBitmap:                   getProcAddr("glBitmap"),
		glBlendColor:               getProcAddr("glBlendColor"),
		glBlendEquation:            getProcAddr("glBlendEquation"),
		glBlendEquationSeparate:    getProcAddr("glBlendEquationSeparate"),
		glBlendFunc:                getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:        getProcAddr("glBlendFuncSeparate"),
		glBufferData:               getProcAddr("glBufferData"),
		glBufferSubData:            getProcAddr("glBufferSubData"),
		glCallList:                 getProcAddr("glCallList"),
		glCallLists:                getProcAddr("glCallLists"),
		glClear:                    getProcAddr("glClear"),
		glClearAccum:               getProcAddr("glClearAccum"),
		glClearColor:               getProcAddr("glClearColor"),
		glClearDepth:               getProcAddr("glClearDepth"),
		glClearIndex:               getProcAddr("glClearIndex"),
		glClearStencil:             getProcAddr("glClearStencil"),
		glClientActiveTexture:      getProcAddr("glClientActiveTexture"),
		glClipPlane:                getProcAddr("glClipPlane"),
		glColor3b:                  getProcAddr("glColor3b"),
		glColor3bv:                 getProcAddr("glColor3bv"),
		glColor3d:                  getProcAddr("glColor3d"),
		glColor3dv:                 getProcAddr("glColor3dv"),
		glColor3f:                  getProcAddr("glColor3f"),
		glColor3fv:                 getProcAddr("glColor3fv"),
		glColor3i:                  getProcAddr("glColor3i"),
		glColor3iv:                 getProcAddr("glColor3iv"),
		glColor3s:                  getProcAddr("glColor3s"),
		glColor3sv:                 getProcAddr("glColor3sv"),
		glColor3ub:                 getProcAddr("glColor3ub"),
		glColor3ubv:                getProcAddr("glColor3ubv"),
		glColor3ui:                 getProcAddr("glColor3ui"),
		glColor3uiv:                getProcAddr("glColor3uiv"),
		glColor3us:                 getProcAddr("glColor3us"),
		glColor3usv:                getProcAddr("glColor3usv"),
		glColor4b:                  getProcAddr("glColor4b"),
		glColor4bv:                 getProcAddr("glColor4bv"),
		glColor4d:                  getProcAddr("glColor4d"),
		glColor4dv:                 getProcAddr("glColor4dv"),
		glColor4f:                  getProcAddr("glColor4f"),
		glColor4fv:                 getProcAddr("glColor4fv"),
		glColor4i:                  getProcAddr("glColor4i"),
		glColor4iv:                 getProcAddr("glColor4iv"),
		glColor4s:                  getProcAddr("glColor4s"),
		glColor4sv:                 getProcAddr("glColor4sv"),
		glColor4ub:                 getProcAddr("glColor4ub"),
		glColor4ubv:                getProcAddr("glColor4ubv"),
		glColor4ui:                 getProcAddr("glColor4ui"),
		glColor4uiv:                getProcAddr("glColor4uiv"),
		glColor4us:                 getProcAddr("glColor4us"),
		glColor4usv:                getProcAddr("glColor4usv"),
		glColorMask:                getProcAddr("glColorMask"),
		glColorMaterial:            getProcAddr("glColorMaterial"),
		glColorPointer:             getProcAddr("glColorPointer"),
		glCompileShader:            getProcAddr("glCompileShader"),
		glCompressedTexImage1D:     getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:     getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:     getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D:  getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D:  getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D:  getProcAddr("glCompressedTexSubImage3D"),
		glCopyPixels:               getProcAddr("glCopyPixels"),
		glCopyTexImage1D:           getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:           getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:        getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:        getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:        getProcAddr("glCopyTexSubImage3D"),
		glCreateProgram:            getProcAddr("glCreateProgram"),
		glCreateShader:             getProcAddr("glCreateShader"),
		glCullFace:                 getProcAddr("glCullFace"),
		glDeleteBuffers:            getProcAddr("glDeleteBuffers"),
		glDeleteLists:              getProcAddr("glDeleteLists"),
		glDeleteProgram:            getProcAddr("glDeleteProgram"),
		glDeleteQueries:            getProcAddr("glDeleteQueries"),
		glDeleteShader:             getProcAddr("glDeleteShader"),
		glDeleteTextures:           getProcAddr("glDeleteTextures"),
		glDepthFunc:                getProcAddr("glDepthFunc"),
		glDepthMask:                getProcAddr("glDepthMask"),
		glDepthRange:               getProcAddr("glDepthRange"),
		glDetachShader:             getProcAddr("glDetachShader"),
		glDisable:                  getProcAddr("glDisable"),
		glDisableClientState:       getProcAddr("glDisableClientState"),
		glDisableVertexAttribArray: getProcAddr("glDisableVertexAttribArray"),
		glDrawArrays:               getProcAddr("glDrawArrays"),
		glDrawBuffer:               getProcAddr("glDrawBuffer"),
		glDrawBuffers:              getProcAddr("glDrawBuffers"),
		glDrawElements:             getProcAddr("glDrawElements"),
		glDrawPixels:               getProcAddr("glDrawPixels"),
		glDrawRangeElements:        getProcAddr("glDrawRangeElements"),
		glEdgeFlag:                 getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:          getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:                getProcAddr("glEdgeFlagv"),
		glEnable:                   getProcAddr("glEnable"),
		glEnableClientState:        getProcAddr("glEnableClientState"),
		glEnableVertexAttribArray:  getProcAddr("glEnableVertexAttribArray"),
		glEnd:                      getProcAddr("glEnd"),
		glEndList:                  getProcAddr("glEndList"),
		glEndQuery:                 getProcAddr("glEndQuery"),
		glEvalCoord1d:              getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:             getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:              getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:             getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:              getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:             getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:              getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:             getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:                getProcAddr("glEvalMesh1"),
		glEvalMesh2:                getProcAddr("glEvalMesh2"),
		glEvalPoint1:               getProcAddr("glEvalPoint1"),
		glEvalPoint2:               getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:           getProcAddr("glFeedbackBuffer"),
		glFinish:                   getProcAddr("glFinish"),
		glFlush:                    getProcAddr("glFlush"),
		glFogCoordPointer:          getProcAddr("glFogCoordPointer"),
		glFogCoordd:                getProcAddr("glFogCoordd"),
		glFogCoorddv:               getProcAddr("glFogCoorddv"),
		glFogCoordf:                getProcAddr("glFogCoordf"),
		glFogCoordfv:               getProcAddr("glFogCoordfv"),
		glFogf:                     getProcAddr("glFogf"),
		glFogfv:                    getProcAddr("glFogfv"),
		glFogi:                     getProcAddr("glFogi"),
		glFogiv:                    getProcAddr("glFogiv"),
		glFrontFace:                getProcAddr("glFrontFace"),
		glFrustum:                  getProcAddr("glFrustum"),
		glGenBuffers:               getProcAddr("glGenBuffers"),
		glGenLists:                 getProcAddr("glGenLists"),
		glGenQueries:               getProcAddr("glGenQueries"),
		glGenTextures:              getProcAddr("glGenTextures"),
		glGetActiveAttrib:          getProcAddr("glGetActiveAttrib"),
		glGetActiveUniform:         getProcAddr("glGetActiveUniform"),
		glGetAttachedShaders:       getProcAddr("glGetAttachedShaders"),
		glGetAttribLocation:        getProcAddr("glGetAttribLocation"),
		glGetBooleanv:              getProcAddr("glGetBooleanv"),
		glGetBufferParameteriv:     getProcAddr("glGetBufferParameteriv"),
		glGetBufferPointerv:        getProcAddr("glGetBufferPointerv"),
		glGetBufferSubData:         getProcAddr("glGetBufferSubData"),
		glGetClipPlane:             getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:    getProcAddr("glGetCompressedTexImage"),
		glGetDoublev:               getProcAddr("glGetDoublev"),
		glGetError:                 getProcAddr("glGetError"),
		glGetFloatv:                getProcAddr("glGetFloatv"),
		glGetIntegerv:              getProcAddr("glGetIntegerv"),
		glGetLightfv:               getProcAddr("glGetLightfv"),
		glGetLightiv:               getProcAddr("glGetLightiv"),
		glGetMapdv:                 getProcAddr("glGetMapdv"),
		glGetMapfv:                 getProcAddr("glGetMapfv"),
		glGetMapiv:                 getProcAddr("glGetMapiv"),
		glGetMaterialfv:            getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:            getProcAddr("glGetMaterialiv"),
		glGetPixelMapfv:            getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:           getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:           getProcAddr("glGetPixelMapusv"),
		glGetPointerv:              getProcAddr("glGetPointerv"),
		glGetPolygonStipple:        getProcAddr("glGetPolygonStipple"),
		glGetProgramInfoLog:        getProcAddr("glGetProgramInfoLog"),
		glGetProgramiv:             getProcAddr("glGetProgramiv"),
		glGetQueryObjectiv:         getProcAddr("glGetQueryObjectiv"),
		glGetQueryObjectuiv:        getProcAddr("glGetQueryObjectuiv"),
		glGetQueryiv:               getProcAddr("glGetQueryiv"),
		glGetShaderInfoLog:         getProcAddr("glGetShaderInfoLog"),
		glGetShaderSource:          getProcAddr("glGetShaderSource"),
		glGetShaderiv:              getProcAddr("glGetShaderiv"),
		glGetString:                getProcAddr("glGetString"),
		glGetTexEnvfv:              getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:              getProcAddr("glGetTexEnviv"),
		glGetTexGendv:              getProcAddr("glGetTexGendv"),
		glGetTexGenfv:              getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:              getProcAddr("glGetTexGeniv"),
		glGetTexImage:              getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:   getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:   getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterfv:        getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:        getProcAddr("glGetTexParameteriv"),
		glGetUniformLocation:       getProcAddr("glGetUniformLocation"),
		glGetUniformfv:             getProcAddr("glGetUniformfv"),
		glGetUniformiv:             getProcAddr("glGetUniformiv"),
		glGetVertexAttribPointerv:  getProcAddr("glGetVertexAttribPointerv"),
		glGetVertexAttribdv:        getProcAddr("glGetVertexAttribdv"),
		glGetVertexAttribfv:        getProcAddr("glGetVertexAttribfv"),
		glGetVertexAttribiv:        getProcAddr("glGetVertexAttribiv"),
		glHint:                     getProcAddr("glHint"),
		glIndexMask:                getProcAddr("glIndexMask"),
		glIndexPointer:             getProcAddr("glIndexPointer"),
		glIndexd:                   getProcAddr("glIndexd"),
		glIndexdv:                  getProcAddr("glIndexdv"),
		glIndexf:                   getProcAddr("glIndexf"),
		glIndexfv:                  getProcAddr("glIndexfv"),
		glIndexi:                   getProcAddr("glIndexi"),
		glIndexiv:                  getProcAddr("glIndexiv"),
		glIndexs:                   getProcAddr("glIndexs"),
		glIndexsv:                  getProcAddr("glIndexsv"),
		glIndexub:                  getProcAddr("glIndexub"),
		glIndexubv:                 getProcAddr("glIndexubv"),
		glInitNames:                getProcAddr("glInitNames"),
		glInterleavedArrays:        getProcAddr("glInterleavedArrays"),
		glIsBuffer:                 getProcAddr("glIsBuffer"),
		glIsEnabled:                getProcAddr("glIsEnabled"),
		glIsList:                   getProcAddr("glIsList"),
		glIsProgram:                getProcAddr("glIsProgram"),
		glIsQuery:                  getProcAddr("glIsQuery"),
		glIsShader:                 getProcAddr("glIsShader"),
		glIsTexture:                getProcAddr("glIsTexture"),
		glLightModelf:              getProcAddr("glLightModelf"),
		glLightModelfv:             getProcAddr("glLightModelfv"),
		glLightModeli:              getProcAddr("glLightModeli"),
		glLightModeliv:             getProcAddr("glLightModeliv"),
		glLightf:                   getProcAddr("glLightf"),
		glLightfv:                  getProcAddr("glLightfv"),
		glLighti:                   getProcAddr("glLighti"),
		glLightiv:                  getProcAddr("glLightiv"),
		glLineStipple:              getProcAddr("glLineStipple"),
		glLineWidth:                getProcAddr("glLineWidth"),
		glLinkProgram:              getProcAddr("glLinkProgram"),
		glListBase:                 getProcAddr("glListBase"),
		glLoadIdentity:             getProcAddr("glLoadIdentity"),
		glLoadMatrixd:              getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:              getProcAddr("glLoadMatrixf"),
		glLoadName:                 getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:     getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:     getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                  getProcAddr("glLogicOp"),
		glMap1d:                    getProcAddr("glMap1d"),
		glMap1f:                    getProcAddr("glMap1f"),
		glMap2d:                    getProcAddr("glMap2d"),
		glMap2f:                    getProcAddr("glMap2f"),
		glMapBuffer:                getProcAddr("glMapBuffer"),
		glMapGrid1d:                getProcAddr("glMapGrid1d"),
		glMapGrid1f:                getProcAddr("glMapGrid1f"),
		glMapGrid2d:                getProcAddr("glMapGrid2d"),
		glMapGrid2f:                getProcAddr("glMapGrid2f"),
		glMaterialf:                getProcAddr("glMaterialf"),
		glMaterialfv:               getProcAddr("glMaterialfv"),
		glMateriali:                getProcAddr("glMateriali"),
		glMaterialiv:               getProcAddr("glMaterialiv"),
		glMatrixMode:               getProcAddr("glMatrixMode"),
		glMultMatrixd:              getProcAddr("glMultMatrixd"),
		glMultMatrixf:              getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:     getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:     getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:          getProcAddr("glMultiDrawArrays"),
		glMultiDrawElements:        getProcAddr("glMultiDrawElements"),
		glMultiTexCoord1d:          getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:         getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:          getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:         getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:          getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:         getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:          getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:         getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:          getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:         getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:          getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:         getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:          getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:         getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:          getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:         getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:          getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:         getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:          getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:         getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:          getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:         getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:          getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:         getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:          getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:         getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:          getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:         getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:          getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:         getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:          getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:         getProcAddr("glMultiTexCoord4sv"),
		glNewList:                  getProcAddr("glNewList"),
		glNormal3b:                 getProcAddr("glNormal3b"),
		glNormal3bv:                getProcAddr("glNormal3bv"),
		glNormal3d:                 getProcAddr("glNormal3d"),
		glNormal3dv:                getProcAddr("glNormal3dv"),
		glNormal3f:                 getProcAddr("glNormal3f"),
		glNormal3fv:                getProcAddr("glNormal3fv"),
		glNormal3i:                 getProcAddr("glNormal3i"),
		glNormal3iv:                getProcAddr("glNormal3iv"),
		glNormal3s:                 getProcAddr("glNormal3s"),
		glNormal3sv:                getProcAddr("glNormal3sv"),
		glNormalPointer:            getProcAddr("glNormalPointer"),
		glOrtho:                    getProcAddr("glOrtho"),
		glPassThrough:              getProcAddr("glPassThrough"),
		glPixelMapfv:               getProcAddr("glPixelMapfv"),
		glPixelMapuiv:              getProcAddr("glPixelMapuiv"),
		glPixelMapusv:              getProcAddr("glPixelMapusv"),
		glPixelStoref:              getProcAddr("glPixelStoref"),
		glPixelStorei:              getProcAddr("glPixelStorei"),
		glPixelTransferf:           getProcAddr("glPixelTransferf"),
		glPixelTransferi:           getProcAddr("glPixelTransferi"),
		glPixelZoom:                getProcAddr("glPixelZoom"),
		glPointParameterf:          getProcAddr("glPointParameterf"),
		glPointParameterfv:         getProcAddr("glPointParameterfv"),
		glPointParameteri:          getProcAddr("glPointParameteri"),
		glPointParameteriv:         getProcAddr("glPointParameteriv"),
		glPointSize:                getProcAddr("glPointSize"),
		glPolygonMode:              getProcAddr("glPolygonMode"),
		glPolygonOffset:            getProcAddr("glPolygonOffset"),
		glPolygonStipple:           getProcAddr("glPolygonStipple"),
		glPopAttrib:                getProcAddr("glPopAttrib"),
		glPopClientAttrib:          getProcAddr("glPopClientAttrib"),
		glPopMatrix:                getProcAddr("glPopMatrix"),
		glPopName:                  getProcAddr("glPopName"),
		glPrioritizeTextures:       getProcAddr("glPrioritizeTextures"),
		glPushAttrib:               getProcAddr("glPushAttrib"),
		glPushClientAttrib:         getProcAddr("glPushClientAttrib"),
		glPushMatrix:               getProcAddr("glPushMatrix"),
		glPushName:                 getProcAddr("glPushName"),
		glRasterPos2d:              getProcAddr("glRasterPos2d"),
		glRasterPos2dv:             getProcAddr("glRasterPos2dv"),
		glRasterPos2f:              getProcAddr("glRasterPos2f"),
		glRasterPos2fv:             getProcAddr("glRasterPos2fv"),
		glRasterPos2i:              getProcAddr("glRasterPos2i"),
		glRasterPos2iv:             getProcAddr("glRasterPos2iv"),
		glRasterPos2s:              getProcAddr("glRasterPos2s"),
		glRasterPos2sv:             getProcAddr("glRasterPos2sv"),
		glRasterPos3d:              getProcAddr("glRasterPos3d"),
		glRasterPos3dv:             getProcAddr("glRasterPos3dv"),
		glRasterPos3f:              getProcAddr("glRasterPos3f"),
		glRasterPos3fv:             getProcAddr("glRasterPos3fv"),
		glRasterPos3i:              getProcAddr("glRasterPos3i"),
		glRasterPos3iv:             getProcAddr("glRasterPos3iv"),
		glRasterPos3s:              getProcAddr("glRasterPos3s"),
		glRasterPos3sv:             getProcAddr("glRasterPos3sv"),
		glRasterPos4d:              getProcAddr("glRasterPos4d"),
		glRasterPos4dv:             getProcAddr("glRasterPos4dv"),
		glRasterPos4f:              getProcAddr("glRasterPos4f"),
		glRasterPos4fv:             getProcAddr("glRasterPos4fv"),
		glRasterPos4i:              getProcAddr("glRasterPos4i"),
		glRasterPos4iv:             getProcAddr("glRasterPos4iv"),
		glRasterPos4s:              getProcAddr("glRasterPos4s"),
		glRasterPos4sv:             getProcAddr("glRasterPos4sv"),
		glReadBuffer:               getProcAddr("glReadBuffer"),
		glReadPixels:               getProcAddr("glReadPixels"),
		glRectd:                    getProcAddr("glRectd"),
		glRectdv:                   getProcAddr("glRectdv"),
		glRectf:                    getProcAddr("glRectf"),
		glRectfv:                   getProcAddr("glRectfv"),
		glRecti:                    getProcAddr("glRecti"),
		glRectiv:                   getProcAddr("glRectiv"),
		glRects:                    getProcAddr("glRects"),
		glRectsv:                   getProcAddr("glRectsv"),
		glRenderMode:               getProcAddr("glRenderMode"),
		glRotated:                  getProcAddr("glRotated"),
		glRotatef:                  getProcAddr("glRotatef"),
		glSampleCoverage:           getProcAddr("glSampleCoverage"),
		glScaled:                   getProcAddr("glScaled"),
		glScalef:                   getProcAddr("glScalef"),
		glScissor:                  getProcAddr("glScissor"),
		glSecondaryColor3b:         getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:        getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:         getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:        getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:         getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:        getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:         getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:        getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:         getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:        getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:        getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:       getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:        getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:       getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:        getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:       getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorPointer:    getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:             getProcAddr("glSelectBuffer"),
		glShadeModel:               getProcAddr("glShadeModel"),
		glShaderSource:             getProcAddr("glShaderSource"),
		glStencilFunc:              getProcAddr("glStencilFunc"),
		glStencilFuncSeparate:      getProcAddr("glStencilFuncSeparate"),
		glStencilMask:              getProcAddr("glStencilMask"),
		glStencilMaskSeparate:      getProcAddr("glStencilMaskSeparate"),
		glStencilOp:                getProcAddr("glStencilOp"),
		glStencilOpSeparate:        getProcAddr("glStencilOpSeparate"),
		glTexCoord1d:               getProcAddr("glTexCoord1d"),
		glTexCoord1dv:              getProcAddr("glTexCoord1dv"),
		glTexCoord1f:               getProcAddr("glTexCoord1f"),
		glTexCoord1fv:              getProcAddr("glTexCoord1fv"),
		glTexCoord1i:               getProcAddr("glTexCoord1i"),
		glTexCoord1iv:              getProcAddr("glTexCoord1iv"),
		glTexCoord1s:               getProcAddr("glTexCoord1s"),
		glTexCoord1sv:              getProcAddr("glTexCoord1sv"),
		glTexCoord2d:               getProcAddr("glTexCoord2d"),
		glTexCoord2dv:              getProcAddr("glTexCoord2dv"),
		glTexCoord2f:               getProcAddr("glTexCoord2f"),
		glTexCoord2fv:              getProcAddr("glTexCoord2fv"),
		glTexCoord2i:               getProcAddr("glTexCoord2i"),
		glTexCoord2iv:              getProcAddr("glTexCoord2iv"),
		glTexCoord2s:               getProcAddr("glTexCoord2s"),
		glTexCoord2sv:              getProcAddr("glTexCoord2sv"),
		glTexCoord3d:               getProcAddr("glTexCoord3d"),
		glTexCoord3dv:              getProcAddr("glTexCoord3dv"),
		glTexCoord3f:               getProcAddr("glTexCoord3f"),
		glTexCoord3fv:              getProcAddr("glTexCoord3fv"),
		glTexCoord3i:               getProcAddr("glTexCoord3i"),
		glTexCoord3iv:              getProcAddr("glTexCoord3iv"),
		glTexCoord3s:               getProcAddr("glTexCoord3s"),
		glTexCoord3sv:              getProcAddr("glTexCoord3sv"),
		glTexCoord4d:               getProcAddr("glTexCoord4d"),
		glTexCoord4dv:              getProcAddr("glTexCoord4dv"),
		glTexCoord4f:               getProcAddr("glTexCoord4f"),
		glTexCoord4fv:              getProcAddr("glTexCoord4fv"),
		glTexCoord4i:               getProcAddr("glTexCoord4i"),
		glTexCoord4iv:              getProcAddr("glTexCoord4iv"),
		glTexCoord4s:               getProcAddr("glTexCoord4s"),
		glTexCoord4sv:              getProcAddr("glTexCoord4sv"),
		glTexCoordPointer:          getProcAddr("glTexCoordPointer"),
		glTexEnvf:                  getProcAddr("glTexEnvf"),
		glTexEnvfv:                 getProcAddr("glTexEnvfv"),
		glTexEnvi:                  getProcAddr("glTexEnvi"),
		glTexEnviv:                 getProcAddr("glTexEnviv"),
		glTexGend:                  getProcAddr("glTexGend"),
		glTexGendv:                 getProcAddr("glTexGendv"),
		glTexGenf:                  getProcAddr("glTexGenf"),
		glTexGenfv:                 getProcAddr("glTexGenfv"),
		glTexGeni:                  getProcAddr("glTexGeni"),
		glTexGeniv:                 getProcAddr("glTexGeniv"),
		glTexImage1D:               getProcAddr("glTexImage1D"),
		glTexImage2D:               getProcAddr("glTexImage2D"),
		glTexImage3D:               getProcAddr("glTexImage3D"),
		glTexParameterf:            getProcAddr("glTexParameterf"),
		glTexParameterfv:           getProcAddr("glTexParameterfv"),
		glTexParameteri:            getProcAddr("glTexParameteri"),
		glTexParameteriv:           getProcAddr("glTexParameteriv"),
		glTexSubImage1D:            getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:            getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:            getProcAddr("glTexSubImage3D"),
		glTranslated:               getProcAddr("glTranslated"),
		glTranslatef:               getProcAddr("glTranslatef"),
		glUniform1f:                getProcAddr("glUniform1f"),
		glUniform1fv:               getProcAddr("glUniform1fv"),
		glUniform1i:                getProcAddr("glUniform1i"),
		glUniform1iv:               getProcAddr("glUniform1iv"),
		glUniform2f:                getProcAddr("glUniform2f"),
		glUniform2fv:               getProcAddr("glUniform2fv"),
		glUniform2i:                getProcAddr("glUniform2i"),
		glUniform2iv:               getProcAddr("glUniform2iv"),
		glUniform3f:                getProcAddr("glUniform3f"),
		glUniform3fv:               getProcAddr("glUniform3fv"),
		glUniform3i:                getProcAddr("glUniform3i"),
		glUniform3iv:               getProcAddr("glUniform3iv"),
		glUniform4f:                getProcAddr("glUniform4f"),
		glUniform4fv:               getProcAddr("glUniform4fv"),
		glUniform4i:                getProcAddr("glUniform4i"),
		glUniform4iv:               getProcAddr("glUniform4iv"),
		glUniformMatrix2fv:         getProcAddr("glUniformMatrix2fv"),
		glUniformMatrix2x3fv:       getProcAddr("glUniformMatrix2x3fv"),
		glUniformMatrix2x4fv:       getProcAddr("glUniformMatrix2x4fv"),
		glUniformMatrix3fv:         getProcAddr("glUniformMatrix3fv"),
		glUniformMatrix3x2fv:       getProcAddr("glUniformMatrix3x2fv"),
		glUniformMatrix3x4fv:       getProcAddr("glUniformMatrix3x4fv"),
		glUniformMatrix4fv:         getProcAddr("glUniformMatrix4fv"),
		glUniformMatrix4x2fv:       getProcAddr("glUniformMatrix4x2fv"),
		glUniformMatrix4x3fv:       getProcAddr("glUniformMatrix4x3fv"),
		glUnmapBuffer:              getProcAddr("glUnmapBuffer"),
		glUseProgram:               getProcAddr("glUseProgram"),
		glValidateProgram:          getProcAddr("glValidateProgram"),
		glVertex2d:                 getProcAddr("glVertex2d"),
		glVertex2dv:                getProcAddr("glVertex2dv"),
		glVertex2f:                 getProcAddr("glVertex2f"),
		glVertex2fv:                getProcAddr("glVertex2fv"),
		glVertex2i:                 getProcAddr("glVertex2i"),
		glVertex2iv:                getProcAddr("glVertex2iv"),
		glVertex2s:                 getProcAddr("glVertex2s"),
		glVertex2sv:                getProcAddr("glVertex2sv"),
		glVertex3d:                 getProcAddr("glVertex3d"),
		glVertex3dv:                getProcAddr("glVertex3dv"),
		glVertex3f:                 getProcAddr("glVertex3f"),
		glVertex3fv:                getProcAddr("glVertex3fv"),
		glVertex3i:                 getProcAddr("glVertex3i"),
		glVertex3iv:                getProcAddr("glVertex3iv"),
		glVertex3s:                 getProcAddr("glVertex3s"),
		glVertex3sv:                getProcAddr("glVertex3sv"),
		glVertex4d:                 getProcAddr("glVertex4d"),
		glVertex4dv:                getProcAddr("glVertex4dv"),
		glVertex4f:                 getProcAddr("glVertex4f"),
		glVertex4fv:                getProcAddr("glVertex4fv"),
		glVertex4i:                 getProcAddr("glVertex4i"),
		glVertex4iv:                getProcAddr("glVertex4iv"),
		glVertex4s:                 getProcAddr("glVertex4s"),
		glVertex4sv:                getProcAddr("glVertex4sv"),
		glVertexAttrib1d:           getProcAddr("glVertexAttrib1d"),
		glVertexAttrib1dv:          getProcAddr("glVertexAttrib1dv"),
		glVertexAttrib1f:           getProcAddr("glVertexAttrib1f"),
		glVertexAttrib1fv:          getProcAddr("glVertexAttrib1fv"),
		glVertexAttrib1s:           getProcAddr("glVertexAttrib1s"),
		glVertexAttrib1sv:          getProcAddr("glVertexAttrib1sv"),
		glVertexAttrib2d:           getProcAddr("glVertexAttrib2d"),
		glVertexAttrib2dv:          getProcAddr("glVertexAttrib2dv"),
		glVertexAttrib2f:           getProcAddr("glVertexAttrib2f"),
		glVertexAttrib2fv:          getProcAddr("glVertexAttrib2fv"),
		glVertexAttrib2s:           getProcAddr("glVertexAttrib2s"),
		glVertexAttrib2sv:          getProcAddr("glVertexAttrib2sv"),
		glVertexAttrib3d:           getProcAddr("glVertexAttrib3d"),
		glVertexAttrib3dv:          getProcAddr("glVertexAttrib3dv"),
		glVertexAttrib3f:           getProcAddr("glVertexAttrib3f"),
		glVertexAttrib3fv:          getProcAddr("glVertexAttrib3fv"),
		glVertexAttrib3s:           getProcAddr("glVertexAttrib3s"),
		glVertexAttrib3sv:          getProcAddr("glVertexAttrib3sv"),
		glVertexAttrib4Nbv:         getProcAddr("glVertexAttrib4Nbv"),
		glVertexAttrib4Niv:         getProcAddr("glVertexAttrib4Niv"),
		glVertexAttrib4Nsv:         getProcAddr("glVertexAttrib4Nsv"),
		glVertexAttrib4Nub:         getProcAddr("glVertexAttrib4Nub"),
		glVertexAttrib4Nubv:        getProcAddr("glVertexAttrib4Nubv"),
		glVertexAttrib4Nuiv:        getProcAddr("glVertexAttrib4Nuiv"),
		glVertexAttrib4Nusv:        getProcAddr("glVertexAttrib4Nusv"),
		glVertexAttrib4bv:          getProcAddr("glVertexAttrib4bv"),
		glVertexAttrib4d:           getProcAddr("glVertexAttrib4d"),
		glVertexAttrib4dv:          getProcAddr("glVertexAttrib4dv"),
		glVertexAttrib4f:           getProcAddr("glVertexAttrib4f"),
		glVertexAttrib4fv:          getProcAddr("glVertexAttrib4fv"),
		glVertexAttrib4iv:          getProcAddr("glVertexAttrib4iv"),
		glVertexAttrib4s:           getProcAddr("glVertexAttrib4s"),
		glVertexAttrib4sv:          getProcAddr("glVertexAttrib4sv"),
		glVertexAttrib4ubv:         getProcAddr("glVertexAttrib4ubv"),
		glVertexAttrib4uiv:         getProcAddr("glVertexAttrib4uiv"),
		glVertexAttrib4usv:         getProcAddr("glVertexAttrib4usv"),
		glVertexAttribPointer:      getProcAddr("glVertexAttribPointer"),
		glVertexPointer:            getProcAddr("glVertexPointer"),
		glViewport:                 getProcAddr("glViewport"),
		glWindowPos2d:              getProcAddr("glWindowPos2d"),
		glWindowPos2dv:             getProcAddr("glWindowPos2dv"),
		glWindowPos2f:              getProcAddr("glWindowPos2f"),
		glWindowPos2fv:             getProcAddr("glWindowPos2fv"),
		glWindowPos2i:              getProcAddr("glWindowPos2i"),
		glWindowPos2iv:             getProcAddr("glWindowPos2iv"),
		glWindowPos2s:              getProcAddr("glWindowPos2s"),
		glWindowPos2sv:             getProcAddr("glWindowPos2sv"),
		glWindowPos3d:              getProcAddr("glWindowPos3d"),
		glWindowPos3dv:             getProcAddr("glWindowPos3dv"),
		glWindowPos3f:              getProcAddr("glWindowPos3f"),
		glWindowPos3fv:             getProcAddr("glWindowPos3fv"),
		glWindowPos3i:              getProcAddr("glWindowPos3i"),
		glWindowPos3iv:             getProcAddr("glWindowPos3iv"),
		glWindowPos3s:              getProcAddr("glWindowPos3s"),
		glWindowPos3sv:             getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL300 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	AttachShader(program uint32, shader uint32)
	Begin(mode uint32)
	BeginConditionalRender(id uint32, mode uint32)
	BeginQuery(target uint32, id uint32)
	BeginTransformFeedback(primitiveMode uint32)
	BindAttribLocation(program uint32, index uint32, name *uint8)
	BindBuffer(target uint32, buffer uint32)
	BindBufferBase(target uint32, index uint32, buffer uint32)
	BindBufferRange(target uint32, index uint32, buffer uint32, offset uintptr, size int)
	BindFragDataLocation(program uint32, color uint32, name *uint8)
	BindFramebuffer(target uint32, framebuffer uint32)
	BindRenderbuffer(target uint32, renderbuffer uint32)
	BindTexture(target uint32, texture uint32)
	BindVertexArray(array uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	CheckFramebufferStatus(target uint32) uint32
	ClampColor(target uint32, clamp uint32)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32)
	ClearBufferfv(buffer uint32, drawbuffer int32, value *float32)
	ClearBufferiv(buffer uint32, drawbuffer int32, value *int32)
	ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClientActiveTexture(texture uint32)
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaski(index uint32, r bool, g bool, b bool, a bool)
	ColorMaterial(face uint32, mode uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompileShader(shader uint32)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CreateProgram() uint32
	CreateShader(type_ uint32) uint32
	CullFace(mode uint32)
	DeleteBuffers(n int32, buffers *uint32)
	DeleteFramebuffers(n int32, framebuffers *uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteProgram(program uint32)
	DeleteQueries(n int32, ids *uint32)
	DeleteRenderbuffers(n int32, renderbuffers *uint32)
	DeleteShader(shader uint32)
	DeleteTextures(n int32, textures *uint32)
	DeleteVertexArrays(n int32, arrays *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	DetachShader(program uint32, shader uint32)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DisableVertexAttribArray(index uint32)
	Disablei(target uint32, index uint32)
	DrawArrays(mode uint32, first int32, count int32)
	DrawBuffer(buf uint32)
	DrawBuffers(n int32, bufs *uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	EnableVertexAttribArray(index uint32)
	Enablei(target uint32, index uint32)
	End()
	EndConditionalRender()
	EndList()
	EndQuery(target uint32)
	EndTransformFeedback()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	Finish()
	Flush()
	FlushMappedBufferRange(target uint32, offset uintptr, length int)
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32)
	FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenBuffers(n int32, buffers *uint32)
	GenFramebuffers(n int32, framebuffers *uint32)
	GenLists(range_ int32) uint32
	GenQueries(n int32, ids *uint32)
	GenRenderbuffers(n int32, renderbuffers *uint32)
	GenTextures(n int32, textures *uint32)
	GenVertexArrays(n int32, arrays *uint32)
	GenerateMipmap(target uint32)
	GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)
	GetAttribLocation(program uint32, name *uint8) int32
	GetBooleani_v(target uint32, index uint32, data *bool)
	GetBooleanv(pname uint32, data *bool)
	GetBufferParameteriv(target uint32, pname uint32, params *int32)
	GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)
	GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloatv(pname uint32, data *float32)
	GetFragDataLocation(program uint32, name *uint8) int32
	GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32)
	GetIntegeri_v(target uint32, index uint32, data *int32)
	GetIntegerv(pname uint32, data *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramiv(program uint32, pname uint32, params *int32)
	GetQueryObjectiv(id uint32, pname uint32, params *int32)
	GetQueryObjectuiv(id uint32, pname uint32, params *uint32)
	GetQueryiv(target uint32, pname uint32, params *int32)
	GetRenderbufferParameteriv(target uint32, pname uint32, params *int32)
	GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8)
	GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8)
	GetShaderiv(shader uint32, pname uint32, params *int32)
	GetString(name uint32) *uint8
	GetStringi(name uint32, index uint32) *uint8
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterIiv(target uint32, pname uint32, params *int32)
	GetTexParameterIuiv(target uint32, pname uint32, params *uint32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetUniformLocation(program uint32, name *uint8) int32
	GetUniformfv(program uint32, location int32, params *float32)
	GetUniformiv(program uint32, location int32, params *int32)
	GetUniformuiv(program uint32, location int32, params *uint32)
	GetVertexAttribIiv(index uint32, pname uint32, params *int32)
	GetVertexAttribIuiv(index uint32, pname uint32, params *uint32)
	GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)
	GetVertexAttribdv(index uint32, pname uint32, params *float64)
	GetVertexAttribfv(index uint32, pname uint32, params *float32)
	GetVertexAttribiv(index uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	IsBuffer(buffer uint32) bool
	IsEnabled(cap uint32) bool
	IsEnabledi(target uint32, index uint32) bool
	IsFramebuffer(framebuffer uint32) bool
	IsList(list uint32) bool
	IsProgram(program uint32) bool
	IsQuery(id uint32) bool
	IsRenderbuffer(renderbuffer uint32) bool
	IsShader(shader uint32) bool
	IsTexture(texture uint32) bool
	IsVertexArray(array uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	LinkProgram(program uint32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapBuffer(target uint32, access uint32) unsafe.Pointer
	MapBufferRange(target uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopMatrix()
	PopName()
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	RenderMode(mode uint32) int32
	RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32)
	RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32)
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	ShaderSource(shader uint32, count int32, string **uint8, length *int32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilMaskSeparate(face uint32, mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexParameterIiv(target uint32, pname uint32, params *int32)
	TexParameterIuiv(target uint32, pname uint32, params *uint32)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TransformFeedbackVaryings(program uint32, count int32, varyings **uint8, bufferMode uint32)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Uniform1f(location int32, v0 float32)
	Uniform1fv(location int32, count int32, value *float32)
	Uniform1i(location int32, v0 int32)
	Uniform1iv(location int32, count int32, value *int32)
	Uniform1ui(location int32, v0 uint32)
	Uniform1uiv(location int32, count int32, value *uint32)
	Uniform2f(location int32, v0 float32, v1 float32)
	Uniform2fv(location int32, count int32, value *float32)
	Uniform2i(location int32, v0 int32, v1 int32)
	Uniform2iv(location int32, count int32, value *int32)
	Uniform2ui(location int32, v0 uint32, v1 uint32)
	Uniform2uiv(location int32, count int32, value *uint32)
	Uniform3f(location int32, v0 float32, v1 float32, v2 float32)
	Uniform3fv(location int32, count int32, value *float32)
	Uniform3i(location int32, v0 int32, v1 int32, v2 int32)
	Uniform3iv(location int32, count int32, value *int32)
	Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)
	Uniform3uiv(location int32, count int32, value *uint32)
	Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	Uniform4fv(location int32, count int32, value *float32)
	Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	Uniform4iv(location int32, count int32, value *int32)
	Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	Uniform4uiv(location int32, count int32, value *uint32)
	UniformMatrix2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32)
	UnmapBuffer(target uint32) bool
	UseProgram(program uint32)
	ValidateProgram(program uint32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexAttrib1d(index uint32, x float64)
	VertexAttrib1dv(index uint32, v *float64)
	VertexAttrib1f(index uint32, x float32)
	VertexAttrib1fv(index uint32, v *float32)
	VertexAttrib1s(index uint32, x int16)
	VertexAttrib1sv(index uint32, v *int16)
	VertexAttrib2d(index uint32, x float64, y float64)
	VertexAttrib2dv(index uint32, v *float64)
	VertexAttrib2f(index uint32, x float32, y float32)
	VertexAttrib2fv(index uint32, v *float32)
	VertexAttrib2s(index uint32, x int16, y int16)
	VertexAttrib2sv(index uint32, v *int16)
	VertexAttrib3d(index uint32, x float64, y float64, z float64)
	VertexAttrib3dv(index uint32, v *float64)
	VertexAttrib3f(index uint32, x float32, y float32, z float32)
	VertexAttrib3fv(index uint32, v *float32)
	VertexAttrib3s(index uint32, x int16, y int16, z int16)
	VertexAttrib3sv(index uint32, v *int16)
	VertexAttrib4Nbv(index uint32, v *int8)
	VertexAttrib4Niv(index uint32, v *int32)
	VertexAttrib4Nsv(index uint32, v *int16)
	VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4Nubv(index uint32, v *uint8)
	VertexAttrib4Nuiv(index uint32, v *uint32)
	VertexAttrib4Nusv(index uint32, v *uint16)
	VertexAttrib4bv(index uint32, v *int8)
	VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dv(index uint32, v *float64)
	VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fv(index uint32, v *float32)
	VertexAttrib4iv(index uint32, v *int32)
	VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4sv(index uint32, v *int16)
	VertexAttrib4ubv(index uint32, v *uint8)
	VertexAttrib4uiv(index uint32, v *uint32)
	VertexAttrib4usv(index uint32, v *uint16)
	VertexAttribI1i(index uint32, x int32)
	VertexAttribI1iv(index uint32, v *int32)
	VertexAttribI1ui(index uint32, x uint32)
	VertexAttribI1uiv(index uint32, v *uint32)
	VertexAttribI2i(index uint32, x int32, y int32)
	VertexAttribI2iv(index uint32, v *int32)
	VertexAttribI2ui(index uint32, x uint32, y uint32)
	VertexAttribI2uiv(index uint32, v *uint32)
	VertexAttribI3i(index uint32, x int32, y int32, z int32)
	VertexAttribI3iv(index uint32, v *int32)
	VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32)
	VertexAttribI3uiv(index uint32, v *uint32)
	VertexAttribI4bv(index uint32, v *int8)
	VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)
	VertexAttribI4iv(index uint32, v *int32)
	VertexAttribI4sv(index uint32, v *int16)
	VertexAttribI4ubv(index uint32, v *uint8)
	VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)
	VertexAttribI4uiv(index uint32, v *uint32)
	VertexAttribI4usv(index uint32, v *uint16)
	VertexAttribIPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribPointer(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New300(getProcAddr func(name string) unsafe.Pointer) GL300 {
	gl := &lib{
		glAccum:                               getProcAddr("glAccum"),
		glActiveTexture:                       getProcAddr("glActiveTexture"),
		glAlphaFunc:                           getProcAddr("glAlphaFunc"),
		glAreTexturesResident:                 getProcAddr("glAreTexturesResident"),
		glArrayElement:                        getProcAddr("glArrayElement"),
		glAttachShader:                        getProcAddr("glAttachShader"),
		glBegin:                               getProcAddr("glBegin"),
		glBeginConditionalRender:              getProcAddr("glBeginConditionalRender"),
		glBeginQuery:                          getProcAddr("glBeginQuery"),
		glBeginTransformFeedback:              getProcAddr("glBeginTransformFeedback"),
		glBindAttribLocation:                  getProcAddr("glBindAttribLocation"),
		glBindBuffer:                          getProcAddr("glBindBuffer"),
		glBindBufferBase:                      getProcAddr("glBindBufferBase"),
		glBindBufferRange:                     getProcAddr("glBindBufferRange"),
		glBindFragDataLocation:                getProcAddr("glBindFragDataLocation"),
		glBindFramebuffer:                     getProcAddr("glBindFramebuffer"),
		glBindRenderbuffer:                    getProcAddr("glBindRenderbuffer"),
		glBindTexture:                         getProcAddr("glBindTexture"),
		glBindVertexArray:                     getProcAddr("glBindVertexArray"),
		glBitmap:                              getProcAddr("glBitmap"),
		glBlendColor:                          getProcAddr("glBlendColor"),
		glBlendEquation:                       getProcAddr("glBlendEquation"),
		glBlendEquationSeparate:               getProcAddr("glBlendEquationSeparate"),
		glBlendFunc:                           getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:                   getProcAddr("glBlendFuncSeparate"),
		glBlitFramebuffer:                     getProcAddr("glBlitFramebuffer"),
		glBufferData:                          getProcAddr("glBufferData"),
		glBufferSubData:                       getProcAddr("glBufferSubData"),
		glCallList:                            getProcAddr("glCallList"),
		glCallLists:                           getProcAddr("glCallLists"),
		glCheckFramebufferStatus:              getProcAddr("glCheckFramebufferStatus"),
		glClampColor:                          getProcAddr("glClampColor"),
		glClear:                               getProcAddr("glClear"),
		glClearAccum:                          getProcAddr("glClearAccum"),
		glClearBufferfi:                       getProcAddr("glClearBufferfi"),
		glClearBufferfv:                       getProcAddr("glClearBufferfv"),
		glClearBufferiv:                       getProcAddr("glClearBufferiv"),
		glClearBufferuiv:                      getProcAddr("glClearBufferuiv"),
		glClearColor:                          getProcAddr("glClearColor"),
		glClearDepth:                          getProcAddr("glClearDepth"),
		glClearIndex:                          getProcAddr("glClearIndex"),
		glClearStencil:                        getProcAddr("glClearStencil"),
		glClientActiveTexture:                 getProcAddr("glClientActiveTexture"),
		glClipPlane:                           getProcAddr("glClipPlane"),
		glColor3b:                             getProcAddr("glColor3b"),
		glColor3bv:                            getProcAddr("glColor3bv"),
		glColor3d:                             getProcAddr("glColor3d"),
		glColor3dv:                            getProcAddr("glColor3dv"),
		glColor3f:                             getProcAddr("glColor3f"),
		glColor3fv:                            getProcAddr("glColor3fv"),
		glColor3i:                             getProcAddr("glColor3i"),
		glColor3iv:                            getProcAddr("glColor3iv"),
		glColor3s:                             getProcAddr("glColor3s"),
		glColor3sv:                            getProcAddr("glColor3sv"),
		glColor3ub:                            getProcAddr("glColor3ub"),
		glColor3ubv:                           getProcAddr("glColor3ubv"),
		glColor3ui:                            getProcAddr("glColor3ui"),
		glColor3uiv:                           getProcAddr("glColor3uiv"),
		glColor3us:                            getProcAddr("glColor3us"),
		glColor3usv:                           getProcAddr("glColor3usv"),
		glColor4b:                             getProcAddr("glColor4b"),
		glColor4bv:                            getProcAddr("glColor4bv"),
		glColor4d:                             getProcAddr("glColor4d"),
		glColor4dv:                            getProcAddr("glColor4dv"),
		glColor4f:                             getProcAddr("glColor4f"),
		glColor4fv:                            getProcAddr("glColor4fv"),
		glColor4i:                             getProcAddr("glColor4i"),
		glColor4iv:                            getProcAddr("glColor4iv"),
		glColor4s:                             getProcAddr("glColor4s"),
		glColor4sv:                            getProcAddr("glColor4sv"),
		glColor4ub:                            getProcAddr("glColor4ub"),
		glColor4ubv:                           getProcAddr("glColor4ubv"),
		glColor4ui:                            getProcAddr("glColor4ui"),
		glColor4uiv:                           getProcAddr("glColor4uiv"),
		glColor4us:                            getProcAddr("glColor4us"),
		glColor4usv:                           getProcAddr("glColor4usv"),
		glColorMask:                           getProcAddr("glColorMask"),
		glColorMaski:                          getProcAddr("glColorMaski"),
		glColorMaterial:                       getProcAddr("glColorMaterial"),
		glColorPointer:                        getProcAddr("glColorPointer"),
		glCompileShader:                       getProcAddr("glCompileShader"),
		glCompressedTexImage1D:                getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:                getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:                getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D:             getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D:             getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D:             getProcAddr("glCompressedTexSubImage3D"),
		glCopyPixels:                          getProcAddr("glCopyPixels"),
		glCopyTexImage1D:                      getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:                      getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:                   getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:                   getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:                   getProcAddr("glCopyTexSubImage3D"),
		glCreateProgram:                       getProcAddr("glCreateProgram"),
		glCreateShader:                        getProcAddr("glCreateShader"),
		glCullFace:                            getProcAddr("glCullFace"),
		glDeleteBuffers:                       getProcAddr("glDeleteBuffers"),
		glDeleteFramebuffers:                  getProcAddr("glDeleteFramebuffers"),
		glDeleteLists:                         getProcAddr("glDeleteLists"),
		glDeleteProgram:                       getProcAddr("glDeleteProgram"),
		glDeleteQueries:                       getProcAddr("glDeleteQueries"),
		glDeleteRenderbuffers:                 getProcAddr("glDeleteRenderbuffers"),
		glDeleteShader:                        getProcAddr("glDeleteShader"),
		glDeleteTextures:                      getProcAddr("glDeleteTextures"),
		glDeleteVertexArrays:                  getProcAddr("glDeleteVertexArrays"),
		glDepthFunc:                           getProcAddr("glDepthFunc"),
		glDepthMask:                           getProcAddr("glDepthMask"),
		glDepthRange:                          getProcAddr("glDepthRange"),
		glDetachShader:                        getProcAddr("glDetachShader"),
		glDisable:                             getProcAddr("glDisable"),
		glDisableClientState:                  getProcAddr("glDisableClientState"),
		glDisableVertexAttribArray:            getProcAddr("glDisableVertexAttribArray"),
		glDisablei:                            getProcAddr("glDisablei"),
		glDrawArrays:                          getProcAddr("glDrawArrays"),
		glDrawBuffer:                          getProcAddr("glDrawBuffer"),
		glDrawBuffers:                         getProcAddr("glDrawBuffers"),
		glDrawElements:                        getProcAddr("glDrawElements"),
		glDrawPixels:                          getProcAddr("glDrawPixels"),
		glDrawRangeElements:                   getProcAddr("glDrawRangeElements"),
		glEdgeFlag:                            getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:                     getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:                           getProcAddr("glEdgeFlagv"),
		glEnable:                              getProcAddr("glEnable"),
		glEnableClientState:                   getProcAddr("glEnableClientState"),
		glEnableVertexAttribArray:             getProcAddr("glEnableVertexAttribArray"),
		glEnablei:                             getProcAddr("glEnablei"),
		glEnd:                                 getProcAddr("glEnd"),
		glEndConditionalRender:                getProcAddr("glEndConditionalRender"),
		glEndList:                             getProcAddr("glEndList"),
		glEndQuery:                            getProcAddr("glEndQuery"),
		glEndTransformFeedback:                getProcAddr("glEndTransformFeedback"),
		glEvalCoord1d:                         getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:                        getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:                         getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:                        getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:                         getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:                        getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:                         getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:                        getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:                           getProcAddr("glEvalMesh1"),
		glEvalMesh2:                           getProcAddr("glEvalMesh2"),
		glEvalPoint1:                          getProcAddr("glEvalPoint1"),
		glEvalPoint2:                          getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:                      getProcAddr("glFeedbackBuffer"),
		glFinish:                              getProcAddr("glFinish"),
		glFlush:                               getProcAddr("glFlush"),
		glFlushMappedBufferRange:              getProcAddr("glFlushMappedBufferRange"),
		glFogCoordPointer:                     getProcAddr("glFogCoordPointer"),
		glFogCoordd:                           getProcAddr("glFogCoordd"),
		glFogCoorddv:                          getProcAddr("glFogCoorddv"),
		glFogCoordf:                           getProcAddr("glFogCoordf"),
		glFogCoordfv:                          getProcAddr("glFogCoordfv"),
		glFogf:                                getProcAddr("glFogf"),
		glFogfv:                               getProcAddr("glFogfv"),
		glFogi:                                getProcAddr("glFogi"),
		glFogiv:                               getProcAddr("glFogiv"),
		glFramebufferRenderbuffer:             getProcAddr("glFramebufferRenderbuffer"),
		glFramebufferTexture1D:                getProcAddr("glFramebufferTexture1D"),
		glFramebufferTexture2D:                getProcAddr("glFramebufferTexture2D"),
		glFramebufferTexture3D:                getProcAddr("glFramebufferTexture3D"),
		glFramebufferTextureLayer:             getProcAddr("glFramebufferTextureLayer"),
		glFrontFace:                           getProcAddr("glFrontFace"),
		glFrustum:                             getProcAddr("glFrustum"),
		glGenBuffers:                          getProcAddr("glGenBuffers"),
		glGenFramebuffers:                     getProcAddr("glGenFramebuffers"),
		glGenLists:                            getProcAddr("glGenLists"),
		glGenQueries:                          getProcAddr("glGenQueries"),
		glGenRenderbuffers:                    getProcAddr("glGenRenderbuffers"),
		glGenTextures:                         getProcAddr("glGenTextures"),
		glGenVertexArrays:                     getProcAddr("glGenVertexArrays"),
		glGenerateMipmap:                      getProcAddr("glGenerateMipmap"),
		glGetActiveAttrib:                     getProcAddr("glGetActiveAttrib"),
		glGetActiveUniform:                    getProcAddr("glGetActiveUniform"),
		glGetAttachedShaders:                  getProcAddr("glGetAttachedShaders"),
		glGetAttribLocation:                   getProcAddr("glGetAttribLocation"),
		glGetBooleani_v:                       getProcAddr("glGetBooleani_v"),
		glGetBooleanv:                         getProcAddr("glGetBooleanv"),
		glGetBufferParameteriv:                getProcAddr("glGetBufferParameteriv"),
		glGetBufferPointerv:                   getProcAddr("glGetBufferPointerv"),
		glGetBufferSubData:                    getProcAddr("glGetBufferSubData"),
		glGetClipPlane:                        getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:               getProcAddr("glGetCompressedTexImage"),
		glGetDoublev:                          getProcAddr("glGetDoublev"),
		glGetError:                            getProcAddr("glGetError"),
		glGetFloatv:                           getProcAddr("glGetFloatv"),
		glGetFragDataLocation:                 getProcAddr("glGetFragDataLocation"),
		glGetFramebufferAttachmentParameteriv: getProcAddr("glGetFramebufferAttachmentParameteriv"),
		glGetIntegeri_v:                       getProcAddr("glGetIntegeri_v"),
		glGetIntegerv:                         getProcAddr("glGetIntegerv"),
		glGetLightfv:                          getProcAddr("glGetLightfv"),
		glGetLightiv:                          getProcAddr("glGetLightiv"),
		glGetMapdv:                            getProcAddr("glGetMapdv"),
		glGetMapfv:                            getProcAddr("glGetMapfv"),
		glGetMapiv:                            getProcAddr("glGetMapiv"),
		glGetMaterialfv:                       getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:                       getProcAddr("glGetMaterialiv"),
		glGetPixelMapfv:                       getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:                      getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:                      getProcAddr("glGetPixelMapusv"),
		glGetPointerv:                         getProcAddr("glGetPointerv"),
		glGetPolygonStipple:                   getProcAddr("glGetPolygonStipple"),
		glGetProgramInfoLog:                   getProcAddr("glGetProgramInfoLog"),
		glGetProgramiv:                        getProcAddr("glGetProgramiv"),
		glGetQueryObjectiv:                    getProcAddr("glGetQueryObjectiv"),
		glGetQueryObjectuiv:                   getProcAddr("glGetQueryObjectuiv"),
		glGetQueryiv:                          getProcAddr("glGetQueryiv"),
		glGetRenderbufferParameteriv:          getProcAddr("glGetRenderbufferParameteriv"),
		glGetShaderInfoLog:                    getProcAddr("glGetShaderInfoLog"),
		glGetShaderSource:                     getProcAddr("glGetShaderSource"),
		glGetShaderiv:                         getProcAddr("glGetShaderiv"),
		glGetString:                           getProcAddr("glGetString"),
		glGetStringi:                          getProcAddr("glGetStringi"),
		glGetTexEnvfv:                         getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:                         getProcAddr("glGetTexEnviv"),
		glGetTexGendv:                         getProcAddr("glGetTexGendv"),
		glGetTexGenfv:                         getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:                         getProcAddr("glGetTexGeniv"),
		glGetTexImage:                         getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:              getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:              getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterIiv:                  getProcAddr("glGetTexParameterIiv"),
		glGetTexParameterIuiv:                 getProcAddr("glGetTexParameterIuiv"),
		glGetTexParameterfv:                   getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:                   getProcAddr("glGetTexParameteriv"),
		glGetTransformFeedbackVarying:         getProcAddr("glGetTransformFeedbackVarying"),
		glGetUniformLocation:                  getProcAddr("glGetUniformLocation"),
		glGetUniformfv:                        getProcAddr("glGetUniformfv"),
		glGetUniformiv:                        getProcAddr("glGetUniformiv"),
		glGetUniformuiv:                       getProcAddr("glGetUniformuiv"),
		glGetVertexAttribIiv:                  getProcAddr("glGetVertexAttribIiv"),
		glGetVertexAttribIuiv:                 getProcAddr("glGetVertexAttribIuiv"),
		glGetVertexAttribPointerv:             getProcAddr("glGetVertexAttribPointerv"),
		glGetVertexAttribdv:                   getProcAddr("glGetVertexAttribdv"),
		glGetVertexAttribfv:                   getProcAddr("glGetVertexAttribfv"),
		glGetVertexAttribiv:                   getProcAddr("glGetVertexAttribiv"),
		glHint:                                getProcAddr("glHint"),
		glIndexMask:                           getProcAddr("glIndexMask"),
		glIndexPointer:                        getProcAddr("glIndexPointer"),
		glIndexd:                              getProcAddr("glIndexd"),
		glIndexdv:                             getProcAddr("glIndexdv"),
		glIndexf:                              getProcAddr("glIndexf"),
		glIndexfv:                             getProcAddr("glIndexfv"),
		glIndexi:                              getProcAddr("glIndexi"),
		glIndexiv:                             getProcAddr("glIndexiv"),
		glIndexs:                              getProcAddr("glIndexs"),
		glIndexsv:                             getProcAddr("glIndexsv"),
		glIndexub:                             getProcAddr("glIndexub"),
		glIndexubv:                            getProcAddr("glIndexubv"),
		glInitNames:                           getProcAddr("glInitNames"),
		glInterleavedArrays:                   getProcAddr("glInterleavedArrays"),
		glIsBuffer:                            getProcAddr("glIsBuffer"),
		glIsEnabled:                           getProcAddr("glIsEnabled"),
		glIsEnabledi:                          getProcAddr("glIsEnabledi"),
		glIsFramebuffer:                       getProcAddr("glIsFramebuffer"),
		glIsList:                              getProcAddr("glIsList"),
		glIsProgram:                           getProcAddr("glIsProgram"),
		glIsQuery:                             getProcAddr("glIsQuery"),
		glIsRenderbuffer:                      getProcAddr("glIsRenderbuffer"),
		glIsShader:                            getProcAddr("glIsShader"),
		glIsTexture:                           getProcAddr("glIsTexture"),
		glIsVertexArray:                       getProcAddr("glIsVertexArray"),
		glLightModelf:                         getProcAddr("glLightModelf"),
		glLightModelfv:                        getProcAddr("glLightModelfv"),
		glLightModeli:                         getProcAddr("glLightModeli"),
		glLightModeliv:                        getProcAddr("glLightModeliv"),
		glLightf:                              getProcAddr("glLightf"),
		glLightfv:                             getProcAddr("glLightfv"),
		glLighti:                              getProcAddr("glLighti"),
		glLightiv:                             getProcAddr("glLightiv"),
		glLineStipple:                         getProcAddr("glLineStipple"),
		glLineWidth:                           getProcAddr("glLineWidth"),
		glLinkProgram:                         getProcAddr("glLinkProgram"),
		glListBase:                            getProcAddr("glListBase"),
		glLoadIdentity:                        getProcAddr("glLoadIdentity"),
		glLoadMatrixd:                         getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:                         getProcAddr("glLoadMatrixf"),
		glLoadName:                            getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:                getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:                getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                             getProcAddr("glLogicOp"),
		glMap1d:                               getProcAddr("glMap1d"),
		glMap1f:                               getProcAddr("glMap1f"),
		glMap2d:                               getProcAddr("glMap2d"),
		glMap2f:                               getProcAddr("glMap2f"),
		glMapBuffer:                           getProcAddr("glMapBuffer"),
		glMapBufferRange:                      getProcAddr("glMapBufferRange"),
		glMapGrid1d:                           getProcAddr("glMapGrid1d"),
		glMapGrid1f:                           getProcAddr("glMapGrid1f"),
		glMapGrid2d:                           getProcAddr("glMapGrid2d"),
		glMapGrid2f:                           getProcAddr("glMapGrid2f"),
		glMaterialf:                           getProcAddr("glMaterialf"),
		glMaterialfv:                          getProcAddr("glMaterialfv"),
		glMateriali:                           getProcAddr("glMateriali"),
		glMaterialiv:                          getProcAddr("glMaterialiv"),
		glMatrixMode:                          getProcAddr("glMatrixMode"),
		glMultMatrixd:                         getProcAddr("glMultMatrixd"),
		glMultMatrixf:                         getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:                getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:                getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:                     getProcAddr("glMultiDrawArrays"),
		glMultiDrawElements:                   getProcAddr("glMultiDrawElements"),
		glMultiTexCoord1d:                     getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:                    getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:                     getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:                    getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:                     getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:                    getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:                     getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:                    getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:                     getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:                    getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:                     getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:                    getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:                     getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:                    getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:                     getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:                    getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:                     getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:                    getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:                     getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:                    getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:                     getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:                    getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:                     getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:                    getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:                     getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:                    getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:                     getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:                    getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:                     getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:                    getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:                     getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:                    getProcAddr("glMultiTexCoord4sv"),
		glNewList:                             getProcAddr("glNewList"),
		glNormal3b:                            getProcAddr("glNormal3b"),
		glNormal3bv:                           getProcAddr("glNormal3bv"),
		glNormal3d:                            getProcAddr("glNormal3d"),
		glNormal3dv:                           getProcAddr("glNormal3dv"),
		glNormal3f:                            getProcAddr("glNormal3f"),
		glNormal3fv:                           getProcAddr("glNormal3fv"),
		glNormal3i:                            getProcAddr("glNormal3i"),
		glNormal3iv:                           getProcAddr("glNormal3iv"),
		glNormal3s:                            getProcAddr("glNormal3s"),
		glNormal3sv:                           getProcAddr("glNormal3sv"),
		glNormalPointer:                       getProcAddr("glNormalPointer"),
		glOrtho:                               getProcAddr("glOrtho"),
		glPassThrough:                         getProcAddr("glPassThrough"),
		glPixelMapfv:                          getProcAddr("glPixelMapfv"),
		glPixelMapuiv:                         getProcAddr("glPixelMapuiv"),
		glPixelMapusv:                         getProcAddr("glPixelMapusv"),
		glPixelStoref:                         getProcAddr("glPixelStoref"),
		glPixelStorei:                         getProcAddr("glPixelStorei"),
		glPixelTransferf:                      getProcAddr("glPixelTransferf"),
		glPixelTransferi:                      getProcAddr("glPixelTransferi"),
		glPixelZoom:                           getProcAddr("glPixelZoom"),
		glPointParameterf:                     getProcAddr("glPointParameterf"),
		glPointParameterfv:                    getProcAddr("glPointParameterfv"),
		glPointParameteri:                     getProcAddr("glPointParameteri"),
		glPointParameteriv:                    getProcAddr("glPointParameteriv"),
		glPointSize:                           getProcAddr("glPointSize"),
		glPolygonMode:                         getProcAddr("glPolygonMode"),
		glPolygonOffset:                       getProcAddr("glPolygonOffset"),
		glPolygonStipple:                      getProcAddr("glPolygonStipple"),
		glPopAttrib:                           getProcAddr("glPopAttrib"),
		glPopClientAttrib:                     getProcAddr("glPopClientAttrib"),
		glPopMatrix:                           getProcAddr("glPopMatrix"),
		glPopName:                             getProcAddr("glPopName"),
		glPrioritizeTextures:                  getProcAddr("glPrioritizeTextures"),
		glPushAttrib:                          getProcAddr("glPushAttrib"),
		glPushClientAttrib:                    getProcAddr("glPushClientAttrib"),
		glPushMatrix:                          getProcAddr("glPushMatrix"),
		glPushName:                            getProcAddr("glPushName"),
		glRasterPos2d:                         getProcAddr("glRasterPos2d"),
		glRasterPos2dv:                        getProcAddr("glRasterPos2dv"),
		glRasterPos2f:                         getProcAddr("glRasterPos2f"),
		glRasterPos2fv:                        getProcAddr("glRasterPos2fv"),
		glRasterPos2i:                         getProcAddr("glRasterPos2i"),
		glRasterPos2iv:                        getProcAddr("glRasterPos2iv"),
		glRasterPos2s:                         getProcAddr("glRasterPos2s"),
		glRasterPos2sv:                        getProcAddr("glRasterPos2sv"),
		glRasterPos3d:                         getProcAddr("glRasterPos3d"),
		glRasterPos3dv:                        getProcAddr("glRasterPos3dv"),
		glRasterPos3f:                         getProcAddr("glRasterPos3f"),
		glRasterPos3fv:                        getProcAddr("glRasterPos3fv"),
		glRasterPos3i:                         getProcAddr("glRasterPos3i"),
		glRasterPos3iv:                        getProcAddr("glRasterPos3iv"),
		glRasterPos3s:                         getProcAddr("glRasterPos3s"),
		glRasterPos3sv:                        getProcAddr("glRasterPos3sv"),
		glRasterPos4d:                         getProcAddr("glRasterPos4d"),
		glRasterPos4dv:                        getProcAddr("glRasterPos4dv"),
		glRasterPos4f:                         getProcAddr("glRasterPos4f"),
		glRasterPos4fv:                        getProcAddr("glRasterPos4fv"),
		glRasterPos4i:                         getProcAddr("glRasterPos4i"),
		glRasterPos4iv:                        getProcAddr("glRasterPos4iv"),
		glRasterPos4s:                         getProcAddr("glRasterPos4s"),
		glRasterPos4sv:                        getProcAddr("glRasterPos4sv"),
		glReadBuffer:                          getProcAddr("glReadBuffer"),
		glReadPixels:                          getProcAddr("glReadPixels"),
		glRectd:                               getProcAddr("glRectd"),
		glRectdv:                              getProcAddr("glRectdv"),
		glRectf:                               getProcAddr("glRectf"),
		glRectfv:                              getProcAddr("glRectfv"),
		glRecti:                               getProcAddr("glRecti"),
		glRectiv:                              getProcAddr("glRectiv"),
		glRects:                               getProcAddr("glRects"),
		glRectsv:                              getProcAddr("glRectsv"),
		glRenderMode:                          getProcAddr("glRenderMode"),
		glRenderbufferStorage:                 getProcAddr("glRenderbufferStorage"),
		glRenderbufferStorageMultisample:      getProcAddr("glRenderbufferStorageMultisample"),
		glRotated:                             getProcAddr("glRotated"),
		glRotatef:                             getProcAddr("glRotatef"),
		glSampleCoverage:                      getProcAddr("glSampleCoverage"),
		glScaled:                              getProcAddr("glScaled"),
		glScalef:                              getProcAddr("glScalef"),
		glScissor:                             getProcAddr("glScissor"),
		glSecondaryColor3b:                    getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:                   getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:                    getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:                   getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:                    getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:                   getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:                    getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:                   getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:                    getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:                   getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:                   getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:                  getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:                   getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:                  getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:                   getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:                  getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorPointer:               getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:                        getProcAddr("glSelectBuffer"),
		glShadeModel:                          getProcAddr("glShadeModel"),
		glShaderSource:                        getProcAddr("glShaderSource"),
		glStencilFunc:                         getProcAddr("glStencilFunc"),
		glStencilFuncSeparate:                 getProcAddr("glStencilFuncSeparate"),
		glStencilMask:                         getProcAddr("glStencilMask"),
		glStencilMaskSeparate:                 getProcAddr("glStencilMaskSeparate"),
		glStencilOp:                           getProcAddr("glStencilOp"),
		glStencilOpSeparate:                   getProcAddr("glStencilOpSeparate"),
		glTexCoord1d:                          getProcAddr("glTexCoord1d"),
		glTexCoord1dv:                         getProcAddr("glTexCoord1dv"),
		glTexCoord1f:                          getProcAddr("glTexCoord1f"),
		glTexCoord1fv:                         getProcAddr("glTexCoord1fv"),
		glTexCoord1i:                          getProcAddr("glTexCoord1i"),
		glTexCoord1iv:                         getProcAddr("glTexCoord1iv"),
		glTexCoord1s:                          getProcAddr("glTexCoord1s"),
		glTexCoord1sv:                         getProcAddr("glTexCoord1sv"),
		glTexCoord2d:                          getProcAddr("glTexCoord2d"),
		glTexCoord2dv:                         getProcAddr("glTexCoord2dv"),
		glTexCoord2f:                          getProcAddr("glTexCoord2f"),
		glTexCoord2fv:                         getProcAddr("glTexCoord2fv"),
		glTexCoord2i:                          getProcAddr("glTexCoord2i"),
		glTexCoord2iv:                         getProcAddr("glTexCoord2iv"),
		glTexCoord2s:                          getProcAddr("glTexCoord2s"),
		glTexCoord2sv:                         getProcAddr("glTexCoord2sv"),
		glTexCoord3d:                          getProcAddr("glTexCoord3d"),
		glTexCoord3dv:                         getProcAddr("glTexCoord3dv"),
		glTexCoord3f:                          getProcAddr("glTexCoord3f"),
		glTexCoord3fv:                         getProcAddr("glTexCoord3fv"),
		glTexCoord3i:                          getProcAddr("glTexCoord3i"),
		glTexCoord3iv:                         getProcAddr("glTexCoord3iv"),
		glTexCoord3s:                          getProcAddr("glTexCoord3s"),
		glTexCoord3sv:                         getProcAddr("glTexCoord3sv"),
		glTexCoord4d:                          getProcAddr("glTexCoord4d"),
		glTexCoord4dv:                         getProcAddr("glTexCoord4dv"),
		glTexCoord4f:                          getProcAddr("glTexCoord4f"),
		glTexCoord4fv:                         getProcAddr("glTexCoord4fv"),
		glTexCoord4i:                          getProcAddr("glTexCoord4i"),
		glTexCoord4iv:                         getProcAddr("glTexCoord4iv"),
		glTexCoord4s:                          getProcAddr("glTexCoord4s"),
		glTexCoord4sv:                         getProcAddr("glTexCoord4sv"),
		glTexCoordPointer:                     getProcAddr("glTexCoordPointer"),
		glTexEnvf:                             getProcAddr("glTexEnvf"),
		glTexEnvfv:                            getProcAddr("glTexEnvfv"),
		glTexEnvi:                             getProcAddr("glTexEnvi"),
		glTexEnviv:                            getProcAddr("glTexEnviv"),
		glTexGend:                             getProcAddr("glTexGend"),
		glTexGendv:                            getProcAddr("glTexGendv"),
		glTexGenf:                             getProcAddr("glTexGenf"),
		glTexGenfv:                            getProcAddr("glTexGenfv"),
		glTexGeni:                             getProcAddr("glTexGeni"),
		glTexGeniv:                            getProcAddr("glTexGeniv"),
		glTexImage1D:                          getProcAddr("glTexImage1D"),
		glTexImage2D:                          getProcAddr("glTexImage2D"),
		glTexImage3D:                          getProcAddr("glTexImage3D"),
		glTexParameterIiv:                     getProcAddr("glTexParameterIiv"),
		glTexParameterIuiv:                    getProcAddr("glTexParameterIuiv"),
		glTexParameterf:                       getProcAddr("glTexParameterf"),
		glTexParameterfv:                      getProcAddr("glTexParameterfv"),
		glTexParameteri:                       getProcAddr("glTexParameteri"),
		glTexParameteriv:                      getProcAddr("glTexParameteriv"),
		glTexSubImage1D:                       getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:                       getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:                       getProcAddr("glTexSubImage3D"),
		glTransformFeedbackVaryings:           getProcAddr("glTransformFeedbackVaryings"),
		glTranslated:                          getProcAddr("glTranslated"),
		glTranslatef:                          getProcAddr("glTranslatef"),
		glUniform1f:                           getProcAddr("glUniform1f"),
		glUniform1fv:                          getProcAddr("glUniform1fv"),
		glUniform1i:                           getProcAddr("glUniform1i"),
		glUniform1iv:                          getProcAddr("glUniform1iv"),
		glUniform1ui:                          getProcAddr("glUniform1ui"),
		glUniform1uiv:                         getProcAddr("glUniform1uiv"),
		glUniform2f:                           getProcAddr("glUniform2f"),
		glUniform2fv:                          getProcAddr("glUniform2fv"),
		glUniform2i:                           getProcAddr("glUniform2i"),
		glUniform2iv:                          getProcAddr("glUniform2iv"),
		glUniform2ui:                          getProcAddr("glUniform2ui"),
		glUniform2uiv:                         getProcAddr("glUniform2uiv"),
		glUniform3f:                           getProcAddr("glUniform3f"),
		glUniform3fv:                          getProcAddr("glUniform3fv"),
		glUniform3i:                           getProcAddr("glUniform3i"),
		glUniform3iv:                          getProcAddr("glUniform3iv"),
		glUniform3ui:                          getProcAddr("glUniform3ui"),
		glUniform3uiv:                         getProcAddr("glUniform3uiv"),
		glUniform4f:                           getProcAddr("glUniform4f"),
		glUniform4fv:                          getProcAddr("glUniform4fv"),
		glUniform4i:                           getProcAddr("glUniform4i"),
		glUniform4iv:                          getProcAddr("glUniform4iv"),
		glUniform4ui:                          getProcAddr("glUniform4ui"),
		glUniform4uiv:                         getProcAddr("glUniform4uiv"),
		glUniformMatrix2fv:                    getProcAddr("glUniformMatrix2fv"),
		glUniformMatrix2x3fv:                  getProcAddr("glUniformMatrix2x3fv"),
		glUniformMatrix2x4fv:                  getProcAddr("glUniformMatrix2x4fv"),
		glUniformMatrix3fv:                    getProcAddr("glUniformMatrix3fv"),
		glUniformMatrix3x2fv:                  getProcAddr("glUniformMatrix3x2fv"),
		glUniformMatrix3x4fv:                  getProcAddr("glUniformMatrix3x4fv"),
		glUniformMatrix4fv:                    getProcAddr("glUniformMatrix4fv"),
		glUniformMatrix4x2fv:                  getProcAddr("glUniformMatrix4x2fv"),
		glUniformMatrix4x3fv:                  getProcAddr("glUniformMatrix4x3fv"),
		glUnmapBuffer:                         getProcAddr("glUnmapBuffer"),
		glUseProgram:                          getProcAddr("glUseProgram"),
		glValidateProgram:                     getProcAddr("glValidateProgram"),
		glVertex2d:                            getProcAddr("glVertex2d"),
		glVertex2dv:                           getProcAddr("glVertex2dv"),
		glVertex2f:                            getProcAddr("glVertex2f"),
		glVertex2fv:                           getProcAddr("glVertex2fv"),
		glVertex2i:                            getProcAddr("glVertex2i"),
		glVertex2iv:                           getProcAddr("glVertex2iv"),
		glVertex2s:                            getProcAddr("glVertex2s"),
		glVertex2sv:                           getProcAddr("glVertex2sv"),
		glVertex3d:                            getProcAddr("glVertex3d"),
		glVertex3dv:                           getProcAddr("glVertex3dv"),
		glVertex3f:                            getProcAddr("glVertex3f"),
		glVertex3fv:                           getProcAddr("glVertex3fv"),
		glVertex3i:                            getProcAddr("glVertex3i"),
		glVertex3iv:                           getProcAddr("glVertex3iv"),
		glVertex3s:                            getProcAddr("glVertex3s"),
		glVertex3sv:                           getProcAddr("glVertex3sv"),
		glVertex4d:                            getProcAddr("glVertex4d"),
		glVertex4dv:                           getProcAddr("glVertex4dv"),
		glVertex4f:                            getProcAddr("glVertex4f"),
		glVertex4fv:                           getProcAddr("glVertex4fv"),
		glVertex4i:                            getProcAddr("glVertex4i"),
		glVertex4iv:                           getProcAddr("glVertex4iv"),
		glVertex4s:                            getProcAddr("glVertex4s"),
		glVertex4sv:                           getProcAddr("glVertex4sv"),
		glVertexAttrib1d:                      getProcAddr("glVertexAttrib1d"),
		glVertexAttrib1dv:                     getProcAddr("glVertexAttrib1dv"),
		glVertexAttrib1f:                      getProcAddr("glVertexAttrib1f"),
		glVertexAttrib1fv:                     getProcAddr("glVertexAttrib1fv"),
		glVertexAttrib1s:                      getProcAddr("glVertexAttrib1s"),
		glVertexAttrib1sv:                     getProcAddr("glVertexAttrib1sv"),
		glVertexAttrib2d:                      getProcAddr("glVertexAttrib2d"),
		glVertexAttrib2dv:                     getProcAddr("glVertexAttrib2dv"),
		glVertexAttrib2f:                      getProcAddr("glVertexAttrib2f"),
		glVertexAttrib2fv:                     getProcAddr("glVertexAttrib2fv"),
		glVertexAttrib2s:                      getProcAddr("glVertexAttrib2s"),
		glVertexAttrib2sv:                     getProcAddr("glVertexAttrib2sv"),
		glVertexAttrib3d:                      getProcAddr("glVertexAttrib3d"),
		glVertexAttrib3dv:                     getProcAddr("glVertexAttrib3dv"),
		glVertexAttrib3f:                      getProcAddr("glVertexAttrib3f"),
		glVertexAttrib3fv:                     getProcAddr("glVertexAttrib3fv"),
		glVertexAttrib3s:                      getProcAddr("glVertexAttrib3s"),
		glVertexAttrib3sv:                     getProcAddr("glVertexAttrib3sv"),
		glVertexAttrib4Nbv:                    getProcAddr("glVertexAttrib4Nbv"),
		glVertexAttrib4Niv:                    getProcAddr("glVertexAttrib4Niv"),
		glVertexAttrib4Nsv:                    getProcAddr("glVertexAttrib4Nsv"),
		glVertexAttrib4Nub:                    getProcAddr("glVertexAttrib4Nub"),
		glVertexAttrib4Nubv:                   getProcAddr("glVertexAttrib4Nubv"),
		glVertexAttrib4Nuiv:                   getProcAddr("glVertexAttrib4Nuiv"),
		glVertexAttrib4Nusv:                   getProcAddr("glVertexAttrib4Nusv"),
		glVertexAttrib4bv:                     getProcAddr("glVertexAttrib4bv"),
		glVertexAttrib4d:                      getProcAddr("glVertexAttrib4d"),
		glVertexAttrib4dv:                     getProcAddr("glVertexAttrib4dv"),
		glVertexAttrib4f:                      getProcAddr("glVertexAttrib4f"),
		glVertexAttrib4fv:                     getProcAddr("glVertexAttrib4fv"),
		glVertexAttrib4iv:                     getProcAddr("glVertexAttrib4iv"),
		glVertexAttrib4s:                      getProcAddr("glVertexAttrib4s"),
		glVertexAttrib4sv:                     getProcAddr("glVertexAttrib4sv"),
		glVertexAttrib4ubv:                    getProcAddr("glVertexAttrib4ubv"),
		glVertexAttrib4uiv:                    getProcAddr("glVertexAttrib4uiv"),
		glVertexAttrib4usv:                    getProcAddr("glVertexAttrib4usv"),
		glVertexAttribI1i:                     getProcAddr("glVertexAttribI1i"),
		glVertexAttribI1iv:                    getProcAddr("glVertexAttribI1iv"),
		glVertexAttribI1ui:                    getProcAddr("glVertexAttribI1ui"),
		glVertexAttribI1uiv:                   getProcAddr("glVertexAttribI1uiv"),
		glVertexAttribI2i:                     getProcAddr("glVertexAttribI2i"),
		glVertexAttribI2iv:                    getProcAddr("glVertexAttribI2iv"),
		glVertexAttribI2ui:                    getProcAddr("glVertexAttribI2ui"),
		glVertexAttribI2uiv:                   getProcAddr("glVertexAttribI2uiv"),
		glVertexAttribI3i:                     getProcAddr("glVertexAttribI3i"),
		glVertexAttribI3iv:                    getProcAddr("glVertexAttribI3iv"),
		glVertexAttribI3ui:                    getProcAddr("glVertexAttribI3ui"),
		glVertexAttribI3uiv:                   getProcAddr("glVertexAttribI3uiv"),
		glVertexAttribI4bv:                    getProcAddr("glVertexAttribI4bv"),
		glVertexAttribI4i:                     getProcAddr("glVertexAttribI4i"),
		glVertexAttribI4iv:                    getProcAddr("glVertexAttribI4iv"),
		glVertexAttribI4sv:                    getProcAddr("glVertexAttribI4sv"),
		glVertexAttribI4ubv:                   getProcAddr("glVertexAttribI4ubv"),
		glVertexAttribI4ui:                    getProcAddr("glVertexAttribI4ui"),
		glVertexAttribI4uiv:                   getProcAddr("glVertexAttribI4uiv"),
		glVertexAttribI4usv:                   getProcAddr("glVertexAttribI4usv"),
		glVertexAttribIPointer:                getProcAddr("glVertexAttribIPointer"),
		glVertexAttribPointer:                 getProcAddr("glVertexAttribPointer"),
		glVertexPointer:                       getProcAddr("glVertexPointer"),
		glViewport:                            getProcAddr("glViewport"),
		glWindowPos2d:                         getProcAddr("glWindowPos2d"),
		glWindowPos2dv:                        getProcAddr("glWindowPos2dv"),
		glWindowPos2f:                         getProcAddr("glWindowPos2f"),
		glWindowPos2fv:                        getProcAddr("glWindowPos2fv"),
		glWindowPos2i:                         getProcAddr("glWindowPos2i"),
		glWindowPos2iv:                        getProcAddr("glWindowPos2iv"),
		glWindowPos2s:                         getProcAddr("glWindowPos2s"),
		glWindowPos2sv:                        getProcAddr("glWindowPos2sv"),
		glWindowPos3d:                         getProcAddr("glWindowPos3d"),
		glWindowPos3dv:                        getProcAddr("glWindowPos3dv"),
		glWindowPos3f:                         getProcAddr("glWindowPos3f"),
		glWindowPos3fv:                        getProcAddr("glWindowPos3fv"),
		glWindowPos3i:                         getProcAddr("glWindowPos3i"),
		glWindowPos3iv:                        getProcAddr("glWindowPos3iv"),
		glWindowPos3s:                         getProcAddr("glWindowPos3s"),
		glWindowPos3sv:                        getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL310 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	AttachShader(program uint32, shader uint32)
	Begin(mode uint32)
	BeginConditionalRender(id uint32, mode uint32)
	BeginQuery(target uint32, id uint32)
	BeginTransformFeedback(primitiveMode uint32)
	BindAttribLocation(program uint32, index uint32, name *uint8)
	BindBuffer(target uint32, buffer uint32)
	BindBufferBase(target uint32, index uint32, buffer uint32)
	BindBufferRange(target uint32, index uint32, buffer uint32, offset uintptr, size int)
	BindFragDataLocation(program uint32, color uint32, name *uint8)
	BindFramebuffer(target uint32, framebuffer uint32)
	BindRenderbuffer(target uint32, renderbuffer uint32)
	BindTexture(target uint32, texture uint32)
	BindVertexArray(array uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	CheckFramebufferStatus(target uint32) uint32
	ClampColor(target uint32, clamp uint32)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32)
	ClearBufferfv(buffer uint32, drawbuffer int32, value *float32)
	ClearBufferiv(buffer uint32, drawbuffer int32, value *int32)
	ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClientActiveTexture(texture uint32)
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaski(index uint32, r bool, g bool, b bool, a bool)
	ColorMaterial(face uint32, mode uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompileShader(shader uint32)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset uintptr, writeOffset uintptr, size int)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CreateProgram() uint32
	CreateShader(type_ uint32) uint32
	CullFace(mode uint32)
	DeleteBuffers(n int32, buffers *uint32)
	DeleteFramebuffers(n int32, framebuffers *uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteProgram(program uint32)
	DeleteQueries(n int32, ids *uint32)
	DeleteRenderbuffers(n int32, renderbuffers *uint32)
	DeleteShader(shader uint32)
	DeleteTextures(n int32, textures *uint32)
	DeleteVertexArrays(n int32, arrays *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	DetachShader(program uint32, shader uint32)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DisableVertexAttribArray(index uint32)
	Disablei(target uint32, index uint32)
	DrawArrays(mode uint32, first int32, count int32)
	DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32)
	DrawBuffer(buf uint32)
	DrawBuffers(n int32, bufs *uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawElementsInstanced(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	EnableVertexAttribArray(index uint32)
	Enablei(target uint32, index uint32)
	End()
	EndConditionalRender()
	EndList()
	EndQuery(target uint32)
	EndTransformFeedback()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	Finish()
	Flush()
	FlushMappedBufferRange(target uint32, offset uintptr, length int)
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32)
	FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenBuffers(n int32, buffers *uint32)
	GenFramebuffers(n int32, framebuffers *uint32)
	GenLists(range_ int32) uint32
	GenQueries(n int32, ids *uint32)
	GenRenderbuffers(n int32, renderbuffers *uint32)
	GenTextures(n int32, textures *uint32)
	GenVertexArrays(n int32, arrays *uint32)
	GenerateMipmap(target uint32)
	GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *uint8)
	GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32)
	GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *uint8)
	GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32)
	GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)
	GetAttribLocation(program uint32, name *uint8) int32
	GetBooleani_v(target uint32, index uint32, data *bool)
	GetBooleanv(pname uint32, data *bool)
	GetBufferParameteriv(target uint32, pname uint32, params *int32)
	GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)
	GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloatv(pname uint32, data *float32)
	GetFragDataLocation(program uint32, name *uint8) int32
	GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32)
	GetIntegeri_v(target uint32, index uint32, data *int32)
	GetIntegerv(pname uint32, data *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramiv(program uint32, pname uint32, params *int32)
	GetQueryObjectiv(id uint32, pname uint32, params *int32)
	GetQueryObjectuiv(id uint32, pname uint32, params *uint32)
	GetQueryiv(target uint32, pname uint32, params *int32)
	GetRenderbufferParameteriv(target uint32, pname uint32, params *int32)
	GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8)
	GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8)
	GetShaderiv(shader uint32, pname uint32, params *int32)
	GetString(name uint32) *uint8
	GetStringi(name uint32, index uint32) *uint8
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterIiv(target uint32, pname uint32, params *int32)
	GetTexParameterIuiv(target uint32, pname uint32, params *uint32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetUniformBlockIndex(program uint32, uniformBlockName *uint8) uint32
	GetUniformIndices(program uint32, uniformCount int32, uniformNames **uint8, uniformIndices *uint32)
	GetUniformLocation(program uint32, name *uint8) int32
	GetUniformfv(program uint32, location int32, params *float32)
	GetUniformiv(program uint32, location int32, params *int32)
	GetUniformuiv(program uint32, location int32, params *uint32)
	GetVertexAttribIiv(index uint32, pname uint32, params *int32)
	GetVertexAttribIuiv(index uint32, pname uint32, params *uint32)
	GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)
	GetVertexAttribdv(index uint32, pname uint32, params *float64)
	GetVertexAttribfv(index uint32, pname uint32, params *float32)
	GetVertexAttribiv(index uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	IsBuffer(buffer uint32) bool
	IsEnabled(cap uint32) bool
	IsEnabledi(target uint32, index uint32) bool
	IsFramebuffer(framebuffer uint32) bool
	IsList(list uint32) bool
	IsProgram(program uint32) bool
	IsQuery(id uint32) bool
	IsRenderbuffer(renderbuffer uint32) bool
	IsShader(shader uint32) bool
	IsTexture(texture uint32) bool
	IsVertexArray(array uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	LinkProgram(program uint32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapBuffer(target uint32, access uint32) unsafe.Pointer
	MapBufferRange(target uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopMatrix()
	PopName()
	PrimitiveRestartIndex(index uint32)
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	RenderMode(mode uint32) int32
	RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32)
	RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32)
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	ShaderSource(shader uint32, count int32, string **uint8, length *int32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilMaskSeparate(face uint32, mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)
	TexBuffer(target uint32, internalformat uint32, buffer uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexParameterIiv(target uint32, pname uint32, params *int32)
	TexParameterIuiv(target uint32, pname uint32, params *uint32)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TransformFeedbackVaryings(program uint32, count int32, varyings **uint8, bufferMode uint32)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Uniform1f(location int32, v0 float32)
	Uniform1fv(location int32, count int32, value *float32)
	Uniform1i(location int32, v0 int32)
	Uniform1iv(location int32, count int32, value *int32)
	Uniform1ui(location int32, v0 uint32)
	Uniform1uiv(location int32, count int32, value *uint32)
	Uniform2f(location int32, v0 float32, v1 float32)
	Uniform2fv(location int32, count int32, value *float32)
	Uniform2i(location int32, v0 int32, v1 int32)
	Uniform2iv(location int32, count int32, value *int32)
	Uniform2ui(location int32, v0 uint32, v1 uint32)
	Uniform2uiv(location int32, count int32, value *uint32)
	Uniform3f(location int32, v0 float32, v1 float32, v2 float32)
	Uniform3fv(location int32, count int32, value *float32)
	Uniform3i(location int32, v0 int32, v1 int32, v2 int32)
	Uniform3iv(location int32, count int32, value *int32)
	Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)
	Uniform3uiv(location int32, count int32, value *uint32)
	Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	Uniform4fv(location int32, count int32, value *float32)
	Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	Uniform4iv(location int32, count int32, value *int32)
	Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	Uniform4uiv(location int32, count int32, value *uint32)
	UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)
	UniformMatrix2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32)
	UnmapBuffer(target uint32) bool
	UseProgram(program uint32)
	ValidateProgram(program uint32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexAttrib1d(index uint32, x float64)
	VertexAttrib1dv(index uint32, v *float64)
	VertexAttrib1f(index uint32, x float32)
	VertexAttrib1fv(index uint32, v *float32)
	VertexAttrib1s(index uint32, x int16)
	VertexAttrib1sv(index uint32, v *int16)
	VertexAttrib2d(index uint32, x float64, y float64)
	VertexAttrib2dv(index uint32, v *float64)
	VertexAttrib2f(index uint32, x float32, y float32)
	VertexAttrib2fv(index uint32, v *float32)
	VertexAttrib2s(index uint32, x int16, y int16)
	VertexAttrib2sv(index uint32, v *int16)
	VertexAttrib3d(index uint32, x float64, y float64, z float64)
	VertexAttrib3dv(index uint32, v *float64)
	VertexAttrib3f(index uint32, x float32, y float32, z float32)
	VertexAttrib3fv(index uint32, v *float32)
	VertexAttrib3s(index uint32, x int16, y int16, z int16)
	VertexAttrib3sv(index uint32, v *int16)
	VertexAttrib4Nbv(index uint32, v *int8)
	VertexAttrib4Niv(index uint32, v *int32)
	VertexAttrib4Nsv(index uint32, v *int16)
	VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4Nubv(index uint32, v *uint8)
	VertexAttrib4Nuiv(index uint32, v *uint32)
	VertexAttrib4Nusv(index uint32, v *uint16)
	VertexAttrib4bv(index uint32, v *int8)
	VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dv(index uint32, v *float64)
	VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fv(index uint32, v *float32)
	VertexAttrib4iv(index uint32, v *int32)
	VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4sv(index uint32, v *int16)
	VertexAttrib4ubv(index uint32, v *uint8)
	VertexAttrib4uiv(index uint32, v *uint32)
	VertexAttrib4usv(index uint32, v *uint16)
	VertexAttribI1i(index uint32, x int32)
	VertexAttribI1iv(index uint32, v *int32)
	VertexAttribI1ui(index uint32, x uint32)
	VertexAttribI1uiv(index uint32, v *uint32)
	VertexAttribI2i(index uint32, x int32, y int32)
	VertexAttribI2iv(index uint32, v *int32)
	VertexAttribI2ui(index uint32, x uint32, y uint32)
	VertexAttribI2uiv(index uint32, v *uint32)
	VertexAttribI3i(index uint32, x int32, y int32, z int32)
	VertexAttribI3iv(index uint32, v *int32)
	VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32)
	VertexAttribI3uiv(index uint32, v *uint32)
	VertexAttribI4bv(index uint32, v *int8)
	VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)
	VertexAttribI4iv(index uint32, v *int32)
	VertexAttribI4sv(index uint32, v *int16)
	VertexAttribI4ubv(index uint32, v *uint8)
	VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)
	VertexAttribI4uiv(index uint32, v *uint32)
	VertexAttribI4usv(index uint32, v *uint16)
	VertexAttribIPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribPointer(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New310(getProcAddr func(name string) unsafe.Pointer) GL310 {
	gl := &lib{
		glAccum:                               getProcAddr("glAccum"),
		glActiveTexture:                       getProcAddr("glActiveTexture"),
		glAlphaFunc:                           getProcAddr("glAlphaFunc"),
		glAreTexturesResident:                 getProcAddr("glAreTexturesResident"),
		glArrayElement:                        getProcAddr("glArrayElement"),
		glAttachShader:                        getProcAddr("glAttachShader"),
		glBegin:                               getProcAddr("glBegin"),
		glBeginConditionalRender:              getProcAddr("glBeginConditionalRender"),
		glBeginQuery:                          getProcAddr("glBeginQuery"),
		glBeginTransformFeedback:              getProcAddr("glBeginTransformFeedback"),
		glBindAttribLocation:                  getProcAddr("glBindAttribLocation"),
		glBindBuffer:                          getProcAddr("glBindBuffer"),
		glBindBufferBase:                      getProcAddr("glBindBufferBase"),
		glBindBufferRange:                     getProcAddr("glBindBufferRange"),
		glBindFragDataLocation:                getProcAddr("glBindFragDataLocation"),
		glBindFramebuffer:                     getProcAddr("glBindFramebuffer"),
		glBindRenderbuffer:                    getProcAddr("glBindRenderbuffer"),
		glBindTexture:                         getProcAddr("glBindTexture"),
		glBindVertexArray:                     getProcAddr("glBindVertexArray"),
		glBitmap:                              getProcAddr("glBitmap"),
		glBlendColor:                          getProcAddr("glBlendColor"),
		glBlendEquation:                       getProcAddr("glBlendEquation"),
		glBlendEquationSeparate:               getProcAddr("glBlendEquationSeparate"),
		glBlendFunc:                           getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:                   getProcAddr("glBlendFuncSeparate"),
		glBlitFramebuffer:                     getProcAddr("glBlitFramebuffer"),
		glBufferData:                          getProcAddr("glBufferData"),
		glBufferSubData:                       getProcAddr("glBufferSubData"),
		glCallList:                            getProcAddr("glCallList"),
		glCallLists:                           getProcAddr("glCallLists"),
		glCheckFramebufferStatus:              getProcAddr("glCheckFramebufferStatus"),
		glClampColor:                          getProcAddr("glClampColor"),
		glClear:                               getProcAddr("glClear"),
		glClearAccum:                          getProcAddr("glClearAccum"),
		glClearBufferfi:                       getProcAddr("glClearBufferfi"),
		glClearBufferfv:                       getProcAddr("glClearBufferfv"),
		glClearBufferiv:                       getProcAddr("glClearBufferiv"),
		glClearBufferuiv:                      getProcAddr("glClearBufferuiv"),
		glClearColor:                          getProcAddr("glClearColor"),
		glClearDepth:                          getProcAddr("glClearDepth"),
		glClearIndex:                          getProcAddr("glClearIndex"),
		glClearStencil:                        getProcAddr("glClearStencil"),
		glClientActiveTexture:                 getProcAddr("glClientActiveTexture"),
		glClipPlane:                           getProcAddr("glClipPlane"),
		glColor3b:                             getProcAddr("glColor3b"),
		glColor3bv:                            getProcAddr("glColor3bv"),
		glColor3d:                             getProcAddr("glColor3d"),
		glColor3dv:                            getProcAddr("glColor3dv"),
		glColor3f:                             getProcAddr("glColor3f"),
		glColor3fv:                            getProcAddr("glColor3fv"),
		glColor3i:                             getProcAddr("glColor3i"),
		glColor3iv:                            getProcAddr("glColor3iv"),
		glColor3s:                             getProcAddr("glColor3s"),
		glColor3sv:                            getProcAddr("glColor3sv"),
		glColor3ub:                            getProcAddr("glColor3ub"),
		glColor3ubv:                           getProcAddr("glColor3ubv"),
		glColor3ui:                            getProcAddr("glColor3ui"),
		glColor3uiv:                           getProcAddr("glColor3uiv"),
		glColor3us:                            getProcAddr("glColor3us"),
		glColor3usv:                           getProcAddr("glColor3usv"),
		glColor4b:                             getProcAddr("glColor4b"),
		glColor4bv:                            getProcAddr("glColor4bv"),
		glColor4d:                             getProcAddr("glColor4d"),
		glColor4dv:                            getProcAddr("glColor4dv"),
		glColor4f:                             getProcAddr("glColor4f"),
		glColor4fv:                            getProcAddr("glColor4fv"),
		glColor4i:                             getProcAddr("glColor4i"),
		glColor4iv:                            getProcAddr("glColor4iv"),
		glColor4s:                             getProcAddr("glColor4s"),
		glColor4sv:                            getProcAddr("glColor4sv"),
		glColor4ub:                            getProcAddr("glColor4ub"),
		glColor4ubv:                           getProcAddr("glColor4ubv"),
		glColor4ui:                            getProcAddr("glColor4ui"),
		glColor4uiv:                           getProcAddr("glColor4uiv"),
		glColor4us:                            getProcAddr("glColor4us"),
		glColor4usv:                           getProcAddr("glColor4usv"),
		glColorMask:                           getProcAddr("glColorMask"),
		glColorMaski:                          getProcAddr("glColorMaski"),
		glColorMaterial:                       getProcAddr("glColorMaterial"),
		glColorPointer:                        getProcAddr("glColorPointer"),
		glCompileShader:                       getProcAddr("glCompileShader"),
		glCompressedTexImage1D:                getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:                getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:                getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D:             getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D:             getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D:             getProcAddr("glCompressedTexSubImage3D"),
		glCopyBufferSubData:                   getProcAddr("glCopyBufferSubData"),
		glCopyPixels:                          getProcAddr("glCopyPixels"),
		glCopyTexImage1D:                      getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:                      getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:                   getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:                   getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:                   getProcAddr("glCopyTexSubImage3D"),
		glCreateProgram:                       getProcAddr("glCreateProgram"),
		glCreateShader:                        getProcAddr("glCreateShader"),
		glCullFace:                            getProcAddr("glCullFace"),
		glDeleteBuffers:                       getProcAddr("glDeleteBuffers"),
		glDeleteFramebuffers:                  getProcAddr("glDeleteFramebuffers"),
		glDeleteLists:                         getProcAddr("glDeleteLists"),
		glDeleteProgram:                       getProcAddr("glDeleteProgram"),
		glDeleteQueries:                       getProcAddr("glDeleteQueries"),
		glDeleteRenderbuffers:                 getProcAddr("glDeleteRenderbuffers"),
		glDeleteShader:                        getProcAddr("glDeleteShader"),
		glDeleteTextures:                      getProcAddr("glDeleteTextures"),
		glDeleteVertexArrays:                  getProcAddr("glDeleteVertexArrays"),
		glDepthFunc:                           getProcAddr("glDepthFunc"),
		glDepthMask:                           getProcAddr("glDepthMask"),
		glDepthRange:                          getProcAddr("glDepthRange"),
		glDetachShader:                        getProcAddr("glDetachShader"),
		glDisable:                             getProcAddr("glDisable"),
		glDisableClientState:                  getProcAddr("glDisableClientState"),
		glDisableVertexAttribArray:            getProcAddr("glDisableVertexAttribArray"),
		glDisablei:                            getProcAddr("glDisablei"),
		glDrawArrays:                          getProcAddr("glDrawArrays"),
		glDrawArraysInstanced:                 getProcAddr("glDrawArraysInstanced"),
		glDrawBuffer:                          getProcAddr("glDrawBuffer"),
		glDrawBuffers:                         getProcAddr("glDrawBuffers"),
		glDrawElements:                        getProcAddr("glDrawElements"),
		glDrawElementsInstanced:               getProcAddr("glDrawElementsInstanced"),
		glDrawPixels:                          getProcAddr("glDrawPixels"),
		glDrawRangeElements:                   getProcAddr("glDrawRangeElements"),
		glEdgeFlag:                            getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:                     getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:                           getProcAddr("glEdgeFlagv"),
		glEnable:                              getProcAddr("glEnable"),
		glEnableClientState:                   getProcAddr("glEnableClientState"),
		glEnableVertexAttribArray:             getProcAddr("glEnableVertexAttribArray"),
		glEnablei:                             getProcAddr("glEnablei"),
		glEnd:                                 getProcAddr("glEnd"),
		glEndConditionalRender:                getProcAddr("glEndConditionalRender"),
		glEndList:                             getProcAddr("glEndList"),
		glEndQuery:                            getProcAddr("glEndQuery"),
		glEndTransformFeedback:                getProcAddr("glEndTransformFeedback"),
		glEvalCoord1d:                         getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:                        getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:                         getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:                        getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:                         getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:                        getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:                         getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:                        getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:                           getProcAddr("glEvalMesh1"),
		glEvalMesh2:                           getProcAddr("glEvalMesh2"),
		glEvalPoint1:                          getProcAddr("glEvalPoint1"),
		glEvalPoint2:                          getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:                      getProcAddr("glFeedbackBuffer"),
		glFinish:                              getProcAddr("glFinish"),
		glFlush:                               getProcAddr("glFlush"),
		glFlushMappedBufferRange:              getProcAddr("glFlushMappedBufferRange"),
		glFogCoordPointer:                     getProcAddr("glFogCoordPointer"),
		glFogCoordd:                           getProcAddr("glFogCoordd"),
		glFogCoorddv:                          getProcAddr("glFogCoorddv"),
		glFogCoordf:                           getProcAddr("glFogCoordf"),
		glFogCoordfv:                          getProcAddr("glFogCoordfv"),
		glFogf:                                getProcAddr("glFogf"),
		glFogfv:                               getProcAddr("glFogfv"),
		glFogi:                                getProcAddr("glFogi"),
		glFogiv:                               getProcAddr("glFogiv"),
		glFramebufferRenderbuffer:             getProcAddr("glFramebufferRenderbuffer"),
		glFramebufferTexture1D:                getProcAddr("glFramebufferTexture1D"),
		glFramebufferTexture2D:                getProcAddr("glFramebufferTexture2D"),
		glFramebufferTexture3D:                getProcAddr("glFramebufferTexture3D"),
		glFramebufferTextureLayer:             getProcAddr("glFramebufferTextureLayer"),
		glFrontFace:                           getProcAddr("glFrontFace"),
		glFrustum:                             getProcAddr("glFrustum"),
		glGenBuffers:                          getProcAddr("glGenBuffers"),
		glGenFramebuffers:                     getProcAddr("glGenFramebuffers"),
		glGenLists:                            getProcAddr("glGenLists"),
		glGenQueries:                          getProcAddr("glGenQueries"),
		glGenRenderbuffers:                    getProcAddr("glGenRenderbuffers"),
		glGenTextures:                         getProcAddr("glGenTextures"),
		glGenVertexArrays:                     getProcAddr("glGenVertexArrays"),
		glGenerateMipmap:                      getProcAddr("glGenerateMipmap"),
		glGetActiveAttrib:                     getProcAddr("glGetActiveAttrib"),
		glGetActiveUniform:                    getProcAddr("glGetActiveUniform"),
		glGetActiveUniformBlockName:           getProcAddr("glGetActiveUniformBlockName"),
		glGetActiveUniformBlockiv:             getProcAddr("glGetActiveUniformBlockiv"),
		glGetActiveUniformName:                getProcAddr("glGetActiveUniformName"),
		glGetActiveUniformsiv:                 getProcAddr("glGetActiveUniformsiv"),
		glGetAttachedShaders:                  getProcAddr("glGetAttachedShaders"),
		glGetAttribLocation:                   getProcAddr("glGetAttribLocation"),
		glGetBooleani_v:                       getProcAddr("glGetBooleani_v"),
		glGetBooleanv:                         getProcAddr("glGetBooleanv"),
		glGetBufferParameteriv:                getProcAddr("glGetBufferParameteriv"),
		glGetBufferPointerv:                   getProcAddr("glGetBufferPointerv"),
		glGetBufferSubData:                    getProcAddr("glGetBufferSubData"),
		glGetClipPlane:                        getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:               getProcAddr("glGetCompressedTexImage"),
		glGetDoublev:                          getProcAddr("glGetDoublev"),
		glGetError:                            getProcAddr("glGetError"),
		glGetFloatv:                           getProcAddr("glGetFloatv"),
		glGetFragDataLocation:                 getProcAddr("glGetFragDataLocation"),
		glGetFramebufferAttachmentParameteriv: getProcAddr("glGetFramebufferAttachmentParameteriv"),
		glGetIntegeri_v:                       getProcAddr("glGetIntegeri_v"),
		glGetIntegerv:                         getProcAddr("glGetIntegerv"),
		glGetLightfv:                          getProcAddr("glGetLightfv"),
		glGetLightiv:                          getProcAddr("glGetLightiv"),
		glGetMapdv:                            getProcAddr("glGetMapdv"),
		glGetMapfv:                            getProcAddr("glGetMapfv"),
		glGetMapiv:                            getProcAddr("glGetMapiv"),
		glGetMaterialfv:                       getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:                       getProcAddr("glGetMaterialiv"),
		glGetPixelMapfv:                       getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:                      getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:                      getProcAddr("glGetPixelMapusv"),
		glGetPointerv:                         getProcAddr("glGetPointerv"),
		glGetPolygonStipple:                   getProcAddr("glGetPolygonStipple"),
		glGetProgramInfoLog:                   getProcAddr("glGetProgramInfoLog"),
		glGetProgramiv:                        getProcAddr("glGetProgramiv"),
		glGetQueryObjectiv:                    getProcAddr("glGetQueryObjectiv"),
		glGetQueryObjectuiv:                   getProcAddr("glGetQueryObjectuiv"),
		glGetQueryiv:                          getProcAddr("glGetQueryiv"),
		glGetRenderbufferParameteriv:          getProcAddr("glGetRenderbufferParameteriv"),
		glGetShaderInfoLog:                    getProcAddr("glGetShaderInfoLog"),
		glGetShaderSource:                     getProcAddr("glGetShaderSource"),
		glGetShaderiv:                         getProcAddr("glGetShaderiv"),
		glGetString:                           getProcAddr("glGetString"),
		glGetStringi:                          getProcAddr("glGetStringi"),
		glGetTexEnvfv:                         getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:                         getProcAddr("glGetTexEnviv"),
		glGetTexGendv:                         getProcAddr("glGetTexGendv"),
		glGetTexGenfv:                         getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:                         getProcAddr("glGetTexGeniv"),
		glGetTexImage:                         getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:              getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:              getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterIiv:                  getProcAddr("glGetTexParameterIiv"),
		glGetTexParameterIuiv:                 getProcAddr("glGetTexParameterIuiv"),
		glGetTexParameterfv:                   getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:                   getProcAddr("glGetTexParameteriv"),
		glGetTransformFeedbackVarying:         getProcAddr("glGetTransformFeedbackVarying"),
		glGetUniformBlockIndex:                getProcAddr("glGetUniformBlockIndex"),
		glGetUniformIndices:                   getProcAddr("glGetUniformIndices"),
		glGetUniformLocation:                  getProcAddr("glGetUniformLocation"),
		glGetUniformfv:                        getProcAddr("glGetUniformfv"),
		glGetUniformiv:                        getProcAddr("glGetUniformiv"),
		glGetUniformuiv:                       getProcAddr("glGetUniformuiv"),
		glGetVertexAttribIiv:                  getProcAddr("glGetVertexAttribIiv"),
		glGetVertexAttribIuiv:                 getProcAddr("glGetVertexAttribIuiv"),
		glGetVertexAttribPointerv:             getProcAddr("glGetVertexAttribPointerv"),
		glGetVertexAttribdv:                   getProcAddr("glGetVertexAttribdv"),
		glGetVertexAttribfv:                   getProcAddr("glGetVertexAttribfv"),
		glGetVertexAttribiv:                   getProcAddr("glGetVertexAttribiv"),
		glHint:                                getProcAddr("glHint"),
		glIndexMask:                           getProcAddr("glIndexMask"),
		glIndexPointer:                        getProcAddr("glIndexPointer"),
		glIndexd:                              getProcAddr("glIndexd"),
		glIndexdv:                             getProcAddr("glIndexdv"),
		glIndexf:                              getProcAddr("glIndexf"),
		glIndexfv:                             getProcAddr("glIndexfv"),
		glIndexi:                              getProcAddr("glIndexi"),
		glIndexiv:                             getProcAddr("glIndexiv"),
		glIndexs:                              getProcAddr("glIndexs"),
		glIndexsv:                             getProcAddr("glIndexsv"),
		glIndexub:                             getProcAddr("glIndexub"),
		glIndexubv:                            getProcAddr("glIndexubv"),
		glInitNames:                           getProcAddr("glInitNames"),
		glInterleavedArrays:                   getProcAddr("glInterleavedArrays"),
		glIsBuffer:                            getProcAddr("glIsBuffer"),
		glIsEnabled:                           getProcAddr("glIsEnabled"),
		glIsEnabledi:                          getProcAddr("glIsEnabledi"),
		glIsFramebuffer:                       getProcAddr("glIsFramebuffer"),
		glIsList:                              getProcAddr("glIsList"),
		glIsProgram:                           getProcAddr("glIsProgram"),
		glIsQuery:                             getProcAddr("glIsQuery"),
		glIsRenderbuffer:                      getProcAddr("glIsRenderbuffer"),
		glIsShader:                            getProcAddr("glIsShader"),
		glIsTexture:                           getProcAddr("glIsTexture"),
		glIsVertexArray:                       getProcAddr("glIsVertexArray"),
		glLightModelf:                         getProcAddr("glLightModelf"),
		glLightModelfv:                        getProcAddr("glLightModelfv"),
		glLightModeli:                         getProcAddr("glLightModeli"),
		glLightModeliv:                        getProcAddr("glLightModeliv"),
		glLightf:                              getProcAddr("glLightf"),
		glLightfv:                             getProcAddr("glLightfv"),
		glLighti:                              getProcAddr("glLighti"),
		glLightiv:                             getProcAddr("glLightiv"),
		glLineStipple:                         getProcAddr("glLineStipple"),
		glLineWidth:                           getProcAddr("glLineWidth"),
		glLinkProgram:                         getProcAddr("glLinkProgram"),
		glListBase:                            getProcAddr("glListBase"),
		glLoadIdentity:                        getProcAddr("glLoadIdentity"),
		glLoadMatrixd:                         getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:                         getProcAddr("glLoadMatrixf"),
		glLoadName:                            getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:                getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:                getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                             getProcAddr("glLogicOp"),
		glMap1d:                               getProcAddr("glMap1d"),
		glMap1f:                               getProcAddr("glMap1f"),
		glMap2d:                               getProcAddr("glMap2d"),
		glMap2f:                               getProcAddr("glMap2f"),
		glMapBuffer:                           getProcAddr("glMapBuffer"),
		glMapBufferRange:                      getProcAddr("glMapBufferRange"),
		glMapGrid1d:                           getProcAddr("glMapGrid1d"),
		glMapGrid1f:                           getProcAddr("glMapGrid1f"),
		glMapGrid2d:                           getProcAddr("glMapGrid2d"),
		glMapGrid2f:                           getProcAddr("glMapGrid2f"),
		glMaterialf:                           getProcAddr("glMaterialf"),
		glMaterialfv:                          getProcAddr("glMaterialfv"),
		glMateriali:                           getProcAddr("glMateriali"),
		glMaterialiv:                          getProcAddr("glMaterialiv"),
		glMatrixMode:                          getProcAddr("glMatrixMode"),
		glMultMatrixd:                         getProcAddr("glMultMatrixd"),
		glMultMatrixf:                         getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:                getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:                getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:                     getProcAddr("glMultiDrawArrays"),
		glMultiDrawElements:                   getProcAddr("glMultiDrawElements"),
		glMultiTexCoord1d:                     getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:                    getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:                     getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:                    getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:                     getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:                    getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:                     getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:                    getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:                     getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:                    getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:                     getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:                    getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:                     getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:                    getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:                     getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:                    getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:                     getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:                    getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:                     getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:                    getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:                     getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:                    getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:                     getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:                    getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:                     getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:                    getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:                     getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:                    getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:                     getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:                    getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:                     getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:                    getProcAddr("glMultiTexCoord4sv"),
		glNewList:                             getProcAddr("glNewList"),
		glNormal3b:                            getProcAddr("glNormal3b"),
		glNormal3bv:                           getProcAddr("glNormal3bv"),
		glNormal3d:                            getProcAddr("glNormal3d"),
		glNormal3dv:                           getProcAddr("glNormal3dv"),
		glNormal3f:                            getProcAddr("glNormal3f"),
		glNormal3fv:                           getProcAddr("glNormal3fv"),
		glNormal3i:                            getProcAddr("glNormal3i"),
		glNormal3iv:                           getProcAddr("glNormal3iv"),
		glNormal3s:                            getProcAddr("glNormal3s"),
		glNormal3sv:                           getProcAddr("glNormal3sv"),
		glNormalPointer:                       getProcAddr("glNormalPointer"),
		glOrtho:                               getProcAddr("glOrtho"),
		glPassThrough:                         getProcAddr("glPassThrough"),
		glPixelMapfv:                          getProcAddr("glPixelMapfv"),
		glPixelMapuiv:                         getProcAddr("glPixelMapuiv"),
		glPixelMapusv:                         getProcAddr("glPixelMapusv"),
		glPixelStoref:                         getProcAddr("glPixelStoref"),
		glPixelStorei:                         getProcAddr("glPixelStorei"),
		glPixelTransferf:                      getProcAddr("glPixelTransferf"),
		glPixelTransferi:                      getProcAddr("glPixelTransferi"),
		glPixelZoom:                           getProcAddr("glPixelZoom"),
		glPointParameterf:                     getProcAddr("glPointParameterf"),
		glPointParameterfv:                    getProcAddr("glPointParameterfv"),
		glPointParameteri:                     getProcAddr("glPointParameteri"),
		glPointParameteriv:                    getProcAddr("glPointParameteriv"),
		glPointSize:                           getProcAddr("glPointSize"),
		glPolygonMode:                         getProcAddr("glPolygonMode"),
		glPolygonOffset:                       getProcAddr("glPolygonOffset"),
		glPolygonStipple:                      getProcAddr("glPolygonStipple"),
		glPopAttrib:                           getProcAddr("glPopAttrib"),
		glPopClientAttrib:                     getProcAddr("glPopClientAttrib"),
		glPopMatrix:                           getProcAddr("glPopMatrix"),
		glPopName:                             getProcAddr("glPopName"),
		glPrimitiveRestartIndex:               getProcAddr("glPrimitiveRestartIndex"),
		glPrioritizeTextures:                  getProcAddr("glPrioritizeTextures"),
		glPushAttrib:                          getProcAddr("glPushAttrib"),
		glPushClientAttrib:                    getProcAddr("glPushClientAttrib"),
		glPushMatrix:                          getProcAddr("glPushMatrix"),
		glPushName:                            getProcAddr("glPushName"),
		glRasterPos2d:                         getProcAddr("glRasterPos2d"),
		glRasterPos2dv:                        getProcAddr("glRasterPos2dv"),
		glRasterPos2f:                         getProcAddr("glRasterPos2f"),
		glRasterPos2fv:                        getProcAddr("glRasterPos2fv"),
		glRasterPos2i:                         getProcAddr("glRasterPos2i"),
		glRasterPos2iv:                        getProcAddr("glRasterPos2iv"),
		glRasterPos2s:                         getProcAddr("glRasterPos2s"),
		glRasterPos2sv:                        getProcAddr("glRasterPos2sv"),
		glRasterPos3d:                         getProcAddr("glRasterPos3d"),
		glRasterPos3dv:                        getProcAddr("glRasterPos3dv"),
		glRasterPos3f:                         getProcAddr("glRasterPos3f"),
		glRasterPos3fv:                        getProcAddr("glRasterPos3fv"),
		glRasterPos3i:                         getProcAddr("glRasterPos3i"),
		glRasterPos3iv:                        getProcAddr("glRasterPos3iv"),
		glRasterPos3s:                         getProcAddr("glRasterPos3s"),
		glRasterPos3sv:                        getProcAddr("glRasterPos3sv"),
		glRasterPos4d:                         getProcAddr("glRasterPos4d"),
		glRasterPos4dv:                        getProcAddr("glRasterPos4dv"),
		glRasterPos4f:                         getProcAddr("glRasterPos4f"),
		glRasterPos4fv:                        getProcAddr("glRasterPos4fv"),
		glRasterPos4i:                         getProcAddr("glRasterPos4i"),
		glRasterPos4iv:                        getProcAddr("glRasterPos4iv"),
		glRasterPos4s:                         getProcAddr("glRasterPos4s"),
		glRasterPos4sv:                        getProcAddr("glRasterPos4sv"),
		glReadBuffer:                          getProcAddr("glReadBuffer"),
		glReadPixels:                          getProcAddr("glReadPixels"),
		glRectd:                               getProcAddr("glRectd"),
		glRectdv:                              getProcAddr("glRectdv"),
		glRectf:                               getProcAddr("glRectf"),
		glRectfv:                              getProcAddr("glRectfv"),
		glRecti:                               getProcAddr("glRecti"),
		glRectiv:                              getProcAddr("glRectiv"),
		glRects:                               getProcAddr("glRects"),
		glRectsv:                              getProcAddr("glRectsv"),
		glRenderMode:                          getProcAddr("glRenderMode"),
		glRenderbufferStorage:                 getProcAddr("glRenderbufferStorage"),
		glRenderbufferStorageMultisample:      getProcAddr("glRenderbufferStorageMultisample"),
		glRotated:                             getProcAddr("glRotated"),
		glRotatef:                             getProcAddr("glRotatef"),
		glSampleCoverage:                      getProcAddr("glSampleCoverage"),
		glScaled:                              getProcAddr("glScaled"),
		glScalef:                              getProcAddr("glScalef"),
		glScissor:                             getProcAddr("glScissor"),
		glSecondaryColor3b:                    getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:                   getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:                    getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:                   getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:                    getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:                   getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:                    getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:                   getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:                    getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:                   getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:                   getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:                  getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:                   getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:                  getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:                   getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:                  getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorPointer:               getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:                        getProcAddr("glSelectBuffer"),
		glShadeModel:                          getProcAddr("glShadeModel"),
		glShaderSource:                        getProcAddr("glShaderSource"),
		glStencilFunc:                         getProcAddr("glStencilFunc"),
		glStencilFuncSeparate:                 getProcAddr("glStencilFuncSeparate"),
		glStencilMask:                         getProcAddr("glStencilMask"),
		glStencilMaskSeparate:                 getProcAddr("glStencilMaskSeparate"),
		glStencilOp:                           getProcAddr("glStencilOp"),
		glStencilOpSeparate:                   getProcAddr("glStencilOpSeparate"),
		glTexBuffer:                           getProcAddr("glTexBuffer"),
		glTexCoord1d:                          getProcAddr("glTexCoord1d"),
		glTexCoord1dv:                         getProcAddr("glTexCoord1dv"),
		glTexCoord1f:                          getProcAddr("glTexCoord1f"),
		glTexCoord1fv:                         getProcAddr("glTexCoord1fv"),
		glTexCoord1i:                          getProcAddr("glTexCoord1i"),
		glTexCoord1iv:                         getProcAddr("glTexCoord1iv"),
		glTexCoord1s:                          getProcAddr("glTexCoord1s"),
		glTexCoord1sv:                         getProcAddr("glTexCoord1sv"),
		glTexCoord2d:                          getProcAddr("glTexCoord2d"),
		glTexCoord2dv:                         getProcAddr("glTexCoord2dv"),
		glTexCoord2f:                          getProcAddr("glTexCoord2f"),
		glTexCoord2fv:                         getProcAddr("glTexCoord2fv"),
		glTexCoord2i:                          getProcAddr("glTexCoord2i"),
		glTexCoord2iv:                         getProcAddr("glTexCoord2iv"),
		glTexCoord2s:                          getProcAddr("glTexCoord2s"),
		glTexCoord2sv:                         getProcAddr("glTexCoord2sv"),
		glTexCoord3d:                          getProcAddr("glTexCoord3d"),
		glTexCoord3dv:                         getProcAddr("glTexCoord3dv"),
		glTexCoord3f:                          getProcAddr("glTexCoord3f"),
		glTexCoord3fv:                         getProcAddr("glTexCoord3fv"),
		glTexCoord3i:                          getProcAddr("glTexCoord3i"),
		glTexCoord3iv:                         getProcAddr("glTexCoord3iv"),
		glTexCoord3s:                          getProcAddr("glTexCoord3s"),
		glTexCoord3sv:                         getProcAddr("glTexCoord3sv"),
		glTexCoord4d:                          getProcAddr("glTexCoord4d"),
		glTexCoord4dv:                         getProcAddr("glTexCoord4dv"),
		glTexCoord4f:                          getProcAddr("glTexCoord4f"),
		glTexCoord4fv:                         getProcAddr("glTexCoord4fv"),
		glTexCoord4i:                          getProcAddr("glTexCoord4i"),
		glTexCoord4iv:                         getProcAddr("glTexCoord4iv"),
		glTexCoord4s:                          getProcAddr("glTexCoord4s"),
		glTexCoord4sv:                         getProcAddr("glTexCoord4sv"),
		glTexCoordPointer:                     getProcAddr("glTexCoordPointer"),
		glTexEnvf:                             getProcAddr("glTexEnvf"),
		glTexEnvfv:                            getProcAddr("glTexEnvfv"),
		glTexEnvi:                             getProcAddr("glTexEnvi"),
		glTexEnviv:                            getProcAddr("glTexEnviv"),
		glTexGend:                             getProcAddr("glTexGend"),
		glTexGendv:                            getProcAddr("glTexGendv"),
		glTexGenf:                             getProcAddr("glTexGenf"),
		glTexGenfv:                            getProcAddr("glTexGenfv"),
		glTexGeni:                             getProcAddr("glTexGeni"),
		glTexGeniv:                            getProcAddr("glTexGeniv"),
		glTexImage1D:                          getProcAddr("glTexImage1D"),
		glTexImage2D:                          getProcAddr("glTexImage2D"),
		glTexImage3D:                          getProcAddr("glTexImage3D"),
		glTexParameterIiv:                     getProcAddr("glTexParameterIiv"),
		glTexParameterIuiv:                    getProcAddr("glTexParameterIuiv"),
		glTexParameterf:                       getProcAddr("glTexParameterf"),
		glTexParameterfv:                      getProcAddr("glTexParameterfv"),
		glTexParameteri:                       getProcAddr("glTexParameteri"),
		glTexParameteriv:                      getProcAddr("glTexParameteriv"),
		glTexSubImage1D:                       getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:                       getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:                       getProcAddr("glTexSubImage3D"),
		glTransformFeedbackVaryings:           getProcAddr("glTransformFeedbackVaryings"),
		glTranslated:                          getProcAddr("glTranslated"),
		glTranslatef:                          getProcAddr("glTranslatef"),
		glUniform1f:                           getProcAddr("glUniform1f"),
		glUniform1fv:                          getProcAddr("glUniform1fv"),
		glUniform1i:                           getProcAddr("glUniform1i"),
		glUniform1iv:                          getProcAddr("glUniform1iv"),
		glUniform1ui:                          getProcAddr("glUniform1ui"),
		glUniform1uiv:                         getProcAddr("glUniform1uiv"),
		glUniform2f:                           getProcAddr("glUniform2f"),
		glUniform2fv:                          getProcAddr("glUniform2fv"),
		glUniform2i:                           getProcAddr("glUniform2i"),
		glUniform2iv:                          getProcAddr("glUniform2iv"),
		glUniform2ui:                          getProcAddr("glUniform2ui"),
		glUniform2uiv:                         getProcAddr("glUniform2uiv"),
		glUniform3f:                           getProcAddr("glUniform3f"),
		glUniform3fv:                          getProcAddr("glUniform3fv"),
		glUniform3i:                           getProcAddr("glUniform3i"),
		glUniform3iv:                          getProcAddr("glUniform3iv"),
		glUniform3ui:                          getProcAddr("glUniform3ui"),
		glUniform3uiv:                         getProcAddr("glUniform3uiv"),
		glUniform4f:                           getProcAddr("glUniform4f"),
		glUniform4fv:                          getProcAddr("glUniform4fv"),
		glUniform4i:                           getProcAddr("glUniform4i"),
		glUniform4iv:                          getProcAddr("glUniform4iv"),
		glUniform4ui:                          getProcAddr("glUniform4ui"),
		glUniform4uiv:                         getProcAddr("glUniform4uiv"),
		glUniformBlockBinding:                 getProcAddr("glUniformBlockBinding"),
		glUniformMatrix2fv:                    getProcAddr("glUniformMatrix2fv"),
		glUniformMatrix2x3fv:                  getProcAddr("glUniformMatrix2x3fv"),
		glUniformMatrix2x4fv:                  getProcAddr("glUniformMatrix2x4fv"),
		glUniformMatrix3fv:                    getProcAddr("glUniformMatrix3fv"),
		glUniformMatrix3x2fv:                  getProcAddr("glUniformMatrix3x2fv"),
		glUniformMatrix3x4fv:                  getProcAddr("glUniformMatrix3x4fv"),
		glUniformMatrix4fv:                    getProcAddr("glUniformMatrix4fv"),
		glUniformMatrix4x2fv:                  getProcAddr("glUniformMatrix4x2fv"),
		glUniformMatrix4x3fv:                  getProcAddr("glUniformMatrix4x3fv"),
		glUnmapBuffer:                         getProcAddr("glUnmapBuffer"),
		glUseProgram:                          getProcAddr("glUseProgram"),
		glValidateProgram:                     getProcAddr("glValidateProgram"),
		glVertex2d:                            getProcAddr("glVertex2d"),
		glVertex2dv:                           getProcAddr("glVertex2dv"),
		glVertex2f:                            getProcAddr("glVertex2f"),
		glVertex2fv:                           getProcAddr("glVertex2fv"),
		glVertex2i:                            getProcAddr("glVertex2i"),
		glVertex2iv:                           getProcAddr("glVertex2iv"),
		glVertex2s:                            getProcAddr("glVertex2s"),
		glVertex2sv:                           getProcAddr("glVertex2sv"),
		glVertex3d:                            getProcAddr("glVertex3d"),
		glVertex3dv:                           getProcAddr("glVertex3dv"),
		glVertex3f:                            getProcAddr("glVertex3f"),
		glVertex3fv:                           getProcAddr("glVertex3fv"),
		glVertex3i:                            getProcAddr("glVertex3i"),
		glVertex3iv:                           getProcAddr("glVertex3iv"),
		glVertex3s:                            getProcAddr("glVertex3s"),
		glVertex3sv:                           getProcAddr("glVertex3sv"),
		glVertex4d:                            getProcAddr("glVertex4d"),
		glVertex4dv:                           getProcAddr("glVertex4dv"),
		glVertex4f:                            getProcAddr("glVertex4f"),
		glVertex4fv:                           getProcAddr("glVertex4fv"),
		glVertex4i:                            getProcAddr("glVertex4i"),
		glVertex4iv:                           getProcAddr("glVertex4iv"),
		glVertex4s:                            getProcAddr("glVertex4s"),
		glVertex4sv:                           getProcAddr("glVertex4sv"),
		glVertexAttrib1d:                      getProcAddr("glVertexAttrib1d"),
		glVertexAttrib1dv:                     getProcAddr("glVertexAttrib1dv"),
		glVertexAttrib1f:                      getProcAddr("glVertexAttrib1f"),
		glVertexAttrib1fv:                     getProcAddr("glVertexAttrib1fv"),
		glVertexAttrib1s:                      getProcAddr("glVertexAttrib1s"),
		glVertexAttrib1sv:                     getProcAddr("glVertexAttrib1sv"),
		glVertexAttrib2d:                      getProcAddr("glVertexAttrib2d"),
		glVertexAttrib2dv:                     getProcAddr("glVertexAttrib2dv"),
		glVertexAttrib2f:                      getProcAddr("glVertexAttrib2f"),
		glVertexAttrib2fv:                     getProcAddr("glVertexAttrib2fv"),
		glVertexAttrib2s:                      getProcAddr("glVertexAttrib2s"),
		glVertexAttrib2sv:                     getProcAddr("glVertexAttrib2sv"),
		glVertexAttrib3d:                      getProcAddr("glVertexAttrib3d"),
		glVertexAttrib3dv:                     getProcAddr("glVertexAttrib3dv"),
		glVertexAttrib3f:                      getProcAddr("glVertexAttrib3f"),
		glVertexAttrib3fv:                     getProcAddr("glVertexAttrib3fv"),
		glVertexAttrib3s:                      getProcAddr("glVertexAttrib3s"),
		glVertexAttrib3sv:                     getProcAddr("glVertexAttrib3sv"),
		glVertexAttrib4Nbv:                    getProcAddr("glVertexAttrib4Nbv"),
		glVertexAttrib4Niv:                    getProcAddr("glVertexAttrib4Niv"),
		glVertexAttrib4Nsv:                    getProcAddr("glVertexAttrib4Nsv"),
		glVertexAttrib4Nub:                    getProcAddr("glVertexAttrib4Nub"),
		glVertexAttrib4Nubv:                   getProcAddr("glVertexAttrib4Nubv"),
		glVertexAttrib4Nuiv:                   getProcAddr("glVertexAttrib4Nuiv"),
		glVertexAttrib4Nusv:                   getProcAddr("glVertexAttrib4Nusv"),
		glVertexAttrib4bv:                     getProcAddr("glVertexAttrib4bv"),
		glVertexAttrib4d:                      getProcAddr("glVertexAttrib4d"),
		glVertexAttrib4dv:                     getProcAddr("glVertexAttrib4dv"),
		glVertexAttrib4f:                      getProcAddr("glVertexAttrib4f"),
		glVertexAttrib4fv:                     getProcAddr("glVertexAttrib4fv"),
		glVertexAttrib4iv:                     getProcAddr("glVertexAttrib4iv"),
		glVertexAttrib4s:                      getProcAddr("glVertexAttrib4s"),
		glVertexAttrib4sv:                     getProcAddr("glVertexAttrib4sv"),
		glVertexAttrib4ubv:                    getProcAddr("glVertexAttrib4ubv"),
		glVertexAttrib4uiv:                    getProcAddr("glVertexAttrib4uiv"),
		glVertexAttrib4usv:                    getProcAddr("glVertexAttrib4usv"),
		glVertexAttribI1i:                     getProcAddr("glVertexAttribI1i"),
		glVertexAttribI1iv:                    getProcAddr("glVertexAttribI1iv"),
		glVertexAttribI1ui:                    getProcAddr("glVertexAttribI1ui"),
		glVertexAttribI1uiv:                   getProcAddr("glVertexAttribI1uiv"),
		glVertexAttribI2i:                     getProcAddr("glVertexAttribI2i"),
		glVertexAttribI2iv:                    getProcAddr("glVertexAttribI2iv"),
		glVertexAttribI2ui:                    getProcAddr("glVertexAttribI2ui"),
		glVertexAttribI2uiv:                   getProcAddr("glVertexAttribI2uiv"),
		glVertexAttribI3i:                     getProcAddr("glVertexAttribI3i"),
		glVertexAttribI3iv:                    getProcAddr("glVertexAttribI3iv"),
		glVertexAttribI3ui:                    getProcAddr("glVertexAttribI3ui"),
		glVertexAttribI3uiv:                   getProcAddr("glVertexAttribI3uiv"),
		glVertexAttribI4bv:                    getProcAddr("glVertexAttribI4bv"),
		glVertexAttribI4i:                     getProcAddr("glVertexAttribI4i"),
		glVertexAttribI4iv:                    getProcAddr("glVertexAttribI4iv"),
		glVertexAttribI4sv:                    getProcAddr("glVertexAttribI4sv"),
		glVertexAttribI4ubv:                   getProcAddr("glVertexAttribI4ubv"),
		glVertexAttribI4ui:                    getProcAddr("glVertexAttribI4ui"),
		glVertexAttribI4uiv:                   getProcAddr("glVertexAttribI4uiv"),
		glVertexAttribI4usv:                   getProcAddr("glVertexAttribI4usv"),
		glVertexAttribIPointer:                getProcAddr("glVertexAttribIPointer"),
		glVertexAttribPointer:                 getProcAddr("glVertexAttribPointer"),
		glVertexPointer:                       getProcAddr("glVertexPointer"),
		glViewport:                            getProcAddr("glViewport"),
		glWindowPos2d:                         getProcAddr("glWindowPos2d"),
		glWindowPos2dv:                        getProcAddr("glWindowPos2dv"),
		glWindowPos2f:                         getProcAddr("glWindowPos2f"),
		glWindowPos2fv:                        getProcAddr("glWindowPos2fv"),
		glWindowPos2i:                         getProcAddr("glWindowPos2i"),
		glWindowPos2iv:                        getProcAddr("glWindowPos2iv"),
		glWindowPos2s:                         getProcAddr("glWindowPos2s"),
		glWindowPos2sv:                        getProcAddr("glWindowPos2sv"),
		glWindowPos3d:                         getProcAddr("glWindowPos3d"),
		glWindowPos3dv:                        getProcAddr("glWindowPos3dv"),
		glWindowPos3f:                         getProcAddr("glWindowPos3f"),
		glWindowPos3fv:                        getProcAddr("glWindowPos3fv"),
		glWindowPos3i:                         getProcAddr("glWindowPos3i"),
		glWindowPos3iv:                        getProcAddr("glWindowPos3iv"),
		glWindowPos3s:                         getProcAddr("glWindowPos3s"),
		glWindowPos3sv:                        getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL320 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	AttachShader(program uint32, shader uint32)
	Begin(mode uint32)
	BeginConditionalRender(id uint32, mode uint32)
	BeginQuery(target uint32, id uint32)
	BeginTransformFeedback(primitiveMode uint32)
	BindAttribLocation(program uint32, index uint32, name *uint8)
	BindBuffer(target uint32, buffer uint32)
	BindBufferBase(target uint32, index uint32, buffer uint32)
	BindBufferRange(target uint32, index uint32, buffer uint32, offset uintptr, size int)
	BindFragDataLocation(program uint32, color uint32, name *uint8)
	BindFramebuffer(target uint32, framebuffer uint32)
	BindRenderbuffer(target uint32, renderbuffer uint32)
	BindTexture(target uint32, texture uint32)
	BindVertexArray(array uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	CheckFramebufferStatus(target uint32) uint32
	ClampColor(target uint32, clamp uint32)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32)
	ClearBufferfv(buffer uint32, drawbuffer int32, value *float32)
	ClearBufferiv(buffer uint32, drawbuffer int32, value *int32)
	ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClientActiveTexture(texture uint32)
	ClientWaitSync(sync GLsync, flags uint32, timeout uint64) uint32
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaski(index uint32, r bool, g bool, b bool, a bool)
	ColorMaterial(face uint32, mode uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompileShader(shader uint32)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset uintptr, writeOffset uintptr, size int)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CreateProgram() uint32
	CreateShader(type_ uint32) uint32
	CullFace(mode uint32)
	DeleteBuffers(n int32, buffers *uint32)
	DeleteFramebuffers(n int32, framebuffers *uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteProgram(program uint32)
	DeleteQueries(n int32, ids *uint32)
	DeleteRenderbuffers(n int32, renderbuffers *uint32)
	DeleteShader(shader uint32)
	DeleteSync(sync GLsync)
	DeleteTextures(n int32, textures *uint32)
	DeleteVertexArrays(n int32, arrays *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	DetachShader(program uint32, shader uint32)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DisableVertexAttribArray(index uint32)
	Disablei(target uint32, index uint32)
	DrawArrays(mode uint32, first int32, count int32)
	DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32)
	DrawBuffer(buf uint32)
	DrawBuffers(n int32, bufs *uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawElementsBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawElementsInstanced(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32)
	DrawElementsInstancedBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawRangeElementsBaseVertex(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	EnableVertexAttribArray(index uint32)
	Enablei(target uint32, index uint32)
	End()
	EndConditionalRender()
	EndList()
	EndQuery(target uint32)
	EndTransformFeedback()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	FenceSync(condition uint32, flags uint32) GLsync
	Finish()
	Flush()
	FlushMappedBufferRange(target uint32, offset uintptr, length int)
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	FramebufferTexture(target uint32, attachment uint32, texture uint32, level int32)
	FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32)
	FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenBuffers(n int32, buffers *uint32)
	GenFramebuffers(n int32, framebuffers *uint32)
	GenLists(range_ int32) uint32
	GenQueries(n int32, ids *uint32)
	GenRenderbuffers(n int32, renderbuffers *uint32)
	GenTextures(n int32, textures *uint32)
	GenVertexArrays(n int32, arrays *uint32)
	GenerateMipmap(target uint32)
	GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *uint8)
	GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32)
	GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *uint8)
	GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32)
	GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)
	GetAttribLocation(program uint32, name *uint8) int32
	GetBooleani_v(target uint32, index uint32, data *bool)
	GetBooleanv(pname uint32, data *bool)
	GetBufferParameteri64v(target uint32, pname uint32, params *int64)
	GetBufferParameteriv(target uint32, pname uint32, params *int32)
	GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)
	GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloatv(pname uint32, data *float32)
	GetFragDataLocation(program uint32, name *uint8) int32
	GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32)
	GetInteger64i_v(target uint32, index uint32, data *int64)
	GetInteger64v(pname uint32, data *int64)
	GetIntegeri_v(target uint32, index uint32, data *int32)
	GetIntegerv(pname uint32, data *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetMultisamplefv(pname uint32, index uint32, val *float32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramiv(program uint32, pname uint32, params *int32)
	GetQueryObjectiv(id uint32, pname uint32, params *int32)
	GetQueryObjectuiv(id uint32, pname uint32, params *uint32)
	GetQueryiv(target uint32, pname uint32, params *int32)
	GetRenderbufferParameteriv(target uint32, pname uint32, params *int32)
	GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8)
	GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8)
	GetShaderiv(shader uint32, pname uint32, params *int32)
	GetString(name uint32) *uint8
	GetStringi(name uint32, index uint32) *uint8
	GetSynciv(sync GLsync, pname uint32, count int32, length *int32, values *int32)
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterIiv(target uint32, pname uint32, params *int32)
	GetTexParameterIuiv(target uint32, pname uint32, params *uint32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetUniformBlockIndex(program uint32, uniformBlockName *uint8) uint32
	GetUniformIndices(program uint32, uniformCount int32, uniformNames **uint8, uniformIndices *uint32)
	GetUniformLocation(program uint32, name *uint8) int32
	GetUniformfv(program uint32, location int32, params *float32)
	GetUniformiv(program uint32, location int32, params *int32)
	GetUniformuiv(program uint32, location int32, params *uint32)
	GetVertexAttribIiv(index uint32, pname uint32, params *int32)
	GetVertexAttribIuiv(index uint32, pname uint32, params *uint32)
	GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)
	GetVertexAttribdv(index uint32, pname uint32, params *float64)
	GetVertexAttribfv(index uint32, pname uint32, params *float32)
	GetVertexAttribiv(index uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	IsBuffer(buffer uint32) bool
	IsEnabled(cap uint32) bool
	IsEnabledi(target uint32, index uint32) bool
	IsFramebuffer(framebuffer uint32) bool
	IsList(list uint32) bool
	IsProgram(program uint32) bool
	IsQuery(id uint32) bool
	IsRenderbuffer(renderbuffer uint32) bool
	IsShader(shader uint32) bool
	IsSync(sync GLsync) bool
	IsTexture(texture uint32) bool
	IsVertexArray(array uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	LinkProgram(program uint32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapBuffer(target uint32, access uint32) unsafe.Pointer
	MapBufferRange(target uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiDrawElementsBaseVertex(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopMatrix()
	PopName()
	PrimitiveRestartIndex(index uint32)
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	ProvokingVertex(mode uint32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	RenderMode(mode uint32) int32
	RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32)
	RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32)
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	SampleMaski(maskNumber uint32, mask uint32)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	ShaderSource(shader uint32, count int32, string **uint8, length *int32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilMaskSeparate(face uint32, mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)
	TexBuffer(target uint32, internalformat uint32, buffer uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TexParameterIiv(target uint32, pname uint32, params *int32)
	TexParameterIuiv(target uint32, pname uint32, params *uint32)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TransformFeedbackVaryings(program uint32, count int32, varyings **uint8, bufferMode uint32)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Uniform1f(location int32, v0 float32)
	Uniform1fv(location int32, count int32, value *float32)
	Uniform1i(location int32, v0 int32)
	Uniform1iv(location int32, count int32, value *int32)
	Uniform1ui(location int32, v0 uint32)
	Uniform1uiv(location int32, count int32, value *uint32)
	Uniform2f(location int32, v0 float32, v1 float32)
	Uniform2fv(location int32, count int32, value *float32)
	Uniform2i(location int32, v0 int32, v1 int32)
	Uniform2iv(location int32, count int32, value *int32)
	Uniform2ui(location int32, v0 uint32, v1 uint32)
	Uniform2uiv(location int32, count int32, value *uint32)
	Uniform3f(location int32, v0 float32, v1 float32, v2 float32)
	Uniform3fv(location int32, count int32, value *float32)
	Uniform3i(location int32, v0 int32, v1 int32, v2 int32)
	Uniform3iv(location int32, count int32, value *int32)
	Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)
	Uniform3uiv(location int32, count int32, value *uint32)
	Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	Uniform4fv(location int32, count int32, value *float32)
	Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	Uniform4iv(location int32, count int32, value *int32)
	Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	Uniform4uiv(location int32, count int32, value *uint32)
	UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)
	UniformMatrix2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32)
	UnmapBuffer(target uint32) bool
	UseProgram(program uint32)
	ValidateProgram(program uint32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexAttrib1d(index uint32, x float64)
	VertexAttrib1dv(index uint32, v *float64)
	VertexAttrib1f(index uint32, x float32)
	VertexAttrib1fv(index uint32, v *float32)
	VertexAttrib1s(index uint32, x int16)
	VertexAttrib1sv(index uint32, v *int16)
	VertexAttrib2d(index uint32, x float64, y float64)
	VertexAttrib2dv(index uint32, v *float64)
	VertexAttrib2f(index uint32, x float32, y float32)
	VertexAttrib2fv(index uint32, v *float32)
	VertexAttrib2s(index uint32, x int16, y int16)
	VertexAttrib2sv(index uint32, v *int16)
	VertexAttrib3d(index uint32, x float64, y float64, z float64)
	VertexAttrib3dv(index uint32, v *float64)
	VertexAttrib3f(index uint32, x float32, y float32, z float32)
	VertexAttrib3fv(index uint32, v *float32)
	VertexAttrib3s(index uint32, x int16, y int16, z int16)
	VertexAttrib3sv(index uint32, v *int16)
	VertexAttrib4Nbv(index uint32, v *int8)
	VertexAttrib4Niv(index uint32, v *int32)
	VertexAttrib4Nsv(index uint32, v *int16)
	VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4Nubv(index uint32, v *uint8)
	VertexAttrib4Nuiv(index uint32, v *uint32)
	VertexAttrib4Nusv(index uint32, v *uint16)
	VertexAttrib4bv(index uint32, v *int8)
	VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dv(index uint32, v *float64)
	VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fv(index uint32, v *float32)
	VertexAttrib4iv(index uint32, v *int32)
	VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4sv(index uint32, v *int16)
	VertexAttrib4ubv(index uint32, v *uint8)
	VertexAttrib4uiv(index uint32, v *uint32)
	VertexAttrib4usv(index uint32, v *uint16)
	VertexAttribI1i(index uint32, x int32)
	VertexAttribI1iv(index uint32, v *int32)
	VertexAttribI1ui(index uint32, x uint32)
	VertexAttribI1uiv(index uint32, v *uint32)
	VertexAttribI2i(index uint32, x int32, y int32)
	VertexAttribI2iv(index uint32, v *int32)
	VertexAttribI2ui(index uint32, x uint32, y uint32)
	VertexAttribI2uiv(index uint32, v *uint32)
	VertexAttribI3i(index uint32, x int32, y int32, z int32)
	VertexAttribI3iv(index uint32, v *int32)
	VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32)
	VertexAttribI3uiv(index uint32, v *uint32)
	VertexAttribI4bv(index uint32, v *int8)
	VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)
	VertexAttribI4iv(index uint32, v *int32)
	VertexAttribI4sv(index uint32, v *int16)
	VertexAttribI4ubv(index uint32, v *uint8)
	VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)
	VertexAttribI4uiv(index uint32, v *uint32)
	VertexAttribI4usv(index uint32, v *uint16)
	VertexAttribIPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribPointer(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	WaitSync(sync GLsync, flags uint32, timeout uint64)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New320(getProcAddr func(name string) unsafe.Pointer) GL320 {
	gl := &lib{
		glAccum:                               getProcAddr("glAccum"),
		glActiveTexture:                       getProcAddr("glActiveTexture"),
		glAlphaFunc:                           getProcAddr("glAlphaFunc"),
		glAreTexturesResident:                 getProcAddr("glAreTexturesResident"),
		glArrayElement:                        getProcAddr("glArrayElement"),
		glAttachShader:                        getProcAddr("glAttachShader"),
		glBegin:                               getProcAddr("glBegin"),
		glBeginConditionalRender:              getProcAddr("glBeginConditionalRender"),
		glBeginQuery:                          getProcAddr("glBeginQuery"),
		glBeginTransformFeedback:              getProcAddr("glBeginTransformFeedback"),
		glBindAttribLocation:                  getProcAddr("glBindAttribLocation"),
		glBindBuffer:                          getProcAddr("glBindBuffer"),
		glBindBufferBase:                      getProcAddr("glBindBufferBase"),
		glBindBufferRange:                     getProcAddr("glBindBufferRange"),
		glBindFragDataLocation:                getProcAddr("glBindFragDataLocation"),
		glBindFramebuffer:                     getProcAddr("glBindFramebuffer"),
		glBindRenderbuffer:                    getProcAddr("glBindRenderbuffer"),
		glBindTexture:                         getProcAddr("glBindTexture"),
		glBindVertexArray:                     getProcAddr("glBindVertexArray"),
		glBitmap:                              getProcAddr("glBitmap"),
		glBlendColor:                          getProcAddr("glBlendColor"),
		glBlendEquation:                       getProcAddr("glBlendEquation"),
		glBlendEquationSeparate:               getProcAddr("glBlendEquationSeparate"),
		glBlendFunc:                           getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:                   getProcAddr("glBlendFuncSeparate"),
		glBlitFramebuffer:                     getProcAddr("glBlitFramebuffer"),
		glBufferData:                          getProcAddr("glBufferData"),
		glBufferSubData:                       getProcAddr("glBufferSubData"),
		glCallList:                            getProcAddr("glCallList"),
		glCallLists:                           getProcAddr("glCallLists"),
		glCheckFramebufferStatus:              getProcAddr("glCheckFramebufferStatus"),
		glClampColor:                          getProcAddr("glClampColor"),
		glClear:                               getProcAddr("glClear"),
		glClearAccum:                          getProcAddr("glClearAccum"),
		glClearBufferfi:                       getProcAddr("glClearBufferfi"),
		glClearBufferfv:                       getProcAddr("glClearBufferfv"),
		glClearBufferiv:                       getProcAddr("glClearBufferiv"),
		glClearBufferuiv:                      getProcAddr("glClearBufferuiv"),
		glClearColor:                          getProcAddr("glClearColor"),
		glClearDepth:                          getProcAddr("glClearDepth"),
		glClearIndex:                          getProcAddr("glClearIndex"),
		glClearStencil:                        getProcAddr("glClearStencil"),
		glClientActiveTexture:                 getProcAddr("glClientActiveTexture"),
		glClientWaitSync:                      getProcAddr("glClientWaitSync"),
		glClipPlane:                           getProcAddr("glClipPlane"),
		glColor3b:                             getProcAddr("glColor3b"),
		glColor3bv:                            getProcAddr("glColor3bv"),
		glColor3d:                             getProcAddr("glColor3d"),
		glColor3dv:                            getProcAddr("glColor3dv"),
		glColor3f:                             getProcAddr("glColor3f"),
		glColor3fv:                            getProcAddr("glColor3fv"),
		glColor3i:                             getProcAddr("glColor3i"),
		glColor3iv:                            getProcAddr("glColor3iv"),
		glColor3s:                             getProcAddr("glColor3s"),
		glColor3sv:                            getProcAddr("glColor3sv"),
		glColor3ub:                            getProcAddr("glColor3ub"),
		glColor3ubv:                           getProcAddr("glColor3ubv"),
		glColor3ui:                            getProcAddr("glColor3ui"),
		glColor3uiv:                           getProcAddr("glColor3uiv"),
		glColor3us:                            getProcAddr("glColor3us"),
		glColor3usv:                           getProcAddr("glColor3usv"),
		glColor4b:                             getProcAddr("glColor4b"),
		glColor4bv:                            getProcAddr("glColor4bv"),
		glColor4d:                             getProcAddr("glColor4d"),
		glColor4dv:                            getProcAddr("glColor4dv"),
		glColor4f:                             getProcAddr("glColor4f"),
		glColor4fv:                            getProcAddr("glColor4fv"),
		glColor4i:                             getProcAddr("glColor4i"),
		glColor4iv:                            getProcAddr("glColor4iv"),
		glColor4s:                             getProcAddr("glColor4s"),
		glColor4sv:                            getProcAddr("glColor4sv"),
		glColor4ub:                            getProcAddr("glColor4ub"),
		glColor4ubv:                           getProcAddr("glColor4ubv"),
		glColor4ui:                            getProcAddr("glColor4ui"),
		glColor4uiv:                           getProcAddr("glColor4uiv"),
		glColor4us:                            getProcAddr("glColor4us"),
		glColor4usv:                           getProcAddr("glColor4usv"),
		glColorMask:                           getProcAddr("glColorMask"),
		glColorMaski:                          getProcAddr("glColorMaski"),
		glColorMaterial:                       getProcAddr("glColorMaterial"),
		glColorPointer:                        getProcAddr("glColorPointer"),
		glCompileShader:                       getProcAddr("glCompileShader"),
		glCompressedTexImage1D:                getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:                getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:                getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D:             getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D:             getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D:             getProcAddr("glCompressedTexSubImage3D"),
		glCopyBufferSubData:                   getProcAddr("glCopyBufferSubData"),
		glCopyPixels:                          getProcAddr("glCopyPixels"),
		glCopyTexImage1D:                      getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:                      getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:                   getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:                   getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:                   getProcAddr("glCopyTexSubImage3D"),
		glCreateProgram:                       getProcAddr("glCreateProgram"),
		glCreateShader:                        getProcAddr("glCreateShader"),
		glCullFace:                            getProcAddr("glCullFace"),
		glDeleteBuffers:                       getProcAddr("glDeleteBuffers"),
		glDeleteFramebuffers:                  getProcAddr("glDeleteFramebuffers"),
		glDeleteLists:                         getProcAddr("glDeleteLists"),
		glDeleteProgram:                       getProcAddr("glDeleteProgram"),
		glDeleteQueries:                       getProcAddr("glDeleteQueries"),
		glDeleteRenderbuffers:                 getProcAddr("glDeleteRenderbuffers"),
		glDeleteShader:                        getProcAddr("glDeleteShader"),
		glDeleteSync:                          getProcAddr("glDeleteSync"),
		glDeleteTextures:                      getProcAddr("glDeleteTextures"),
		glDeleteVertexArrays:                  getProcAddr("glDeleteVertexArrays"),
		glDepthFunc:                           getProcAddr("glDepthFunc"),
		glDepthMask:                           getProcAddr("glDepthMask"),
		glDepthRange:                          getProcAddr("glDepthRange"),
		glDetachShader:                        getProcAddr("glDetachShader"),
		glDisable:                             getProcAddr("glDisable"),
		glDisableClientState:                  getProcAddr("glDisableClientState"),
		glDisableVertexAttribArray:            getProcAddr("glDisableVertexAttribArray"),
		glDisablei:                            getProcAddr("glDisablei"),
		glDrawArrays:                          getProcAddr("glDrawArrays"),
		glDrawArraysInstanced:                 getProcAddr("glDrawArraysInstanced"),
		glDrawBuffer:                          getProcAddr("glDrawBuffer"),
		glDrawBuffers:                         getProcAddr("glDrawBuffers"),
		glDrawElements:                        getProcAddr("glDrawElements"),
		glDrawElementsBaseVertex:              getProcAddr("glDrawElementsBaseVertex"),
		glDrawElementsInstanced:               getProcAddr("glDrawElementsInstanced"),
		glDrawElementsInstancedBaseVertex:     getProcAddr("glDrawElementsInstancedBaseVertex"),
		glDrawPixels:                          getProcAddr("glDrawPixels"),
		glDrawRangeElements:                   getProcAddr("glDrawRangeElements"),
		glDrawRangeElementsBaseVertex:         getProcAddr("glDrawRangeElementsBaseVertex"),
		glEdgeFlag:                            getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:                     getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:                           getProcAddr("glEdgeFlagv"),
		glEnable:                              getProcAddr("glEnable"),
		glEnableClientState:                   getProcAddr("glEnableClientState"),
		glEnableVertexAttribArray:             getProcAddr("glEnableVertexAttribArray"),
		glEnablei:                             getProcAddr("glEnablei"),
		glEnd:                                 getProcAddr("glEnd"),
		glEndConditionalRender:                getProcAddr("glEndConditionalRender"),
		glEndList:                             getProcAddr("glEndList"),
		glEndQuery:                            getProcAddr("glEndQuery"),
		glEndTransformFeedback:                getProcAddr("glEndTransformFeedback"),
		glEvalCoord1d:                         getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:                        getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:                         getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:                        getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:                         getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:                        getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:                         getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:                        getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:                           getProcAddr("glEvalMesh1"),
		glEvalMesh2:                           getProcAddr("glEvalMesh2"),
		glEvalPoint1:                          getProcAddr("glEvalPoint1"),
		glEvalPoint2:                          getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:                      getProcAddr("glFeedbackBuffer"),
		glFenceSync:                           getProcAddr("glFenceSync"),
		glFinish:                              getProcAddr("glFinish"),
		glFlush:                               getProcAddr("glFlush"),
		glFlushMappedBufferRange:              getProcAddr("glFlushMappedBufferRange"),
		glFogCoordPointer:                     getProcAddr("glFogCoordPointer"),
		glFogCoordd:                           getProcAddr("glFogCoordd"),
		glFogCoorddv:                          getProcAddr("glFogCoorddv"),
		glFogCoordf:                           getProcAddr("glFogCoordf"),
		glFogCoordfv:                          getProcAddr("glFogCoordfv"),
		glFogf:                                getProcAddr("glFogf"),
		glFogfv:                               getProcAddr("glFogfv"),
		glFogi:                                getProcAddr("glFogi"),
		glFogiv:                               getProcAddr("glFogiv"),
		glFramebufferRenderbuffer:             getProcAddr("glFramebufferRenderbuffer"),
		glFramebufferTexture:                  getProcAddr("glFramebufferTexture"),
		glFramebufferTexture1D:                getProcAddr("glFramebufferTexture1D"),
		glFramebufferTexture2D:                getProcAddr("glFramebufferTexture2D"),
		glFramebufferTexture3D:                getProcAddr("glFramebufferTexture3D"),
		glFramebufferTextureLayer:             getProcAddr("glFramebufferTextureLayer"),
		glFrontFace:                           getProcAddr("glFrontFace"),
		glFrustum:                             getProcAddr("glFrustum"),
		glGenBuffers:                          getProcAddr("glGenBuffers"),
		glGenFramebuffers:                     getProcAddr("glGenFramebuffers"),
		glGenLists:                            getProcAddr("glGenLists"),
		glGenQueries:                          getProcAddr("glGenQueries"),
		glGenRenderbuffers:                    getProcAddr("glGenRenderbuffers"),
		glGenTextures:                         getProcAddr("glGenTextures"),
		glGenVertexArrays:                     getProcAddr("glGenVertexArrays"),
		glGenerateMipmap:                      getProcAddr("glGenerateMipmap"),
		glGetActiveAttrib:                     getProcAddr("glGetActiveAttrib"),
		glGetActiveUniform:                    getProcAddr("glGetActiveUniform"),
		glGetActiveUniformBlockName:           getProcAddr("glGetActiveUniformBlockName"),
		glGetActiveUniformBlockiv:             getProcAddr("glGetActiveUniformBlockiv"),
		glGetActiveUniformName:                getProcAddr("glGetActiveUniformName"),
		glGetActiveUniformsiv:                 getProcAddr("glGetActiveUniformsiv"),
		glGetAttachedShaders:                  getProcAddr("glGetAttachedShaders"),
		glGetAttribLocation:                   getProcAddr("glGetAttribLocation"),
		glGetBooleani_v:                       getProcAddr("glGetBooleani_v"),
		glGetBooleanv:                         getProcAddr("glGetBooleanv"),
		glGetBufferParameteri64v:              getProcAddr("glGetBufferParameteri64v"),
		glGetBufferParameteriv:                getProcAddr("glGetBufferParameteriv"),
		glGetBufferPointerv:                   getProcAddr("glGetBufferPointerv"),
		glGetBufferSubData:                    getProcAddr("glGetBufferSubData"),
		glGetClipPlane:                        getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:               getProcAddr("glGetCompressedTexImage"),
		glGetDoublev:                          getProcAddr("glGetDoublev"),
		glGetError:                            getProcAddr("glGetError"),
		glGetFloatv:                           getProcAddr("glGetFloatv"),
		glGetFragDataLocation:                 getProcAddr("glGetFragDataLocation"),
		glGetFramebufferAttachmentParameteriv: getProcAddr("glGetFramebufferAttachmentParameteriv"),
		glGetInteger64i_v:                     getProcAddr("glGetInteger64i_v"),
		glGetInteger64v:                       getProcAddr("glGetInteger64v"),
		glGetIntegeri_v:                       getProcAddr("glGetIntegeri_v"),
		glGetIntegerv:                         getProcAddr("glGetIntegerv"),
		glGetLightfv:                          getProcAddr("glGetLightfv"),
		glGetLightiv:                          getProcAddr("glGetLightiv"),
		glGetMapdv:                            getProcAddr("glGetMapdv"),
		glGetMapfv:                            getProcAddr("glGetMapfv"),
		glGetMapiv:                            getProcAddr("glGetMapiv"),
		glGetMaterialfv:                       getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:                       getProcAddr("glGetMaterialiv"),
		glGetMultisamplefv:                    getProcAddr("glGetMultisamplefv"),
		glGetPixelMapfv:                       getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:                      getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:                      getProcAddr("glGetPixelMapusv"),
		glGetPointerv:                         getProcAddr("glGetPointerv"),
		glGetPolygonStipple:                   getProcAddr("glGetPolygonStipple"),
		glGetProgramInfoLog:                   getProcAddr("glGetProgramInfoLog"),
		glGetProgramiv:                        getProcAddr("glGetProgramiv"),
		glGetQueryObjectiv:                    getProcAddr("glGetQueryObjectiv"),
		glGetQueryObjectuiv:                   getProcAddr("glGetQueryObjectuiv"),
		glGetQueryiv:                          getProcAddr("glGetQueryiv"),
		glGetRenderbufferParameteriv:          getProcAddr("glGetRenderbufferParameteriv"),
		glGetShaderInfoLog:                    getProcAddr("glGetShaderInfoLog"),
		glGetShaderSource:                     getProcAddr("glGetShaderSource"),
		glGetShaderiv:                         getProcAddr("glGetShaderiv"),
		glGetString:                           getProcAddr("glGetString"),
		glGetStringi:                          getProcAddr("glGetStringi"),
		glGetSynciv:                           getProcAddr("glGetSynciv"),
		glGetTexEnvfv:                         getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:                         getProcAddr("glGetTexEnviv"),
		glGetTexGendv:                         getProcAddr("glGetTexGendv"),
		glGetTexGenfv:                         getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:                         getProcAddr("glGetTexGeniv"),
		glGetTexImage:                         getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:              getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:              getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterIiv:                  getProcAddr("glGetTexParameterIiv"),
		glGetTexParameterIuiv:                 getProcAddr("glGetTexParameterIuiv"),
		glGetTexParameterfv:                   getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:                   getProcAddr("glGetTexParameteriv"),
		glGetTransformFeedbackVarying:         getProcAddr("glGetTransformFeedbackVarying"),
		glGetUniformBlockIndex:                getProcAddr("glGetUniformBlockIndex"),
		glGetUniformIndices:                   getProcAddr("glGetUniformIndices"),
		glGetUniformLocation:                  getProcAddr("glGetUniformLocation"),
		glGetUniformfv:                        getProcAddr("glGetUniformfv"),
		glGetUniformiv:                        getProcAddr("glGetUniformiv"),
		glGetUniformuiv:                       getProcAddr("glGetUniformuiv"),
		glGetVertexAttribIiv:                  getProcAddr("glGetVertexAttribIiv"),
		glGetVertexAttribIuiv:                 getProcAddr("glGetVertexAttribIuiv"),
		glGetVertexAttribPointerv:             getProcAddr("glGetVertexAttribPointerv"),
		glGetVertexAttribdv:                   getProcAddr("glGetVertexAttribdv"),
		glGetVertexAttribfv:                   getProcAddr("glGetVertexAttribfv"),
		glGetVertexAttribiv:                   getProcAddr("glGetVertexAttribiv"),
		glHint:                                getProcAddr("glHint"),
		glIndexMask:                           getProcAddr("glIndexMask"),
		glIndexPointer:                        getProcAddr("glIndexPointer"),
		glIndexd:                              getProcAddr("glIndexd"),
		glIndexdv:                             getProcAddr("glIndexdv"),
		glIndexf:                              getProcAddr("glIndexf"),
		glIndexfv:                             getProcAddr("glIndexfv"),
		glIndexi:                              getProcAddr("glIndexi"),
		glIndexiv:                             getProcAddr("glIndexiv"),
		glIndexs:                              getProcAddr("glIndexs"),
		glIndexsv:                             getProcAddr("glIndexsv"),
		glIndexub:                             getProcAddr("glIndexub"),
		glIndexubv:                            getProcAddr("glIndexubv"),
		glInitNames:                           getProcAddr("glInitNames"),
		glInterleavedArrays:                   getProcAddr("glInterleavedArrays"),
		glIsBuffer:                            getProcAddr("glIsBuffer"),
		glIsEnabled:                           getProcAddr("glIsEnabled"),
		glIsEnabledi:                          getProcAddr("glIsEnabledi"),
		glIsFramebuffer:                       getProcAddr("glIsFramebuffer"),
		glIsList:                              getProcAddr("glIsList"),
		glIsProgram:                           getProcAddr("glIsProgram"),
		glIsQuery:                             getProcAddr("glIsQuery"),
		glIsRenderbuffer:                      getProcAddr("glIsRenderbuffer"),
		glIsShader:                            getProcAddr("glIsShader"),
		glIsSync:                              getProcAddr("glIsSync"),
		glIsTexture:                           getProcAddr("glIsTexture"),
		glIsVertexArray:                       getProcAddr("glIsVertexArray"),
		glLightModelf:                         getProcAddr("glLightModelf"),
		glLightModelfv:                        getProcAddr("glLightModelfv"),
		glLightModeli:                         getProcAddr("glLightModeli"),
		glLightModeliv:                        getProcAddr("glLightModeliv"),
		glLightf:                              getProcAddr("glLightf"),
		glLightfv:                             getProcAddr("glLightfv"),
		glLighti:                              getProcAddr("glLighti"),
		glLightiv:                             getProcAddr("glLightiv"),
		glLineStipple:                         getProcAddr("glLineStipple"),
		glLineWidth:                           getProcAddr("glLineWidth"),
		glLinkProgram:                         getProcAddr("glLinkProgram"),
		glListBase:                            getProcAddr("glListBase"),
		glLoadIdentity:                        getProcAddr("glLoadIdentity"),
		glLoadMatrixd:                         getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:                         getProcAddr("glLoadMatrixf"),
		glLoadName:                            getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:                getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:                getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                             getProcAddr("glLogicOp"),
		glMap1d:                               getProcAddr("glMap1d"),
		glMap1f:                               getProcAddr("glMap1f"),
		glMap2d:                               getProcAddr("glMap2d"),
		glMap2f:                               getProcAddr("glMap2f"),
		glMapBuffer:                           getProcAddr("glMapBuffer"),
		glMapBufferRange:                      getProcAddr("glMapBufferRange"),
		glMapGrid1d:                           getProcAddr("glMapGrid1d"),
		glMapGrid1f:                           getProcAddr("glMapGrid1f"),
		glMapGrid2d:                           getProcAddr("glMapGrid2d"),
		glMapGrid2f:                           getProcAddr("glMapGrid2f"),
		glMaterialf:                           getProcAddr("glMaterialf"),
		glMaterialfv:                          getProcAddr("glMaterialfv"),
		glMateriali:                           getProcAddr("glMateriali"),
		glMaterialiv:                          getProcAddr("glMaterialiv"),
		glMatrixMode:                          getProcAddr("glMatrixMode"),
		glMultMatrixd:                         getProcAddr("glMultMatrixd"),
		glMultMatrixf:                         getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:                getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:                getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:                     getProcAddr("glMultiDrawArrays"),
		glMultiDrawElements:                   getProcAddr("glMultiDrawElements"),
		glMultiDrawElementsBaseVertex:         getProcAddr("glMultiDrawElementsBaseVertex"),
		glMultiTexCoord1d:                     getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:                    getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:                     getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:                    getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:                     getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:                    getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:                     getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:                    getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:                     getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:                    getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:                     getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:                    getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:                     getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:                    getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:                     getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:                    getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:                     getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:                    getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:                     getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:                    getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:                     getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:                    getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:                     getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:                    getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:                     getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:                    getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:                     getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:                    getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:                     getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:                    getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:                     getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:                    getProcAddr("glMultiTexCoord4sv"),
		glNewList:                             getProcAddr("glNewList"),
		glNormal3b:                            getProcAddr("glNormal3b"),
		glNormal3bv:                           getProcAddr("glNormal3bv"),
		glNormal3d:                            getProcAddr("glNormal3d"),
		glNormal3dv:                           getProcAddr("glNormal3dv"),
		glNormal3f:                            getProcAddr("glNormal3f"),
		glNormal3fv:                           getProcAddr("glNormal3fv"),
		glNormal3i:                            getProcAddr("glNormal3i"),
		glNormal3iv:                           getProcAddr("glNormal3iv"),
		glNormal3s:                            getProcAddr("glNormal3s"),
		glNormal3sv:                           getProcAddr("glNormal3sv"),
		glNormalPointer:                       getProcAddr("glNormalPointer"),
		glOrtho:                               getProcAddr("glOrtho"),
		glPassThrough:                         getProcAddr("glPassThrough"),
		glPixelMapfv:                          getProcAddr("glPixelMapfv"),
		glPixelMapuiv:                         getProcAddr("glPixelMapuiv"),
		glPixelMapusv:                         getProcAddr("glPixelMapusv"),
		glPixelStoref:                         getProcAddr("glPixelStoref"),
		glPixelStorei:                         getProcAddr("glPixelStorei"),
		glPixelTransferf:                      getProcAddr("glPixelTransferf"),
		glPixelTransferi:                      getProcAddr("glPixelTransferi"),
		glPixelZoom:                           getProcAddr("glPixelZoom"),
		glPointParameterf:                     getProcAddr("glPointParameterf"),
		glPointParameterfv:                    getProcAddr("glPointParameterfv"),
		glPointParameteri:                     getProcAddr("glPointParameteri"),
		glPointParameteriv:                    getProcAddr("glPointParameteriv"),
		glPointSize:                           getProcAddr("glPointSize"),
		glPolygonMode:                         getProcAddr("glPolygonMode"),
		glPolygonOffset:                       getProcAddr("glPolygonOffset"),
		glPolygonStipple:                      getProcAddr("glPolygonStipple"),
		glPopAttrib:                           getProcAddr("glPopAttrib"),
		glPopClientAttrib:                     getProcAddr("glPopClientAttrib"),
		glPopMatrix:                           getProcAddr("glPopMatrix"),
		glPopName:                             getProcAddr("glPopName"),
		glPrimitiveRestartIndex:               getProcAddr("glPrimitiveRestartIndex"),
		glPrioritizeTextures:                  getProcAddr("glPrioritizeTextures"),
		glProvokingVertex:                     getProcAddr("glProvokingVertex"),
		glPushAttrib:                          getProcAddr("glPushAttrib"),
		glPushClientAttrib:                    getProcAddr("glPushClientAttrib"),
		glPushMatrix:                          getProcAddr("glPushMatrix"),
		glPushName:                            getProcAddr("glPushName"),
		glRasterPos2d:                         getProcAddr("glRasterPos2d"),
		glRasterPos2dv:                        getProcAddr("glRasterPos2dv"),
		glRasterPos2f:                         getProcAddr("glRasterPos2f"),
		glRasterPos2fv:                        getProcAddr("glRasterPos2fv"),
		glRasterPos2i:                         getProcAddr("glRasterPos2i"),
		glRasterPos2iv:                        getProcAddr("glRasterPos2iv"),
		glRasterPos2s:                         getProcAddr("glRasterPos2s"),
		glRasterPos2sv:                        getProcAddr("glRasterPos2sv"),
		glRasterPos3d:                         getProcAddr("glRasterPos3d"),
		glRasterPos3dv:                        getProcAddr("glRasterPos3dv"),
		glRasterPos3f:                         getProcAddr("glRasterPos3f"),
		glRasterPos3fv:                        getProcAddr("glRasterPos3fv"),
		glRasterPos3i:                         getProcAddr("glRasterPos3i"),
		glRasterPos3iv:                        getProcAddr("glRasterPos3iv"),
		glRasterPos3s:                         getProcAddr("glRasterPos3s"),
		glRasterPos3sv:                        getProcAddr("glRasterPos3sv"),
		glRasterPos4d:                         getProcAddr("glRasterPos4d"),
		glRasterPos4dv:                        getProcAddr("glRasterPos4dv"),
		glRasterPos4f:                         getProcAddr("glRasterPos4f"),
		glRasterPos4fv:                        getProcAddr("glRasterPos4fv"),
		glRasterPos4i:                         getProcAddr("glRasterPos4i"),
		glRasterPos4iv:                        getProcAddr("glRasterPos4iv"),
		glRasterPos4s:                         getProcAddr("glRasterPos4s"),
		glRasterPos4sv:                        getProcAddr("glRasterPos4sv"),
		glReadBuffer:                          getProcAddr("glReadBuffer"),
		glReadPixels:                          getProcAddr("glReadPixels"),
		glRectd:                               getProcAddr("glRectd"),
		glRectdv:                              getProcAddr("glRectdv"),
		glRectf:                               getProcAddr("glRectf"),
		glRectfv:                              getProcAddr("glRectfv"),
		glRecti:                               getProcAddr("glRecti"),
		glRectiv:                              getProcAddr("glRectiv"),
		glRects:                               getProcAddr("glRects"),
		glRectsv:                              getProcAddr("glRectsv"),
		glRenderMode:                          getProcAddr("glRenderMode"),
		glRenderbufferStorage:                 getProcAddr("glRenderbufferStorage"),
		glRenderbufferStorageMultisample:      getProcAddr("glRenderbufferStorageMultisample"),
		glRotated:                             getProcAddr("glRotated"),
		glRotatef:                             getProcAddr("glRotatef"),
		glSampleCoverage:                      getProcAddr("glSampleCoverage"),
		glSampleMaski:                         getProcAddr("glSampleMaski"),
		glScaled:                              getProcAddr("glScaled"),
		glScalef:                              getProcAddr("glScalef"),
		glScissor:                             getProcAddr("glScissor"),
		glSecondaryColor3b:                    getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:                   getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:                    getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:                   getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:                    getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:                   getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:                    getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:                   getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:                    getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:                   getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:                   getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:                  getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:                   getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:                  getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:                   getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:                  getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorPointer:               getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:                        getProcAddr("glSelectBuffer"),
		glShadeModel:                          getProcAddr("glShadeModel"),
		glShaderSource:                        getProcAddr("glShaderSource"),
		glStencilFunc:                         getProcAddr("glStencilFunc"),
		glStencilFuncSeparate:                 getProcAddr("glStencilFuncSeparate"),
		glStencilMask:                         getProcAddr("glStencilMask"),
		glStencilMaskSeparate:                 getProcAddr("glStencilMaskSeparate"),
		glStencilOp:                           getProcAddr("glStencilOp"),
		glStencilOpSeparate:                   getProcAddr("glStencilOpSeparate"),
		glTexBuffer:                           getProcAddr("glTexBuffer"),
		glTexCoord1d:                          getProcAddr("glTexCoord1d"),
		glTexCoord1dv:                         getProcAddr("glTexCoord1dv"),
		glTexCoord1f:                          getProcAddr("glTexCoord1f"),
		glTexCoord1fv:                         getProcAddr("glTexCoord1fv"),
		glTexCoord1i:                          getProcAddr("glTexCoord1i"),
		glTexCoord1iv:                         getProcAddr("glTexCoord1iv"),
		glTexCoord1s:                          getProcAddr("glTexCoord1s"),
		glTexCoord1sv:                         getProcAddr("glTexCoord1sv"),
		glTexCoord2d:                          getProcAddr("glTexCoord2d"),
		glTexCoord2dv:                         getProcAddr("glTexCoord2dv"),
		glTexCoord2f:                          getProcAddr("glTexCoord2f"),
		glTexCoord2fv:                         getProcAddr("glTexCoord2fv"),
		glTexCoord2i:                          getProcAddr("glTexCoord2i"),
		glTexCoord2iv:                         getProcAddr("glTexCoord2iv"),
		glTexCoord2s:                          getProcAddr("glTexCoord2s"),
		glTexCoord2sv:                         getProcAddr("glTexCoord2sv"),
		glTexCoord3d:                          getProcAddr("glTexCoord3d"),
		glTexCoord3dv:                         getProcAddr("glTexCoord3dv"),
		glTexCoord3f:                          getProcAddr("glTexCoord3f"),
		glTexCoord3fv:                         getProcAddr("glTexCoord3fv"),
		glTexCoord3i:                          getProcAddr("glTexCoord3i"),
		glTexCoord3iv:                         getProcAddr("glTexCoord3iv"),
		glTexCoord3s:                          getProcAddr("glTexCoord3s"),
		glTexCoord3sv:                         getProcAddr("glTexCoord3sv"),
		glTexCoord4d:                          getProcAddr("glTexCoord4d"),
		glTexCoord4dv:                         getProcAddr("glTexCoord4dv"),
		glTexCoord4f:                          getProcAddr("glTexCoord4f"),
		glTexCoord4fv:                         getProcAddr("glTexCoord4fv"),
		glTexCoord4i:                          getProcAddr("glTexCoord4i"),
		glTexCoord4iv:                         getProcAddr("glTexCoord4iv"),
		glTexCoord4s:                          getProcAddr("glTexCoord4s"),
		glTexCoord4sv:                         getProcAddr("glTexCoord4sv"),
		glTexCoordPointer:                     getProcAddr("glTexCoordPointer"),
		glTexEnvf:                             getProcAddr("glTexEnvf"),
		glTexEnvfv:                            getProcAddr("glTexEnvfv"),
		glTexEnvi:                             getProcAddr("glTexEnvi"),
		glTexEnviv:                            getProcAddr("glTexEnviv"),
		glTexGend:                             getProcAddr("glTexGend"),
		glTexGendv:                            getProcAddr("glTexGendv"),
		glTexGenf:                             getProcAddr("glTexGenf"),
		glTexGenfv:                            getProcAddr("glTexGenfv"),
		glTexGeni:                             getProcAddr("glTexGeni"),
		glTexGeniv:                            getProcAddr("glTexGeniv"),
		glTexImage1D:                          getProcAddr("glTexImage1D"),
		glTexImage2D:                          getProcAddr("glTexImage2D"),
		glTexImage2DMultisample:               getProcAddr("glTexImage2DMultisample"),
		glTexImage3D:                          getProcAddr("glTexImage3D"),
		glTexImage3DMultisample:               getProcAddr("glTexImage3DMultisample"),
		glTexParameterIiv:                     getProcAddr("glTexParameterIiv"),
		glTexParameterIuiv:                    getProcAddr("glTexParameterIuiv"),
		glTexParameterf:                       getProcAddr("glTexParameterf"),
		glTexParameterfv:                      getProcAddr("glTexParameterfv"),
		glTexParameteri:                       getProcAddr("glTexParameteri"),
		glTexParameteriv:                      getProcAddr("glTexParameteriv"),
		glTexSubImage1D:                       getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:                       getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:                       getProcAddr("glTexSubImage3D"),
		glTransformFeedbackVaryings:           getProcAddr("glTransformFeedbackVaryings"),
		glTranslated:                          getProcAddr("glTranslated"),
		glTranslatef:                          getProcAddr("glTranslatef"),
		glUniform1f:                           getProcAddr("glUniform1f"),
		glUniform1fv:                          getProcAddr("glUniform1fv"),
		glUniform1i:                           getProcAddr("glUniform1i"),
		glUniform1iv:                          getProcAddr("glUniform1iv"),
		glUniform1ui:                          getProcAddr("glUniform1ui"),
		glUniform1uiv:                         getProcAddr("glUniform1uiv"),
		glUniform2f:                           getProcAddr("glUniform2f"),
		glUniform2fv:                          getProcAddr("glUniform2fv"),
		glUniform2i:                           getProcAddr("glUniform2i"),
		glUniform2iv:                          getProcAddr("glUniform2iv"),
		glUniform2ui:                          getProcAddr("glUniform2ui"),
		glUniform2uiv:                         getProcAddr("glUniform2uiv"),
		glUniform3f:                           getProcAddr("glUniform3f"),
		glUniform3fv:                          getProcAddr("glUniform3fv"),
		glUniform3i:                           getProcAddr("glUniform3i"),
		glUniform3iv:                          getProcAddr("glUniform3iv"),
		glUniform3ui:                          getProcAddr("glUniform3ui"),
		glUniform3uiv:                         getProcAddr("glUniform3uiv"),
		glUniform4f:                           getProcAddr("glUniform4f"),
		glUniform4fv:                          getProcAddr("glUniform4fv"),
		glUniform4i:                           getProcAddr("glUniform4i"),
		glUniform4iv:                          getProcAddr("glUniform4iv"),
		glUniform4ui:                          getProcAddr("glUniform4ui"),
		glUniform4uiv:                         getProcAddr("glUniform4uiv"),
		glUniformBlockBinding:                 getProcAddr("glUniformBlockBinding"),
		glUniformMatrix2fv:                    getProcAddr("glUniformMatrix2fv"),
		glUniformMatrix2x3fv:                  getProcAddr("glUniformMatrix2x3fv"),
		glUniformMatrix2x4fv:                  getProcAddr("glUniformMatrix2x4fv"),
		glUniformMatrix3fv:                    getProcAddr("glUniformMatrix3fv"),
		glUniformMatrix3x2fv:                  getProcAddr("glUniformMatrix3x2fv"),
		glUniformMatrix3x4fv:                  getProcAddr("glUniformMatrix3x4fv"),
		glUniformMatrix4fv:                    getProcAddr("glUniformMatrix4fv"),
		glUniformMatrix4x2fv:                  getProcAddr("glUniformMatrix4x2fv"),
		glUniformMatrix4x3fv:                  getProcAddr("glUniformMatrix4x3fv"),
		glUnmapBuffer:                         getProcAddr("glUnmapBuffer"),
		glUseProgram:                          getProcAddr("glUseProgram"),
		glValidateProgram:                     getProcAddr("glValidateProgram"),
		glVertex2d:                            getProcAddr("glVertex2d"),
		glVertex2dv:                           getProcAddr("glVertex2dv"),
		glVertex2f:                            getProcAddr("glVertex2f"),
		glVertex2fv:                           getProcAddr("glVertex2fv"),
		glVertex2i:                            getProcAddr("glVertex2i"),
		glVertex2iv:                           getProcAddr("glVertex2iv"),
		glVertex2s:                            getProcAddr("glVertex2s"),
		glVertex2sv:                           getProcAddr("glVertex2sv"),
		glVertex3d:                            getProcAddr("glVertex3d"),
		glVertex3dv:                           getProcAddr("glVertex3dv"),
		glVertex3f:                            getProcAddr("glVertex3f"),
		glVertex3fv:                           getProcAddr("glVertex3fv"),
		glVertex3i:                            getProcAddr("glVertex3i"),
		glVertex3iv:                           getProcAddr("glVertex3iv"),
		glVertex3s:                            getProcAddr("glVertex3s"),
		glVertex3sv:                           getProcAddr("glVertex3sv"),
		glVertex4d:                            getProcAddr("glVertex4d"),
		glVertex4dv:                           getProcAddr("glVertex4dv"),
		glVertex4f:                            getProcAddr("glVertex4f"),
		glVertex4fv:                           getProcAddr("glVertex4fv"),
		glVertex4i:                            getProcAddr("glVertex4i"),
		glVertex4iv:                           getProcAddr("glVertex4iv"),
		glVertex4s:                            getProcAddr("glVertex4s"),
		glVertex4sv:                           getProcAddr("glVertex4sv"),
		glVertexAttrib1d:                      getProcAddr("glVertexAttrib1d"),
		glVertexAttrib1dv:                     getProcAddr("glVertexAttrib1dv"),
		glVertexAttrib1f:                      getProcAddr("glVertexAttrib1f"),
		glVertexAttrib1fv:                     getProcAddr("glVertexAttrib1fv"),
		glVertexAttrib1s:                      getProcAddr("glVertexAttrib1s"),
		glVertexAttrib1sv:                     getProcAddr("glVertexAttrib1sv"),
		glVertexAttrib2d:                      getProcAddr("glVertexAttrib2d"),
		glVertexAttrib2dv:                     getProcAddr("glVertexAttrib2dv"),
		glVertexAttrib2f:                      getProcAddr("glVertexAttrib2f"),
		glVertexAttrib2fv:                     getProcAddr("glVertexAttrib2fv"),
		glVertexAttrib2s:                      getProcAddr("glVertexAttrib2s"),
		glVertexAttrib2sv:                     getProcAddr("glVertexAttrib2sv"),
		glVertexAttrib3d:                      getProcAddr("glVertexAttrib3d"),
		glVertexAttrib3dv:                     getProcAddr("glVertexAttrib3dv"),
		glVertexAttrib3f:                      getProcAddr("glVertexAttrib3f"),
		glVertexAttrib3fv:                     getProcAddr("glVertexAttrib3fv"),
		glVertexAttrib3s:                      getProcAddr("glVertexAttrib3s"),
		glVertexAttrib3sv:                     getProcAddr("glVertexAttrib3sv"),
		glVertexAttrib4Nbv:                    getProcAddr("glVertexAttrib4Nbv"),
		glVertexAttrib4Niv:                    getProcAddr("glVertexAttrib4Niv"),
		glVertexAttrib4Nsv:                    getProcAddr("glVertexAttrib4Nsv"),
		glVertexAttrib4Nub:                    getProcAddr("glVertexAttrib4Nub"),
		glVertexAttrib4Nubv:                   getProcAddr("glVertexAttrib4Nubv"),
		glVertexAttrib4Nuiv:                   getProcAddr("glVertexAttrib4Nuiv"),
		glVertexAttrib4Nusv:                   getProcAddr("glVertexAttrib4Nusv"),
		glVertexAttrib4bv:                     getProcAddr("glVertexAttrib4bv"),
		glVertexAttrib4d:                      getProcAddr("glVertexAttrib4d"),
		glVertexAttrib4dv:                     getProcAddr("glVertexAttrib4dv"),
		glVertexAttrib4f:                      getProcAddr("glVertexAttrib4f"),
		glVertexAttrib4fv:                     getProcAddr("glVertexAttrib4fv"),
		glVertexAttrib4iv:                     getProcAddr("glVertexAttrib4iv"),
		glVertexAttrib4s:                      getProcAddr("glVertexAttrib4s"),
		glVertexAttrib4sv:                     getProcAddr("glVertexAttrib4sv"),
		glVertexAttrib4ubv:                    getProcAddr("glVertexAttrib4ubv"),
		glVertexAttrib4uiv:                    getProcAddr("glVertexAttrib4uiv"),
		glVertexAttrib4usv:                    getProcAddr("glVertexAttrib4usv"),
		glVertexAttribI1i:                     getProcAddr("glVertexAttribI1i"),
		glVertexAttribI1iv:                    getProcAddr("glVertexAttribI1iv"),
		glVertexAttribI1ui:                    getProcAddr("glVertexAttribI1ui"),
		glVertexAttribI1uiv:                   getProcAddr("glVertexAttribI1uiv"),
		glVertexAttribI2i:                     getProcAddr("glVertexAttribI2i"),
		glVertexAttribI2iv:                    getProcAddr("glVertexAttribI2iv"),
		glVertexAttribI2ui:                    getProcAddr("glVertexAttribI2ui"),
		glVertexAttribI2uiv:                   getProcAddr("glVertexAttribI2uiv"),
		glVertexAttribI3i:                     getProcAddr("glVertexAttribI3i"),
		glVertexAttribI3iv:                    getProcAddr("glVertexAttribI3iv"),
		glVertexAttribI3ui:                    getProcAddr("glVertexAttribI3ui"),
		glVertexAttribI3uiv:                   getProcAddr("glVertexAttribI3uiv"),
		glVertexAttribI4bv:                    getProcAddr("glVertexAttribI4bv"),
		glVertexAttribI4i:                     getProcAddr("glVertexAttribI4i"),
		glVertexAttribI4iv:                    getProcAddr("glVertexAttribI4iv"),
		glVertexAttribI4sv:                    getProcAddr("glVertexAttribI4sv"),
		glVertexAttribI4ubv:                   getProcAddr("glVertexAttribI4ubv"),
		glVertexAttribI4ui:                    getProcAddr("glVertexAttribI4ui"),
		glVertexAttribI4uiv:                   getProcAddr("glVertexAttribI4uiv"),
		glVertexAttribI4usv:                   getProcAddr("glVertexAttribI4usv"),
		glVertexAttribIPointer:                getProcAddr("glVertexAttribIPointer"),
		glVertexAttribPointer:                 getProcAddr("glVertexAttribPointer"),
		glVertexPointer:                       getProcAddr("glVertexPointer"),
		glViewport:                            getProcAddr("glViewport"),
		glWaitSync:                            getProcAddr("glWaitSync"),
		glWindowPos2d:                         getProcAddr("glWindowPos2d"),
		glWindowPos2dv:                        getProcAddr("glWindowPos2dv"),
		glWindowPos2f:                         getProcAddr("glWindowPos2f"),
		glWindowPos2fv:                        getProcAddr("glWindowPos2fv"),
		glWindowPos2i:                         getProcAddr("glWindowPos2i"),
		glWindowPos2iv:                        getProcAddr("glWindowPos2iv"),
		glWindowPos2s:                         getProcAddr("glWindowPos2s"),
		glWindowPos2sv:                        getProcAddr("glWindowPos2sv"),
		glWindowPos3d:                         getProcAddr("glWindowPos3d"),
		glWindowPos3dv:                        getProcAddr("glWindowPos3dv"),
		glWindowPos3f:                         getProcAddr("glWindowPos3f"),
		glWindowPos3fv:                        getProcAddr("glWindowPos3fv"),
		glWindowPos3i:                         getProcAddr("glWindowPos3i"),
		glWindowPos3iv:                        getProcAddr("glWindowPos3iv"),
		glWindowPos3s:                         getProcAddr("glWindowPos3s"),
		glWindowPos3sv:                        getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL330 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	AttachShader(program uint32, shader uint32)
	Begin(mode uint32)
	BeginConditionalRender(id uint32, mode uint32)
	BeginQuery(target uint32, id uint32)
	BeginTransformFeedback(primitiveMode uint32)
	BindAttribLocation(program uint32, index uint32, name *uint8)
	BindBuffer(target uint32, buffer uint32)
	BindBufferBase(target uint32, index uint32, buffer uint32)
	BindBufferRange(target uint32, index uint32, buffer uint32, offset uintptr, size int)
	BindFragDataLocation(program uint32, color uint32, name *uint8)
	BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *uint8)
	BindFramebuffer(target uint32, framebuffer uint32)
	BindRenderbuffer(target uint32, renderbuffer uint32)
	BindSampler(unit uint32, sampler uint32)
	BindTexture(target uint32, texture uint32)
	BindVertexArray(array uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	CheckFramebufferStatus(target uint32) uint32
	ClampColor(target uint32, clamp uint32)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32)
	ClearBufferfv(buffer uint32, drawbuffer int32, value *float32)
	ClearBufferiv(buffer uint32, drawbuffer int32, value *int32)
	ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClientActiveTexture(texture uint32)
	ClientWaitSync(sync GLsync, flags uint32, timeout uint64) uint32
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaski(index uint32, r bool, g bool, b bool, a bool)
	ColorMaterial(face uint32, mode uint32)
	ColorP3ui(type_ uint32, color uint32)
	ColorP3uiv(type_ uint32, color *uint32)
	ColorP4ui(type_ uint32, color uint32)
	ColorP4uiv(type_ uint32, color *uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompileShader(shader uint32)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset uintptr, writeOffset uintptr, size int)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CreateProgram() uint32
	CreateShader(type_ uint32) uint32
	CullFace(mode uint32)
	DeleteBuffers(n int32, buffers *uint32)
	DeleteFramebuffers(n int32, framebuffers *uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteProgram(program uint32)
	DeleteQueries(n int32, ids *uint32)
	DeleteRenderbuffers(n int32, renderbuffers *uint32)
	DeleteSamplers(count int32, samplers *uint32)
	DeleteShader(shader uint32)
	DeleteSync(sync GLsync)
	DeleteTextures(n int32, textures *uint32)
	DeleteVertexArrays(n int32, arrays *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	DetachShader(program uint32, shader uint32)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DisableVertexAttribArray(index uint32)
	Disablei(target uint32, index uint32)
	DrawArrays(mode uint32, first int32, count int32)
	DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32)
	DrawBuffer(buf uint32)
	DrawBuffers(n int32, bufs *uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawElementsBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawElementsInstanced(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32)
	DrawElementsInstancedBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawRangeElementsBaseVertex(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	EnableVertexAttribArray(index uint32)
	Enablei(target uint32, index uint32)
	End()
	EndConditionalRender()
	EndList()
	EndQuery(target uint32)
	EndTransformFeedback()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	FenceSync(condition uint32, flags uint32) GLsync
	Finish()
	Flush()
	FlushMappedBufferRange(target uint32, offset uintptr, length int)
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	FramebufferTexture(target uint32, attachment uint32, texture uint32, level int32)
	FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32)
	FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenBuffers(n int32, buffers *uint32)
	GenFramebuffers(n int32, framebuffers *uint32)
	GenLists(range_ int32) uint32
	GenQueries(n int32, ids *uint32)
	GenRenderbuffers(n int32, renderbuffers *uint32)
	GenSamplers(count int32, samplers *uint32)
	GenTextures(n int32, textures *uint32)
	GenVertexArrays(n int32, arrays *uint32)
	GenerateMipmap(target uint32)
	GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *uint8)
	GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32)
	GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *uint8)
	GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32)
	GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)
	GetAttribLocation(program uint32, name *uint8) int32
	GetBooleani_v(target uint32, index uint32, data *bool)
	GetBooleanv(pname uint32, data *bool)
	GetBufferParameteri64v(target uint32, pname uint32, params *int64)
	GetBufferParameteriv(target uint32, pname uint32, params *int32)
	GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)
	GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloatv(pname uint32, data *float32)
	GetFragDataIndex(program uint32, name *uint8) int32
	GetFragDataLocation(program uint32, name *uint8) int32
	GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32)
	GetInteger64i_v(target uint32, index uint32, data *int64)
	GetInteger64v(pname uint32, data *int64)
	GetIntegeri_v(target uint32, index uint32, data *int32)
	GetIntegerv(pname uint32, data *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetMultisamplefv(pname uint32, index uint32, val *float32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramiv(program uint32, pname uint32, params *int32)
	GetQueryObjecti64v(id uint32, pname uint32, params *int64)
	GetQueryObjectiv(id uint32, pname uint32, params *int32)
	GetQueryObjectui64v(id uint32, pname uint32, params *uint64)
	GetQueryObjectuiv(id uint32, pname uint32, params *uint32)
	GetQueryiv(target uint32, pname uint32, params *int32)
	GetRenderbufferParameteriv(target uint32, pname uint32, params *int32)
	GetSamplerParameterIiv(sampler uint32, pname uint32, params *int32)
	GetSamplerParameterIuiv(sampler uint32, pname uint32, params *uint32)
	GetSamplerParameterfv(sampler uint32, pname uint32, params *float32)
	GetSamplerParameteriv(sampler uint32, pname uint32, params *int32)
	GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8)
	GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8)
	GetShaderiv(shader uint32, pname uint32, params *int32)
	GetString(name uint32) *uint8
	GetStringi(name uint32, index uint32) *uint8
	GetSynciv(sync GLsync, pname uint32, count int32, length *int32, values *int32)
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterIiv(target uint32, pname uint32, params *int32)
	GetTexParameterIuiv(target uint32, pname uint32, params *uint32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetUniformBlockIndex(program uint32, uniformBlockName *uint8) uint32
	GetUniformIndices(program uint32, uniformCount int32, uniformNames **uint8, uniformIndices *uint32)
	GetUniformLocation(program uint32, name *uint8) int32
	GetUniformfv(program uint32, location int32, params *float32)
	GetUniformiv(program uint32, location int32, params *int32)
	GetUniformuiv(program uint32, location int32, params *uint32)
	GetVertexAttribIiv(index uint32, pname uint32, params *int32)
	GetVertexAttribIuiv(index uint32, pname uint32, params *uint32)
	GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)
	GetVertexAttribdv(index uint32, pname uint32, params *float64)
	GetVertexAttribfv(index uint32, pname uint32, params *float32)
	GetVertexAttribiv(index uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	IsBuffer(buffer uint32) bool
	IsEnabled(cap uint32) bool
	IsEnabledi(target uint32, index uint32) bool
	IsFramebuffer(framebuffer uint32) bool
	IsList(list uint32) bool
	IsProgram(program uint32) bool
	IsQuery(id uint32) bool
	IsRenderbuffer(renderbuffer uint32) bool
	IsSampler(sampler uint32) bool
	IsShader(shader uint32) bool
	IsSync(sync GLsync) bool
	IsTexture(texture uint32) bool
	IsVertexArray(array uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	LinkProgram(program uint32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapBuffer(target uint32, access uint32) unsafe.Pointer
	MapBufferRange(target uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiDrawElementsBaseVertex(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	MultiTexCoordP1ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP1uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP2ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP2uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP3ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP3uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP4ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP4uiv(texture uint32, type_ uint32, coords *uint32)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalP3ui(type_ uint32, coords uint32)
	NormalP3uiv(type_ uint32, coords *uint32)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopMatrix()
	PopName()
	PrimitiveRestartIndex(index uint32)
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	ProvokingVertex(mode uint32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	QueryCounter(id uint32, target uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	RenderMode(mode uint32) int32
	RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32)
	RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32)
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	SampleMaski(maskNumber uint32, mask uint32)
	SamplerParameterIiv(sampler uint32, pname uint32, param *int32)
	SamplerParameterIuiv(sampler uint32, pname uint32, param *uint32)
	SamplerParameterf(sampler uint32, pname uint32, param float32)
	SamplerParameterfv(sampler uint32, pname uint32, param *float32)
	SamplerParameteri(sampler uint32, pname uint32, param int32)
	SamplerParameteriv(sampler uint32, pname uint32, param *int32)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorP3ui(type_ uint32, color uint32)
	SecondaryColorP3uiv(type_ uint32, color *uint32)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	ShaderSource(shader uint32, count int32, string **uint8, length *int32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilMaskSeparate(face uint32, mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)
	TexBuffer(target uint32, internalformat uint32, buffer uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordP1ui(type_ uint32, coords uint32)
	TexCoordP1uiv(type_ uint32, coords *uint32)
	TexCoordP2ui(type_ uint32, coords uint32)
	TexCoordP2uiv(type_ uint32, coords *uint32)
	TexCoordP3ui(type_ uint32, coords uint32)
	TexCoordP3uiv(type_ uint32, coords *uint32)
	TexCoordP4ui(type_ uint32, coords uint32)
	TexCoordP4uiv(type_ uint32, coords *uint32)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TexParameterIiv(target uint32, pname uint32, params *int32)
	TexParameterIuiv(target uint32, pname uint32, params *uint32)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TransformFeedbackVaryings(program uint32, count int32, varyings **uint8, bufferMode uint32)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Uniform1f(location int32, v0 float32)
	Uniform1fv(location int32, count int32, value *float32)
	Uniform1i(location int32, v0 int32)
	Uniform1iv(location int32, count int32, value *int32)
	Uniform1ui(location int32, v0 uint32)
	Uniform1uiv(location int32, count int32, value *uint32)
	Uniform2f(location int32, v0 float32, v1 float32)
	Uniform2fv(location int32, count int32, value *float32)
	Uniform2i(location int32, v0 int32, v1 int32)
	Uniform2iv(location int32, count int32, value *int32)
	Uniform2ui(location int32, v0 uint32, v1 uint32)
	Uniform2uiv(location int32, count int32, value *uint32)
	Uniform3f(location int32, v0 float32, v1 float32, v2 float32)
	Uniform3fv(location int32, count int32, value *float32)
	Uniform3i(location int32, v0 int32, v1 int32, v2 int32)
	Uniform3iv(location int32, count int32, value *int32)
	Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)
	Uniform3uiv(location int32, count int32, value *uint32)
	Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	Uniform4fv(location int32, count int32, value *float32)
	Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	Uniform4iv(location int32, count int32, value *int32)
	Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	Uniform4uiv(location int32, count int32, value *uint32)
	UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)
	UniformMatrix2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32)
	UnmapBuffer(target uint32) bool
	UseProgram(program uint32)
	ValidateProgram(program uint32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexAttrib1d(index uint32, x float64)
	VertexAttrib1dv(index uint32, v *float64)
	VertexAttrib1f(index uint32, x float32)
	VertexAttrib1fv(index uint32, v *float32)
	VertexAttrib1s(index uint32, x int16)
	VertexAttrib1sv(index uint32, v *int16)
	VertexAttrib2d(index uint32, x float64, y float64)
	VertexAttrib2dv(index uint32, v *float64)
	VertexAttrib2f(index uint32, x float32, y float32)
	VertexAttrib2fv(index uint32, v *float32)
	VertexAttrib2s(index uint32, x int16, y int16)
	VertexAttrib2sv(index uint32, v *int16)
	VertexAttrib3d(index uint32, x float64, y float64, z float64)
	VertexAttrib3dv(index uint32, v *float64)
	VertexAttrib3f(index uint32, x float32, y float32, z float32)
	VertexAttrib3fv(index uint32, v *float32)
	VertexAttrib3s(index uint32, x int16, y int16, z int16)
	VertexAttrib3sv(index uint32, v *int16)
	VertexAttrib4Nbv(index uint32, v *int8)
	VertexAttrib4Niv(index uint32, v *int32)
	VertexAttrib4Nsv(index uint32, v *int16)
	VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4Nubv(index uint32, v *uint8)
	VertexAttrib4Nuiv(index uint32, v *uint32)
	VertexAttrib4Nusv(index uint32, v *uint16)
	VertexAttrib4bv(index uint32, v *int8)
	VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dv(index uint32, v *float64)
	VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fv(index uint32, v *float32)
	VertexAttrib4iv(index uint32, v *int32)
	VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4sv(index uint32, v *int16)
	VertexAttrib4ubv(index uint32, v *uint8)
	VertexAttrib4uiv(index uint32, v *uint32)
	VertexAttrib4usv(index uint32, v *uint16)
	VertexAttribDivisor(index uint32, divisor uint32)
	VertexAttribI1i(index uint32, x int32)
	VertexAttribI1iv(index uint32, v *int32)
	VertexAttribI1ui(index uint32, x uint32)
	VertexAttribI1uiv(index uint32, v *uint32)
	VertexAttribI2i(index uint32, x int32, y int32)
	VertexAttribI2iv(index uint32, v *int32)
	VertexAttribI2ui(index uint32, x uint32, y uint32)
	VertexAttribI2uiv(index uint32, v *uint32)
	VertexAttribI3i(index uint32, x int32, y int32, z int32)
	VertexAttribI3iv(index uint32, v *int32)
	VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32)
	VertexAttribI3uiv(index uint32, v *uint32)
	VertexAttribI4bv(index uint32, v *int8)
	VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)
	VertexAttribI4iv(index uint32, v *int32)
	VertexAttribI4sv(index uint32, v *int16)
	VertexAttribI4ubv(index uint32, v *uint8)
	VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)
	VertexAttribI4uiv(index uint32, v *uint32)
	VertexAttribI4usv(index uint32, v *uint16)
	VertexAttribIPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribP1ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP1uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP2ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP2uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP3ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP3uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP4ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP4uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribPointer(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer)
	VertexP2ui(type_ uint32, value uint32)
	VertexP2uiv(type_ uint32, value *uint32)
	VertexP3ui(type_ uint32, value uint32)
	VertexP3uiv(type_ uint32, value *uint32)
	VertexP4ui(type_ uint32, value uint32)
	VertexP4uiv(type_ uint32, value *uint32)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	WaitSync(sync GLsync, flags uint32, timeout uint64)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New330(getProcAddr func(name string) unsafe.Pointer) GL330 {
	gl := &lib{
		glAccum:                               getProcAddr("glAccum"),
		glActiveTexture:                       getProcAddr("glActiveTexture"),
		glAlphaFunc:                           getProcAddr("glAlphaFunc"),
		glAreTexturesResident:                 getProcAddr("glAreTexturesResident"),
		glArrayElement:                        getProcAddr("glArrayElement"),
		glAttachShader:                        getProcAddr("glAttachShader"),
		glBegin:                               getProcAddr("glBegin"),
		glBeginConditionalRender:              getProcAddr("glBeginConditionalRender"),
		glBeginQuery:                          getProcAddr("glBeginQuery"),
		glBeginTransformFeedback:              getProcAddr("glBeginTransformFeedback"),
		glBindAttribLocation:                  getProcAddr("glBindAttribLocation"),
		glBindBuffer:                          getProcAddr("glBindBuffer"),
		glBindBufferBase:                      getProcAddr("glBindBufferBase"),
		glBindBufferRange:                     getProcAddr("glBindBufferRange"),
		glBindFragDataLocation:                getProcAddr("glBindFragDataLocation"),
		glBindFragDataLocationIndexed:         getProcAddr("glBindFragDataLocationIndexed"),
		glBindFramebuffer:                     getProcAddr("glBindFramebuffer"),
		glBindRenderbuffer:                    getProcAddr("glBindRenderbuffer"),
		glBindSampler:                         getProcAddr("glBindSampler"),
		glBindTexture:                         getProcAddr("glBindTexture"),
		glBindVertexArray:                     getProcAddr("glBindVertexArray"),
		glBitmap:                              getProcAddr("glBitmap"),
		glBlendColor:                          getProcAddr("glBlendColor"),
		glBlendEquation:                       getProcAddr("glBlendEquation"),
		glBlendEquationSeparate:               getProcAddr("glBlendEquationSeparate"),
		glBlendFunc:                           getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:                   getProcAddr("glBlendFuncSeparate"),
		glBlitFramebuffer:                     getProcAddr("glBlitFramebuffer"),
		glBufferData:                          getProcAddr("glBufferData"),
		glBufferSubData:                       getProcAddr("glBufferSubData"),
		glCallList:                            getProcAddr("glCallList"),
		glCallLists:                           getProcAddr("glCallLists"),
		glCheckFramebufferStatus:              getProcAddr("glCheckFramebufferStatus"),
		glClampColor:                          getProcAddr("glClampColor"),
		glClear:                               getProcAddr("glClear"),
		glClearAccum:                          getProcAddr("glClearAccum"),
		glClearBufferfi:                       getProcAddr("glClearBufferfi"),
		glClearBufferfv:                       getProcAddr("glClearBufferfv"),
		glClearBufferiv:                       getProcAddr("glClearBufferiv"),
		glClearBufferuiv:                      getProcAddr("glClearBufferuiv"),
		glClearColor:                          getProcAddr("glClearColor"),
		glClearDepth:                          getProcAddr("glClearDepth"),
		glClearIndex:                          getProcAddr("glClearIndex"),
		glClearStencil:                        getProcAddr("glClearStencil"),
		glClientActiveTexture:                 getProcAddr("glClientActiveTexture"),
		glClientWaitSync:                      getProcAddr("glClientWaitSync"),
		glClipPlane:                           getProcAddr("glClipPlane"),
		glColor3b:                             getProcAddr("glColor3b"),
		glColor3bv:                            getProcAddr("glColor3bv"),
		glColor3d:                             getProcAddr("glColor3d"),
		glColor3dv:                            getProcAddr("glColor3dv"),
		glColor3f:                             getProcAddr("glColor3f"),
		glColor3fv:                            getProcAddr("glColor3fv"),
		glColor3i:                             getProcAddr("glColor3i"),
		glColor3iv:                            getProcAddr("glColor3iv"),
		glColor3s:                             getProcAddr("glColor3s"),
		glColor3sv:                            getProcAddr("glColor3sv"),
		glColor3ub:                            getProcAddr("glColor3ub"),
		glColor3ubv:                           getProcAddr("glColor3ubv"),
		glColor3ui:                            getProcAddr("glColor3ui"),
		glColor3uiv:                           getProcAddr("glColor3uiv"),
		glColor3us:                            getProcAddr("glColor3us"),
		glColor3usv:                           getProcAddr("glColor3usv"),
		glColor4b:                             getProcAddr("glColor4b"),
		glColor4bv:                            getProcAddr("glColor4bv"),
		glColor4d:                             getProcAddr("glColor4d"),
		glColor4dv:                            getProcAddr("glColor4dv"),
		glColor4f:                             getProcAddr("glColor4f"),
		glColor4fv:                            getProcAddr("glColor4fv"),
		glColor4i:                             getProcAddr("glColor4i"),
		glColor4iv:                            getProcAddr("glColor4iv"),
		glColor4s:                             getProcAddr("glColor4s"),
		glColor4sv:                            getProcAddr("glColor4sv"),
		glColor4ub:                            getProcAddr("glColor4ub"),
		glColor4ubv:                           getProcAddr("glColor4ubv"),
		glColor4ui:                            getProcAddr("glColor4ui"),
		glColor4uiv:                           getProcAddr("glColor4uiv"),
		glColor4us:                            getProcAddr("glColor4us"),
		glColor4usv:                           getProcAddr("glColor4usv"),
		glColorMask:                           getProcAddr("glColorMask"),
		glColorMaski:                          getProcAddr("glColorMaski"),
		glColorMaterial:                       getProcAddr("glColorMaterial"),
		glColorP3ui:                           getProcAddr("glColorP3ui"),
		glColorP3uiv:                          getProcAddr("glColorP3uiv"),
		glColorP4ui:                           getProcAddr("glColorP4ui"),
		glColorP4uiv:                          getProcAddr("glColorP4uiv"),
		glColorPointer:                        getProcAddr("glColorPointer"),
		glCompileShader:                       getProcAddr("glCompileShader"),
		glCompressedTexImage1D:                getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:                getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:                getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D:             getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D:             getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D:             getProcAddr("glCompressedTexSubImage3D"),
		glCopyBufferSubData:                   getProcAddr("glCopyBufferSubData"),
		glCopyPixels:                          getProcAddr("glCopyPixels"),
		glCopyTexImage1D:                      getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:                      getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:                   getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:                   getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:                   getProcAddr("glCopyTexSubImage3D"),
		glCreateProgram:                       getProcAddr("glCreateProgram"),
		glCreateShader:                        getProcAddr("glCreateShader"),
		glCullFace:                            getProcAddr("glCullFace"),
		glDeleteBuffers:                       getProcAddr("glDeleteBuffers"),
		glDeleteFramebuffers:                  getProcAddr("glDeleteFramebuffers"),
		glDeleteLists:                         getProcAddr("glDeleteLists"),
		glDeleteProgram:                       getProcAddr("glDeleteProgram"),
		glDeleteQueries:                       getProcAddr("glDeleteQueries"),
		glDeleteRenderbuffers:                 getProcAddr("glDeleteRenderbuffers"),
		glDeleteSamplers:                      getProcAddr("glDeleteSamplers"),
		glDeleteShader:                        getProcAddr("glDeleteShader"),
		glDeleteSync:                          getProcAddr("glDeleteSync"),
		glDeleteTextures:                      getProcAddr("glDeleteTextures"),
		glDeleteVertexArrays:                  getProcAddr("glDeleteVertexArrays"),
		glDepthFunc:                           getProcAddr("glDepthFunc"),
		glDepthMask:                           getProcAddr("glDepthMask"),
		glDepthRange:                          getProcAddr("glDepthRange"),
		glDetachShader:                        getProcAddr("glDetachShader"),
		glDisable:                             getProcAddr("glDisable"),
		glDisableClientState:                  getProcAddr("glDisableClientState"),
		glDisableVertexAttribArray:            getProcAddr("glDisableVertexAttribArray"),
		glDisablei:                            getProcAddr("glDisablei"),
		glDrawArrays:                          getProcAddr("glDrawArrays"),
		glDrawArraysInstanced:                 getProcAddr("glDrawArraysInstanced"),
		glDrawBuffer:                          getProcAddr("glDrawBuffer"),
		glDrawBuffers:                         getProcAddr("glDrawBuffers"),
		glDrawElements:                        getProcAddr("glDrawElements"),
		glDrawElementsBaseVertex:              getProcAddr("glDrawElementsBaseVertex"),
		glDrawElementsInstanced:               getProcAddr("glDrawElementsInstanced"),
		glDrawElementsInstancedBaseVertex:     getProcAddr("glDrawElementsInstancedBaseVertex"),
		glDrawPixels:                          getProcAddr("glDrawPixels"),
		glDrawRangeElements:                   getProcAddr("glDrawRangeElements"),
		glDrawRangeElementsBaseVertex:         getProcAddr("glDrawRangeElementsBaseVertex"),
		glEdgeFlag:                            getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:                     getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:                           getProcAddr("glEdgeFlagv"),
		glEnable:                              getProcAddr("glEnable"),
		glEnableClientState:                   getProcAddr("glEnableClientState"),
		glEnableVertexAttribArray:             getProcAddr("glEnableVertexAttribArray"),
		glEnablei:                             getProcAddr("glEnablei"),
		glEnd:                                 getProcAddr("glEnd"),
		glEndConditionalRender:                getProcAddr("glEndConditionalRender"),
		glEndList:                             getProcAddr("glEndList"),
		glEndQuery:                            getProcAddr("glEndQuery"),
		glEndTransformFeedback:                getProcAddr("glEndTransformFeedback"),
		glEvalCoord1d:                         getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:                        getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:                         getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:                        getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:                         getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:                        getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:                         getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:                        getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:                           getProcAddr("glEvalMesh1"),
		glEvalMesh2:                           getProcAddr("glEvalMesh2"),
		glEvalPoint1:                          getProcAddr("glEvalPoint1"),
		glEvalPoint2:                          getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:                      getProcAddr("glFeedbackBuffer"),
		glFenceSync:                           getProcAddr("glFenceSync"),
		glFinish:                              getProcAddr("glFinish"),
		glFlush:                               getProcAddr("glFlush"),
		glFlushMappedBufferRange:              getProcAddr("glFlushMappedBufferRange"),
		glFogCoordPointer:                     getProcAddr("glFogCoordPointer"),
		glFogCoordd:                           getProcAddr("glFogCoordd"),
		glFogCoorddv:                          getProcAddr("glFogCoorddv"),
		glFogCoordf:                           getProcAddr("glFogCoordf"),
		glFogCoordfv:                          getProcAddr("glFogCoordfv"),
		glFogf:                                getProcAddr("glFogf"),
		glFogfv:                               getProcAddr("glFogfv"),
		glFogi:                                getProcAddr("glFogi"),
		glFogiv:                               getProcAddr("glFogiv"),
		glFramebufferRenderbuffer:             getProcAddr("glFramebufferRenderbuffer"),
		glFramebufferTexture:                  getProcAddr("glFramebufferTexture"),
		glFramebufferTexture1D:                getProcAddr("glFramebufferTexture1D"),
		glFramebufferTexture2D:                getProcAddr("glFramebufferTexture2D"),
		glFramebufferTexture3D:                getProcAddr("glFramebufferTexture3D"),
		glFramebufferTextureLayer:             getProcAddr("glFramebufferTextureLayer"),
		glFrontFace:                           getProcAddr("glFrontFace"),
		glFrustum:                             getProcAddr("glFrustum"),
		glGenBuffers:                          getProcAddr("glGenBuffers"),
		glGenFramebuffers:                     getProcAddr("glGenFramebuffers"),
		glGenLists:                            getProcAddr("glGenLists"),
		glGenQueries:                          getProcAddr("glGenQueries"),
		glGenRenderbuffers:                    getProcAddr("glGenRenderbuffers"),
		glGenSamplers:                         getProcAddr("glGenSamplers"),
		glGenTextures:                         getProcAddr("glGenTextures"),
		glGenVertexArrays:                     getProcAddr("glGenVertexArrays"),
		glGenerateMipmap:                      getProcAddr("glGenerateMipmap"),
		glGetActiveAttrib:                     getProcAddr("glGetActiveAttrib"),
		glGetActiveUniform:                    getProcAddr("glGetActiveUniform"),
		glGetActiveUniformBlockName:           getProcAddr("glGetActiveUniformBlockName"),
		glGetActiveUniformBlockiv:             getProcAddr("glGetActiveUniformBlockiv"),
		glGetActiveUniformName:                getProcAddr("glGetActiveUniformName"),
		glGetActiveUniformsiv:                 getProcAddr("glGetActiveUniformsiv"),
		glGetAttachedShaders:                  getProcAddr("glGetAttachedShaders"),
		glGetAttribLocation:                   getProcAddr("glGetAttribLocation"),
		glGetBooleani_v:                       getProcAddr("glGetBooleani_v"),
		glGetBooleanv:                         getProcAddr("glGetBooleanv"),
		glGetBufferParameteri64v:              getProcAddr("glGetBufferParameteri64v"),
		glGetBufferParameteriv:                getProcAddr("glGetBufferParameteriv"),
		glGetBufferPointerv:                   getProcAddr("glGetBufferPointerv"),
		glGetBufferSubData:                    getProcAddr("glGetBufferSubData"),
		glGetClipPlane:                        getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:               getProcAddr("glGetCompressedTexImage"),
		glGetDoublev:                          getProcAddr("glGetDoublev"),
		glGetError:                            getProcAddr("glGetError"),
		glGetFloatv:                           getProcAddr("glGetFloatv"),
		glGetFragDataIndex:                    getProcAddr("glGetFragDataIndex"),
		glGetFragDataLocation:                 getProcAddr("glGetFragDataLocation"),
		glGetFramebufferAttachmentParameteriv: getProcAddr("glGetFramebufferAttachmentParameteriv"),
		glGetInteger64i_v:                     getProcAddr("glGetInteger64i_v"),
		glGetInteger64v:                       getProcAddr("glGetInteger64v"),
		glGetIntegeri_v:                       getProcAddr("glGetIntegeri_v"),
		glGetIntegerv:                         getProcAddr("glGetIntegerv"),
		glGetLightfv:                          getProcAddr("glGetLightfv"),
		glGetLightiv:                          getProcAddr("glGetLightiv"),
		glGetMapdv:                            getProcAddr("glGetMapdv"),
		glGetMapfv:                            getProcAddr("glGetMapfv"),
		glGetMapiv:                            getProcAddr("glGetMapiv"),
		glGetMaterialfv:                       getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:                       getProcAddr("glGetMaterialiv"),
		glGetMultisamplefv:                    getProcAddr("glGetMultisamplefv"),
		glGetPixelMapfv:                       getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:                      getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:                      getProcAddr("glGetPixelMapusv"),
		glGetPointerv:                         getProcAddr("glGetPointerv"),
		glGetPolygonStipple:                   getProcAddr("glGetPolygonStipple"),
		glGetProgramInfoLog:                   getProcAddr("glGetProgramInfoLog"),
		glGetProgramiv:                        getProcAddr("glGetProgramiv"),
		glGetQueryObjecti64v:                  getProcAddr("glGetQueryObjecti64v"),
		glGetQueryObjectiv:                    getProcAddr("glGetQueryObjectiv"),
		glGetQueryObjectui64v:                 getProcAddr("glGetQueryObjectui64v"),
		glGetQueryObjectuiv:                   getProcAddr("glGetQueryObjectuiv"),
		glGetQueryiv:                          getProcAddr("glGetQueryiv"),
		glGetRenderbufferParameteriv:          getProcAddr("glGetRenderbufferParameteriv"),
		glGetSamplerParameterIiv:              getProcAddr("glGetSamplerParameterIiv"),
		glGetSamplerParameterIuiv:             getProcAddr("glGetSamplerParameterIuiv"),
		glGetSamplerParameterfv:               getProcAddr("glGetSamplerParameterfv"),
		glGetSamplerParameteriv:               getProcAddr("glGetSamplerParameteriv"),
		glGetShaderInfoLog:                    getProcAddr("glGetShaderInfoLog"),
		glGetShaderSource:                     getProcAddr("glGetShaderSource"),
		glGetShaderiv:                         getProcAddr("glGetShaderiv"),
		glGetString:                           getProcAddr("glGetString"),
		glGetStringi:                          getProcAddr("glGetStringi"),
		glGetSynciv:                           getProcAddr("glGetSynciv"),
		glGetTexEnvfv:                         getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:                         getProcAddr("glGetTexEnviv"),
		glGetTexGendv:                         getProcAddr("glGetTexGendv"),
		glGetTexGenfv:                         getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:                         getProcAddr("glGetTexGeniv"),
		glGetTexImage:                         getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:              getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:              getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterIiv:                  getProcAddr("glGetTexParameterIiv"),
		glGetTexParameterIuiv:                 getProcAddr("glGetTexParameterIuiv"),
		glGetTexParameterfv:                   getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:                   getProcAddr("glGetTexParameteriv"),
		glGetTransformFeedbackVarying:         getProcAddr("glGetTransformFeedbackVarying"),
		glGetUniformBlockIndex:                getProcAddr("glGetUniformBlockIndex"),
		glGetUniformIndices:                   getProcAddr("glGetUniformIndices"),
		glGetUniformLocation:                  getProcAddr("glGetUniformLocation"),
		glGetUniformfv:                        getProcAddr("glGetUniformfv"),
		glGetUniformiv:                        getProcAddr("glGetUniformiv"),
		glGetUniformuiv:                       getProcAddr("glGetUniformuiv"),
		glGetVertexAttribIiv:                  getProcAddr("glGetVertexAttribIiv"),
		glGetVertexAttribIuiv:                 getProcAddr("glGetVertexAttribIuiv"),
		glGetVertexAttribPointerv:             getProcAddr("glGetVertexAttribPointerv"),
		glGetVertexAttribdv:                   getProcAddr("glGetVertexAttribdv"),
		glGetVertexAttribfv:                   getProcAddr("glGetVertexAttribfv"),
		glGetVertexAttribiv:                   getProcAddr("glGetVertexAttribiv"),
		glHint:                                getProcAddr("glHint"),
		glIndexMask:                           getProcAddr("glIndexMask"),
		glIndexPointer:                        getProcAddr("glIndexPointer"),
		glIndexd:                              getProcAddr("glIndexd"),
		glIndexdv:                             getProcAddr("glIndexdv"),
		glIndexf:                              getProcAddr("glIndexf"),
		glIndexfv:                             getProcAddr("glIndexfv"),
		glIndexi:                              getProcAddr("glIndexi"),
		glIndexiv:                             getProcAddr("glIndexiv"),
		glIndexs:                              getProcAddr("glIndexs"),
		glIndexsv:                             getProcAddr("glIndexsv"),
		glIndexub:                             getProcAddr("glIndexub"),
		glIndexubv:                            getProcAddr("glIndexubv"),
		glInitNames:                           getProcAddr("glInitNames"),
		glInterleavedArrays:                   getProcAddr("glInterleavedArrays"),
		glIsBuffer:                            getProcAddr("glIsBuffer"),
		glIsEnabled:                           getProcAddr("glIsEnabled"),
		glIsEnabledi:                          getProcAddr("glIsEnabledi"),
		glIsFramebuffer:                       getProcAddr("glIsFramebuffer"),
		glIsList:                              getProcAddr("glIsList"),
		glIsProgram:                           getProcAddr("glIsProgram"),
		glIsQuery:                             getProcAddr("glIsQuery"),
		glIsRenderbuffer:                      getProcAddr("glIsRenderbuffer"),
		glIsSampler:                           getProcAddr("glIsSampler"),
		glIsShader:                            getProcAddr("glIsShader"),
		glIsSync:                              getProcAddr("glIsSync"),
		glIsTexture:                           getProcAddr("glIsTexture"),
		glIsVertexArray:                       getProcAddr("glIsVertexArray"),
		glLightModelf:                         getProcAddr("glLightModelf"),
		glLightModelfv:                        getProcAddr("glLightModelfv"),
		glLightModeli:                         getProcAddr("glLightModeli"),
		glLightModeliv:                        getProcAddr("glLightModeliv"),
		glLightf:                              getProcAddr("glLightf"),
		glLightfv:                             getProcAddr("glLightfv"),
		glLighti:                              getProcAddr("glLighti"),
		glLightiv:                             getProcAddr("glLightiv"),
		glLineStipple:                         getProcAddr("glLineStipple"),
		glLineWidth:                           getProcAddr("glLineWidth"),
		glLinkProgram:                         getProcAddr("glLinkProgram"),
		glListBase:                            getProcAddr("glListBase"),
		glLoadIdentity:                        getProcAddr("glLoadIdentity"),
		glLoadMatrixd:                         getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:                         getProcAddr("glLoadMatrixf"),
		glLoadName:                            getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:                getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:                getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                             getProcAddr("glLogicOp"),
		glMap1d:                               getProcAddr("glMap1d"),
		glMap1f:                               getProcAddr("glMap1f"),
		glMap2d:                               getProcAddr("glMap2d"),
		glMap2f:                               getProcAddr("glMap2f"),
		glMapBuffer:                           getProcAddr("glMapBuffer"),
		glMapBufferRange:                      getProcAddr("glMapBufferRange"),
		glMapGrid1d:                           getProcAddr("glMapGrid1d"),
		glMapGrid1f:                           getProcAddr("glMapGrid1f"),
		glMapGrid2d:                           getProcAddr("glMapGrid2d"),
		glMapGrid2f:                           getProcAddr("glMapGrid2f"),
		glMaterialf:                           getProcAddr("glMaterialf"),
		glMaterialfv:                          getProcAddr("glMaterialfv"),
		glMateriali:                           getProcAddr("glMateriali"),
		glMaterialiv:                          getProcAddr("glMaterialiv"),
		glMatrixMode:                          getProcAddr("glMatrixMode"),
		glMultMatrixd:                         getProcAddr("glMultMatrixd"),
		glMultMatrixf:                         getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:                getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:                getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:                     getProcAddr("glMultiDrawArrays"),
		glMultiDrawElements:                   getProcAddr("glMultiDrawElements"),
		glMultiDrawElementsBaseVertex:         getProcAddr("glMultiDrawElementsBaseVertex"),
		glMultiTexCoord1d:                     getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:                    getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:                     getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:                    getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:                     getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:                    getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:                     getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:                    getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:                     getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:                    getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:                     getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:                    getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:                     getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:                    getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:                     getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:                    getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:                     getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:                    getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:                     getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:                    getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:                     getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:                    getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:                     getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:                    getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:                     getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:                    getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:                     getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:                    getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:                     getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:                    getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:                     getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:                    getProcAddr("glMultiTexCoord4sv"),
		glMultiTexCoordP1ui:                   getProcAddr("glMultiTexCoordP1ui"),
		glMultiTexCoordP1uiv:                  getProcAddr("glMultiTexCoordP1uiv"),
		glMultiTexCoordP2ui:                   getProcAddr("glMultiTexCoordP2ui"),
		glMultiTexCoordP2uiv:                  getProcAddr("glMultiTexCoordP2uiv"),
		glMultiTexCoordP3ui:                   getProcAddr("glMultiTexCoordP3ui"),
		glMultiTexCoordP3uiv:                  getProcAddr("glMultiTexCoordP3uiv"),
		glMultiTexCoordP4ui:                   getProcAddr("glMultiTexCoordP4ui"),
		glMultiTexCoordP4uiv:                  getProcAddr("glMultiTexCoordP4uiv"),
		glNewList:                             getProcAddr("glNewList"),
		glNormal3b:                            getProcAddr("glNormal3b"),
		glNormal3bv:                           getProcAddr("glNormal3bv"),
		glNormal3d:                            getProcAddr("glNormal3d"),
		glNormal3dv:                           getProcAddr("glNormal3dv"),
		glNormal3f:                            getProcAddr("glNormal3f"),
		glNormal3fv:                           getProcAddr("glNormal3fv"),
		glNormal3i:                            getProcAddr("glNormal3i"),
		glNormal3iv:                           getProcAddr("glNormal3iv"),
		glNormal3s:                            getProcAddr("glNormal3s"),
		glNormal3sv:                           getProcAddr("glNormal3sv"),
		glNormalP3ui:                          getProcAddr("glNormalP3ui"),
		glNormalP3uiv:                         getProcAddr("glNormalP3uiv"),
		glNormalPointer:                       getProcAddr("glNormalPointer"),
		glOrtho:                               getProcAddr("glOrtho"),
		glPassThrough:                         getProcAddr("glPassThrough"),
		glPixelMapfv:                          getProcAddr("glPixelMapfv"),
		glPixelMapuiv:                         getProcAddr("glPixelMapuiv"),
		glPixelMapusv:                         getProcAddr("glPixelMapusv"),
		glPixelStoref:                         getProcAddr("glPixelStoref"),
		glPixelStorei:                         getProcAddr("glPixelStorei"),
		glPixelTransferf:                      getProcAddr("glPixelTransferf"),
		glPixelTransferi:                      getProcAddr("glPixelTransferi"),
		glPixelZoom:                           getProcAddr("glPixelZoom"),
		glPointParameterf:                     getProcAddr("glPointParameterf"),
		glPointParameterfv:                    getProcAddr("glPointParameterfv"),
		glPointParameteri:                     getProcAddr("glPointParameteri"),
		glPointParameteriv:                    getProcAddr("glPointParameteriv"),
		glPointSize:                           getProcAddr("glPointSize"),
		glPolygonMode:                         getProcAddr("glPolygonMode"),
		glPolygonOffset:                       getProcAddr("glPolygonOffset"),
		glPolygonStipple:                      getProcAddr("glPolygonStipple"),
		glPopAttrib:                           getProcAddr("glPopAttrib"),
		glPopClientAttrib:                     getProcAddr("glPopClientAttrib"),
		glPopMatrix:                           getProcAddr("glPopMatrix"),
		glPopName:                             getProcAddr("glPopName"),
		glPrimitiveRestartIndex:               getProcAddr("glPrimitiveRestartIndex"),
		glPrioritizeTextures:                  getProcAddr("glPrioritizeTextures"),
		glProvokingVertex:                     getProcAddr("glProvokingVertex"),
		glPushAttrib:                          getProcAddr("glPushAttrib"),
		glPushClientAttrib:                    getProcAddr("glPushClientAttrib"),
		glPushMatrix:                          getProcAddr("glPushMatrix"),
		glPushName:                            getProcAddr("glPushName"),
		glQueryCounter:                        getProcAddr("glQueryCounter"),
		glRasterPos2d:                         getProcAddr("glRasterPos2d"),
		glRasterPos2dv:                        getProcAddr("glRasterPos2dv"),
		glRasterPos2f:                         getProcAddr("glRasterPos2f"),
		glRasterPos2fv:                        getProcAddr("glRasterPos2fv"),
		glRasterPos2i:                         getProcAddr("glRasterPos2i"),
		glRasterPos2iv:                        getProcAddr("glRasterPos2iv"),
		glRasterPos2s:                         getProcAddr("glRasterPos2s"),
		glRasterPos2sv:                        getProcAddr("glRasterPos2sv"),
		glRasterPos3d:                         getProcAddr("glRasterPos3d"),
		glRasterPos3dv:                        getProcAddr("glRasterPos3dv"),
		glRasterPos3f:                         getProcAddr("glRasterPos3f"),
		glRasterPos3fv:                        getProcAddr("glRasterPos3fv"),
		glRasterPos3i:                         getProcAddr("glRasterPos3i"),
		glRasterPos3iv:                        getProcAddr("glRasterPos3iv"),
		glRasterPos3s:                         getProcAddr("glRasterPos3s"),
		glRasterPos3sv:                        getProcAddr("glRasterPos3sv"),
		glRasterPos4d:                         getProcAddr("glRasterPos4d"),
		glRasterPos4dv:                        getProcAddr("glRasterPos4dv"),
		glRasterPos4f:                         getProcAddr("glRasterPos4f"),
		glRasterPos4fv:                        getProcAddr("glRasterPos4fv"),
		glRasterPos4i:                         getProcAddr("glRasterPos4i"),
		glRasterPos4iv:                        getProcAddr("glRasterPos4iv"),
		glRasterPos4s:                         getProcAddr("glRasterPos4s"),
		glRasterPos4sv:                        getProcAddr("glRasterPos4sv"),
		glReadBuffer:                          getProcAddr("glReadBuffer"),
		glReadPixels:                          getProcAddr("glReadPixels"),
		glRectd:                               getProcAddr("glRectd"),
		glRectdv:                              getProcAddr("glRectdv"),
		glRectf:                               getProcAddr("glRectf"),
		glRectfv:                              getProcAddr("glRectfv"),
		glRecti:                               getProcAddr("glRecti"),
		glRectiv:                              getProcAddr("glRectiv"),
		glRects:                               getProcAddr("glRects"),
		glRectsv:                              getProcAddr("glRectsv"),
		glRenderMode:                          getProcAddr("glRenderMode"),
		glRenderbufferStorage:                 getProcAddr("glRenderbufferStorage"),
		glRenderbufferStorageMultisample:      getProcAddr("glRenderbufferStorageMultisample"),
		glRotated:                             getProcAddr("glRotated"),
		glRotatef:                             getProcAddr("glRotatef"),
		glSampleCoverage:                      getProcAddr("glSampleCoverage"),
		glSampleMaski:                         getProcAddr("glSampleMaski"),
		glSamplerParameterIiv:                 getProcAddr("glSamplerParameterIiv"),
		glSamplerParameterIuiv:                getProcAddr("glSamplerParameterIuiv"),
		glSamplerParameterf:                   getProcAddr("glSamplerParameterf"),
		glSamplerParameterfv:                  getProcAddr("glSamplerParameterfv"),
		glSamplerParameteri:                   getProcAddr("glSamplerParameteri"),
		glSamplerParameteriv:                  getProcAddr("glSamplerParameteriv"),
		glScaled:                              getProcAddr("glScaled"),
		glScalef:                              getProcAddr("glScalef"),
		glScissor:                             getProcAddr("glScissor"),
		glSecondaryColor3b:                    getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:                   getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:                    getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:                   getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:                    getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:                   getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:                    getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:                   getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:                    getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:                   getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:                   getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:                  getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:                   getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:                  getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:                   getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:                  getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorP3ui:                  getProcAddr("glSecondaryColorP3ui"),
		glSecondaryColorP3uiv:                 getProcAddr("glSecondaryColorP3uiv"),
		glSecondaryColorPointer:               getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:                        getProcAddr("glSelectBuffer"),
		glShadeModel:                          getProcAddr("glShadeModel"),
		glShaderSource:                        getProcAddr("glShaderSource"),
		glStencilFunc:                         getProcAddr("glStencilFunc"),
		glStencilFuncSeparate:                 getProcAddr("glStencilFuncSeparate"),
		glStencilMask:                         getProcAddr("glStencilMask"),
		glStencilMaskSeparate:                 getProcAddr("glStencilMaskSeparate"),
		glStencilOp:                           getProcAddr("glStencilOp"),
		glStencilOpSeparate:                   getProcAddr("glStencilOpSeparate"),
		glTexBuffer:                           getProcAddr("glTexBuffer"),
		glTexCoord1d:                          getProcAddr("glTexCoord1d"),
		glTexCoord1dv:                         getProcAddr("glTexCoord1dv"),
		glTexCoord1f:                          getProcAddr("glTexCoord1f"),
		glTexCoord1fv:                         getProcAddr("glTexCoord1fv"),
		glTexCoord1i:                          getProcAddr("glTexCoord1i"),
		glTexCoord1iv:                         getProcAddr("glTexCoord1iv"),
		glTexCoord1s:                          getProcAddr("glTexCoord1s"),
		glTexCoord1sv:                         getProcAddr("glTexCoord1sv"),
		glTexCoord2d:                          getProcAddr("glTexCoord2d"),
		glTexCoord2dv:                         getProcAddr("glTexCoord2dv"),
		glTexCoord2f:                          getProcAddr("glTexCoord2f"),
		glTexCoord2fv:                         getProcAddr("glTexCoord2fv"),
		glTexCoord2i:                          getProcAddr("glTexCoord2i"),
		glTexCoord2iv:                         getProcAddr("glTexCoord2iv"),
		glTexCoord2s:                          getProcAddr("glTexCoord2s"),
		glTexCoord2sv:                         getProcAddr("glTexCoord2sv"),
		glTexCoord3d:                          getProcAddr("glTexCoord3d"),
		glTexCoord3dv:                         getProcAddr("glTexCoord3dv"),
		glTexCoord3f:                          getProcAddr("glTexCoord3f"),
		glTexCoord3fv:                         getProcAddr("glTexCoord3fv"),
		glTexCoord3i:                          getProcAddr("glTexCoord3i"),
		glTexCoord3iv:                         getProcAddr("glTexCoord3iv"),
		glTexCoord3s:                          getProcAddr("glTexCoord3s"),
		glTexCoord3sv:                         getProcAddr("glTexCoord3sv"),
		glTexCoord4d:                          getProcAddr("glTexCoord4d"),
		glTexCoord4dv:                         getProcAddr("glTexCoord4dv"),
		glTexCoord4f:                          getProcAddr("glTexCoord4f"),
		glTexCoord4fv:                         getProcAddr("glTexCoord4fv"),
		glTexCoord4i:                          getProcAddr("glTexCoord4i"),
		glTexCoord4iv:                         getProcAddr("glTexCoord4iv"),
		glTexCoord4s:                          getProcAddr("glTexCoord4s"),
		glTexCoord4sv:                         getProcAddr("glTexCoord4sv"),
		glTexCoordP1ui:                        getProcAddr("glTexCoordP1ui"),
		glTexCoordP1uiv:                       getProcAddr("glTexCoordP1uiv"),
		glTexCoordP2ui:                        getProcAddr("glTexCoordP2ui"),
		glTexCoordP2uiv:                       getProcAddr("glTexCoordP2uiv"),
		glTexCoordP3ui:                        getProcAddr("glTexCoordP3ui"),
		glTexCoordP3uiv:                       getProcAddr("glTexCoordP3uiv"),
		glTexCoordP4ui:                        getProcAddr("glTexCoordP4ui"),
		glTexCoordP4uiv:                       getProcAddr("glTexCoordP4uiv"),
		glTexCoordPointer:                     getProcAddr("glTexCoordPointer"),
		glTexEnvf:                             getProcAddr("glTexEnvf"),
		glTexEnvfv:                            getProcAddr("glTexEnvfv"),
		glTexEnvi:                             getProcAddr("glTexEnvi"),
		glTexEnviv:                            getProcAddr("glTexEnviv"),
		glTexGend:                             getProcAddr("glTexGend"),
		glTexGendv:                            getProcAddr("glTexGendv"),
		glTexGenf:                             getProcAddr("glTexGenf"),
		glTexGenfv:                            getProcAddr("glTexGenfv"),
		glTexGeni:                             getProcAddr("glTexGeni"),
		glTexGeniv:                            getProcAddr("glTexGeniv"),
		glTexImage1D:                          getProcAddr("glTexImage1D"),
		glTexImage2D:                          getProcAddr("glTexImage2D"),
		glTexImage2DMultisample:               getProcAddr("glTexImage2DMultisample"),
		glTexImage3D:                          getProcAddr("glTexImage3D"),
		glTexImage3DMultisample:               getProcAddr("glTexImage3DMultisample"),
		glTexParameterIiv:                     getProcAddr("glTexParameterIiv"),
		glTexParameterIuiv:                    getProcAddr("glTexParameterIuiv"),
		glTexParameterf:                       getProcAddr("glTexParameterf"),
		glTexParameterfv:                      getProcAddr("glTexParameterfv"),
		glTexParameteri:                       getProcAddr("glTexParameteri"),
		glTexParameteriv:                      getProcAddr("glTexParameteriv"),
		glTexSubImage1D:                       getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:                       getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:                       getProcAddr("glTexSubImage3D"),
		glTransformFeedbackVaryings:           getProcAddr("glTransformFeedbackVaryings"),
		glTranslated:                          getProcAddr("glTranslated"),
		glTranslatef:                          getProcAddr("glTranslatef"),
		glUniform1f:                           getProcAddr("glUniform1f"),
		glUniform1fv:                          getProcAddr("glUniform1fv"),
		glUniform1i:                           getProcAddr("glUniform1i"),
		glUniform1iv:                          getProcAddr("glUniform1iv"),
		glUniform1ui:                          getProcAddr("glUniform1ui"),
		glUniform1uiv:                         getProcAddr("glUniform1uiv"),
		glUniform2f:                           getProcAddr("glUniform2f"),
		glUniform2fv:                          getProcAddr("glUniform2fv"),
		glUniform2i:                           getProcAddr("glUniform2i"),
		glUniform2iv:                          getProcAddr("glUniform2iv"),
		glUniform2ui:                          getProcAddr("glUniform2ui"),
		glUniform2uiv:                         getProcAddr("glUniform2uiv"),
		glUniform3f:                           getProcAddr("glUniform3f"),
		glUniform3fv:                          getProcAddr("glUniform3fv"),
		glUniform3i:                           getProcAddr("glUniform3i"),
		glUniform3iv:                          getProcAddr("glUniform3iv"),
		glUniform3ui:                          getProcAddr("glUniform3ui"),
		glUniform3uiv:                         getProcAddr("glUniform3uiv"),
		glUniform4f:                           getProcAddr("glUniform4f"),
		glUniform4fv:                          getProcAddr("glUniform4fv"),
		glUniform4i:                           getProcAddr("glUniform4i"),
		glUniform4iv:                          getProcAddr("glUniform4iv"),
		glUniform4ui:                          getProcAddr("glUniform4ui"),
		glUniform4uiv:                         getProcAddr("glUniform4uiv"),
		glUniformBlockBinding:                 getProcAddr("glUniformBlockBinding"),
		glUniformMatrix2fv:                    getProcAddr("glUniformMatrix2fv"),
		glUniformMatrix2x3fv:                  getProcAddr("glUniformMatrix2x3fv"),
		glUniformMatrix2x4fv:                  getProcAddr("glUniformMatrix2x4fv"),
		glUniformMatrix3fv:                    getProcAddr("glUniformMatrix3fv"),
		glUniformMatrix3x2fv:                  getProcAddr("glUniformMatrix3x2fv"),
		glUniformMatrix3x4fv:                  getProcAddr("glUniformMatrix3x4fv"),
		glUniformMatrix4fv:                    getProcAddr("glUniformMatrix4fv"),
		glUniformMatrix4x2fv:                  getProcAddr("glUniformMatrix4x2fv"),
		glUniformMatrix4x3fv:                  getProcAddr("glUniformMatrix4x3fv"),
		glUnmapBuffer:                         getProcAddr("glUnmapBuffer"),
		glUseProgram:                          getProcAddr("glUseProgram"),
		glValidateProgram:                     getProcAddr("glValidateProgram"),
		glVertex2d:                            getProcAddr("glVertex2d"),
		glVertex2dv:                           getProcAddr("glVertex2dv"),
		glVertex2f:                            getProcAddr("glVertex2f"),
		glVertex2fv:                           getProcAddr("glVertex2fv"),
		glVertex2i:                            getProcAddr("glVertex2i"),
		glVertex2iv:                           getProcAddr("glVertex2iv"),
		glVertex2s:                            getProcAddr("glVertex2s"),
		glVertex2sv:                           getProcAddr("glVertex2sv"),
		glVertex3d:                            getProcAddr("glVertex3d"),
		glVertex3dv:                           getProcAddr("glVertex3dv"),
		glVertex3f:                            getProcAddr("glVertex3f"),
		glVertex3fv:                           getProcAddr("glVertex3fv"),
		glVertex3i:                            getProcAddr("glVertex3i"),
		glVertex3iv:                           getProcAddr("glVertex3iv"),
		glVertex3s:                            getProcAddr("glVertex3s"),
		glVertex3sv:                           getProcAddr("glVertex3sv"),
		glVertex4d:                            getProcAddr("glVertex4d"),
		glVertex4dv:                           getProcAddr("glVertex4dv"),
		glVertex4f:                            getProcAddr("glVertex4f"),
		glVertex4fv:                           getProcAddr("glVertex4fv"),
		glVertex4i:                            getProcAddr("glVertex4i"),
		glVertex4iv:                           getProcAddr("glVertex4iv"),
		glVertex4s:                            getProcAddr("glVertex4s"),
		glVertex4sv:                           getProcAddr("glVertex4sv"),
		glVertexAttrib1d:                      getProcAddr("glVertexAttrib1d"),
		glVertexAttrib1dv:                     getProcAddr("glVertexAttrib1dv"),
		glVertexAttrib1f:                      getProcAddr("glVertexAttrib1f"),
		glVertexAttrib1fv:                     getProcAddr("glVertexAttrib1fv"),
		glVertexAttrib1s:                      getProcAddr("glVertexAttrib1s"),
		glVertexAttrib1sv:                     getProcAddr("glVertexAttrib1sv"),
		glVertexAttrib2d:                      getProcAddr("glVertexAttrib2d"),
		glVertexAttrib2dv:                     getProcAddr("glVertexAttrib2dv"),
		glVertexAttrib2f:                      getProcAddr("glVertexAttrib2f"),
		glVertexAttrib2fv:                     getProcAddr("glVertexAttrib2fv"),
		glVertexAttrib2s:                      getProcAddr("glVertexAttrib2s"),
		glVertexAttrib2sv:                     getProcAddr("glVertexAttrib2sv"),
		glVertexAttrib3d:                      getProcAddr("glVertexAttrib3d"),
		glVertexAttrib3dv:                     getProcAddr("glVertexAttrib3dv"),
		glVertexAttrib3f:                      getProcAddr("glVertexAttrib3f"),
		glVertexAttrib3fv:                     getProcAddr("glVertexAttrib3fv"),
		glVertexAttrib3s:                      getProcAddr("glVertexAttrib3s"),
		glVertexAttrib3sv:                     getProcAddr("glVertexAttrib3sv"),
		glVertexAttrib4Nbv:                    getProcAddr("glVertexAttrib4Nbv"),
		glVertexAttrib4Niv:                    getProcAddr("glVertexAttrib4Niv"),
		glVertexAttrib4Nsv:                    getProcAddr("glVertexAttrib4Nsv"),
		glVertexAttrib4Nub:                    getProcAddr("glVertexAttrib4Nub"),
		glVertexAttrib4Nubv:                   getProcAddr("glVertexAttrib4Nubv"),
		glVertexAttrib4Nuiv:                   getProcAddr("glVertexAttrib4Nuiv"),
		glVertexAttrib4Nusv:                   getProcAddr("glVertexAttrib4Nusv"),
		glVertexAttrib4bv:                     getProcAddr("glVertexAttrib4bv"),
		glVertexAttrib4d:                      getProcAddr("glVertexAttrib4d"),
		glVertexAttrib4dv:                     getProcAddr("glVertexAttrib4dv"),
		glVertexAttrib4f:                      getProcAddr("glVertexAttrib4f"),
		glVertexAttrib4fv:                     getProcAddr("glVertexAttrib4fv"),
		glVertexAttrib4iv:                     getProcAddr("glVertexAttrib4iv"),
		glVertexAttrib4s:                      getProcAddr("glVertexAttrib4s"),
		glVertexAttrib4sv:                     getProcAddr("glVertexAttrib4sv"),
		glVertexAttrib4ubv:                    getProcAddr("glVertexAttrib4ubv"),
		glVertexAttrib4uiv:                    getProcAddr("glVertexAttrib4uiv"),
		glVertexAttrib4usv:                    getProcAddr("glVertexAttrib4usv"),
		glVertexAttribDivisor:                 getProcAddr("glVertexAttribDivisor"),
		glVertexAttribI1i:                     getProcAddr("glVertexAttribI1i"),
		glVertexAttribI1iv:                    getProcAddr("glVertexAttribI1iv"),
		glVertexAttribI1ui:                    getProcAddr("glVertexAttribI1ui"),
		glVertexAttribI1uiv:                   getProcAddr("glVertexAttribI1uiv"),
		glVertexAttribI2i:                     getProcAddr("glVertexAttribI2i"),
		glVertexAttribI2iv:                    getProcAddr("glVertexAttribI2iv"),
		glVertexAttribI2ui:                    getProcAddr("glVertexAttribI2ui"),
		glVertexAttribI2uiv:                   getProcAddr("glVertexAttribI2uiv"),
		glVertexAttribI3i:                     getProcAddr("glVertexAttribI3i"),
		glVertexAttribI3iv:                    getProcAddr("glVertexAttribI3iv"),
		glVertexAttribI3ui:                    getProcAddr("glVertexAttribI3ui"),
		glVertexAttribI3uiv:                   getProcAddr("glVertexAttribI3uiv"),
		glVertexAttribI4bv:                    getProcAddr("glVertexAttribI4bv"),
		glVertexAttribI4i:                     getProcAddr("glVertexAttribI4i"),
		glVertexAttribI4iv:                    getProcAddr("glVertexAttribI4iv"),
		glVertexAttribI4sv:                    getProcAddr("glVertexAttribI4sv"),
		glVertexAttribI4ubv:                   getProcAddr("glVertexAttribI4ubv"),
		glVertexAttribI4ui:                    getProcAddr("glVertexAttribI4ui"),
		glVertexAttribI4uiv:                   getProcAddr("glVertexAttribI4uiv"),
		glVertexAttribI4usv:                   getProcAddr("glVertexAttribI4usv"),
		glVertexAttribIPointer:                getProcAddr("glVertexAttribIPointer"),
		glVertexAttribP1ui:                    getProcAddr("glVertexAttribP1ui"),
		glVertexAttribP1uiv:                   getProcAddr("glVertexAttribP1uiv"),
		glVertexAttribP2ui:                    getProcAddr("glVertexAttribP2ui"),
		glVertexAttribP2uiv:                   getProcAddr("glVertexAttribP2uiv"),
		glVertexAttribP3ui:                    getProcAddr("glVertexAttribP3ui"),
		glVertexAttribP3uiv:                   getProcAddr("glVertexAttribP3uiv"),
		glVertexAttribP4ui:                    getProcAddr("glVertexAttribP4ui"),
		glVertexAttribP4uiv:                   getProcAddr("glVertexAttribP4uiv"),
		glVertexAttribPointer:                 getProcAddr("glVertexAttribPointer"),
		glVertexP2ui:                          getProcAddr("glVertexP2ui"),
		glVertexP2uiv:                         getProcAddr("glVertexP2uiv"),
		glVertexP3ui:                          getProcAddr("glVertexP3ui"),
		glVertexP3uiv:                         getProcAddr("glVertexP3uiv"),
		glVertexP4ui:                          getProcAddr("glVertexP4ui"),
		glVertexP4uiv:                         getProcAddr("glVertexP4uiv"),
		glVertexPointer:                       getProcAddr("glVertexPointer"),
		glViewport:                            getProcAddr("glViewport"),
		glWaitSync:                            getProcAddr("glWaitSync"),
		glWindowPos2d:                         getProcAddr("glWindowPos2d"),
		glWindowPos2dv:                        getProcAddr("glWindowPos2dv"),
		glWindowPos2f:                         getProcAddr("glWindowPos2f"),
		glWindowPos2fv:                        getProcAddr("glWindowPos2fv"),
		glWindowPos2i:                         getProcAddr("glWindowPos2i"),
		glWindowPos2iv:                        getProcAddr("glWindowPos2iv"),
		glWindowPos2s:                         getProcAddr("glWindowPos2s"),
		glWindowPos2sv:                        getProcAddr("glWindowPos2sv"),
		glWindowPos3d:                         getProcAddr("glWindowPos3d"),
		glWindowPos3dv:                        getProcAddr("glWindowPos3dv"),
		glWindowPos3f:                         getProcAddr("glWindowPos3f"),
		glWindowPos3fv:                        getProcAddr("glWindowPos3fv"),
		glWindowPos3i:                         getProcAddr("glWindowPos3i"),
		glWindowPos3iv:                        getProcAddr("glWindowPos3iv"),
		glWindowPos3s:                         getProcAddr("glWindowPos3s"),
		glWindowPos3sv:                        getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL400 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	AttachShader(program uint32, shader uint32)
	Begin(mode uint32)
	BeginConditionalRender(id uint32, mode uint32)
	BeginQuery(target uint32, id uint32)
	BeginQueryIndexed(target uint32, index uint32, id uint32)
	BeginTransformFeedback(primitiveMode uint32)
	BindAttribLocation(program uint32, index uint32, name *uint8)
	BindBuffer(target uint32, buffer uint32)
	BindBufferBase(target uint32, index uint32, buffer uint32)
	BindBufferRange(target uint32, index uint32, buffer uint32, offset uintptr, size int)
	BindFragDataLocation(program uint32, color uint32, name *uint8)
	BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *uint8)
	BindFramebuffer(target uint32, framebuffer uint32)
	BindRenderbuffer(target uint32, renderbuffer uint32)
	BindSampler(unit uint32, sampler uint32)
	BindTexture(target uint32, texture uint32)
	BindTransformFeedback(target uint32, id uint32)
	BindVertexArray(array uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)
	BlendEquationSeparatei(buf uint32, modeRGB uint32, modeAlpha uint32)
	BlendEquationi(buf uint32, mode uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BlendFuncSeparatei(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32)
	BlendFunci(buf uint32, src uint32, dst uint32)
	BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	CheckFramebufferStatus(target uint32) uint32
	ClampColor(target uint32, clamp uint32)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32)
	ClearBufferfv(buffer uint32, drawbuffer int32, value *float32)
	ClearBufferiv(buffer uint32, drawbuffer int32, value *int32)
	ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClientActiveTexture(texture uint32)
	ClientWaitSync(sync GLsync, flags uint32, timeout uint64) uint32
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaski(index uint32, r bool, g bool, b bool, a bool)
	ColorMaterial(face uint32, mode uint32)
	ColorP3ui(type_ uint32, color uint32)
	ColorP3uiv(type_ uint32, color *uint32)
	ColorP4ui(type_ uint32, color uint32)
	ColorP4uiv(type_ uint32, color *uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompileShader(shader uint32)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset uintptr, writeOffset uintptr, size int)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CreateProgram() uint32
	CreateShader(type_ uint32) uint32
	CullFace(mode uint32)
	DeleteBuffers(n int32, buffers *uint32)
	DeleteFramebuffers(n int32, framebuffers *uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteProgram(program uint32)
	DeleteQueries(n int32, ids *uint32)
	DeleteRenderbuffers(n int32, renderbuffers *uint32)
	DeleteSamplers(count int32, samplers *uint32)
	DeleteShader(shader uint32)
	DeleteSync(sync GLsync)
	DeleteTextures(n int32, textures *uint32)
	DeleteTransformFeedbacks(n int32, ids *uint32)
	DeleteVertexArrays(n int32, arrays *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	DetachShader(program uint32, shader uint32)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DisableVertexAttribArray(index uint32)
	Disablei(target uint32, index uint32)
	DrawArrays(mode uint32, first int32, count int32)
	DrawArraysIndirect(mode uint32, indirect unsafe.Pointer)
	DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32)
	DrawBuffer(buf uint32)
	DrawBuffers(n int32, bufs *uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawElementsBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer)
	DrawElementsInstanced(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32)
	DrawElementsInstancedBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawRangeElementsBaseVertex(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawTransformFeedback(mode uint32, id uint32)
	DrawTransformFeedbackStream(mode uint32, id uint32, stream uint32)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	EnableVertexAttribArray(index uint32)
	Enablei(target uint32, index uint32)
	End()
	EndConditionalRender()
	EndList()
	EndQuery(target uint32)
	EndQueryIndexed(target uint32, index uint32)
	EndTransformFeedback()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	FenceSync(condition uint32, flags uint32) GLsync
	Finish()
	Flush()
	FlushMappedBufferRange(target uint32, offset uintptr, length int)
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	FramebufferTexture(target uint32, attachment uint32, texture uint32, level int32)
	FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32)
	FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenBuffers(n int32, buffers *uint32)
	GenFramebuffers(n int32, framebuffers *uint32)
	GenLists(range_ int32) uint32
	GenQueries(n int32, ids *uint32)
	GenRenderbuffers(n int32, renderbuffers *uint32)
	GenSamplers(count int32, samplers *uint32)
	GenTextures(n int32, textures *uint32)
	GenTransformFeedbacks(n int32, ids *uint32)
	GenVertexArrays(n int32, arrays *uint32)
	GenerateMipmap(target uint32)
	GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveSubroutineName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineUniformName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineUniformiv(program uint32, shadertype uint32, index uint32, pname uint32, values *int32)
	GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *uint8)
	GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32)
	GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *uint8)
	GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32)
	GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)
	GetAttribLocation(program uint32, name *uint8) int32
	GetBooleani_v(target uint32, index uint32, data *bool)
	GetBooleanv(pname uint32, data *bool)
	GetBufferParameteri64v(target uint32, pname uint32, params *int64)
	GetBufferParameteriv(target uint32, pname uint32, params *int32)
	GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)
	GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloatv(pname uint32, data *float32)
	GetFragDataIndex(program uint32, name *uint8) int32
	GetFragDataLocation(program uint32, name *uint8) int32
	GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32)
	GetInteger64i_v(target uint32, index uint32, data *int64)
	GetInteger64v(pname uint32, data *int64)
	GetIntegeri_v(target uint32, index uint32, data *int32)
	GetIntegerv(pname uint32, data *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetMultisamplefv(pname uint32, index uint32, val *float32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramStageiv(program uint32, shadertype uint32, pname uint32, values *int32)
	GetProgramiv(program uint32, pname uint32, params *int32)
	GetQueryIndexediv(target uint32, index uint32, pname uint32, params *int32)
	GetQueryObjecti64v(id uint32, pname uint32, params *int64)
	GetQueryObjectiv(id uint32, pname uint32, params *int32)
	GetQueryObjectui64v(id uint32, pname uint32, params *uint64)
	GetQueryObjectuiv(id uint32, pname uint32, params *uint32)
	GetQueryiv(target uint32, pname uint32, params *int32)
	GetRenderbufferParameteriv(target uint32, pname uint32, params *int32)
	GetSamplerParameterIiv(sampler uint32, pname uint32, params *int32)
	GetSamplerParameterIuiv(sampler uint32, pname uint32, params *uint32)
	GetSamplerParameterfv(sampler uint32, pname uint32, params *float32)
	GetSamplerParameteriv(sampler uint32, pname uint32, params *int32)
	GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8)
	GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8)
	GetShaderiv(shader uint32, pname uint32, params *int32)
	GetString(name uint32) *uint8
	GetStringi(name uint32, index uint32) *uint8
	GetSubroutineIndex(program uint32, shadertype uint32, name *uint8) uint32
	GetSubroutineUniformLocation(program uint32, shadertype uint32, name *uint8) int32
	GetSynciv(sync GLsync, pname uint32, count int32, length *int32, values *int32)
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterIiv(target uint32, pname uint32, params *int32)
	GetTexParameterIuiv(target uint32, pname uint32, params *uint32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetUniformBlockIndex(program uint32, uniformBlockName *uint8) uint32
	GetUniformIndices(program uint32, uniformCount int32, uniformNames **uint8, uniformIndices *uint32)
	GetUniformLocation(program uint32, name *uint8) int32
	GetUniformSubroutineuiv(shadertype uint32, location int32, params *uint32)
	GetUniformdv(program uint32, location int32, params *float64)
	GetUniformfv(program uint32, location int32, params *float32)
	GetUniformiv(program uint32, location int32, params *int32)
	GetUniformuiv(program uint32, location int32, params *uint32)
	GetVertexAttribIiv(index uint32, pname uint32, params *int32)
	GetVertexAttribIuiv(index uint32, pname uint32, params *uint32)
	GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)
	GetVertexAttribdv(index uint32, pname uint32, params *float64)
	GetVertexAttribfv(index uint32, pname uint32, params *float32)
	GetVertexAttribiv(index uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	IsBuffer(buffer uint32) bool
	IsEnabled(cap uint32) bool
	IsEnabledi(target uint32, index uint32) bool
	IsFramebuffer(framebuffer uint32) bool
	IsList(list uint32) bool
	IsProgram(program uint32) bool
	IsQuery(id uint32) bool
	IsRenderbuffer(renderbuffer uint32) bool
	IsSampler(sampler uint32) bool
	IsShader(shader uint32) bool
	IsSync(sync GLsync) bool
	IsTexture(texture uint32) bool
	IsTransformFeedback(id uint32) bool
	IsVertexArray(array uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	LinkProgram(program uint32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapBuffer(target uint32, access uint32) unsafe.Pointer
	MapBufferRange(target uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MinSampleShading(value float32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiDrawElementsBaseVertex(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	MultiTexCoordP1ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP1uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP2ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP2uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP3ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP3uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP4ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP4uiv(texture uint32, type_ uint32, coords *uint32)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalP3ui(type_ uint32, coords uint32)
	NormalP3uiv(type_ uint32, coords *uint32)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PatchParameterfv(pname uint32, values *float32)
	PatchParameteri(pname uint32, value int32)
	PauseTransformFeedback()
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopMatrix()
	PopName()
	PrimitiveRestartIndex(index uint32)
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	ProvokingVertex(mode uint32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	QueryCounter(id uint32, target uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	RenderMode(mode uint32) int32
	RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32)
	RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32)
	ResumeTransformFeedback()
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	SampleMaski(maskNumber uint32, mask uint32)
	SamplerParameterIiv(sampler uint32, pname uint32, param *int32)
	SamplerParameterIuiv(sampler uint32, pname uint32, param *uint32)
	SamplerParameterf(sampler uint32, pname uint32, param float32)
	SamplerParameterfv(sampler uint32, pname uint32, param *float32)
	SamplerParameteri(sampler uint32, pname uint32, param int32)
	SamplerParameteriv(sampler uint32, pname uint32, param *int32)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorP3ui(type_ uint32, color uint32)
	SecondaryColorP3uiv(type_ uint32, color *uint32)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	ShaderSource(shader uint32, count int32, string **uint8, length *int32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilMaskSeparate(face uint32, mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)
	TexBuffer(target uint32, internalformat uint32, buffer uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordP1ui(type_ uint32, coords uint32)
	TexCoordP1uiv(type_ uint32, coords *uint32)
	TexCoordP2ui(type_ uint32, coords uint32)
	TexCoordP2uiv(type_ uint32, coords *uint32)
	TexCoordP3ui(type_ uint32, coords uint32)
	TexCoordP3uiv(type_ uint32, coords *uint32)
	TexCoordP4ui(type_ uint32, coords uint32)
	TexCoordP4uiv(type_ uint32, coords *uint32)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TexParameterIiv(target uint32, pname uint32, params *int32)
	TexParameterIuiv(target uint32, pname uint32, params *uint32)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TransformFeedbackVaryings(program uint32, count int32, varyings **uint8, bufferMode uint32)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Uniform1d(location int32, x float64)
	Uniform1dv(location int32, count int32, value *float64)
	Uniform1f(location int32, v0 float32)
	Uniform1fv(location int32, count int32, value *float32)
	Uniform1i(location int32, v0 int32)
	Uniform1iv(location int32, count int32, value *int32)
	Uniform1ui(location int32, v0 uint32)
	Uniform1uiv(location int32, count int32, value *uint32)
	Uniform2d(location int32, x float64, y float64)
	Uniform2dv(location int32, count int32, value *float64)
	Uniform2f(location int32, v0 float32, v1 float32)
	Uniform2fv(location int32, count int32, value *float32)
	Uniform2i(location int32, v0 int32, v1 int32)
	Uniform2iv(location int32, count int32, value *int32)
	Uniform2ui(location int32, v0 uint32, v1 uint32)
	Uniform2uiv(location int32, count int32, value *uint32)
	Uniform3d(location int32, x float64, y float64, z float64)
	Uniform3dv(location int32, count int32, value *float64)
	Uniform3f(location int32, v0 float32, v1 float32, v2 float32)
	Uniform3fv(location int32, count int32, value *float32)
	Uniform3i(location int32, v0 int32, v1 int32, v2 int32)
	Uniform3iv(location int32, count int32, value *int32)
	Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)
	Uniform3uiv(location int32, count int32, value *uint32)
	Uniform4d(location int32, x float64, y float64, z float64, w float64)
	Uniform4dv(location int32, count int32, value *float64)
	Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	Uniform4fv(location int32, count int32, value *float32)
	Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	Uniform4iv(location int32, count int32, value *int32)
	Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	Uniform4uiv(location int32, count int32, value *uint32)
	UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)
	UniformMatrix2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32)
	UniformSubroutinesuiv(shadertype uint32, count int32, indices *uint32)
	UnmapBuffer(target uint32) bool
	UseProgram(program uint32)
	ValidateProgram(program uint32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexAttrib1d(index uint32, x float64)
	VertexAttrib1dv(index uint32, v *float64)
	VertexAttrib1f(index uint32, x float32)
	VertexAttrib1fv(index uint32, v *float32)
	VertexAttrib1s(index uint32, x int16)
	VertexAttrib1sv(index uint32, v *int16)
	VertexAttrib2d(index uint32, x float64, y float64)
	VertexAttrib2dv(index uint32, v *float64)
	VertexAttrib2f(index uint32, x float32, y float32)
	VertexAttrib2fv(index uint32, v *float32)
	VertexAttrib2s(index uint32, x int16, y int16)
	VertexAttrib2sv(index uint32, v *int16)
	VertexAttrib3d(index uint32, x float64, y float64, z float64)
	VertexAttrib3dv(index uint32, v *float64)
	VertexAttrib3f(index uint32, x float32, y float32, z float32)
	VertexAttrib3fv(index uint32, v *float32)
	VertexAttrib3s(index uint32, x int16, y int16, z int16)
	VertexAttrib3sv(index uint32, v *int16)
	VertexAttrib4Nbv(index uint32, v *int8)
	VertexAttrib4Niv(index uint32, v *int32)
	VertexAttrib4Nsv(index uint32, v *int16)
	VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4Nubv(index uint32, v *uint8)
	VertexAttrib4Nuiv(index uint32, v *uint32)
	VertexAttrib4Nusv(index uint32, v *uint16)
	VertexAttrib4bv(index uint32, v *int8)
	VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dv(index uint32, v *float64)
	VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fv(index uint32, v *float32)
	VertexAttrib4iv(index uint32, v *int32)
	VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4sv(index uint32, v *int16)
	VertexAttrib4ubv(index uint32, v *uint8)
	VertexAttrib4uiv(index uint32, v *uint32)
	VertexAttrib4usv(index uint32, v *uint16)
	VertexAttribDivisor(index uint32, divisor uint32)
	VertexAttribI1i(index uint32, x int32)
	VertexAttribI1iv(index uint32, v *int32)
	VertexAttribI1ui(index uint32, x uint32)
	VertexAttribI1uiv(index uint32, v *uint32)
	VertexAttribI2i(index uint32, x int32, y int32)
	VertexAttribI2iv(index uint32, v *int32)
	VertexAttribI2ui(index uint32, x uint32, y uint32)
	VertexAttribI2uiv(index uint32, v *uint32)
	VertexAttribI3i(index uint32, x int32, y int32, z int32)
	VertexAttribI3iv(index uint32, v *int32)
	VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32)
	VertexAttribI3uiv(index uint32, v *uint32)
	VertexAttribI4bv(index uint32, v *int8)
	VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)
	VertexAttribI4iv(index uint32, v *int32)
	VertexAttribI4sv(index uint32, v *int16)
	VertexAttribI4ubv(index uint32, v *uint8)
	VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)
	VertexAttribI4uiv(index uint32, v *uint32)
	VertexAttribI4usv(index uint32, v *uint16)
	VertexAttribIPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribP1ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP1uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP2ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP2uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP3ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP3uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP4ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP4uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribPointer(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer)
	VertexP2ui(type_ uint32, value uint32)
	VertexP2uiv(type_ uint32, value *uint32)
	VertexP3ui(type_ uint32, value uint32)
	VertexP3uiv(type_ uint32, value *uint32)
	VertexP4ui(type_ uint32, value uint32)
	VertexP4uiv(type_ uint32, value *uint32)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	WaitSync(sync GLsync, flags uint32, timeout uint64)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New400(getProcAddr func(name string) unsafe.Pointer) GL400 {
	gl := &lib{
		glAccum:                               getProcAddr("glAccum"),
		glActiveTexture:                       getProcAddr("glActiveTexture"),
		glAlphaFunc:                           getProcAddr("glAlphaFunc"),
		glAreTexturesResident:                 getProcAddr("glAreTexturesResident"),
		glArrayElement:                        getProcAddr("glArrayElement"),
		glAttachShader:                        getProcAddr("glAttachShader"),
		glBegin:                               getProcAddr("glBegin"),
		glBeginConditionalRender:              getProcAddr("glBeginConditionalRender"),
		glBeginQuery:                          getProcAddr("glBeginQuery"),
		glBeginQueryIndexed:                   getProcAddr("glBeginQueryIndexed"),
		glBeginTransformFeedback:              getProcAddr("glBeginTransformFeedback"),
		glBindAttribLocation:                  getProcAddr("glBindAttribLocation"),
		glBindBuffer:                          getProcAddr("glBindBuffer"),
		glBindBufferBase:                      getProcAddr("glBindBufferBase"),
		glBindBufferRange:                     getProcAddr("glBindBufferRange"),
		glBindFragDataLocation:                getProcAddr("glBindFragDataLocation"),
		glBindFragDataLocationIndexed:         getProcAddr("glBindFragDataLocationIndexed"),
		glBindFramebuffer:                     getProcAddr("glBindFramebuffer"),
		glBindRenderbuffer:                    getProcAddr("glBindRenderbuffer"),
		glBindSampler:                         getProcAddr("glBindSampler"),
		glBindTexture:                         getProcAddr("glBindTexture"),
		glBindTransformFeedback:               getProcAddr("glBindTransformFeedback"),
		glBindVertexArray:                     getProcAddr("glBindVertexArray"),
		glBitmap:                              getProcAddr("glBitmap"),
		glBlendColor:                          getProcAddr("glBlendColor"),
		glBlendEquation:                       getProcAddr("glBlendEquation"),
		glBlendEquationSeparate:               getProcAddr("glBlendEquationSeparate"),
		glBlendEquationSeparatei:              getProcAddr("glBlendEquationSeparatei"),
		glBlendEquationi:                      getProcAddr("glBlendEquationi"),
		glBlendFunc:                           getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:                   getProcAddr("glBlendFuncSeparate"),
		glBlendFuncSeparatei:                  getProcAddr("glBlendFuncSeparatei"),
		glBlendFunci:                          getProcAddr("glBlendFunci"),
		glBlitFramebuffer:                     getProcAddr("glBlitFramebuffer"),
		glBufferData:                          getProcAddr("glBufferData"),
		glBufferSubData:                       getProcAddr("glBufferSubData"),
		glCallList:                            getProcAddr("glCallList"),
		glCallLists:                           getProcAddr("glCallLists"),
		glCheckFramebufferStatus:              getProcAddr("glCheckFramebufferStatus"),
		glClampColor:                          getProcAddr("glClampColor"),
		glClear:                               getProcAddr("glClear"),
		glClearAccum:                          getProcAddr("glClearAccum"),
		glClearBufferfi:                       getProcAddr("glClearBufferfi"),
		glClearBufferfv:                       getProcAddr("glClearBufferfv"),
		glClearBufferiv:                       getProcAddr("glClearBufferiv"),
		glClearBufferuiv:                      getProcAddr("glClearBufferuiv"),
		glClearColor:                          getProcAddr("glClearColor"),
		glClearDepth:                          getProcAddr("glClearDepth"),
		glClearIndex:                          getProcAddr("glClearIndex"),
		glClearStencil:                        getProcAddr("glClearStencil"),
		glClientActiveTexture:                 getProcAddr("glClientActiveTexture"),
		glClientWaitSync:                      getProcAddr("glClientWaitSync"),
		glClipPlane:                           getProcAddr("glClipPlane"),
		glColor3b:                             getProcAddr("glColor3b"),
		glColor3bv:                            getProcAddr("glColor3bv"),
		glColor3d:                             getProcAddr("glColor3d"),
		glColor3dv:                            getProcAddr("glColor3dv"),
		glColor3f:                             getProcAddr("glColor3f"),
		glColor3fv:                            getProcAddr("glColor3fv"),
		glColor3i:                             getProcAddr("glColor3i"),
		glColor3iv:                            getProcAddr("glColor3iv"),
		glColor3s:                             getProcAddr("glColor3s"),
		glColor3sv:                            getProcAddr("glColor3sv"),
		glColor3ub:                            getProcAddr("glColor3ub"),
		glColor3ubv:                           getProcAddr("glColor3ubv"),
		glColor3ui:                            getProcAddr("glColor3ui"),
		glColor3uiv:                           getProcAddr("glColor3uiv"),
		glColor3us:                            getProcAddr("glColor3us"),
		glColor3usv:                           getProcAddr("glColor3usv"),
		glColor4b:                             getProcAddr("glColor4b"),
		glColor4bv:                            getProcAddr("glColor4bv"),
		glColor4d:                             getProcAddr("glColor4d"),
		glColor4dv:                            getProcAddr("glColor4dv"),
		glColor4f:                             getProcAddr("glColor4f"),
		glColor4fv:                            getProcAddr("glColor4fv"),
		glColor4i:                             getProcAddr("glColor4i"),
		glColor4iv:                            getProcAddr("glColor4iv"),
		glColor4s:                             getProcAddr("glColor4s"),
		glColor4sv:                            getProcAddr("glColor4sv"),
		glColor4ub:                            getProcAddr("glColor4ub"),
		glColor4ubv:                           getProcAddr("glColor4ubv"),
		glColor4ui:                            getProcAddr("glColor4ui"),
		glColor4uiv:                           getProcAddr("glColor4uiv"),
		glColor4us:                            getProcAddr("glColor4us"),
		glColor4usv:                           getProcAddr("glColor4usv"),
		glColorMask:                           getProcAddr("glColorMask"),
		glColorMaski:                          getProcAddr("glColorMaski"),
		glColorMaterial:                       getProcAddr("glColorMaterial"),
		glColorP3ui:                           getProcAddr("glColorP3ui"),
		glColorP3uiv:                          getProcAddr("glColorP3uiv"),
		glColorP4ui:                           getProcAddr("glColorP4ui"),
		glColorP4uiv:                          getProcAddr("glColorP4uiv"),
		glColorPointer:                        getProcAddr("glColorPointer"),
		glCompileShader:                       getProcAddr("glCompileShader"),
		glCompressedTexImage1D:                getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:                getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:                getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D:             getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D:             getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D:             getProcAddr("glCompressedTexSubImage3D"),
		glCopyBufferSubData:                   getProcAddr("glCopyBufferSubData"),
		glCopyPixels:                          getProcAddr("glCopyPixels"),
		glCopyTexImage1D:                      getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:                      getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:                   getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:                   getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:                   getProcAddr("glCopyTexSubImage3D"),
		glCreateProgram:                       getProcAddr("glCreateProgram"),
		glCreateShader:                        getProcAddr("glCreateShader"),
		glCullFace:                            getProcAddr("glCullFace"),
		glDeleteBuffers:                       getProcAddr("glDeleteBuffers"),
		glDeleteFramebuffers:                  getProcAddr("glDeleteFramebuffers"),
		glDeleteLists:                         getProcAddr("glDeleteLists"),
		glDeleteProgram:                       getProcAddr("glDeleteProgram"),
		glDeleteQueries:                       getProcAddr("glDeleteQueries"),
		glDeleteRenderbuffers:                 getProcAddr("glDeleteRenderbuffers"),
		glDeleteSamplers:                      getProcAddr("glDeleteSamplers"),
		glDeleteShader:                        getProcAddr("glDeleteShader"),
		glDeleteSync:                          getProcAddr("glDeleteSync"),
		glDeleteTextures:                      getProcAddr("glDeleteTextures"),
		glDeleteTransformFeedbacks:            getProcAddr("glDeleteTransformFeedbacks"),
		glDeleteVertexArrays:                  getProcAddr("glDeleteVertexArrays"),
		glDepthFunc:                           getProcAddr("glDepthFunc"),
		glDepthMask:                           getProcAddr("glDepthMask"),
		glDepthRange:                          getProcAddr("glDepthRange"),
		glDetachShader:                        getProcAddr("glDetachShader"),
		glDisable:                             getProcAddr("glDisable"),
		glDisableClientState:                  getProcAddr("glDisableClientState"),
		glDisableVertexAttribArray:            getProcAddr("glDisableVertexAttribArray"),
		glDisablei:                            getProcAddr("glDisablei"),
		glDrawArrays:                          getProcAddr("glDrawArrays"),
		glDrawArraysIndirect:                  getProcAddr("glDrawArraysIndirect"),
		glDrawArraysInstanced:                 getProcAddr("glDrawArraysInstanced"),
		glDrawBuffer:                          getProcAddr("glDrawBuffer"),
		glDrawBuffers:                         getProcAddr("glDrawBuffers"),
		glDrawElements:                        getProcAddr("glDrawElements"),
		glDrawElementsBaseVertex:              getProcAddr("glDrawElementsBaseVertex"),
		glDrawElementsIndirect:                getProcAddr("glDrawElementsIndirect"),
		glDrawElementsInstanced:               getProcAddr("glDrawElementsInstanced"),
		glDrawElementsInstancedBaseVertex:     getProcAddr("glDrawElementsInstancedBaseVertex"),
		glDrawPixels:                          getProcAddr("glDrawPixels"),
		glDrawRangeElements:                   getProcAddr("glDrawRangeElements"),
		glDrawRangeElementsBaseVertex:         getProcAddr("glDrawRangeElementsBaseVertex"),
		glDrawTransformFeedback:               getProcAddr("glDrawTransformFeedback"),
		glDrawTransformFeedbackStream:         getProcAddr("glDrawTransformFeedbackStream"),
		glEdgeFlag:                            getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:                     getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:                           getProcAddr("glEdgeFlagv"),
		glEnable:                              getProcAddr("glEnable"),
		glEnableClientState:                   getProcAddr("glEnableClientState"),
		glEnableVertexAttribArray:             getProcAddr("glEnableVertexAttribArray"),
		glEnablei:                             getProcAddr("glEnablei"),
		glEnd:                                 getProcAddr("glEnd"),
		glEndConditionalRender:                getProcAddr("glEndConditionalRender"),
		glEndList:                             getProcAddr("glEndList"),
		glEndQuery:                            getProcAddr("glEndQuery"),
		glEndQueryIndexed:                     getProcAddr("glEndQueryIndexed"),
		glEndTransformFeedback:                getProcAddr("glEndTransformFeedback"),
		glEvalCoord1d:                         getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:                        getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:                         getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:                        getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:                         getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:                        getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:                         getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:                        getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:                           getProcAddr("glEvalMesh1"),
		glEvalMesh2:                           getProcAddr("glEvalMesh2"),
		glEvalPoint1:                          getProcAddr("glEvalPoint1"),
		glEvalPoint2:                          getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:                      getProcAddr("glFeedbackBuffer"),
		glFenceSync:                           getProcAddr("glFenceSync"),
		glFinish:                              getProcAddr("glFinish"),
		glFlush:                               getProcAddr("glFlush"),
		glFlushMappedBufferRange:              getProcAddr("glFlushMappedBufferRange"),
		glFogCoordPointer:                     getProcAddr("glFogCoordPointer"),
		glFogCoordd:                           getProcAddr("glFogCoordd"),
		glFogCoorddv:                          getProcAddr("glFogCoorddv"),
		glFogCoordf:                           getProcAddr("glFogCoordf"),
		glFogCoordfv:                          getProcAddr("glFogCoordfv"),
		glFogf:                                getProcAddr("glFogf"),
		glFogfv:                               getProcAddr("glFogfv"),
		glFogi:                                getProcAddr("glFogi"),
		glFogiv:                               getProcAddr("glFogiv"),
		glFramebufferRenderbuffer:             getProcAddr("glFramebufferRenderbuffer"),
		glFramebufferTexture:                  getProcAddr("glFramebufferTexture"),
		glFramebufferTexture1D:                getProcAddr("glFramebufferTexture1D"),
		glFramebufferTexture2D:                getProcAddr("glFramebufferTexture2D"),
		glFramebufferTexture3D:                getProcAddr("glFramebufferTexture3D"),
		glFramebufferTextureLayer:             getProcAddr("glFramebufferTextureLayer"),
		glFrontFace:                           getProcAddr("glFrontFace"),
		glFrustum:                             getProcAddr("glFrustum"),
		glGenBuffers:                          getProcAddr("glGenBuffers"),
		glGenFramebuffers:                     getProcAddr("glGenFramebuffers"),
		glGenLists:                            getProcAddr("glGenLists"),
		glGenQueries:                          getProcAddr("glGenQueries"),
		glGenRenderbuffers:                    getProcAddr("glGenRenderbuffers"),
		glGenSamplers:                         getProcAddr("glGenSamplers"),
		glGenTextures:                         getProcAddr("glGenTextures"),
		glGenTransformFeedbacks:               getProcAddr("glGenTransformFeedbacks"),
		glGenVertexArrays:                     getProcAddr("glGenVertexArrays"),
		glGenerateMipmap:                      getProcAddr("glGenerateMipmap"),
		glGetActiveAttrib:                     getProcAddr("glGetActiveAttrib"),
		glGetActiveSubroutineName:             getProcAddr("glGetActiveSubroutineName"),
		glGetActiveSubroutineUniformName:      getProcAddr("glGetActiveSubroutineUniformName"),
		glGetActiveSubroutineUniformiv:        getProcAddr("glGetActiveSubroutineUniformiv"),
		glGetActiveUniform:                    getProcAddr("glGetActiveUniform"),
		glGetActiveUniformBlockName:           getProcAddr("glGetActiveUniformBlockName"),
		glGetActiveUniformBlockiv:             getProcAddr("glGetActiveUniformBlockiv"),
		glGetActiveUniformName:                getProcAddr("glGetActiveUniformName"),
		glGetActiveUniformsiv:                 getProcAddr("glGetActiveUniformsiv"),
		glGetAttachedShaders:                  getProcAddr("glGetAttachedShaders"),
		glGetAttribLocation:                   getProcAddr("glGetAttribLocation"),
		glGetBooleani_v:                       getProcAddr("glGetBooleani_v"),
		glGetBooleanv:                         getProcAddr("glGetBooleanv"),
		glGetBufferParameteri64v:              getProcAddr("glGetBufferParameteri64v"),
		glGetBufferParameteriv:                getProcAddr("glGetBufferParameteriv"),
		glGetBufferPointerv:                   getProcAddr("glGetBufferPointerv"),
		glGetBufferSubData:                    getProcAddr("glGetBufferSubData"),
		glGetClipPlane:                        getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:               getProcAddr("glGetCompressedTexImage"),
		glGetDoublev:                          getProcAddr("glGetDoublev"),
		glGetError:                            getProcAddr("glGetError"),
		glGetFloatv:                           getProcAddr("glGetFloatv"),
		glGetFragDataIndex:                    getProcAddr("glGetFragDataIndex"),
		glGetFragDataLocation:                 getProcAddr("glGetFragDataLocation"),
		glGetFramebufferAttachmentParameteriv: getProcAddr("glGetFramebufferAttachmentParameteriv"),
		glGetInteger64i_v:                     getProcAddr("glGetInteger64i_v"),
		glGetInteger64v:                       getProcAddr("glGetInteger64v"),
		glGetIntegeri_v:                       getProcAddr("glGetIntegeri_v"),
		glGetIntegerv:                         getProcAddr("glGetIntegerv"),
		glGetLightfv:                          getProcAddr("glGetLightfv"),
		glGetLightiv:                          getProcAddr("glGetLightiv"),
		glGetMapdv:                            getProcAddr("glGetMapdv"),
		glGetMapfv:                            getProcAddr("glGetMapfv"),
		glGetMapiv:                            getProcAddr("glGetMapiv"),
		glGetMaterialfv:                       getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:                       getProcAddr("glGetMaterialiv"),
		glGetMultisamplefv:                    getProcAddr("glGetMultisamplefv"),
		glGetPixelMapfv:                       getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:                      getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:                      getProcAddr("glGetPixelMapusv"),
		glGetPointerv:                         getProcAddr("glGetPointerv"),
		glGetPolygonStipple:                   getProcAddr("glGetPolygonStipple"),
		glGetProgramInfoLog:                   getProcAddr("glGetProgramInfoLog"),
		glGetProgramStageiv:                   getProcAddr("glGetProgramStageiv"),
		glGetProgramiv:                        getProcAddr("glGetProgramiv"),
		glGetQueryIndexediv:                   getProcAddr("glGetQueryIndexediv"),
		glGetQueryObjecti64v:                  getProcAddr("glGetQueryObjecti64v"),
		glGetQueryObjectiv:                    getProcAddr("glGetQueryObjectiv"),
		glGetQueryObjectui64v:                 getProcAddr("glGetQueryObjectui64v"),
		glGetQueryObjectuiv:                   getProcAddr("glGetQueryObjectuiv"),
		glGetQueryiv:                          getProcAddr("glGetQueryiv"),
		glGetRenderbufferParameteriv:          getProcAddr("glGetRenderbufferParameteriv"),
		glGetSamplerParameterIiv:              getProcAddr("glGetSamplerParameterIiv"),
		glGetSamplerParameterIuiv:             getProcAddr("glGetSamplerParameterIuiv"),
		glGetSamplerParameterfv:               getProcAddr("glGetSamplerParameterfv"),
		glGetSamplerParameteriv:               getProcAddr("glGetSamplerParameteriv"),
		glGetShaderInfoLog:                    getProcAddr("glGetShaderInfoLog"),
		glGetShaderSource:                     getProcAddr("glGetShaderSource"),
		glGetShaderiv:                         getProcAddr("glGetShaderiv"),
		glGetString:                           getProcAddr("glGetString"),
		glGetStringi:                          getProcAddr("glGetStringi"),
		glGetSubroutineIndex:                  getProcAddr("glGetSubroutineIndex"),
		glGetSubroutineUniformLocation:        getProcAddr("glGetSubroutineUniformLocation"),
		glGetSynciv:                           getProcAddr("glGetSynciv"),
		glGetTexEnvfv:                         getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:                         getProcAddr("glGetTexEnviv"),
		glGetTexGendv:                         getProcAddr("glGetTexGendv"),
		glGetTexGenfv:                         getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:                         getProcAddr("glGetTexGeniv"),
		glGetTexImage:                         getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:              getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:              getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterIiv:                  getProcAddr("glGetTexParameterIiv"),
		glGetTexParameterIuiv:                 getProcAddr("glGetTexParameterIuiv"),
		glGetTexParameterfv:                   getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:                   getProcAddr("glGetTexParameteriv"),
		glGetTransformFeedbackVarying:         getProcAddr("glGetTransformFeedbackVarying"),
		glGetUniformBlockIndex:                getProcAddr("glGetUniformBlockIndex"),
		glGetUniformIndices:                   getProcAddr("glGetUniformIndices"),
		glGetUniformLocation:                  getProcAddr("glGetUniformLocation"),
		glGetUniformSubroutineuiv:             getProcAddr("glGetUniformSubroutineuiv"),
		glGetUniformdv:                        getProcAddr("glGetUniformdv"),
		glGetUniformfv:                        getProcAddr("glGetUniformfv"),
		glGetUniformiv:                        getProcAddr("glGetUniformiv"),
		glGetUniformuiv:                       getProcAddr("glGetUniformuiv"),
		glGetVertexAttribIiv:                  getProcAddr("glGetVertexAttribIiv"),
		glGetVertexAttribIuiv:                 getProcAddr("glGetVertexAttribIuiv"),
		glGetVertexAttribPointerv:             getProcAddr("glGetVertexAttribPointerv"),
		glGetVertexAttribdv:                   getProcAddr("glGetVertexAttribdv"),
		glGetVertexAttribfv:                   getProcAddr("glGetVertexAttribfv"),
		glGetVertexAttribiv:                   getProcAddr("glGetVertexAttribiv"),
		glHint:                                getProcAddr("glHint"),
		glIndexMask:                           getProcAddr("glIndexMask"),
		glIndexPointer:                        getProcAddr("glIndexPointer"),
		glIndexd:                              getProcAddr("glIndexd"),
		glIndexdv:                             getProcAddr("glIndexdv"),
		glIndexf:                              getProcAddr("glIndexf"),
		glIndexfv:                             getProcAddr("glIndexfv"),
		glIndexi:                              getProcAddr("glIndexi"),
		glIndexiv:                             getProcAddr("glIndexiv"),
		glIndexs:                              getProcAddr("glIndexs"),
		glIndexsv:                             getProcAddr("glIndexsv"),
		glIndexub:                             getProcAddr("glIndexub"),
		glIndexubv:                            getProcAddr("glIndexubv"),
		glInitNames:                           getProcAddr("glInitNames"),
		glInterleavedArrays:                   getProcAddr("glInterleavedArrays"),
		glIsBuffer:                            getProcAddr("glIsBuffer"),
		glIsEnabled:                           getProcAddr("glIsEnabled"),
		glIsEnabledi:                          getProcAddr("glIsEnabledi"),
		glIsFramebuffer:                       getProcAddr("glIsFramebuffer"),
		glIsList:                              getProcAddr("glIsList"),
		glIsProgram:                           getProcAddr("glIsProgram"),
		glIsQuery:                             getProcAddr("glIsQuery"),
		glIsRenderbuffer:                      getProcAddr("glIsRenderbuffer"),
		glIsSampler:                           getProcAddr("glIsSampler"),
		glIsShader:                            getProcAddr("glIsShader"),
		glIsSync:                              getProcAddr("glIsSync"),
		glIsTexture:                           getProcAddr("glIsTexture"),
		glIsTransformFeedback:                 getProcAddr("glIsTransformFeedback"),
		glIsVertexArray:                       getProcAddr("glIsVertexArray"),
		glLightModelf:                         getProcAddr("glLightModelf"),
		glLightModelfv:                        getProcAddr("glLightModelfv"),
		glLightModeli:                         getProcAddr("glLightModeli"),
		glLightModeliv:                        getProcAddr("glLightModeliv"),
		glLightf:                              getProcAddr("glLightf"),
		glLightfv:                             getProcAddr("glLightfv"),
		glLighti:                              getProcAddr("glLighti"),
		glLightiv:                             getProcAddr("glLightiv"),
		glLineStipple:                         getProcAddr("glLineStipple"),
		glLineWidth:                           getProcAddr("glLineWidth"),
		glLinkProgram:                         getProcAddr("glLinkProgram"),
		glListBase:                            getProcAddr("glListBase"),
		glLoadIdentity:                        getProcAddr("glLoadIdentity"),
		glLoadMatrixd:                         getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:                         getProcAddr("glLoadMatrixf"),
		glLoadName:                            getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:                getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:                getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                             getProcAddr("glLogicOp"),
		glMap1d:                               getProcAddr("glMap1d"),
		glMap1f:                               getProcAddr("glMap1f"),
		glMap2d:                               getProcAddr("glMap2d"),
		glMap2f:                               getProcAddr("glMap2f"),
		glMapBuffer:                           getProcAddr("glMapBuffer"),
		glMapBufferRange:                      getProcAddr("glMapBufferRange"),
		glMapGrid1d:                           getProcAddr("glMapGrid1d"),
		glMapGrid1f:                           getProcAddr("glMapGrid1f"),
		glMapGrid2d:                           getProcAddr("glMapGrid2d"),
		glMapGrid2f:                           getProcAddr("glMapGrid2f"),
		glMaterialf:                           getProcAddr("glMaterialf"),
		glMaterialfv:                          getProcAddr("glMaterialfv"),
		glMateriali:                           getProcAddr("glMateriali"),
		glMaterialiv:                          getProcAddr("glMaterialiv"),
		glMatrixMode:                          getProcAddr("glMatrixMode"),
		glMinSampleShading:                    getProcAddr("glMinSampleShading"),
		glMultMatrixd:                         getProcAddr("glMultMatrixd"),
		glMultMatrixf:                         getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:                getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:                getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:                     getProcAddr("glMultiDrawArrays"),
		glMultiDrawElements:                   getProcAddr("glMultiDrawElements"),
		glMultiDrawElementsBaseVertex:         getProcAddr("glMultiDrawElementsBaseVertex"),
		glMultiTexCoord1d:                     getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:                    getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:                     getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:                    getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:                     getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:                    getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:                     getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:                    getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:                     getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:                    getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:                     getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:                    getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:                     getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:                    getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:                     getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:                    getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:                     getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:                    getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:                     getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:                    getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:                     getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:                    getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:                     getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:                    getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:                     getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:                    getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:                     getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:                    getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:                     getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:                    getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:                     getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:                    getProcAddr("glMultiTexCoord4sv"),
		glMultiTexCoordP1ui:                   getProcAddr("glMultiTexCoordP1ui"),
		glMultiTexCoordP1uiv:                  getProcAddr("glMultiTexCoordP1uiv"),
		glMultiTexCoordP2ui:                   getProcAddr("glMultiTexCoordP2ui"),
		glMultiTexCoordP2uiv:                  getProcAddr("glMultiTexCoordP2uiv"),
		glMultiTexCoordP3ui:                   getProcAddr("glMultiTexCoordP3ui"),
		glMultiTexCoordP3uiv:                  getProcAddr("glMultiTexCoordP3uiv"),
		glMultiTexCoordP4ui:                   getProcAddr("glMultiTexCoordP4ui"),
		glMultiTexCoordP4uiv:                  getProcAddr("glMultiTexCoordP4uiv"),
		glNewList:                             getProcAddr("glNewList"),
		glNormal3b:                            getProcAddr("glNormal3b"),
		glNormal3bv:                           getProcAddr("glNormal3bv"),
		glNormal3d:                            getProcAddr("glNormal3d"),
		glNormal3dv:                           getProcAddr("glNormal3dv"),
		glNormal3f:                            getProcAddr("glNormal3f"),
		glNormal3fv:                           getProcAddr("glNormal3fv"),
		glNormal3i:                            getProcAddr("glNormal3i"),
		glNormal3iv:                           getProcAddr("glNormal3iv"),
		glNormal3s:                            getProcAddr("glNormal3s"),
		glNormal3sv:                           getProcAddr("glNormal3sv"),
		glNormalP3ui:                          getProcAddr("glNormalP3ui"),
		glNormalP3uiv:                         getProcAddr("glNormalP3uiv"),
		glNormalPointer:                       getProcAddr("glNormalPointer"),
		glOrtho:                               getProcAddr("glOrtho"),
		glPassThrough:                         getProcAddr("glPassThrough"),
		glPatchParameterfv:                    getProcAddr("glPatchParameterfv"),
		glPatchParameteri:                     getProcAddr("glPatchParameteri"),
		glPauseTransformFeedback:              getProcAddr("glPauseTransformFeedback"),
		glPixelMapfv:                          getProcAddr("glPixelMapfv"),
		glPixelMapuiv:                         getProcAddr("glPixelMapuiv"),
		glPixelMapusv:                         getProcAddr("glPixelMapusv"),
		glPixelStoref:                         getProcAddr("glPixelStoref"),
		glPixelStorei:                         getProcAddr("glPixelStorei"),
		glPixelTransferf:                      getProcAddr("glPixelTransferf"),
		glPixelTransferi:                      getProcAddr("glPixelTransferi"),
		glPixelZoom:                           getProcAddr("glPixelZoom"),
		glPointParameterf:                     getProcAddr("glPointParameterf"),
		glPointParameterfv:                    getProcAddr("glPointParameterfv"),
		glPointParameteri:                     getProcAddr("glPointParameteri"),
		glPointParameteriv:                    getProcAddr("glPointParameteriv"),
		glPointSize:                           getProcAddr("glPointSize"),
		glPolygonMode:                         getProcAddr("glPolygonMode"),
		glPolygonOffset:                       getProcAddr("glPolygonOffset"),
		glPolygonStipple:                      getProcAddr("glPolygonStipple"),
		glPopAttrib:                           getProcAddr("glPopAttrib"),
		glPopClientAttrib:                     getProcAddr("glPopClientAttrib"),
		glPopMatrix:                           getProcAddr("glPopMatrix"),
		glPopName:                             getProcAddr("glPopName"),
		glPrimitiveRestartIndex:               getProcAddr("glPrimitiveRestartIndex"),
		glPrioritizeTextures:                  getProcAddr("glPrioritizeTextures"),
		glProvokingVertex:                     getProcAddr("glProvokingVertex"),
		glPushAttrib:                          getProcAddr("glPushAttrib"),
		glPushClientAttrib:                    getProcAddr("glPushClientAttrib"),
		glPushMatrix:                          getProcAddr("glPushMatrix"),
		glPushName:                            getProcAddr("glPushName"),
		glQueryCounter:                        getProcAddr("glQueryCounter"),
		glRasterPos2d:                         getProcAddr("glRasterPos2d"),
		glRasterPos2dv:                        getProcAddr("glRasterPos2dv"),
		glRasterPos2f:                         getProcAddr("glRasterPos2f"),
		glRasterPos2fv:                        getProcAddr("glRasterPos2fv"),
		glRasterPos2i:                         getProcAddr("glRasterPos2i"),
		glRasterPos2iv:                        getProcAddr("glRasterPos2iv"),
		glRasterPos2s:                         getProcAddr("glRasterPos2s"),
		glRasterPos2sv:                        getProcAddr("glRasterPos2sv"),
		glRasterPos3d:                         getProcAddr("glRasterPos3d"),
		glRasterPos3dv:                        getProcAddr("glRasterPos3dv"),
		glRasterPos3f:                         getProcAddr("glRasterPos3f"),
		glRasterPos3fv:                        getProcAddr("glRasterPos3fv"),
		glRasterPos3i:                         getProcAddr("glRasterPos3i"),
		glRasterPos3iv:                        getProcAddr("glRasterPos3iv"),
		glRasterPos3s:                         getProcAddr("glRasterPos3s"),
		glRasterPos3sv:                        getProcAddr("glRasterPos3sv"),
		glRasterPos4d:                         getProcAddr("glRasterPos4d"),
		glRasterPos4dv:                        getProcAddr("glRasterPos4dv"),
		glRasterPos4f:                         getProcAddr("glRasterPos4f"),
		glRasterPos4fv:                        getProcAddr("glRasterPos4fv"),
		glRasterPos4i:                         getProcAddr("glRasterPos4i"),
		glRasterPos4iv:                        getProcAddr("glRasterPos4iv"),
		glRasterPos4s:                         getProcAddr("glRasterPos4s"),
		glRasterPos4sv:                        getProcAddr("glRasterPos4sv"),
		glReadBuffer:                          getProcAddr("glReadBuffer"),
		glReadPixels:                          getProcAddr("glReadPixels"),
		glRectd:                               getProcAddr("glRectd"),
		glRectdv:                              getProcAddr("glRectdv"),
		glRectf:                               getProcAddr("glRectf"),
		glRectfv:                              getProcAddr("glRectfv"),
		glRecti:                               getProcAddr("glRecti"),
		glRectiv:                              getProcAddr("glRectiv"),
		glRects:                               getProcAddr("glRects"),
		glRectsv:                              getProcAddr("glRectsv"),
		glRenderMode:                          getProcAddr("glRenderMode"),
		glRenderbufferStorage:                 getProcAddr("glRenderbufferStorage"),
		glRenderbufferStorageMultisample:      getProcAddr("glRenderbufferStorageMultisample"),
		glResumeTransformFeedback:             getProcAddr("glResumeTransformFeedback"),
		glRotated:                             getProcAddr("glRotated"),
		glRotatef:                             getProcAddr("glRotatef"),
		glSampleCoverage:                      getProcAddr("glSampleCoverage"),
		glSampleMaski:                         getProcAddr("glSampleMaski"),
		glSamplerParameterIiv:                 getProcAddr("glSamplerParameterIiv"),
		glSamplerParameterIuiv:                getProcAddr("glSamplerParameterIuiv"),
		glSamplerParameterf:                   getProcAddr("glSamplerParameterf"),
		glSamplerParameterfv:                  getProcAddr("glSamplerParameterfv"),
		glSamplerParameteri:                   getProcAddr("glSamplerParameteri"),
		glSamplerParameteriv:                  getProcAddr("glSamplerParameteriv"),
		glScaled:                              getProcAddr("glScaled"),
		glScalef:                              getProcAddr("glScalef"),
		glScissor:                             getProcAddr("glScissor"),
		glSecondaryColor3b:                    getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:                   getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:                    getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:                   getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:                    getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:                   getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:                    getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:                   getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:                    getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:                   getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:                   getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:                  getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:                   getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:                  getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:                   getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:                  getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorP3ui:                  getProcAddr("glSecondaryColorP3ui"),
		glSecondaryColorP3uiv:                 getProcAddr("glSecondaryColorP3uiv"),
		glSecondaryColorPointer:               getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:                        getProcAddr("glSelectBuffer"),
		glShadeModel:                          getProcAddr("glShadeModel"),
		glShaderSource:                        getProcAddr("glShaderSource"),
		glStencilFunc:                         getProcAddr("glStencilFunc"),
		glStencilFuncSeparate:                 getProcAddr("glStencilFuncSeparate"),
		glStencilMask:                         getProcAddr("glStencilMask"),
		glStencilMaskSeparate:                 getProcAddr("glStencilMaskSeparate"),
		glStencilOp:                           getProcAddr("glStencilOp"),
		glStencilOpSeparate:                   getProcAddr("glStencilOpSeparate"),
		glTexBuffer:                           getProcAddr("glTexBuffer"),
		glTexCoord1d:                          getProcAddr("glTexCoord1d"),
		glTexCoord1dv:                         getProcAddr("glTexCoord1dv"),
		glTexCoord1f:                          getProcAddr("glTexCoord1f"),
		glTexCoord1fv:                         getProcAddr("glTexCoord1fv"),
		glTexCoord1i:                          getProcAddr("glTexCoord1i"),
		glTexCoord1iv:                         getProcAddr("glTexCoord1iv"),
		glTexCoord1s:                          getProcAddr("glTexCoord1s"),
		glTexCoord1sv:                         getProcAddr("glTexCoord1sv"),
		glTexCoord2d:                          getProcAddr("glTexCoord2d"),
		glTexCoord2dv:                         getProcAddr("glTexCoord2dv"),
		glTexCoord2f:                          getProcAddr("glTexCoord2f"),
		glTexCoord2fv:                         getProcAddr("glTexCoord2fv"),
		glTexCoord2i:                          getProcAddr("glTexCoord2i"),
		glTexCoord2iv:                         getProcAddr("glTexCoord2iv"),
		glTexCoord2s:                          getProcAddr("glTexCoord2s"),
		glTexCoord2sv:                         getProcAddr("glTexCoord2sv"),
		glTexCoord3d:                          getProcAddr("glTexCoord3d"),
		glTexCoord3dv:                         getProcAddr("glTexCoord3dv"),
		glTexCoord3f:                          getProcAddr("glTexCoord3f"),
		glTexCoord3fv:                         getProcAddr("glTexCoord3fv"),
		glTexCoord3i:                          getProcAddr("glTexCoord3i"),
		glTexCoord3iv:                         getProcAddr("glTexCoord3iv"),
		glTexCoord3s:                          getProcAddr("glTexCoord3s"),
		glTexCoord3sv:                         getProcAddr("glTexCoord3sv"),
		glTexCoord4d:                          getProcAddr("glTexCoord4d"),
		glTexCoord4dv:                         getProcAddr("glTexCoord4dv"),
		glTexCoord4f:                          getProcAddr("glTexCoord4f"),
		glTexCoord4fv:                         getProcAddr("glTexCoord4fv"),
		glTexCoord4i:                          getProcAddr("glTexCoord4i"),
		glTexCoord4iv:                         getProcAddr("glTexCoord4iv"),
		glTexCoord4s:                          getProcAddr("glTexCoord4s"),
		glTexCoord4sv:                         getProcAddr("glTexCoord4sv"),
		glTexCoordP1ui:                        getProcAddr("glTexCoordP1ui"),
		glTexCoordP1uiv:                       getProcAddr("glTexCoordP1uiv"),
		glTexCoordP2ui:                        getProcAddr("glTexCoordP2ui"),
		glTexCoordP2uiv:                       getProcAddr("glTexCoordP2uiv"),
		glTexCoordP3ui:                        getProcAddr("glTexCoordP3ui"),
		glTexCoordP3uiv:                       getProcAddr("glTexCoordP3uiv"),
		glTexCoordP4ui:                        getProcAddr("glTexCoordP4ui"),
		glTexCoordP4uiv:                       getProcAddr("glTexCoordP4uiv"),
		glTexCoordPointer:                     getProcAddr("glTexCoordPointer"),
		glTexEnvf:                             getProcAddr("glTexEnvf"),
		glTexEnvfv:                            getProcAddr("glTexEnvfv"),
		glTexEnvi:                             getProcAddr("glTexEnvi"),
		glTexEnviv:                            getProcAddr("glTexEnviv"),
		glTexGend:                             getProcAddr("glTexGend"),
		glTexGendv:                            getProcAddr("glTexGendv"),
		glTexGenf:                             getProcAddr("glTexGenf"),
		glTexGenfv:                            getProcAddr("glTexGenfv"),
		glTexGeni:                             getProcAddr("glTexGeni"),
		glTexGeniv:                            getProcAddr("glTexGeniv"),
		glTexImage1D:                          getProcAddr("glTexImage1D"),
		glTexImage2D:                          getProcAddr("glTexImage2D"),
		glTexImage2DMultisample:               getProcAddr("glTexImage2DMultisample"),
		glTexImage3D:                          getProcAddr("glTexImage3D"),
		glTexImage3DMultisample:               getProcAddr("glTexImage3DMultisample"),
		glTexParameterIiv:                     getProcAddr("glTexParameterIiv"),
		glTexParameterIuiv:                    getProcAddr("glTexParameterIuiv"),
		glTexParameterf:                       getProcAddr("glTexParameterf"),
		glTexParameterfv:                      getProcAddr("glTexParameterfv"),
		glTexParameteri:                       getProcAddr("glTexParameteri"),
		glTexParameteriv:                      getProcAddr("glTexParameteriv"),
		glTexSubImage1D:                       getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:                       getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:                       getProcAddr("glTexSubImage3D"),
		glTransformFeedbackVaryings:           getProcAddr("glTransformFeedbackVaryings"),
		glTranslated:                          getProcAddr("glTranslated"),
		glTranslatef:                          getProcAddr("glTranslatef"),
		glUniform1d:                           getProcAddr("glUniform1d"),
		glUniform1dv:                          getProcAddr("glUniform1dv"),
		glUniform1f:                           getProcAddr("glUniform1f"),
		glUniform1fv:                          getProcAddr("glUniform1fv"),
		glUniform1i:                           getProcAddr("glUniform1i"),
		glUniform1iv:                          getProcAddr("glUniform1iv"),
		glUniform1ui:                          getProcAddr("glUniform1ui"),
		glUniform1uiv:                         getProcAddr("glUniform1uiv"),
		glUniform2d:                           getProcAddr("glUniform2d"),
		glUniform2dv:                          getProcAddr("glUniform2dv"),
		glUniform2f:                           getProcAddr("glUniform2f"),
		glUniform2fv:                          getProcAddr("glUniform2fv"),
		glUniform2i:                           getProcAddr("glUniform2i"),
		glUniform2iv:                          getProcAddr("glUniform2iv"),
		glUniform2ui:                          getProcAddr("glUniform2ui"),
		glUniform2uiv:                         getProcAddr("glUniform2uiv"),
		glUniform3d:                           getProcAddr("glUniform3d"),
		glUniform3dv:                          getProcAddr("glUniform3dv"),
		glUniform3f:                           getProcAddr("glUniform3f"),
		glUniform3fv:                          getProcAddr("glUniform3fv"),
		glUniform3i:                           getProcAddr("glUniform3i"),
		glUniform3iv:                          getProcAddr("glUniform3iv"),
		glUniform3ui:                          getProcAddr("glUniform3ui"),
		glUniform3uiv:                         getProcAddr("glUniform3uiv"),
		glUniform4d:                           getProcAddr("glUniform4d"),
		glUniform4dv:                          getProcAddr("glUniform4dv"),
		glUniform4f:                           getProcAddr("glUniform4f"),
		glUniform4fv:                          getProcAddr("glUniform4fv"),
		glUniform4i:                           getProcAddr("glUniform4i"),
		glUniform4iv:                          getProcAddr("glUniform4iv"),
		glUniform4ui:                          getProcAddr("glUniform4ui"),
		glUniform4uiv:                         getProcAddr("glUniform4uiv"),
		glUniformBlockBinding:                 getProcAddr("glUniformBlockBinding"),
		glUniformMatrix2dv:                    getProcAddr("glUniformMatrix2dv"),
		glUniformMatrix2fv:                    getProcAddr("glUniformMatrix2fv"),
		glUniformMatrix2x3dv:                  getProcAddr("glUniformMatrix2x3dv"),
		glUniformMatrix2x3fv:                  getProcAddr("glUniformMatrix2x3fv"),
		glUniformMatrix2x4dv:                  getProcAddr("glUniformMatrix2x4dv"),
		glUniformMatrix2x4fv:                  getProcAddr("glUniformMatrix2x4fv"),
		glUniformMatrix3dv:                    getProcAddr("glUniformMatrix3dv"),
		glUniformMatrix3fv:                    getProcAddr("glUniformMatrix3fv"),
		glUniformMatrix3x2dv:                  getProcAddr("glUniformMatrix3x2dv"),
		glUniformMatrix3x2fv:                  getProcAddr("glUniformMatrix3x2fv"),
		glUniformMatrix3x4dv:                  getProcAddr("glUniformMatrix3x4dv"),
		glUniformMatrix3x4fv:                  getProcAddr("glUniformMatrix3x4fv"),
		glUniformMatrix4dv:                    getProcAddr("glUniformMatrix4dv"),
		glUniformMatrix4fv:                    getProcAddr("glUniformMatrix4fv"),
		glUniformMatrix4x2dv:                  getProcAddr("glUniformMatrix4x2dv"),
		glUniformMatrix4x2fv:                  getProcAddr("glUniformMatrix4x2fv"),
		glUniformMatrix4x3dv:                  getProcAddr("glUniformMatrix4x3dv"),
		glUniformMatrix4x3fv:                  getProcAddr("glUniformMatrix4x3fv"),
		glUniformSubroutinesuiv:               getProcAddr("glUniformSubroutinesuiv"),
		glUnmapBuffer:                         getProcAddr("glUnmapBuffer"),
		glUseProgram:                          getProcAddr("glUseProgram"),
		glValidateProgram:                     getProcAddr("glValidateProgram"),
		glVertex2d:                            getProcAddr("glVertex2d"),
		glVertex2dv:                           getProcAddr("glVertex2dv"),
		glVertex2f:                            getProcAddr("glVertex2f"),
		glVertex2fv:                           getProcAddr("glVertex2fv"),
		glVertex2i:                            getProcAddr("glVertex2i"),
		glVertex2iv:                           getProcAddr("glVertex2iv"),
		glVertex2s:                            getProcAddr("glVertex2s"),
		glVertex2sv:                           getProcAddr("glVertex2sv"),
		glVertex3d:                            getProcAddr("glVertex3d"),
		glVertex3dv:                           getProcAddr("glVertex3dv"),
		glVertex3f:                            getProcAddr("glVertex3f"),
		glVertex3fv:                           getProcAddr("glVertex3fv"),
		glVertex3i:                            getProcAddr("glVertex3i"),
		glVertex3iv:                           getProcAddr("glVertex3iv"),
		glVertex3s:                            getProcAddr("glVertex3s"),
		glVertex3sv:                           getProcAddr("glVertex3sv"),
		glVertex4d:                            getProcAddr("glVertex4d"),
		glVertex4dv:                           getProcAddr("glVertex4dv"),
		glVertex4f:                            getProcAddr("glVertex4f"),
		glVertex4fv:                           getProcAddr("glVertex4fv"),
		glVertex4i:                            getProcAddr("glVertex4i"),
		glVertex4iv:                           getProcAddr("glVertex4iv"),
		glVertex4s:                            getProcAddr("glVertex4s"),
		glVertex4sv:                           getProcAddr("glVertex4sv"),
		glVertexAttrib1d:                      getProcAddr("glVertexAttrib1d"),
		glVertexAttrib1dv:                     getProcAddr("glVertexAttrib1dv"),
		glVertexAttrib1f:                      getProcAddr("glVertexAttrib1f"),
		glVertexAttrib1fv:                     getProcAddr("glVertexAttrib1fv"),
		glVertexAttrib1s:                      getProcAddr("glVertexAttrib1s"),
		glVertexAttrib1sv:                     getProcAddr("glVertexAttrib1sv"),
		glVertexAttrib2d:                      getProcAddr("glVertexAttrib2d"),
		glVertexAttrib2dv:                     getProcAddr("glVertexAttrib2dv"),
		glVertexAttrib2f:                      getProcAddr("glVertexAttrib2f"),
		glVertexAttrib2fv:                     getProcAddr("glVertexAttrib2fv"),
		glVertexAttrib2s:                      getProcAddr("glVertexAttrib2s"),
		glVertexAttrib2sv:                     getProcAddr("glVertexAttrib2sv"),
		glVertexAttrib3d:                      getProcAddr("glVertexAttrib3d"),
		glVertexAttrib3dv:                     getProcAddr("glVertexAttrib3dv"),
		glVertexAttrib3f:                      getProcAddr("glVertexAttrib3f"),
		glVertexAttrib3fv:                     getProcAddr("glVertexAttrib3fv"),
		glVertexAttrib3s:                      getProcAddr("glVertexAttrib3s"),
		glVertexAttrib3sv:                     getProcAddr("glVertexAttrib3sv"),
		glVertexAttrib4Nbv:                    getProcAddr("glVertexAttrib4Nbv"),
		glVertexAttrib4Niv:                    getProcAddr("glVertexAttrib4Niv"),
		glVertexAttrib4Nsv:                    getProcAddr("glVertexAttrib4Nsv"),
		glVertexAttrib4Nub:                    getProcAddr("glVertexAttrib4Nub"),
		glVertexAttrib4Nubv:                   getProcAddr("glVertexAttrib4Nubv"),
		glVertexAttrib4Nuiv:                   getProcAddr("glVertexAttrib4Nuiv"),
		glVertexAttrib4Nusv:                   getProcAddr("glVertexAttrib4Nusv"),
		glVertexAttrib4bv:                     getProcAddr("glVertexAttrib4bv"),
		glVertexAttrib4d:                      getProcAddr("glVertexAttrib4d"),
		glVertexAttrib4dv:                     getProcAddr("glVertexAttrib4dv"),
		glVertexAttrib4f:                      getProcAddr("glVertexAttrib4f"),
		glVertexAttrib4fv:                     getProcAddr("glVertexAttrib4fv"),
		glVertexAttrib4iv:                     getProcAddr("glVertexAttrib4iv"),
		glVertexAttrib4s:                      getProcAddr("glVertexAttrib4s"),
		glVertexAttrib4sv:                     getProcAddr("glVertexAttrib4sv"),
		glVertexAttrib4ubv:                    getProcAddr("glVertexAttrib4ubv"),
		glVertexAttrib4uiv:                    getProcAddr("glVertexAttrib4uiv"),
		glVertexAttrib4usv:                    getProcAddr("glVertexAttrib4usv"),
		glVertexAttribDivisor:                 getProcAddr("glVertexAttribDivisor"),
		glVertexAttribI1i:                     getProcAddr("glVertexAttribI1i"),
		glVertexAttribI1iv:                    getProcAddr("glVertexAttribI1iv"),
		glVertexAttribI1ui:                    getProcAddr("glVertexAttribI1ui"),
		glVertexAttribI1uiv:                   getProcAddr("glVertexAttribI1uiv"),
		glVertexAttribI2i:                     getProcAddr("glVertexAttribI2i"),
		glVertexAttribI2iv:                    getProcAddr("glVertexAttribI2iv"),
		glVertexAttribI2ui:                    getProcAddr("glVertexAttribI2ui"),
		glVertexAttribI2uiv:                   getProcAddr("glVertexAttribI2uiv"),
		glVertexAttribI3i:                     getProcAddr("glVertexAttribI3i"),
		glVertexAttribI3iv:                    getProcAddr("glVertexAttribI3iv"),
		glVertexAttribI3ui:                    getProcAddr("glVertexAttribI3ui"),
		glVertexAttribI3uiv:                   getProcAddr("glVertexAttribI3uiv"),
		glVertexAttribI4bv:                    getProcAddr("glVertexAttribI4bv"),
		glVertexAttribI4i:                     getProcAddr("glVertexAttribI4i"),
		glVertexAttribI4iv:                    getProcAddr("glVertexAttribI4iv"),
		glVertexAttribI4sv:                    getProcAddr("glVertexAttribI4sv"),
		glVertexAttribI4ubv:                   getProcAddr("glVertexAttribI4ubv"),
		glVertexAttribI4ui:                    getProcAddr("glVertexAttribI4ui"),
		glVertexAttribI4uiv:                   getProcAddr("glVertexAttribI4uiv"),
		glVertexAttribI4usv:                   getProcAddr("glVertexAttribI4usv"),
		glVertexAttribIPointer:                getProcAddr("glVertexAttribIPointer"),
		glVertexAttribP1ui:                    getProcAddr("glVertexAttribP1ui"),
		glVertexAttribP1uiv:                   getProcAddr("glVertexAttribP1uiv"),
		glVertexAttribP2ui:                    getProcAddr("glVertexAttribP2ui"),
		glVertexAttribP2uiv:                   getProcAddr("glVertexAttribP2uiv"),
		glVertexAttribP3ui:                    getProcAddr("glVertexAttribP3ui"),
		glVertexAttribP3uiv:                   getProcAddr("glVertexAttribP3uiv"),
		glVertexAttribP4ui:                    getProcAddr("glVertexAttribP4ui"),
		glVertexAttribP4uiv:                   getProcAddr("glVertexAttribP4uiv"),
		glVertexAttribPointer:                 getProcAddr("glVertexAttribPointer"),
		glVertexP2ui:                          getProcAddr("glVertexP2ui"),
		glVertexP2uiv:                         getProcAddr("glVertexP2uiv"),
		glVertexP3ui:                          getProcAddr("glVertexP3ui"),
		glVertexP3uiv:                         getProcAddr("glVertexP3uiv"),
		glVertexP4ui:                          getProcAddr("glVertexP4ui"),
		glVertexP4uiv:                         getProcAddr("glVertexP4uiv"),
		glVertexPointer:                       getProcAddr("glVertexPointer"),
		glViewport:                            getProcAddr("glViewport"),
		glWaitSync:                            getProcAddr("glWaitSync"),
		glWindowPos2d:                         getProcAddr("glWindowPos2d"),
		glWindowPos2dv:                        getProcAddr("glWindowPos2dv"),
		glWindowPos2f:                         getProcAddr("glWindowPos2f"),
		glWindowPos2fv:                        getProcAddr("glWindowPos2fv"),
		glWindowPos2i:                         getProcAddr("glWindowPos2i"),
		glWindowPos2iv:                        getProcAddr("glWindowPos2iv"),
		glWindowPos2s:                         getProcAddr("glWindowPos2s"),
		glWindowPos2sv:                        getProcAddr("glWindowPos2sv"),
		glWindowPos3d:                         getProcAddr("glWindowPos3d"),
		glWindowPos3dv:                        getProcAddr("glWindowPos3dv"),
		glWindowPos3f:                         getProcAddr("glWindowPos3f"),
		glWindowPos3fv:                        getProcAddr("glWindowPos3fv"),
		glWindowPos3i:                         getProcAddr("glWindowPos3i"),
		glWindowPos3iv:                        getProcAddr("glWindowPos3iv"),
		glWindowPos3s:                         getProcAddr("glWindowPos3s"),
		glWindowPos3sv:                        getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL410 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveShaderProgram(pipeline uint32, program uint32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	AttachShader(program uint32, shader uint32)
	Begin(mode uint32)
	BeginConditionalRender(id uint32, mode uint32)
	BeginQuery(target uint32, id uint32)
	BeginQueryIndexed(target uint32, index uint32, id uint32)
	BeginTransformFeedback(primitiveMode uint32)
	BindAttribLocation(program uint32, index uint32, name *uint8)
	BindBuffer(target uint32, buffer uint32)
	BindBufferBase(target uint32, index uint32, buffer uint32)
	BindBufferRange(target uint32, index uint32, buffer uint32, offset uintptr, size int)
	BindFragDataLocation(program uint32, color uint32, name *uint8)
	BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *uint8)
	BindFramebuffer(target uint32, framebuffer uint32)
	BindProgramPipeline(pipeline uint32)
	BindRenderbuffer(target uint32, renderbuffer uint32)
	BindSampler(unit uint32, sampler uint32)
	BindTexture(target uint32, texture uint32)
	BindTransformFeedback(target uint32, id uint32)
	BindVertexArray(array uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)
	BlendEquationSeparatei(buf uint32, modeRGB uint32, modeAlpha uint32)
	BlendEquationi(buf uint32, mode uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BlendFuncSeparatei(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32)
	BlendFunci(buf uint32, src uint32, dst uint32)
	BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	CheckFramebufferStatus(target uint32) uint32
	ClampColor(target uint32, clamp uint32)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32)
	ClearBufferfv(buffer uint32, drawbuffer int32, value *float32)
	ClearBufferiv(buffer uint32, drawbuffer int32, value *int32)
	ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearDepthf(d float32)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClientActiveTexture(texture uint32)
	ClientWaitSync(sync GLsync, flags uint32, timeout uint64) uint32
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaski(index uint32, r bool, g bool, b bool, a bool)
	ColorMaterial(face uint32, mode uint32)
	ColorP3ui(type_ uint32, color uint32)
	ColorP3uiv(type_ uint32, color *uint32)
	ColorP4ui(type_ uint32, color uint32)
	ColorP4uiv(type_ uint32, color *uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompileShader(shader uint32)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset uintptr, writeOffset uintptr, size int)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CreateProgram() uint32
	CreateShader(type_ uint32) uint32
	CreateShaderProgramv(type_ uint32, count int32, strings **uint8) uint32
	CullFace(mode uint32)
	DeleteBuffers(n int32, buffers *uint32)
	DeleteFramebuffers(n int32, framebuffers *uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteProgram(program uint32)
	DeleteProgramPipelines(n int32, pipelines *uint32)
	DeleteQueries(n int32, ids *uint32)
	DeleteRenderbuffers(n int32, renderbuffers *uint32)
	DeleteSamplers(count int32, samplers *uint32)
	DeleteShader(shader uint32)
	DeleteSync(sync GLsync)
	DeleteTextures(n int32, textures *uint32)
	DeleteTransformFeedbacks(n int32, ids *uint32)
	DeleteVertexArrays(n int32, arrays *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	DepthRangeArrayv(first uint32, count int32, v *float64)
	DepthRangeIndexed(index uint32, n float64, f float64)
	DepthRangef(n float32, f float32)
	DetachShader(program uint32, shader uint32)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DisableVertexAttribArray(index uint32)
	Disablei(target uint32, index uint32)
	DrawArrays(mode uint32, first int32, count int32)
	DrawArraysIndirect(mode uint32, indirect unsafe.Pointer)
	DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32)
	DrawBuffer(buf uint32)
	DrawBuffers(n int32, bufs *uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawElementsBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer)
	DrawElementsInstanced(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32)
	DrawElementsInstancedBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawRangeElementsBaseVertex(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawTransformFeedback(mode uint32, id uint32)
	DrawTransformFeedbackStream(mode uint32, id uint32, stream uint32)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	EnableVertexAttribArray(index uint32)
	Enablei(target uint32, index uint32)
	End()
	EndConditionalRender()
	EndList()
	EndQuery(target uint32)
	EndQueryIndexed(target uint32, index uint32)
	EndTransformFeedback()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	FenceSync(condition uint32, flags uint32) GLsync
	Finish()
	Flush()
	FlushMappedBufferRange(target uint32, offset uintptr, length int)
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	FramebufferTexture(target uint32, attachment uint32, texture uint32, level int32)
	FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32)
	FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenBuffers(n int32, buffers *uint32)
	GenFramebuffers(n int32, framebuffers *uint32)
	GenLists(range_ int32) uint32
	GenProgramPipelines(n int32, pipelines *uint32)
	GenQueries(n int32, ids *uint32)
	GenRenderbuffers(n int32, renderbuffers *uint32)
	GenSamplers(count int32, samplers *uint32)
	GenTextures(n int32, textures *uint32)
	GenTransformFeedbacks(n int32, ids *uint32)
	GenVertexArrays(n int32, arrays *uint32)
	GenerateMipmap(target uint32)
	GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveSubroutineName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineUniformName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineUniformiv(program uint32, shadertype uint32, index uint32, pname uint32, values *int32)
	GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *uint8)
	GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32)
	GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *uint8)
	GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32)
	GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)
	GetAttribLocation(program uint32, name *uint8) int32
	GetBooleani_v(target uint32, index uint32, data *bool)
	GetBooleanv(pname uint32, data *bool)
	GetBufferParameteri64v(target uint32, pname uint32, params *int64)
	GetBufferParameteriv(target uint32, pname uint32, params *int32)
	GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)
	GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetDoublei_v(target uint32, index uint32, data *float64)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloati_v(target uint32, index uint32, data *float32)
	GetFloatv(pname uint32, data *float32)
	GetFragDataIndex(program uint32, name *uint8) int32
	GetFragDataLocation(program uint32, name *uint8) int32
	GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32)
	GetInteger64i_v(target uint32, index uint32, data *int64)
	GetInteger64v(pname uint32, data *int64)
	GetIntegeri_v(target uint32, index uint32, data *int32)
	GetIntegerv(pname uint32, data *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetMultisamplefv(pname uint32, index uint32, val *float32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetProgramBinary(program uint32, bufSize int32, length *int32, binaryFormat *uint32, binary unsafe.Pointer)
	GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramPipelineInfoLog(pipeline uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramPipelineiv(pipeline uint32, pname uint32, params *int32)
	GetProgramStageiv(program uint32, shadertype uint32, pname uint32, values *int32)
	GetProgramiv(program uint32, pname uint32, params *int32)
	GetQueryIndexediv(target uint32, index uint32, pname uint32, params *int32)
	GetQueryObjecti64v(id uint32, pname uint32, params *int64)
	GetQueryObjectiv(id uint32, pname uint32, params *int32)
	GetQueryObjectui64v(id uint32, pname uint32, params *uint64)
	GetQueryObjectuiv(id uint32, pname uint32, params *uint32)
	GetQueryiv(target uint32, pname uint32, params *int32)
	GetRenderbufferParameteriv(target uint32, pname uint32, params *int32)
	GetSamplerParameterIiv(sampler uint32, pname uint32, params *int32)
	GetSamplerParameterIuiv(sampler uint32, pname uint32, params *uint32)
	GetSamplerParameterfv(sampler uint32, pname uint32, params *float32)
	GetSamplerParameteriv(sampler uint32, pname uint32, params *int32)
	GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8)
	GetShaderPrecisionFormat(shadertype uint32, precisiontype uint32, range_ *int32, precision *int32)
	GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8)
	GetShaderiv(shader uint32, pname uint32, params *int32)
	GetString(name uint32) *uint8
	GetStringi(name uint32, index uint32) *uint8
	GetSubroutineIndex(program uint32, shadertype uint32, name *uint8) uint32
	GetSubroutineUniformLocation(program uint32, shadertype uint32, name *uint8) int32
	GetSynciv(sync GLsync, pname uint32, count int32, length *int32, values *int32)
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterIiv(target uint32, pname uint32, params *int32)
	GetTexParameterIuiv(target uint32, pname uint32, params *uint32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetUniformBlockIndex(program uint32, uniformBlockName *uint8) uint32
	GetUniformIndices(program uint32, uniformCount int32, uniformNames **uint8, uniformIndices *uint32)
	GetUniformLocation(program uint32, name *uint8) int32
	GetUniformSubroutineuiv(shadertype uint32, location int32, params *uint32)
	GetUniformdv(program uint32, location int32, params *float64)
	GetUniformfv(program uint32, location int32, params *float32)
	GetUniformiv(program uint32, location int32, params *int32)
	GetUniformuiv(program uint32, location int32, params *uint32)
	GetVertexAttribIiv(index uint32, pname uint32, params *int32)
	GetVertexAttribIuiv(index uint32, pname uint32, params *uint32)
	GetVertexAttribLdv(index uint32, pname uint32, params *float64)
	GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)
	GetVertexAttribdv(index uint32, pname uint32, params *float64)
	GetVertexAttribfv(index uint32, pname uint32, params *float32)
	GetVertexAttribiv(index uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	IsBuffer(buffer uint32) bool
	IsEnabled(cap uint32) bool
	IsEnabledi(target uint32, index uint32) bool
	IsFramebuffer(framebuffer uint32) bool
	IsList(list uint32) bool
	IsProgram(program uint32) bool
	IsProgramPipeline(pipeline uint32) bool
	IsQuery(id uint32) bool
	IsRenderbuffer(renderbuffer uint32) bool
	IsSampler(sampler uint32) bool
	IsShader(shader uint32) bool
	IsSync(sync GLsync) bool
	IsTexture(texture uint32) bool
	IsTransformFeedback(id uint32) bool
	IsVertexArray(array uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	LinkProgram(program uint32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapBuffer(target uint32, access uint32) unsafe.Pointer
	MapBufferRange(target uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MinSampleShading(value float32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiDrawElementsBaseVertex(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	MultiTexCoordP1ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP1uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP2ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP2uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP3ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP3uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP4ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP4uiv(texture uint32, type_ uint32, coords *uint32)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalP3ui(type_ uint32, coords uint32)
	NormalP3uiv(type_ uint32, coords *uint32)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PatchParameterfv(pname uint32, values *float32)
	PatchParameteri(pname uint32, value int32)
	PauseTransformFeedback()
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopMatrix()
	PopName()
	PrimitiveRestartIndex(index uint32)
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	ProgramBinary(program uint32, binaryFormat uint32, binary unsafe.Pointer, length int32)
	ProgramParameteri(program uint32, pname uint32, value int32)
	ProgramUniform1d(program uint32, location int32, v0 float64)
	ProgramUniform1dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform1f(program uint32, location int32, v0 float32)
	ProgramUniform1fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform1i(program uint32, location int32, v0 int32)
	ProgramUniform1iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform1ui(program uint32, location int32, v0 uint32)
	ProgramUniform1uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform2d(program uint32, location int32, v0 float64, v1 float64)
	ProgramUniform2dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32)
	ProgramUniform2fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32)
	ProgramUniform2iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32)
	ProgramUniform2uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform3d(program uint32, location int32, v0 float64, v1 float64, v2 float64)
	ProgramUniform3dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32)
	ProgramUniform3fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32)
	ProgramUniform3iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32)
	ProgramUniform3uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform4d(program uint32, location int32, v0 float64, v1 float64, v2 float64, v3 float64)
	ProgramUniform4dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	ProgramUniform4fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	ProgramUniform4iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	ProgramUniform4uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniformMatrix2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProvokingVertex(mode uint32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	QueryCounter(id uint32, target uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	ReleaseShaderCompiler()
	RenderMode(mode uint32) int32
	RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32)
	RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32)
	ResumeTransformFeedback()
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	SampleMaski(maskNumber uint32, mask uint32)
	SamplerParameterIiv(sampler uint32, pname uint32, param *int32)
	SamplerParameterIuiv(sampler uint32, pname uint32, param *uint32)
	SamplerParameterf(sampler uint32, pname uint32, param float32)
	SamplerParameterfv(sampler uint32, pname uint32, param *float32)
	SamplerParameteri(sampler uint32, pname uint32, param int32)
	SamplerParameteriv(sampler uint32, pname uint32, param *int32)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	ScissorArrayv(first uint32, count int32, v *int32)
	ScissorIndexed(index uint32, left int32, bottom int32, width int32, height int32)
	ScissorIndexedv(index uint32, v *int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorP3ui(type_ uint32, color uint32)
	SecondaryColorP3uiv(type_ uint32, color *uint32)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	ShaderBinary(count int32, shaders *uint32, binaryFormat uint32, binary unsafe.Pointer, length int32)
	ShaderSource(shader uint32, count int32, string **uint8, length *int32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilMaskSeparate(face uint32, mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)
	TexBuffer(target uint32, internalformat uint32, buffer uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordP1ui(type_ uint32, coords uint32)
	TexCoordP1uiv(type_ uint32, coords *uint32)
	TexCoordP2ui(type_ uint32, coords uint32)
	TexCoordP2uiv(type_ uint32, coords *uint32)
	TexCoordP3ui(type_ uint32, coords uint32)
	TexCoordP3uiv(type_ uint32, coords *uint32)
	TexCoordP4ui(type_ uint32, coords uint32)
	TexCoordP4uiv(type_ uint32, coords *uint32)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TexParameterIiv(target uint32, pname uint32, params *int32)
	TexParameterIuiv(target uint32, pname uint32, params *uint32)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TransformFeedbackVaryings(program uint32, count int32, varyings **uint8, bufferMode uint32)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Uniform1d(location int32, x float64)
	Uniform1dv(location int32, count int32, value *float64)
	Uniform1f(location int32, v0 float32)
	Uniform1fv(location int32, count int32, value *float32)
	Uniform1i(location int32, v0 int32)
	Uniform1iv(location int32, count int32, value *int32)
	Uniform1ui(location int32, v0 uint32)
	Uniform1uiv(location int32, count int32, value *uint32)
	Uniform2d(location int32, x float64, y float64)
	Uniform2dv(location int32, count int32, value *float64)
	Uniform2f(location int32, v0 float32, v1 float32)
	Uniform2fv(location int32, count int32, value *float32)
	Uniform2i(location int32, v0 int32, v1 int32)
	Uniform2iv(location int32, count int32, value *int32)
	Uniform2ui(location int32, v0 uint32, v1 uint32)
	Uniform2uiv(location int32, count int32, value *uint32)
	Uniform3d(location int32, x float64, y float64, z float64)
	Uniform3dv(location int32, count int32, value *float64)
	Uniform3f(location int32, v0 float32, v1 float32, v2 float32)
	Uniform3fv(location int32, count int32, value *float32)
	Uniform3i(location int32, v0 int32, v1 int32, v2 int32)
	Uniform3iv(location int32, count int32, value *int32)
	Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)
	Uniform3uiv(location int32, count int32, value *uint32)
	Uniform4d(location int32, x float64, y float64, z float64, w float64)
	Uniform4dv(location int32, count int32, value *float64)
	Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	Uniform4fv(location int32, count int32, value *float32)
	Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	Uniform4iv(location int32, count int32, value *int32)
	Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	Uniform4uiv(location int32, count int32, value *uint32)
	UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)
	UniformMatrix2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32)
	UniformSubroutinesuiv(shadertype uint32, count int32, indices *uint32)
	UnmapBuffer(target uint32) bool
	UseProgram(program uint32)
	UseProgramStages(pipeline uint32, stages uint32, program uint32)
	ValidateProgram(program uint32)
	ValidateProgramPipeline(pipeline uint32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexAttrib1d(index uint32, x float64)
	VertexAttrib1dv(index uint32, v *float64)
	VertexAttrib1f(index uint32, x float32)
	VertexAttrib1fv(index uint32, v *float32)
	VertexAttrib1s(index uint32, x int16)
	VertexAttrib1sv(index uint32, v *int16)
	VertexAttrib2d(index uint32, x float64, y float64)
	VertexAttrib2dv(index uint32, v *float64)
	VertexAttrib2f(index uint32, x float32, y float32)
	VertexAttrib2fv(index uint32, v *float32)
	VertexAttrib2s(index uint32, x int16, y int16)
	VertexAttrib2sv(index uint32, v *int16)
	VertexAttrib3d(index uint32, x float64, y float64, z float64)
	VertexAttrib3dv(index uint32, v *float64)
	VertexAttrib3f(index uint32, x float32, y float32, z float32)
	VertexAttrib3fv(index uint32, v *float32)
	VertexAttrib3s(index uint32, x int16, y int16, z int16)
	VertexAttrib3sv(index uint32, v *int16)
	VertexAttrib4Nbv(index uint32, v *int8)
	VertexAttrib4Niv(index uint32, v *int32)
	VertexAttrib4Nsv(index uint32, v *int16)
	VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4Nubv(index uint32, v *uint8)
	VertexAttrib4Nuiv(index uint32, v *uint32)
	VertexAttrib4Nusv(index uint32, v *uint16)
	VertexAttrib4bv(index uint32, v *int8)
	VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dv(index uint32, v *float64)
	VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fv(index uint32, v *float32)
	VertexAttrib4iv(index uint32, v *int32)
	VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4sv(index uint32, v *int16)
	VertexAttrib4ubv(index uint32, v *uint8)
	VertexAttrib4uiv(index uint32, v *uint32)
	VertexAttrib4usv(index uint32, v *uint16)
	VertexAttribDivisor(index uint32, divisor uint32)
	VertexAttribI1i(index uint32, x int32)
	VertexAttribI1iv(index uint32, v *int32)
	VertexAttribI1ui(index uint32, x uint32)
	VertexAttribI1uiv(index uint32, v *uint32)
	VertexAttribI2i(index uint32, x int32, y int32)
	VertexAttribI2iv(index uint32, v *int32)
	VertexAttribI2ui(index uint32, x uint32, y uint32)
	VertexAttribI2uiv(index uint32, v *uint32)
	VertexAttribI3i(index uint32, x int32, y int32, z int32)
	VertexAttribI3iv(index uint32, v *int32)
	VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32)
	VertexAttribI3uiv(index uint32, v *uint32)
	VertexAttribI4bv(index uint32, v *int8)
	VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)
	VertexAttribI4iv(index uint32, v *int32)
	VertexAttribI4sv(index uint32, v *int16)
	VertexAttribI4ubv(index uint32, v *uint8)
	VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)
	VertexAttribI4uiv(index uint32, v *uint32)
	VertexAttribI4usv(index uint32, v *uint16)
	VertexAttribIPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribL1d(index uint32, x float64)
	VertexAttribL1dv(index uint32, v *float64)
	VertexAttribL2d(index uint32, x float64, y float64)
	VertexAttribL2dv(index uint32, v *float64)
	VertexAttribL3d(index uint32, x float64, y float64, z float64)
	VertexAttribL3dv(index uint32, v *float64)
	VertexAttribL4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttribL4dv(index uint32, v *float64)
	VertexAttribLPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribP1ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP1uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP2ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP2uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP3ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP3uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP4ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP4uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribPointer(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer)
	VertexP2ui(type_ uint32, value uint32)
	VertexP2uiv(type_ uint32, value *uint32)
	VertexP3ui(type_ uint32, value uint32)
	VertexP3uiv(type_ uint32, value *uint32)
	VertexP4ui(type_ uint32, value uint32)
	VertexP4uiv(type_ uint32, value *uint32)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	ViewportArrayv(first uint32, count int32, v *float32)
	ViewportIndexedf(index uint32, x float32, y float32, w float32, h float32)
	ViewportIndexedfv(index uint32, v *float32)
	WaitSync(sync GLsync, flags uint32, timeout uint64)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New410(getProcAddr func(name string) unsafe.Pointer) GL410 {
	gl := &lib{
		glAccum:                               getProcAddr("glAccum"),
		glActiveShaderProgram:                 getProcAddr("glActiveShaderProgram"),
		glActiveTexture:                       getProcAddr("glActiveTexture"),
		glAlphaFunc:                           getProcAddr("glAlphaFunc"),
		glAreTexturesResident:                 getProcAddr("glAreTexturesResident"),
		glArrayElement:                        getProcAddr("glArrayElement"),
		glAttachShader:                        getProcAddr("glAttachShader"),
		glBegin:                               getProcAddr("glBegin"),
		glBeginConditionalRender:              getProcAddr("glBeginConditionalRender"),
		glBeginQuery:                          getProcAddr("glBeginQuery"),
		glBeginQueryIndexed:                   getProcAddr("glBeginQueryIndexed"),
		glBeginTransformFeedback:              getProcAddr("glBeginTransformFeedback"),
		glBindAttribLocation:                  getProcAddr("glBindAttribLocation"),
		glBindBuffer:                          getProcAddr("glBindBuffer"),
		glBindBufferBase:                      getProcAddr("glBindBufferBase"),
		glBindBufferRange:                     getProcAddr("glBindBufferRange"),
		glBindFragDataLocation:                getProcAddr("glBindFragDataLocation"),
		glBindFragDataLocationIndexed:         getProcAddr("glBindFragDataLocationIndexed"),
		glBindFramebuffer:                     getProcAddr("glBindFramebuffer"),
		glBindProgramPipeline:                 getProcAddr("glBindProgramPipeline"),
		glBindRenderbuffer:                    getProcAddr("glBindRenderbuffer"),
		glBindSampler:                         getProcAddr("glBindSampler"),
		glBindTexture:                         getProcAddr("glBindTexture"),
		glBindTransformFeedback:               getProcAddr("glBindTransformFeedback"),
		glBindVertexArray:                     getProcAddr("glBindVertexArray"),
		glBitmap:                              getProcAddr("glBitmap"),
		glBlendColor:                          getProcAddr("glBlendColor"),
		glBlendEquation:                       getProcAddr("glBlendEquation"),
		glBlendEquationSeparate:               getProcAddr("glBlendEquationSeparate"),
		glBlendEquationSeparatei:              getProcAddr("glBlendEquationSeparatei"),
		glBlendEquationi:                      getProcAddr("glBlendEquationi"),
		glBlendFunc:                           getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:                   getProcAddr("glBlendFuncSeparate"),
		glBlendFuncSeparatei:                  getProcAddr("glBlendFuncSeparatei"),
		glBlendFunci:                          getProcAddr("glBlendFunci"),
		glBlitFramebuffer:                     getProcAddr("glBlitFramebuffer"),
		glBufferData:                          getProcAddr("glBufferData"),
		glBufferSubData:                       getProcAddr("glBufferSubData"),
		glCallList:                            getProcAddr("glCallList"),
		glCallLists:                           getProcAddr("glCallLists"),
		glCheckFramebufferStatus:              getProcAddr("glCheckFramebufferStatus"),
		glClampColor:                          getProcAddr("glClampColor"),
		glClear:                               getProcAddr("glClear"),
		glClearAccum:                          getProcAddr("glClearAccum"),
		glClearBufferfi:                       getProcAddr("glClearBufferfi"),
		glClearBufferfv:                       getProcAddr("glClearBufferfv"),
		glClearBufferiv:                       getProcAddr("glClearBufferiv"),
		glClearBufferuiv:                      getProcAddr("glClearBufferuiv"),
		glClearColor:                          getProcAddr("glClearColor"),
		glClearDepth:                          getProcAddr("glClearDepth"),
		glClearDepthf:                         getProcAddr("glClearDepthf"),
		glClearIndex:                          getProcAddr("glClearIndex"),
		glClearStencil:                        getProcAddr("glClearStencil"),
		glClientActiveTexture:                 getProcAddr("glClientActiveTexture"),
		glClientWaitSync:                      getProcAddr("glClientWaitSync"),
		glClipPlane:                           getProcAddr("glClipPlane"),
		glColor3b:                             getProcAddr("glColor3b"),
		glColor3bv:                            getProcAddr("glColor3bv"),
		glColor3d:                             getProcAddr("glColor3d"),
		glColor3dv:                            getProcAddr("glColor3dv"),
		glColor3f:                             getProcAddr("glColor3f"),
		glColor3fv:                            getProcAddr("glColor3fv"),
		glColor3i:                             getProcAddr("glColor3i"),
		glColor3iv:                            getProcAddr("glColor3iv"),
		glColor3s:                             getProcAddr("glColor3s"),
		glColor3sv:                            getProcAddr("glColor3sv"),
		glColor3ub:                            getProcAddr("glColor3ub"),
		glColor3ubv:                           getProcAddr("glColor3ubv"),
		glColor3ui:                            getProcAddr("glColor3ui"),
		glColor3uiv:                           getProcAddr("glColor3uiv"),
		glColor3us:                            getProcAddr("glColor3us"),
		glColor3usv:                           getProcAddr("glColor3usv"),
		glColor4b:                             getProcAddr("glColor4b"),
		glColor4bv:                            getProcAddr("glColor4bv"),
		glColor4d:                             getProcAddr("glColor4d"),
		glColor4dv:                            getProcAddr("glColor4dv"),
		glColor4f:                             getProcAddr("glColor4f"),
		glColor4fv:                            getProcAddr("glColor4fv"),
		glColor4i:                             getProcAddr("glColor4i"),
		glColor4iv:                            getProcAddr("glColor4iv"),
		glColor4s:                             getProcAddr("glColor4s"),
		glColor4sv:                            getProcAddr("glColor4sv"),
		glColor4ub:                            getProcAddr("glColor4ub"),
		glColor4ubv:                           getProcAddr("glColor4ubv"),
		glColor4ui:                            getProcAddr("glColor4ui"),
		glColor4uiv:                           getProcAddr("glColor4uiv"),
		glColor4us:                            getProcAddr("glColor4us"),
		glColor4usv:                           getProcAddr("glColor4usv"),
		glColorMask:                           getProcAddr("glColorMask"),
		glColorMaski:                          getProcAddr("glColorMaski"),
		glColorMaterial:                       getProcAddr("glColorMaterial"),
		glColorP3ui:                           getProcAddr("glColorP3ui"),
		glColorP3uiv:                          getProcAddr("glColorP3uiv"),
		glColorP4ui:                           getProcAddr("glColorP4ui"),
		glColorP4uiv:                          getProcAddr("glColorP4uiv"),
		glColorPointer:                        getProcAddr("glColorPointer"),
		glCompileShader:                       getProcAddr("glCompileShader"),
		glCompressedTexImage1D:                getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:                getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:                getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D:             getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D:             getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D:             getProcAddr("glCompressedTexSubImage3D"),
		glCopyBufferSubData:                   getProcAddr("glCopyBufferSubData"),
		glCopyPixels:                          getProcAddr("glCopyPixels"),
		glCopyTexImage1D:                      getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:                      getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:                   getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:                   getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:                   getProcAddr("glCopyTexSubImage3D"),
		glCreateProgram:                       getProcAddr("glCreateProgram"),
		glCreateShader:                        getProcAddr("glCreateShader"),
		glCreateShaderProgramv:                getProcAddr("glCreateShaderProgramv"),
		glCullFace:                            getProcAddr("glCullFace"),
		glDeleteBuffers:                       getProcAddr("glDeleteBuffers"),
		glDeleteFramebuffers:                  getProcAddr("glDeleteFramebuffers"),
		glDeleteLists:                         getProcAddr("glDeleteLists"),
		glDeleteProgram:                       getProcAddr("glDeleteProgram"),
		glDeleteProgramPipelines:              getProcAddr("glDeleteProgramPipelines"),
		glDeleteQueries:                       getProcAddr("glDeleteQueries"),
		glDeleteRenderbuffers:                 getProcAddr("glDeleteRenderbuffers"),
		glDeleteSamplers:                      getProcAddr("glDeleteSamplers"),
		glDeleteShader:                        getProcAddr("glDeleteShader"),
		glDeleteSync:                          getProcAddr("glDeleteSync"),
		glDeleteTextures:                      getProcAddr("glDeleteTextures"),
		glDeleteTransformFeedbacks:            getProcAddr("glDeleteTransformFeedbacks"),
		glDeleteVertexArrays:                  getProcAddr("glDeleteVertexArrays"),
		glDepthFunc:                           getProcAddr("glDepthFunc"),
		glDepthMask:                           getProcAddr("glDepthMask"),
		glDepthRange:                          getProcAddr("glDepthRange"),
		glDepthRangeArrayv:                    getProcAddr("glDepthRangeArrayv"),
		glDepthRangeIndexed:                   getProcAddr("glDepthRangeIndexed"),
		glDepthRangef:                         getProcAddr("glDepthRangef"),
		glDetachShader:                        getProcAddr("glDetachShader"),
		glDisable:                             getProcAddr("glDisable"),
		glDisableClientState:                  getProcAddr("glDisableClientState"),
		glDisableVertexAttribArray:            getProcAddr("glDisableVertexAttribArray"),
		glDisablei:                            getProcAddr("glDisablei"),
		glDrawArrays:                          getProcAddr("glDrawArrays"),
		glDrawArraysIndirect:                  getProcAddr("glDrawArraysIndirect"),
		glDrawArraysInstanced:                 getProcAddr("glDrawArraysInstanced"),
		glDrawBuffer:                          getProcAddr("glDrawBuffer"),
		glDrawBuffers:                         getProcAddr("glDrawBuffers"),
		glDrawElements:                        getProcAddr("glDrawElements"),
		glDrawElementsBaseVertex:              getProcAddr("glDrawElementsBaseVertex"),
		glDrawElementsIndirect:                getProcAddr("glDrawElementsIndirect"),
		glDrawElementsInstanced:               getProcAddr("glDrawElementsInstanced"),
		glDrawElementsInstancedBaseVertex:     getProcAddr("glDrawElementsInstancedBaseVertex"),
		glDrawPixels:                          getProcAddr("glDrawPixels"),
		glDrawRangeElements:                   getProcAddr("glDrawRangeElements"),
		glDrawRangeElementsBaseVertex:         getProcAddr("glDrawRangeElementsBaseVertex"),
		glDrawTransformFeedback:               getProcAddr("glDrawTransformFeedback"),
		glDrawTransformFeedbackStream:         getProcAddr("glDrawTransformFeedbackStream"),
		glEdgeFlag:                            getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:                     getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:                           getProcAddr("glEdgeFlagv"),
		glEnable:                              getProcAddr("glEnable"),
		glEnableClientState:                   getProcAddr("glEnableClientState"),
		glEnableVertexAttribArray:             getProcAddr("glEnableVertexAttribArray"),
		glEnablei:                             getProcAddr("glEnablei"),
		glEnd:                                 getProcAddr("glEnd"),
		glEndConditionalRender:                getProcAddr("glEndConditionalRender"),
		glEndList:                             getProcAddr("glEndList"),
		glEndQuery:                            getProcAddr("glEndQuery"),
		glEndQueryIndexed:                     getProcAddr("glEndQueryIndexed"),
		glEndTransformFeedback:                getProcAddr("glEndTransformFeedback"),
		glEvalCoord1d:                         getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:                        getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:                         getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:                        getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:                         getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:                        getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:                         getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:                        getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:                           getProcAddr("glEvalMesh1"),
		glEvalMesh2:                           getProcAddr("glEvalMesh2"),
		glEvalPoint1:                          getProcAddr("glEvalPoint1"),
		glEvalPoint2:                          getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:                      getProcAddr("glFeedbackBuffer"),
		glFenceSync:                           getProcAddr("glFenceSync"),
		glFinish:                              getProcAddr("glFinish"),
		glFlush:                               getProcAddr("glFlush"),
		glFlushMappedBufferRange:              getProcAddr("glFlushMappedBufferRange"),
		glFogCoordPointer:                     getProcAddr("glFogCoordPointer"),
		glFogCoordd:                           getProcAddr("glFogCoordd"),
		glFogCoorddv:                          getProcAddr("glFogCoorddv"),
		glFogCoordf:                           getProcAddr("glFogCoordf"),
		glFogCoordfv:                          getProcAddr("glFogCoordfv"),
		glFogf:                                getProcAddr("glFogf"),
		glFogfv:                               getProcAddr("glFogfv"),
		glFogi:                                getProcAddr("glFogi"),
		glFogiv:                               getProcAddr("glFogiv"),
		glFramebufferRenderbuffer:             getProcAddr("glFramebufferRenderbuffer"),
		glFramebufferTexture:                  getProcAddr("glFramebufferTexture"),
		glFramebufferTexture1D:                getProcAddr("glFramebufferTexture1D"),
		glFramebufferTexture2D:                getProcAddr("glFramebufferTexture2D"),
		glFramebufferTexture3D:                getProcAddr("glFramebufferTexture3D"),
		glFramebufferTextureLayer:             getProcAddr("glFramebufferTextureLayer"),
		glFrontFace:                           getProcAddr("glFrontFace"),
		glFrustum:                             getProcAddr("glFrustum"),
		glGenBuffers:                          getProcAddr("glGenBuffers"),
		glGenFramebuffers:                     getProcAddr("glGenFramebuffers"),
		glGenLists:                            getProcAddr("glGenLists"),
		glGenProgramPipelines:                 getProcAddr("glGenProgramPipelines"),
		glGenQueries:                          getProcAddr("glGenQueries"),
		glGenRenderbuffers:                    getProcAddr("glGenRenderbuffers"),
		glGenSamplers:                         getProcAddr("glGenSamplers"),
		glGenTextures:                         getProcAddr("glGenTextures"),
		glGenTransformFeedbacks:               getProcAddr("glGenTransformFeedbacks"),
		glGenVertexArrays:                     getProcAddr("glGenVertexArrays"),
		glGenerateMipmap:                      getProcAddr("glGenerateMipmap"),
		glGetActiveAttrib:                     getProcAddr("glGetActiveAttrib"),
		glGetActiveSubroutineName:             getProcAddr("glGetActiveSubroutineName"),
		glGetActiveSubroutineUniformName:      getProcAddr("glGetActiveSubroutineUniformName"),
		glGetActiveSubroutineUniformiv:        getProcAddr("glGetActiveSubroutineUniformiv"),
		glGetActiveUniform:                    getProcAddr("glGetActiveUniform"),
		glGetActiveUniformBlockName:           getProcAddr("glGetActiveUniformBlockName"),
		glGetActiveUniformBlockiv:             getProcAddr("glGetActiveUniformBlockiv"),
		glGetActiveUniformName:                getProcAddr("glGetActiveUniformName"),
		glGetActiveUniformsiv:                 getProcAddr("glGetActiveUniformsiv"),
		glGetAttachedShaders:                  getProcAddr("glGetAttachedShaders"),
		glGetAttribLocation:                   getProcAddr("glGetAttribLocation"),
		glGetBooleani_v:                       getProcAddr("glGetBooleani_v"),
		glGetBooleanv:                         getProcAddr("glGetBooleanv"),
		glGetBufferParameteri64v:              getProcAddr("glGetBufferParameteri64v"),
		glGetBufferParameteriv:                getProcAddr("glGetBufferParameteriv"),
		glGetBufferPointerv:                   getProcAddr("glGetBufferPointerv"),
		glGetBufferSubData:                    getProcAddr("glGetBufferSubData"),
		glGetClipPlane:                        getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:               getProcAddr("glGetCompressedTexImage"),
		glGetDoublei_v:                        getProcAddr("glGetDoublei_v"),
		glGetDoublev:                          getProcAddr("glGetDoublev"),
		glGetError:                            getProcAddr("glGetError"),
		glGetFloati_v:                         getProcAddr("glGetFloati_v"),
		glGetFloatv:                           getProcAddr("glGetFloatv"),
		glGetFragDataIndex:                    getProcAddr("glGetFragDataIndex"),
		glGetFragDataLocation:                 getProcAddr("glGetFragDataLocation"),
		glGetFramebufferAttachmentParameteriv: getProcAddr("glGetFramebufferAttachmentParameteriv"),
		glGetInteger64i_v:                     getProcAddr("glGetInteger64i_v"),
		glGetInteger64v:                       getProcAddr("glGetInteger64v"),
		glGetIntegeri_v:                       getProcAddr("glGetIntegeri_v"),
		glGetIntegerv:                         getProcAddr("glGetIntegerv"),
		glGetLightfv:                          getProcAddr("glGetLightfv"),
		glGetLightiv:                          getProcAddr("glGetLightiv"),
		glGetMapdv:                            getProcAddr("glGetMapdv"),
		glGetMapfv:                            getProcAddr("glGetMapfv"),
		glGetMapiv:                            getProcAddr("glGetMapiv"),
		glGetMaterialfv:                       getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:                       getProcAddr("glGetMaterialiv"),
		glGetMultisamplefv:                    getProcAddr("glGetMultisamplefv"),
		glGetPixelMapfv:                       getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:                      getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:                      getProcAddr("glGetPixelMapusv"),
		glGetPointerv:                         getProcAddr("glGetPointerv"),
		glGetPolygonStipple:                   getProcAddr("glGetPolygonStipple"),
		glGetProgramBinary:                    getProcAddr("glGetProgramBinary"),
		glGetProgramInfoLog:                   getProcAddr("glGetProgramInfoLog"),
		glGetProgramPipelineInfoLog:           getProcAddr("glGetProgramPipelineInfoLog"),
		glGetProgramPipelineiv:                getProcAddr("glGetProgramPipelineiv"),
		glGetProgramStageiv:                   getProcAddr("glGetProgramStageiv"),
		glGetProgramiv:                        getProcAddr("glGetProgramiv"),
		glGetQueryIndexediv:                   getProcAddr("glGetQueryIndexediv"),
		glGetQueryObjecti64v:                  getProcAddr("glGetQueryObjecti64v"),
		glGetQueryObjectiv:                    getProcAddr("glGetQueryObjectiv"),
		glGetQueryObjectui64v:                 getProcAddr("glGetQueryObjectui64v"),
		glGetQueryObjectuiv:                   getProcAddr("glGetQueryObjectuiv"),
		glGetQueryiv:                          getProcAddr("glGetQueryiv"),
		glGetRenderbufferParameteriv:          getProcAddr("glGetRenderbufferParameteriv"),
		glGetSamplerParameterIiv:              getProcAddr("glGetSamplerParameterIiv"),
		glGetSamplerParameterIuiv:             getProcAddr("glGetSamplerParameterIuiv"),
		glGetSamplerParameterfv:               getProcAddr("glGetSamplerParameterfv"),
		glGetSamplerParameteriv:               getProcAddr("glGetSamplerParameteriv"),
		glGetShaderInfoLog:                    getProcAddr("glGetShaderInfoLog"),
		glGetShaderPrecisionFormat:            getProcAddr("glGetShaderPrecisionFormat"),
		glGetShaderSource:                     getProcAddr("glGetShaderSource"),
		glGetShaderiv:                         getProcAddr("glGetShaderiv"),
		glGetString:                           getProcAddr("glGetString"),
		glGetStringi:                          getProcAddr("glGetStringi"),
		glGetSubroutineIndex:                  getProcAddr("glGetSubroutineIndex"),
		glGetSubroutineUniformLocation:        getProcAddr("glGetSubroutineUniformLocation"),
		glGetSynciv:                           getProcAddr("glGetSynciv"),
		glGetTexEnvfv:                         getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:                         getProcAddr("glGetTexEnviv"),
		glGetTexGendv:                         getProcAddr("glGetTexGendv"),
		glGetTexGenfv:                         getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:                         getProcAddr("glGetTexGeniv"),
		glGetTexImage:                         getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:              getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:              getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterIiv:                  getProcAddr("glGetTexParameterIiv"),
		glGetTexParameterIuiv:                 getProcAddr("glGetTexParameterIuiv"),
		glGetTexParameterfv:                   getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:                   getProcAddr("glGetTexParameteriv"),
		glGetTransformFeedbackVarying:         getProcAddr("glGetTransformFeedbackVarying"),
		glGetUniformBlockIndex:                getProcAddr("glGetUniformBlockIndex"),
		glGetUniformIndices:                   getProcAddr("glGetUniformIndices"),
		glGetUniformLocation:                  getProcAddr("glGetUniformLocation"),
		glGetUniformSubroutineuiv:             getProcAddr("glGetUniformSubroutineuiv"),
		glGetUniformdv:                        getProcAddr("glGetUniformdv"),
		glGetUniformfv:                        getProcAddr("glGetUniformfv"),
		glGetUniformiv:                        getProcAddr("glGetUniformiv"),
		glGetUniformuiv:                       getProcAddr("glGetUniformuiv"),
		glGetVertexAttribIiv:                  getProcAddr("glGetVertexAttribIiv"),
		glGetVertexAttribIuiv:                 getProcAddr("glGetVertexAttribIuiv"),
		glGetVertexAttribLdv:                  getProcAddr("glGetVertexAttribLdv"),
		glGetVertexAttribPointerv:             getProcAddr("glGetVertexAttribPointerv"),
		glGetVertexAttribdv:                   getProcAddr("glGetVertexAttribdv"),
		glGetVertexAttribfv:                   getProcAddr("glGetVertexAttribfv"),
		glGetVertexAttribiv:                   getProcAddr("glGetVertexAttribiv"),
		glHint:                                getProcAddr("glHint"),
		glIndexMask:                           getProcAddr("glIndexMask"),
		glIndexPointer:                        getProcAddr("glIndexPointer"),
		glIndexd:                              getProcAddr("glIndexd"),
		glIndexdv:                             getProcAddr("glIndexdv"),
		glIndexf:                              getProcAddr("glIndexf"),
		glIndexfv:                             getProcAddr("glIndexfv"),
		glIndexi:                              getProcAddr("glIndexi"),
		glIndexiv:                             getProcAddr("glIndexiv"),
		glIndexs:                              getProcAddr("glIndexs"),
		glIndexsv:                             getProcAddr("glIndexsv"),
		glIndexub:                             getProcAddr("glIndexub"),
		glIndexubv:                            getProcAddr("glIndexubv"),
		glInitNames:                           getProcAddr("glInitNames"),
		glInterleavedArrays:                   getProcAddr("glInterleavedArrays"),
		glIsBuffer:                            getProcAddr("glIsBuffer"),
		glIsEnabled:                           getProcAddr("glIsEnabled"),
		glIsEnabledi:                          getProcAddr("glIsEnabledi"),
		glIsFramebuffer:                       getProcAddr("glIsFramebuffer"),
		glIsList:                              getProcAddr("glIsList"),
		glIsProgram:                           getProcAddr("glIsProgram"),
		glIsProgramPipeline:                   getProcAddr("glIsProgramPipeline"),
		glIsQuery:                             getProcAddr("glIsQuery"),
		glIsRenderbuffer:                      getProcAddr("glIsRenderbuffer"),
		glIsSampler:                           getProcAddr("glIsSampler"),
		glIsShader:                            getProcAddr("glIsShader"),
		glIsSync:                              getProcAddr("glIsSync"),
		glIsTexture:                           getProcAddr("glIsTexture"),
		glIsTransformFeedback:                 getProcAddr("glIsTransformFeedback"),
		glIsVertexArray:                       getProcAddr("glIsVertexArray"),
		glLightModelf:                         getProcAddr("glLightModelf"),
		glLightModelfv:                        getProcAddr("glLightModelfv"),
		glLightModeli:                         getProcAddr("glLightModeli"),
		glLightModeliv:                        getProcAddr("glLightModeliv"),
		glLightf:                              getProcAddr("glLightf"),
		glLightfv:                             getProcAddr("glLightfv"),
		glLighti:                              getProcAddr("glLighti"),
		glLightiv:                             getProcAddr("glLightiv"),
		glLineStipple:                         getProcAddr("glLineStipple"),
		glLineWidth:                           getProcAddr("glLineWidth"),
		glLinkProgram:                         getProcAddr("glLinkProgram"),
		glListBase:                            getProcAddr("glListBase"),
		glLoadIdentity:                        getProcAddr("glLoadIdentity"),
		glLoadMatrixd:                         getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:                         getProcAddr("glLoadMatrixf"),
		glLoadName:                            getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:                getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:                getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                             getProcAddr("glLogicOp"),
		glMap1d:                               getProcAddr("glMap1d"),
		glMap1f:                               getProcAddr("glMap1f"),
		glMap2d:                               getProcAddr("glMap2d"),
		glMap2f:                               getProcAddr("glMap2f"),
		glMapBuffer:                           getProcAddr("glMapBuffer"),
		glMapBufferRange:                      getProcAddr("glMapBufferRange"),
		glMapGrid1d:                           getProcAddr("glMapGrid1d"),
		glMapGrid1f:                           getProcAddr("glMapGrid1f"),
		glMapGrid2d:                           getProcAddr("glMapGrid2d"),
		glMapGrid2f:                           getProcAddr("glMapGrid2f"),
		glMaterialf:                           getProcAddr("glMaterialf"),
		glMaterialfv:                          getProcAddr("glMaterialfv"),
		glMateriali:                           getProcAddr("glMateriali"),
		glMaterialiv:                          getProcAddr("glMaterialiv"),
		glMatrixMode:                          getProcAddr("glMatrixMode"),
		glMinSampleShading:                    getProcAddr("glMinSampleShading"),
		glMultMatrixd:                         getProcAddr("glMultMatrixd"),
		glMultMatrixf:                         getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:                getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:                getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:                     getProcAddr("glMultiDrawArrays"),
		glMultiDrawElements:                   getProcAddr("glMultiDrawElements"),
		glMultiDrawElementsBaseVertex:         getProcAddr("glMultiDrawElementsBaseVertex"),
		glMultiTexCoord1d:                     getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:                    getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:                     getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:                    getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:                     getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:                    getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:                     getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:                    getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:                     getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:                    getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:                     getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:                    getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:                     getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:                    getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:                     getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:                    getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:                     getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:                    getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:                     getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:                    getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:                     getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:                    getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:                     getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:                    getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:                     getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:                    getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:                     getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:                    getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:                     getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:                    getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:                     getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:                    getProcAddr("glMultiTexCoord4sv"),
		glMultiTexCoordP1ui:                   getProcAddr("glMultiTexCoordP1ui"),
		glMultiTexCoordP1uiv:                  getProcAddr("glMultiTexCoordP1uiv"),
		glMultiTexCoordP2ui:                   getProcAddr("glMultiTexCoordP2ui"),
		glMultiTexCoordP2uiv:                  getProcAddr("glMultiTexCoordP2uiv"),
		glMultiTexCoordP3ui:                   getProcAddr("glMultiTexCoordP3ui"),
		glMultiTexCoordP3uiv:                  getProcAddr("glMultiTexCoordP3uiv"),
		glMultiTexCoordP4ui:                   getProcAddr("glMultiTexCoordP4ui"),
		glMultiTexCoordP4uiv:                  getProcAddr("glMultiTexCoordP4uiv"),
		glNewList:                             getProcAddr("glNewList"),
		glNormal3b:                            getProcAddr("glNormal3b"),
		glNormal3bv:                           getProcAddr("glNormal3bv"),
		glNormal3d:                            getProcAddr("glNormal3d"),
		glNormal3dv:                           getProcAddr("glNormal3dv"),
		glNormal3f:                            getProcAddr("glNormal3f"),
		glNormal3fv:                           getProcAddr("glNormal3fv"),
		glNormal3i:                            getProcAddr("glNormal3i"),
		glNormal3iv:                           getProcAddr("glNormal3iv"),
		glNormal3s:                            getProcAddr("glNormal3s"),
		glNormal3sv:                           getProcAddr("glNormal3sv"),
		glNormalP3ui:                          getProcAddr("glNormalP3ui"),
		glNormalP3uiv:                         getProcAddr("glNormalP3uiv"),
		glNormalPointer:                       getProcAddr("glNormalPointer"),
		glOrtho:                               getProcAddr("glOrtho"),
		glPassThrough:                         getProcAddr("glPassThrough"),
		glPatchParameterfv:                    getProcAddr("glPatchParameterfv"),
		glPatchParameteri:                     getProcAddr("glPatchParameteri"),
		glPauseTransformFeedback:              getProcAddr("glPauseTransformFeedback"),
		glPixelMapfv:                          getProcAddr("glPixelMapfv"),
		glPixelMapuiv:                         getProcAddr("glPixelMapuiv"),
		glPixelMapusv:                         getProcAddr("glPixelMapusv"),
		glPixelStoref:                         getProcAddr("glPixelStoref"),
		glPixelStorei:                         getProcAddr("glPixelStorei"),
		glPixelTransferf:                      getProcAddr("glPixelTransferf"),
		glPixelTransferi:                      getProcAddr("glPixelTransferi"),
		glPixelZoom:                           getProcAddr("glPixelZoom"),
		glPointParameterf:                     getProcAddr("glPointParameterf"),
		glPointParameterfv:                    getProcAddr("glPointParameterfv"),
		glPointParameteri:                     getProcAddr("glPointParameteri"),
		glPointParameteriv:                    getProcAddr("glPointParameteriv"),
		glPointSize:                           getProcAddr("glPointSize"),
		glPolygonMode:                         getProcAddr("glPolygonMode"),
		glPolygonOffset:                       getProcAddr("glPolygonOffset"),
		glPolygonStipple:                      getProcAddr("glPolygonStipple"),
		glPopAttrib:                           getProcAddr("glPopAttrib"),
		glPopClientAttrib:                     getProcAddr("glPopClientAttrib"),
		glPopMatrix:                           getProcAddr("glPopMatrix"),
		glPopName:                             getProcAddr("glPopName"),
		glPrimitiveRestartIndex:               getProcAddr("glPrimitiveRestartIndex"),
		glPrioritizeTextures:                  getProcAddr("glPrioritizeTextures"),
		glProgramBinary:                       getProcAddr("glProgramBinary"),
		glProgramParameteri:                   getProcAddr("glProgramParameteri"),
		glProgramUniform1d:                    getProcAddr("glProgramUniform1d"),
		glProgramUniform1dv:                   getProcAddr("glProgramUniform1dv"),
		glProgramUniform1f:                    getProcAddr("glProgramUniform1f"),
		glProgramUniform1fv:                   getProcAddr("glProgramUniform1fv"),
		glProgramUniform1i:                    getProcAddr("glProgramUniform1i"),
		glProgramUniform1iv:                   getProcAddr("glProgramUniform1iv"),
		glProgramUniform1ui:                   getProcAddr("glProgramUniform1ui"),
		glProgramUniform1uiv:                  getProcAddr("glProgramUniform1uiv"),
		glProgramUniform2d:                    getProcAddr("glProgramUniform2d"),
		glProgramUniform2dv:                   getProcAddr("glProgramUniform2dv"),
		glProgramUniform2f:                    getProcAddr("glProgramUniform2f"),
		glProgramUniform2fv:                   getProcAddr("glProgramUniform2fv"),
		glProgramUniform2i:                    getProcAddr("glProgramUniform2i"),
		glProgramUniform2iv:                   getProcAddr("glProgramUniform2iv"),
		glProgramUniform2ui:                   getProcAddr("glProgramUniform2ui"),
		glProgramUniform2uiv:                  getProcAddr("glProgramUniform2uiv"),
		glProgramUniform3d:                    getProcAddr("glProgramUniform3d"),
		glProgramUniform3dv:                   getProcAddr("glProgramUniform3dv"),
		glProgramUniform3f:                    getProcAddr("glProgramUniform3f"),
		glProgramUniform3fv:                   getProcAddr("glProgramUniform3fv"),
		glProgramUniform3i:                    getProcAddr("glProgramUniform3i"),
		glProgramUniform3iv:                   getProcAddr("glProgramUniform3iv"),
		glProgramUniform3ui:                   getProcAddr("glProgramUniform3ui"),
		glProgramUniform3uiv:                  getProcAddr("glProgramUniform3uiv"),
		glProgramUniform4d:                    getProcAddr("glProgramUniform4d"),
		glProgramUniform4dv:                   getProcAddr("glProgramUniform4dv"),
		glProgramUniform4f:                    getProcAddr("glProgramUniform4f"),
		glProgramUniform4fv:                   getProcAddr("glProgramUniform4fv"),
		glProgramUniform4i:                    getProcAddr("glProgramUniform4i"),
		glProgramUniform4iv:                   getProcAddr("glProgramUniform4iv"),
		glProgramUniform4ui:                   getProcAddr("glProgramUniform4ui"),
		glProgramUniform4uiv:                  getProcAddr("glProgramUniform4uiv"),
		glProgramUniformMatrix2dv:             getProcAddr("glProgramUniformMatrix2dv"),
		glProgramUniformMatrix2fv:             getProcAddr("glProgramUniformMatrix2fv"),
		glProgramUniformMatrix2x3dv:           getProcAddr("glProgramUniformMatrix2x3dv"),
		glProgramUniformMatrix2x3fv:           getProcAddr("glProgramUniformMatrix2x3fv"),
		glProgramUniformMatrix2x4dv:           getProcAddr("glProgramUniformMatrix2x4dv"),
		glProgramUniformMatrix2x4fv:           getProcAddr("glProgramUniformMatrix2x4fv"),
		glProgramUniformMatrix3dv:             getProcAddr("glProgramUniformMatrix3dv"),
		glProgramUniformMatrix3fv:             getProcAddr("glProgramUniformMatrix3fv"),
		glProgramUniformMatrix3x2dv:           getProcAddr("glProgramUniformMatrix3x2dv"),
		glProgramUniformMatrix3x2fv:           getProcAddr("glProgramUniformMatrix3x2fv"),
		glProgramUniformMatrix3x4dv:           getProcAddr("glProgramUniformMatrix3x4dv"),
		glProgramUniformMatrix3x4fv:           getProcAddr("glProgramUniformMatrix3x4fv"),
		glProgramUniformMatrix4dv:             getProcAddr("glProgramUniformMatrix4dv"),
		glProgramUniformMatrix4fv:             getProcAddr("glProgramUniformMatrix4fv"),
		glProgramUniformMatrix4x2dv:           getProcAddr("glProgramUniformMatrix4x2dv"),
		glProgramUniformMatrix4x2fv:           getProcAddr("glProgramUniformMatrix4x2fv"),
		glProgramUniformMatrix4x3dv:           getProcAddr("glProgramUniformMatrix4x3dv"),
		glProgramUniformMatrix4x3fv:           getProcAddr("glProgramUniformMatrix4x3fv"),
		glProvokingVertex:                     getProcAddr("glProvokingVertex"),
		glPushAttrib:                          getProcAddr("glPushAttrib"),
		glPushClientAttrib:                    getProcAddr("glPushClientAttrib"),
		glPushMatrix:                          getProcAddr("glPushMatrix"),
		glPushName:                            getProcAddr("glPushName"),
		glQueryCounter:                        getProcAddr("glQueryCounter"),
		glRasterPos2d:                         getProcAddr("glRasterPos2d"),
		glRasterPos2dv:                        getProcAddr("glRasterPos2dv"),
		glRasterPos2f:                         getProcAddr("glRasterPos2f"),
		glRasterPos2fv:                        getProcAddr("glRasterPos2fv"),
		glRasterPos2i:                         getProcAddr("glRasterPos2i"),
		glRasterPos2iv:                        getProcAddr("glRasterPos2iv"),
		glRasterPos2s:                         getProcAddr("glRasterPos2s"),
		glRasterPos2sv:                        getProcAddr("glRasterPos2sv"),
		glRasterPos3d:                         getProcAddr("glRasterPos3d"),
		glRasterPos3dv:                        getProcAddr("glRasterPos3dv"),
		glRasterPos3f:                         getProcAddr("glRasterPos3f"),
		glRasterPos3fv:                        getProcAddr("glRasterPos3fv"),
		glRasterPos3i:                         getProcAddr("glRasterPos3i"),
		glRasterPos3iv:                        getProcAddr("glRasterPos3iv"),
		glRasterPos3s:                         getProcAddr("glRasterPos3s"),
		glRasterPos3sv:                        getProcAddr("glRasterPos3sv"),
		glRasterPos4d:                         getProcAddr("glRasterPos4d"),
		glRasterPos4dv:                        getProcAddr("glRasterPos4dv"),
		glRasterPos4f:                         getProcAddr("glRasterPos4f"),
		glRasterPos4fv:                        getProcAddr("glRasterPos4fv"),
		glRasterPos4i:                         getProcAddr("glRasterPos4i"),
		glRasterPos4iv:                        getProcAddr("glRasterPos4iv"),
		glRasterPos4s:                         getProcAddr("glRasterPos4s"),
		glRasterPos4sv:                        getProcAddr("glRasterPos4sv"),
		glReadBuffer:                          getProcAddr("glReadBuffer"),
		glReadPixels:                          getProcAddr("glReadPixels"),
		glRectd:                               getProcAddr("glRectd"),
		glRectdv:                              getProcAddr("glRectdv"),
		glRectf:                               getProcAddr("glRectf"),
		glRectfv:                              getProcAddr("glRectfv"),
		glRecti:                               getProcAddr("glRecti"),
		glRectiv:                              getProcAddr("glRectiv"),
		glRects:                               getProcAddr("glRects"),
		glRectsv:                              getProcAddr("glRectsv"),
		glReleaseShaderCompiler:               getProcAddr("glReleaseShaderCompiler"),
		glRenderMode:                          getProcAddr("glRenderMode"),
		glRenderbufferStorage:                 getProcAddr("glRenderbufferStorage"),
		glRenderbufferStorageMultisample:      getProcAddr("glRenderbufferStorageMultisample"),
		glResumeTransformFeedback:             getProcAddr("glResumeTransformFeedback"),
		glRotated:                             getProcAddr("glRotated"),
		glRotatef:                             getProcAddr("glRotatef"),
		glSampleCoverage:                      getProcAddr("glSampleCoverage"),
		glSampleMaski:                         getProcAddr("glSampleMaski"),
		glSamplerParameterIiv:                 getProcAddr("glSamplerParameterIiv"),
		glSamplerParameterIuiv:                getProcAddr("glSamplerParameterIuiv"),
		glSamplerParameterf:                   getProcAddr("glSamplerParameterf"),
		glSamplerParameterfv:                  getProcAddr("glSamplerParameterfv"),
		glSamplerParameteri:                   getProcAddr("glSamplerParameteri"),
		glSamplerParameteriv:                  getProcAddr("glSamplerParameteriv"),
		glScaled:                              getProcAddr("glScaled"),
		glScalef:                              getProcAddr("glScalef"),
		glScissor:                             getProcAddr("glScissor"),
		glScissorArrayv:                       getProcAddr("glScissorArrayv"),
		glScissorIndexed:                      getProcAddr("glScissorIndexed"),
		glScissorIndexedv:                     getProcAddr("glScissorIndexedv"),
		glSecondaryColor3b:                    getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:                   getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:                    getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:                   getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:                    getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:                   getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:                    getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:                   getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:                    getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:                   getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:                   getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:                  getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:                   getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:                  getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:                   getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:                  getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorP3ui:                  getProcAddr("glSecondaryColorP3ui"),
		glSecondaryColorP3uiv:                 getProcAddr("glSecondaryColorP3uiv"),
		glSecondaryColorPointer:               getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:                        getProcAddr("glSelectBuffer"),
		glShadeModel:                          getProcAddr("glShadeModel"),
		glShaderBinary:                        getProcAddr("glShaderBinary"),
		glShaderSource:                        getProcAddr("glShaderSource"),
		glStencilFunc:                         getProcAddr("glStencilFunc"),
		glStencilFuncSeparate:                 getProcAddr("glStencilFuncSeparate"),
		glStencilMask:                         getProcAddr("glStencilMask"),
		glStencilMaskSeparate:                 getProcAddr("glStencilMaskSeparate"),
		glStencilOp:                           getProcAddr("glStencilOp"),
		glStencilOpSeparate:                   getProcAddr("glStencilOpSeparate"),
		glTexBuffer:                           getProcAddr("glTexBuffer"),
		glTexCoord1d:                          getProcAddr("glTexCoord1d"),
		glTexCoord1dv:                         getProcAddr("glTexCoord1dv"),
		glTexCoord1f:                          getProcAddr("glTexCoord1f"),
		glTexCoord1fv:                         getProcAddr("glTexCoord1fv"),
		glTexCoord1i:                          getProcAddr("glTexCoord1i"),
		glTexCoord1iv:                         getProcAddr("glTexCoord1iv"),
		glTexCoord1s:                          getProcAddr("glTexCoord1s"),
		glTexCoord1sv:                         getProcAddr("glTexCoord1sv"),
		glTexCoord2d:                          getProcAddr("glTexCoord2d"),
		glTexCoord2dv:                         getProcAddr("glTexCoord2dv"),
		glTexCoord2f:                          getProcAddr("glTexCoord2f"),
		glTexCoord2fv:                         getProcAddr("glTexCoord2fv"),
		glTexCoord2i:                          getProcAddr("glTexCoord2i"),
		glTexCoord2iv:                         getProcAddr("glTexCoord2iv"),
		glTexCoord2s:                          getProcAddr("glTexCoord2s"),
		glTexCoord2sv:                         getProcAddr("glTexCoord2sv"),
		glTexCoord3d:                          getProcAddr("glTexCoord3d"),
		glTexCoord3dv:                         getProcAddr("glTexCoord3dv"),
		glTexCoord3f:                          getProcAddr("glTexCoord3f"),
		glTexCoord3fv:                         getProcAddr("glTexCoord3fv"),
		glTexCoord3i:                          getProcAddr("glTexCoord3i"),
		glTexCoord3iv:                         getProcAddr("glTexCoord3iv"),
		glTexCoord3s:                          getProcAddr("glTexCoord3s"),
		glTexCoord3sv:                         getProcAddr("glTexCoord3sv"),
		glTexCoord4d:                          getProcAddr("glTexCoord4d"),
		glTexCoord4dv:                         getProcAddr("glTexCoord4dv"),
		glTexCoord4f:                          getProcAddr("glTexCoord4f"),
		glTexCoord4fv:                         getProcAddr("glTexCoord4fv"),
		glTexCoord4i:                          getProcAddr("glTexCoord4i"),
		glTexCoord4iv:                         getProcAddr("glTexCoord4iv"),
		glTexCoord4s:                          getProcAddr("glTexCoord4s"),
		glTexCoord4sv:                         getProcAddr("glTexCoord4sv"),
		glTexCoordP1ui:                        getProcAddr("glTexCoordP1ui"),
		glTexCoordP1uiv:                       getProcAddr("glTexCoordP1uiv"),
		glTexCoordP2ui:                        getProcAddr("glTexCoordP2ui"),
		glTexCoordP2uiv:                       getProcAddr("glTexCoordP2uiv"),
		glTexCoordP3ui:                        getProcAddr("glTexCoordP3ui"),
		glTexCoordP3uiv:                       getProcAddr("glTexCoordP3uiv"),
		glTexCoordP4ui:                        getProcAddr("glTexCoordP4ui"),
		glTexCoordP4uiv:                       getProcAddr("glTexCoordP4uiv"),
		glTexCoordPointer:                     getProcAddr("glTexCoordPointer"),
		glTexEnvf:                             getProcAddr("glTexEnvf"),
		glTexEnvfv:                            getProcAddr("glTexEnvfv"),
		glTexEnvi:                             getProcAddr("glTexEnvi"),
		glTexEnviv:                            getProcAddr("glTexEnviv"),
		glTexGend:                             getProcAddr("glTexGend"),
		glTexGendv:                            getProcAddr("glTexGendv"),
		glTexGenf:                             getProcAddr("glTexGenf"),
		glTexGenfv:                            getProcAddr("glTexGenfv"),
		glTexGeni:                             getProcAddr("glTexGeni"),
		glTexGeniv:                            getProcAddr("glTexGeniv"),
		glTexImage1D:                          getProcAddr("glTexImage1D"),
		glTexImage2D:                          getProcAddr("glTexImage2D"),
		glTexImage2DMultisample:               getProcAddr("glTexImage2DMultisample"),
		glTexImage3D:                          getProcAddr("glTexImage3D"),
		glTexImage3DMultisample:               getProcAddr("glTexImage3DMultisample"),
		glTexParameterIiv:                     getProcAddr("glTexParameterIiv"),
		glTexParameterIuiv:                    getProcAddr("glTexParameterIuiv"),
		glTexParameterf:                       getProcAddr("glTexParameterf"),
		glTexParameterfv:                      getProcAddr("glTexParameterfv"),
		glTexParameteri:                       getProcAddr("glTexParameteri"),
		glTexParameteriv:                      getProcAddr("glTexParameteriv"),
		glTexSubImage1D:                       getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:                       getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:                       getProcAddr("glTexSubImage3D"),
		glTransformFeedbackVaryings:           getProcAddr("glTransformFeedbackVaryings"),
		glTranslated:                          getProcAddr("glTranslated"),
		glTranslatef:                          getProcAddr("glTranslatef"),
		glUniform1d:                           getProcAddr("glUniform1d"),
		glUniform1dv:                          getProcAddr("glUniform1dv"),
		glUniform1f:                           getProcAddr("glUniform1f"),
		glUniform1fv:                          getProcAddr("glUniform1fv"),
		glUniform1i:                           getProcAddr("glUniform1i"),
		glUniform1iv:                          getProcAddr("glUniform1iv"),
		glUniform1ui:                          getProcAddr("glUniform1ui"),
		glUniform1uiv:                         getProcAddr("glUniform1uiv"),
		glUniform2d:                           getProcAddr("glUniform2d"),
		glUniform2dv:                          getProcAddr("glUniform2dv"),
		glUniform2f:                           getProcAddr("glUniform2f"),
		glUniform2fv:                          getProcAddr("glUniform2fv"),
		glUniform2i:                           getProcAddr("glUniform2i"),
		glUniform2iv:                          getProcAddr("glUniform2iv"),
		glUniform2ui:                          getProcAddr("glUniform2ui"),
		glUniform2uiv:                         getProcAddr("glUniform2uiv"),
		glUniform3d:                           getProcAddr("glUniform3d"),
		glUniform3dv:                          getProcAddr("glUniform3dv"),
		glUniform3f:                           getProcAddr("glUniform3f"),
		glUniform3fv:                          getProcAddr("glUniform3fv"),
		glUniform3i:                           getProcAddr("glUniform3i"),
		glUniform3iv:                          getProcAddr("glUniform3iv"),
		glUniform3ui:                          getProcAddr("glUniform3ui"),
		glUniform3uiv:                         getProcAddr("glUniform3uiv"),
		glUniform4d:                           getProcAddr("glUniform4d"),
		glUniform4dv:                          getProcAddr("glUniform4dv"),
		glUniform4f:                           getProcAddr("glUniform4f"),
		glUniform4fv:                          getProcAddr("glUniform4fv"),
		glUniform4i:                           getProcAddr("glUniform4i"),
		glUniform4iv:                          getProcAddr("glUniform4iv"),
		glUniform4ui:                          getProcAddr("glUniform4ui"),
		glUniform4uiv:                         getProcAddr("glUniform4uiv"),
		glUniformBlockBinding:                 getProcAddr("glUniformBlockBinding"),
		glUniformMatrix2dv:                    getProcAddr("glUniformMatrix2dv"),
		glUniformMatrix2fv:                    getProcAddr("glUniformMatrix2fv"),
		glUniformMatrix2x3dv:                  getProcAddr("glUniformMatrix2x3dv"),
		glUniformMatrix2x3fv:                  getProcAddr("glUniformMatrix2x3fv"),
		glUniformMatrix2x4dv:                  getProcAddr("glUniformMatrix2x4dv"),
		glUniformMatrix2x4fv:                  getProcAddr("glUniformMatrix2x4fv"),
		glUniformMatrix3dv:                    getProcAddr("glUniformMatrix3dv"),
		glUniformMatrix3fv:                    getProcAddr("glUniformMatrix3fv"),
		glUniformMatrix3x2dv:                  getProcAddr("glUniformMatrix3x2dv"),
		glUniformMatrix3x2fv:                  getProcAddr("glUniformMatrix3x2fv"),
		glUniformMatrix3x4dv:                  getProcAddr("glUniformMatrix3x4dv"),
		glUniformMatrix3x4fv:                  getProcAddr("glUniformMatrix3x4fv"),
		glUniformMatrix4dv:                    getProcAddr("glUniformMatrix4dv"),
		glUniformMatrix4fv:                    getProcAddr("glUniformMatrix4fv"),
		glUniformMatrix4x2dv:                  getProcAddr("glUniformMatrix4x2dv"),
		glUniformMatrix4x2fv:                  getProcAddr("glUniformMatrix4x2fv"),
		glUniformMatrix4x3dv:                  getProcAddr("glUniformMatrix4x3dv"),
		glUniformMatrix4x3fv:                  getProcAddr("glUniformMatrix4x3fv"),
		glUniformSubroutinesuiv:               getProcAddr("glUniformSubroutinesuiv"),
		glUnmapBuffer:                         getProcAddr("glUnmapBuffer"),
		glUseProgram:                          getProcAddr("glUseProgram"),
		glUseProgramStages:                    getProcAddr("glUseProgramStages"),
		glValidateProgram:                     getProcAddr("glValidateProgram"),
		glValidateProgramPipeline:             getProcAddr("glValidateProgramPipeline"),
		glVertex2d:                            getProcAddr("glVertex2d"),
		glVertex2dv:                           getProcAddr("glVertex2dv"),
		glVertex2f:                            getProcAddr("glVertex2f"),
		glVertex2fv:                           getProcAddr("glVertex2fv"),
		glVertex2i:                            getProcAddr("glVertex2i"),
		glVertex2iv:                           getProcAddr("glVertex2iv"),
		glVertex2s:                            getProcAddr("glVertex2s"),
		glVertex2sv:                           getProcAddr("glVertex2sv"),
		glVertex3d:                            getProcAddr("glVertex3d"),
		glVertex3dv:                           getProcAddr("glVertex3dv"),
		glVertex3f:                            getProcAddr("glVertex3f"),
		glVertex3fv:                           getProcAddr("glVertex3fv"),
		glVertex3i:                            getProcAddr("glVertex3i"),
		glVertex3iv:                           getProcAddr("glVertex3iv"),
		glVertex3s:                            getProcAddr("glVertex3s"),
		glVertex3sv:                           getProcAddr("glVertex3sv"),
		glVertex4d:                            getProcAddr("glVertex4d"),
		glVertex4dv:                           getProcAddr("glVertex4dv"),
		glVertex4f:                            getProcAddr("glVertex4f"),
		glVertex4fv:                           getProcAddr("glVertex4fv"),
		glVertex4i:                            getProcAddr("glVertex4i"),
		glVertex4iv:                           getProcAddr("glVertex4iv"),
		glVertex4s:                            getProcAddr("glVertex4s"),
		glVertex4sv:                           getProcAddr("glVertex4sv"),
		glVertexAttrib1d:                      getProcAddr("glVertexAttrib1d"),
		glVertexAttrib1dv:                     getProcAddr("glVertexAttrib1dv"),
		glVertexAttrib1f:                      getProcAddr("glVertexAttrib1f"),
		glVertexAttrib1fv:                     getProcAddr("glVertexAttrib1fv"),
		glVertexAttrib1s:                      getProcAddr("glVertexAttrib1s"),
		glVertexAttrib1sv:                     getProcAddr("glVertexAttrib1sv"),
		glVertexAttrib2d:                      getProcAddr("glVertexAttrib2d"),
		glVertexAttrib2dv:                     getProcAddr("glVertexAttrib2dv"),
		glVertexAttrib2f:                      getProcAddr("glVertexAttrib2f"),
		glVertexAttrib2fv:                     getProcAddr("glVertexAttrib2fv"),
		glVertexAttrib2s:                      getProcAddr("glVertexAttrib2s"),
		glVertexAttrib2sv:                     getProcAddr("glVertexAttrib2sv"),
		glVertexAttrib3d:                      getProcAddr("glVertexAttrib3d"),
		glVertexAttrib3dv:                     getProcAddr("glVertexAttrib3dv"),
		glVertexAttrib3f:                      getProcAddr("glVertexAttrib3f"),
		glVertexAttrib3fv:                     getProcAddr("glVertexAttrib3fv"),
		glVertexAttrib3s:                      getProcAddr("glVertexAttrib3s"),
		glVertexAttrib3sv:                     getProcAddr("glVertexAttrib3sv"),
		glVertexAttrib4Nbv:                    getProcAddr("glVertexAttrib4Nbv"),
		glVertexAttrib4Niv:                    getProcAddr("glVertexAttrib4Niv"),
		glVertexAttrib4Nsv:                    getProcAddr("glVertexAttrib4Nsv"),
		glVertexAttrib4Nub:                    getProcAddr("glVertexAttrib4Nub"),
		glVertexAttrib4Nubv:                   getProcAddr("glVertexAttrib4Nubv"),
		glVertexAttrib4Nuiv:                   getProcAddr("glVertexAttrib4Nuiv"),
		glVertexAttrib4Nusv:                   getProcAddr("glVertexAttrib4Nusv"),
		glVertexAttrib4bv:                     getProcAddr("glVertexAttrib4bv"),
		glVertexAttrib4d:                      getProcAddr("glVertexAttrib4d"),
		glVertexAttrib4dv:                     getProcAddr("glVertexAttrib4dv"),
		glVertexAttrib4f:                      getProcAddr("glVertexAttrib4f"),
		glVertexAttrib4fv:                     getProcAddr("glVertexAttrib4fv"),
		glVertexAttrib4iv:                     getProcAddr("glVertexAttrib4iv"),
		glVertexAttrib4s:                      getProcAddr("glVertexAttrib4s"),
		glVertexAttrib4sv:                     getProcAddr("glVertexAttrib4sv"),
		glVertexAttrib4ubv:                    getProcAddr("glVertexAttrib4ubv"),
		glVertexAttrib4uiv:                    getProcAddr("glVertexAttrib4uiv"),
		glVertexAttrib4usv:                    getProcAddr("glVertexAttrib4usv"),
		glVertexAttribDivisor:                 getProcAddr("glVertexAttribDivisor"),
		glVertexAttribI1i:                     getProcAddr("glVertexAttribI1i"),
		glVertexAttribI1iv:                    getProcAddr("glVertexAttribI1iv"),
		glVertexAttribI1ui:                    getProcAddr("glVertexAttribI1ui"),
		glVertexAttribI1uiv:                   getProcAddr("glVertexAttribI1uiv"),
		glVertexAttribI2i:                     getProcAddr("glVertexAttribI2i"),
		glVertexAttribI2iv:                    getProcAddr("glVertexAttribI2iv"),
		glVertexAttribI2ui:                    getProcAddr("glVertexAttribI2ui"),
		glVertexAttribI2uiv:                   getProcAddr("glVertexAttribI2uiv"),
		glVertexAttribI3i:                     getProcAddr("glVertexAttribI3i"),
		glVertexAttribI3iv:                    getProcAddr("glVertexAttribI3iv"),
		glVertexAttribI3ui:                    getProcAddr("glVertexAttribI3ui"),
		glVertexAttribI3uiv:                   getProcAddr("glVertexAttribI3uiv"),
		glVertexAttribI4bv:                    getProcAddr("glVertexAttribI4bv"),
		glVertexAttribI4i:                     getProcAddr("glVertexAttribI4i"),
		glVertexAttribI4iv:                    getProcAddr("glVertexAttribI4iv"),
		glVertexAttribI4sv:                    getProcAddr("glVertexAttribI4sv"),
		glVertexAttribI4ubv:                   getProcAddr("glVertexAttribI4ubv"),
		glVertexAttribI4ui:                    getProcAddr("glVertexAttribI4ui"),
		glVertexAttribI4uiv:                   getProcAddr("glVertexAttribI4uiv"),
		glVertexAttribI4usv:                   getProcAddr("glVertexAttribI4usv"),
		glVertexAttribIPointer:                getProcAddr("glVertexAttribIPointer"),
		glVertexAttribL1d:                     getProcAddr("glVertexAttribL1d"),
		glVertexAttribL1dv:                    getProcAddr("glVertexAttribL1dv"),
		glVertexAttribL2d:                     getProcAddr("glVertexAttribL2d"),
		glVertexAttribL2dv:                    getProcAddr("glVertexAttribL2dv"),
		glVertexAttribL3d:                     getProcAddr("glVertexAttribL3d"),
		glVertexAttribL3dv:                    getProcAddr("glVertexAttribL3dv"),
		glVertexAttribL4d:                     getProcAddr("glVertexAttribL4d"),
		glVertexAttribL4dv:                    getProcAddr("glVertexAttribL4dv"),
		glVertexAttribLPointer:                getProcAddr("glVertexAttribLPointer"),
		glVertexAttribP1ui:                    getProcAddr("glVertexAttribP1ui"),
		glVertexAttribP1uiv:                   getProcAddr("glVertexAttribP1uiv"),
		glVertexAttribP2ui:                    getProcAddr("glVertexAttribP2ui"),
		glVertexAttribP2uiv:                   getProcAddr("glVertexAttribP2uiv"),
		glVertexAttribP3ui:                    getProcAddr("glVertexAttribP3ui"),
		glVertexAttribP3uiv:                   getProcAddr("glVertexAttribP3uiv"),
		glVertexAttribP4ui:                    getProcAddr("glVertexAttribP4ui"),
		glVertexAttribP4uiv:                   getProcAddr("glVertexAttribP4uiv"),
		glVertexAttribPointer:                 getProcAddr("glVertexAttribPointer"),
		glVertexP2ui:                          getProcAddr("glVertexP2ui"),
		glVertexP2uiv:                         getProcAddr("glVertexP2uiv"),
		glVertexP3ui:                          getProcAddr("glVertexP3ui"),
		glVertexP3uiv:                         getProcAddr("glVertexP3uiv"),
		glVertexP4ui:                          getProcAddr("glVertexP4ui"),
		glVertexP4uiv:                         getProcAddr("glVertexP4uiv"),
		glVertexPointer:                       getProcAddr("glVertexPointer"),
		glViewport:                            getProcAddr("glViewport"),
		glViewportArrayv:                      getProcAddr("glViewportArrayv"),
		glViewportIndexedf:                    getProcAddr("glViewportIndexedf"),
		glViewportIndexedfv:                   getProcAddr("glViewportIndexedfv"),
		glWaitSync:                            getProcAddr("glWaitSync"),
		glWindowPos2d:                         getProcAddr("glWindowPos2d"),
		glWindowPos2dv:                        getProcAddr("glWindowPos2dv"),
		glWindowPos2f:                         getProcAddr("glWindowPos2f"),
		glWindowPos2fv:                        getProcAddr("glWindowPos2fv"),
		glWindowPos2i:                         getProcAddr("glWindowPos2i"),
		glWindowPos2iv:                        getProcAddr("glWindowPos2iv"),
		glWindowPos2s:                         getProcAddr("glWindowPos2s"),
		glWindowPos2sv:                        getProcAddr("glWindowPos2sv"),
		glWindowPos3d:                         getProcAddr("glWindowPos3d"),
		glWindowPos3dv:                        getProcAddr("glWindowPos3dv"),
		glWindowPos3f:                         getProcAddr("glWindowPos3f"),
		glWindowPos3fv:                        getProcAddr("glWindowPos3fv"),
		glWindowPos3i:                         getProcAddr("glWindowPos3i"),
		glWindowPos3iv:                        getProcAddr("glWindowPos3iv"),
		glWindowPos3s:                         getProcAddr("glWindowPos3s"),
		glWindowPos3sv:                        getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL420 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveShaderProgram(pipeline uint32, program uint32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	AttachShader(program uint32, shader uint32)
	Begin(mode uint32)
	BeginConditionalRender(id uint32, mode uint32)
	BeginQuery(target uint32, id uint32)
	BeginQueryIndexed(target uint32, index uint32, id uint32)
	BeginTransformFeedback(primitiveMode uint32)
	BindAttribLocation(program uint32, index uint32, name *uint8)
	BindBuffer(target uint32, buffer uint32)
	BindBufferBase(target uint32, index uint32, buffer uint32)
	BindBufferRange(target uint32, index uint32, buffer uint32, offset uintptr, size int)
	BindFragDataLocation(program uint32, color uint32, name *uint8)
	BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *uint8)
	BindFramebuffer(target uint32, framebuffer uint32)
	BindImageTexture(unit uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format uint32)
	BindProgramPipeline(pipeline uint32)
	BindRenderbuffer(target uint32, renderbuffer uint32)
	BindSampler(unit uint32, sampler uint32)
	BindTexture(target uint32, texture uint32)
	BindTransformFeedback(target uint32, id uint32)
	BindVertexArray(array uint32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)
	BlendEquationSeparatei(buf uint32, modeRGB uint32, modeAlpha uint32)
	BlendEquationi(buf uint32, mode uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BlendFuncSeparatei(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32)
	BlendFunci(buf uint32, src uint32, dst uint32)
	BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	CheckFramebufferStatus(target uint32) uint32
	ClampColor(target uint32, clamp uint32)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32)
	ClearBufferfv(buffer uint32, drawbuffer int32, value *float32)
	ClearBufferiv(buffer uint32, drawbuffer int32, value *int32)
	ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearDepthf(d float32)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClientActiveTexture(texture uint32)
	ClientWaitSync(sync GLsync, flags uint32, timeout uint64) uint32
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaski(index uint32, r bool, g bool, b bool, a bool)
	ColorMaterial(face uint32, mode uint32)
	ColorP3ui(type_ uint32, color uint32)
	ColorP3uiv(type_ uint32, color *uint32)
	ColorP4ui(type_ uint32, color uint32)
	ColorP4uiv(type_ uint32, color *uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompileShader(shader uint32)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset uintptr, writeOffset uintptr, size int)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CreateProgram() uint32
	CreateShader(type_ uint32) uint32
	CreateShaderProgramv(type_ uint32, count int32, strings **uint8) uint32
	CullFace(mode uint32)
	DeleteBuffers(n int32, buffers *uint32)
	DeleteFramebuffers(n int32, framebuffers *uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteProgram(program uint32)
	DeleteProgramPipelines(n int32, pipelines *uint32)
	DeleteQueries(n int32, ids *uint32)
	DeleteRenderbuffers(n int32, renderbuffers *uint32)
	DeleteSamplers(count int32, samplers *uint32)
	DeleteShader(shader uint32)
	DeleteSync(sync GLsync)
	DeleteTextures(n int32, textures *uint32)
	DeleteTransformFeedbacks(n int32, ids *uint32)
	DeleteVertexArrays(n int32, arrays *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	DepthRangeArrayv(first uint32, count int32, v *float64)
	DepthRangeIndexed(index uint32, n float64, f float64)
	DepthRangef(n float32, f float32)
	DetachShader(program uint32, shader uint32)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DisableVertexAttribArray(index uint32)
	Disablei(target uint32, index uint32)
	DrawArrays(mode uint32, first int32, count int32)
	DrawArraysIndirect(mode uint32, indirect unsafe.Pointer)
	DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32)
	DrawArraysInstancedBaseInstance(mode uint32, first int32, count int32, instancecount int32, baseinstance uint32)
	DrawBuffer(buf uint32)
	DrawBuffers(n int32, bufs *uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawElementsBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer)
	DrawElementsInstanced(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32)
	DrawElementsInstancedBaseInstance(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, baseinstance uint32)
	DrawElementsInstancedBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32)
	DrawElementsInstancedBaseVertexBaseInstance(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32, baseinstance uint32)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawRangeElementsBaseVertex(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawTransformFeedback(mode uint32, id uint32)
	DrawTransformFeedbackInstanced(mode uint32, id uint32, instancecount int32)
	DrawTransformFeedbackStream(mode uint32, id uint32, stream uint32)
	DrawTransformFeedbackStreamInstanced(mode uint32, id uint32, stream uint32, instancecount int32)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	EnableVertexAttribArray(index uint32)
	Enablei(target uint32, index uint32)
	End()
	EndConditionalRender()
	EndList()
	EndQuery(target uint32)
	EndQueryIndexed(target uint32, index uint32)
	EndTransformFeedback()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	FenceSync(condition uint32, flags uint32) GLsync
	Finish()
	Flush()
	FlushMappedBufferRange(target uint32, offset uintptr, length int)
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	FramebufferTexture(target uint32, attachment uint32, texture uint32, level int32)
	FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32)
	FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenBuffers(n int32, buffers *uint32)
	GenFramebuffers(n int32, framebuffers *uint32)
	GenLists(range_ int32) uint32
	GenProgramPipelines(n int32, pipelines *uint32)
	GenQueries(n int32, ids *uint32)
	GenRenderbuffers(n int32, renderbuffers *uint32)
	GenSamplers(count int32, samplers *uint32)
	GenTextures(n int32, textures *uint32)
	GenTransformFeedbacks(n int32, ids *uint32)
	GenVertexArrays(n int32, arrays *uint32)
	GenerateMipmap(target uint32)
	GetActiveAtomicCounterBufferiv(program uint32, bufferIndex uint32, pname uint32, params *int32)
	GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveSubroutineName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineUniformName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineUniformiv(program uint32, shadertype uint32, index uint32, pname uint32, values *int32)
	GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *uint8)
	GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32)
	GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *uint8)
	GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32)
	GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)
	GetAttribLocation(program uint32, name *uint8) int32
	GetBooleani_v(target uint32, index uint32, data *bool)
	GetBooleanv(pname uint32, data *bool)
	GetBufferParameteri64v(target uint32, pname uint32, params *int64)
	GetBufferParameteriv(target uint32, pname uint32, params *int32)
	GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)
	GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetDoublei_v(target uint32, index uint32, data *float64)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloati_v(target uint32, index uint32, data *float32)
	GetFloatv(pname uint32, data *float32)
	GetFragDataIndex(program uint32, name *uint8) int32
	GetFragDataLocation(program uint32, name *uint8) int32
	GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32)
	GetInteger64i_v(target uint32, index uint32, data *int64)
	GetInteger64v(pname uint32, data *int64)
	GetIntegeri_v(target uint32, index uint32, data *int32)
	GetIntegerv(pname uint32, data *int32)
	GetInternalformativ(target uint32, internalformat uint32, pname uint32, count int32, params *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetMultisamplefv(pname uint32, index uint32, val *float32)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetProgramBinary(program uint32, bufSize int32, length *int32, binaryFormat *uint32, binary unsafe.Pointer)
	GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramPipelineInfoLog(pipeline uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramPipelineiv(pipeline uint32, pname uint32, params *int32)
	GetProgramStageiv(program uint32, shadertype uint32, pname uint32, values *int32)
	GetProgramiv(program uint32, pname uint32, params *int32)
	GetQueryIndexediv(target uint32, index uint32, pname uint32, params *int32)
	GetQueryObjecti64v(id uint32, pname uint32, params *int64)
	GetQueryObjectiv(id uint32, pname uint32, params *int32)
	GetQueryObjectui64v(id uint32, pname uint32, params *uint64)
	GetQueryObjectuiv(id uint32, pname uint32, params *uint32)
	GetQueryiv(target uint32, pname uint32, params *int32)
	GetRenderbufferParameteriv(target uint32, pname uint32, params *int32)
	GetSamplerParameterIiv(sampler uint32, pname uint32, params *int32)
	GetSamplerParameterIuiv(sampler uint32, pname uint32, params *uint32)
	GetSamplerParameterfv(sampler uint32, pname uint32, params *float32)
	GetSamplerParameteriv(sampler uint32, pname uint32, params *int32)
	GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8)
	GetShaderPrecisionFormat(shadertype uint32, precisiontype uint32, range_ *int32, precision *int32)
	GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8)
	GetShaderiv(shader uint32, pname uint32, params *int32)
	GetString(name uint32) *uint8
	GetStringi(name uint32, index uint32) *uint8
	GetSubroutineIndex(program uint32, shadertype uint32, name *uint8) uint32
	GetSubroutineUniformLocation(program uint32, shadertype uint32, name *uint8) int32
	GetSynciv(sync GLsync, pname uint32, count int32, length *int32, values *int32)
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterIiv(target uint32, pname uint32, params *int32)
	GetTexParameterIuiv(target uint32, pname uint32, params *uint32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetUniformBlockIndex(program uint32, uniformBlockName *uint8) uint32
	GetUniformIndices(program uint32, uniformCount int32, uniformNames **uint8, uniformIndices *uint32)
	GetUniformLocation(program uint32, name *uint8) int32
	GetUniformSubroutineuiv(shadertype uint32, location int32, params *uint32)
	GetUniformdv(program uint32, location int32, params *float64)
	GetUniformfv(program uint32, location int32, params *float32)
	GetUniformiv(program uint32, location int32, params *int32)
	GetUniformuiv(program uint32, location int32, params *uint32)
	GetVertexAttribIiv(index uint32, pname uint32, params *int32)
	GetVertexAttribIuiv(index uint32, pname uint32, params *uint32)
	GetVertexAttribLdv(index uint32, pname uint32, params *float64)
	GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)
	GetVertexAttribdv(index uint32, pname uint32, params *float64)
	GetVertexAttribfv(index uint32, pname uint32, params *float32)
	GetVertexAttribiv(index uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	IsBuffer(buffer uint32) bool
	IsEnabled(cap uint32) bool
	IsEnabledi(target uint32, index uint32) bool
	IsFramebuffer(framebuffer uint32) bool
	IsList(list uint32) bool
	IsProgram(program uint32) bool
	IsProgramPipeline(pipeline uint32) bool
	IsQuery(id uint32) bool
	IsRenderbuffer(renderbuffer uint32) bool
	IsSampler(sampler uint32) bool
	IsShader(shader uint32) bool
	IsSync(sync GLsync) bool
	IsTexture(texture uint32) bool
	IsTransformFeedback(id uint32) bool
	IsVertexArray(array uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	LinkProgram(program uint32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapBuffer(target uint32, access uint32) unsafe.Pointer
	MapBufferRange(target uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MemoryBarrier(barriers uint32)
	MinSampleShading(value float32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiDrawElementsBaseVertex(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	MultiTexCoordP1ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP1uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP2ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP2uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP3ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP3uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP4ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP4uiv(texture uint32, type_ uint32, coords *uint32)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalP3ui(type_ uint32, coords uint32)
	NormalP3uiv(type_ uint32, coords *uint32)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PatchParameterfv(pname uint32, values *float32)
	PatchParameteri(pname uint32, value int32)
	PauseTransformFeedback()
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopMatrix()
	PopName()
	PrimitiveRestartIndex(index uint32)
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	ProgramBinary(program uint32, binaryFormat uint32, binary unsafe.Pointer, length int32)
	ProgramParameteri(program uint32, pname uint32, value int32)
	ProgramUniform1d(program uint32, location int32, v0 float64)
	ProgramUniform1dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform1f(program uint32, location int32, v0 float32)
	ProgramUniform1fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform1i(program uint32, location int32, v0 int32)
	ProgramUniform1iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform1ui(program uint32, location int32, v0 uint32)
	ProgramUniform1uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform2d(program uint32, location int32, v0 float64, v1 float64)
	ProgramUniform2dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32)
	ProgramUniform2fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32)
	ProgramUniform2iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32)
	ProgramUniform2uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform3d(program uint32, location int32, v0 float64, v1 float64, v2 float64)
	ProgramUniform3dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32)
	ProgramUniform3fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32)
	ProgramUniform3iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32)
	ProgramUniform3uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform4d(program uint32, location int32, v0 float64, v1 float64, v2 float64, v3 float64)
	ProgramUniform4dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	ProgramUniform4fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	ProgramUniform4iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	ProgramUniform4uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniformMatrix2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProvokingVertex(mode uint32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushMatrix()
	PushName(name uint32)
	QueryCounter(id uint32, target uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	ReleaseShaderCompiler()
	RenderMode(mode uint32) int32
	RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32)
	RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32)
	ResumeTransformFeedback()
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	SampleMaski(maskNumber uint32, mask uint32)
	SamplerParameterIiv(sampler uint32, pname uint32, param *int32)
	SamplerParameterIuiv(sampler uint32, pname uint32, param *uint32)
	SamplerParameterf(sampler uint32, pname uint32, param float32)
	SamplerParameterfv(sampler uint32, pname uint32, param *float32)
	SamplerParameteri(sampler uint32, pname uint32, param int32)
	SamplerParameteriv(sampler uint32, pname uint32, param *int32)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	ScissorArrayv(first uint32, count int32, v *int32)
	ScissorIndexed(index uint32, left int32, bottom int32, width int32, height int32)
	ScissorIndexedv(index uint32, v *int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorP3ui(type_ uint32, color uint32)
	SecondaryColorP3uiv(type_ uint32, color *uint32)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	ShaderBinary(count int32, shaders *uint32, binaryFormat uint32, binary unsafe.Pointer, length int32)
	ShaderSource(shader uint32, count int32, string **uint8, length *int32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilMaskSeparate(face uint32, mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)
	TexBuffer(target uint32, internalformat uint32, buffer uint32)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordP1ui(type_ uint32, coords uint32)
	TexCoordP1uiv(type_ uint32, coords *uint32)
	TexCoordP2ui(type_ uint32, coords uint32)
	TexCoordP2uiv(type_ uint32, coords *uint32)
	TexCoordP3ui(type_ uint32, coords uint32)
	TexCoordP3uiv(type_ uint32, coords *uint32)
	TexCoordP4ui(type_ uint32, coords uint32)
	TexCoordP4uiv(type_ uint32, coords *uint32)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TexParameterIiv(target uint32, pname uint32, params *int32)
	TexParameterIuiv(target uint32, pname uint32, params *uint32)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexStorage1D(target uint32, levels int32, internalformat uint32, width int32)
	TexStorage2D(target uint32, levels int32, internalformat uint32, width int32, height int32)
	TexStorage3D(target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TransformFeedbackVaryings(program uint32, count int32, varyings **uint8, bufferMode uint32)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Uniform1d(location int32, x float64)
	Uniform1dv(location int32, count int32, value *float64)
	Uniform1f(location int32, v0 float32)
	Uniform1fv(location int32, count int32, value *float32)
	Uniform1i(location int32, v0 int32)
	Uniform1iv(location int32, count int32, value *int32)
	Uniform1ui(location int32, v0 uint32)
	Uniform1uiv(location int32, count int32, value *uint32)
	Uniform2d(location int32, x float64, y float64)
	Uniform2dv(location int32, count int32, value *float64)
	Uniform2f(location int32, v0 float32, v1 float32)
	Uniform2fv(location int32, count int32, value *float32)
	Uniform2i(location int32, v0 int32, v1 int32)
	Uniform2iv(location int32, count int32, value *int32)
	Uniform2ui(location int32, v0 uint32, v1 uint32)
	Uniform2uiv(location int32, count int32, value *uint32)
	Uniform3d(location int32, x float64, y float64, z float64)
	Uniform3dv(location int32, count int32, value *float64)
	Uniform3f(location int32, v0 float32, v1 float32, v2 float32)
	Uniform3fv(location int32, count int32, value *float32)
	Uniform3i(location int32, v0 int32, v1 int32, v2 int32)
	Uniform3iv(location int32, count int32, value *int32)
	Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)
	Uniform3uiv(location int32, count int32, value *uint32)
	Uniform4d(location int32, x float64, y float64, z float64, w float64)
	Uniform4dv(location int32, count int32, value *float64)
	Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	Uniform4fv(location int32, count int32, value *float32)
	Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	Uniform4iv(location int32, count int32, value *int32)
	Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	Uniform4uiv(location int32, count int32, value *uint32)
	UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)
	UniformMatrix2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32)
	UniformSubroutinesuiv(shadertype uint32, count int32, indices *uint32)
	UnmapBuffer(target uint32) bool
	UseProgram(program uint32)
	UseProgramStages(pipeline uint32, stages uint32, program uint32)
	ValidateProgram(program uint32)
	ValidateProgramPipeline(pipeline uint32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexAttrib1d(index uint32, x float64)
	VertexAttrib1dv(index uint32, v *float64)
	VertexAttrib1f(index uint32, x float32)
	VertexAttrib1fv(index uint32, v *float32)
	VertexAttrib1s(index uint32, x int16)
	VertexAttrib1sv(index uint32, v *int16)
	VertexAttrib2d(index uint32, x float64, y float64)
	VertexAttrib2dv(index uint32, v *float64)
	VertexAttrib2f(index uint32, x float32, y float32)
	VertexAttrib2fv(index uint32, v *float32)
	VertexAttrib2s(index uint32, x int16, y int16)
	VertexAttrib2sv(index uint32, v *int16)
	VertexAttrib3d(index uint32, x float64, y float64, z float64)
	VertexAttrib3dv(index uint32, v *float64)
	VertexAttrib3f(index uint32, x float32, y float32, z float32)
	VertexAttrib3fv(index uint32, v *float32)
	VertexAttrib3s(index uint32, x int16, y int16, z int16)
	VertexAttrib3sv(index uint32, v *int16)
	VertexAttrib4Nbv(index uint32, v *int8)
	VertexAttrib4Niv(index uint32, v *int32)
	VertexAttrib4Nsv(index uint32, v *int16)
	VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4Nubv(index uint32, v *uint8)
	VertexAttrib4Nuiv(index uint32, v *uint32)
	VertexAttrib4Nusv(index uint32, v *uint16)
	VertexAttrib4bv(index uint32, v *int8)
	VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dv(index uint32, v *float64)
	VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fv(index uint32, v *float32)
	VertexAttrib4iv(index uint32, v *int32)
	VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4sv(index uint32, v *int16)
	VertexAttrib4ubv(index uint32, v *uint8)
	VertexAttrib4uiv(index uint32, v *uint32)
	VertexAttrib4usv(index uint32, v *uint16)
	VertexAttribDivisor(index uint32, divisor uint32)
	VertexAttribI1i(index uint32, x int32)
	VertexAttribI1iv(index uint32, v *int32)
	VertexAttribI1ui(index uint32, x uint32)
	VertexAttribI1uiv(index uint32, v *uint32)
	VertexAttribI2i(index uint32, x int32, y int32)
	VertexAttribI2iv(index uint32, v *int32)
	VertexAttribI2ui(index uint32, x uint32, y uint32)
	VertexAttribI2uiv(index uint32, v *uint32)
	VertexAttribI3i(index uint32, x int32, y int32, z int32)
	VertexAttribI3iv(index uint32, v *int32)
	VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32)
	VertexAttribI3uiv(index uint32, v *uint32)
	VertexAttribI4bv(index uint32, v *int8)
	VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)
	VertexAttribI4iv(index uint32, v *int32)
	VertexAttribI4sv(index uint32, v *int16)
	VertexAttribI4ubv(index uint32, v *uint8)
	VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)
	VertexAttribI4uiv(index uint32, v *uint32)
	VertexAttribI4usv(index uint32, v *uint16)
	VertexAttribIPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribL1d(index uint32, x float64)
	VertexAttribL1dv(index uint32, v *float64)
	VertexAttribL2d(index uint32, x float64, y float64)
	VertexAttribL2dv(index uint32, v *float64)
	VertexAttribL3d(index uint32, x float64, y float64, z float64)
	VertexAttribL3dv(index uint32, v *float64)
	VertexAttribL4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttribL4dv(index uint32, v *float64)
	VertexAttribLPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribP1ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP1uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP2ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP2uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP3ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP3uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP4ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP4uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribPointer(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer)
	VertexP2ui(type_ uint32, value uint32)
	VertexP2uiv(type_ uint32, value *uint32)
	VertexP3ui(type_ uint32, value uint32)
	VertexP3uiv(type_ uint32, value *uint32)
	VertexP4ui(type_ uint32, value uint32)
	VertexP4uiv(type_ uint32, value *uint32)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	ViewportArrayv(first uint32, count int32, v *float32)
	ViewportIndexedf(index uint32, x float32, y float32, w float32, h float32)
	ViewportIndexedfv(index uint32, v *float32)
	WaitSync(sync GLsync, flags uint32, timeout uint64)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New420(getProcAddr func(name string) unsafe.Pointer) GL420 {
	gl := &lib{
		glAccum:                             getProcAddr("glAccum"),
		glActiveShaderProgram:               getProcAddr("glActiveShaderProgram"),
		glActiveTexture:                     getProcAddr("glActiveTexture"),
		glAlphaFunc:                         getProcAddr("glAlphaFunc"),
		glAreTexturesResident:               getProcAddr("glAreTexturesResident"),
		glArrayElement:                      getProcAddr("glArrayElement"),
		glAttachShader:                      getProcAddr("glAttachShader"),
		glBegin:                             getProcAddr("glBegin"),
		glBeginConditionalRender:            getProcAddr("glBeginConditionalRender"),
		glBeginQuery:                        getProcAddr("glBeginQuery"),
		glBeginQueryIndexed:                 getProcAddr("glBeginQueryIndexed"),
		glBeginTransformFeedback:            getProcAddr("glBeginTransformFeedback"),
		glBindAttribLocation:                getProcAddr("glBindAttribLocation"),
		glBindBuffer:                        getProcAddr("glBindBuffer"),
		glBindBufferBase:                    getProcAddr("glBindBufferBase"),
		glBindBufferRange:                   getProcAddr("glBindBufferRange"),
		glBindFragDataLocation:              getProcAddr("glBindFragDataLocation"),
		glBindFragDataLocationIndexed:       getProcAddr("glBindFragDataLocationIndexed"),
		glBindFramebuffer:                   getProcAddr("glBindFramebuffer"),
		glBindImageTexture:                  getProcAddr("glBindImageTexture"),
		glBindProgramPipeline:               getProcAddr("glBindProgramPipeline"),
		glBindRenderbuffer:                  getProcAddr("glBindRenderbuffer"),
		glBindSampler:                       getProcAddr("glBindSampler"),
		glBindTexture:                       getProcAddr("glBindTexture"),
		glBindTransformFeedback:             getProcAddr("glBindTransformFeedback"),
		glBindVertexArray:                   getProcAddr("glBindVertexArray"),
		glBitmap:                            getProcAddr("glBitmap"),
		glBlendColor:                        getProcAddr("glBlendColor"),
		glBlendEquation:                     getProcAddr("glBlendEquation"),
		glBlendEquationSeparate:             getProcAddr("glBlendEquationSeparate"),
		glBlendEquationSeparatei:            getProcAddr("glBlendEquationSeparatei"),
		glBlendEquationi:                    getProcAddr("glBlendEquationi"),
		glBlendFunc:                         getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:                 getProcAddr("glBlendFuncSeparate"),
		glBlendFuncSeparatei:                getProcAddr("glBlendFuncSeparatei"),
		glBlendFunci:                        getProcAddr("glBlendFunci"),
		glBlitFramebuffer:                   getProcAddr("glBlitFramebuffer"),
		glBufferData:                        getProcAddr("glBufferData"),
		glBufferSubData:                     getProcAddr("glBufferSubData"),
		glCallList:                          getProcAddr("glCallList"),
		glCallLists:                         getProcAddr("glCallLists"),
		glCheckFramebufferStatus:            getProcAddr("glCheckFramebufferStatus"),
		glClampColor:                        getProcAddr("glClampColor"),
		glClear:                             getProcAddr("glClear"),
		glClearAccum:                        getProcAddr("glClearAccum"),
		glClearBufferfi:                     getProcAddr("glClearBufferfi"),
		glClearBufferfv:                     getProcAddr("glClearBufferfv"),
		glClearBufferiv:                     getProcAddr("glClearBufferiv"),
		glClearBufferuiv:                    getProcAddr("glClearBufferuiv"),
		glClearColor:                        getProcAddr("glClearColor"),
		glClearDepth:                        getProcAddr("glClearDepth"),
		glClearDepthf:                       getProcAddr("glClearDepthf"),
		glClearIndex:                        getProcAddr("glClearIndex"),
		glClearStencil:                      getProcAddr("glClearStencil"),
		glClientActiveTexture:               getProcAddr("glClientActiveTexture"),
		glClientWaitSync:                    getProcAddr("glClientWaitSync"),
		glClipPlane:                         getProcAddr("glClipPlane"),
		glColor3b:                           getProcAddr("glColor3b"),
		glColor3bv:                          getProcAddr("glColor3bv"),
		glColor3d:                           getProcAddr("glColor3d"),
		glColor3dv:                          getProcAddr("glColor3dv"),
		glColor3f:                           getProcAddr("glColor3f"),
		glColor3fv:                          getProcAddr("glColor3fv"),
		glColor3i:                           getProcAddr("glColor3i"),
		glColor3iv:                          getProcAddr("glColor3iv"),
		glColor3s:                           getProcAddr("glColor3s"),
		glColor3sv:                          getProcAddr("glColor3sv"),
		glColor3ub:                          getProcAddr("glColor3ub"),
		glColor3ubv:                         getProcAddr("glColor3ubv"),
		glColor3ui:                          getProcAddr("glColor3ui"),
		glColor3uiv:                         getProcAddr("glColor3uiv"),
		glColor3us:                          getProcAddr("glColor3us"),
		glColor3usv:                         getProcAddr("glColor3usv"),
		glColor4b:                           getProcAddr("glColor4b"),
		glColor4bv:                          getProcAddr("glColor4bv"),
		glColor4d:                           getProcAddr("glColor4d"),
		glColor4dv:                          getProcAddr("glColor4dv"),
		glColor4f:                           getProcAddr("glColor4f"),
		glColor4fv:                          getProcAddr("glColor4fv"),
		glColor4i:                           getProcAddr("glColor4i"),
		glColor4iv:                          getProcAddr("glColor4iv"),
		glColor4s:                           getProcAddr("glColor4s"),
		glColor4sv:                          getProcAddr("glColor4sv"),
		glColor4ub:                          getProcAddr("glColor4ub"),
		glColor4ubv:                         getProcAddr("glColor4ubv"),
		glColor4ui:                          getProcAddr("glColor4ui"),
		glColor4uiv:                         getProcAddr("glColor4uiv"),
		glColor4us:                          getProcAddr("glColor4us"),
		glColor4usv:                         getProcAddr("glColor4usv"),
		glColorMask:                         getProcAddr("glColorMask"),
		glColorMaski:                        getProcAddr("glColorMaski"),
		glColorMaterial:                     getProcAddr("glColorMaterial"),
		glColorP3ui:                         getProcAddr("glColorP3ui"),
		glColorP3uiv:                        getProcAddr("glColorP3uiv"),
		glColorP4ui:                         getProcAddr("glColorP4ui"),
		glColorP4uiv:                        getProcAddr("glColorP4uiv"),
		glColorPointer:                      getProcAddr("glColorPointer"),
		glCompileShader:                     getProcAddr("glCompileShader"),
		glCompressedTexImage1D:              getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:              getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:              getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D:           getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D:           getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D:           getProcAddr("glCompressedTexSubImage3D"),
		glCopyBufferSubData:                 getProcAddr("glCopyBufferSubData"),
		glCopyPixels:                        getProcAddr("glCopyPixels"),
		glCopyTexImage1D:                    getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:                    getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:                 getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:                 getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:                 getProcAddr("glCopyTexSubImage3D"),
		glCreateProgram:                     getProcAddr("glCreateProgram"),
		glCreateShader:                      getProcAddr("glCreateShader"),
		glCreateShaderProgramv:              getProcAddr("glCreateShaderProgramv"),
		glCullFace:                          getProcAddr("glCullFace"),
		glDeleteBuffers:                     getProcAddr("glDeleteBuffers"),
		glDeleteFramebuffers:                getProcAddr("glDeleteFramebuffers"),
		glDeleteLists:                       getProcAddr("glDeleteLists"),
		glDeleteProgram:                     getProcAddr("glDeleteProgram"),
		glDeleteProgramPipelines:            getProcAddr("glDeleteProgramPipelines"),
		glDeleteQueries:                     getProcAddr("glDeleteQueries"),
		glDeleteRenderbuffers:               getProcAddr("glDeleteRenderbuffers"),
		glDeleteSamplers:                    getProcAddr("glDeleteSamplers"),
		glDeleteShader:                      getProcAddr("glDeleteShader"),
		glDeleteSync:                        getProcAddr("glDeleteSync"),
		glDeleteTextures:                    getProcAddr("glDeleteTextures"),
		glDeleteTransformFeedbacks:          getProcAddr("glDeleteTransformFeedbacks"),
		glDeleteVertexArrays:                getProcAddr("glDeleteVertexArrays"),
		glDepthFunc:                         getProcAddr("glDepthFunc"),
		glDepthMask:                         getProcAddr("glDepthMask"),
		glDepthRange:                        getProcAddr("glDepthRange"),
		glDepthRangeArrayv:                  getProcAddr("glDepthRangeArrayv"),
		glDepthRangeIndexed:                 getProcAddr("glDepthRangeIndexed"),
		glDepthRangef:                       getProcAddr("glDepthRangef"),
		glDetachShader:                      getProcAddr("glDetachShader"),
		glDisable:                           getProcAddr("glDisable"),
		glDisableClientState:                getProcAddr("glDisableClientState"),
		glDisableVertexAttribArray:          getProcAddr("glDisableVertexAttribArray"),
		glDisablei:                          getProcAddr("glDisablei"),
		glDrawArrays:                        getProcAddr("glDrawArrays"),
		glDrawArraysIndirect:                getProcAddr("glDrawArraysIndirect"),
		glDrawArraysInstanced:               getProcAddr("glDrawArraysInstanced"),
		glDrawArraysInstancedBaseInstance:   getProcAddr("glDrawArraysInstancedBaseInstance"),
		glDrawBuffer:                        getProcAddr("glDrawBuffer"),
		glDrawBuffers:                       getProcAddr("glDrawBuffers"),
		glDrawElements:                      getProcAddr("glDrawElements"),
		glDrawElementsBaseVertex:            getProcAddr("glDrawElementsBaseVertex"),
		glDrawElementsIndirect:              getProcAddr("glDrawElementsIndirect"),
		glDrawElementsInstanced:             getProcAddr("glDrawElementsInstanced"),
		glDrawElementsInstancedBaseInstance: getProcAddr("glDrawElementsInstancedBaseInstance"),
		glDrawElementsInstancedBaseVertex:   getProcAddr("glDrawElementsInstancedBaseVertex"),
		glDrawElementsInstancedBaseVertexBaseInstance: getProcAddr("glDrawElementsInstancedBaseVertexBaseInstance"),
		glDrawPixels:                           getProcAddr("glDrawPixels"),
		glDrawRangeElements:                    getProcAddr("glDrawRangeElements"),
		glDrawRangeElementsBaseVertex:          getProcAddr("glDrawRangeElementsBaseVertex"),
		glDrawTransformFeedback:                getProcAddr("glDrawTransformFeedback"),
		glDrawTransformFeedbackInstanced:       getProcAddr("glDrawTransformFeedbackInstanced"),
		glDrawTransformFeedbackStream:          getProcAddr("glDrawTransformFeedbackStream"),
		glDrawTransformFeedbackStreamInstanced: getProcAddr("glDrawTransformFeedbackStreamInstanced"),
		glEdgeFlag:                             getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:                      getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:                            getProcAddr("glEdgeFlagv"),
		glEnable:                               getProcAddr("glEnable"),
		glEnableClientState:                    getProcAddr("glEnableClientState"),
		glEnableVertexAttribArray:              getProcAddr("glEnableVertexAttribArray"),
		glEnablei:                              getProcAddr("glEnablei"),
		glEnd:                                  getProcAddr("glEnd"),
		glEndConditionalRender:                 getProcAddr("glEndConditionalRender"),
		glEndList:                              getProcAddr("glEndList"),
		glEndQuery:                             getProcAddr("glEndQuery"),
		glEndQueryIndexed:                      getProcAddr("glEndQueryIndexed"),
		glEndTransformFeedback:                 getProcAddr("glEndTransformFeedback"),
		glEvalCoord1d:                          getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:                         getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:                          getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:                         getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:                          getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:                         getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:                          getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:                         getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:                            getProcAddr("glEvalMesh1"),
		glEvalMesh2:                            getProcAddr("glEvalMesh2"),
		glEvalPoint1:                           getProcAddr("glEvalPoint1"),
		glEvalPoint2:                           getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:                       getProcAddr("glFeedbackBuffer"),
		glFenceSync:                            getProcAddr("glFenceSync"),
		glFinish:                               getProcAddr("glFinish"),
		glFlush:                                getProcAddr("glFlush"),
		glFlushMappedBufferRange:               getProcAddr("glFlushMappedBufferRange"),
		glFogCoordPointer:                      getProcAddr("glFogCoordPointer"),
		glFogCoordd:                            getProcAddr("glFogCoordd"),
		glFogCoorddv:                           getProcAddr("glFogCoorddv"),
		glFogCoordf:                            getProcAddr("glFogCoordf"),
		glFogCoordfv:                           getProcAddr("glFogCoordfv"),
		glFogf:                                 getProcAddr("glFogf"),
		glFogfv:                                getProcAddr("glFogfv"),
		glFogi:                                 getProcAddr("glFogi"),
		glFogiv:                                getProcAddr("glFogiv"),
		glFramebufferRenderbuffer:              getProcAddr("glFramebufferRenderbuffer"),
		glFramebufferTexture:                   getProcAddr("glFramebufferTexture"),
		glFramebufferTexture1D:                 getProcAddr("glFramebufferTexture1D"),
		glFramebufferTexture2D:                 getProcAddr("glFramebufferTexture2D"),
		glFramebufferTexture3D:                 getProcAddr("glFramebufferTexture3D"),
		glFramebufferTextureLayer:              getProcAddr("glFramebufferTextureLayer"),
		glFrontFace:                            getProcAddr("glFrontFace"),
		glFrustum:                              getProcAddr("glFrustum"),
		glGenBuffers:                           getProcAddr("glGenBuffers"),
		glGenFramebuffers:                      getProcAddr("glGenFramebuffers"),
		glGenLists:                             getProcAddr("glGenLists"),
		glGenProgramPipelines:                  getProcAddr("glGenProgramPipelines"),
		glGenQueries:                           getProcAddr("glGenQueries"),
		glGenRenderbuffers:                     getProcAddr("glGenRenderbuffers"),
		glGenSamplers:                          getProcAddr("glGenSamplers"),
		glGenTextures:                          getProcAddr("glGenTextures"),
		glGenTransformFeedbacks:                getProcAddr("glGenTransformFeedbacks"),
		glGenVertexArrays:                      getProcAddr("glGenVertexArrays"),
		glGenerateMipmap:                       getProcAddr("glGenerateMipmap"),
		glGetActiveAtomicCounterBufferiv:       getProcAddr("glGetActiveAtomicCounterBufferiv"),
		glGetActiveAttrib:                      getProcAddr("glGetActiveAttrib"),
		glGetActiveSubroutineName:              getProcAddr("glGetActiveSubroutineName"),
		glGetActiveSubroutineUniformName:       getProcAddr("glGetActiveSubroutineUniformName"),
		glGetActiveSubroutineUniformiv:         getProcAddr("glGetActiveSubroutineUniformiv"),
		glGetActiveUniform:                     getProcAddr("glGetActiveUniform"),
		glGetActiveUniformBlockName:            getProcAddr("glGetActiveUniformBlockName"),
		glGetActiveUniformBlockiv:              getProcAddr("glGetActiveUniformBlockiv"),
		glGetActiveUniformName:                 getProcAddr("glGetActiveUniformName"),
		glGetActiveUniformsiv:                  getProcAddr("glGetActiveUniformsiv"),
		glGetAttachedShaders:                   getProcAddr("glGetAttachedShaders"),
		glGetAttribLocation:                    getProcAddr("glGetAttribLocation"),
		glGetBooleani_v:                        getProcAddr("glGetBooleani_v"),
		glGetBooleanv:                          getProcAddr("glGetBooleanv"),
		glGetBufferParameteri64v:               getProcAddr("glGetBufferParameteri64v"),
		glGetBufferParameteriv:                 getProcAddr("glGetBufferParameteriv"),
		glGetBufferPointerv:                    getProcAddr("glGetBufferPointerv"),
		glGetBufferSubData:                     getProcAddr("glGetBufferSubData"),
		glGetClipPlane:                         getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:                getProcAddr("glGetCompressedTexImage"),
		glGetDoublei_v:                         getProcAddr("glGetDoublei_v"),
		glGetDoublev:                           getProcAddr("glGetDoublev"),
		glGetError:                             getProcAddr("glGetError"),
		glGetFloati_v:                          getProcAddr("glGetFloati_v"),
		glGetFloatv:                            getProcAddr("glGetFloatv"),
		glGetFragDataIndex:                     getProcAddr("glGetFragDataIndex"),
		glGetFragDataLocation:                  getProcAddr("glGetFragDataLocation"),
		glGetFramebufferAttachmentParameteriv:  getProcAddr("glGetFramebufferAttachmentParameteriv"),
		glGetInteger64i_v:                      getProcAddr("glGetInteger64i_v"),
		glGetInteger64v:                        getProcAddr("glGetInteger64v"),
		glGetIntegeri_v:                        getProcAddr("glGetIntegeri_v"),
		glGetIntegerv:                          getProcAddr("glGetIntegerv"),
		glGetInternalformativ:                  getProcAddr("glGetInternalformativ"),
		glGetLightfv:                           getProcAddr("glGetLightfv"),
		glGetLightiv:                           getProcAddr("glGetLightiv"),
		glGetMapdv:                             getProcAddr("glGetMapdv"),
		glGetMapfv:                             getProcAddr("glGetMapfv"),
		glGetMapiv:                             getProcAddr("glGetMapiv"),
		glGetMaterialfv:                        getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:                        getProcAddr("glGetMaterialiv"),
		glGetMultisamplefv:                     getProcAddr("glGetMultisamplefv"),
		glGetPixelMapfv:                        getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:                       getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:                       getProcAddr("glGetPixelMapusv"),
		glGetPointerv:                          getProcAddr("glGetPointerv"),
		glGetPolygonStipple:                    getProcAddr("glGetPolygonStipple"),
		glGetProgramBinary:                     getProcAddr("glGetProgramBinary"),
		glGetProgramInfoLog:                    getProcAddr("glGetProgramInfoLog"),
		glGetProgramPipelineInfoLog:            getProcAddr("glGetProgramPipelineInfoLog"),
		glGetProgramPipelineiv:                 getProcAddr("glGetProgramPipelineiv"),
		glGetProgramStageiv:                    getProcAddr("glGetProgramStageiv"),
		glGetProgramiv:                         getProcAddr("glGetProgramiv"),
		glGetQueryIndexediv:                    getProcAddr("glGetQueryIndexediv"),
		glGetQueryObjecti64v:                   getProcAddr("glGetQueryObjecti64v"),
		glGetQueryObjectiv:                     getProcAddr("glGetQueryObjectiv"),
		glGetQueryObjectui64v:                  getProcAddr("glGetQueryObjectui64v"),
		glGetQueryObjectuiv:                    getProcAddr("glGetQueryObjectuiv"),
		glGetQueryiv:                           getProcAddr("glGetQueryiv"),
		glGetRenderbufferParameteriv:           getProcAddr("glGetRenderbufferParameteriv"),
		glGetSamplerParameterIiv:               getProcAddr("glGetSamplerParameterIiv"),
		glGetSamplerParameterIuiv:              getProcAddr("glGetSamplerParameterIuiv"),
		glGetSamplerParameterfv:                getProcAddr("glGetSamplerParameterfv"),
		glGetSamplerParameteriv:                getProcAddr("glGetSamplerParameteriv"),
		glGetShaderInfoLog:                     getProcAddr("glGetShaderInfoLog"),
		glGetShaderPrecisionFormat:             getProcAddr("glGetShaderPrecisionFormat"),
		glGetShaderSource:                      getProcAddr("glGetShaderSource"),
		glGetShaderiv:                          getProcAddr("glGetShaderiv"),
		glGetString:                            getProcAddr("glGetString"),
		glGetStringi:                           getProcAddr("glGetStringi"),
		glGetSubroutineIndex:                   getProcAddr("glGetSubroutineIndex"),
		glGetSubroutineUniformLocation:         getProcAddr("glGetSubroutineUniformLocation"),
		glGetSynciv:                            getProcAddr("glGetSynciv"),
		glGetTexEnvfv:                          getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:                          getProcAddr("glGetTexEnviv"),
		glGetTexGendv:                          getProcAddr("glGetTexGendv"),
		glGetTexGenfv:                          getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:                          getProcAddr("glGetTexGeniv"),
		glGetTexImage:                          getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:               getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:               getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterIiv:                   getProcAddr("glGetTexParameterIiv"),
		glGetTexParameterIuiv:                  getProcAddr("glGetTexParameterIuiv"),
		glGetTexParameterfv:                    getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:                    getProcAddr("glGetTexParameteriv"),
		glGetTransformFeedbackVarying:          getProcAddr("glGetTransformFeedbackVarying"),
		glGetUniformBlockIndex:                 getProcAddr("glGetUniformBlockIndex"),
		glGetUniformIndices:                    getProcAddr("glGetUniformIndices"),
		glGetUniformLocation:                   getProcAddr("glGetUniformLocation"),
		glGetUniformSubroutineuiv:              getProcAddr("glGetUniformSubroutineuiv"),
		glGetUniformdv:                         getProcAddr("glGetUniformdv"),
		glGetUniformfv:                         getProcAddr("glGetUniformfv"),
		glGetUniformiv:                         getProcAddr("glGetUniformiv"),
		glGetUniformuiv:                        getProcAddr("glGetUniformuiv"),
		glGetVertexAttribIiv:                   getProcAddr("glGetVertexAttribIiv"),
		glGetVertexAttribIuiv:                  getProcAddr("glGetVertexAttribIuiv"),
		glGetVertexAttribLdv:                   getProcAddr("glGetVertexAttribLdv"),
		glGetVertexAttribPointerv:              getProcAddr("glGetVertexAttribPointerv"),
		glGetVertexAttribdv:                    getProcAddr("glGetVertexAttribdv"),
		glGetVertexAttribfv:                    getProcAddr("glGetVertexAttribfv"),
		glGetVertexAttribiv:                    getProcAddr("glGetVertexAttribiv"),
		glHint:                                 getProcAddr("glHint"),
		glIndexMask:                            getProcAddr("glIndexMask"),
		glIndexPointer:                         getProcAddr("glIndexPointer"),
		glIndexd:                               getProcAddr("glIndexd"),
		glIndexdv:                              getProcAddr("glIndexdv"),
		glIndexf:                               getProcAddr("glIndexf"),
		glIndexfv:                              getProcAddr("glIndexfv"),
		glIndexi:                               getProcAddr("glIndexi"),
		glIndexiv:                              getProcAddr("glIndexiv"),
		glIndexs:                               getProcAddr("glIndexs"),
		glIndexsv:                              getProcAddr("glIndexsv"),
		glIndexub:                              getProcAddr("glIndexub"),
		glIndexubv:                             getProcAddr("glIndexubv"),
		glInitNames:                            getProcAddr("glInitNames"),
		glInterleavedArrays:                    getProcAddr("glInterleavedArrays"),
		glIsBuffer:                             getProcAddr("glIsBuffer"),
		glIsEnabled:                            getProcAddr("glIsEnabled"),
		glIsEnabledi:                           getProcAddr("glIsEnabledi"),
		glIsFramebuffer:                        getProcAddr("glIsFramebuffer"),
		glIsList:                               getProcAddr("glIsList"),
		glIsProgram:                            getProcAddr("glIsProgram"),
		glIsProgramPipeline:                    getProcAddr("glIsProgramPipeline"),
		glIsQuery:                              getProcAddr("glIsQuery"),
		glIsRenderbuffer:                       getProcAddr("glIsRenderbuffer"),
		glIsSampler:                            getProcAddr("glIsSampler"),
		glIsShader:                             getProcAddr("glIsShader"),
		glIsSync:                               getProcAddr("glIsSync"),
		glIsTexture:                            getProcAddr("glIsTexture"),
		glIsTransformFeedback:                  getProcAddr("glIsTransformFeedback"),
		glIsVertexArray:                        getProcAddr("glIsVertexArray"),
		glLightModelf:                          getProcAddr("glLightModelf"),
		glLightModelfv:                         getProcAddr("glLightModelfv"),
		glLightModeli:                          getProcAddr("glLightModeli"),
		glLightModeliv:                         getProcAddr("glLightModeliv"),
		glLightf:                               getProcAddr("glLightf"),
		glLightfv:                              getProcAddr("glLightfv"),
		glLighti:                               getProcAddr("glLighti"),
		glLightiv:                              getProcAddr("glLightiv"),
		glLineStipple:                          getProcAddr("glLineStipple"),
		glLineWidth:                            getProcAddr("glLineWidth"),
		glLinkProgram:                          getProcAddr("glLinkProgram"),
		glListBase:                             getProcAddr("glListBase"),
		glLoadIdentity:                         getProcAddr("glLoadIdentity"),
		glLoadMatrixd:                          getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:                          getProcAddr("glLoadMatrixf"),
		glLoadName:                             getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:                 getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:                 getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                              getProcAddr("glLogicOp"),
		glMap1d:                                getProcAddr("glMap1d"),
		glMap1f:                                getProcAddr("glMap1f"),
		glMap2d:                                getProcAddr("glMap2d"),
		glMap2f:                                getProcAddr("glMap2f"),
		glMapBuffer:                            getProcAddr("glMapBuffer"),
		glMapBufferRange:                       getProcAddr("glMapBufferRange"),
		glMapGrid1d:                            getProcAddr("glMapGrid1d"),
		glMapGrid1f:                            getProcAddr("glMapGrid1f"),
		glMapGrid2d:                            getProcAddr("glMapGrid2d"),
		glMapGrid2f:                            getProcAddr("glMapGrid2f"),
		glMaterialf:                            getProcAddr("glMaterialf"),
		glMaterialfv:                           getProcAddr("glMaterialfv"),
		glMateriali:                            getProcAddr("glMateriali"),
		glMaterialiv:                           getProcAddr("glMaterialiv"),
		glMatrixMode:                           getProcAddr("glMatrixMode"),
		glMemoryBarrier:                        getProcAddr("glMemoryBarrier"),
		glMinSampleShading:                     getProcAddr("glMinSampleShading"),
		glMultMatrixd:                          getProcAddr("glMultMatrixd"),
		glMultMatrixf:                          getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:                 getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:                 getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:                      getProcAddr("glMultiDrawArrays"),
		glMultiDrawElements:                    getProcAddr("glMultiDrawElements"),
		glMultiDrawElementsBaseVertex:          getProcAddr("glMultiDrawElementsBaseVertex"),
		glMultiTexCoord1d:                      getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:                     getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:                      getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:                     getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:                      getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:                     getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:                      getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:                     getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:                      getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:                     getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:                      getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:                     getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:                      getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:                     getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:                      getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:                     getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:                      getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:                     getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:                      getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:                     getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:                      getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:                     getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:                      getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:                     getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:                      getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:                     getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:                      getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:                     getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:                      getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:                     getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:                      getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:                     getProcAddr("glMultiTexCoord4sv"),
		glMultiTexCoordP1ui:                    getProcAddr("glMultiTexCoordP1ui"),
		glMultiTexCoordP1uiv:                   getProcAddr("glMultiTexCoordP1uiv"),
		glMultiTexCoordP2ui:                    getProcAddr("glMultiTexCoordP2ui"),
		glMultiTexCoordP2uiv:                   getProcAddr("glMultiTexCoordP2uiv"),
		glMultiTexCoordP3ui:                    getProcAddr("glMultiTexCoordP3ui"),
		glMultiTexCoordP3uiv:                   getProcAddr("glMultiTexCoordP3uiv"),
		glMultiTexCoordP4ui:                    getProcAddr("glMultiTexCoordP4ui"),
		glMultiTexCoordP4uiv:                   getProcAddr("glMultiTexCoordP4uiv"),
		glNewList:                              getProcAddr("glNewList"),
		glNormal3b:                             getProcAddr("glNormal3b"),
		glNormal3bv:                            getProcAddr("glNormal3bv"),
		glNormal3d:                             getProcAddr("glNormal3d"),
		glNormal3dv:                            getProcAddr("glNormal3dv"),
		glNormal3f:                             getProcAddr("glNormal3f"),
		glNormal3fv:                            getProcAddr("glNormal3fv"),
		glNormal3i:                             getProcAddr("glNormal3i"),
		glNormal3iv:                            getProcAddr("glNormal3iv"),
		glNormal3s:                             getProcAddr("glNormal3s"),
		glNormal3sv:                            getProcAddr("glNormal3sv"),
		glNormalP3ui:                           getProcAddr("glNormalP3ui"),
		glNormalP3uiv:                          getProcAddr("glNormalP3uiv"),
		glNormalPointer:                        getProcAddr("glNormalPointer"),
		glOrtho:                                getProcAddr("glOrtho"),
		glPassThrough:                          getProcAddr("glPassThrough"),
		glPatchParameterfv:                     getProcAddr("glPatchParameterfv"),
		glPatchParameteri:                      getProcAddr("glPatchParameteri"),
		glPauseTransformFeedback:               getProcAddr("glPauseTransformFeedback"),
		glPixelMapfv:                           getProcAddr("glPixelMapfv"),
		glPixelMapuiv:                          getProcAddr("glPixelMapuiv"),
		glPixelMapusv:                          getProcAddr("glPixelMapusv"),
		glPixelStoref:                          getProcAddr("glPixelStoref"),
		glPixelStorei:                          getProcAddr("glPixelStorei"),
		glPixelTransferf:                       getProcAddr("glPixelTransferf"),
		glPixelTransferi:                       getProcAddr("glPixelTransferi"),
		glPixelZoom:                            getProcAddr("glPixelZoom"),
		glPointParameterf:                      getProcAddr("glPointParameterf"),
		glPointParameterfv:                     getProcAddr("glPointParameterfv"),
		glPointParameteri:                      getProcAddr("glPointParameteri"),
		glPointParameteriv:                     getProcAddr("glPointParameteriv"),
		glPointSize:                            getProcAddr("glPointSize"),
		glPolygonMode:                          getProcAddr("glPolygonMode"),
		glPolygonOffset:                        getProcAddr("glPolygonOffset"),
		glPolygonStipple:                       getProcAddr("glPolygonStipple"),
		glPopAttrib:                            getProcAddr("glPopAttrib"),
		glPopClientAttrib:                      getProcAddr("glPopClientAttrib"),
		glPopMatrix:                            getProcAddr("glPopMatrix"),
		glPopName:                              getProcAddr("glPopName"),
		glPrimitiveRestartIndex:                getProcAddr("glPrimitiveRestartIndex"),
		glPrioritizeTextures:                   getProcAddr("glPrioritizeTextures"),
		glProgramBinary:                        getProcAddr("glProgramBinary"),
		glProgramParameteri:                    getProcAddr("glProgramParameteri"),
		glProgramUniform1d:                     getProcAddr("glProgramUniform1d"),
		glProgramUniform1dv:                    getProcAddr("glProgramUniform1dv"),
		glProgramUniform1f:                     getProcAddr("glProgramUniform1f"),
		glProgramUniform1fv:                    getProcAddr("glProgramUniform1fv"),
		glProgramUniform1i:                     getProcAddr("glProgramUniform1i"),
		glProgramUniform1iv:                    getProcAddr("glProgramUniform1iv"),
		glProgramUniform1ui:                    getProcAddr("glProgramUniform1ui"),
		glProgramUniform1uiv:                   getProcAddr("glProgramUniform1uiv"),
		glProgramUniform2d:                     getProcAddr("glProgramUniform2d"),
		glProgramUniform2dv:                    getProcAddr("glProgramUniform2dv"),
		glProgramUniform2f:                     getProcAddr("glProgramUniform2f"),
		glProgramUniform2fv:                    getProcAddr("glProgramUniform2fv"),
		glProgramUniform2i:                     getProcAddr("glProgramUniform2i"),
		glProgramUniform2iv:                    getProcAddr("glProgramUniform2iv"),
		glProgramUniform2ui:                    getProcAddr("glProgramUniform2ui"),
		glProgramUniform2uiv:                   getProcAddr("glProgramUniform2uiv"),
		glProgramUniform3d:                     getProcAddr("glProgramUniform3d"),
		glProgramUniform3dv:                    getProcAddr("glProgramUniform3dv"),
		glProgramUniform3f:                     getProcAddr("glProgramUniform3f"),
		glProgramUniform3fv:                    getProcAddr("glProgramUniform3fv"),
		glProgramUniform3i:                     getProcAddr("glProgramUniform3i"),
		glProgramUniform3iv:                    getProcAddr("glProgramUniform3iv"),
		glProgramUniform3ui:                    getProcAddr("glProgramUniform3ui"),
		glProgramUniform3uiv:                   getProcAddr("glProgramUniform3uiv"),
		glProgramUniform4d:                     getProcAddr("glProgramUniform4d"),
		glProgramUniform4dv:                    getProcAddr("glProgramUniform4dv"),
		glProgramUniform4f:                     getProcAddr("glProgramUniform4f"),
		glProgramUniform4fv:                    getProcAddr("glProgramUniform4fv"),
		glProgramUniform4i:                     getProcAddr("glProgramUniform4i"),
		glProgramUniform4iv:                    getProcAddr("glProgramUniform4iv"),
		glProgramUniform4ui:                    getProcAddr("glProgramUniform4ui"),
		glProgramUniform4uiv:                   getProcAddr("glProgramUniform4uiv"),
		glProgramUniformMatrix2dv:              getProcAddr("glProgramUniformMatrix2dv"),
		glProgramUniformMatrix2fv:              getProcAddr("glProgramUniformMatrix2fv"),
		glProgramUniformMatrix2x3dv:            getProcAddr("glProgramUniformMatrix2x3dv"),
		glProgramUniformMatrix2x3fv:            getProcAddr("glProgramUniformMatrix2x3fv"),
		glProgramUniformMatrix2x4dv:            getProcAddr("glProgramUniformMatrix2x4dv"),
		glProgramUniformMatrix2x4fv:            getProcAddr("glProgramUniformMatrix2x4fv"),
		glProgramUniformMatrix3dv:              getProcAddr("glProgramUniformMatrix3dv"),
		glProgramUniformMatrix3fv:              getProcAddr("glProgramUniformMatrix3fv"),
		glProgramUniformMatrix3x2dv:            getProcAddr("glProgramUniformMatrix3x2dv"),
		glProgramUniformMatrix3x2fv:            getProcAddr("glProgramUniformMatrix3x2fv"),
		glProgramUniformMatrix3x4dv:            getProcAddr("glProgramUniformMatrix3x4dv"),
		glProgramUniformMatrix3x4fv:            getProcAddr("glProgramUniformMatrix3x4fv"),
		glProgramUniformMatrix4dv:              getProcAddr("glProgramUniformMatrix4dv"),
		glProgramUniformMatrix4fv:              getProcAddr("glProgramUniformMatrix4fv"),
		glProgramUniformMatrix4x2dv:            getProcAddr("glProgramUniformMatrix4x2dv"),
		glProgramUniformMatrix4x2fv:            getProcAddr("glProgramUniformMatrix4x2fv"),
		glProgramUniformMatrix4x3dv:            getProcAddr("glProgramUniformMatrix4x3dv"),
		glProgramUniformMatrix4x3fv:            getProcAddr("glProgramUniformMatrix4x3fv"),
		glProvokingVertex:                      getProcAddr("glProvokingVertex"),
		glPushAttrib:                           getProcAddr("glPushAttrib"),
		glPushClientAttrib:                     getProcAddr("glPushClientAttrib"),
		glPushMatrix:                           getProcAddr("glPushMatrix"),
		glPushName:                             getProcAddr("glPushName"),
		glQueryCounter:                         getProcAddr("glQueryCounter"),
		glRasterPos2d:                          getProcAddr("glRasterPos2d"),
		glRasterPos2dv:                         getProcAddr("glRasterPos2dv"),
		glRasterPos2f:                          getProcAddr("glRasterPos2f"),
		glRasterPos2fv:                         getProcAddr("glRasterPos2fv"),
		glRasterPos2i:                          getProcAddr("glRasterPos2i"),
		glRasterPos2iv:                         getProcAddr("glRasterPos2iv"),
		glRasterPos2s:                          getProcAddr("glRasterPos2s"),
		glRasterPos2sv:                         getProcAddr("glRasterPos2sv"),
		glRasterPos3d:                          getProcAddr("glRasterPos3d"),
		glRasterPos3dv:                         getProcAddr("glRasterPos3dv"),
		glRasterPos3f:                          getProcAddr("glRasterPos3f"),
		glRasterPos3fv:                         getProcAddr("glRasterPos3fv"),
		glRasterPos3i:                          getProcAddr("glRasterPos3i"),
		glRasterPos3iv:                         getProcAddr("glRasterPos3iv"),
		glRasterPos3s:                          getProcAddr("glRasterPos3s"),
		glRasterPos3sv:                         getProcAddr("glRasterPos3sv"),
		glRasterPos4d:                          getProcAddr("glRasterPos4d"),
		glRasterPos4dv:                         getProcAddr("glRasterPos4dv"),
		glRasterPos4f:                          getProcAddr("glRasterPos4f"),
		glRasterPos4fv:                         getProcAddr("glRasterPos4fv"),
		glRasterPos4i:                          getProcAddr("glRasterPos4i"),
		glRasterPos4iv:                         getProcAddr("glRasterPos4iv"),
		glRasterPos4s:                          getProcAddr("glRasterPos4s"),
		glRasterPos4sv:                         getProcAddr("glRasterPos4sv"),
		glReadBuffer:                           getProcAddr("glReadBuffer"),
		glReadPixels:                           getProcAddr("glReadPixels"),
		glRectd:                                getProcAddr("glRectd"),
		glRectdv:                               getProcAddr("glRectdv"),
		glRectf:                                getProcAddr("glRectf"),
		glRectfv:                               getProcAddr("glRectfv"),
		glRecti:                                getProcAddr("glRecti"),
		glRectiv:                               getProcAddr("glRectiv"),
		glRects:                                getProcAddr("glRects"),
		glRectsv:                               getProcAddr("glRectsv"),
		glReleaseShaderCompiler:                getProcAddr("glReleaseShaderCompiler"),
		glRenderMode:                           getProcAddr("glRenderMode"),
		glRenderbufferStorage:                  getProcAddr("glRenderbufferStorage"),
		glRenderbufferStorageMultisample:       getProcAddr("glRenderbufferStorageMultisample"),
		glResumeTransformFeedback:              getProcAddr("glResumeTransformFeedback"),
		glRotated:                              getProcAddr("glRotated"),
		glRotatef:                              getProcAddr("glRotatef"),
		glSampleCoverage:                       getProcAddr("glSampleCoverage"),
		glSampleMaski:                          getProcAddr("glSampleMaski"),
		glSamplerParameterIiv:                  getProcAddr("glSamplerParameterIiv"),
		glSamplerParameterIuiv:                 getProcAddr("glSamplerParameterIuiv"),
		glSamplerParameterf:                    getProcAddr("glSamplerParameterf"),
		glSamplerParameterfv:                   getProcAddr("glSamplerParameterfv"),
		glSamplerParameteri:                    getProcAddr("glSamplerParameteri"),
		glSamplerParameteriv:                   getProcAddr("glSamplerParameteriv"),
		glScaled:                               getProcAddr("glScaled"),
		glScalef:                               getProcAddr("glScalef"),
		glScissor:                              getProcAddr("glScissor"),
		glScissorArrayv:                        getProcAddr("glScissorArrayv"),
		glScissorIndexed:                       getProcAddr("glScissorIndexed"),
		glScissorIndexedv:                      getProcAddr("glScissorIndexedv"),
		glSecondaryColor3b:                     getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:                    getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:                     getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:                    getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:                     getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:                    getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:                     getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:                    getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:                     getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:                    getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:                    getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:                   getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:                    getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:                   getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:                    getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:                   getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorP3ui:                   getProcAddr("glSecondaryColorP3ui"),
		glSecondaryColorP3uiv:                  getProcAddr("glSecondaryColorP3uiv"),
		glSecondaryColorPointer:                getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:                         getProcAddr("glSelectBuffer"),
		glShadeModel:                           getProcAddr("glShadeModel"),
		glShaderBinary:                         getProcAddr("glShaderBinary"),
		glShaderSource:                         getProcAddr("glShaderSource"),
		glStencilFunc:                          getProcAddr("glStencilFunc"),
		glStencilFuncSeparate:                  getProcAddr("glStencilFuncSeparate"),
		glStencilMask:                          getProcAddr("glStencilMask"),
		glStencilMaskSeparate:                  getProcAddr("glStencilMaskSeparate"),
		glStencilOp:                            getProcAddr("glStencilOp"),
		glStencilOpSeparate:                    getProcAddr("glStencilOpSeparate"),
		glTexBuffer:                            getProcAddr("glTexBuffer"),
		glTexCoord1d:                           getProcAddr("glTexCoord1d"),
		glTexCoord1dv:                          getProcAddr("glTexCoord1dv"),
		glTexCoord1f:                           getProcAddr("glTexCoord1f"),
		glTexCoord1fv:                          getProcAddr("glTexCoord1fv"),
		glTexCoord1i:                           getProcAddr("glTexCoord1i"),
		glTexCoord1iv:                          getProcAddr("glTexCoord1iv"),
		glTexCoord1s:                           getProcAddr("glTexCoord1s"),
		glTexCoord1sv:                          getProcAddr("glTexCoord1sv"),
		glTexCoord2d:                           getProcAddr("glTexCoord2d"),
		glTexCoord2dv:                          getProcAddr("glTexCoord2dv"),
		glTexCoord2f:                           getProcAddr("glTexCoord2f"),
		glTexCoord2fv:                          getProcAddr("glTexCoord2fv"),
		glTexCoord2i:                           getProcAddr("glTexCoord2i"),
		glTexCoord2iv:                          getProcAddr("glTexCoord2iv"),
		glTexCoord2s:                           getProcAddr("glTexCoord2s"),
		glTexCoord2sv:                          getProcAddr("glTexCoord2sv"),
		glTexCoord3d:                           getProcAddr("glTexCoord3d"),
		glTexCoord3dv:                          getProcAddr("glTexCoord3dv"),
		glTexCoord3f:                           getProcAddr("glTexCoord3f"),
		glTexCoord3fv:                          getProcAddr("glTexCoord3fv"),
		glTexCoord3i:                           getProcAddr("glTexCoord3i"),
		glTexCoord3iv:                          getProcAddr("glTexCoord3iv"),
		glTexCoord3s:                           getProcAddr("glTexCoord3s"),
		glTexCoord3sv:                          getProcAddr("glTexCoord3sv"),
		glTexCoord4d:                           getProcAddr("glTexCoord4d"),
		glTexCoord4dv:                          getProcAddr("glTexCoord4dv"),
		glTexCoord4f:                           getProcAddr("glTexCoord4f"),
		glTexCoord4fv:                          getProcAddr("glTexCoord4fv"),
		glTexCoord4i:                           getProcAddr("glTexCoord4i"),
		glTexCoord4iv:                          getProcAddr("glTexCoord4iv"),
		glTexCoord4s:                           getProcAddr("glTexCoord4s"),
		glTexCoord4sv:                          getProcAddr("glTexCoord4sv"),
		glTexCoordP1ui:                         getProcAddr("glTexCoordP1ui"),
		glTexCoordP1uiv:                        getProcAddr("glTexCoordP1uiv"),
		glTexCoordP2ui:                         getProcAddr("glTexCoordP2ui"),
		glTexCoordP2uiv:                        getProcAddr("glTexCoordP2uiv"),
		glTexCoordP3ui:                         getProcAddr("glTexCoordP3ui"),
		glTexCoordP3uiv:                        getProcAddr("glTexCoordP3uiv"),
		glTexCoordP4ui:                         getProcAddr("glTexCoordP4ui"),
		glTexCoordP4uiv:                        getProcAddr("glTexCoordP4uiv"),
		glTexCoordPointer:                      getProcAddr("glTexCoordPointer"),
		glTexEnvf:                              getProcAddr("glTexEnvf"),
		glTexEnvfv:                             getProcAddr("glTexEnvfv"),
		glTexEnvi:                              getProcAddr("glTexEnvi"),
		glTexEnviv:                             getProcAddr("glTexEnviv"),
		glTexGend:                              getProcAddr("glTexGend"),
		glTexGendv:                             getProcAddr("glTexGendv"),
		glTexGenf:                              getProcAddr("glTexGenf"),
		glTexGenfv:                             getProcAddr("glTexGenfv"),
		glTexGeni:                              getProcAddr("glTexGeni"),
		glTexGeniv:                             getProcAddr("glTexGeniv"),
		glTexImage1D:                           getProcAddr("glTexImage1D"),
		glTexImage2D:                           getProcAddr("glTexImage2D"),
		glTexImage2DMultisample:                getProcAddr("glTexImage2DMultisample"),
		glTexImage3D:                           getProcAddr("glTexImage3D"),
		glTexImage3DMultisample:                getProcAddr("glTexImage3DMultisample"),
		glTexParameterIiv:                      getProcAddr("glTexParameterIiv"),
		glTexParameterIuiv:                     getProcAddr("glTexParameterIuiv"),
		glTexParameterf:                        getProcAddr("glTexParameterf"),
		glTexParameterfv:                       getProcAddr("glTexParameterfv"),
		glTexParameteri:                        getProcAddr("glTexParameteri"),
		glTexParameteriv:                       getProcAddr("glTexParameteriv"),
		glTexStorage1D:                         getProcAddr("glTexStorage1D"),
		glTexStorage2D:                         getProcAddr("glTexStorage2D"),
		glTexStorage3D:                         getProcAddr("glTexStorage3D"),
		glTexSubImage1D:                        getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:                        getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:                        getProcAddr("glTexSubImage3D"),
		glTransformFeedbackVaryings:            getProcAddr("glTransformFeedbackVaryings"),
		glTranslated:                           getProcAddr("glTranslated"),
		glTranslatef:                           getProcAddr("glTranslatef"),
		glUniform1d:                            getProcAddr("glUniform1d"),
		glUniform1dv:                           getProcAddr("glUniform1dv"),
		glUniform1f:                            getProcAddr("glUniform1f"),
		glUniform1fv:                           getProcAddr("glUniform1fv"),
		glUniform1i:                            getProcAddr("glUniform1i"),
		glUniform1iv:                           getProcAddr("glUniform1iv"),
		glUniform1ui:                           getProcAddr("glUniform1ui"),
		glUniform1uiv:                          getProcAddr("glUniform1uiv"),
		glUniform2d:                            getProcAddr("glUniform2d"),
		glUniform2dv:                           getProcAddr("glUniform2dv"),
		glUniform2f:                            getProcAddr("glUniform2f"),
		glUniform2fv:                           getProcAddr("glUniform2fv"),
		glUniform2i:                            getProcAddr("glUniform2i"),
		glUniform2iv:                           getProcAddr("glUniform2iv"),
		glUniform2ui:                           getProcAddr("glUniform2ui"),
		glUniform2uiv:                          getProcAddr("glUniform2uiv"),
		glUniform3d:                            getProcAddr("glUniform3d"),
		glUniform3dv:                           getProcAddr("glUniform3dv"),
		glUniform3f:                            getProcAddr("glUniform3f"),
		glUniform3fv:                           getProcAddr("glUniform3fv"),
		glUniform3i:                            getProcAddr("glUniform3i"),
		glUniform3iv:                           getProcAddr("glUniform3iv"),
		glUniform3ui:                           getProcAddr("glUniform3ui"),
		glUniform3uiv:                          getProcAddr("glUniform3uiv"),
		glUniform4d:                            getProcAddr("glUniform4d"),
		glUniform4dv:                           getProcAddr("glUniform4dv"),
		glUniform4f:                            getProcAddr("glUniform4f"),
		glUniform4fv:                           getProcAddr("glUniform4fv"),
		glUniform4i:                            getProcAddr("glUniform4i"),
		glUniform4iv:                           getProcAddr("glUniform4iv"),
		glUniform4ui:                           getProcAddr("glUniform4ui"),
		glUniform4uiv:                          getProcAddr("glUniform4uiv"),
		glUniformBlockBinding:                  getProcAddr("glUniformBlockBinding"),
		glUniformMatrix2dv:                     getProcAddr("glUniformMatrix2dv"),
		glUniformMatrix2fv:                     getProcAddr("glUniformMatrix2fv"),
		glUniformMatrix2x3dv:                   getProcAddr("glUniformMatrix2x3dv"),
		glUniformMatrix2x3fv:                   getProcAddr("glUniformMatrix2x3fv"),
		glUniformMatrix2x4dv:                   getProcAddr("glUniformMatrix2x4dv"),
		glUniformMatrix2x4fv:                   getProcAddr("glUniformMatrix2x4fv"),
		glUniformMatrix3dv:                     getProcAddr("glUniformMatrix3dv"),
		glUniformMatrix3fv:                     getProcAddr("glUniformMatrix3fv"),
		glUniformMatrix3x2dv:                   getProcAddr("glUniformMatrix3x2dv"),
		glUniformMatrix3x2fv:                   getProcAddr("glUniformMatrix3x2fv"),
		glUniformMatrix3x4dv:                   getProcAddr("glUniformMatrix3x4dv"),
		glUniformMatrix3x4fv:                   getProcAddr("glUniformMatrix3x4fv"),
		glUniformMatrix4dv:                     getProcAddr("glUniformMatrix4dv"),
		glUniformMatrix4fv:                     getProcAddr("glUniformMatrix4fv"),
		glUniformMatrix4x2dv:                   getProcAddr("glUniformMatrix4x2dv"),
		glUniformMatrix4x2fv:                   getProcAddr("glUniformMatrix4x2fv"),
		glUniformMatrix4x3dv:                   getProcAddr("glUniformMatrix4x3dv"),
		glUniformMatrix4x3fv:                   getProcAddr("glUniformMatrix4x3fv"),
		glUniformSubroutinesuiv:                getProcAddr("glUniformSubroutinesuiv"),
		glUnmapBuffer:                          getProcAddr("glUnmapBuffer"),
		glUseProgram:                           getProcAddr("glUseProgram"),
		glUseProgramStages:                     getProcAddr("glUseProgramStages"),
		glValidateProgram:                      getProcAddr("glValidateProgram"),
		glValidateProgramPipeline:              getProcAddr("glValidateProgramPipeline"),
		glVertex2d:                             getProcAddr("glVertex2d"),
		glVertex2dv:                            getProcAddr("glVertex2dv"),
		glVertex2f:                             getProcAddr("glVertex2f"),
		glVertex2fv:                            getProcAddr("glVertex2fv"),
		glVertex2i:                             getProcAddr("glVertex2i"),
		glVertex2iv:                            getProcAddr("glVertex2iv"),
		glVertex2s:                             getProcAddr("glVertex2s"),
		glVertex2sv:                            getProcAddr("glVertex2sv"),
		glVertex3d:                             getProcAddr("glVertex3d"),
		glVertex3dv:                            getProcAddr("glVertex3dv"),
		glVertex3f:                             getProcAddr("glVertex3f"),
		glVertex3fv:                            getProcAddr("glVertex3fv"),
		glVertex3i:                             getProcAddr("glVertex3i"),
		glVertex3iv:                            getProcAddr("glVertex3iv"),
		glVertex3s:                             getProcAddr("glVertex3s"),
		glVertex3sv:                            getProcAddr("glVertex3sv"),
		glVertex4d:                             getProcAddr("glVertex4d"),
		glVertex4dv:                            getProcAddr("glVertex4dv"),
		glVertex4f:                             getProcAddr("glVertex4f"),
		glVertex4fv:                            getProcAddr("glVertex4fv"),
		glVertex4i:                             getProcAddr("glVertex4i"),
		glVertex4iv:                            getProcAddr("glVertex4iv"),
		glVertex4s:                             getProcAddr("glVertex4s"),
		glVertex4sv:                            getProcAddr("glVertex4sv"),
		glVertexAttrib1d:                       getProcAddr("glVertexAttrib1d"),
		glVertexAttrib1dv:                      getProcAddr("glVertexAttrib1dv"),
		glVertexAttrib1f:                       getProcAddr("glVertexAttrib1f"),
		glVertexAttrib1fv:                      getProcAddr("glVertexAttrib1fv"),
		glVertexAttrib1s:                       getProcAddr("glVertexAttrib1s"),
		glVertexAttrib1sv:                      getProcAddr("glVertexAttrib1sv"),
		glVertexAttrib2d:                       getProcAddr("glVertexAttrib2d"),
		glVertexAttrib2dv:                      getProcAddr("glVertexAttrib2dv"),
		glVertexAttrib2f:                       getProcAddr("glVertexAttrib2f"),
		glVertexAttrib2fv:                      getProcAddr("glVertexAttrib2fv"),
		glVertexAttrib2s:                       getProcAddr("glVertexAttrib2s"),
		glVertexAttrib2sv:                      getProcAddr("glVertexAttrib2sv"),
		glVertexAttrib3d:                       getProcAddr("glVertexAttrib3d"),
		glVertexAttrib3dv:                      getProcAddr("glVertexAttrib3dv"),
		glVertexAttrib3f:                       getProcAddr("glVertexAttrib3f"),
		glVertexAttrib3fv:                      getProcAddr("glVertexAttrib3fv"),
		glVertexAttrib3s:                       getProcAddr("glVertexAttrib3s"),
		glVertexAttrib3sv:                      getProcAddr("glVertexAttrib3sv"),
		glVertexAttrib4Nbv:                     getProcAddr("glVertexAttrib4Nbv"),
		glVertexAttrib4Niv:                     getProcAddr("glVertexAttrib4Niv"),
		glVertexAttrib4Nsv:                     getProcAddr("glVertexAttrib4Nsv"),
		glVertexAttrib4Nub:                     getProcAddr("glVertexAttrib4Nub"),
		glVertexAttrib4Nubv:                    getProcAddr("glVertexAttrib4Nubv"),
		glVertexAttrib4Nuiv:                    getProcAddr("glVertexAttrib4Nuiv"),
		glVertexAttrib4Nusv:                    getProcAddr("glVertexAttrib4Nusv"),
		glVertexAttrib4bv:                      getProcAddr("glVertexAttrib4bv"),
		glVertexAttrib4d:                       getProcAddr("glVertexAttrib4d"),
		glVertexAttrib4dv:                      getProcAddr("glVertexAttrib4dv"),
		glVertexAttrib4f:                       getProcAddr("glVertexAttrib4f"),
		glVertexAttrib4fv:                      getProcAddr("glVertexAttrib4fv"),
		glVertexAttrib4iv:                      getProcAddr("glVertexAttrib4iv"),
		glVertexAttrib4s:                       getProcAddr("glVertexAttrib4s"),
		glVertexAttrib4sv:                      getProcAddr("glVertexAttrib4sv"),
		glVertexAttrib4ubv:                     getProcAddr("glVertexAttrib4ubv"),
		glVertexAttrib4uiv:                     getProcAddr("glVertexAttrib4uiv"),
		glVertexAttrib4usv:                     getProcAddr("glVertexAttrib4usv"),
		glVertexAttribDivisor:                  getProcAddr("glVertexAttribDivisor"),
		glVertexAttribI1i:                      getProcAddr("glVertexAttribI1i"),
		glVertexAttribI1iv:                     getProcAddr("glVertexAttribI1iv"),
		glVertexAttribI1ui:                     getProcAddr("glVertexAttribI1ui"),
		glVertexAttribI1uiv:                    getProcAddr("glVertexAttribI1uiv"),
		glVertexAttribI2i:                      getProcAddr("glVertexAttribI2i"),
		glVertexAttribI2iv:                     getProcAddr("glVertexAttribI2iv"),
		glVertexAttribI2ui:                     getProcAddr("glVertexAttribI2ui"),
		glVertexAttribI2uiv:                    getProcAddr("glVertexAttribI2uiv"),
		glVertexAttribI3i:                      getProcAddr("glVertexAttribI3i"),
		glVertexAttribI3iv:                     getProcAddr("glVertexAttribI3iv"),
		glVertexAttribI3ui:                     getProcAddr("glVertexAttribI3ui"),
		glVertexAttribI3uiv:                    getProcAddr("glVertexAttribI3uiv"),
		glVertexAttribI4bv:                     getProcAddr("glVertexAttribI4bv"),
		glVertexAttribI4i:                      getProcAddr("glVertexAttribI4i"),
		glVertexAttribI4iv:                     getProcAddr("glVertexAttribI4iv"),
		glVertexAttribI4sv:                     getProcAddr("glVertexAttribI4sv"),
		glVertexAttribI4ubv:                    getProcAddr("glVertexAttribI4ubv"),
		glVertexAttribI4ui:                     getProcAddr("glVertexAttribI4ui"),
		glVertexAttribI4uiv:                    getProcAddr("glVertexAttribI4uiv"),
		glVertexAttribI4usv:                    getProcAddr("glVertexAttribI4usv"),
		glVertexAttribIPointer:                 getProcAddr("glVertexAttribIPointer"),
		glVertexAttribL1d:                      getProcAddr("glVertexAttribL1d"),
		glVertexAttribL1dv:                     getProcAddr("glVertexAttribL1dv"),
		glVertexAttribL2d:                      getProcAddr("glVertexAttribL2d"),
		glVertexAttribL2dv:                     getProcAddr("glVertexAttribL2dv"),
		glVertexAttribL3d:                      getProcAddr("glVertexAttribL3d"),
		glVertexAttribL3dv:                     getProcAddr("glVertexAttribL3dv"),
		glVertexAttribL4d:                      getProcAddr("glVertexAttribL4d"),
		glVertexAttribL4dv:                     getProcAddr("glVertexAttribL4dv"),
		glVertexAttribLPointer:                 getProcAddr("glVertexAttribLPointer"),
		glVertexAttribP1ui:                     getProcAddr("glVertexAttribP1ui"),
		glVertexAttribP1uiv:                    getProcAddr("glVertexAttribP1uiv"),
		glVertexAttribP2ui:                     getProcAddr("glVertexAttribP2ui"),
		glVertexAttribP2uiv:                    getProcAddr("glVertexAttribP2uiv"),
		glVertexAttribP3ui:                     getProcAddr("glVertexAttribP3ui"),
		glVertexAttribP3uiv:                    getProcAddr("glVertexAttribP3uiv"),
		glVertexAttribP4ui:                     getProcAddr("glVertexAttribP4ui"),
		glVertexAttribP4uiv:                    getProcAddr("glVertexAttribP4uiv"),
		glVertexAttribPointer:                  getProcAddr("glVertexAttribPointer"),
		glVertexP2ui:                           getProcAddr("glVertexP2ui"),
		glVertexP2uiv:                          getProcAddr("glVertexP2uiv"),
		glVertexP3ui:                           getProcAddr("glVertexP3ui"),
		glVertexP3uiv:                          getProcAddr("glVertexP3uiv"),
		glVertexP4ui:                           getProcAddr("glVertexP4ui"),
		glVertexP4uiv:                          getProcAddr("glVertexP4uiv"),
		glVertexPointer:                        getProcAddr("glVertexPointer"),
		glViewport:                             getProcAddr("glViewport"),
		glViewportArrayv:                       getProcAddr("glViewportArrayv"),
		glViewportIndexedf:                     getProcAddr("glViewportIndexedf"),
		glViewportIndexedfv:                    getProcAddr("glViewportIndexedfv"),
		glWaitSync:                             getProcAddr("glWaitSync"),
		glWindowPos2d:                          getProcAddr("glWindowPos2d"),
		glWindowPos2dv:                         getProcAddr("glWindowPos2dv"),
		glWindowPos2f:                          getProcAddr("glWindowPos2f"),
		glWindowPos2fv:                         getProcAddr("glWindowPos2fv"),
		glWindowPos2i:                          getProcAddr("glWindowPos2i"),
		glWindowPos2iv:                         getProcAddr("glWindowPos2iv"),
		glWindowPos2s:                          getProcAddr("glWindowPos2s"),
		glWindowPos2sv:                         getProcAddr("glWindowPos2sv"),
		glWindowPos3d:                          getProcAddr("glWindowPos3d"),
		glWindowPos3dv:                         getProcAddr("glWindowPos3dv"),
		glWindowPos3f:                          getProcAddr("glWindowPos3f"),
		glWindowPos3fv:                         getProcAddr("glWindowPos3fv"),
		glWindowPos3i:                          getProcAddr("glWindowPos3i"),
		glWindowPos3iv:                         getProcAddr("glWindowPos3iv"),
		glWindowPos3s:                          getProcAddr("glWindowPos3s"),
		glWindowPos3sv:                         getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL430 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveShaderProgram(pipeline uint32, program uint32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	AttachShader(program uint32, shader uint32)
	Begin(mode uint32)
	BeginConditionalRender(id uint32, mode uint32)
	BeginQuery(target uint32, id uint32)
	BeginQueryIndexed(target uint32, index uint32, id uint32)
	BeginTransformFeedback(primitiveMode uint32)
	BindAttribLocation(program uint32, index uint32, name *uint8)
	BindBuffer(target uint32, buffer uint32)
	BindBufferBase(target uint32, index uint32, buffer uint32)
	BindBufferRange(target uint32, index uint32, buffer uint32, offset uintptr, size int)
	BindFragDataLocation(program uint32, color uint32, name *uint8)
	BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *uint8)
	BindFramebuffer(target uint32, framebuffer uint32)
	BindImageTexture(unit uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format uint32)
	BindProgramPipeline(pipeline uint32)
	BindRenderbuffer(target uint32, renderbuffer uint32)
	BindSampler(unit uint32, sampler uint32)
	BindTexture(target uint32, texture uint32)
	BindTransformFeedback(target uint32, id uint32)
	BindVertexArray(array uint32)
	BindVertexBuffer(bindingindex uint32, buffer uint32, offset uintptr, stride int32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)
	BlendEquationSeparatei(buf uint32, modeRGB uint32, modeAlpha uint32)
	BlendEquationi(buf uint32, mode uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BlendFuncSeparatei(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32)
	BlendFunci(buf uint32, src uint32, dst uint32)
	BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	CheckFramebufferStatus(target uint32) uint32
	ClampColor(target uint32, clamp uint32)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearBufferData(target uint32, internalformat uint32, format uint32, type_ uint32, data unsafe.Pointer)
	ClearBufferSubData(target uint32, internalformat uint32, offset uintptr, size int, format uint32, type_ uint32, data unsafe.Pointer)
	ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32)
	ClearBufferfv(buffer uint32, drawbuffer int32, value *float32)
	ClearBufferiv(buffer uint32, drawbuffer int32, value *int32)
	ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearDepthf(d float32)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClientActiveTexture(texture uint32)
	ClientWaitSync(sync GLsync, flags uint32, timeout uint64) uint32
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaski(index uint32, r bool, g bool, b bool, a bool)
	ColorMaterial(face uint32, mode uint32)
	ColorP3ui(type_ uint32, color uint32)
	ColorP3uiv(type_ uint32, color *uint32)
	ColorP4ui(type_ uint32, color uint32)
	ColorP4uiv(type_ uint32, color *uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompileShader(shader uint32)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset uintptr, writeOffset uintptr, size int)
	CopyImageSubData(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CreateProgram() uint32
	CreateShader(type_ uint32) uint32
	CreateShaderProgramv(type_ uint32, count int32, strings **uint8) uint32
	CullFace(mode uint32)
	DebugMessageCallback(callback func(source, type_, id, severity uint32, message string))
	DebugMessageControl(source uint32, type_ uint32, severity uint32, count int32, ids *uint32, enabled bool)
	DebugMessageInsert(source uint32, type_ uint32, id uint32, severity uint32, length int32, buf *uint8)
	DeleteBuffers(n int32, buffers *uint32)
	DeleteFramebuffers(n int32, framebuffers *uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteProgram(program uint32)
	DeleteProgramPipelines(n int32, pipelines *uint32)
	DeleteQueries(n int32, ids *uint32)
	DeleteRenderbuffers(n int32, renderbuffers *uint32)
	DeleteSamplers(count int32, samplers *uint32)
	DeleteShader(shader uint32)
	DeleteSync(sync GLsync)
	DeleteTextures(n int32, textures *uint32)
	DeleteTransformFeedbacks(n int32, ids *uint32)
	DeleteVertexArrays(n int32, arrays *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	DepthRangeArrayv(first uint32, count int32, v *float64)
	DepthRangeIndexed(index uint32, n float64, f float64)
	DepthRangef(n float32, f float32)
	DetachShader(program uint32, shader uint32)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DisableVertexAttribArray(index uint32)
	Disablei(target uint32, index uint32)
	DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32)
	DispatchComputeIndirect(indirect uintptr)
	DrawArrays(mode uint32, first int32, count int32)
	DrawArraysIndirect(mode uint32, indirect unsafe.Pointer)
	DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32)
	DrawArraysInstancedBaseInstance(mode uint32, first int32, count int32, instancecount int32, baseinstance uint32)
	DrawBuffer(buf uint32)
	DrawBuffers(n int32, bufs *uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawElementsBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer)
	DrawElementsInstanced(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32)
	DrawElementsInstancedBaseInstance(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, baseinstance uint32)
	DrawElementsInstancedBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32)
	DrawElementsInstancedBaseVertexBaseInstance(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32, baseinstance uint32)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawRangeElementsBaseVertex(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawTransformFeedback(mode uint32, id uint32)
	DrawTransformFeedbackInstanced(mode uint32, id uint32, instancecount int32)
	DrawTransformFeedbackStream(mode uint32, id uint32, stream uint32)
	DrawTransformFeedbackStreamInstanced(mode uint32, id uint32, stream uint32, instancecount int32)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	EnableVertexAttribArray(index uint32)
	Enablei(target uint32, index uint32)
	End()
	EndConditionalRender()
	EndList()
	EndQuery(target uint32)
	EndQueryIndexed(target uint32, index uint32)
	EndTransformFeedback()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	FenceSync(condition uint32, flags uint32) GLsync
	Finish()
	Flush()
	FlushMappedBufferRange(target uint32, offset uintptr, length int)
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FramebufferParameteri(target uint32, pname uint32, param int32)
	FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	FramebufferTexture(target uint32, attachment uint32, texture uint32, level int32)
	FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32)
	FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenBuffers(n int32, buffers *uint32)
	GenFramebuffers(n int32, framebuffers *uint32)
	GenLists(range_ int32) uint32
	GenProgramPipelines(n int32, pipelines *uint32)
	GenQueries(n int32, ids *uint32)
	GenRenderbuffers(n int32, renderbuffers *uint32)
	GenSamplers(count int32, samplers *uint32)
	GenTextures(n int32, textures *uint32)
	GenTransformFeedbacks(n int32, ids *uint32)
	GenVertexArrays(n int32, arrays *uint32)
	GenerateMipmap(target uint32)
	GetActiveAtomicCounterBufferiv(program uint32, bufferIndex uint32, pname uint32, params *int32)
	GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveSubroutineName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineUniformName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineUniformiv(program uint32, shadertype uint32, index uint32, pname uint32, values *int32)
	GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *uint8)
	GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32)
	GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *uint8)
	GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32)
	GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)
	GetAttribLocation(program uint32, name *uint8) int32
	GetBooleani_v(target uint32, index uint32, data *bool)
	GetBooleanv(pname uint32, data *bool)
	GetBufferParameteri64v(target uint32, pname uint32, params *int64)
	GetBufferParameteriv(target uint32, pname uint32, params *int32)
	GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)
	GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetDebugMessageLog(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32
	GetDoublei_v(target uint32, index uint32, data *float64)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloati_v(target uint32, index uint32, data *float32)
	GetFloatv(pname uint32, data *float32)
	GetFragDataIndex(program uint32, name *uint8) int32
	GetFragDataLocation(program uint32, name *uint8) int32
	GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32)
	GetFramebufferParameteriv(target uint32, pname uint32, params *int32)
	GetInteger64i_v(target uint32, index uint32, data *int64)
	GetInteger64v(pname uint32, data *int64)
	GetIntegeri_v(target uint32, index uint32, data *int32)
	GetIntegerv(pname uint32, data *int32)
	GetInternalformati64v(target uint32, internalformat uint32, pname uint32, count int32, params *int64)
	GetInternalformativ(target uint32, internalformat uint32, pname uint32, count int32, params *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetMultisamplefv(pname uint32, index uint32, val *float32)
	GetObjectLabel(identifier uint32, name uint32, bufSize int32, length *int32, label *uint8)
	GetObjectPtrLabel(ptr unsafe.Pointer, bufSize int32, length *int32, label *uint8)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetProgramBinary(program uint32, bufSize int32, length *int32, binaryFormat *uint32, binary unsafe.Pointer)
	GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramInterfaceiv(program uint32, programInterface uint32, pname uint32, params *int32)
	GetProgramPipelineInfoLog(pipeline uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramPipelineiv(pipeline uint32, pname uint32, params *int32)
	GetProgramResourceIndex(program uint32, programInterface uint32, name *uint8) uint32
	GetProgramResourceLocation(program uint32, programInterface uint32, name *uint8) int32
	GetProgramResourceLocationIndex(program uint32, programInterface uint32, name *uint8) int32
	GetProgramResourceName(program uint32, programInterface uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetProgramResourceiv(program uint32, programInterface uint32, index uint32, propCount int32, props *uint32, count int32, length *int32, params *int32)
	GetProgramStageiv(program uint32, shadertype uint32, pname uint32, values *int32)
	GetProgramiv(program uint32, pname uint32, params *int32)
	GetQueryIndexediv(target uint32, index uint32, pname uint32, params *int32)
	GetQueryObjecti64v(id uint32, pname uint32, params *int64)
	GetQueryObjectiv(id uint32, pname uint32, params *int32)
	GetQueryObjectui64v(id uint32, pname uint32, params *uint64)
	GetQueryObjectuiv(id uint32, pname uint32, params *uint32)
	GetQueryiv(target uint32, pname uint32, params *int32)
	GetRenderbufferParameteriv(target uint32, pname uint32, params *int32)
	GetSamplerParameterIiv(sampler uint32, pname uint32, params *int32)
	GetSamplerParameterIuiv(sampler uint32, pname uint32, params *uint32)
	GetSamplerParameterfv(sampler uint32, pname uint32, params *float32)
	GetSamplerParameteriv(sampler uint32, pname uint32, params *int32)
	GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8)
	GetShaderPrecisionFormat(shadertype uint32, precisiontype uint32, range_ *int32, precision *int32)
	GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8)
	GetShaderiv(shader uint32, pname uint32, params *int32)
	GetString(name uint32) *uint8
	GetStringi(name uint32, index uint32) *uint8
	GetSubroutineIndex(program uint32, shadertype uint32, name *uint8) uint32
	GetSubroutineUniformLocation(program uint32, shadertype uint32, name *uint8) int32
	GetSynciv(sync GLsync, pname uint32, count int32, length *int32, values *int32)
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterIiv(target uint32, pname uint32, params *int32)
	GetTexParameterIuiv(target uint32, pname uint32, params *uint32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetUniformBlockIndex(program uint32, uniformBlockName *uint8) uint32
	GetUniformIndices(program uint32, uniformCount int32, uniformNames **uint8, uniformIndices *uint32)
	GetUniformLocation(program uint32, name *uint8) int32
	GetUniformSubroutineuiv(shadertype uint32, location int32, params *uint32)
	GetUniformdv(program uint32, location int32, params *float64)
	GetUniformfv(program uint32, location int32, params *float32)
	GetUniformiv(program uint32, location int32, params *int32)
	GetUniformuiv(program uint32, location int32, params *uint32)
	GetVertexAttribIiv(index uint32, pname uint32, params *int32)
	GetVertexAttribIuiv(index uint32, pname uint32, params *uint32)
	GetVertexAttribLdv(index uint32, pname uint32, params *float64)
	GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)
	GetVertexAttribdv(index uint32, pname uint32, params *float64)
	GetVertexAttribfv(index uint32, pname uint32, params *float32)
	GetVertexAttribiv(index uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	InvalidateBufferData(buffer uint32)
	InvalidateBufferSubData(buffer uint32, offset uintptr, length int)
	InvalidateFramebuffer(target uint32, numAttachments int32, attachments *uint32)
	InvalidateSubFramebuffer(target uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32)
	InvalidateTexImage(texture uint32, level int32)
	InvalidateTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32)
	IsBuffer(buffer uint32) bool
	IsEnabled(cap uint32) bool
	IsEnabledi(target uint32, index uint32) bool
	IsFramebuffer(framebuffer uint32) bool
	IsList(list uint32) bool
	IsProgram(program uint32) bool
	IsProgramPipeline(pipeline uint32) bool
	IsQuery(id uint32) bool
	IsRenderbuffer(renderbuffer uint32) bool
	IsSampler(sampler uint32) bool
	IsShader(shader uint32) bool
	IsSync(sync GLsync) bool
	IsTexture(texture uint32) bool
	IsTransformFeedback(id uint32) bool
	IsVertexArray(array uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	LinkProgram(program uint32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapBuffer(target uint32, access uint32) unsafe.Pointer
	MapBufferRange(target uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MemoryBarrier(barriers uint32)
	MinSampleShading(value float32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawArraysIndirect(mode uint32, indirect unsafe.Pointer, drawcount int32, stride int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiDrawElementsBaseVertex(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32)
	MultiDrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer, drawcount int32, stride int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	MultiTexCoordP1ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP1uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP2ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP2uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP3ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP3uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP4ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP4uiv(texture uint32, type_ uint32, coords *uint32)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalP3ui(type_ uint32, coords uint32)
	NormalP3uiv(type_ uint32, coords *uint32)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	ObjectLabel(identifier uint32, name uint32, length int32, label *uint8)
	ObjectPtrLabel(ptr unsafe.Pointer, length int32, label *uint8)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PatchParameterfv(pname uint32, values *float32)
	PatchParameteri(pname uint32, value int32)
	PauseTransformFeedback()
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopDebugGroup()
	PopMatrix()
	PopName()
	PrimitiveRestartIndex(index uint32)
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	ProgramBinary(program uint32, binaryFormat uint32, binary unsafe.Pointer, length int32)
	ProgramParameteri(program uint32, pname uint32, value int32)
	ProgramUniform1d(program uint32, location int32, v0 float64)
	ProgramUniform1dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform1f(program uint32, location int32, v0 float32)
	ProgramUniform1fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform1i(program uint32, location int32, v0 int32)
	ProgramUniform1iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform1ui(program uint32, location int32, v0 uint32)
	ProgramUniform1uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform2d(program uint32, location int32, v0 float64, v1 float64)
	ProgramUniform2dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32)
	ProgramUniform2fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32)
	ProgramUniform2iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32)
	ProgramUniform2uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform3d(program uint32, location int32, v0 float64, v1 float64, v2 float64)
	ProgramUniform3dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32)
	ProgramUniform3fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32)
	ProgramUniform3iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32)
	ProgramUniform3uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform4d(program uint32, location int32, v0 float64, v1 float64, v2 float64, v3 float64)
	ProgramUniform4dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	ProgramUniform4fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	ProgramUniform4iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	ProgramUniform4uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniformMatrix2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProvokingVertex(mode uint32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushDebugGroup(source uint32, id uint32, length int32, message *uint8)
	PushMatrix()
	PushName(name uint32)
	QueryCounter(id uint32, target uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	ReleaseShaderCompiler()
	RenderMode(mode uint32) int32
	RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32)
	RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32)
	ResumeTransformFeedback()
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	SampleMaski(maskNumber uint32, mask uint32)
	SamplerParameterIiv(sampler uint32, pname uint32, param *int32)
	SamplerParameterIuiv(sampler uint32, pname uint32, param *uint32)
	SamplerParameterf(sampler uint32, pname uint32, param float32)
	SamplerParameterfv(sampler uint32, pname uint32, param *float32)
	SamplerParameteri(sampler uint32, pname uint32, param int32)
	SamplerParameteriv(sampler uint32, pname uint32, param *int32)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	ScissorArrayv(first uint32, count int32, v *int32)
	ScissorIndexed(index uint32, left int32, bottom int32, width int32, height int32)
	ScissorIndexedv(index uint32, v *int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorP3ui(type_ uint32, color uint32)
	SecondaryColorP3uiv(type_ uint32, color *uint32)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	ShaderBinary(count int32, shaders *uint32, binaryFormat uint32, binary unsafe.Pointer, length int32)
	ShaderSource(shader uint32, count int32, string **uint8, length *int32)
	ShaderStorageBlockBinding(program uint32, storageBlockIndex uint32, storageBlockBinding uint32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilMaskSeparate(face uint32, mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)
	TexBuffer(target uint32, internalformat uint32, buffer uint32)
	TexBufferRange(target uint32, internalformat uint32, buffer uint32, offset uintptr, size int)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordP1ui(type_ uint32, coords uint32)
	TexCoordP1uiv(type_ uint32, coords *uint32)
	TexCoordP2ui(type_ uint32, coords uint32)
	TexCoordP2uiv(type_ uint32, coords *uint32)
	TexCoordP3ui(type_ uint32, coords uint32)
	TexCoordP3uiv(type_ uint32, coords *uint32)
	TexCoordP4ui(type_ uint32, coords uint32)
	TexCoordP4uiv(type_ uint32, coords *uint32)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TexParameterIiv(target uint32, pname uint32, params *int32)
	TexParameterIuiv(target uint32, pname uint32, params *uint32)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexStorage1D(target uint32, levels int32, internalformat uint32, width int32)
	TexStorage2D(target uint32, levels int32, internalformat uint32, width int32, height int32)
	TexStorage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexStorage3D(target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32)
	TexStorage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureView(texture uint32, target uint32, origtexture uint32, internalformat uint32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32)
	TransformFeedbackVaryings(program uint32, count int32, varyings **uint8, bufferMode uint32)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Uniform1d(location int32, x float64)
	Uniform1dv(location int32, count int32, value *float64)
	Uniform1f(location int32, v0 float32)
	Uniform1fv(location int32, count int32, value *float32)
	Uniform1i(location int32, v0 int32)
	Uniform1iv(location int32, count int32, value *int32)
	Uniform1ui(location int32, v0 uint32)
	Uniform1uiv(location int32, count int32, value *uint32)
	Uniform2d(location int32, x float64, y float64)
	Uniform2dv(location int32, count int32, value *float64)
	Uniform2f(location int32, v0 float32, v1 float32)
	Uniform2fv(location int32, count int32, value *float32)
	Uniform2i(location int32, v0 int32, v1 int32)
	Uniform2iv(location int32, count int32, value *int32)
	Uniform2ui(location int32, v0 uint32, v1 uint32)
	Uniform2uiv(location int32, count int32, value *uint32)
	Uniform3d(location int32, x float64, y float64, z float64)
	Uniform3dv(location int32, count int32, value *float64)
	Uniform3f(location int32, v0 float32, v1 float32, v2 float32)
	Uniform3fv(location int32, count int32, value *float32)
	Uniform3i(location int32, v0 int32, v1 int32, v2 int32)
	Uniform3iv(location int32, count int32, value *int32)
	Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)
	Uniform3uiv(location int32, count int32, value *uint32)
	Uniform4d(location int32, x float64, y float64, z float64, w float64)
	Uniform4dv(location int32, count int32, value *float64)
	Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	Uniform4fv(location int32, count int32, value *float32)
	Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	Uniform4iv(location int32, count int32, value *int32)
	Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	Uniform4uiv(location int32, count int32, value *uint32)
	UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)
	UniformMatrix2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32)
	UniformSubroutinesuiv(shadertype uint32, count int32, indices *uint32)
	UnmapBuffer(target uint32) bool
	UseProgram(program uint32)
	UseProgramStages(pipeline uint32, stages uint32, program uint32)
	ValidateProgram(program uint32)
	ValidateProgramPipeline(pipeline uint32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexAttrib1d(index uint32, x float64)
	VertexAttrib1dv(index uint32, v *float64)
	VertexAttrib1f(index uint32, x float32)
	VertexAttrib1fv(index uint32, v *float32)
	VertexAttrib1s(index uint32, x int16)
	VertexAttrib1sv(index uint32, v *int16)
	VertexAttrib2d(index uint32, x float64, y float64)
	VertexAttrib2dv(index uint32, v *float64)
	VertexAttrib2f(index uint32, x float32, y float32)
	VertexAttrib2fv(index uint32, v *float32)
	VertexAttrib2s(index uint32, x int16, y int16)
	VertexAttrib2sv(index uint32, v *int16)
	VertexAttrib3d(index uint32, x float64, y float64, z float64)
	VertexAttrib3dv(index uint32, v *float64)
	VertexAttrib3f(index uint32, x float32, y float32, z float32)
	VertexAttrib3fv(index uint32, v *float32)
	VertexAttrib3s(index uint32, x int16, y int16, z int16)
	VertexAttrib3sv(index uint32, v *int16)
	VertexAttrib4Nbv(index uint32, v *int8)
	VertexAttrib4Niv(index uint32, v *int32)
	VertexAttrib4Nsv(index uint32, v *int16)
	VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4Nubv(index uint32, v *uint8)
	VertexAttrib4Nuiv(index uint32, v *uint32)
	VertexAttrib4Nusv(index uint32, v *uint16)
	VertexAttrib4bv(index uint32, v *int8)
	VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dv(index uint32, v *float64)
	VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fv(index uint32, v *float32)
	VertexAttrib4iv(index uint32, v *int32)
	VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4sv(index uint32, v *int16)
	VertexAttrib4ubv(index uint32, v *uint8)
	VertexAttrib4uiv(index uint32, v *uint32)
	VertexAttrib4usv(index uint32, v *uint16)
	VertexAttribBinding(attribindex uint32, bindingindex uint32)
	VertexAttribDivisor(index uint32, divisor uint32)
	VertexAttribFormat(attribindex uint32, size int32, type_ uint32, normalized bool, relativeoffset uint32)
	VertexAttribI1i(index uint32, x int32)
	VertexAttribI1iv(index uint32, v *int32)
	VertexAttribI1ui(index uint32, x uint32)
	VertexAttribI1uiv(index uint32, v *uint32)
	VertexAttribI2i(index uint32, x int32, y int32)
	VertexAttribI2iv(index uint32, v *int32)
	VertexAttribI2ui(index uint32, x uint32, y uint32)
	VertexAttribI2uiv(index uint32, v *uint32)
	VertexAttribI3i(index uint32, x int32, y int32, z int32)
	VertexAttribI3iv(index uint32, v *int32)
	VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32)
	VertexAttribI3uiv(index uint32, v *uint32)
	VertexAttribI4bv(index uint32, v *int8)
	VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)
	VertexAttribI4iv(index uint32, v *int32)
	VertexAttribI4sv(index uint32, v *int16)
	VertexAttribI4ubv(index uint32, v *uint8)
	VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)
	VertexAttribI4uiv(index uint32, v *uint32)
	VertexAttribI4usv(index uint32, v *uint16)
	VertexAttribIFormat(attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexAttribIPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribL1d(index uint32, x float64)
	VertexAttribL1dv(index uint32, v *float64)
	VertexAttribL2d(index uint32, x float64, y float64)
	VertexAttribL2dv(index uint32, v *float64)
	VertexAttribL3d(index uint32, x float64, y float64, z float64)
	VertexAttribL3dv(index uint32, v *float64)
	VertexAttribL4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttribL4dv(index uint32, v *float64)
	VertexAttribLFormat(attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexAttribLPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribP1ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP1uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP2ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP2uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP3ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP3uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP4ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP4uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribPointer(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer)
	VertexBindingDivisor(bindingindex uint32, divisor uint32)
	VertexP2ui(type_ uint32, value uint32)
	VertexP2uiv(type_ uint32, value *uint32)
	VertexP3ui(type_ uint32, value uint32)
	VertexP3uiv(type_ uint32, value *uint32)
	VertexP4ui(type_ uint32, value uint32)
	VertexP4uiv(type_ uint32, value *uint32)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	ViewportArrayv(first uint32, count int32, v *float32)
	ViewportIndexedf(index uint32, x float32, y float32, w float32, h float32)
	ViewportIndexedfv(index uint32, v *float32)
	WaitSync(sync GLsync, flags uint32, timeout uint64)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New430(getProcAddr func(name string) unsafe.Pointer) GL430 {
	gl := &lib{
		glAccum:                             getProcAddr("glAccum"),
		glActiveShaderProgram:               getProcAddr("glActiveShaderProgram"),
		glActiveTexture:                     getProcAddr("glActiveTexture"),
		glAlphaFunc:                         getProcAddr("glAlphaFunc"),
		glAreTexturesResident:               getProcAddr("glAreTexturesResident"),
		glArrayElement:                      getProcAddr("glArrayElement"),
		glAttachShader:                      getProcAddr("glAttachShader"),
		glBegin:                             getProcAddr("glBegin"),
		glBeginConditionalRender:            getProcAddr("glBeginConditionalRender"),
		glBeginQuery:                        getProcAddr("glBeginQuery"),
		glBeginQueryIndexed:                 getProcAddr("glBeginQueryIndexed"),
		glBeginTransformFeedback:            getProcAddr("glBeginTransformFeedback"),
		glBindAttribLocation:                getProcAddr("glBindAttribLocation"),
		glBindBuffer:                        getProcAddr("glBindBuffer"),
		glBindBufferBase:                    getProcAddr("glBindBufferBase"),
		glBindBufferRange:                   getProcAddr("glBindBufferRange"),
		glBindFragDataLocation:              getProcAddr("glBindFragDataLocation"),
		glBindFragDataLocationIndexed:       getProcAddr("glBindFragDataLocationIndexed"),
		glBindFramebuffer:                   getProcAddr("glBindFramebuffer"),
		glBindImageTexture:                  getProcAddr("glBindImageTexture"),
		glBindProgramPipeline:               getProcAddr("glBindProgramPipeline"),
		glBindRenderbuffer:                  getProcAddr("glBindRenderbuffer"),
		glBindSampler:                       getProcAddr("glBindSampler"),
		glBindTexture:                       getProcAddr("glBindTexture"),
		glBindTransformFeedback:             getProcAddr("glBindTransformFeedback"),
		glBindVertexArray:                   getProcAddr("glBindVertexArray"),
		glBindVertexBuffer:                  getProcAddr("glBindVertexBuffer"),
		glBitmap:                            getProcAddr("glBitmap"),
		glBlendColor:                        getProcAddr("glBlendColor"),
		glBlendEquation:                     getProcAddr("glBlendEquation"),
		glBlendEquationSeparate:             getProcAddr("glBlendEquationSeparate"),
		glBlendEquationSeparatei:            getProcAddr("glBlendEquationSeparatei"),
		glBlendEquationi:                    getProcAddr("glBlendEquationi"),
		glBlendFunc:                         getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:                 getProcAddr("glBlendFuncSeparate"),
		glBlendFuncSeparatei:                getProcAddr("glBlendFuncSeparatei"),
		glBlendFunci:                        getProcAddr("glBlendFunci"),
		glBlitFramebuffer:                   getProcAddr("glBlitFramebuffer"),
		glBufferData:                        getProcAddr("glBufferData"),
		glBufferSubData:                     getProcAddr("glBufferSubData"),
		glCallList:                          getProcAddr("glCallList"),
		glCallLists:                         getProcAddr("glCallLists"),
		glCheckFramebufferStatus:            getProcAddr("glCheckFramebufferStatus"),
		glClampColor:                        getProcAddr("glClampColor"),
		glClear:                             getProcAddr("glClear"),
		glClearAccum:                        getProcAddr("glClearAccum"),
		glClearBufferData:                   getProcAddr("glClearBufferData"),
		glClearBufferSubData:                getProcAddr("glClearBufferSubData"),
		glClearBufferfi:                     getProcAddr("glClearBufferfi"),
		glClearBufferfv:                     getProcAddr("glClearBufferfv"),
		glClearBufferiv:                     getProcAddr("glClearBufferiv"),
		glClearBufferuiv:                    getProcAddr("glClearBufferuiv"),
		glClearColor:                        getProcAddr("glClearColor"),
		glClearDepth:                        getProcAddr("glClearDepth"),
		glClearDepthf:                       getProcAddr("glClearDepthf"),
		glClearIndex:                        getProcAddr("glClearIndex"),
		glClearStencil:                      getProcAddr("glClearStencil"),
		glClientActiveTexture:               getProcAddr("glClientActiveTexture"),
		glClientWaitSync:                    getProcAddr("glClientWaitSync"),
		glClipPlane:                         getProcAddr("glClipPlane"),
		glColor3b:                           getProcAddr("glColor3b"),
		glColor3bv:                          getProcAddr("glColor3bv"),
		glColor3d:                           getProcAddr("glColor3d"),
		glColor3dv:                          getProcAddr("glColor3dv"),
		glColor3f:                           getProcAddr("glColor3f"),
		glColor3fv:                          getProcAddr("glColor3fv"),
		glColor3i:                           getProcAddr("glColor3i"),
		glColor3iv:                          getProcAddr("glColor3iv"),
		glColor3s:                           getProcAddr("glColor3s"),
		glColor3sv:                          getProcAddr("glColor3sv"),
		glColor3ub:                          getProcAddr("glColor3ub"),
		glColor3ubv:                         getProcAddr("glColor3ubv"),
		glColor3ui:                          getProcAddr("glColor3ui"),
		glColor3uiv:                         getProcAddr("glColor3uiv"),
		glColor3us:                          getProcAddr("glColor3us"),
		glColor3usv:                         getProcAddr("glColor3usv"),
		glColor4b:                           getProcAddr("glColor4b"),
		glColor4bv:                          getProcAddr("glColor4bv"),
		glColor4d:                           getProcAddr("glColor4d"),
		glColor4dv:                          getProcAddr("glColor4dv"),
		glColor4f:                           getProcAddr("glColor4f"),
		glColor4fv:                          getProcAddr("glColor4fv"),
		glColor4i:                           getProcAddr("glColor4i"),
		glColor4iv:                          getProcAddr("glColor4iv"),
		glColor4s:                           getProcAddr("glColor4s"),
		glColor4sv:                          getProcAddr("glColor4sv"),
		glColor4ub:                          getProcAddr("glColor4ub"),
		glColor4ubv:                         getProcAddr("glColor4ubv"),
		glColor4ui:                          getProcAddr("glColor4ui"),
		glColor4uiv:                         getProcAddr("glColor4uiv"),
		glColor4us:                          getProcAddr("glColor4us"),
		glColor4usv:                         getProcAddr("glColor4usv"),
		glColorMask:                         getProcAddr("glColorMask"),
		glColorMaski:                        getProcAddr("glColorMaski"),
		glColorMaterial:                     getProcAddr("glColorMaterial"),
		glColorP3ui:                         getProcAddr("glColorP3ui"),
		glColorP3uiv:                        getProcAddr("glColorP3uiv"),
		glColorP4ui:                         getProcAddr("glColorP4ui"),
		glColorP4uiv:                        getProcAddr("glColorP4uiv"),
		glColorPointer:                      getProcAddr("glColorPointer"),
		glCompileShader:                     getProcAddr("glCompileShader"),
		glCompressedTexImage1D:              getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:              getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:              getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D:           getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D:           getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D:           getProcAddr("glCompressedTexSubImage3D"),
		glCopyBufferSubData:                 getProcAddr("glCopyBufferSubData"),
		glCopyImageSubData:                  getProcAddr("glCopyImageSubData"),
		glCopyPixels:                        getProcAddr("glCopyPixels"),
		glCopyTexImage1D:                    getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:                    getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:                 getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:                 getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:                 getProcAddr("glCopyTexSubImage3D"),
		glCreateProgram:                     getProcAddr("glCreateProgram"),
		glCreateShader:                      getProcAddr("glCreateShader"),
		glCreateShaderProgramv:              getProcAddr("glCreateShaderProgramv"),
		glCullFace:                          getProcAddr("glCullFace"),
		glDebugMessageCallback:              getProcAddr("glDebugMessageCallback"),
		glDebugMessageControl:               getProcAddr("glDebugMessageControl"),
		glDebugMessageInsert:                getProcAddr("glDebugMessageInsert"),
		glDeleteBuffers:                     getProcAddr("glDeleteBuffers"),
		glDeleteFramebuffers:                getProcAddr("glDeleteFramebuffers"),
		glDeleteLists:                       getProcAddr("glDeleteLists"),
		glDeleteProgram:                     getProcAddr("glDeleteProgram"),
		glDeleteProgramPipelines:            getProcAddr("glDeleteProgramPipelines"),
		glDeleteQueries:                     getProcAddr("glDeleteQueries"),
		glDeleteRenderbuffers:               getProcAddr("glDeleteRenderbuffers"),
		glDeleteSamplers:                    getProcAddr("glDeleteSamplers"),
		glDeleteShader:                      getProcAddr("glDeleteShader"),
		glDeleteSync:                        getProcAddr("glDeleteSync"),
		glDeleteTextures:                    getProcAddr("glDeleteTextures"),
		glDeleteTransformFeedbacks:          getProcAddr("glDeleteTransformFeedbacks"),
		glDeleteVertexArrays:                getProcAddr("glDeleteVertexArrays"),
		glDepthFunc:                         getProcAddr("glDepthFunc"),
		glDepthMask:                         getProcAddr("glDepthMask"),
		glDepthRange:                        getProcAddr("glDepthRange"),
		glDepthRangeArrayv:                  getProcAddr("glDepthRangeArrayv"),
		glDepthRangeIndexed:                 getProcAddr("glDepthRangeIndexed"),
		glDepthRangef:                       getProcAddr("glDepthRangef"),
		glDetachShader:                      getProcAddr("glDetachShader"),
		glDisable:                           getProcAddr("glDisable"),
		glDisableClientState:                getProcAddr("glDisableClientState"),
		glDisableVertexAttribArray:          getProcAddr("glDisableVertexAttribArray"),
		glDisablei:                          getProcAddr("glDisablei"),
		glDispatchCompute:                   getProcAddr("glDispatchCompute"),
		glDispatchComputeIndirect:           getProcAddr("glDispatchComputeIndirect"),
		glDrawArrays:                        getProcAddr("glDrawArrays"),
		glDrawArraysIndirect:                getProcAddr("glDrawArraysIndirect"),
		glDrawArraysInstanced:               getProcAddr("glDrawArraysInstanced"),
		glDrawArraysInstancedBaseInstance:   getProcAddr("glDrawArraysInstancedBaseInstance"),
		glDrawBuffer:                        getProcAddr("glDrawBuffer"),
		glDrawBuffers:                       getProcAddr("glDrawBuffers"),
		glDrawElements:                      getProcAddr("glDrawElements"),
		glDrawElementsBaseVertex:            getProcAddr("glDrawElementsBaseVertex"),
		glDrawElementsIndirect:              getProcAddr("glDrawElementsIndirect"),
		glDrawElementsInstanced:             getProcAddr("glDrawElementsInstanced"),
		glDrawElementsInstancedBaseInstance: getProcAddr("glDrawElementsInstancedBaseInstance"),
		glDrawElementsInstancedBaseVertex:   getProcAddr("glDrawElementsInstancedBaseVertex"),
		glDrawElementsInstancedBaseVertexBaseInstance: getProcAddr("glDrawElementsInstancedBaseVertexBaseInstance"),
		glDrawPixels:                           getProcAddr("glDrawPixels"),
		glDrawRangeElements:                    getProcAddr("glDrawRangeElements"),
		glDrawRangeElementsBaseVertex:          getProcAddr("glDrawRangeElementsBaseVertex"),
		glDrawTransformFeedback:                getProcAddr("glDrawTransformFeedback"),
		glDrawTransformFeedbackInstanced:       getProcAddr("glDrawTransformFeedbackInstanced"),
		glDrawTransformFeedbackStream:          getProcAddr("glDrawTransformFeedbackStream"),
		glDrawTransformFeedbackStreamInstanced: getProcAddr("glDrawTransformFeedbackStreamInstanced"),
		glEdgeFlag:                             getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:                      getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:                            getProcAddr("glEdgeFlagv"),
		glEnable:                               getProcAddr("glEnable"),
		glEnableClientState:                    getProcAddr("glEnableClientState"),
		glEnableVertexAttribArray:              getProcAddr("glEnableVertexAttribArray"),
		glEnablei:                              getProcAddr("glEnablei"),
		glEnd:                                  getProcAddr("glEnd"),
		glEndConditionalRender:                 getProcAddr("glEndConditionalRender"),
		glEndList:                              getProcAddr("glEndList"),
		glEndQuery:                             getProcAddr("glEndQuery"),
		glEndQueryIndexed:                      getProcAddr("glEndQueryIndexed"),
		glEndTransformFeedback:                 getProcAddr("glEndTransformFeedback"),
		glEvalCoord1d:                          getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:                         getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:                          getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:                         getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:                          getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:                         getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:                          getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:                         getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:                            getProcAddr("glEvalMesh1"),
		glEvalMesh2:                            getProcAddr("glEvalMesh2"),
		glEvalPoint1:                           getProcAddr("glEvalPoint1"),
		glEvalPoint2:                           getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:                       getProcAddr("glFeedbackBuffer"),
		glFenceSync:                            getProcAddr("glFenceSync"),
		glFinish:                               getProcAddr("glFinish"),
		glFlush:                                getProcAddr("glFlush"),
		glFlushMappedBufferRange:               getProcAddr("glFlushMappedBufferRange"),
		glFogCoordPointer:                      getProcAddr("glFogCoordPointer"),
		glFogCoordd:                            getProcAddr("glFogCoordd"),
		glFogCoorddv:                           getProcAddr("glFogCoorddv"),
		glFogCoordf:                            getProcAddr("glFogCoordf"),
		glFogCoordfv:                           getProcAddr("glFogCoordfv"),
		glFogf:                                 getProcAddr("glFogf"),
		glFogfv:                                getProcAddr("glFogfv"),
		glFogi:                                 getProcAddr("glFogi"),
		glFogiv:                                getProcAddr("glFogiv"),
		glFramebufferParameteri:                getProcAddr("glFramebufferParameteri"),
		glFramebufferRenderbuffer:              getProcAddr("glFramebufferRenderbuffer"),
		glFramebufferTexture:                   getProcAddr("glFramebufferTexture"),
		glFramebufferTexture1D:                 getProcAddr("glFramebufferTexture1D"),
		glFramebufferTexture2D:                 getProcAddr("glFramebufferTexture2D"),
		glFramebufferTexture3D:                 getProcAddr("glFramebufferTexture3D"),
		glFramebufferTextureLayer:              getProcAddr("glFramebufferTextureLayer"),
		glFrontFace:                            getProcAddr("glFrontFace"),
		glFrustum:                              getProcAddr("glFrustum"),
		glGenBuffers:                           getProcAddr("glGenBuffers"),
		glGenFramebuffers:                      getProcAddr("glGenFramebuffers"),
		glGenLists:                             getProcAddr("glGenLists"),
		glGenProgramPipelines:                  getProcAddr("glGenProgramPipelines"),
		glGenQueries:                           getProcAddr("glGenQueries"),
		glGenRenderbuffers:                     getProcAddr("glGenRenderbuffers"),
		glGenSamplers:                          getProcAddr("glGenSamplers"),
		glGenTextures:                          getProcAddr("glGenTextures"),
		glGenTransformFeedbacks:                getProcAddr("glGenTransformFeedbacks"),
		glGenVertexArrays:                      getProcAddr("glGenVertexArrays"),
		glGenerateMipmap:                       getProcAddr("glGenerateMipmap"),
		glGetActiveAtomicCounterBufferiv:       getProcAddr("glGetActiveAtomicCounterBufferiv"),
		glGetActiveAttrib:                      getProcAddr("glGetActiveAttrib"),
		glGetActiveSubroutineName:              getProcAddr("glGetActiveSubroutineName"),
		glGetActiveSubroutineUniformName:       getProcAddr("glGetActiveSubroutineUniformName"),
		glGetActiveSubroutineUniformiv:         getProcAddr("glGetActiveSubroutineUniformiv"),
		glGetActiveUniform:                     getProcAddr("glGetActiveUniform"),
		glGetActiveUniformBlockName:            getProcAddr("glGetActiveUniformBlockName"),
		glGetActiveUniformBlockiv:              getProcAddr("glGetActiveUniformBlockiv"),
		glGetActiveUniformName:                 getProcAddr("glGetActiveUniformName"),
		glGetActiveUniformsiv:                  getProcAddr("glGetActiveUniformsiv"),
		glGetAttachedShaders:                   getProcAddr("glGetAttachedShaders"),
		glGetAttribLocation:                    getProcAddr("glGetAttribLocation"),
		glGetBooleani_v:                        getProcAddr("glGetBooleani_v"),
		glGetBooleanv:                          getProcAddr("glGetBooleanv"),
		glGetBufferParameteri64v:               getProcAddr("glGetBufferParameteri64v"),
		glGetBufferParameteriv:                 getProcAddr("glGetBufferParameteriv"),
		glGetBufferPointerv:                    getProcAddr("glGetBufferPointerv"),
		glGetBufferSubData:                     getProcAddr("glGetBufferSubData"),
		glGetClipPlane:                         getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:                getProcAddr("glGetCompressedTexImage"),
		glGetDebugMessageLog:                   getProcAddr("glGetDebugMessageLog"),
		glGetDoublei_v:                         getProcAddr("glGetDoublei_v"),
		glGetDoublev:                           getProcAddr("glGetDoublev"),
		glGetError:                             getProcAddr("glGetError"),
		glGetFloati_v:                          getProcAddr("glGetFloati_v"),
		glGetFloatv:                            getProcAddr("glGetFloatv"),
		glGetFragDataIndex:                     getProcAddr("glGetFragDataIndex"),
		glGetFragDataLocation:                  getProcAddr("glGetFragDataLocation"),
		glGetFramebufferAttachmentParameteriv:  getProcAddr("glGetFramebufferAttachmentParameteriv"),
		glGetFramebufferParameteriv:            getProcAddr("glGetFramebufferParameteriv"),
		glGetInteger64i_v:                      getProcAddr("glGetInteger64i_v"),
		glGetInteger64v:                        getProcAddr("glGetInteger64v"),
		glGetIntegeri_v:                        getProcAddr("glGetIntegeri_v"),
		glGetIntegerv:                          getProcAddr("glGetIntegerv"),
		glGetInternalformati64v:                getProcAddr("glGetInternalformati64v"),
		glGetInternalformativ:                  getProcAddr("glGetInternalformativ"),
		glGetLightfv:                           getProcAddr("glGetLightfv"),
		glGetLightiv:                           getProcAddr("glGetLightiv"),
		glGetMapdv:                             getProcAddr("glGetMapdv"),
		glGetMapfv:                             getProcAddr("glGetMapfv"),
		glGetMapiv:                             getProcAddr("glGetMapiv"),
		glGetMaterialfv:                        getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:                        getProcAddr("glGetMaterialiv"),
		glGetMultisamplefv:                     getProcAddr("glGetMultisamplefv"),
		glGetObjectLabel:                       getProcAddr("glGetObjectLabel"),
		glGetObjectPtrLabel:                    getProcAddr("glGetObjectPtrLabel"),
		glGetPixelMapfv:                        getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:                       getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:                       getProcAddr("glGetPixelMapusv"),
		glGetPointerv:                          getProcAddr("glGetPointerv"),
		glGetPolygonStipple:                    getProcAddr("glGetPolygonStipple"),
		glGetProgramBinary:                     getProcAddr("glGetProgramBinary"),
		glGetProgramInfoLog:                    getProcAddr("glGetProgramInfoLog"),
		glGetProgramInterfaceiv:                getProcAddr("glGetProgramInterfaceiv"),
		glGetProgramPipelineInfoLog:            getProcAddr("glGetProgramPipelineInfoLog"),
		glGetProgramPipelineiv:                 getProcAddr("glGetProgramPipelineiv"),
		glGetProgramResourceIndex:              getProcAddr("glGetProgramResourceIndex"),
		glGetProgramResourceLocation:           getProcAddr("glGetProgramResourceLocation"),
		glGetProgramResourceLocationIndex:      getProcAddr("glGetProgramResourceLocationIndex"),
		glGetProgramResourceName:               getProcAddr("glGetProgramResourceName"),
		glGetProgramResourceiv:                 getProcAddr("glGetProgramResourceiv"),
		glGetProgramStageiv:                    getProcAddr("glGetProgramStageiv"),
		glGetProgramiv:                         getProcAddr("glGetProgramiv"),
		glGetQueryIndexediv:                    getProcAddr("glGetQueryIndexediv"),
		glGetQueryObjecti64v:                   getProcAddr("glGetQueryObjecti64v"),
		glGetQueryObjectiv:                     getProcAddr("glGetQueryObjectiv"),
		glGetQueryObjectui64v:                  getProcAddr("glGetQueryObjectui64v"),
		glGetQueryObjectuiv:                    getProcAddr("glGetQueryObjectuiv"),
		glGetQueryiv:                           getProcAddr("glGetQueryiv"),
		glGetRenderbufferParameteriv:           getProcAddr("glGetRenderbufferParameteriv"),
		glGetSamplerParameterIiv:               getProcAddr("glGetSamplerParameterIiv"),
		glGetSamplerParameterIuiv:              getProcAddr("glGetSamplerParameterIuiv"),
		glGetSamplerParameterfv:                getProcAddr("glGetSamplerParameterfv"),
		glGetSamplerParameteriv:                getProcAddr("glGetSamplerParameteriv"),
		glGetShaderInfoLog:                     getProcAddr("glGetShaderInfoLog"),
		glGetShaderPrecisionFormat:             getProcAddr("glGetShaderPrecisionFormat"),
		glGetShaderSource:                      getProcAddr("glGetShaderSource"),
		glGetShaderiv:                          getProcAddr("glGetShaderiv"),
		glGetString:                            getProcAddr("glGetString"),
		glGetStringi:                           getProcAddr("glGetStringi"),
		glGetSubroutineIndex:                   getProcAddr("glGetSubroutineIndex"),
		glGetSubroutineUniformLocation:         getProcAddr("glGetSubroutineUniformLocation"),
		glGetSynciv:                            getProcAddr("glGetSynciv"),
		glGetTexEnvfv:                          getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:                          getProcAddr("glGetTexEnviv"),
		glGetTexGendv:                          getProcAddr("glGetTexGendv"),
		glGetTexGenfv:                          getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:                          getProcAddr("glGetTexGeniv"),
		glGetTexImage:                          getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:               getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:               getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterIiv:                   getProcAddr("glGetTexParameterIiv"),
		glGetTexParameterIuiv:                  getProcAddr("glGetTexParameterIuiv"),
		glGetTexParameterfv:                    getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:                    getProcAddr("glGetTexParameteriv"),
		glGetTransformFeedbackVarying:          getProcAddr("glGetTransformFeedbackVarying"),
		glGetUniformBlockIndex:                 getProcAddr("glGetUniformBlockIndex"),
		glGetUniformIndices:                    getProcAddr("glGetUniformIndices"),
		glGetUniformLocation:                   getProcAddr("glGetUniformLocation"),
		glGetUniformSubroutineuiv:              getProcAddr("glGetUniformSubroutineuiv"),
		glGetUniformdv:                         getProcAddr("glGetUniformdv"),
		glGetUniformfv:                         getProcAddr("glGetUniformfv"),
		glGetUniformiv:                         getProcAddr("glGetUniformiv"),
		glGetUniformuiv:                        getProcAddr("glGetUniformuiv"),
		glGetVertexAttribIiv:                   getProcAddr("glGetVertexAttribIiv"),
		glGetVertexAttribIuiv:                  getProcAddr("glGetVertexAttribIuiv"),
		glGetVertexAttribLdv:                   getProcAddr("glGetVertexAttribLdv"),
		glGetVertexAttribPointerv:              getProcAddr("glGetVertexAttribPointerv"),
		glGetVertexAttribdv:                    getProcAddr("glGetVertexAttribdv"),
		glGetVertexAttribfv:                    getProcAddr("glGetVertexAttribfv"),
		glGetVertexAttribiv:                    getProcAddr("glGetVertexAttribiv"),
		glHint:                                 getProcAddr("glHint"),
		glIndexMask:                            getProcAddr("glIndexMask"),
		glIndexPointer:                         getProcAddr("glIndexPointer"),
		glIndexd:                               getProcAddr("glIndexd"),
		glIndexdv:                              getProcAddr("glIndexdv"),
		glIndexf:                               getProcAddr("glIndexf"),
		glIndexfv:                              getProcAddr("glIndexfv"),
		glIndexi:                               getProcAddr("glIndexi"),
		glIndexiv:                              getProcAddr("glIndexiv"),
		glIndexs:                               getProcAddr("glIndexs"),
		glIndexsv:                              getProcAddr("glIndexsv"),
		glIndexub:                              getProcAddr("glIndexub"),
		glIndexubv:                             getProcAddr("glIndexubv"),
		glInitNames:                            getProcAddr("glInitNames"),
		glInterleavedArrays:                    getProcAddr("glInterleavedArrays"),
		glInvalidateBufferData:                 getProcAddr("glInvalidateBufferData"),
		glInvalidateBufferSubData:              getProcAddr("glInvalidateBufferSubData"),
		glInvalidateFramebuffer:                getProcAddr("glInvalidateFramebuffer"),
		glInvalidateSubFramebuffer:             getProcAddr("glInvalidateSubFramebuffer"),
		glInvalidateTexImage:                   getProcAddr("glInvalidateTexImage"),
		glInvalidateTexSubImage:                getProcAddr("glInvalidateTexSubImage"),
		glIsBuffer:                             getProcAddr("glIsBuffer"),
		glIsEnabled:                            getProcAddr("glIsEnabled"),
		glIsEnabledi:                           getProcAddr("glIsEnabledi"),
		glIsFramebuffer:                        getProcAddr("glIsFramebuffer"),
		glIsList:                               getProcAddr("glIsList"),
		glIsProgram:                            getProcAddr("glIsProgram"),
		glIsProgramPipeline:                    getProcAddr("glIsProgramPipeline"),
		glIsQuery:                              getProcAddr("glIsQuery"),
		glIsRenderbuffer:                       getProcAddr("glIsRenderbuffer"),
		glIsSampler:                            getProcAddr("glIsSampler"),
		glIsShader:                             getProcAddr("glIsShader"),
		glIsSync:                               getProcAddr("glIsSync"),
		glIsTexture:                            getProcAddr("glIsTexture"),
		glIsTransformFeedback:                  getProcAddr("glIsTransformFeedback"),
		glIsVertexArray:                        getProcAddr("glIsVertexArray"),
		glLightModelf:                          getProcAddr("glLightModelf"),
		glLightModelfv:                         getProcAddr("glLightModelfv"),
		glLightModeli:                          getProcAddr("glLightModeli"),
		glLightModeliv:                         getProcAddr("glLightModeliv"),
		glLightf:                               getProcAddr("glLightf"),
		glLightfv:                              getProcAddr("glLightfv"),
		glLighti:                               getProcAddr("glLighti"),
		glLightiv:                              getProcAddr("glLightiv"),
		glLineStipple:                          getProcAddr("glLineStipple"),
		glLineWidth:                            getProcAddr("glLineWidth"),
		glLinkProgram:                          getProcAddr("glLinkProgram"),
		glListBase:                             getProcAddr("glListBase"),
		glLoadIdentity:                         getProcAddr("glLoadIdentity"),
		glLoadMatrixd:                          getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:                          getProcAddr("glLoadMatrixf"),
		glLoadName:                             getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:                 getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:                 getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                              getProcAddr("glLogicOp"),
		glMap1d:                                getProcAddr("glMap1d"),
		glMap1f:                                getProcAddr("glMap1f"),
		glMap2d:                                getProcAddr("glMap2d"),
		glMap2f:                                getProcAddr("glMap2f"),
		glMapBuffer:                            getProcAddr("glMapBuffer"),
		glMapBufferRange:                       getProcAddr("glMapBufferRange"),
		glMapGrid1d:                            getProcAddr("glMapGrid1d"),
		glMapGrid1f:                            getProcAddr("glMapGrid1f"),
		glMapGrid2d:                            getProcAddr("glMapGrid2d"),
		glMapGrid2f:                            getProcAddr("glMapGrid2f"),
		glMaterialf:                            getProcAddr("glMaterialf"),
		glMaterialfv:                           getProcAddr("glMaterialfv"),
		glMateriali:                            getProcAddr("glMateriali"),
		glMaterialiv:                           getProcAddr("glMaterialiv"),
		glMatrixMode:                           getProcAddr("glMatrixMode"),
		glMemoryBarrier:                        getProcAddr("glMemoryBarrier"),
		glMinSampleShading:                     getProcAddr("glMinSampleShading"),
		glMultMatrixd:                          getProcAddr("glMultMatrixd"),
		glMultMatrixf:                          getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:                 getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:                 getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:                      getProcAddr("glMultiDrawArrays"),
		glMultiDrawArraysIndirect:              getProcAddr("glMultiDrawArraysIndirect"),
		glMultiDrawElements:                    getProcAddr("glMultiDrawElements"),
		glMultiDrawElementsBaseVertex:          getProcAddr("glMultiDrawElementsBaseVertex"),
		glMultiDrawElementsIndirect:            getProcAddr("glMultiDrawElementsIndirect"),
		glMultiTexCoord1d:                      getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:                     getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:                      getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:                     getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:                      getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:                     getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:                      getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:                     getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:                      getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:                     getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:                      getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:                     getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:                      getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:                     getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:                      getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:                     getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:                      getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:                     getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:                      getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:                     getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:                      getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:                     getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:                      getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:                     getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:                      getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:                     getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:                      getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:                     getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:                      getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:                     getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:                      getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:                     getProcAddr("glMultiTexCoord4sv"),
		glMultiTexCoordP1ui:                    getProcAddr("glMultiTexCoordP1ui"),
		glMultiTexCoordP1uiv:                   getProcAddr("glMultiTexCoordP1uiv"),
		glMultiTexCoordP2ui:                    getProcAddr("glMultiTexCoordP2ui"),
		glMultiTexCoordP2uiv:                   getProcAddr("glMultiTexCoordP2uiv"),
		glMultiTexCoordP3ui:                    getProcAddr("glMultiTexCoordP3ui"),
		glMultiTexCoordP3uiv:                   getProcAddr("glMultiTexCoordP3uiv"),
		glMultiTexCoordP4ui:                    getProcAddr("glMultiTexCoordP4ui"),
		glMultiTexCoordP4uiv:                   getProcAddr("glMultiTexCoordP4uiv"),
		glNewList:                              getProcAddr("glNewList"),
		glNormal3b:                             getProcAddr("glNormal3b"),
		glNormal3bv:                            getProcAddr("glNormal3bv"),
		glNormal3d:                             getProcAddr("glNormal3d"),
		glNormal3dv:                            getProcAddr("glNormal3dv"),
		glNormal3f:                             getProcAddr("glNormal3f"),
		glNormal3fv:                            getProcAddr("glNormal3fv"),
		glNormal3i:                             getProcAddr("glNormal3i"),
		glNormal3iv:                            getProcAddr("glNormal3iv"),
		glNormal3s:                             getProcAddr("glNormal3s"),
		glNormal3sv:                            getProcAddr("glNormal3sv"),
		glNormalP3ui:                           getProcAddr("glNormalP3ui"),
		glNormalP3uiv:                          getProcAddr("glNormalP3uiv"),
		glNormalPointer:                        getProcAddr("glNormalPointer"),
		glObjectLabel:                          getProcAddr("glObjectLabel"),
		glObjectPtrLabel:                       getProcAddr("glObjectPtrLabel"),
		glOrtho:                                getProcAddr("glOrtho"),
		glPassThrough:                          getProcAddr("glPassThrough"),
		glPatchParameterfv:                     getProcAddr("glPatchParameterfv"),
		glPatchParameteri:                      getProcAddr("glPatchParameteri"),
		glPauseTransformFeedback:               getProcAddr("glPauseTransformFeedback"),
		glPixelMapfv:                           getProcAddr("glPixelMapfv"),
		glPixelMapuiv:                          getProcAddr("glPixelMapuiv"),
		glPixelMapusv:                          getProcAddr("glPixelMapusv"),
		glPixelStoref:                          getProcAddr("glPixelStoref"),
		glPixelStorei:                          getProcAddr("glPixelStorei"),
		glPixelTransferf:                       getProcAddr("glPixelTransferf"),
		glPixelTransferi:                       getProcAddr("glPixelTransferi"),
		glPixelZoom:                            getProcAddr("glPixelZoom"),
		glPointParameterf:                      getProcAddr("glPointParameterf"),
		glPointParameterfv:                     getProcAddr("glPointParameterfv"),
		glPointParameteri:                      getProcAddr("glPointParameteri"),
		glPointParameteriv:                     getProcAddr("glPointParameteriv"),
		glPointSize:                            getProcAddr("glPointSize"),
		glPolygonMode:                          getProcAddr("glPolygonMode"),
		glPolygonOffset:                        getProcAddr("glPolygonOffset"),
		glPolygonStipple:                       getProcAddr("glPolygonStipple"),
		glPopAttrib:                            getProcAddr("glPopAttrib"),
		glPopClientAttrib:                      getProcAddr("glPopClientAttrib"),
		glPopDebugGroup:                        getProcAddr("glPopDebugGroup"),
		glPopMatrix:                            getProcAddr("glPopMatrix"),
		glPopName:                              getProcAddr("glPopName"),
		glPrimitiveRestartIndex:                getProcAddr("glPrimitiveRestartIndex"),
		glPrioritizeTextures:                   getProcAddr("glPrioritizeTextures"),
		glProgramBinary:                        getProcAddr("glProgramBinary"),
		glProgramParameteri:                    getProcAddr("glProgramParameteri"),
		glProgramUniform1d:                     getProcAddr("glProgramUniform1d"),
		glProgramUniform1dv:                    getProcAddr("glProgramUniform1dv"),
		glProgramUniform1f:                     getProcAddr("glProgramUniform1f"),
		glProgramUniform1fv:                    getProcAddr("glProgramUniform1fv"),
		glProgramUniform1i:                     getProcAddr("glProgramUniform1i"),
		glProgramUniform1iv:                    getProcAddr("glProgramUniform1iv"),
		glProgramUniform1ui:                    getProcAddr("glProgramUniform1ui"),
		glProgramUniform1uiv:                   getProcAddr("glProgramUniform1uiv"),
		glProgramUniform2d:                     getProcAddr("glProgramUniform2d"),
		glProgramUniform2dv:                    getProcAddr("glProgramUniform2dv"),
		glProgramUniform2f:                     getProcAddr("glProgramUniform2f"),
		glProgramUniform2fv:                    getProcAddr("glProgramUniform2fv"),
		glProgramUniform2i:                     getProcAddr("glProgramUniform2i"),
		glProgramUniform2iv:                    getProcAddr("glProgramUniform2iv"),
		glProgramUniform2ui:                    getProcAddr("glProgramUniform2ui"),
		glProgramUniform2uiv:                   getProcAddr("glProgramUniform2uiv"),
		glProgramUniform3d:                     getProcAddr("glProgramUniform3d"),
		glProgramUniform3dv:                    getProcAddr("glProgramUniform3dv"),
		glProgramUniform3f:                     getProcAddr("glProgramUniform3f"),
		glProgramUniform3fv:                    getProcAddr("glProgramUniform3fv"),
		glProgramUniform3i:                     getProcAddr("glProgramUniform3i"),
		glProgramUniform3iv:                    getProcAddr("glProgramUniform3iv"),
		glProgramUniform3ui:                    getProcAddr("glProgramUniform3ui"),
		glProgramUniform3uiv:                   getProcAddr("glProgramUniform3uiv"),
		glProgramUniform4d:                     getProcAddr("glProgramUniform4d"),
		glProgramUniform4dv:                    getProcAddr("glProgramUniform4dv"),
		glProgramUniform4f:                     getProcAddr("glProgramUniform4f"),
		glProgramUniform4fv:                    getProcAddr("glProgramUniform4fv"),
		glProgramUniform4i:                     getProcAddr("glProgramUniform4i"),
		glProgramUniform4iv:                    getProcAddr("glProgramUniform4iv"),
		glProgramUniform4ui:                    getProcAddr("glProgramUniform4ui"),
		glProgramUniform4uiv:                   getProcAddr("glProgramUniform4uiv"),
		glProgramUniformMatrix2dv:              getProcAddr("glProgramUniformMatrix2dv"),
		glProgramUniformMatrix2fv:              getProcAddr("glProgramUniformMatrix2fv"),
		glProgramUniformMatrix2x3dv:            getProcAddr("glProgramUniformMatrix2x3dv"),
		glProgramUniformMatrix2x3fv:            getProcAddr("glProgramUniformMatrix2x3fv"),
		glProgramUniformMatrix2x4dv:            getProcAddr("glProgramUniformMatrix2x4dv"),
		glProgramUniformMatrix2x4fv:            getProcAddr("glProgramUniformMatrix2x4fv"),
		glProgramUniformMatrix3dv:              getProcAddr("glProgramUniformMatrix3dv"),
		glProgramUniformMatrix3fv:              getProcAddr("glProgramUniformMatrix3fv"),
		glProgramUniformMatrix3x2dv:            getProcAddr("glProgramUniformMatrix3x2dv"),
		glProgramUniformMatrix3x2fv:            getProcAddr("glProgramUniformMatrix3x2fv"),
		glProgramUniformMatrix3x4dv:            getProcAddr("glProgramUniformMatrix3x4dv"),
		glProgramUniformMatrix3x4fv:            getProcAddr("glProgramUniformMatrix3x4fv"),
		glProgramUniformMatrix4dv:              getProcAddr("glProgramUniformMatrix4dv"),
		glProgramUniformMatrix4fv:              getProcAddr("glProgramUniformMatrix4fv"),
		glProgramUniformMatrix4x2dv:            getProcAddr("glProgramUniformMatrix4x2dv"),
		glProgramUniformMatrix4x2fv:            getProcAddr("glProgramUniformMatrix4x2fv"),
		glProgramUniformMatrix4x3dv:            getProcAddr("glProgramUniformMatrix4x3dv"),
		glProgramUniformMatrix4x3fv:            getProcAddr("glProgramUniformMatrix4x3fv"),
		glProvokingVertex:                      getProcAddr("glProvokingVertex"),
		glPushAttrib:                           getProcAddr("glPushAttrib"),
		glPushClientAttrib:                     getProcAddr("glPushClientAttrib"),
		glPushDebugGroup:                       getProcAddr("glPushDebugGroup"),
		glPushMatrix:                           getProcAddr("glPushMatrix"),
		glPushName:                             getProcAddr("glPushName"),
		glQueryCounter:                         getProcAddr("glQueryCounter"),
		glRasterPos2d:                          getProcAddr("glRasterPos2d"),
		glRasterPos2dv:                         getProcAddr("glRasterPos2dv"),
		glRasterPos2f:                          getProcAddr("glRasterPos2f"),
		glRasterPos2fv:                         getProcAddr("glRasterPos2fv"),
		glRasterPos2i:                          getProcAddr("glRasterPos2i"),
		glRasterPos2iv:                         getProcAddr("glRasterPos2iv"),
		glRasterPos2s:                          getProcAddr("glRasterPos2s"),
		glRasterPos2sv:                         getProcAddr("glRasterPos2sv"),
		glRasterPos3d:                          getProcAddr("glRasterPos3d"),
		glRasterPos3dv:                         getProcAddr("glRasterPos3dv"),
		glRasterPos3f:                          getProcAddr("glRasterPos3f"),
		glRasterPos3fv:                         getProcAddr("glRasterPos3fv"),
		glRasterPos3i:                          getProcAddr("glRasterPos3i"),
		glRasterPos3iv:                         getProcAddr("glRasterPos3iv"),
		glRasterPos3s:                          getProcAddr("glRasterPos3s"),
		glRasterPos3sv:                         getProcAddr("glRasterPos3sv"),
		glRasterPos4d:                          getProcAddr("glRasterPos4d"),
		glRasterPos4dv:                         getProcAddr("glRasterPos4dv"),
		glRasterPos4f:                          getProcAddr("glRasterPos4f"),
		glRasterPos4fv:                         getProcAddr("glRasterPos4fv"),
		glRasterPos4i:                          getProcAddr("glRasterPos4i"),
		glRasterPos4iv:                         getProcAddr("glRasterPos4iv"),
		glRasterPos4s:                          getProcAddr("glRasterPos4s"),
		glRasterPos4sv:                         getProcAddr("glRasterPos4sv"),
		glReadBuffer:                           getProcAddr("glReadBuffer"),
		glReadPixels:                           getProcAddr("glReadPixels"),
		glRectd:                                getProcAddr("glRectd"),
		glRectdv:                               getProcAddr("glRectdv"),
		glRectf:                                getProcAddr("glRectf"),
		glRectfv:                               getProcAddr("glRectfv"),
		glRecti:                                getProcAddr("glRecti"),
		glRectiv:                               getProcAddr("glRectiv"),
		glRects:                                getProcAddr("glRects"),
		glRectsv:                               getProcAddr("glRectsv"),
		glReleaseShaderCompiler:                getProcAddr("glReleaseShaderCompiler"),
		glRenderMode:                           getProcAddr("glRenderMode"),
		glRenderbufferStorage:                  getProcAddr("glRenderbufferStorage"),
		glRenderbufferStorageMultisample:       getProcAddr("glRenderbufferStorageMultisample"),
		glResumeTransformFeedback:              getProcAddr("glResumeTransformFeedback"),
		glRotated:                              getProcAddr("glRotated"),
		glRotatef:                              getProcAddr("glRotatef"),
		glSampleCoverage:                       getProcAddr("glSampleCoverage"),
		glSampleMaski:                          getProcAddr("glSampleMaski"),
		glSamplerParameterIiv:                  getProcAddr("glSamplerParameterIiv"),
		glSamplerParameterIuiv:                 getProcAddr("glSamplerParameterIuiv"),
		glSamplerParameterf:                    getProcAddr("glSamplerParameterf"),
		glSamplerParameterfv:                   getProcAddr("glSamplerParameterfv"),
		glSamplerParameteri:                    getProcAddr("glSamplerParameteri"),
		glSamplerParameteriv:                   getProcAddr("glSamplerParameteriv"),
		glScaled:                               getProcAddr("glScaled"),
		glScalef:                               getProcAddr("glScalef"),
		glScissor:                              getProcAddr("glScissor"),
		glScissorArrayv:                        getProcAddr("glScissorArrayv"),
		glScissorIndexed:                       getProcAddr("glScissorIndexed"),
		glScissorIndexedv:                      getProcAddr("glScissorIndexedv"),
		glSecondaryColor3b:                     getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:                    getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:                     getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:                    getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:                     getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:                    getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:                     getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:                    getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:                     getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:                    getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:                    getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:                   getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:                    getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:                   getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:                    getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:                   getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorP3ui:                   getProcAddr("glSecondaryColorP3ui"),
		glSecondaryColorP3uiv:                  getProcAddr("glSecondaryColorP3uiv"),
		glSecondaryColorPointer:                getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:                         getProcAddr("glSelectBuffer"),
		glShadeModel:                           getProcAddr("glShadeModel"),
		glShaderBinary:                         getProcAddr("glShaderBinary"),
		glShaderSource:                         getProcAddr("glShaderSource"),
		glShaderStorageBlockBinding:            getProcAddr("glShaderStorageBlockBinding"),
		glStencilFunc:                          getProcAddr("glStencilFunc"),
		glStencilFuncSeparate:                  getProcAddr("glStencilFuncSeparate"),
		glStencilMask:                          getProcAddr("glStencilMask"),
		glStencilMaskSeparate:                  getProcAddr("glStencilMaskSeparate"),
		glStencilOp:                            getProcAddr("glStencilOp"),
		glStencilOpSeparate:                    getProcAddr("glStencilOpSeparate"),
		glTexBuffer:                            getProcAddr("glTexBuffer"),
		glTexBufferRange:                       getProcAddr("glTexBufferRange"),
		glTexCoord1d:                           getProcAddr("glTexCoord1d"),
		glTexCoord1dv:                          getProcAddr("glTexCoord1dv"),
		glTexCoord1f:                           getProcAddr("glTexCoord1f"),
		glTexCoord1fv:                          getProcAddr("glTexCoord1fv"),
		glTexCoord1i:                           getProcAddr("glTexCoord1i"),
		glTexCoord1iv:                          getProcAddr("glTexCoord1iv"),
		glTexCoord1s:                           getProcAddr("glTexCoord1s"),
		glTexCoord1sv:                          getProcAddr("glTexCoord1sv"),
		glTexCoord2d:                           getProcAddr("glTexCoord2d"),
		glTexCoord2dv:                          getProcAddr("glTexCoord2dv"),
		glTexCoord2f:                           getProcAddr("glTexCoord2f"),
		glTexCoord2fv:                          getProcAddr("glTexCoord2fv"),
		glTexCoord2i:                           getProcAddr("glTexCoord2i"),
		glTexCoord2iv:                          getProcAddr("glTexCoord2iv"),
		glTexCoord2s:                           getProcAddr("glTexCoord2s"),
		glTexCoord2sv:                          getProcAddr("glTexCoord2sv"),
		glTexCoord3d:                           getProcAddr("glTexCoord3d"),
		glTexCoord3dv:                          getProcAddr("glTexCoord3dv"),
		glTexCoord3f:                           getProcAddr("glTexCoord3f"),
		glTexCoord3fv:                          getProcAddr("glTexCoord3fv"),
		glTexCoord3i:                           getProcAddr("glTexCoord3i"),
		glTexCoord3iv:                          getProcAddr("glTexCoord3iv"),
		glTexCoord3s:                           getProcAddr("glTexCoord3s"),
		glTexCoord3sv:                          getProcAddr("glTexCoord3sv"),
		glTexCoord4d:                           getProcAddr("glTexCoord4d"),
		glTexCoord4dv:                          getProcAddr("glTexCoord4dv"),
		glTexCoord4f:                           getProcAddr("glTexCoord4f"),
		glTexCoord4fv:                          getProcAddr("glTexCoord4fv"),
		glTexCoord4i:                           getProcAddr("glTexCoord4i"),
		glTexCoord4iv:                          getProcAddr("glTexCoord4iv"),
		glTexCoord4s:                           getProcAddr("glTexCoord4s"),
		glTexCoord4sv:                          getProcAddr("glTexCoord4sv"),
		glTexCoordP1ui:                         getProcAddr("glTexCoordP1ui"),
		glTexCoordP1uiv:                        getProcAddr("glTexCoordP1uiv"),
		glTexCoordP2ui:                         getProcAddr("glTexCoordP2ui"),
		glTexCoordP2uiv:                        getProcAddr("glTexCoordP2uiv"),
		glTexCoordP3ui:                         getProcAddr("glTexCoordP3ui"),
		glTexCoordP3uiv:                        getProcAddr("glTexCoordP3uiv"),
		glTexCoordP4ui:                         getProcAddr("glTexCoordP4ui"),
		glTexCoordP4uiv:                        getProcAddr("glTexCoordP4uiv"),
		glTexCoordPointer:                      getProcAddr("glTexCoordPointer"),
		glTexEnvf:                              getProcAddr("glTexEnvf"),
		glTexEnvfv:                             getProcAddr("glTexEnvfv"),
		glTexEnvi:                              getProcAddr("glTexEnvi"),
		glTexEnviv:                             getProcAddr("glTexEnviv"),
		glTexGend:                              getProcAddr("glTexGend"),
		glTexGendv:                             getProcAddr("glTexGendv"),
		glTexGenf:                              getProcAddr("glTexGenf"),
		glTexGenfv:                             getProcAddr("glTexGenfv"),
		glTexGeni:                              getProcAddr("glTexGeni"),
		glTexGeniv:                             getProcAddr("glTexGeniv"),
		glTexImage1D:                           getProcAddr("glTexImage1D"),
		glTexImage2D:                           getProcAddr("glTexImage2D"),
		glTexImage2DMultisample:                getProcAddr("glTexImage2DMultisample"),
		glTexImage3D:                           getProcAddr("glTexImage3D"),
		glTexImage3DMultisample:                getProcAddr("glTexImage3DMultisample"),
		glTexParameterIiv:                      getProcAddr("glTexParameterIiv"),
		glTexParameterIuiv:                     getProcAddr("glTexParameterIuiv"),
		glTexParameterf:                        getProcAddr("glTexParameterf"),
		glTexParameterfv:                       getProcAddr("glTexParameterfv"),
		glTexParameteri:                        getProcAddr("glTexParameteri"),
		glTexParameteriv:                       getProcAddr("glTexParameteriv"),
		glTexStorage1D:                         getProcAddr("glTexStorage1D"),
		glTexStorage2D:                         getProcAddr("glTexStorage2D"),
		glTexStorage2DMultisample:              getProcAddr("glTexStorage2DMultisample"),
		glTexStorage3D:                         getProcAddr("glTexStorage3D"),
		glTexStorage3DMultisample:              getProcAddr("glTexStorage3DMultisample"),
		glTexSubImage1D:                        getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:                        getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:                        getProcAddr("glTexSubImage3D"),
		glTextureView:                          getProcAddr("glTextureView"),
		glTransformFeedbackVaryings:            getProcAddr("glTransformFeedbackVaryings"),
		glTranslated:                           getProcAddr("glTranslated"),
		glTranslatef:                           getProcAddr("glTranslatef"),
		glUniform1d:                            getProcAddr("glUniform1d"),
		glUniform1dv:                           getProcAddr("glUniform1dv"),
		glUniform1f:                            getProcAddr("glUniform1f"),
		glUniform1fv:                           getProcAddr("glUniform1fv"),
		glUniform1i:                            getProcAddr("glUniform1i"),
		glUniform1iv:                           getProcAddr("glUniform1iv"),
		glUniform1ui:                           getProcAddr("glUniform1ui"),
		glUniform1uiv:                          getProcAddr("glUniform1uiv"),
		glUniform2d:                            getProcAddr("glUniform2d"),
		glUniform2dv:                           getProcAddr("glUniform2dv"),
		glUniform2f:                            getProcAddr("glUniform2f"),
		glUniform2fv:                           getProcAddr("glUniform2fv"),
		glUniform2i:                            getProcAddr("glUniform2i"),
		glUniform2iv:                           getProcAddr("glUniform2iv"),
		glUniform2ui:                           getProcAddr("glUniform2ui"),
		glUniform2uiv:                          getProcAddr("glUniform2uiv"),
		glUniform3d:                            getProcAddr("glUniform3d"),
		glUniform3dv:                           getProcAddr("glUniform3dv"),
		glUniform3f:                            getProcAddr("glUniform3f"),
		glUniform3fv:                           getProcAddr("glUniform3fv"),
		glUniform3i:                            getProcAddr("glUniform3i"),
		glUniform3iv:                           getProcAddr("glUniform3iv"),
		glUniform3ui:                           getProcAddr("glUniform3ui"),
		glUniform3uiv:                          getProcAddr("glUniform3uiv"),
		glUniform4d:                            getProcAddr("glUniform4d"),
		glUniform4dv:                           getProcAddr("glUniform4dv"),
		glUniform4f:                            getProcAddr("glUniform4f"),
		glUniform4fv:                           getProcAddr("glUniform4fv"),
		glUniform4i:                            getProcAddr("glUniform4i"),
		glUniform4iv:                           getProcAddr("glUniform4iv"),
		glUniform4ui:                           getProcAddr("glUniform4ui"),
		glUniform4uiv:                          getProcAddr("glUniform4uiv"),
		glUniformBlockBinding:                  getProcAddr("glUniformBlockBinding"),
		glUniformMatrix2dv:                     getProcAddr("glUniformMatrix2dv"),
		glUniformMatrix2fv:                     getProcAddr("glUniformMatrix2fv"),
		glUniformMatrix2x3dv:                   getProcAddr("glUniformMatrix2x3dv"),
		glUniformMatrix2x3fv:                   getProcAddr("glUniformMatrix2x3fv"),
		glUniformMatrix2x4dv:                   getProcAddr("glUniformMatrix2x4dv"),
		glUniformMatrix2x4fv:                   getProcAddr("glUniformMatrix2x4fv"),
		glUniformMatrix3dv:                     getProcAddr("glUniformMatrix3dv"),
		glUniformMatrix3fv:                     getProcAddr("glUniformMatrix3fv"),
		glUniformMatrix3x2dv:                   getProcAddr("glUniformMatrix3x2dv"),
		glUniformMatrix3x2fv:                   getProcAddr("glUniformMatrix3x2fv"),
		glUniformMatrix3x4dv:                   getProcAddr("glUniformMatrix3x4dv"),
		glUniformMatrix3x4fv:                   getProcAddr("glUniformMatrix3x4fv"),
		glUniformMatrix4dv:                     getProcAddr("glUniformMatrix4dv"),
		glUniformMatrix4fv:                     getProcAddr("glUniformMatrix4fv"),
		glUniformMatrix4x2dv:                   getProcAddr("glUniformMatrix4x2dv"),
		glUniformMatrix4x2fv:                   getProcAddr("glUniformMatrix4x2fv"),
		glUniformMatrix4x3dv:                   getProcAddr("glUniformMatrix4x3dv"),
		glUniformMatrix4x3fv:                   getProcAddr("glUniformMatrix4x3fv"),
		glUniformSubroutinesuiv:                getProcAddr("glUniformSubroutinesuiv"),
		glUnmapBuffer:                          getProcAddr("glUnmapBuffer"),
		glUseProgram:                           getProcAddr("glUseProgram"),
		glUseProgramStages:                     getProcAddr("glUseProgramStages"),
		glValidateProgram:                      getProcAddr("glValidateProgram"),
		glValidateProgramPipeline:              getProcAddr("glValidateProgramPipeline"),
		glVertex2d:                             getProcAddr("glVertex2d"),
		glVertex2dv:                            getProcAddr("glVertex2dv"),
		glVertex2f:                             getProcAddr("glVertex2f"),
		glVertex2fv:                            getProcAddr("glVertex2fv"),
		glVertex2i:                             getProcAddr("glVertex2i"),
		glVertex2iv:                            getProcAddr("glVertex2iv"),
		glVertex2s:                             getProcAddr("glVertex2s"),
		glVertex2sv:                            getProcAddr("glVertex2sv"),
		glVertex3d:                             getProcAddr("glVertex3d"),
		glVertex3dv:                            getProcAddr("glVertex3dv"),
		glVertex3f:                             getProcAddr("glVertex3f"),
		glVertex3fv:                            getProcAddr("glVertex3fv"),
		glVertex3i:                             getProcAddr("glVertex3i"),
		glVertex3iv:                            getProcAddr("glVertex3iv"),
		glVertex3s:                             getProcAddr("glVertex3s"),
		glVertex3sv:                            getProcAddr("glVertex3sv"),
		glVertex4d:                             getProcAddr("glVertex4d"),
		glVertex4dv:                            getProcAddr("glVertex4dv"),
		glVertex4f:                             getProcAddr("glVertex4f"),
		glVertex4fv:                            getProcAddr("glVertex4fv"),
		glVertex4i:                             getProcAddr("glVertex4i"),
		glVertex4iv:                            getProcAddr("glVertex4iv"),
		glVertex4s:                             getProcAddr("glVertex4s"),
		glVertex4sv:                            getProcAddr("glVertex4sv"),
		glVertexAttrib1d:                       getProcAddr("glVertexAttrib1d"),
		glVertexAttrib1dv:                      getProcAddr("glVertexAttrib1dv"),
		glVertexAttrib1f:                       getProcAddr("glVertexAttrib1f"),
		glVertexAttrib1fv:                      getProcAddr("glVertexAttrib1fv"),
		glVertexAttrib1s:                       getProcAddr("glVertexAttrib1s"),
		glVertexAttrib1sv:                      getProcAddr("glVertexAttrib1sv"),
		glVertexAttrib2d:                       getProcAddr("glVertexAttrib2d"),
		glVertexAttrib2dv:                      getProcAddr("glVertexAttrib2dv"),
		glVertexAttrib2f:                       getProcAddr("glVertexAttrib2f"),
		glVertexAttrib2fv:                      getProcAddr("glVertexAttrib2fv"),
		glVertexAttrib2s:                       getProcAddr("glVertexAttrib2s"),
		glVertexAttrib2sv:                      getProcAddr("glVertexAttrib2sv"),
		glVertexAttrib3d:                       getProcAddr("glVertexAttrib3d"),
		glVertexAttrib3dv:                      getProcAddr("glVertexAttrib3dv"),
		glVertexAttrib3f:                       getProcAddr("glVertexAttrib3f"),
		glVertexAttrib3fv:                      getProcAddr("glVertexAttrib3fv"),
		glVertexAttrib3s:                       getProcAddr("glVertexAttrib3s"),
		glVertexAttrib3sv:                      getProcAddr("glVertexAttrib3sv"),
		glVertexAttrib4Nbv:                     getProcAddr("glVertexAttrib4Nbv"),
		glVertexAttrib4Niv:                     getProcAddr("glVertexAttrib4Niv"),
		glVertexAttrib4Nsv:                     getProcAddr("glVertexAttrib4Nsv"),
		glVertexAttrib4Nub:                     getProcAddr("glVertexAttrib4Nub"),
		glVertexAttrib4Nubv:                    getProcAddr("glVertexAttrib4Nubv"),
		glVertexAttrib4Nuiv:                    getProcAddr("glVertexAttrib4Nuiv"),
		glVertexAttrib4Nusv:                    getProcAddr("glVertexAttrib4Nusv"),
		glVertexAttrib4bv:                      getProcAddr("glVertexAttrib4bv"),
		glVertexAttrib4d:                       getProcAddr("glVertexAttrib4d"),
		glVertexAttrib4dv:                      getProcAddr("glVertexAttrib4dv"),
		glVertexAttrib4f:                       getProcAddr("glVertexAttrib4f"),
		glVertexAttrib4fv:                      getProcAddr("glVertexAttrib4fv"),
		glVertexAttrib4iv:                      getProcAddr("glVertexAttrib4iv"),
		glVertexAttrib4s:                       getProcAddr("glVertexAttrib4s"),
		glVertexAttrib4sv:                      getProcAddr("glVertexAttrib4sv"),
		glVertexAttrib4ubv:                     getProcAddr("glVertexAttrib4ubv"),
		glVertexAttrib4uiv:                     getProcAddr("glVertexAttrib4uiv"),
		glVertexAttrib4usv:                     getProcAddr("glVertexAttrib4usv"),
		glVertexAttribBinding:                  getProcAddr("glVertexAttribBinding"),
		glVertexAttribDivisor:                  getProcAddr("glVertexAttribDivisor"),
		glVertexAttribFormat:                   getProcAddr("glVertexAttribFormat"),
		glVertexAttribI1i:                      getProcAddr("glVertexAttribI1i"),
		glVertexAttribI1iv:                     getProcAddr("glVertexAttribI1iv"),
		glVertexAttribI1ui:                     getProcAddr("glVertexAttribI1ui"),
		glVertexAttribI1uiv:                    getProcAddr("glVertexAttribI1uiv"),
		glVertexAttribI2i:                      getProcAddr("glVertexAttribI2i"),
		glVertexAttribI2iv:                     getProcAddr("glVertexAttribI2iv"),
		glVertexAttribI2ui:                     getProcAddr("glVertexAttribI2ui"),
		glVertexAttribI2uiv:                    getProcAddr("glVertexAttribI2uiv"),
		glVertexAttribI3i:                      getProcAddr("glVertexAttribI3i"),
		glVertexAttribI3iv:                     getProcAddr("glVertexAttribI3iv"),
		glVertexAttribI3ui:                     getProcAddr("glVertexAttribI3ui"),
		glVertexAttribI3uiv:                    getProcAddr("glVertexAttribI3uiv"),
		glVertexAttribI4bv:                     getProcAddr("glVertexAttribI4bv"),
		glVertexAttribI4i:                      getProcAddr("glVertexAttribI4i"),
		glVertexAttribI4iv:                     getProcAddr("glVertexAttribI4iv"),
		glVertexAttribI4sv:                     getProcAddr("glVertexAttribI4sv"),
		glVertexAttribI4ubv:                    getProcAddr("glVertexAttribI4ubv"),
		glVertexAttribI4ui:                     getProcAddr("glVertexAttribI4ui"),
		glVertexAttribI4uiv:                    getProcAddr("glVertexAttribI4uiv"),
		glVertexAttribI4usv:                    getProcAddr("glVertexAttribI4usv"),
		glVertexAttribIFormat:                  getProcAddr("glVertexAttribIFormat"),
		glVertexAttribIPointer:                 getProcAddr("glVertexAttribIPointer"),
		glVertexAttribL1d:                      getProcAddr("glVertexAttribL1d"),
		glVertexAttribL1dv:                     getProcAddr("glVertexAttribL1dv"),
		glVertexAttribL2d:                      getProcAddr("glVertexAttribL2d"),
		glVertexAttribL2dv:                     getProcAddr("glVertexAttribL2dv"),
		glVertexAttribL3d:                      getProcAddr("glVertexAttribL3d"),
		glVertexAttribL3dv:                     getProcAddr("glVertexAttribL3dv"),
		glVertexAttribL4d:                      getProcAddr("glVertexAttribL4d"),
		glVertexAttribL4dv:                     getProcAddr("glVertexAttribL4dv"),
		glVertexAttribLFormat:                  getProcAddr("glVertexAttribLFormat"),
		glVertexAttribLPointer:                 getProcAddr("glVertexAttribLPointer"),
		glVertexAttribP1ui:                     getProcAddr("glVertexAttribP1ui"),
		glVertexAttribP1uiv:                    getProcAddr("glVertexAttribP1uiv"),
		glVertexAttribP2ui:                     getProcAddr("glVertexAttribP2ui"),
		glVertexAttribP2uiv:                    getProcAddr("glVertexAttribP2uiv"),
		glVertexAttribP3ui:                     getProcAddr("glVertexAttribP3ui"),
		glVertexAttribP3uiv:                    getProcAddr("glVertexAttribP3uiv"),
		glVertexAttribP4ui:                     getProcAddr("glVertexAttribP4ui"),
		glVertexAttribP4uiv:                    getProcAddr("glVertexAttribP4uiv"),
		glVertexAttribPointer:                  getProcAddr("glVertexAttribPointer"),
		glVertexBindingDivisor:                 getProcAddr("glVertexBindingDivisor"),
		glVertexP2ui:                           getProcAddr("glVertexP2ui"),
		glVertexP2uiv:                          getProcAddr("glVertexP2uiv"),
		glVertexP3ui:                           getProcAddr("glVertexP3ui"),
		glVertexP3uiv:                          getProcAddr("glVertexP3uiv"),
		glVertexP4ui:                           getProcAddr("glVertexP4ui"),
		glVertexP4uiv:                          getProcAddr("glVertexP4uiv"),
		glVertexPointer:                        getProcAddr("glVertexPointer"),
		glViewport:                             getProcAddr("glViewport"),
		glViewportArrayv:                       getProcAddr("glViewportArrayv"),
		glViewportIndexedf:                     getProcAddr("glViewportIndexedf"),
		glViewportIndexedfv:                    getProcAddr("glViewportIndexedfv"),
		glWaitSync:                             getProcAddr("glWaitSync"),
		glWindowPos2d:                          getProcAddr("glWindowPos2d"),
		glWindowPos2dv:                         getProcAddr("glWindowPos2dv"),
		glWindowPos2f:                          getProcAddr("glWindowPos2f"),
		glWindowPos2fv:                         getProcAddr("glWindowPos2fv"),
		glWindowPos2i:                          getProcAddr("glWindowPos2i"),
		glWindowPos2iv:                         getProcAddr("glWindowPos2iv"),
		glWindowPos2s:                          getProcAddr("glWindowPos2s"),
		glWindowPos2sv:                         getProcAddr("glWindowPos2sv"),
		glWindowPos3d:                          getProcAddr("glWindowPos3d"),
		glWindowPos3dv:                         getProcAddr("glWindowPos3dv"),
		glWindowPos3f:                          getProcAddr("glWindowPos3f"),
		glWindowPos3fv:                         getProcAddr("glWindowPos3fv"),
		glWindowPos3i:                          getProcAddr("glWindowPos3i"),
		glWindowPos3iv:                         getProcAddr("glWindowPos3iv"),
		glWindowPos3s:                          getProcAddr("glWindowPos3s"),
		glWindowPos3sv:                         getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL440 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveShaderProgram(pipeline uint32, program uint32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	AttachShader(program uint32, shader uint32)
	Begin(mode uint32)
	BeginConditionalRender(id uint32, mode uint32)
	BeginQuery(target uint32, id uint32)
	BeginQueryIndexed(target uint32, index uint32, id uint32)
	BeginTransformFeedback(primitiveMode uint32)
	BindAttribLocation(program uint32, index uint32, name *uint8)
	BindBuffer(target uint32, buffer uint32)
	BindBufferBase(target uint32, index uint32, buffer uint32)
	BindBufferRange(target uint32, index uint32, buffer uint32, offset uintptr, size int)
	BindBuffersBase(target uint32, first uint32, count int32, buffers *uint32)
	BindBuffersRange(target uint32, first uint32, count int32, buffers *uint32, offsets *uintptr, sizes *int)
	BindFragDataLocation(program uint32, color uint32, name *uint8)
	BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *uint8)
	BindFramebuffer(target uint32, framebuffer uint32)
	BindImageTexture(unit uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format uint32)
	BindImageTextures(first uint32, count int32, textures *uint32)
	BindProgramPipeline(pipeline uint32)
	BindRenderbuffer(target uint32, renderbuffer uint32)
	BindSampler(unit uint32, sampler uint32)
	BindSamplers(first uint32, count int32, samplers *uint32)
	BindTexture(target uint32, texture uint32)
	BindTextures(first uint32, count int32, textures *uint32)
	BindTransformFeedback(target uint32, id uint32)
	BindVertexArray(array uint32)
	BindVertexBuffer(bindingindex uint32, buffer uint32, offset uintptr, stride int32)
	BindVertexBuffers(first uint32, count int32, buffers *uint32, offsets *uintptr, strides *int32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)
	BlendEquationSeparatei(buf uint32, modeRGB uint32, modeAlpha uint32)
	BlendEquationi(buf uint32, mode uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BlendFuncSeparatei(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32)
	BlendFunci(buf uint32, src uint32, dst uint32)
	BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferStorage(target uint32, size int, data unsafe.Pointer, flags uint32)
	BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	CheckFramebufferStatus(target uint32) uint32
	ClampColor(target uint32, clamp uint32)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearBufferData(target uint32, internalformat uint32, format uint32, type_ uint32, data unsafe.Pointer)
	ClearBufferSubData(target uint32, internalformat uint32, offset uintptr, size int, format uint32, type_ uint32, data unsafe.Pointer)
	ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32)
	ClearBufferfv(buffer uint32, drawbuffer int32, value *float32)
	ClearBufferiv(buffer uint32, drawbuffer int32, value *int32)
	ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearDepthf(d float32)
	ClearIndex(c float32)
	ClearStencil(s int32)
	ClearTexImage(texture uint32, level int32, format uint32, type_ uint32, data unsafe.Pointer)
	ClearTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, data unsafe.Pointer)
	ClientActiveTexture(texture uint32)
	ClientWaitSync(sync GLsync, flags uint32, timeout uint64) uint32
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaski(index uint32, r bool, g bool, b bool, a bool)
	ColorMaterial(face uint32, mode uint32)
	ColorP3ui(type_ uint32, color uint32)
	ColorP3uiv(type_ uint32, color *uint32)
	ColorP4ui(type_ uint32, color uint32)
	ColorP4uiv(type_ uint32, color *uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompileShader(shader uint32)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset uintptr, writeOffset uintptr, size int)
	CopyImageSubData(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CreateProgram() uint32
	CreateShader(type_ uint32) uint32
	CreateShaderProgramv(type_ uint32, count int32, strings **uint8) uint32
	CullFace(mode uint32)
	DebugMessageCallback(callback func(source, type_, id, severity uint32, message string))
	DebugMessageControl(source uint32, type_ uint32, severity uint32, count int32, ids *uint32, enabled bool)
	DebugMessageInsert(source uint32, type_ uint32, id uint32, severity uint32, length int32, buf *uint8)
	DeleteBuffers(n int32, buffers *uint32)
	DeleteFramebuffers(n int32, framebuffers *uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteProgram(program uint32)
	DeleteProgramPipelines(n int32, pipelines *uint32)
	DeleteQueries(n int32, ids *uint32)
	DeleteRenderbuffers(n int32, renderbuffers *uint32)
	DeleteSamplers(count int32, samplers *uint32)
	DeleteShader(shader uint32)
	DeleteSync(sync GLsync)
	DeleteTextures(n int32, textures *uint32)
	DeleteTransformFeedbacks(n int32, ids *uint32)
	DeleteVertexArrays(n int32, arrays *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	DepthRangeArrayv(first uint32, count int32, v *float64)
	DepthRangeIndexed(index uint32, n float64, f float64)
	DepthRangef(n float32, f float32)
	DetachShader(program uint32, shader uint32)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DisableVertexAttribArray(index uint32)
	Disablei(target uint32, index uint32)
	DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32)
	DispatchComputeIndirect(indirect uintptr)
	DrawArrays(mode uint32, first int32, count int32)
	DrawArraysIndirect(mode uint32, indirect unsafe.Pointer)
	DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32)
	DrawArraysInstancedBaseInstance(mode uint32, first int32, count int32, instancecount int32, baseinstance uint32)
	DrawBuffer(buf uint32)
	DrawBuffers(n int32, bufs *uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawElementsBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer)
	DrawElementsInstanced(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32)
	DrawElementsInstancedBaseInstance(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, baseinstance uint32)
	DrawElementsInstancedBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32)
	DrawElementsInstancedBaseVertexBaseInstance(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32, baseinstance uint32)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawRangeElementsBaseVertex(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawTransformFeedback(mode uint32, id uint32)
	DrawTransformFeedbackInstanced(mode uint32, id uint32, instancecount int32)
	DrawTransformFeedbackStream(mode uint32, id uint32, stream uint32)
	DrawTransformFeedbackStreamInstanced(mode uint32, id uint32, stream uint32, instancecount int32)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	EnableVertexAttribArray(index uint32)
	Enablei(target uint32, index uint32)
	End()
	EndConditionalRender()
	EndList()
	EndQuery(target uint32)
	EndQueryIndexed(target uint32, index uint32)
	EndTransformFeedback()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	FenceSync(condition uint32, flags uint32) GLsync
	Finish()
	Flush()
	FlushMappedBufferRange(target uint32, offset uintptr, length int)
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FramebufferParameteri(target uint32, pname uint32, param int32)
	FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	FramebufferTexture(target uint32, attachment uint32, texture uint32, level int32)
	FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32)
	FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenBuffers(n int32, buffers *uint32)
	GenFramebuffers(n int32, framebuffers *uint32)
	GenLists(range_ int32) uint32
	GenProgramPipelines(n int32, pipelines *uint32)
	GenQueries(n int32, ids *uint32)
	GenRenderbuffers(n int32, renderbuffers *uint32)
	GenSamplers(count int32, samplers *uint32)
	GenTextures(n int32, textures *uint32)
	GenTransformFeedbacks(n int32, ids *uint32)
	GenVertexArrays(n int32, arrays *uint32)
	GenerateMipmap(target uint32)
	GetActiveAtomicCounterBufferiv(program uint32, bufferIndex uint32, pname uint32, params *int32)
	GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveSubroutineName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineUniformName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineUniformiv(program uint32, shadertype uint32, index uint32, pname uint32, values *int32)
	GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *uint8)
	GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32)
	GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *uint8)
	GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32)
	GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)
	GetAttribLocation(program uint32, name *uint8) int32
	GetBooleani_v(target uint32, index uint32, data *bool)
	GetBooleanv(pname uint32, data *bool)
	GetBufferParameteri64v(target uint32, pname uint32, params *int64)
	GetBufferParameteriv(target uint32, pname uint32, params *int32)
	GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)
	GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetDebugMessageLog(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32
	GetDoublei_v(target uint32, index uint32, data *float64)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloati_v(target uint32, index uint32, data *float32)
	GetFloatv(pname uint32, data *float32)
	GetFragDataIndex(program uint32, name *uint8) int32
	GetFragDataLocation(program uint32, name *uint8) int32
	GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32)
	GetFramebufferParameteriv(target uint32, pname uint32, params *int32)
	GetInteger64i_v(target uint32, index uint32, data *int64)
	GetInteger64v(pname uint32, data *int64)
	GetIntegeri_v(target uint32, index uint32, data *int32)
	GetIntegerv(pname uint32, data *int32)
	GetInternalformati64v(target uint32, internalformat uint32, pname uint32, count int32, params *int64)
	GetInternalformativ(target uint32, internalformat uint32, pname uint32, count int32, params *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetMultisamplefv(pname uint32, index uint32, val *float32)
	GetObjectLabel(identifier uint32, name uint32, bufSize int32, length *int32, label *uint8)
	GetObjectPtrLabel(ptr unsafe.Pointer, bufSize int32, length *int32, label *uint8)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetProgramBinary(program uint32, bufSize int32, length *int32, binaryFormat *uint32, binary unsafe.Pointer)
	GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramInterfaceiv(program uint32, programInterface uint32, pname uint32, params *int32)
	GetProgramPipelineInfoLog(pipeline uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramPipelineiv(pipeline uint32, pname uint32, params *int32)
	GetProgramResourceIndex(program uint32, programInterface uint32, name *uint8) uint32
	GetProgramResourceLocation(program uint32, programInterface uint32, name *uint8) int32
	GetProgramResourceLocationIndex(program uint32, programInterface uint32, name *uint8) int32
	GetProgramResourceName(program uint32, programInterface uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetProgramResourceiv(program uint32, programInterface uint32, index uint32, propCount int32, props *uint32, count int32, length *int32, params *int32)
	GetProgramStageiv(program uint32, shadertype uint32, pname uint32, values *int32)
	GetProgramiv(program uint32, pname uint32, params *int32)
	GetQueryIndexediv(target uint32, index uint32, pname uint32, params *int32)
	GetQueryObjecti64v(id uint32, pname uint32, params *int64)
	GetQueryObjectiv(id uint32, pname uint32, params *int32)
	GetQueryObjectui64v(id uint32, pname uint32, params *uint64)
	GetQueryObjectuiv(id uint32, pname uint32, params *uint32)
	GetQueryiv(target uint32, pname uint32, params *int32)
	GetRenderbufferParameteriv(target uint32, pname uint32, params *int32)
	GetSamplerParameterIiv(sampler uint32, pname uint32, params *int32)
	GetSamplerParameterIuiv(sampler uint32, pname uint32, params *uint32)
	GetSamplerParameterfv(sampler uint32, pname uint32, params *float32)
	GetSamplerParameteriv(sampler uint32, pname uint32, params *int32)
	GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8)
	GetShaderPrecisionFormat(shadertype uint32, precisiontype uint32, range_ *int32, precision *int32)
	GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8)
	GetShaderiv(shader uint32, pname uint32, params *int32)
	GetString(name uint32) *uint8
	GetStringi(name uint32, index uint32) *uint8
	GetSubroutineIndex(program uint32, shadertype uint32, name *uint8) uint32
	GetSubroutineUniformLocation(program uint32, shadertype uint32, name *uint8) int32
	GetSynciv(sync GLsync, pname uint32, count int32, length *int32, values *int32)
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterIiv(target uint32, pname uint32, params *int32)
	GetTexParameterIuiv(target uint32, pname uint32, params *uint32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetUniformBlockIndex(program uint32, uniformBlockName *uint8) uint32
	GetUniformIndices(program uint32, uniformCount int32, uniformNames **uint8, uniformIndices *uint32)
	GetUniformLocation(program uint32, name *uint8) int32
	GetUniformSubroutineuiv(shadertype uint32, location int32, params *uint32)
	GetUniformdv(program uint32, location int32, params *float64)
	GetUniformfv(program uint32, location int32, params *float32)
	GetUniformiv(program uint32, location int32, params *int32)
	GetUniformuiv(program uint32, location int32, params *uint32)
	GetVertexAttribIiv(index uint32, pname uint32, params *int32)
	GetVertexAttribIuiv(index uint32, pname uint32, params *uint32)
	GetVertexAttribLdv(index uint32, pname uint32, params *float64)
	GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)
	GetVertexAttribdv(index uint32, pname uint32, params *float64)
	GetVertexAttribfv(index uint32, pname uint32, params *float32)
	GetVertexAttribiv(index uint32, pname uint32, params *int32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	InvalidateBufferData(buffer uint32)
	InvalidateBufferSubData(buffer uint32, offset uintptr, length int)
	InvalidateFramebuffer(target uint32, numAttachments int32, attachments *uint32)
	InvalidateSubFramebuffer(target uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32)
	InvalidateTexImage(texture uint32, level int32)
	InvalidateTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32)
	IsBuffer(buffer uint32) bool
	IsEnabled(cap uint32) bool
	IsEnabledi(target uint32, index uint32) bool
	IsFramebuffer(framebuffer uint32) bool
	IsList(list uint32) bool
	IsProgram(program uint32) bool
	IsProgramPipeline(pipeline uint32) bool
	IsQuery(id uint32) bool
	IsRenderbuffer(renderbuffer uint32) bool
	IsSampler(sampler uint32) bool
	IsShader(shader uint32) bool
	IsSync(sync GLsync) bool
	IsTexture(texture uint32) bool
	IsTransformFeedback(id uint32) bool
	IsVertexArray(array uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	LinkProgram(program uint32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapBuffer(target uint32, access uint32) unsafe.Pointer
	MapBufferRange(target uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MemoryBarrier(barriers uint32)
	MinSampleShading(value float32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawArraysIndirect(mode uint32, indirect unsafe.Pointer, drawcount int32, stride int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiDrawElementsBaseVertex(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32)
	MultiDrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer, drawcount int32, stride int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	MultiTexCoordP1ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP1uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP2ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP2uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP3ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP3uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP4ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP4uiv(texture uint32, type_ uint32, coords *uint32)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalP3ui(type_ uint32, coords uint32)
	NormalP3uiv(type_ uint32, coords *uint32)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	ObjectLabel(identifier uint32, name uint32, length int32, label *uint8)
	ObjectPtrLabel(ptr unsafe.Pointer, length int32, label *uint8)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PatchParameterfv(pname uint32, values *float32)
	PatchParameteri(pname uint32, value int32)
	PauseTransformFeedback()
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopDebugGroup()
	PopMatrix()
	PopName()
	PrimitiveRestartIndex(index uint32)
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	ProgramBinary(program uint32, binaryFormat uint32, binary unsafe.Pointer, length int32)
	ProgramParameteri(program uint32, pname uint32, value int32)
	ProgramUniform1d(program uint32, location int32, v0 float64)
	ProgramUniform1dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform1f(program uint32, location int32, v0 float32)
	ProgramUniform1fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform1i(program uint32, location int32, v0 int32)
	ProgramUniform1iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform1ui(program uint32, location int32, v0 uint32)
	ProgramUniform1uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform2d(program uint32, location int32, v0 float64, v1 float64)
	ProgramUniform2dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32)
	ProgramUniform2fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32)
	ProgramUniform2iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32)
	ProgramUniform2uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform3d(program uint32, location int32, v0 float64, v1 float64, v2 float64)
	ProgramUniform3dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32)
	ProgramUniform3fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32)
	ProgramUniform3iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32)
	ProgramUniform3uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform4d(program uint32, location int32, v0 float64, v1 float64, v2 float64, v3 float64)
	ProgramUniform4dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	ProgramUniform4fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	ProgramUniform4iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	ProgramUniform4uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniformMatrix2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProvokingVertex(mode uint32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushDebugGroup(source uint32, id uint32, length int32, message *uint8)
	PushMatrix()
	PushName(name uint32)
	QueryCounter(id uint32, target uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	ReleaseShaderCompiler()
	RenderMode(mode uint32) int32
	RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32)
	RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32)
	ResumeTransformFeedback()
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	SampleMaski(maskNumber uint32, mask uint32)
	SamplerParameterIiv(sampler uint32, pname uint32, param *int32)
	SamplerParameterIuiv(sampler uint32, pname uint32, param *uint32)
	SamplerParameterf(sampler uint32, pname uint32, param float32)
	SamplerParameterfv(sampler uint32, pname uint32, param *float32)
	SamplerParameteri(sampler uint32, pname uint32, param int32)
	SamplerParameteriv(sampler uint32, pname uint32, param *int32)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	ScissorArrayv(first uint32, count int32, v *int32)
	ScissorIndexed(index uint32, left int32, bottom int32, width int32, height int32)
	ScissorIndexedv(index uint32, v *int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorP3ui(type_ uint32, color uint32)
	SecondaryColorP3uiv(type_ uint32, color *uint32)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	ShaderBinary(count int32, shaders *uint32, binaryFormat uint32, binary unsafe.Pointer, length int32)
	ShaderSource(shader uint32, count int32, string **uint8, length *int32)
	ShaderStorageBlockBinding(program uint32, storageBlockIndex uint32, storageBlockBinding uint32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilMaskSeparate(face uint32, mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)
	TexBuffer(target uint32, internalformat uint32, buffer uint32)
	TexBufferRange(target uint32, internalformat uint32, buffer uint32, offset uintptr, size int)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordP1ui(type_ uint32, coords uint32)
	TexCoordP1uiv(type_ uint32, coords *uint32)
	TexCoordP2ui(type_ uint32, coords uint32)
	TexCoordP2uiv(type_ uint32, coords *uint32)
	TexCoordP3ui(type_ uint32, coords uint32)
	TexCoordP3uiv(type_ uint32, coords *uint32)
	TexCoordP4ui(type_ uint32, coords uint32)
	TexCoordP4uiv(type_ uint32, coords *uint32)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TexParameterIiv(target uint32, pname uint32, params *int32)
	TexParameterIuiv(target uint32, pname uint32, params *uint32)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexStorage1D(target uint32, levels int32, internalformat uint32, width int32)
	TexStorage2D(target uint32, levels int32, internalformat uint32, width int32, height int32)
	TexStorage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexStorage3D(target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32)
	TexStorage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureView(texture uint32, target uint32, origtexture uint32, internalformat uint32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32)
	TransformFeedbackVaryings(program uint32, count int32, varyings **uint8, bufferMode uint32)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Uniform1d(location int32, x float64)
	Uniform1dv(location int32, count int32, value *float64)
	Uniform1f(location int32, v0 float32)
	Uniform1fv(location int32, count int32, value *float32)
	Uniform1i(location int32, v0 int32)
	Uniform1iv(location int32, count int32, value *int32)
	Uniform1ui(location int32, v0 uint32)
	Uniform1uiv(location int32, count int32, value *uint32)
	Uniform2d(location int32, x float64, y float64)
	Uniform2dv(location int32, count int32, value *float64)
	Uniform2f(location int32, v0 float32, v1 float32)
	Uniform2fv(location int32, count int32, value *float32)
	Uniform2i(location int32, v0 int32, v1 int32)
	Uniform2iv(location int32, count int32, value *int32)
	Uniform2ui(location int32, v0 uint32, v1 uint32)
	Uniform2uiv(location int32, count int32, value *uint32)
	Uniform3d(location int32, x float64, y float64, z float64)
	Uniform3dv(location int32, count int32, value *float64)
	Uniform3f(location int32, v0 float32, v1 float32, v2 float32)
	Uniform3fv(location int32, count int32, value *float32)
	Uniform3i(location int32, v0 int32, v1 int32, v2 int32)
	Uniform3iv(location int32, count int32, value *int32)
	Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)
	Uniform3uiv(location int32, count int32, value *uint32)
	Uniform4d(location int32, x float64, y float64, z float64, w float64)
	Uniform4dv(location int32, count int32, value *float64)
	Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	Uniform4fv(location int32, count int32, value *float32)
	Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	Uniform4iv(location int32, count int32, value *int32)
	Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	Uniform4uiv(location int32, count int32, value *uint32)
	UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)
	UniformMatrix2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32)
	UniformSubroutinesuiv(shadertype uint32, count int32, indices *uint32)
	UnmapBuffer(target uint32) bool
	UseProgram(program uint32)
	UseProgramStages(pipeline uint32, stages uint32, program uint32)
	ValidateProgram(program uint32)
	ValidateProgramPipeline(pipeline uint32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexAttrib1d(index uint32, x float64)
	VertexAttrib1dv(index uint32, v *float64)
	VertexAttrib1f(index uint32, x float32)
	VertexAttrib1fv(index uint32, v *float32)
	VertexAttrib1s(index uint32, x int16)
	VertexAttrib1sv(index uint32, v *int16)
	VertexAttrib2d(index uint32, x float64, y float64)
	VertexAttrib2dv(index uint32, v *float64)
	VertexAttrib2f(index uint32, x float32, y float32)
	VertexAttrib2fv(index uint32, v *float32)
	VertexAttrib2s(index uint32, x int16, y int16)
	VertexAttrib2sv(index uint32, v *int16)
	VertexAttrib3d(index uint32, x float64, y float64, z float64)
	VertexAttrib3dv(index uint32, v *float64)
	VertexAttrib3f(index uint32, x float32, y float32, z float32)
	VertexAttrib3fv(index uint32, v *float32)
	VertexAttrib3s(index uint32, x int16, y int16, z int16)
	VertexAttrib3sv(index uint32, v *int16)
	VertexAttrib4Nbv(index uint32, v *int8)
	VertexAttrib4Niv(index uint32, v *int32)
	VertexAttrib4Nsv(index uint32, v *int16)
	VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4Nubv(index uint32, v *uint8)
	VertexAttrib4Nuiv(index uint32, v *uint32)
	VertexAttrib4Nusv(index uint32, v *uint16)
	VertexAttrib4bv(index uint32, v *int8)
	VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dv(index uint32, v *float64)
	VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fv(index uint32, v *float32)
	VertexAttrib4iv(index uint32, v *int32)
	VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4sv(index uint32, v *int16)
	VertexAttrib4ubv(index uint32, v *uint8)
	VertexAttrib4uiv(index uint32, v *uint32)
	VertexAttrib4usv(index uint32, v *uint16)
	VertexAttribBinding(attribindex uint32, bindingindex uint32)
	VertexAttribDivisor(index uint32, divisor uint32)
	VertexAttribFormat(attribindex uint32, size int32, type_ uint32, normalized bool, relativeoffset uint32)
	VertexAttribI1i(index uint32, x int32)
	VertexAttribI1iv(index uint32, v *int32)
	VertexAttribI1ui(index uint32, x uint32)
	VertexAttribI1uiv(index uint32, v *uint32)
	VertexAttribI2i(index uint32, x int32, y int32)
	VertexAttribI2iv(index uint32, v *int32)
	VertexAttribI2ui(index uint32, x uint32, y uint32)
	VertexAttribI2uiv(index uint32, v *uint32)
	VertexAttribI3i(index uint32, x int32, y int32, z int32)
	VertexAttribI3iv(index uint32, v *int32)
	VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32)
	VertexAttribI3uiv(index uint32, v *uint32)
	VertexAttribI4bv(index uint32, v *int8)
	VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)
	VertexAttribI4iv(index uint32, v *int32)
	VertexAttribI4sv(index uint32, v *int16)
	VertexAttribI4ubv(index uint32, v *uint8)
	VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)
	VertexAttribI4uiv(index uint32, v *uint32)
	VertexAttribI4usv(index uint32, v *uint16)
	VertexAttribIFormat(attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexAttribIPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribL1d(index uint32, x float64)
	VertexAttribL1dv(index uint32, v *float64)
	VertexAttribL2d(index uint32, x float64, y float64)
	VertexAttribL2dv(index uint32, v *float64)
	VertexAttribL3d(index uint32, x float64, y float64, z float64)
	VertexAttribL3dv(index uint32, v *float64)
	VertexAttribL4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttribL4dv(index uint32, v *float64)
	VertexAttribLFormat(attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexAttribLPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribP1ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP1uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP2ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP2uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP3ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP3uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP4ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP4uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribPointer(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer)
	VertexBindingDivisor(bindingindex uint32, divisor uint32)
	VertexP2ui(type_ uint32, value uint32)
	VertexP2uiv(type_ uint32, value *uint32)
	VertexP3ui(type_ uint32, value uint32)
	VertexP3uiv(type_ uint32, value *uint32)
	VertexP4ui(type_ uint32, value uint32)
	VertexP4uiv(type_ uint32, value *uint32)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	ViewportArrayv(first uint32, count int32, v *float32)
	ViewportIndexedf(index uint32, x float32, y float32, w float32, h float32)
	ViewportIndexedfv(index uint32, v *float32)
	WaitSync(sync GLsync, flags uint32, timeout uint64)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New440(getProcAddr func(name string) unsafe.Pointer) GL440 {
	gl := &lib{
		glAccum:                             getProcAddr("glAccum"),
		glActiveShaderProgram:               getProcAddr("glActiveShaderProgram"),
		glActiveTexture:                     getProcAddr("glActiveTexture"),
		glAlphaFunc:                         getProcAddr("glAlphaFunc"),
		glAreTexturesResident:               getProcAddr("glAreTexturesResident"),
		glArrayElement:                      getProcAddr("glArrayElement"),
		glAttachShader:                      getProcAddr("glAttachShader"),
		glBegin:                             getProcAddr("glBegin"),
		glBeginConditionalRender:            getProcAddr("glBeginConditionalRender"),
		glBeginQuery:                        getProcAddr("glBeginQuery"),
		glBeginQueryIndexed:                 getProcAddr("glBeginQueryIndexed"),
		glBeginTransformFeedback:            getProcAddr("glBeginTransformFeedback"),
		glBindAttribLocation:                getProcAddr("glBindAttribLocation"),
		glBindBuffer:                        getProcAddr("glBindBuffer"),
		glBindBufferBase:                    getProcAddr("glBindBufferBase"),
		glBindBufferRange:                   getProcAddr("glBindBufferRange"),
		glBindBuffersBase:                   getProcAddr("glBindBuffersBase"),
		glBindBuffersRange:                  getProcAddr("glBindBuffersRange"),
		glBindFragDataLocation:              getProcAddr("glBindFragDataLocation"),
		glBindFragDataLocationIndexed:       getProcAddr("glBindFragDataLocationIndexed"),
		glBindFramebuffer:                   getProcAddr("glBindFramebuffer"),
		glBindImageTexture:                  getProcAddr("glBindImageTexture"),
		glBindImageTextures:                 getProcAddr("glBindImageTextures"),
		glBindProgramPipeline:               getProcAddr("glBindProgramPipeline"),
		glBindRenderbuffer:                  getProcAddr("glBindRenderbuffer"),
		glBindSampler:                       getProcAddr("glBindSampler"),
		glBindSamplers:                      getProcAddr("glBindSamplers"),
		glBindTexture:                       getProcAddr("glBindTexture"),
		glBindTextures:                      getProcAddr("glBindTextures"),
		glBindTransformFeedback:             getProcAddr("glBindTransformFeedback"),
		glBindVertexArray:                   getProcAddr("glBindVertexArray"),
		glBindVertexBuffer:                  getProcAddr("glBindVertexBuffer"),
		glBindVertexBuffers:                 getProcAddr("glBindVertexBuffers"),
		glBitmap:                            getProcAddr("glBitmap"),
		glBlendColor:                        getProcAddr("glBlendColor"),
		glBlendEquation:                     getProcAddr("glBlendEquation"),
		glBlendEquationSeparate:             getProcAddr("glBlendEquationSeparate"),
		glBlendEquationSeparatei:            getProcAddr("glBlendEquationSeparatei"),
		glBlendEquationi:                    getProcAddr("glBlendEquationi"),
		glBlendFunc:                         getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:                 getProcAddr("glBlendFuncSeparate"),
		glBlendFuncSeparatei:                getProcAddr("glBlendFuncSeparatei"),
		glBlendFunci:                        getProcAddr("glBlendFunci"),
		glBlitFramebuffer:                   getProcAddr("glBlitFramebuffer"),
		glBufferData:                        getProcAddr("glBufferData"),
		glBufferStorage:                     getProcAddr("glBufferStorage"),
		glBufferSubData:                     getProcAddr("glBufferSubData"),
		glCallList:                          getProcAddr("glCallList"),
		glCallLists:                         getProcAddr("glCallLists"),
		glCheckFramebufferStatus:            getProcAddr("glCheckFramebufferStatus"),
		glClampColor:                        getProcAddr("glClampColor"),
		glClear:                             getProcAddr("glClear"),
		glClearAccum:                        getProcAddr("glClearAccum"),
		glClearBufferData:                   getProcAddr("glClearBufferData"),
		glClearBufferSubData:                getProcAddr("glClearBufferSubData"),
		glClearBufferfi:                     getProcAddr("glClearBufferfi"),
		glClearBufferfv:                     getProcAddr("glClearBufferfv"),
		glClearBufferiv:                     getProcAddr("glClearBufferiv"),
		glClearBufferuiv:                    getProcAddr("glClearBufferuiv"),
		glClearColor:                        getProcAddr("glClearColor"),
		glClearDepth:                        getProcAddr("glClearDepth"),
		glClearDepthf:                       getProcAddr("glClearDepthf"),
		glClearIndex:                        getProcAddr("glClearIndex"),
		glClearStencil:                      getProcAddr("glClearStencil"),
		glClearTexImage:                     getProcAddr("glClearTexImage"),
		glClearTexSubImage:                  getProcAddr("glClearTexSubImage"),
		glClientActiveTexture:               getProcAddr("glClientActiveTexture"),
		glClientWaitSync:                    getProcAddr("glClientWaitSync"),
		glClipPlane:                         getProcAddr("glClipPlane"),
		glColor3b:                           getProcAddr("glColor3b"),
		glColor3bv:                          getProcAddr("glColor3bv"),
		glColor3d:                           getProcAddr("glColor3d"),
		glColor3dv:                          getProcAddr("glColor3dv"),
		glColor3f:                           getProcAddr("glColor3f"),
		glColor3fv:                          getProcAddr("glColor3fv"),
		glColor3i:                           getProcAddr("glColor3i"),
		glColor3iv:                          getProcAddr("glColor3iv"),
		glColor3s:                           getProcAddr("glColor3s"),
		glColor3sv:                          getProcAddr("glColor3sv"),
		glColor3ub:                          getProcAddr("glColor3ub"),
		glColor3ubv:                         getProcAddr("glColor3ubv"),
		glColor3ui:                          getProcAddr("glColor3ui"),
		glColor3uiv:                         getProcAddr("glColor3uiv"),
		glColor3us:                          getProcAddr("glColor3us"),
		glColor3usv:                         getProcAddr("glColor3usv"),
		glColor4b:                           getProcAddr("glColor4b"),
		glColor4bv:                          getProcAddr("glColor4bv"),
		glColor4d:                           getProcAddr("glColor4d"),
		glColor4dv:                          getProcAddr("glColor4dv"),
		glColor4f:                           getProcAddr("glColor4f"),
		glColor4fv:                          getProcAddr("glColor4fv"),
		glColor4i:                           getProcAddr("glColor4i"),
		glColor4iv:                          getProcAddr("glColor4iv"),
		glColor4s:                           getProcAddr("glColor4s"),
		glColor4sv:                          getProcAddr("glColor4sv"),
		glColor4ub:                          getProcAddr("glColor4ub"),
		glColor4ubv:                         getProcAddr("glColor4ubv"),
		glColor4ui:                          getProcAddr("glColor4ui"),
		glColor4uiv:                         getProcAddr("glColor4uiv"),
		glColor4us:                          getProcAddr("glColor4us"),
		glColor4usv:                         getProcAddr("glColor4usv"),
		glColorMask:                         getProcAddr("glColorMask"),
		glColorMaski:                        getProcAddr("glColorMaski"),
		glColorMaterial:                     getProcAddr("glColorMaterial"),
		glColorP3ui:                         getProcAddr("glColorP3ui"),
		glColorP3uiv:                        getProcAddr("glColorP3uiv"),
		glColorP4ui:                         getProcAddr("glColorP4ui"),
		glColorP4uiv:                        getProcAddr("glColorP4uiv"),
		glColorPointer:                      getProcAddr("glColorPointer"),
		glCompileShader:                     getProcAddr("glCompileShader"),
		glCompressedTexImage1D:              getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:              getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:              getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D:           getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D:           getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D:           getProcAddr("glCompressedTexSubImage3D"),
		glCopyBufferSubData:                 getProcAddr("glCopyBufferSubData"),
		glCopyImageSubData:                  getProcAddr("glCopyImageSubData"),
		glCopyPixels:                        getProcAddr("glCopyPixels"),
		glCopyTexImage1D:                    getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:                    getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:                 getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:                 getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:                 getProcAddr("glCopyTexSubImage3D"),
		glCreateProgram:                     getProcAddr("glCreateProgram"),
		glCreateShader:                      getProcAddr("glCreateShader"),
		glCreateShaderProgramv:              getProcAddr("glCreateShaderProgramv"),
		glCullFace:                          getProcAddr("glCullFace"),
		glDebugMessageCallback:              getProcAddr("glDebugMessageCallback"),
		glDebugMessageControl:               getProcAddr("glDebugMessageControl"),
		glDebugMessageInsert:                getProcAddr("glDebugMessageInsert"),
		glDeleteBuffers:                     getProcAddr("glDeleteBuffers"),
		glDeleteFramebuffers:                getProcAddr("glDeleteFramebuffers"),
		glDeleteLists:                       getProcAddr("glDeleteLists"),
		glDeleteProgram:                     getProcAddr("glDeleteProgram"),
		glDeleteProgramPipelines:            getProcAddr("glDeleteProgramPipelines"),
		glDeleteQueries:                     getProcAddr("glDeleteQueries"),
		glDeleteRenderbuffers:               getProcAddr("glDeleteRenderbuffers"),
		glDeleteSamplers:                    getProcAddr("glDeleteSamplers"),
		glDeleteShader:                      getProcAddr("glDeleteShader"),
		glDeleteSync:                        getProcAddr("glDeleteSync"),
		glDeleteTextures:                    getProcAddr("glDeleteTextures"),
		glDeleteTransformFeedbacks:          getProcAddr("glDeleteTransformFeedbacks"),
		glDeleteVertexArrays:                getProcAddr("glDeleteVertexArrays"),
		glDepthFunc:                         getProcAddr("glDepthFunc"),
		glDepthMask:                         getProcAddr("glDepthMask"),
		glDepthRange:                        getProcAddr("glDepthRange"),
		glDepthRangeArrayv:                  getProcAddr("glDepthRangeArrayv"),
		glDepthRangeIndexed:                 getProcAddr("glDepthRangeIndexed"),
		glDepthRangef:                       getProcAddr("glDepthRangef"),
		glDetachShader:                      getProcAddr("glDetachShader"),
		glDisable:                           getProcAddr("glDisable"),
		glDisableClientState:                getProcAddr("glDisableClientState"),
		glDisableVertexAttribArray:          getProcAddr("glDisableVertexAttribArray"),
		glDisablei:                          getProcAddr("glDisablei"),
		glDispatchCompute:                   getProcAddr("glDispatchCompute"),
		glDispatchComputeIndirect:           getProcAddr("glDispatchComputeIndirect"),
		glDrawArrays:                        getProcAddr("glDrawArrays"),
		glDrawArraysIndirect:                getProcAddr("glDrawArraysIndirect"),
		glDrawArraysInstanced:               getProcAddr("glDrawArraysInstanced"),
		glDrawArraysInstancedBaseInstance:   getProcAddr("glDrawArraysInstancedBaseInstance"),
		glDrawBuffer:                        getProcAddr("glDrawBuffer"),
		glDrawBuffers:                       getProcAddr("glDrawBuffers"),
		glDrawElements:                      getProcAddr("glDrawElements"),
		glDrawElementsBaseVertex:            getProcAddr("glDrawElementsBaseVertex"),
		glDrawElementsIndirect:              getProcAddr("glDrawElementsIndirect"),
		glDrawElementsInstanced:             getProcAddr("glDrawElementsInstanced"),
		glDrawElementsInstancedBaseInstance: getProcAddr("glDrawElementsInstancedBaseInstance"),
		glDrawElementsInstancedBaseVertex:   getProcAddr("glDrawElementsInstancedBaseVertex"),
		glDrawElementsInstancedBaseVertexBaseInstance: getProcAddr("glDrawElementsInstancedBaseVertexBaseInstance"),
		glDrawPixels:                           getProcAddr("glDrawPixels"),
		glDrawRangeElements:                    getProcAddr("glDrawRangeElements"),
		glDrawRangeElementsBaseVertex:          getProcAddr("glDrawRangeElementsBaseVertex"),
		glDrawTransformFeedback:                getProcAddr("glDrawTransformFeedback"),
		glDrawTransformFeedbackInstanced:       getProcAddr("glDrawTransformFeedbackInstanced"),
		glDrawTransformFeedbackStream:          getProcAddr("glDrawTransformFeedbackStream"),
		glDrawTransformFeedbackStreamInstanced: getProcAddr("glDrawTransformFeedbackStreamInstanced"),
		glEdgeFlag:                             getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:                      getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:                            getProcAddr("glEdgeFlagv"),
		glEnable:                               getProcAddr("glEnable"),
		glEnableClientState:                    getProcAddr("glEnableClientState"),
		glEnableVertexAttribArray:              getProcAddr("glEnableVertexAttribArray"),
		glEnablei:                              getProcAddr("glEnablei"),
		glEnd:                                  getProcAddr("glEnd"),
		glEndConditionalRender:                 getProcAddr("glEndConditionalRender"),
		glEndList:                              getProcAddr("glEndList"),
		glEndQuery:                             getProcAddr("glEndQuery"),
		glEndQueryIndexed:                      getProcAddr("glEndQueryIndexed"),
		glEndTransformFeedback:                 getProcAddr("glEndTransformFeedback"),
		glEvalCoord1d:                          getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:                         getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:                          getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:                         getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:                          getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:                         getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:                          getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:                         getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:                            getProcAddr("glEvalMesh1"),
		glEvalMesh2:                            getProcAddr("glEvalMesh2"),
		glEvalPoint1:                           getProcAddr("glEvalPoint1"),
		glEvalPoint2:                           getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:                       getProcAddr("glFeedbackBuffer"),
		glFenceSync:                            getProcAddr("glFenceSync"),
		glFinish:                               getProcAddr("glFinish"),
		glFlush:                                getProcAddr("glFlush"),
		glFlushMappedBufferRange:               getProcAddr("glFlushMappedBufferRange"),
		glFogCoordPointer:                      getProcAddr("glFogCoordPointer"),
		glFogCoordd:                            getProcAddr("glFogCoordd"),
		glFogCoorddv:                           getProcAddr("glFogCoorddv"),
		glFogCoordf:                            getProcAddr("glFogCoordf"),
		glFogCoordfv:                           getProcAddr("glFogCoordfv"),
		glFogf:                                 getProcAddr("glFogf"),
		glFogfv:                                getProcAddr("glFogfv"),
		glFogi:                                 getProcAddr("glFogi"),
		glFogiv:                                getProcAddr("glFogiv"),
		glFramebufferParameteri:                getProcAddr("glFramebufferParameteri"),
		glFramebufferRenderbuffer:              getProcAddr("glFramebufferRenderbuffer"),
		glFramebufferTexture:                   getProcAddr("glFramebufferTexture"),
		glFramebufferTexture1D:                 getProcAddr("glFramebufferTexture1D"),
		glFramebufferTexture2D:                 getProcAddr("glFramebufferTexture2D"),
		glFramebufferTexture3D:                 getProcAddr("glFramebufferTexture3D"),
		glFramebufferTextureLayer:              getProcAddr("glFramebufferTextureLayer"),
		glFrontFace:                            getProcAddr("glFrontFace"),
		glFrustum:                              getProcAddr("glFrustum"),
		glGenBuffers:                           getProcAddr("glGenBuffers"),
		glGenFramebuffers:                      getProcAddr("glGenFramebuffers"),
		glGenLists:                             getProcAddr("glGenLists"),
		glGenProgramPipelines:                  getProcAddr("glGenProgramPipelines"),
		glGenQueries:                           getProcAddr("glGenQueries"),
		glGenRenderbuffers:                     getProcAddr("glGenRenderbuffers"),
		glGenSamplers:                          getProcAddr("glGenSamplers"),
		glGenTextures:                          getProcAddr("glGenTextures"),
		glGenTransformFeedbacks:                getProcAddr("glGenTransformFeedbacks"),
		glGenVertexArrays:                      getProcAddr("glGenVertexArrays"),
		glGenerateMipmap:                       getProcAddr("glGenerateMipmap"),
		glGetActiveAtomicCounterBufferiv:       getProcAddr("glGetActiveAtomicCounterBufferiv"),
		glGetActiveAttrib:                      getProcAddr("glGetActiveAttrib"),
		glGetActiveSubroutineName:              getProcAddr("glGetActiveSubroutineName"),
		glGetActiveSubroutineUniformName:       getProcAddr("glGetActiveSubroutineUniformName"),
		glGetActiveSubroutineUniformiv:         getProcAddr("glGetActiveSubroutineUniformiv"),
		glGetActiveUniform:                     getProcAddr("glGetActiveUniform"),
		glGetActiveUniformBlockName:            getProcAddr("glGetActiveUniformBlockName"),
		glGetActiveUniformBlockiv:              getProcAddr("glGetActiveUniformBlockiv"),
		glGetActiveUniformName:                 getProcAddr("glGetActiveUniformName"),
		glGetActiveUniformsiv:                  getProcAddr("glGetActiveUniformsiv"),
		glGetAttachedShaders:                   getProcAddr("glGetAttachedShaders"),
		glGetAttribLocation:                    getProcAddr("glGetAttribLocation"),
		glGetBooleani_v:                        getProcAddr("glGetBooleani_v"),
		glGetBooleanv:                          getProcAddr("glGetBooleanv"),
		glGetBufferParameteri64v:               getProcAddr("glGetBufferParameteri64v"),
		glGetBufferParameteriv:                 getProcAddr("glGetBufferParameteriv"),
		glGetBufferPointerv:                    getProcAddr("glGetBufferPointerv"),
		glGetBufferSubData:                     getProcAddr("glGetBufferSubData"),
		glGetClipPlane:                         getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:                getProcAddr("glGetCompressedTexImage"),
		glGetDebugMessageLog:                   getProcAddr("glGetDebugMessageLog"),
		glGetDoublei_v:                         getProcAddr("glGetDoublei_v"),
		glGetDoublev:                           getProcAddr("glGetDoublev"),
		glGetError:                             getProcAddr("glGetError"),
		glGetFloati_v:                          getProcAddr("glGetFloati_v"),
		glGetFloatv:                            getProcAddr("glGetFloatv"),
		glGetFragDataIndex:                     getProcAddr("glGetFragDataIndex"),
		glGetFragDataLocation:                  getProcAddr("glGetFragDataLocation"),
		glGetFramebufferAttachmentParameteriv:  getProcAddr("glGetFramebufferAttachmentParameteriv"),
		glGetFramebufferParameteriv:            getProcAddr("glGetFramebufferParameteriv"),
		glGetInteger64i_v:                      getProcAddr("glGetInteger64i_v"),
		glGetInteger64v:                        getProcAddr("glGetInteger64v"),
		glGetIntegeri_v:                        getProcAddr("glGetIntegeri_v"),
		glGetIntegerv:                          getProcAddr("glGetIntegerv"),
		glGetInternalformati64v:                getProcAddr("glGetInternalformati64v"),
		glGetInternalformativ:                  getProcAddr("glGetInternalformativ"),
		glGetLightfv:                           getProcAddr("glGetLightfv"),
		glGetLightiv:                           getProcAddr("glGetLightiv"),
		glGetMapdv:                             getProcAddr("glGetMapdv"),
		glGetMapfv:                             getProcAddr("glGetMapfv"),
		glGetMapiv:                             getProcAddr("glGetMapiv"),
		glGetMaterialfv:                        getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:                        getProcAddr("glGetMaterialiv"),
		glGetMultisamplefv:                     getProcAddr("glGetMultisamplefv"),
		glGetObjectLabel:                       getProcAddr("glGetObjectLabel"),
		glGetObjectPtrLabel:                    getProcAddr("glGetObjectPtrLabel"),
		glGetPixelMapfv:                        getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:                       getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:                       getProcAddr("glGetPixelMapusv"),
		glGetPointerv:                          getProcAddr("glGetPointerv"),
		glGetPolygonStipple:                    getProcAddr("glGetPolygonStipple"),
		glGetProgramBinary:                     getProcAddr("glGetProgramBinary"),
		glGetProgramInfoLog:                    getProcAddr("glGetProgramInfoLog"),
		glGetProgramInterfaceiv:                getProcAddr("glGetProgramInterfaceiv"),
		glGetProgramPipelineInfoLog:            getProcAddr("glGetProgramPipelineInfoLog"),
		glGetProgramPipelineiv:                 getProcAddr("glGetProgramPipelineiv"),
		glGetProgramResourceIndex:              getProcAddr("glGetProgramResourceIndex"),
		glGetProgramResourceLocation:           getProcAddr("glGetProgramResourceLocation"),
		glGetProgramResourceLocationIndex:      getProcAddr("glGetProgramResourceLocationIndex"),
		glGetProgramResourceName:               getProcAddr("glGetProgramResourceName"),
		glGetProgramResourceiv:                 getProcAddr("glGetProgramResourceiv"),
		glGetProgramStageiv:                    getProcAddr("glGetProgramStageiv"),
		glGetProgramiv:                         getProcAddr("glGetProgramiv"),
		glGetQueryIndexediv:                    getProcAddr("glGetQueryIndexediv"),
		glGetQueryObjecti64v:                   getProcAddr("glGetQueryObjecti64v"),
		glGetQueryObjectiv:                     getProcAddr("glGetQueryObjectiv"),
		glGetQueryObjectui64v:                  getProcAddr("glGetQueryObjectui64v"),
		glGetQueryObjectuiv:                    getProcAddr("glGetQueryObjectuiv"),
		glGetQueryiv:                           getProcAddr("glGetQueryiv"),
		glGetRenderbufferParameteriv:           getProcAddr("glGetRenderbufferParameteriv"),
		glGetSamplerParameterIiv:               getProcAddr("glGetSamplerParameterIiv"),
		glGetSamplerParameterIuiv:              getProcAddr("glGetSamplerParameterIuiv"),
		glGetSamplerParameterfv:                getProcAddr("glGetSamplerParameterfv"),
		glGetSamplerParameteriv:                getProcAddr("glGetSamplerParameteriv"),
		glGetShaderInfoLog:                     getProcAddr("glGetShaderInfoLog"),
		glGetShaderPrecisionFormat:             getProcAddr("glGetShaderPrecisionFormat"),
		glGetShaderSource:                      getProcAddr("glGetShaderSource"),
		glGetShaderiv:                          getProcAddr("glGetShaderiv"),
		glGetString:                            getProcAddr("glGetString"),
		glGetStringi:                           getProcAddr("glGetStringi"),
		glGetSubroutineIndex:                   getProcAddr("glGetSubroutineIndex"),
		glGetSubroutineUniformLocation:         getProcAddr("glGetSubroutineUniformLocation"),
		glGetSynciv:                            getProcAddr("glGetSynciv"),
		glGetTexEnvfv:                          getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:                          getProcAddr("glGetTexEnviv"),
		glGetTexGendv:                          getProcAddr("glGetTexGendv"),
		glGetTexGenfv:                          getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:                          getProcAddr("glGetTexGeniv"),
		glGetTexImage:                          getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:               getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:               getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterIiv:                   getProcAddr("glGetTexParameterIiv"),
		glGetTexParameterIuiv:                  getProcAddr("glGetTexParameterIuiv"),
		glGetTexParameterfv:                    getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:                    getProcAddr("glGetTexParameteriv"),
		glGetTransformFeedbackVarying:          getProcAddr("glGetTransformFeedbackVarying"),
		glGetUniformBlockIndex:                 getProcAddr("glGetUniformBlockIndex"),
		glGetUniformIndices:                    getProcAddr("glGetUniformIndices"),
		glGetUniformLocation:                   getProcAddr("glGetUniformLocation"),
		glGetUniformSubroutineuiv:              getProcAddr("glGetUniformSubroutineuiv"),
		glGetUniformdv:                         getProcAddr("glGetUniformdv"),
		glGetUniformfv:                         getProcAddr("glGetUniformfv"),
		glGetUniformiv:                         getProcAddr("glGetUniformiv"),
		glGetUniformuiv:                        getProcAddr("glGetUniformuiv"),
		glGetVertexAttribIiv:                   getProcAddr("glGetVertexAttribIiv"),
		glGetVertexAttribIuiv:                  getProcAddr("glGetVertexAttribIuiv"),
		glGetVertexAttribLdv:                   getProcAddr("glGetVertexAttribLdv"),
		glGetVertexAttribPointerv:              getProcAddr("glGetVertexAttribPointerv"),
		glGetVertexAttribdv:                    getProcAddr("glGetVertexAttribdv"),
		glGetVertexAttribfv:                    getProcAddr("glGetVertexAttribfv"),
		glGetVertexAttribiv:                    getProcAddr("glGetVertexAttribiv"),
		glHint:                                 getProcAddr("glHint"),
		glIndexMask:                            getProcAddr("glIndexMask"),
		glIndexPointer:                         getProcAddr("glIndexPointer"),
		glIndexd:                               getProcAddr("glIndexd"),
		glIndexdv:                              getProcAddr("glIndexdv"),
		glIndexf:                               getProcAddr("glIndexf"),
		glIndexfv:                              getProcAddr("glIndexfv"),
		glIndexi:                               getProcAddr("glIndexi"),
		glIndexiv:                              getProcAddr("glIndexiv"),
		glIndexs:                               getProcAddr("glIndexs"),
		glIndexsv:                              getProcAddr("glIndexsv"),
		glIndexub:                              getProcAddr("glIndexub"),
		glIndexubv:                             getProcAddr("glIndexubv"),
		glInitNames:                            getProcAddr("glInitNames"),
		glInterleavedArrays:                    getProcAddr("glInterleavedArrays"),
		glInvalidateBufferData:                 getProcAddr("glInvalidateBufferData"),
		glInvalidateBufferSubData:              getProcAddr("glInvalidateBufferSubData"),
		glInvalidateFramebuffer:                getProcAddr("glInvalidateFramebuffer"),
		glInvalidateSubFramebuffer:             getProcAddr("glInvalidateSubFramebuffer"),
		glInvalidateTexImage:                   getProcAddr("glInvalidateTexImage"),
		glInvalidateTexSubImage:                getProcAddr("glInvalidateTexSubImage"),
		glIsBuffer:                             getProcAddr("glIsBuffer"),
		glIsEnabled:                            getProcAddr("glIsEnabled"),
		glIsEnabledi:                           getProcAddr("glIsEnabledi"),
		glIsFramebuffer:                        getProcAddr("glIsFramebuffer"),
		glIsList:                               getProcAddr("glIsList"),
		glIsProgram:                            getProcAddr("glIsProgram"),
		glIsProgramPipeline:                    getProcAddr("glIsProgramPipeline"),
		glIsQuery:                              getProcAddr("glIsQuery"),
		glIsRenderbuffer:                       getProcAddr("glIsRenderbuffer"),
		glIsSampler:                            getProcAddr("glIsSampler"),
		glIsShader:                             getProcAddr("glIsShader"),
		glIsSync:                               getProcAddr("glIsSync"),
		glIsTexture:                            getProcAddr("glIsTexture"),
		glIsTransformFeedback:                  getProcAddr("glIsTransformFeedback"),
		glIsVertexArray:                        getProcAddr("glIsVertexArray"),
		glLightModelf:                          getProcAddr("glLightModelf"),
		glLightModelfv:                         getProcAddr("glLightModelfv"),
		glLightModeli:                          getProcAddr("glLightModeli"),
		glLightModeliv:                         getProcAddr("glLightModeliv"),
		glLightf:                               getProcAddr("glLightf"),
		glLightfv:                              getProcAddr("glLightfv"),
		glLighti:                               getProcAddr("glLighti"),
		glLightiv:                              getProcAddr("glLightiv"),
		glLineStipple:                          getProcAddr("glLineStipple"),
		glLineWidth:                            getProcAddr("glLineWidth"),
		glLinkProgram:                          getProcAddr("glLinkProgram"),
		glListBase:                             getProcAddr("glListBase"),
		glLoadIdentity:                         getProcAddr("glLoadIdentity"),
		glLoadMatrixd:                          getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:                          getProcAddr("glLoadMatrixf"),
		glLoadName:                             getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:                 getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:                 getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                              getProcAddr("glLogicOp"),
		glMap1d:                                getProcAddr("glMap1d"),
		glMap1f:                                getProcAddr("glMap1f"),
		glMap2d:                                getProcAddr("glMap2d"),
		glMap2f:                                getProcAddr("glMap2f"),
		glMapBuffer:                            getProcAddr("glMapBuffer"),
		glMapBufferRange:                       getProcAddr("glMapBufferRange"),
		glMapGrid1d:                            getProcAddr("glMapGrid1d"),
		glMapGrid1f:                            getProcAddr("glMapGrid1f"),
		glMapGrid2d:                            getProcAddr("glMapGrid2d"),
		glMapGrid2f:                            getProcAddr("glMapGrid2f"),
		glMaterialf:                            getProcAddr("glMaterialf"),
		glMaterialfv:                           getProcAddr("glMaterialfv"),
		glMateriali:                            getProcAddr("glMateriali"),
		glMaterialiv:                           getProcAddr("glMaterialiv"),
		glMatrixMode:                           getProcAddr("glMatrixMode"),
		glMemoryBarrier:                        getProcAddr("glMemoryBarrier"),
		glMinSampleShading:                     getProcAddr("glMinSampleShading"),
		glMultMatrixd:                          getProcAddr("glMultMatrixd"),
		glMultMatrixf:                          getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:                 getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:                 getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:                      getProcAddr("glMultiDrawArrays"),
		glMultiDrawArraysIndirect:              getProcAddr("glMultiDrawArraysIndirect"),
		glMultiDrawElements:                    getProcAddr("glMultiDrawElements"),
		glMultiDrawElementsBaseVertex:          getProcAddr("glMultiDrawElementsBaseVertex"),
		glMultiDrawElementsIndirect:            getProcAddr("glMultiDrawElementsIndirect"),
		glMultiTexCoord1d:                      getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:                     getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:                      getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:                     getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:                      getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:                     getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:                      getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:                     getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:                      getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:                     getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:                      getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:                     getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:                      getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:                     getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:                      getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:                     getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:                      getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:                     getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:                      getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:                     getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:                      getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:                     getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:                      getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:                     getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:                      getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:                     getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:                      getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:                     getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:                      getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:                     getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:                      getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:                     getProcAddr("glMultiTexCoord4sv"),
		glMultiTexCoordP1ui:                    getProcAddr("glMultiTexCoordP1ui"),
		glMultiTexCoordP1uiv:                   getProcAddr("glMultiTexCoordP1uiv"),
		glMultiTexCoordP2ui:                    getProcAddr("glMultiTexCoordP2ui"),
		glMultiTexCoordP2uiv:                   getProcAddr("glMultiTexCoordP2uiv"),
		glMultiTexCoordP3ui:                    getProcAddr("glMultiTexCoordP3ui"),
		glMultiTexCoordP3uiv:                   getProcAddr("glMultiTexCoordP3uiv"),
		glMultiTexCoordP4ui:                    getProcAddr("glMultiTexCoordP4ui"),
		glMultiTexCoordP4uiv:                   getProcAddr("glMultiTexCoordP4uiv"),
		glNewList:                              getProcAddr("glNewList"),
		glNormal3b:                             getProcAddr("glNormal3b"),
		glNormal3bv:                            getProcAddr("glNormal3bv"),
		glNormal3d:                             getProcAddr("glNormal3d"),
		glNormal3dv:                            getProcAddr("glNormal3dv"),
		glNormal3f:                             getProcAddr("glNormal3f"),
		glNormal3fv:                            getProcAddr("glNormal3fv"),
		glNormal3i:                             getProcAddr("glNormal3i"),
		glNormal3iv:                            getProcAddr("glNormal3iv"),
		glNormal3s:                             getProcAddr("glNormal3s"),
		glNormal3sv:                            getProcAddr("glNormal3sv"),
		glNormalP3ui:                           getProcAddr("glNormalP3ui"),
		glNormalP3uiv:                          getProcAddr("glNormalP3uiv"),
		glNormalPointer:                        getProcAddr("glNormalPointer"),
		glObjectLabel:                          getProcAddr("glObjectLabel"),
		glObjectPtrLabel:                       getProcAddr("glObjectPtrLabel"),
		glOrtho:                                getProcAddr("glOrtho"),
		glPassThrough:                          getProcAddr("glPassThrough"),
		glPatchParameterfv:                     getProcAddr("glPatchParameterfv"),
		glPatchParameteri:                      getProcAddr("glPatchParameteri"),
		glPauseTransformFeedback:               getProcAddr("glPauseTransformFeedback"),
		glPixelMapfv:                           getProcAddr("glPixelMapfv"),
		glPixelMapuiv:                          getProcAddr("glPixelMapuiv"),
		glPixelMapusv:                          getProcAddr("glPixelMapusv"),
		glPixelStoref:                          getProcAddr("glPixelStoref"),
		glPixelStorei:                          getProcAddr("glPixelStorei"),
		glPixelTransferf:                       getProcAddr("glPixelTransferf"),
		glPixelTransferi:                       getProcAddr("glPixelTransferi"),
		glPixelZoom:                            getProcAddr("glPixelZoom"),
		glPointParameterf:                      getProcAddr("glPointParameterf"),
		glPointParameterfv:                     getProcAddr("glPointParameterfv"),
		glPointParameteri:                      getProcAddr("glPointParameteri"),
		glPointParameteriv:                     getProcAddr("glPointParameteriv"),
		glPointSize:                            getProcAddr("glPointSize"),
		glPolygonMode:                          getProcAddr("glPolygonMode"),
		glPolygonOffset:                        getProcAddr("glPolygonOffset"),
		glPolygonStipple:                       getProcAddr("glPolygonStipple"),
		glPopAttrib:                            getProcAddr("glPopAttrib"),
		glPopClientAttrib:                      getProcAddr("glPopClientAttrib"),
		glPopDebugGroup:                        getProcAddr("glPopDebugGroup"),
		glPopMatrix:                            getProcAddr("glPopMatrix"),
		glPopName:                              getProcAddr("glPopName"),
		glPrimitiveRestartIndex:                getProcAddr("glPrimitiveRestartIndex"),
		glPrioritizeTextures:                   getProcAddr("glPrioritizeTextures"),
		glProgramBinary:                        getProcAddr("glProgramBinary"),
		glProgramParameteri:                    getProcAddr("glProgramParameteri"),
		glProgramUniform1d:                     getProcAddr("glProgramUniform1d"),
		glProgramUniform1dv:                    getProcAddr("glProgramUniform1dv"),
		glProgramUniform1f:                     getProcAddr("glProgramUniform1f"),
		glProgramUniform1fv:                    getProcAddr("glProgramUniform1fv"),
		glProgramUniform1i:                     getProcAddr("glProgramUniform1i"),
		glProgramUniform1iv:                    getProcAddr("glProgramUniform1iv"),
		glProgramUniform1ui:                    getProcAddr("glProgramUniform1ui"),
		glProgramUniform1uiv:                   getProcAddr("glProgramUniform1uiv"),
		glProgramUniform2d:                     getProcAddr("glProgramUniform2d"),
		glProgramUniform2dv:                    getProcAddr("glProgramUniform2dv"),
		glProgramUniform2f:                     getProcAddr("glProgramUniform2f"),
		glProgramUniform2fv:                    getProcAddr("glProgramUniform2fv"),
		glProgramUniform2i:                     getProcAddr("glProgramUniform2i"),
		glProgramUniform2iv:                    getProcAddr("glProgramUniform2iv"),
		glProgramUniform2ui:                    getProcAddr("glProgramUniform2ui"),
		glProgramUniform2uiv:                   getProcAddr("glProgramUniform2uiv"),
		glProgramUniform3d:                     getProcAddr("glProgramUniform3d"),
		glProgramUniform3dv:                    getProcAddr("glProgramUniform3dv"),
		glProgramUniform3f:                     getProcAddr("glProgramUniform3f"),
		glProgramUniform3fv:                    getProcAddr("glProgramUniform3fv"),
		glProgramUniform3i:                     getProcAddr("glProgramUniform3i"),
		glProgramUniform3iv:                    getProcAddr("glProgramUniform3iv"),
		glProgramUniform3ui:                    getProcAddr("glProgramUniform3ui"),
		glProgramUniform3uiv:                   getProcAddr("glProgramUniform3uiv"),
		glProgramUniform4d:                     getProcAddr("glProgramUniform4d"),
		glProgramUniform4dv:                    getProcAddr("glProgramUniform4dv"),
		glProgramUniform4f:                     getProcAddr("glProgramUniform4f"),
		glProgramUniform4fv:                    getProcAddr("glProgramUniform4fv"),
		glProgramUniform4i:                     getProcAddr("glProgramUniform4i"),
		glProgramUniform4iv:                    getProcAddr("glProgramUniform4iv"),
		glProgramUniform4ui:                    getProcAddr("glProgramUniform4ui"),
		glProgramUniform4uiv:                   getProcAddr("glProgramUniform4uiv"),
		glProgramUniformMatrix2dv:              getProcAddr("glProgramUniformMatrix2dv"),
		glProgramUniformMatrix2fv:              getProcAddr("glProgramUniformMatrix2fv"),
		glProgramUniformMatrix2x3dv:            getProcAddr("glProgramUniformMatrix2x3dv"),
		glProgramUniformMatrix2x3fv:            getProcAddr("glProgramUniformMatrix2x3fv"),
		glProgramUniformMatrix2x4dv:            getProcAddr("glProgramUniformMatrix2x4dv"),
		glProgramUniformMatrix2x4fv:            getProcAddr("glProgramUniformMatrix2x4fv"),
		glProgramUniformMatrix3dv:              getProcAddr("glProgramUniformMatrix3dv"),
		glProgramUniformMatrix3fv:              getProcAddr("glProgramUniformMatrix3fv"),
		glProgramUniformMatrix3x2dv:            getProcAddr("glProgramUniformMatrix3x2dv"),
		glProgramUniformMatrix3x2fv:            getProcAddr("glProgramUniformMatrix3x2fv"),
		glProgramUniformMatrix3x4dv:            getProcAddr("glProgramUniformMatrix3x4dv"),
		glProgramUniformMatrix3x4fv:            getProcAddr("glProgramUniformMatrix3x4fv"),
		glProgramUniformMatrix4dv:              getProcAddr("glProgramUniformMatrix4dv"),
		glProgramUniformMatrix4fv:              getProcAddr("glProgramUniformMatrix4fv"),
		glProgramUniformMatrix4x2dv:            getProcAddr("glProgramUniformMatrix4x2dv"),
		glProgramUniformMatrix4x2fv:            getProcAddr("glProgramUniformMatrix4x2fv"),
		glProgramUniformMatrix4x3dv:            getProcAddr("glProgramUniformMatrix4x3dv"),
		glProgramUniformMatrix4x3fv:            getProcAddr("glProgramUniformMatrix4x3fv"),
		glProvokingVertex:                      getProcAddr("glProvokingVertex"),
		glPushAttrib:                           getProcAddr("glPushAttrib"),
		glPushClientAttrib:                     getProcAddr("glPushClientAttrib"),
		glPushDebugGroup:                       getProcAddr("glPushDebugGroup"),
		glPushMatrix:                           getProcAddr("glPushMatrix"),
		glPushName:                             getProcAddr("glPushName"),
		glQueryCounter:                         getProcAddr("glQueryCounter"),
		glRasterPos2d:                          getProcAddr("glRasterPos2d"),
		glRasterPos2dv:                         getProcAddr("glRasterPos2dv"),
		glRasterPos2f:                          getProcAddr("glRasterPos2f"),
		glRasterPos2fv:                         getProcAddr("glRasterPos2fv"),
		glRasterPos2i:                          getProcAddr("glRasterPos2i"),
		glRasterPos2iv:                         getProcAddr("glRasterPos2iv"),
		glRasterPos2s:                          getProcAddr("glRasterPos2s"),
		glRasterPos2sv:                         getProcAddr("glRasterPos2sv"),
		glRasterPos3d:                          getProcAddr("glRasterPos3d"),
		glRasterPos3dv:                         getProcAddr("glRasterPos3dv"),
		glRasterPos3f:                          getProcAddr("glRasterPos3f"),
		glRasterPos3fv:                         getProcAddr("glRasterPos3fv"),
		glRasterPos3i:                          getProcAddr("glRasterPos3i"),
		glRasterPos3iv:                         getProcAddr("glRasterPos3iv"),
		glRasterPos3s:                          getProcAddr("glRasterPos3s"),
		glRasterPos3sv:                         getProcAddr("glRasterPos3sv"),
		glRasterPos4d:                          getProcAddr("glRasterPos4d"),
		glRasterPos4dv:                         getProcAddr("glRasterPos4dv"),
		glRasterPos4f:                          getProcAddr("glRasterPos4f"),
		glRasterPos4fv:                         getProcAddr("glRasterPos4fv"),
		glRasterPos4i:                          getProcAddr("glRasterPos4i"),
		glRasterPos4iv:                         getProcAddr("glRasterPos4iv"),
		glRasterPos4s:                          getProcAddr("glRasterPos4s"),
		glRasterPos4sv:                         getProcAddr("glRasterPos4sv"),
		glReadBuffer:                           getProcAddr("glReadBuffer"),
		glReadPixels:                           getProcAddr("glReadPixels"),
		glRectd:                                getProcAddr("glRectd"),
		glRectdv:                               getProcAddr("glRectdv"),
		glRectf:                                getProcAddr("glRectf"),
		glRectfv:                               getProcAddr("glRectfv"),
		glRecti:                                getProcAddr("glRecti"),
		glRectiv:                               getProcAddr("glRectiv"),
		glRects:                                getProcAddr("glRects"),
		glRectsv:                               getProcAddr("glRectsv"),
		glReleaseShaderCompiler:                getProcAddr("glReleaseShaderCompiler"),
		glRenderMode:                           getProcAddr("glRenderMode"),
		glRenderbufferStorage:                  getProcAddr("glRenderbufferStorage"),
		glRenderbufferStorageMultisample:       getProcAddr("glRenderbufferStorageMultisample"),
		glResumeTransformFeedback:              getProcAddr("glResumeTransformFeedback"),
		glRotated:                              getProcAddr("glRotated"),
		glRotatef:                              getProcAddr("glRotatef"),
		glSampleCoverage:                       getProcAddr("glSampleCoverage"),
		glSampleMaski:                          getProcAddr("glSampleMaski"),
		glSamplerParameterIiv:                  getProcAddr("glSamplerParameterIiv"),
		glSamplerParameterIuiv:                 getProcAddr("glSamplerParameterIuiv"),
		glSamplerParameterf:                    getProcAddr("glSamplerParameterf"),
		glSamplerParameterfv:                   getProcAddr("glSamplerParameterfv"),
		glSamplerParameteri:                    getProcAddr("glSamplerParameteri"),
		glSamplerParameteriv:                   getProcAddr("glSamplerParameteriv"),
		glScaled:                               getProcAddr("glScaled"),
		glScalef:                               getProcAddr("glScalef"),
		glScissor:                              getProcAddr("glScissor"),
		glScissorArrayv:                        getProcAddr("glScissorArrayv"),
		glScissorIndexed:                       getProcAddr("glScissorIndexed"),
		glScissorIndexedv:                      getProcAddr("glScissorIndexedv"),
		glSecondaryColor3b:                     getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:                    getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:                     getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:                    getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:                     getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:                    getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:                     getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:                    getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:                     getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:                    getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:                    getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:                   getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:                    getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:                   getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:                    getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:                   getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorP3ui:                   getProcAddr("glSecondaryColorP3ui"),
		glSecondaryColorP3uiv:                  getProcAddr("glSecondaryColorP3uiv"),
		glSecondaryColorPointer:                getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:                         getProcAddr("glSelectBuffer"),
		glShadeModel:                           getProcAddr("glShadeModel"),
		glShaderBinary:                         getProcAddr("glShaderBinary"),
		glShaderSource:                         getProcAddr("glShaderSource"),
		glShaderStorageBlockBinding:            getProcAddr("glShaderStorageBlockBinding"),
		glStencilFunc:                          getProcAddr("glStencilFunc"),
		glStencilFuncSeparate:                  getProcAddr("glStencilFuncSeparate"),
		glStencilMask:                          getProcAddr("glStencilMask"),
		glStencilMaskSeparate:                  getProcAddr("glStencilMaskSeparate"),
		glStencilOp:                            getProcAddr("glStencilOp"),
		glStencilOpSeparate:                    getProcAddr("glStencilOpSeparate"),
		glTexBuffer:                            getProcAddr("glTexBuffer"),
		glTexBufferRange:                       getProcAddr("glTexBufferRange"),
		glTexCoord1d:                           getProcAddr("glTexCoord1d"),
		glTexCoord1dv:                          getProcAddr("glTexCoord1dv"),
		glTexCoord1f:                           getProcAddr("glTexCoord1f"),
		glTexCoord1fv:                          getProcAddr("glTexCoord1fv"),
		glTexCoord1i:                           getProcAddr("glTexCoord1i"),
		glTexCoord1iv:                          getProcAddr("glTexCoord1iv"),
		glTexCoord1s:                           getProcAddr("glTexCoord1s"),
		glTexCoord1sv:                          getProcAddr("glTexCoord1sv"),
		glTexCoord2d:                           getProcAddr("glTexCoord2d"),
		glTexCoord2dv:                          getProcAddr("glTexCoord2dv"),
		glTexCoord2f:                           getProcAddr("glTexCoord2f"),
		glTexCoord2fv:                          getProcAddr("glTexCoord2fv"),
		glTexCoord2i:                           getProcAddr("glTexCoord2i"),
		glTexCoord2iv:                          getProcAddr("glTexCoord2iv"),
		glTexCoord2s:                           getProcAddr("glTexCoord2s"),
		glTexCoord2sv:                          getProcAddr("glTexCoord2sv"),
		glTexCoord3d:                           getProcAddr("glTexCoord3d"),
		glTexCoord3dv:                          getProcAddr("glTexCoord3dv"),
		glTexCoord3f:                           getProcAddr("glTexCoord3f"),
		glTexCoord3fv:                          getProcAddr("glTexCoord3fv"),
		glTexCoord3i:                           getProcAddr("glTexCoord3i"),
		glTexCoord3iv:                          getProcAddr("glTexCoord3iv"),
		glTexCoord3s:                           getProcAddr("glTexCoord3s"),
		glTexCoord3sv:                          getProcAddr("glTexCoord3sv"),
		glTexCoord4d:                           getProcAddr("glTexCoord4d"),
		glTexCoord4dv:                          getProcAddr("glTexCoord4dv"),
		glTexCoord4f:                           getProcAddr("glTexCoord4f"),
		glTexCoord4fv:                          getProcAddr("glTexCoord4fv"),
		glTexCoord4i:                           getProcAddr("glTexCoord4i"),
		glTexCoord4iv:                          getProcAddr("glTexCoord4iv"),
		glTexCoord4s:                           getProcAddr("glTexCoord4s"),
		glTexCoord4sv:                          getProcAddr("glTexCoord4sv"),
		glTexCoordP1ui:                         getProcAddr("glTexCoordP1ui"),
		glTexCoordP1uiv:                        getProcAddr("glTexCoordP1uiv"),
		glTexCoordP2ui:                         getProcAddr("glTexCoordP2ui"),
		glTexCoordP2uiv:                        getProcAddr("glTexCoordP2uiv"),
		glTexCoordP3ui:                         getProcAddr("glTexCoordP3ui"),
		glTexCoordP3uiv:                        getProcAddr("glTexCoordP3uiv"),
		glTexCoordP4ui:                         getProcAddr("glTexCoordP4ui"),
		glTexCoordP4uiv:                        getProcAddr("glTexCoordP4uiv"),
		glTexCoordPointer:                      getProcAddr("glTexCoordPointer"),
		glTexEnvf:                              getProcAddr("glTexEnvf"),
		glTexEnvfv:                             getProcAddr("glTexEnvfv"),
		glTexEnvi:                              getProcAddr("glTexEnvi"),
		glTexEnviv:                             getProcAddr("glTexEnviv"),
		glTexGend:                              getProcAddr("glTexGend"),
		glTexGendv:                             getProcAddr("glTexGendv"),
		glTexGenf:                              getProcAddr("glTexGenf"),
		glTexGenfv:                             getProcAddr("glTexGenfv"),
		glTexGeni:                              getProcAddr("glTexGeni"),
		glTexGeniv:                             getProcAddr("glTexGeniv"),
		glTexImage1D:                           getProcAddr("glTexImage1D"),
		glTexImage2D:                           getProcAddr("glTexImage2D"),
		glTexImage2DMultisample:                getProcAddr("glTexImage2DMultisample"),
		glTexImage3D:                           getProcAddr("glTexImage3D"),
		glTexImage3DMultisample:                getProcAddr("glTexImage3DMultisample"),
		glTexParameterIiv:                      getProcAddr("glTexParameterIiv"),
		glTexParameterIuiv:                     getProcAddr("glTexParameterIuiv"),
		glTexParameterf:                        getProcAddr("glTexParameterf"),
		glTexParameterfv:                       getProcAddr("glTexParameterfv"),
		glTexParameteri:                        getProcAddr("glTexParameteri"),
		glTexParameteriv:                       getProcAddr("glTexParameteriv"),
		glTexStorage1D:                         getProcAddr("glTexStorage1D"),
		glTexStorage2D:                         getProcAddr("glTexStorage2D"),
		glTexStorage2DMultisample:              getProcAddr("glTexStorage2DMultisample"),
		glTexStorage3D:                         getProcAddr("glTexStorage3D"),
		glTexStorage3DMultisample:              getProcAddr("glTexStorage3DMultisample"),
		glTexSubImage1D:                        getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:                        getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:                        getProcAddr("glTexSubImage3D"),
		glTextureView:                          getProcAddr("glTextureView"),
		glTransformFeedbackVaryings:            getProcAddr("glTransformFeedbackVaryings"),
		glTranslated:                           getProcAddr("glTranslated"),
		glTranslatef:                           getProcAddr("glTranslatef"),
		glUniform1d:                            getProcAddr("glUniform1d"),
		glUniform1dv:                           getProcAddr("glUniform1dv"),
		glUniform1f:                            getProcAddr("glUniform1f"),
		glUniform1fv:                           getProcAddr("glUniform1fv"),
		glUniform1i:                            getProcAddr("glUniform1i"),
		glUniform1iv:                           getProcAddr("glUniform1iv"),
		glUniform1ui:                           getProcAddr("glUniform1ui"),
		glUniform1uiv:                          getProcAddr("glUniform1uiv"),
		glUniform2d:                            getProcAddr("glUniform2d"),
		glUniform2dv:                           getProcAddr("glUniform2dv"),
		glUniform2f:                            getProcAddr("glUniform2f"),
		glUniform2fv:                           getProcAddr("glUniform2fv"),
		glUniform2i:                            getProcAddr("glUniform2i"),
		glUniform2iv:                           getProcAddr("glUniform2iv"),
		glUniform2ui:                           getProcAddr("glUniform2ui"),
		glUniform2uiv:                          getProcAddr("glUniform2uiv"),
		glUniform3d:                            getProcAddr("glUniform3d"),
		glUniform3dv:                           getProcAddr("glUniform3dv"),
		glUniform3f:                            getProcAddr("glUniform3f"),
		glUniform3fv:                           getProcAddr("glUniform3fv"),
		glUniform3i:                            getProcAddr("glUniform3i"),
		glUniform3iv:                           getProcAddr("glUniform3iv"),
		glUniform3ui:                           getProcAddr("glUniform3ui"),
		glUniform3uiv:                          getProcAddr("glUniform3uiv"),
		glUniform4d:                            getProcAddr("glUniform4d"),
		glUniform4dv:                           getProcAddr("glUniform4dv"),
		glUniform4f:                            getProcAddr("glUniform4f"),
		glUniform4fv:                           getProcAddr("glUniform4fv"),
		glUniform4i:                            getProcAddr("glUniform4i"),
		glUniform4iv:                           getProcAddr("glUniform4iv"),
		glUniform4ui:                           getProcAddr("glUniform4ui"),
		glUniform4uiv:                          getProcAddr("glUniform4uiv"),
		glUniformBlockBinding:                  getProcAddr("glUniformBlockBinding"),
		glUniformMatrix2dv:                     getProcAddr("glUniformMatrix2dv"),
		glUniformMatrix2fv:                     getProcAddr("glUniformMatrix2fv"),
		glUniformMatrix2x3dv:                   getProcAddr("glUniformMatrix2x3dv"),
		glUniformMatrix2x3fv:                   getProcAddr("glUniformMatrix2x3fv"),
		glUniformMatrix2x4dv:                   getProcAddr("glUniformMatrix2x4dv"),
		glUniformMatrix2x4fv:                   getProcAddr("glUniformMatrix2x4fv"),
		glUniformMatrix3dv:                     getProcAddr("glUniformMatrix3dv"),
		glUniformMatrix3fv:                     getProcAddr("glUniformMatrix3fv"),
		glUniformMatrix3x2dv:                   getProcAddr("glUniformMatrix3x2dv"),
		glUniformMatrix3x2fv:                   getProcAddr("glUniformMatrix3x2fv"),
		glUniformMatrix3x4dv:                   getProcAddr("glUniformMatrix3x4dv"),
		glUniformMatrix3x4fv:                   getProcAddr("glUniformMatrix3x4fv"),
		glUniformMatrix4dv:                     getProcAddr("glUniformMatrix4dv"),
		glUniformMatrix4fv:                     getProcAddr("glUniformMatrix4fv"),
		glUniformMatrix4x2dv:                   getProcAddr("glUniformMatrix4x2dv"),
		glUniformMatrix4x2fv:                   getProcAddr("glUniformMatrix4x2fv"),
		glUniformMatrix4x3dv:                   getProcAddr("glUniformMatrix4x3dv"),
		glUniformMatrix4x3fv:                   getProcAddr("glUniformMatrix4x3fv"),
		glUniformSubroutinesuiv:                getProcAddr("glUniformSubroutinesuiv"),
		glUnmapBuffer:                          getProcAddr("glUnmapBuffer"),
		glUseProgram:                           getProcAddr("glUseProgram"),
		glUseProgramStages:                     getProcAddr("glUseProgramStages"),
		glValidateProgram:                      getProcAddr("glValidateProgram"),
		glValidateProgramPipeline:              getProcAddr("glValidateProgramPipeline"),
		glVertex2d:                             getProcAddr("glVertex2d"),
		glVertex2dv:                            getProcAddr("glVertex2dv"),
		glVertex2f:                             getProcAddr("glVertex2f"),
		glVertex2fv:                            getProcAddr("glVertex2fv"),
		glVertex2i:                             getProcAddr("glVertex2i"),
		glVertex2iv:                            getProcAddr("glVertex2iv"),
		glVertex2s:                             getProcAddr("glVertex2s"),
		glVertex2sv:                            getProcAddr("glVertex2sv"),
		glVertex3d:                             getProcAddr("glVertex3d"),
		glVertex3dv:                            getProcAddr("glVertex3dv"),
		glVertex3f:                             getProcAddr("glVertex3f"),
		glVertex3fv:                            getProcAddr("glVertex3fv"),
		glVertex3i:                             getProcAddr("glVertex3i"),
		glVertex3iv:                            getProcAddr("glVertex3iv"),
		glVertex3s:                             getProcAddr("glVertex3s"),
		glVertex3sv:                            getProcAddr("glVertex3sv"),
		glVertex4d:                             getProcAddr("glVertex4d"),
		glVertex4dv:                            getProcAddr("glVertex4dv"),
		glVertex4f:                             getProcAddr("glVertex4f"),
		glVertex4fv:                            getProcAddr("glVertex4fv"),
		glVertex4i:                             getProcAddr("glVertex4i"),
		glVertex4iv:                            getProcAddr("glVertex4iv"),
		glVertex4s:                             getProcAddr("glVertex4s"),
		glVertex4sv:                            getProcAddr("glVertex4sv"),
		glVertexAttrib1d:                       getProcAddr("glVertexAttrib1d"),
		glVertexAttrib1dv:                      getProcAddr("glVertexAttrib1dv"),
		glVertexAttrib1f:                       getProcAddr("glVertexAttrib1f"),
		glVertexAttrib1fv:                      getProcAddr("glVertexAttrib1fv"),
		glVertexAttrib1s:                       getProcAddr("glVertexAttrib1s"),
		glVertexAttrib1sv:                      getProcAddr("glVertexAttrib1sv"),
		glVertexAttrib2d:                       getProcAddr("glVertexAttrib2d"),
		glVertexAttrib2dv:                      getProcAddr("glVertexAttrib2dv"),
		glVertexAttrib2f:                       getProcAddr("glVertexAttrib2f"),
		glVertexAttrib2fv:                      getProcAddr("glVertexAttrib2fv"),
		glVertexAttrib2s:                       getProcAddr("glVertexAttrib2s"),
		glVertexAttrib2sv:                      getProcAddr("glVertexAttrib2sv"),
		glVertexAttrib3d:                       getProcAddr("glVertexAttrib3d"),
		glVertexAttrib3dv:                      getProcAddr("glVertexAttrib3dv"),
		glVertexAttrib3f:                       getProcAddr("glVertexAttrib3f"),
		glVertexAttrib3fv:                      getProcAddr("glVertexAttrib3fv"),
		glVertexAttrib3s:                       getProcAddr("glVertexAttrib3s"),
		glVertexAttrib3sv:                      getProcAddr("glVertexAttrib3sv"),
		glVertexAttrib4Nbv:                     getProcAddr("glVertexAttrib4Nbv"),
		glVertexAttrib4Niv:                     getProcAddr("glVertexAttrib4Niv"),
		glVertexAttrib4Nsv:                     getProcAddr("glVertexAttrib4Nsv"),
		glVertexAttrib4Nub:                     getProcAddr("glVertexAttrib4Nub"),
		glVertexAttrib4Nubv:                    getProcAddr("glVertexAttrib4Nubv"),
		glVertexAttrib4Nuiv:                    getProcAddr("glVertexAttrib4Nuiv"),
		glVertexAttrib4Nusv:                    getProcAddr("glVertexAttrib4Nusv"),
		glVertexAttrib4bv:                      getProcAddr("glVertexAttrib4bv"),
		glVertexAttrib4d:                       getProcAddr("glVertexAttrib4d"),
		glVertexAttrib4dv:                      getProcAddr("glVertexAttrib4dv"),
		glVertexAttrib4f:                       getProcAddr("glVertexAttrib4f"),
		glVertexAttrib4fv:                      getProcAddr("glVertexAttrib4fv"),
		glVertexAttrib4iv:                      getProcAddr("glVertexAttrib4iv"),
		glVertexAttrib4s:                       getProcAddr("glVertexAttrib4s"),
		glVertexAttrib4sv:                      getProcAddr("glVertexAttrib4sv"),
		glVertexAttrib4ubv:                     getProcAddr("glVertexAttrib4ubv"),
		glVertexAttrib4uiv:                     getProcAddr("glVertexAttrib4uiv"),
		glVertexAttrib4usv:                     getProcAddr("glVertexAttrib4usv"),
		glVertexAttribBinding:                  getProcAddr("glVertexAttribBinding"),
		glVertexAttribDivisor:                  getProcAddr("glVertexAttribDivisor"),
		glVertexAttribFormat:                   getProcAddr("glVertexAttribFormat"),
		glVertexAttribI1i:                      getProcAddr("glVertexAttribI1i"),
		glVertexAttribI1iv:                     getProcAddr("glVertexAttribI1iv"),
		glVertexAttribI1ui:                     getProcAddr("glVertexAttribI1ui"),
		glVertexAttribI1uiv:                    getProcAddr("glVertexAttribI1uiv"),
		glVertexAttribI2i:                      getProcAddr("glVertexAttribI2i"),
		glVertexAttribI2iv:                     getProcAddr("glVertexAttribI2iv"),
		glVertexAttribI2ui:                     getProcAddr("glVertexAttribI2ui"),
		glVertexAttribI2uiv:                    getProcAddr("glVertexAttribI2uiv"),
		glVertexAttribI3i:                      getProcAddr("glVertexAttribI3i"),
		glVertexAttribI3iv:                     getProcAddr("glVertexAttribI3iv"),
		glVertexAttribI3ui:                     getProcAddr("glVertexAttribI3ui"),
		glVertexAttribI3uiv:                    getProcAddr("glVertexAttribI3uiv"),
		glVertexAttribI4bv:                     getProcAddr("glVertexAttribI4bv"),
		glVertexAttribI4i:                      getProcAddr("glVertexAttribI4i"),
		glVertexAttribI4iv:                     getProcAddr("glVertexAttribI4iv"),
		glVertexAttribI4sv:                     getProcAddr("glVertexAttribI4sv"),
		glVertexAttribI4ubv:                    getProcAddr("glVertexAttribI4ubv"),
		glVertexAttribI4ui:                     getProcAddr("glVertexAttribI4ui"),
		glVertexAttribI4uiv:                    getProcAddr("glVertexAttribI4uiv"),
		glVertexAttribI4usv:                    getProcAddr("glVertexAttribI4usv"),
		glVertexAttribIFormat:                  getProcAddr("glVertexAttribIFormat"),
		glVertexAttribIPointer:                 getProcAddr("glVertexAttribIPointer"),
		glVertexAttribL1d:                      getProcAddr("glVertexAttribL1d"),
		glVertexAttribL1dv:                     getProcAddr("glVertexAttribL1dv"),
		glVertexAttribL2d:                      getProcAddr("glVertexAttribL2d"),
		glVertexAttribL2dv:                     getProcAddr("glVertexAttribL2dv"),
		glVertexAttribL3d:                      getProcAddr("glVertexAttribL3d"),
		glVertexAttribL3dv:                     getProcAddr("glVertexAttribL3dv"),
		glVertexAttribL4d:                      getProcAddr("glVertexAttribL4d"),
		glVertexAttribL4dv:                     getProcAddr("glVertexAttribL4dv"),
		glVertexAttribLFormat:                  getProcAddr("glVertexAttribLFormat"),
		glVertexAttribLPointer:                 getProcAddr("glVertexAttribLPointer"),
		glVertexAttribP1ui:                     getProcAddr("glVertexAttribP1ui"),
		glVertexAttribP1uiv:                    getProcAddr("glVertexAttribP1uiv"),
		glVertexAttribP2ui:                     getProcAddr("glVertexAttribP2ui"),
		glVertexAttribP2uiv:                    getProcAddr("glVertexAttribP2uiv"),
		glVertexAttribP3ui:                     getProcAddr("glVertexAttribP3ui"),
		glVertexAttribP3uiv:                    getProcAddr("glVertexAttribP3uiv"),
		glVertexAttribP4ui:                     getProcAddr("glVertexAttribP4ui"),
		glVertexAttribP4uiv:                    getProcAddr("glVertexAttribP4uiv"),
		glVertexAttribPointer:                  getProcAddr("glVertexAttribPointer"),
		glVertexBindingDivisor:                 getProcAddr("glVertexBindingDivisor"),
		glVertexP2ui:                           getProcAddr("glVertexP2ui"),
		glVertexP2uiv:                          getProcAddr("glVertexP2uiv"),
		glVertexP3ui:                           getProcAddr("glVertexP3ui"),
		glVertexP3uiv:                          getProcAddr("glVertexP3uiv"),
		glVertexP4ui:                           getProcAddr("glVertexP4ui"),
		glVertexP4uiv:                          getProcAddr("glVertexP4uiv"),
		glVertexPointer:                        getProcAddr("glVertexPointer"),
		glViewport:                             getProcAddr("glViewport"),
		glViewportArrayv:                       getProcAddr("glViewportArrayv"),
		glViewportIndexedf:                     getProcAddr("glViewportIndexedf"),
		glViewportIndexedfv:                    getProcAddr("glViewportIndexedfv"),
		glWaitSync:                             getProcAddr("glWaitSync"),
		glWindowPos2d:                          getProcAddr("glWindowPos2d"),
		glWindowPos2dv:                         getProcAddr("glWindowPos2dv"),
		glWindowPos2f:                          getProcAddr("glWindowPos2f"),
		glWindowPos2fv:                         getProcAddr("glWindowPos2fv"),
		glWindowPos2i:                          getProcAddr("glWindowPos2i"),
		glWindowPos2iv:                         getProcAddr("glWindowPos2iv"),
		glWindowPos2s:                          getProcAddr("glWindowPos2s"),
		glWindowPos2sv:                         getProcAddr("glWindowPos2sv"),
		glWindowPos3d:                          getProcAddr("glWindowPos3d"),
		glWindowPos3dv:                         getProcAddr("glWindowPos3dv"),
		glWindowPos3f:                          getProcAddr("glWindowPos3f"),
		glWindowPos3fv:                         getProcAddr("glWindowPos3fv"),
		glWindowPos3i:                          getProcAddr("glWindowPos3i"),
		glWindowPos3iv:                         getProcAddr("glWindowPos3iv"),
		glWindowPos3s:                          getProcAddr("glWindowPos3s"),
		glWindowPos3sv:                         getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL450 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveShaderProgram(pipeline uint32, program uint32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	AttachShader(program uint32, shader uint32)
	Begin(mode uint32)
	BeginConditionalRender(id uint32, mode uint32)
	BeginQuery(target uint32, id uint32)
	BeginQueryIndexed(target uint32, index uint32, id uint32)
	BeginTransformFeedback(primitiveMode uint32)
	BindAttribLocation(program uint32, index uint32, name *uint8)
	BindBuffer(target uint32, buffer uint32)
	BindBufferBase(target uint32, index uint32, buffer uint32)
	BindBufferRange(target uint32, index uint32, buffer uint32, offset uintptr, size int)
	BindBuffersBase(target uint32, first uint32, count int32, buffers *uint32)
	BindBuffersRange(target uint32, first uint32, count int32, buffers *uint32, offsets *uintptr, sizes *int)
	BindFragDataLocation(program uint32, color uint32, name *uint8)
	BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *uint8)
	BindFramebuffer(target uint32, framebuffer uint32)
	BindImageTexture(unit uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format uint32)
	BindImageTextures(first uint32, count int32, textures *uint32)
	BindProgramPipeline(pipeline uint32)
	BindRenderbuffer(target uint32, renderbuffer uint32)
	BindSampler(unit uint32, sampler uint32)
	BindSamplers(first uint32, count int32, samplers *uint32)
	BindTexture(target uint32, texture uint32)
	BindTextureUnit(unit uint32, texture uint32)
	BindTextures(first uint32, count int32, textures *uint32)
	BindTransformFeedback(target uint32, id uint32)
	BindVertexArray(array uint32)
	BindVertexBuffer(bindingindex uint32, buffer uint32, offset uintptr, stride int32)
	BindVertexBuffers(first uint32, count int32, buffers *uint32, offsets *uintptr, strides *int32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)
	BlendEquationSeparatei(buf uint32, modeRGB uint32, modeAlpha uint32)
	BlendEquationi(buf uint32, mode uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BlendFuncSeparatei(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32)
	BlendFunci(buf uint32, src uint32, dst uint32)
	BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	BlitNamedFramebuffer(readFramebuffer uint32, drawFramebuffer uint32, srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferStorage(target uint32, size int, data unsafe.Pointer, flags uint32)
	BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	CheckFramebufferStatus(target uint32) uint32
	CheckNamedFramebufferStatus(framebuffer uint32, target uint32) uint32
	ClampColor(target uint32, clamp uint32)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearBufferData(target uint32, internalformat uint32, format uint32, type_ uint32, data unsafe.Pointer)
	ClearBufferSubData(target uint32, internalformat uint32, offset uintptr, size int, format uint32, type_ uint32, data unsafe.Pointer)
	ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32)
	ClearBufferfv(buffer uint32, drawbuffer int32, value *float32)
	ClearBufferiv(buffer uint32, drawbuffer int32, value *int32)
	ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearDepthf(d float32)
	ClearIndex(c float32)
	ClearNamedBufferData(buffer uint32, internalformat uint32, format uint32, type_ uint32, data unsafe.Pointer)
	ClearNamedBufferSubData(buffer uint32, internalformat uint32, offset uintptr, size int, format uint32, type_ uint32, data unsafe.Pointer)
	ClearNamedFramebufferfi(framebuffer uint32, buffer uint32, drawbuffer int32, depth float32, stencil int32)
	ClearNamedFramebufferfv(framebuffer uint32, buffer uint32, drawbuffer int32, value *float32)
	ClearNamedFramebufferiv(framebuffer uint32, buffer uint32, drawbuffer int32, value *int32)
	ClearNamedFramebufferuiv(framebuffer uint32, buffer uint32, drawbuffer int32, value *uint32)
	ClearStencil(s int32)
	ClearTexImage(texture uint32, level int32, format uint32, type_ uint32, data unsafe.Pointer)
	ClearTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, data unsafe.Pointer)
	ClientActiveTexture(texture uint32)
	ClientWaitSync(sync GLsync, flags uint32, timeout uint64) uint32
	ClipControl(origin uint32, depth uint32)
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaski(index uint32, r bool, g bool, b bool, a bool)
	ColorMaterial(face uint32, mode uint32)
	ColorP3ui(type_ uint32, color uint32)
	ColorP3uiv(type_ uint32, color *uint32)
	ColorP4ui(type_ uint32, color uint32)
	ColorP4uiv(type_ uint32, color *uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompileShader(shader uint32)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTextureSubImage1D(texture uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset uintptr, writeOffset uintptr, size int)
	CopyImageSubData(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32)
	CopyNamedBufferSubData(readBuffer uint32, writeBuffer uint32, readOffset uintptr, writeOffset uintptr, size int)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CopyTextureSubImage1D(texture uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CreateBuffers(n int32, buffers *uint32)
	CreateFramebuffers(n int32, framebuffers *uint32)
	CreateProgram() uint32
	CreateProgramPipelines(n int32, pipelines *uint32)
	CreateQueries(target uint32, n int32, ids *uint32)
	CreateRenderbuffers(n int32, renderbuffers *uint32)
	CreateSamplers(n int32, samplers *uint32)
	CreateShader(type_ uint32) uint32
	CreateShaderProgramv(type_ uint32, count int32, strings **uint8) uint32
	CreateTextures(target uint32, n int32, textures *uint32)
	CreateTransformFeedbacks(n int32, ids *uint32)
	CreateVertexArrays(n int32, arrays *uint32)
	CullFace(mode uint32)
	DebugMessageCallback(callback func(source, type_, id, severity uint32, message string))
	DebugMessageControl(source uint32, type_ uint32, severity uint32, count int32, ids *uint32, enabled bool)
	DebugMessageInsert(source uint32, type_ uint32, id uint32, severity uint32, length int32, buf *uint8)
	DeleteBuffers(n int32, buffers *uint32)
	DeleteFramebuffers(n int32, framebuffers *uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteProgram(program uint32)
	DeleteProgramPipelines(n int32, pipelines *uint32)
	DeleteQueries(n int32, ids *uint32)
	DeleteRenderbuffers(n int32, renderbuffers *uint32)
	DeleteSamplers(count int32, samplers *uint32)
	DeleteShader(shader uint32)
	DeleteSync(sync GLsync)
	DeleteTextures(n int32, textures *uint32)
	DeleteTransformFeedbacks(n int32, ids *uint32)
	DeleteVertexArrays(n int32, arrays *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	DepthRangeArrayv(first uint32, count int32, v *float64)
	DepthRangeIndexed(index uint32, n float64, f float64)
	DepthRangef(n float32, f float32)
	DetachShader(program uint32, shader uint32)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DisableVertexArrayAttrib(vaobj uint32, index uint32)
	DisableVertexAttribArray(index uint32)
	Disablei(target uint32, index uint32)
	DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32)
	DispatchComputeIndirect(indirect uintptr)
	DrawArrays(mode uint32, first int32, count int32)
	DrawArraysIndirect(mode uint32, indirect unsafe.Pointer)
	DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32)
	DrawArraysInstancedBaseInstance(mode uint32, first int32, count int32, instancecount int32, baseinstance uint32)
	DrawBuffer(buf uint32)
	DrawBuffers(n int32, bufs *uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawElementsBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer)
	DrawElementsInstanced(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32)
	DrawElementsInstancedBaseInstance(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, baseinstance uint32)
	DrawElementsInstancedBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32)
	DrawElementsInstancedBaseVertexBaseInstance(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32, baseinstance uint32)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawRangeElementsBaseVertex(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawTransformFeedback(mode uint32, id uint32)
	DrawTransformFeedbackInstanced(mode uint32, id uint32, instancecount int32)
	DrawTransformFeedbackStream(mode uint32, id uint32, stream uint32)
	DrawTransformFeedbackStreamInstanced(mode uint32, id uint32, stream uint32, instancecount int32)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	EnableVertexArrayAttrib(vaobj uint32, index uint32)
	EnableVertexAttribArray(index uint32)
	Enablei(target uint32, index uint32)
	End()
	EndConditionalRender()
	EndList()
	EndQuery(target uint32)
	EndQueryIndexed(target uint32, index uint32)
	EndTransformFeedback()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	FenceSync(condition uint32, flags uint32) GLsync
	Finish()
	Flush()
	FlushMappedBufferRange(target uint32, offset uintptr, length int)
	FlushMappedNamedBufferRange(buffer uint32, offset uintptr, length int)
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FramebufferParameteri(target uint32, pname uint32, param int32)
	FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	FramebufferTexture(target uint32, attachment uint32, texture uint32, level int32)
	FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32)
	FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenBuffers(n int32, buffers *uint32)
	GenFramebuffers(n int32, framebuffers *uint32)
	GenLists(range_ int32) uint32
	GenProgramPipelines(n int32, pipelines *uint32)
	GenQueries(n int32, ids *uint32)
	GenRenderbuffers(n int32, renderbuffers *uint32)
	GenSamplers(count int32, samplers *uint32)
	GenTextures(n int32, textures *uint32)
	GenTransformFeedbacks(n int32, ids *uint32)
	GenVertexArrays(n int32, arrays *uint32)
	GenerateMipmap(target uint32)
	GenerateTextureMipmap(texture uint32)
	GetActiveAtomicCounterBufferiv(program uint32, bufferIndex uint32, pname uint32, params *int32)
	GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveSubroutineName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineUniformName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineUniformiv(program uint32, shadertype uint32, index uint32, pname uint32, values *int32)
	GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *uint8)
	GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32)
	GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *uint8)
	GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32)
	GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)
	GetAttribLocation(program uint32, name *uint8) int32
	GetBooleani_v(target uint32, index uint32, data *bool)
	GetBooleanv(pname uint32, data *bool)
	GetBufferParameteri64v(target uint32, pname uint32, params *int64)
	GetBufferParameteriv(target uint32, pname uint32, params *int32)
	GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)
	GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetCompressedTextureImage(texture uint32, level int32, bufSize int32, pixels unsafe.Pointer)
	GetCompressedTextureSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, bufSize int32, pixels unsafe.Pointer)
	GetDebugMessageLog(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32
	GetDoublei_v(target uint32, index uint32, data *float64)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloati_v(target uint32, index uint32, data *float32)
	GetFloatv(pname uint32, data *float32)
	GetFragDataIndex(program uint32, name *uint8) int32
	GetFragDataLocation(program uint32, name *uint8) int32
	GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32)
	GetFramebufferParameteriv(target uint32, pname uint32, params *int32)
	GetGraphicsResetStatus() uint32
	GetInteger64i_v(target uint32, index uint32, data *int64)
	GetInteger64v(pname uint32, data *int64)
	GetIntegeri_v(target uint32, index uint32, data *int32)
	GetIntegerv(pname uint32, data *int32)
	GetInternalformati64v(target uint32, internalformat uint32, pname uint32, count int32, params *int64)
	GetInternalformativ(target uint32, internalformat uint32, pname uint32, count int32, params *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetMultisamplefv(pname uint32, index uint32, val *float32)
	GetNamedBufferParameteri64v(buffer uint32, pname uint32, params *int64)
	GetNamedBufferParameteriv(buffer uint32, pname uint32, params *int32)
	GetNamedBufferPointerv(buffer uint32, pname uint32, params *unsafe.Pointer)
	GetNamedBufferSubData(buffer uint32, offset uintptr, size int, data unsafe.Pointer)
	GetNamedFramebufferAttachmentParameteriv(framebuffer uint32, attachment uint32, pname uint32, params *int32)
	GetNamedFramebufferParameteriv(framebuffer uint32, pname uint32, param *int32)
	GetNamedRenderbufferParameteriv(renderbuffer uint32, pname uint32, params *int32)
	GetObjectLabel(identifier uint32, name uint32, bufSize int32, length *int32, label *uint8)
	GetObjectPtrLabel(ptr unsafe.Pointer, bufSize int32, length *int32, label *uint8)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetProgramBinary(program uint32, bufSize int32, length *int32, binaryFormat *uint32, binary unsafe.Pointer)
	GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramInterfaceiv(program uint32, programInterface uint32, pname uint32, params *int32)
	GetProgramPipelineInfoLog(pipeline uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramPipelineiv(pipeline uint32, pname uint32, params *int32)
	GetProgramResourceIndex(program uint32, programInterface uint32, name *uint8) uint32
	GetProgramResourceLocation(program uint32, programInterface uint32, name *uint8) int32
	GetProgramResourceLocationIndex(program uint32, programInterface uint32, name *uint8) int32
	GetProgramResourceName(program uint32, programInterface uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetProgramResourceiv(program uint32, programInterface uint32, index uint32, propCount int32, props *uint32, count int32, length *int32, params *int32)
	GetProgramStageiv(program uint32, shadertype uint32, pname uint32, values *int32)
	GetProgramiv(program uint32, pname uint32, params *int32)
	GetQueryBufferObjecti64v(id uint32, buffer uint32, pname uint32, offset uintptr)
	GetQueryBufferObjectiv(id uint32, buffer uint32, pname uint32, offset uintptr)
	GetQueryBufferObjectui64v(id uint32, buffer uint32, pname uint32, offset uintptr)
	GetQueryBufferObjectuiv(id uint32, buffer uint32, pname uint32, offset uintptr)
	GetQueryIndexediv(target uint32, index uint32, pname uint32, params *int32)
	GetQueryObjecti64v(id uint32, pname uint32, params *int64)
	GetQueryObjectiv(id uint32, pname uint32, params *int32)
	GetQueryObjectui64v(id uint32, pname uint32, params *uint64)
	GetQueryObjectuiv(id uint32, pname uint32, params *uint32)
	GetQueryiv(target uint32, pname uint32, params *int32)
	GetRenderbufferParameteriv(target uint32, pname uint32, params *int32)
	GetSamplerParameterIiv(sampler uint32, pname uint32, params *int32)
	GetSamplerParameterIuiv(sampler uint32, pname uint32, params *uint32)
	GetSamplerParameterfv(sampler uint32, pname uint32, params *float32)
	GetSamplerParameteriv(sampler uint32, pname uint32, params *int32)
	GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8)
	GetShaderPrecisionFormat(shadertype uint32, precisiontype uint32, range_ *int32, precision *int32)
	GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8)
	GetShaderiv(shader uint32, pname uint32, params *int32)
	GetString(name uint32) *uint8
	GetStringi(name uint32, index uint32) *uint8
	GetSubroutineIndex(program uint32, shadertype uint32, name *uint8) uint32
	GetSubroutineUniformLocation(program uint32, shadertype uint32, name *uint8) int32
	GetSynciv(sync GLsync, pname uint32, count int32, length *int32, values *int32)
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterIiv(target uint32, pname uint32, params *int32)
	GetTexParameterIuiv(target uint32, pname uint32, params *uint32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	GetTextureImage(texture uint32, level int32, format uint32, type_ uint32, bufSize int32, pixels unsafe.Pointer)
	GetTextureLevelParameterfv(texture uint32, level int32, pname uint32, params *float32)
	GetTextureLevelParameteriv(texture uint32, level int32, pname uint32, params *int32)
	GetTextureParameterIiv(texture uint32, pname uint32, params *int32)
	GetTextureParameterIuiv(texture uint32, pname uint32, params *uint32)
	GetTextureParameterfv(texture uint32, pname uint32, params *float32)
	GetTextureParameteriv(texture uint32, pname uint32, params *int32)
	GetTextureSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, bufSize int32, pixels unsafe.Pointer)
	GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetTransformFeedbacki64_v(xfb uint32, pname uint32, index uint32, param *int64)
	GetTransformFeedbacki_v(xfb uint32, pname uint32, index uint32, param *int32)
	GetTransformFeedbackiv(xfb uint32, pname uint32, param *int32)
	GetUniformBlockIndex(program uint32, uniformBlockName *uint8) uint32
	GetUniformIndices(program uint32, uniformCount int32, uniformNames **uint8, uniformIndices *uint32)
	GetUniformLocation(program uint32, name *uint8) int32
	GetUniformSubroutineuiv(shadertype uint32, location int32, params *uint32)
	GetUniformdv(program uint32, location int32, params *float64)
	GetUniformfv(program uint32, location int32, params *float32)
	GetUniformiv(program uint32, location int32, params *int32)
	GetUniformuiv(program uint32, location int32, params *uint32)
	GetVertexArrayIndexed64iv(vaobj uint32, index uint32, pname uint32, param *int64)
	GetVertexArrayIndexediv(vaobj uint32, index uint32, pname uint32, param *int32)
	GetVertexArrayiv(vaobj uint32, pname uint32, param *int32)
	GetVertexAttribIiv(index uint32, pname uint32, params *int32)
	GetVertexAttribIuiv(index uint32, pname uint32, params *uint32)
	GetVertexAttribLdv(index uint32, pname uint32, params *float64)
	GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)
	GetVertexAttribdv(index uint32, pname uint32, params *float64)
	GetVertexAttribfv(index uint32, pname uint32, params *float32)
	GetVertexAttribiv(index uint32, pname uint32, params *int32)
	GetnColorTable(target uint32, format uint32, type_ uint32, bufSize int32, table unsafe.Pointer)
	GetnCompressedTexImage(target uint32, lod int32, bufSize int32, pixels unsafe.Pointer)
	GetnConvolutionFilter(target uint32, format uint32, type_ uint32, bufSize int32, image unsafe.Pointer)
	GetnHistogram(target uint32, reset bool, format uint32, type_ uint32, bufSize int32, values unsafe.Pointer)
	GetnMapdv(target uint32, query uint32, bufSize int32, v *float64)
	GetnMapfv(target uint32, query uint32, bufSize int32, v *float32)
	GetnMapiv(target uint32, query uint32, bufSize int32, v *int32)
	GetnMinmax(target uint32, reset bool, format uint32, type_ uint32, bufSize int32, values unsafe.Pointer)
	GetnPixelMapfv(map_ uint32, bufSize int32, values *float32)
	GetnPixelMapuiv(map_ uint32, bufSize int32, values *uint32)
	GetnPixelMapusv(map_ uint32, bufSize int32, values *uint16)
	GetnPolygonStipple(bufSize int32, pattern *uint8)
	GetnSeparableFilter(target uint32, format uint32, type_ uint32, rowBufSize int32, row unsafe.Pointer, columnBufSize int32, column unsafe.Pointer, span unsafe.Pointer)
	GetnTexImage(target uint32, level int32, format uint32, type_ uint32, bufSize int32, pixels unsafe.Pointer)
	GetnUniformdv(program uint32, location int32, bufSize int32, params *float64)
	GetnUniformfv(program uint32, location int32, bufSize int32, params *float32)
	GetnUniformiv(program uint32, location int32, bufSize int32, params *int32)
	GetnUniformuiv(program uint32, location int32, bufSize int32, params *uint32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	InvalidateBufferData(buffer uint32)
	InvalidateBufferSubData(buffer uint32, offset uintptr, length int)
	InvalidateFramebuffer(target uint32, numAttachments int32, attachments *uint32)
	InvalidateNamedFramebufferData(framebuffer uint32, numAttachments int32, attachments *uint32)
	InvalidateNamedFramebufferSubData(framebuffer uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32)
	InvalidateSubFramebuffer(target uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32)
	InvalidateTexImage(texture uint32, level int32)
	InvalidateTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32)
	IsBuffer(buffer uint32) bool
	IsEnabled(cap uint32) bool
	IsEnabledi(target uint32, index uint32) bool
	IsFramebuffer(framebuffer uint32) bool
	IsList(list uint32) bool
	IsProgram(program uint32) bool
	IsProgramPipeline(pipeline uint32) bool
	IsQuery(id uint32) bool
	IsRenderbuffer(renderbuffer uint32) bool
	IsSampler(sampler uint32) bool
	IsShader(shader uint32) bool
	IsSync(sync GLsync) bool
	IsTexture(texture uint32) bool
	IsTransformFeedback(id uint32) bool
	IsVertexArray(array uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	LinkProgram(program uint32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapBuffer(target uint32, access uint32) unsafe.Pointer
	MapBufferRange(target uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	MapNamedBuffer(buffer uint32, access uint32) unsafe.Pointer
	MapNamedBufferRange(buffer uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MemoryBarrier(barriers uint32)
	MemoryBarrierByRegion(barriers uint32)
	MinSampleShading(value float32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawArraysIndirect(mode uint32, indirect unsafe.Pointer, drawcount int32, stride int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiDrawElementsBaseVertex(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32)
	MultiDrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer, drawcount int32, stride int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	MultiTexCoordP1ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP1uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP2ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP2uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP3ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP3uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP4ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP4uiv(texture uint32, type_ uint32, coords *uint32)
	NamedBufferData(buffer uint32, size int, data unsafe.Pointer, usage uint32)
	NamedBufferStorage(buffer uint32, size int, data unsafe.Pointer, flags uint32)
	NamedBufferSubData(buffer uint32, offset uintptr, size int, data unsafe.Pointer)
	NamedFramebufferDrawBuffer(framebuffer uint32, buf uint32)
	NamedFramebufferDrawBuffers(framebuffer uint32, n int32, bufs *uint32)
	NamedFramebufferParameteri(framebuffer uint32, pname uint32, param int32)
	NamedFramebufferReadBuffer(framebuffer uint32, src uint32)
	NamedFramebufferRenderbuffer(framebuffer uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	NamedFramebufferTexture(framebuffer uint32, attachment uint32, texture uint32, level int32)
	NamedFramebufferTextureLayer(framebuffer uint32, attachment uint32, texture uint32, level int32, layer int32)
	NamedRenderbufferStorage(renderbuffer uint32, internalformat uint32, width int32, height int32)
	NamedRenderbufferStorageMultisample(renderbuffer uint32, samples int32, internalformat uint32, width int32, height int32)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalP3ui(type_ uint32, coords uint32)
	NormalP3uiv(type_ uint32, coords *uint32)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	ObjectLabel(identifier uint32, name uint32, length int32, label *uint8)
	ObjectPtrLabel(ptr unsafe.Pointer, length int32, label *uint8)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PatchParameterfv(pname uint32, values *float32)
	PatchParameteri(pname uint32, value int32)
	PauseTransformFeedback()
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopDebugGroup()
	PopMatrix()
	PopName()
	PrimitiveRestartIndex(index uint32)
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	ProgramBinary(program uint32, binaryFormat uint32, binary unsafe.Pointer, length int32)
	ProgramParameteri(program uint32, pname uint32, value int32)
	ProgramUniform1d(program uint32, location int32, v0 float64)
	ProgramUniform1dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform1f(program uint32, location int32, v0 float32)
	ProgramUniform1fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform1i(program uint32, location int32, v0 int32)
	ProgramUniform1iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform1ui(program uint32, location int32, v0 uint32)
	ProgramUniform1uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform2d(program uint32, location int32, v0 float64, v1 float64)
	ProgramUniform2dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32)
	ProgramUniform2fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32)
	ProgramUniform2iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32)
	ProgramUniform2uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform3d(program uint32, location int32, v0 float64, v1 float64, v2 float64)
	ProgramUniform3dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32)
	ProgramUniform3fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32)
	ProgramUniform3iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32)
	ProgramUniform3uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform4d(program uint32, location int32, v0 float64, v1 float64, v2 float64, v3 float64)
	ProgramUniform4dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	ProgramUniform4fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	ProgramUniform4iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	ProgramUniform4uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniformMatrix2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProvokingVertex(mode uint32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushDebugGroup(source uint32, id uint32, length int32, message *uint8)
	PushMatrix()
	PushName(name uint32)
	QueryCounter(id uint32, target uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	ReadnPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, bufSize int32, data unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	ReleaseShaderCompiler()
	RenderMode(mode uint32) int32
	RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32)
	RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32)
	ResumeTransformFeedback()
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	SampleMaski(maskNumber uint32, mask uint32)
	SamplerParameterIiv(sampler uint32, pname uint32, param *int32)
	SamplerParameterIuiv(sampler uint32, pname uint32, param *uint32)
	SamplerParameterf(sampler uint32, pname uint32, param float32)
	SamplerParameterfv(sampler uint32, pname uint32, param *float32)
	SamplerParameteri(sampler uint32, pname uint32, param int32)
	SamplerParameteriv(sampler uint32, pname uint32, param *int32)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	ScissorArrayv(first uint32, count int32, v *int32)
	ScissorIndexed(index uint32, left int32, bottom int32, width int32, height int32)
	ScissorIndexedv(index uint32, v *int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorP3ui(type_ uint32, color uint32)
	SecondaryColorP3uiv(type_ uint32, color *uint32)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	ShaderBinary(count int32, shaders *uint32, binaryFormat uint32, binary unsafe.Pointer, length int32)
	ShaderSource(shader uint32, count int32, string **uint8, length *int32)
	ShaderStorageBlockBinding(program uint32, storageBlockIndex uint32, storageBlockBinding uint32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilMaskSeparate(face uint32, mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)
	TexBuffer(target uint32, internalformat uint32, buffer uint32)
	TexBufferRange(target uint32, internalformat uint32, buffer uint32, offset uintptr, size int)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordP1ui(type_ uint32, coords uint32)
	TexCoordP1uiv(type_ uint32, coords *uint32)
	TexCoordP2ui(type_ uint32, coords uint32)
	TexCoordP2uiv(type_ uint32, coords *uint32)
	TexCoordP3ui(type_ uint32, coords uint32)
	TexCoordP3uiv(type_ uint32, coords *uint32)
	TexCoordP4ui(type_ uint32, coords uint32)
	TexCoordP4uiv(type_ uint32, coords *uint32)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TexParameterIiv(target uint32, pname uint32, params *int32)
	TexParameterIuiv(target uint32, pname uint32, params *uint32)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexStorage1D(target uint32, levels int32, internalformat uint32, width int32)
	TexStorage2D(target uint32, levels int32, internalformat uint32, width int32, height int32)
	TexStorage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexStorage3D(target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32)
	TexStorage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureBarrier()
	TextureBuffer(texture uint32, internalformat uint32, buffer uint32)
	TextureBufferRange(texture uint32, internalformat uint32, buffer uint32, offset uintptr, size int)
	TextureParameterIiv(texture uint32, pname uint32, params *int32)
	TextureParameterIuiv(texture uint32, pname uint32, params *uint32)
	TextureParameterf(texture uint32, pname uint32, param float32)
	TextureParameterfv(texture uint32, pname uint32, param *float32)
	TextureParameteri(texture uint32, pname uint32, param int32)
	TextureParameteriv(texture uint32, pname uint32, param *int32)
	TextureStorage1D(texture uint32, levels int32, internalformat uint32, width int32)
	TextureStorage2D(texture uint32, levels int32, internalformat uint32, width int32, height int32)
	TextureStorage2DMultisample(texture uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TextureStorage3D(texture uint32, levels int32, internalformat uint32, width int32, height int32, depth int32)
	TextureStorage3DMultisample(texture uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TextureSubImage1D(texture uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureView(texture uint32, target uint32, origtexture uint32, internalformat uint32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32)
	TransformFeedbackBufferBase(xfb uint32, index uint32, buffer uint32)
	TransformFeedbackBufferRange(xfb uint32, index uint32, buffer uint32, offset uintptr, size int)
	TransformFeedbackVaryings(program uint32, count int32, varyings **uint8, bufferMode uint32)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Uniform1d(location int32, x float64)
	Uniform1dv(location int32, count int32, value *float64)
	Uniform1f(location int32, v0 float32)
	Uniform1fv(location int32, count int32, value *float32)
	Uniform1i(location int32, v0 int32)
	Uniform1iv(location int32, count int32, value *int32)
	Uniform1ui(location int32, v0 uint32)
	Uniform1uiv(location int32, count int32, value *uint32)
	Uniform2d(location int32, x float64, y float64)
	Uniform2dv(location int32, count int32, value *float64)
	Uniform2f(location int32, v0 float32, v1 float32)
	Uniform2fv(location int32, count int32, value *float32)
	Uniform2i(location int32, v0 int32, v1 int32)
	Uniform2iv(location int32, count int32, value *int32)
	Uniform2ui(location int32, v0 uint32, v1 uint32)
	Uniform2uiv(location int32, count int32, value *uint32)
	Uniform3d(location int32, x float64, y float64, z float64)
	Uniform3dv(location int32, count int32, value *float64)
	Uniform3f(location int32, v0 float32, v1 float32, v2 float32)
	Uniform3fv(location int32, count int32, value *float32)
	Uniform3i(location int32, v0 int32, v1 int32, v2 int32)
	Uniform3iv(location int32, count int32, value *int32)
	Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)
	Uniform3uiv(location int32, count int32, value *uint32)
	Uniform4d(location int32, x float64, y float64, z float64, w float64)
	Uniform4dv(location int32, count int32, value *float64)
	Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	Uniform4fv(location int32, count int32, value *float32)
	Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	Uniform4iv(location int32, count int32, value *int32)
	Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	Uniform4uiv(location int32, count int32, value *uint32)
	UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)
	UniformMatrix2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32)
	UniformSubroutinesuiv(shadertype uint32, count int32, indices *uint32)
	UnmapBuffer(target uint32) bool
	UnmapNamedBuffer(buffer uint32) bool
	UseProgram(program uint32)
	UseProgramStages(pipeline uint32, stages uint32, program uint32)
	ValidateProgram(program uint32)
	ValidateProgramPipeline(pipeline uint32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexArrayAttribBinding(vaobj uint32, attribindex uint32, bindingindex uint32)
	VertexArrayAttribFormat(vaobj uint32, attribindex uint32, size int32, type_ uint32, normalized bool, relativeoffset uint32)
	VertexArrayAttribIFormat(vaobj uint32, attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexArrayAttribLFormat(vaobj uint32, attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexArrayBindingDivisor(vaobj uint32, bindingindex uint32, divisor uint32)
	VertexArrayElementBuffer(vaobj uint32, buffer uint32)
	VertexArrayVertexBuffer(vaobj uint32, bindingindex uint32, buffer uint32, offset uintptr, stride int32)
	VertexArrayVertexBuffers(vaobj uint32, first uint32, count int32, buffers *uint32, offsets *uintptr, strides *int32)
	VertexAttrib1d(index uint32, x float64)
	VertexAttrib1dv(index uint32, v *float64)
	VertexAttrib1f(index uint32, x float32)
	VertexAttrib1fv(index uint32, v *float32)
	VertexAttrib1s(index uint32, x int16)
	VertexAttrib1sv(index uint32, v *int16)
	VertexAttrib2d(index uint32, x float64, y float64)
	VertexAttrib2dv(index uint32, v *float64)
	VertexAttrib2f(index uint32, x float32, y float32)
	VertexAttrib2fv(index uint32, v *float32)
	VertexAttrib2s(index uint32, x int16, y int16)
	VertexAttrib2sv(index uint32, v *int16)
	VertexAttrib3d(index uint32, x float64, y float64, z float64)
	VertexAttrib3dv(index uint32, v *float64)
	VertexAttrib3f(index uint32, x float32, y float32, z float32)
	VertexAttrib3fv(index uint32, v *float32)
	VertexAttrib3s(index uint32, x int16, y int16, z int16)
	VertexAttrib3sv(index uint32, v *int16)
	VertexAttrib4Nbv(index uint32, v *int8)
	VertexAttrib4Niv(index uint32, v *int32)
	VertexAttrib4Nsv(index uint32, v *int16)
	VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4Nubv(index uint32, v *uint8)
	VertexAttrib4Nuiv(index uint32, v *uint32)
	VertexAttrib4Nusv(index uint32, v *uint16)
	VertexAttrib4bv(index uint32, v *int8)
	VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dv(index uint32, v *float64)
	VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fv(index uint32, v *float32)
	VertexAttrib4iv(index uint32, v *int32)
	VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4sv(index uint32, v *int16)
	VertexAttrib4ubv(index uint32, v *uint8)
	VertexAttrib4uiv(index uint32, v *uint32)
	VertexAttrib4usv(index uint32, v *uint16)
	VertexAttribBinding(attribindex uint32, bindingindex uint32)
	VertexAttribDivisor(index uint32, divisor uint32)
	VertexAttribFormat(attribindex uint32, size int32, type_ uint32, normalized bool, relativeoffset uint32)
	VertexAttribI1i(index uint32, x int32)
	VertexAttribI1iv(index uint32, v *int32)
	VertexAttribI1ui(index uint32, x uint32)
	VertexAttribI1uiv(index uint32, v *uint32)
	VertexAttribI2i(index uint32, x int32, y int32)
	VertexAttribI2iv(index uint32, v *int32)
	VertexAttribI2ui(index uint32, x uint32, y uint32)
	VertexAttribI2uiv(index uint32, v *uint32)
	VertexAttribI3i(index uint32, x int32, y int32, z int32)
	VertexAttribI3iv(index uint32, v *int32)
	VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32)
	VertexAttribI3uiv(index uint32, v *uint32)
	VertexAttribI4bv(index uint32, v *int8)
	VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)
	VertexAttribI4iv(index uint32, v *int32)
	VertexAttribI4sv(index uint32, v *int16)
	VertexAttribI4ubv(index uint32, v *uint8)
	VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)
	VertexAttribI4uiv(index uint32, v *uint32)
	VertexAttribI4usv(index uint32, v *uint16)
	VertexAttribIFormat(attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexAttribIPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribL1d(index uint32, x float64)
	VertexAttribL1dv(index uint32, v *float64)
	VertexAttribL2d(index uint32, x float64, y float64)
	VertexAttribL2dv(index uint32, v *float64)
	VertexAttribL3d(index uint32, x float64, y float64, z float64)
	VertexAttribL3dv(index uint32, v *float64)
	VertexAttribL4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttribL4dv(index uint32, v *float64)
	VertexAttribLFormat(attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexAttribLPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribP1ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP1uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP2ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP2uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP3ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP3uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP4ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP4uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribPointer(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer)
	VertexBindingDivisor(bindingindex uint32, divisor uint32)
	VertexP2ui(type_ uint32, value uint32)
	VertexP2uiv(type_ uint32, value *uint32)
	VertexP3ui(type_ uint32, value uint32)
	VertexP3uiv(type_ uint32, value *uint32)
	VertexP4ui(type_ uint32, value uint32)
	VertexP4uiv(type_ uint32, value *uint32)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	ViewportArrayv(first uint32, count int32, v *float32)
	ViewportIndexedf(index uint32, x float32, y float32, w float32, h float32)
	ViewportIndexedfv(index uint32, v *float32)
	WaitSync(sync GLsync, flags uint32, timeout uint64)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New450(getProcAddr func(name string) unsafe.Pointer) GL450 {
	gl := &lib{
		glAccum:                             getProcAddr("glAccum"),
		glActiveShaderProgram:               getProcAddr("glActiveShaderProgram"),
		glActiveTexture:                     getProcAddr("glActiveTexture"),
		glAlphaFunc:                         getProcAddr("glAlphaFunc"),
		glAreTexturesResident:               getProcAddr("glAreTexturesResident"),
		glArrayElement:                      getProcAddr("glArrayElement"),
		glAttachShader:                      getProcAddr("glAttachShader"),
		glBegin:                             getProcAddr("glBegin"),
		glBeginConditionalRender:            getProcAddr("glBeginConditionalRender"),
		glBeginQuery:                        getProcAddr("glBeginQuery"),
		glBeginQueryIndexed:                 getProcAddr("glBeginQueryIndexed"),
		glBeginTransformFeedback:            getProcAddr("glBeginTransformFeedback"),
		glBindAttribLocation:                getProcAddr("glBindAttribLocation"),
		glBindBuffer:                        getProcAddr("glBindBuffer"),
		glBindBufferBase:                    getProcAddr("glBindBufferBase"),
		glBindBufferRange:                   getProcAddr("glBindBufferRange"),
		glBindBuffersBase:                   getProcAddr("glBindBuffersBase"),
		glBindBuffersRange:                  getProcAddr("glBindBuffersRange"),
		glBindFragDataLocation:              getProcAddr("glBindFragDataLocation"),
		glBindFragDataLocationIndexed:       getProcAddr("glBindFragDataLocationIndexed"),
		glBindFramebuffer:                   getProcAddr("glBindFramebuffer"),
		glBindImageTexture:                  getProcAddr("glBindImageTexture"),
		glBindImageTextures:                 getProcAddr("glBindImageTextures"),
		glBindProgramPipeline:               getProcAddr("glBindProgramPipeline"),
		glBindRenderbuffer:                  getProcAddr("glBindRenderbuffer"),
		glBindSampler:                       getProcAddr("glBindSampler"),
		glBindSamplers:                      getProcAddr("glBindSamplers"),
		glBindTexture:                       getProcAddr("glBindTexture"),
		glBindTextureUnit:                   getProcAddr("glBindTextureUnit"),
		glBindTextures:                      getProcAddr("glBindTextures"),
		glBindTransformFeedback:             getProcAddr("glBindTransformFeedback"),
		glBindVertexArray:                   getProcAddr("glBindVertexArray"),
		glBindVertexBuffer:                  getProcAddr("glBindVertexBuffer"),
		glBindVertexBuffers:                 getProcAddr("glBindVertexBuffers"),
		glBitmap:                            getProcAddr("glBitmap"),
		glBlendColor:                        getProcAddr("glBlendColor"),
		glBlendEquation:                     getProcAddr("glBlendEquation"),
		glBlendEquationSeparate:             getProcAddr("glBlendEquationSeparate"),
		glBlendEquationSeparatei:            getProcAddr("glBlendEquationSeparatei"),
		glBlendEquationi:                    getProcAddr("glBlendEquationi"),
		glBlendFunc:                         getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:                 getProcAddr("glBlendFuncSeparate"),
		glBlendFuncSeparatei:                getProcAddr("glBlendFuncSeparatei"),
		glBlendFunci:                        getProcAddr("glBlendFunci"),
		glBlitFramebuffer:                   getProcAddr("glBlitFramebuffer"),
		glBlitNamedFramebuffer:              getProcAddr("glBlitNamedFramebuffer"),
		glBufferData:                        getProcAddr("glBufferData"),
		glBufferStorage:                     getProcAddr("glBufferStorage"),
		glBufferSubData:                     getProcAddr("glBufferSubData"),
		glCallList:                          getProcAddr("glCallList"),
		glCallLists:                         getProcAddr("glCallLists"),
		glCheckFramebufferStatus:            getProcAddr("glCheckFramebufferStatus"),
		glCheckNamedFramebufferStatus:       getProcAddr("glCheckNamedFramebufferStatus"),
		glClampColor:                        getProcAddr("glClampColor"),
		glClear:                             getProcAddr("glClear"),
		glClearAccum:                        getProcAddr("glClearAccum"),
		glClearBufferData:                   getProcAddr("glClearBufferData"),
		glClearBufferSubData:                getProcAddr("glClearBufferSubData"),
		glClearBufferfi:                     getProcAddr("glClearBufferfi"),
		glClearBufferfv:                     getProcAddr("glClearBufferfv"),
		glClearBufferiv:                     getProcAddr("glClearBufferiv"),
		glClearBufferuiv:                    getProcAddr("glClearBufferuiv"),
		glClearColor:                        getProcAddr("glClearColor"),
		glClearDepth:                        getProcAddr("glClearDepth"),
		glClearDepthf:                       getProcAddr("glClearDepthf"),
		glClearIndex:                        getProcAddr("glClearIndex"),
		glClearNamedBufferData:              getProcAddr("glClearNamedBufferData"),
		glClearNamedBufferSubData:           getProcAddr("glClearNamedBufferSubData"),
		glClearNamedFramebufferfi:           getProcAddr("glClearNamedFramebufferfi"),
		glClearNamedFramebufferfv:           getProcAddr("glClearNamedFramebufferfv"),
		glClearNamedFramebufferiv:           getProcAddr("glClearNamedFramebufferiv"),
		glClearNamedFramebufferuiv:          getProcAddr("glClearNamedFramebufferuiv"),
		glClearStencil:                      getProcAddr("glClearStencil"),
		glClearTexImage:                     getProcAddr("glClearTexImage"),
		glClearTexSubImage:                  getProcAddr("glClearTexSubImage"),
		glClientActiveTexture:               getProcAddr("glClientActiveTexture"),
		glClientWaitSync:                    getProcAddr("glClientWaitSync"),
		glClipControl:                       getProcAddr("glClipControl"),
		glClipPlane:                         getProcAddr("glClipPlane"),
		glColor3b:                           getProcAddr("glColor3b"),
		glColor3bv:                          getProcAddr("glColor3bv"),
		glColor3d:                           getProcAddr("glColor3d"),
		glColor3dv:                          getProcAddr("glColor3dv"),
		glColor3f:                           getProcAddr("glColor3f"),
		glColor3fv:                          getProcAddr("glColor3fv"),
		glColor3i:                           getProcAddr("glColor3i"),
		glColor3iv:                          getProcAddr("glColor3iv"),
		glColor3s:                           getProcAddr("glColor3s"),
		glColor3sv:                          getProcAddr("glColor3sv"),
		glColor3ub:                          getProcAddr("glColor3ub"),
		glColor3ubv:                         getProcAddr("glColor3ubv"),
		glColor3ui:                          getProcAddr("glColor3ui"),
		glColor3uiv:                         getProcAddr("glColor3uiv"),
		glColor3us:                          getProcAddr("glColor3us"),
		glColor3usv:                         getProcAddr("glColor3usv"),
		glColor4b:                           getProcAddr("glColor4b"),
		glColor4bv:                          getProcAddr("glColor4bv"),
		glColor4d:                           getProcAddr("glColor4d"),
		glColor4dv:                          getProcAddr("glColor4dv"),
		glColor4f:                           getProcAddr("glColor4f"),
		glColor4fv:                          getProcAddr("glColor4fv"),
		glColor4i:                           getProcAddr("glColor4i"),
		glColor4iv:                          getProcAddr("glColor4iv"),
		glColor4s:                           getProcAddr("glColor4s"),
		glColor4sv:                          getProcAddr("glColor4sv"),
		glColor4ub:                          getProcAddr("glColor4ub"),
		glColor4ubv:                         getProcAddr("glColor4ubv"),
		glColor4ui:                          getProcAddr("glColor4ui"),
		glColor4uiv:                         getProcAddr("glColor4uiv"),
		glColor4us:                          getProcAddr("glColor4us"),
		glColor4usv:                         getProcAddr("glColor4usv"),
		glColorMask:                         getProcAddr("glColorMask"),
		glColorMaski:                        getProcAddr("glColorMaski"),
		glColorMaterial:                     getProcAddr("glColorMaterial"),
		glColorP3ui:                         getProcAddr("glColorP3ui"),
		glColorP3uiv:                        getProcAddr("glColorP3uiv"),
		glColorP4ui:                         getProcAddr("glColorP4ui"),
		glColorP4uiv:                        getProcAddr("glColorP4uiv"),
		glColorPointer:                      getProcAddr("glColorPointer"),
		glCompileShader:                     getProcAddr("glCompileShader"),
		glCompressedTexImage1D:              getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:              getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:              getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D:           getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D:           getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D:           getProcAddr("glCompressedTexSubImage3D"),
		glCompressedTextureSubImage1D:       getProcAddr("glCompressedTextureSubImage1D"),
		glCompressedTextureSubImage2D:       getProcAddr("glCompressedTextureSubImage2D"),
		glCompressedTextureSubImage3D:       getProcAddr("glCompressedTextureSubImage3D"),
		glCopyBufferSubData:                 getProcAddr("glCopyBufferSubData"),
		glCopyImageSubData:                  getProcAddr("glCopyImageSubData"),
		glCopyNamedBufferSubData:            getProcAddr("glCopyNamedBufferSubData"),
		glCopyPixels:                        getProcAddr("glCopyPixels"),
		glCopyTexImage1D:                    getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:                    getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:                 getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:                 getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:                 getProcAddr("glCopyTexSubImage3D"),
		glCopyTextureSubImage1D:             getProcAddr("glCopyTextureSubImage1D"),
		glCopyTextureSubImage2D:             getProcAddr("glCopyTextureSubImage2D"),
		glCopyTextureSubImage3D:             getProcAddr("glCopyTextureSubImage3D"),
		glCreateBuffers:                     getProcAddr("glCreateBuffers"),
		glCreateFramebuffers:                getProcAddr("glCreateFramebuffers"),
		glCreateProgram:                     getProcAddr("glCreateProgram"),
		glCreateProgramPipelines:            getProcAddr("glCreateProgramPipelines"),
		glCreateQueries:                     getProcAddr("glCreateQueries"),
		glCreateRenderbuffers:               getProcAddr("glCreateRenderbuffers"),
		glCreateSamplers:                    getProcAddr("glCreateSamplers"),
		glCreateShader:                      getProcAddr("glCreateShader"),
		glCreateShaderProgramv:              getProcAddr("glCreateShaderProgramv"),
		glCreateTextures:                    getProcAddr("glCreateTextures"),
		glCreateTransformFeedbacks:          getProcAddr("glCreateTransformFeedbacks"),
		glCreateVertexArrays:                getProcAddr("glCreateVertexArrays"),
		glCullFace:                          getProcAddr("glCullFace"),
		glDebugMessageCallback:              getProcAddr("glDebugMessageCallback"),
		glDebugMessageControl:               getProcAddr("glDebugMessageControl"),
		glDebugMessageInsert:                getProcAddr("glDebugMessageInsert"),
		glDeleteBuffers:                     getProcAddr("glDeleteBuffers"),
		glDeleteFramebuffers:                getProcAddr("glDeleteFramebuffers"),
		glDeleteLists:                       getProcAddr("glDeleteLists"),
		glDeleteProgram:                     getProcAddr("glDeleteProgram"),
		glDeleteProgramPipelines:            getProcAddr("glDeleteProgramPipelines"),
		glDeleteQueries:                     getProcAddr("glDeleteQueries"),
		glDeleteRenderbuffers:               getProcAddr("glDeleteRenderbuffers"),
		glDeleteSamplers:                    getProcAddr("glDeleteSamplers"),
		glDeleteShader:                      getProcAddr("glDeleteShader"),
		glDeleteSync:                        getProcAddr("glDeleteSync"),
		glDeleteTextures:                    getProcAddr("glDeleteTextures"),
		glDeleteTransformFeedbacks:          getProcAddr("glDeleteTransformFeedbacks"),
		glDeleteVertexArrays:                getProcAddr("glDeleteVertexArrays"),
		glDepthFunc:                         getProcAddr("glDepthFunc"),
		glDepthMask:                         getProcAddr("glDepthMask"),
		glDepthRange:                        getProcAddr("glDepthRange"),
		glDepthRangeArrayv:                  getProcAddr("glDepthRangeArrayv"),
		glDepthRangeIndexed:                 getProcAddr("glDepthRangeIndexed"),
		glDepthRangef:                       getProcAddr("glDepthRangef"),
		glDetachShader:                      getProcAddr("glDetachShader"),
		glDisable:                           getProcAddr("glDisable"),
		glDisableClientState:                getProcAddr("glDisableClientState"),
		glDisableVertexArrayAttrib:          getProcAddr("glDisableVertexArrayAttrib"),
		glDisableVertexAttribArray:          getProcAddr("glDisableVertexAttribArray"),
		glDisablei:                          getProcAddr("glDisablei"),
		glDispatchCompute:                   getProcAddr("glDispatchCompute"),
		glDispatchComputeIndirect:           getProcAddr("glDispatchComputeIndirect"),
		glDrawArrays:                        getProcAddr("glDrawArrays"),
		glDrawArraysIndirect:                getProcAddr("glDrawArraysIndirect"),
		glDrawArraysInstanced:               getProcAddr("glDrawArraysInstanced"),
		glDrawArraysInstancedBaseInstance:   getProcAddr("glDrawArraysInstancedBaseInstance"),
		glDrawBuffer:                        getProcAddr("glDrawBuffer"),
		glDrawBuffers:                       getProcAddr("glDrawBuffers"),
		glDrawElements:                      getProcAddr("glDrawElements"),
		glDrawElementsBaseVertex:            getProcAddr("glDrawElementsBaseVertex"),
		glDrawElementsIndirect:              getProcAddr("glDrawElementsIndirect"),
		glDrawElementsInstanced:             getProcAddr("glDrawElementsInstanced"),
		glDrawElementsInstancedBaseInstance: getProcAddr("glDrawElementsInstancedBaseInstance"),
		glDrawElementsInstancedBaseVertex:   getProcAddr("glDrawElementsInstancedBaseVertex"),
		glDrawElementsInstancedBaseVertexBaseInstance: getProcAddr("glDrawElementsInstancedBaseVertexBaseInstance"),
		glDrawPixels:                           getProcAddr("glDrawPixels"),
		glDrawRangeElements:                    getProcAddr("glDrawRangeElements"),
		glDrawRangeElementsBaseVertex:          getProcAddr("glDrawRangeElementsBaseVertex"),
		glDrawTransformFeedback:                getProcAddr("glDrawTransformFeedback"),
		glDrawTransformFeedbackInstanced:       getProcAddr("glDrawTransformFeedbackInstanced"),
		glDrawTransformFeedbackStream:          getProcAddr("glDrawTransformFeedbackStream"),
		glDrawTransformFeedbackStreamInstanced: getProcAddr("glDrawTransformFeedbackStreamInstanced"),
		glEdgeFlag:                             getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:                      getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:                            getProcAddr("glEdgeFlagv"),
		glEnable:                               getProcAddr("glEnable"),
		glEnableClientState:                    getProcAddr("glEnableClientState"),
		glEnableVertexArrayAttrib:              getProcAddr("glEnableVertexArrayAttrib"),
		glEnableVertexAttribArray:              getProcAddr("glEnableVertexAttribArray"),
		glEnablei:                              getProcAddr("glEnablei"),
		glEnd:                                  getProcAddr("glEnd"),
		glEndConditionalRender:                 getProcAddr("glEndConditionalRender"),
		glEndList:                              getProcAddr("glEndList"),
		glEndQuery:                             getProcAddr("glEndQuery"),
		glEndQueryIndexed:                      getProcAddr("glEndQueryIndexed"),
		glEndTransformFeedback:                 getProcAddr("glEndTransformFeedback"),
		glEvalCoord1d:                          getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:                         getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:                          getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:                         getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:                          getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:                         getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:                          getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:                         getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:                            getProcAddr("glEvalMesh1"),
		glEvalMesh2:                            getProcAddr("glEvalMesh2"),
		glEvalPoint1:                           getProcAddr("glEvalPoint1"),
		glEvalPoint2:                           getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:                       getProcAddr("glFeedbackBuffer"),
		glFenceSync:                            getProcAddr("glFenceSync"),
		glFinish:                               getProcAddr("glFinish"),
		glFlush:                                getProcAddr("glFlush"),
		glFlushMappedBufferRange:               getProcAddr("glFlushMappedBufferRange"),
		glFlushMappedNamedBufferRange:          getProcAddr("glFlushMappedNamedBufferRange"),
		glFogCoordPointer:                      getProcAddr("glFogCoordPointer"),
		glFogCoordd:                            getProcAddr("glFogCoordd"),
		glFogCoorddv:                           getProcAddr("glFogCoorddv"),
		glFogCoordf:                            getProcAddr("glFogCoordf"),
		glFogCoordfv:                           getProcAddr("glFogCoordfv"),
		glFogf:                                 getProcAddr("glFogf"),
		glFogfv:                                getProcAddr("glFogfv"),
		glFogi:                                 getProcAddr("glFogi"),
		glFogiv:                                getProcAddr("glFogiv"),
		glFramebufferParameteri:                getProcAddr("glFramebufferParameteri"),
		glFramebufferRenderbuffer:              getProcAddr("glFramebufferRenderbuffer"),
		glFramebufferTexture:                   getProcAddr("glFramebufferTexture"),
		glFramebufferTexture1D:                 getProcAddr("glFramebufferTexture1D"),
		glFramebufferTexture2D:                 getProcAddr("glFramebufferTexture2D"),
		glFramebufferTexture3D:                 getProcAddr("glFramebufferTexture3D"),
		glFramebufferTextureLayer:              getProcAddr("glFramebufferTextureLayer"),
		glFrontFace:                            getProcAddr("glFrontFace"),
		glFrustum:                              getProcAddr("glFrustum"),
		glGenBuffers:                           getProcAddr("glGenBuffers"),
		glGenFramebuffers:                      getProcAddr("glGenFramebuffers"),
		glGenLists:                             getProcAddr("glGenLists"),
		glGenProgramPipelines:                  getProcAddr("glGenProgramPipelines"),
		glGenQueries:                           getProcAddr("glGenQueries"),
		glGenRenderbuffers:                     getProcAddr("glGenRenderbuffers"),
		glGenSamplers:                          getProcAddr("glGenSamplers"),
		glGenTextures:                          getProcAddr("glGenTextures"),
		glGenTransformFeedbacks:                getProcAddr("glGenTransformFeedbacks"),
		glGenVertexArrays:                      getProcAddr("glGenVertexArrays"),
		glGenerateMipmap:                       getProcAddr("glGenerateMipmap"),
		glGenerateTextureMipmap:                getProcAddr("glGenerateTextureMipmap"),
		glGetActiveAtomicCounterBufferiv:       getProcAddr("glGetActiveAtomicCounterBufferiv"),
		glGetActiveAttrib:                      getProcAddr("glGetActiveAttrib"),
		glGetActiveSubroutineName:              getProcAddr("glGetActiveSubroutineName"),
		glGetActiveSubroutineUniformName:       getProcAddr("glGetActiveSubroutineUniformName"),
		glGetActiveSubroutineUniformiv:         getProcAddr("glGetActiveSubroutineUniformiv"),
		glGetActiveUniform:                     getProcAddr("glGetActiveUniform"),
		glGetActiveUniformBlockName:            getProcAddr("glGetActiveUniformBlockName"),
		glGetActiveUniformBlockiv:              getProcAddr("glGetActiveUniformBlockiv"),
		glGetActiveUniformName:                 getProcAddr("glGetActiveUniformName"),
		glGetActiveUniformsiv:                  getProcAddr("glGetActiveUniformsiv"),
		glGetAttachedShaders:                   getProcAddr("glGetAttachedShaders"),
		glGetAttribLocation:                    getProcAddr("glGetAttribLocation"),
		glGetBooleani_v:                        getProcAddr("glGetBooleani_v"),
		glGetBooleanv:                          getProcAddr("glGetBooleanv"),
		glGetBufferParameteri64v:               getProcAddr("glGetBufferParameteri64v"),
		glGetBufferParameteriv:                 getProcAddr("glGetBufferParameteriv"),
		glGetBufferPointerv:                    getProcAddr("glGetBufferPointerv"),
		glGetBufferSubData:                     getProcAddr("glGetBufferSubData"),
		glGetClipPlane:                         getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:                getProcAddr("glGetCompressedTexImage"),
		glGetCompressedTextureImage:            getProcAddr("glGetCompressedTextureImage"),
		glGetCompressedTextureSubImage:         getProcAddr("glGetCompressedTextureSubImage"),
		glGetDebugMessageLog:                   getProcAddr("glGetDebugMessageLog"),
		glGetDoublei_v:                         getProcAddr("glGetDoublei_v"),
		glGetDoublev:                           getProcAddr("glGetDoublev"),
		glGetError:                             getProcAddr("glGetError"),
		glGetFloati_v:                          getProcAddr("glGetFloati_v"),
		glGetFloatv:                            getProcAddr("glGetFloatv"),
		glGetFragDataIndex:                     getProcAddr("glGetFragDataIndex"),
		glGetFragDataLocation:                  getProcAddr("glGetFragDataLocation"),
		glGetFramebufferAttachmentParameteriv:  getProcAddr("glGetFramebufferAttachmentParameteriv"),
		glGetFramebufferParameteriv:            getProcAddr("glGetFramebufferParameteriv"),
		glGetGraphicsResetStatus:               getProcAddr("glGetGraphicsResetStatus"),
		glGetInteger64i_v:                      getProcAddr("glGetInteger64i_v"),
		glGetInteger64v:                        getProcAddr("glGetInteger64v"),
		glGetIntegeri_v:                        getProcAddr("glGetIntegeri_v"),
		glGetIntegerv:                          getProcAddr("glGetIntegerv"),
		glGetInternalformati64v:                getProcAddr("glGetInternalformati64v"),
		glGetInternalformativ:                  getProcAddr("glGetInternalformativ"),
		glGetLightfv:                           getProcAddr("glGetLightfv"),
		glGetLightiv:                           getProcAddr("glGetLightiv"),
		glGetMapdv:                             getProcAddr("glGetMapdv"),
		glGetMapfv:                             getProcAddr("glGetMapfv"),
		glGetMapiv:                             getProcAddr("glGetMapiv"),
		glGetMaterialfv:                        getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:                        getProcAddr("glGetMaterialiv"),
		glGetMultisamplefv:                     getProcAddr("glGetMultisamplefv"),
		glGetNamedBufferParameteri64v:          getProcAddr("glGetNamedBufferParameteri64v"),
		glGetNamedBufferParameteriv:            getProcAddr("glGetNamedBufferParameteriv"),
		glGetNamedBufferPointerv:               getProcAddr("glGetNamedBufferPointerv"),
		glGetNamedBufferSubData:                getProcAddr("glGetNamedBufferSubData"),
		glGetNamedFramebufferAttachmentParameteriv: getProcAddr("glGetNamedFramebufferAttachmentParameteriv"),
		glGetNamedFramebufferParameteriv:           getProcAddr("glGetNamedFramebufferParameteriv"),
		glGetNamedRenderbufferParameteriv:          getProcAddr("glGetNamedRenderbufferParameteriv"),
		glGetObjectLabel:                           getProcAddr("glGetObjectLabel"),
		glGetObjectPtrLabel:                        getProcAddr("glGetObjectPtrLabel"),
		glGetPixelMapfv:                            getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:                           getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:                           getProcAddr("glGetPixelMapusv"),
		glGetPointerv:                              getProcAddr("glGetPointerv"),
		glGetPolygonStipple:                        getProcAddr("glGetPolygonStipple"),
		glGetProgramBinary:                         getProcAddr("glGetProgramBinary"),
		glGetProgramInfoLog:                        getProcAddr("glGetProgramInfoLog"),
		glGetProgramInterfaceiv:                    getProcAddr("glGetProgramInterfaceiv"),
		glGetProgramPipelineInfoLog:                getProcAddr("glGetProgramPipelineInfoLog"),
		glGetProgramPipelineiv:                     getProcAddr("glGetProgramPipelineiv"),
		glGetProgramResourceIndex:                  getProcAddr("glGetProgramResourceIndex"),
		glGetProgramResourceLocation:               getProcAddr("glGetProgramResourceLocation"),
		glGetProgramResourceLocationIndex:          getProcAddr("glGetProgramResourceLocationIndex"),
		glGetProgramResourceName:                   getProcAddr("glGetProgramResourceName"),
		glGetProgramResourceiv:                     getProcAddr("glGetProgramResourceiv"),
		glGetProgramStageiv:                        getProcAddr("glGetProgramStageiv"),
		glGetProgramiv:                             getProcAddr("glGetProgramiv"),
		glGetQueryBufferObjecti64v:                 getProcAddr("glGetQueryBufferObjecti64v"),
		glGetQueryBufferObjectiv:                   getProcAddr("glGetQueryBufferObjectiv"),
		glGetQueryBufferObjectui64v:                getProcAddr("glGetQueryBufferObjectui64v"),
		glGetQueryBufferObjectuiv:                  getProcAddr("glGetQueryBufferObjectuiv"),
		glGetQueryIndexediv:                        getProcAddr("glGetQueryIndexediv"),
		glGetQueryObjecti64v:                       getProcAddr("glGetQueryObjecti64v"),
		glGetQueryObjectiv:                         getProcAddr("glGetQueryObjectiv"),
		glGetQueryObjectui64v:                      getProcAddr("glGetQueryObjectui64v"),
		glGetQueryObjectuiv:                        getProcAddr("glGetQueryObjectuiv"),
		glGetQueryiv:                               getProcAddr("glGetQueryiv"),
		glGetRenderbufferParameteriv:               getProcAddr("glGetRenderbufferParameteriv"),
		glGetSamplerParameterIiv:                   getProcAddr("glGetSamplerParameterIiv"),
		glGetSamplerParameterIuiv:                  getProcAddr("glGetSamplerParameterIuiv"),
		glGetSamplerParameterfv:                    getProcAddr("glGetSamplerParameterfv"),
		glGetSamplerParameteriv:                    getProcAddr("glGetSamplerParameteriv"),
		glGetShaderInfoLog:                         getProcAddr("glGetShaderInfoLog"),
		glGetShaderPrecisionFormat:                 getProcAddr("glGetShaderPrecisionFormat"),
		glGetShaderSource:                          getProcAddr("glGetShaderSource"),
		glGetShaderiv:                              getProcAddr("glGetShaderiv"),
		glGetString:                                getProcAddr("glGetString"),
		glGetStringi:                               getProcAddr("glGetStringi"),
		glGetSubroutineIndex:                       getProcAddr("glGetSubroutineIndex"),
		glGetSubroutineUniformLocation:             getProcAddr("glGetSubroutineUniformLocation"),
		glGetSynciv:                                getProcAddr("glGetSynciv"),
		glGetTexEnvfv:                              getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:                              getProcAddr("glGetTexEnviv"),
		glGetTexGendv:                              getProcAddr("glGetTexGendv"),
		glGetTexGenfv:                              getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:                              getProcAddr("glGetTexGeniv"),
		glGetTexImage:                              getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:                   getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:                   getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterIiv:                       getProcAddr("glGetTexParameterIiv"),
		glGetTexParameterIuiv:                      getProcAddr("glGetTexParameterIuiv"),
		glGetTexParameterfv:                        getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:                        getProcAddr("glGetTexParameteriv"),
		glGetTextureImage:                          getProcAddr("glGetTextureImage"),
		glGetTextureLevelParameterfv:               getProcAddr("glGetTextureLevelParameterfv"),
		glGetTextureLevelParameteriv:               getProcAddr("glGetTextureLevelParameteriv"),
		glGetTextureParameterIiv:                   getProcAddr("glGetTextureParameterIiv"),
		glGetTextureParameterIuiv:                  getProcAddr("glGetTextureParameterIuiv"),
		glGetTextureParameterfv:                    getProcAddr("glGetTextureParameterfv"),
		glGetTextureParameteriv:                    getProcAddr("glGetTextureParameteriv"),
		glGetTextureSubImage:                       getProcAddr("glGetTextureSubImage"),
		glGetTransformFeedbackVarying:              getProcAddr("glGetTransformFeedbackVarying"),
		glGetTransformFeedbacki64_v:                getProcAddr("glGetTransformFeedbacki64_v"),
		glGetTransformFeedbacki_v:                  getProcAddr("glGetTransformFeedbacki_v"),
		glGetTransformFeedbackiv:                   getProcAddr("glGetTransformFeedbackiv"),
		glGetUniformBlockIndex:                     getProcAddr("glGetUniformBlockIndex"),
		glGetUniformIndices:                        getProcAddr("glGetUniformIndices"),
		glGetUniformLocation:                       getProcAddr("glGetUniformLocation"),
		glGetUniformSubroutineuiv:                  getProcAddr("glGetUniformSubroutineuiv"),
		glGetUniformdv:                             getProcAddr("glGetUniformdv"),
		glGetUniformfv:                             getProcAddr("glGetUniformfv"),
		glGetUniformiv:                             getProcAddr("glGetUniformiv"),
		glGetUniformuiv:                            getProcAddr("glGetUniformuiv"),
		glGetVertexArrayIndexed64iv:                getProcAddr("glGetVertexArrayIndexed64iv"),
		glGetVertexArrayIndexediv:                  getProcAddr("glGetVertexArrayIndexediv"),
		glGetVertexArrayiv:                         getProcAddr("glGetVertexArrayiv"),
		glGetVertexAttribIiv:                       getProcAddr("glGetVertexAttribIiv"),
		glGetVertexAttribIuiv:                      getProcAddr("glGetVertexAttribIuiv"),
		glGetVertexAttribLdv:                       getProcAddr("glGetVertexAttribLdv"),
		glGetVertexAttribPointerv:                  getProcAddr("glGetVertexAttribPointerv"),
		glGetVertexAttribdv:                        getProcAddr("glGetVertexAttribdv"),
		glGetVertexAttribfv:                        getProcAddr("glGetVertexAttribfv"),
		glGetVertexAttribiv:                        getProcAddr("glGetVertexAttribiv"),
		glGetnColorTable:                           getProcAddr("glGetnColorTable"),
		glGetnCompressedTexImage:                   getProcAddr("glGetnCompressedTexImage"),
		glGetnConvolutionFilter:                    getProcAddr("glGetnConvolutionFilter"),
		glGetnHistogram:                            getProcAddr("glGetnHistogram"),
		glGetnMapdv:                                getProcAddr("glGetnMapdv"),
		glGetnMapfv:                                getProcAddr("glGetnMapfv"),
		glGetnMapiv:                                getProcAddr("glGetnMapiv"),
		glGetnMinmax:                               getProcAddr("glGetnMinmax"),
		glGetnPixelMapfv:                           getProcAddr("glGetnPixelMapfv"),
		glGetnPixelMapuiv:                          getProcAddr("glGetnPixelMapuiv"),
		glGetnPixelMapusv:                          getProcAddr("glGetnPixelMapusv"),
		glGetnPolygonStipple:                       getProcAddr("glGetnPolygonStipple"),
		glGetnSeparableFilter:                      getProcAddr("glGetnSeparableFilter"),
		glGetnTexImage:                             getProcAddr("glGetnTexImage"),
		glGetnUniformdv:                            getProcAddr("glGetnUniformdv"),
		glGetnUniformfv:                            getProcAddr("glGetnUniformfv"),
		glGetnUniformiv:                            getProcAddr("glGetnUniformiv"),
		glGetnUniformuiv:                           getProcAddr("glGetnUniformuiv"),
		glHint:                                     getProcAddr("glHint"),
		glIndexMask:                                getProcAddr("glIndexMask"),
		glIndexPointer:                             getProcAddr("glIndexPointer"),
		glIndexd:                                   getProcAddr("glIndexd"),
		glIndexdv:                                  getProcAddr("glIndexdv"),
		glIndexf:                                   getProcAddr("glIndexf"),
		glIndexfv:                                  getProcAddr("glIndexfv"),
		glIndexi:                                   getProcAddr("glIndexi"),
		glIndexiv:                                  getProcAddr("glIndexiv"),
		glIndexs:                                   getProcAddr("glIndexs"),
		glIndexsv:                                  getProcAddr("glIndexsv"),
		glIndexub:                                  getProcAddr("glIndexub"),
		glIndexubv:                                 getProcAddr("glIndexubv"),
		glInitNames:                                getProcAddr("glInitNames"),
		glInterleavedArrays:                        getProcAddr("glInterleavedArrays"),
		glInvalidateBufferData:                     getProcAddr("glInvalidateBufferData"),
		glInvalidateBufferSubData:                  getProcAddr("glInvalidateBufferSubData"),
		glInvalidateFramebuffer:                    getProcAddr("glInvalidateFramebuffer"),
		glInvalidateNamedFramebufferData:           getProcAddr("glInvalidateNamedFramebufferData"),
		glInvalidateNamedFramebufferSubData:        getProcAddr("glInvalidateNamedFramebufferSubData"),
		glInvalidateSubFramebuffer:                 getProcAddr("glInvalidateSubFramebuffer"),
		glInvalidateTexImage:                       getProcAddr("glInvalidateTexImage"),
		glInvalidateTexSubImage:                    getProcAddr("glInvalidateTexSubImage"),
		glIsBuffer:                                 getProcAddr("glIsBuffer"),
		glIsEnabled:                                getProcAddr("glIsEnabled"),
		glIsEnabledi:                               getProcAddr("glIsEnabledi"),
		glIsFramebuffer:                            getProcAddr("glIsFramebuffer"),
		glIsList:                                   getProcAddr("glIsList"),
		glIsProgram:                                getProcAddr("glIsProgram"),
		glIsProgramPipeline:                        getProcAddr("glIsProgramPipeline"),
		glIsQuery:                                  getProcAddr("glIsQuery"),
		glIsRenderbuffer:                           getProcAddr("glIsRenderbuffer"),
		glIsSampler:                                getProcAddr("glIsSampler"),
		glIsShader:                                 getProcAddr("glIsShader"),
		glIsSync:                                   getProcAddr("glIsSync"),
		glIsTexture:                                getProcAddr("glIsTexture"),
		glIsTransformFeedback:                      getProcAddr("glIsTransformFeedback"),
		glIsVertexArray:                            getProcAddr("glIsVertexArray"),
		glLightModelf:                              getProcAddr("glLightModelf"),
		glLightModelfv:                             getProcAddr("glLightModelfv"),
		glLightModeli:                              getProcAddr("glLightModeli"),
		glLightModeliv:                             getProcAddr("glLightModeliv"),
		glLightf:                                   getProcAddr("glLightf"),
		glLightfv:                                  getProcAddr("glLightfv"),
		glLighti:                                   getProcAddr("glLighti"),
		glLightiv:                                  getProcAddr("glLightiv"),
		glLineStipple:                              getProcAddr("glLineStipple"),
		glLineWidth:                                getProcAddr("glLineWidth"),
		glLinkProgram:                              getProcAddr("glLinkProgram"),
		glListBase:                                 getProcAddr("glListBase"),
		glLoadIdentity:                             getProcAddr("glLoadIdentity"),
		glLoadMatrixd:                              getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:                              getProcAddr("glLoadMatrixf"),
		glLoadName:                                 getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:                     getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:                     getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                                  getProcAddr("glLogicOp"),
		glMap1d:                                    getProcAddr("glMap1d"),
		glMap1f:                                    getProcAddr("glMap1f"),
		glMap2d:                                    getProcAddr("glMap2d"),
		glMap2f:                                    getProcAddr("glMap2f"),
		glMapBuffer:                                getProcAddr("glMapBuffer"),
		glMapBufferRange:                           getProcAddr("glMapBufferRange"),
		glMapGrid1d:                                getProcAddr("glMapGrid1d"),
		glMapGrid1f:                                getProcAddr("glMapGrid1f"),
		glMapGrid2d:                                getProcAddr("glMapGrid2d"),
		glMapGrid2f:                                getProcAddr("glMapGrid2f"),
		glMapNamedBuffer:                           getProcAddr("glMapNamedBuffer"),
		glMapNamedBufferRange:                      getProcAddr("glMapNamedBufferRange"),
		glMaterialf:                                getProcAddr("glMaterialf"),
		glMaterialfv:                               getProcAddr("glMaterialfv"),
		glMateriali:                                getProcAddr("glMateriali"),
		glMaterialiv:                               getProcAddr("glMaterialiv"),
		glMatrixMode:                               getProcAddr("glMatrixMode"),
		glMemoryBarrier:                            getProcAddr("glMemoryBarrier"),
		glMemoryBarrierByRegion:                    getProcAddr("glMemoryBarrierByRegion"),
		glMinSampleShading:                         getProcAddr("glMinSampleShading"),
		glMultMatrixd:                              getProcAddr("glMultMatrixd"),
		glMultMatrixf:                              getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:                     getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:                     getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:                          getProcAddr("glMultiDrawArrays"),
		glMultiDrawArraysIndirect:                  getProcAddr("glMultiDrawArraysIndirect"),
		glMultiDrawElements:                        getProcAddr("glMultiDrawElements"),
		glMultiDrawElementsBaseVertex:              getProcAddr("glMultiDrawElementsBaseVertex"),
		glMultiDrawElementsIndirect:                getProcAddr("glMultiDrawElementsIndirect"),
		glMultiTexCoord1d:                          getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:                         getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:                          getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:                         getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:                          getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:                         getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:                          getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:                         getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:                          getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:                         getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:                          getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:                         getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:                          getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:                         getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:                          getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:                         getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:                          getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:                         getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:                          getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:                         getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:                          getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:                         getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:                          getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:                         getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:                          getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:                         getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:                          getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:                         getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:                          getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:                         getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:                          getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:                         getProcAddr("glMultiTexCoord4sv"),
		glMultiTexCoordP1ui:                        getProcAddr("glMultiTexCoordP1ui"),
		glMultiTexCoordP1uiv:                       getProcAddr("glMultiTexCoordP1uiv"),
		glMultiTexCoordP2ui:                        getProcAddr("glMultiTexCoordP2ui"),
		glMultiTexCoordP2uiv:                       getProcAddr("glMultiTexCoordP2uiv"),
		glMultiTexCoordP3ui:                        getProcAddr("glMultiTexCoordP3ui"),
		glMultiTexCoordP3uiv:                       getProcAddr("glMultiTexCoordP3uiv"),
		glMultiTexCoordP4ui:                        getProcAddr("glMultiTexCoordP4ui"),
		glMultiTexCoordP4uiv:                       getProcAddr("glMultiTexCoordP4uiv"),
		glNamedBufferData:                          getProcAddr("glNamedBufferData"),
		glNamedBufferStorage:                       getProcAddr("glNamedBufferStorage"),
		glNamedBufferSubData:                       getProcAddr("glNamedBufferSubData"),
		glNamedFramebufferDrawBuffer:               getProcAddr("glNamedFramebufferDrawBuffer"),
		glNamedFramebufferDrawBuffers:              getProcAddr("glNamedFramebufferDrawBuffers"),
		glNamedFramebufferParameteri:               getProcAddr("glNamedFramebufferParameteri"),
		glNamedFramebufferReadBuffer:               getProcAddr("glNamedFramebufferReadBuffer"),
		glNamedFramebufferRenderbuffer:             getProcAddr("glNamedFramebufferRenderbuffer"),
		glNamedFramebufferTexture:                  getProcAddr("glNamedFramebufferTexture"),
		glNamedFramebufferTextureLayer:             getProcAddr("glNamedFramebufferTextureLayer"),
		glNamedRenderbufferStorage:                 getProcAddr("glNamedRenderbufferStorage"),
		glNamedRenderbufferStorageMultisample:      getProcAddr("glNamedRenderbufferStorageMultisample"),
		glNewList:                                  getProcAddr("glNewList"),
		glNormal3b:                                 getProcAddr("glNormal3b"),
		glNormal3bv:                                getProcAddr("glNormal3bv"),
		glNormal3d:                                 getProcAddr("glNormal3d"),
		glNormal3dv:                                getProcAddr("glNormal3dv"),
		glNormal3f:                                 getProcAddr("glNormal3f"),
		glNormal3fv:                                getProcAddr("glNormal3fv"),
		glNormal3i:                                 getProcAddr("glNormal3i"),
		glNormal3iv:                                getProcAddr("glNormal3iv"),
		glNormal3s:                                 getProcAddr("glNormal3s"),
		glNormal3sv:                                getProcAddr("glNormal3sv"),
		glNormalP3ui:                               getProcAddr("glNormalP3ui"),
		glNormalP3uiv:                              getProcAddr("glNormalP3uiv"),
		glNormalPointer:                            getProcAddr("glNormalPointer"),
		glObjectLabel:                              getProcAddr("glObjectLabel"),
		glObjectPtrLabel:                           getProcAddr("glObjectPtrLabel"),
		glOrtho:                                    getProcAddr("glOrtho"),
		glPassThrough:                              getProcAddr("glPassThrough"),
		glPatchParameterfv:                         getProcAddr("glPatchParameterfv"),
		glPatchParameteri:                          getProcAddr("glPatchParameteri"),
		glPauseTransformFeedback:                   getProcAddr("glPauseTransformFeedback"),
		glPixelMapfv:                               getProcAddr("glPixelMapfv"),
		glPixelMapuiv:                              getProcAddr("glPixelMapuiv"),
		glPixelMapusv:                              getProcAddr("glPixelMapusv"),
		glPixelStoref:                              getProcAddr("glPixelStoref"),
		glPixelStorei:                              getProcAddr("glPixelStorei"),
		glPixelTransferf:                           getProcAddr("glPixelTransferf"),
		glPixelTransferi:                           getProcAddr("glPixelTransferi"),
		glPixelZoom:                                getProcAddr("glPixelZoom"),
		glPointParameterf:                          getProcAddr("glPointParameterf"),
		glPointParameterfv:                         getProcAddr("glPointParameterfv"),
		glPointParameteri:                          getProcAddr("glPointParameteri"),
		glPointParameteriv:                         getProcAddr("glPointParameteriv"),
		glPointSize:                                getProcAddr("glPointSize"),
		glPolygonMode:                              getProcAddr("glPolygonMode"),
		glPolygonOffset:                            getProcAddr("glPolygonOffset"),
		glPolygonStipple:                           getProcAddr("glPolygonStipple"),
		glPopAttrib:                                getProcAddr("glPopAttrib"),
		glPopClientAttrib:                          getProcAddr("glPopClientAttrib"),
		glPopDebugGroup:                            getProcAddr("glPopDebugGroup"),
		glPopMatrix:                                getProcAddr("glPopMatrix"),
		glPopName:                                  getProcAddr("glPopName"),
		glPrimitiveRestartIndex:                    getProcAddr("glPrimitiveRestartIndex"),
		glPrioritizeTextures:                       getProcAddr("glPrioritizeTextures"),
		glProgramBinary:                            getProcAddr("glProgramBinary"),
		glProgramParameteri:                        getProcAddr("glProgramParameteri"),
		glProgramUniform1d:                         getProcAddr("glProgramUniform1d"),
		glProgramUniform1dv:                        getProcAddr("glProgramUniform1dv"),
		glProgramUniform1f:                         getProcAddr("glProgramUniform1f"),
		glProgramUniform1fv:                        getProcAddr("glProgramUniform1fv"),
		glProgramUniform1i:                         getProcAddr("glProgramUniform1i"),
		glProgramUniform1iv:                        getProcAddr("glProgramUniform1iv"),
		glProgramUniform1ui:                        getProcAddr("glProgramUniform1ui"),
		glProgramUniform1uiv:                       getProcAddr("glProgramUniform1uiv"),
		glProgramUniform2d:                         getProcAddr("glProgramUniform2d"),
		glProgramUniform2dv:                        getProcAddr("glProgramUniform2dv"),
		glProgramUniform2f:                         getProcAddr("glProgramUniform2f"),
		glProgramUniform2fv:                        getProcAddr("glProgramUniform2fv"),
		glProgramUniform2i:                         getProcAddr("glProgramUniform2i"),
		glProgramUniform2iv:                        getProcAddr("glProgramUniform2iv"),
		glProgramUniform2ui:                        getProcAddr("glProgramUniform2ui"),
		glProgramUniform2uiv:                       getProcAddr("glProgramUniform2uiv"),
		glProgramUniform3d:                         getProcAddr("glProgramUniform3d"),
		glProgramUniform3dv:                        getProcAddr("glProgramUniform3dv"),
		glProgramUniform3f:                         getProcAddr("glProgramUniform3f"),
		glProgramUniform3fv:                        getProcAddr("glProgramUniform3fv"),
		glProgramUniform3i:                         getProcAddr("glProgramUniform3i"),
		glProgramUniform3iv:                        getProcAddr("glProgramUniform3iv"),
		glProgramUniform3ui:                        getProcAddr("glProgramUniform3ui"),
		glProgramUniform3uiv:                       getProcAddr("glProgramUniform3uiv"),
		glProgramUniform4d:                         getProcAddr("glProgramUniform4d"),
		glProgramUniform4dv:                        getProcAddr("glProgramUniform4dv"),
		glProgramUniform4f:                         getProcAddr("glProgramUniform4f"),
		glProgramUniform4fv:                        getProcAddr("glProgramUniform4fv"),
		glProgramUniform4i:                         getProcAddr("glProgramUniform4i"),
		glProgramUniform4iv:                        getProcAddr("glProgramUniform4iv"),
		glProgramUniform4ui:                        getProcAddr("glProgramUniform4ui"),
		glProgramUniform4uiv:                       getProcAddr("glProgramUniform4uiv"),
		glProgramUniformMatrix2dv:                  getProcAddr("glProgramUniformMatrix2dv"),
		glProgramUniformMatrix2fv:                  getProcAddr("glProgramUniformMatrix2fv"),
		glProgramUniformMatrix2x3dv:                getProcAddr("glProgramUniformMatrix2x3dv"),
		glProgramUniformMatrix2x3fv:                getProcAddr("glProgramUniformMatrix2x3fv"),
		glProgramUniformMatrix2x4dv:                getProcAddr("glProgramUniformMatrix2x4dv"),
		glProgramUniformMatrix2x4fv:                getProcAddr("glProgramUniformMatrix2x4fv"),
		glProgramUniformMatrix3dv:                  getProcAddr("glProgramUniformMatrix3dv"),
		glProgramUniformMatrix3fv:                  getProcAddr("glProgramUniformMatrix3fv"),
		glProgramUniformMatrix3x2dv:                getProcAddr("glProgramUniformMatrix3x2dv"),
		glProgramUniformMatrix3x2fv:                getProcAddr("glProgramUniformMatrix3x2fv"),
		glProgramUniformMatrix3x4dv:                getProcAddr("glProgramUniformMatrix3x4dv"),
		glProgramUniformMatrix3x4fv:                getProcAddr("glProgramUniformMatrix3x4fv"),
		glProgramUniformMatrix4dv:                  getProcAddr("glProgramUniformMatrix4dv"),
		glProgramUniformMatrix4fv:                  getProcAddr("glProgramUniformMatrix4fv"),
		glProgramUniformMatrix4x2dv:                getProcAddr("glProgramUniformMatrix4x2dv"),
		glProgramUniformMatrix4x2fv:                getProcAddr("glProgramUniformMatrix4x2fv"),
		glProgramUniformMatrix4x3dv:                getProcAddr("glProgramUniformMatrix4x3dv"),
		glProgramUniformMatrix4x3fv:                getProcAddr("glProgramUniformMatrix4x3fv"),
		glProvokingVertex:                          getProcAddr("glProvokingVertex"),
		glPushAttrib:                               getProcAddr("glPushAttrib"),
		glPushClientAttrib:                         getProcAddr("glPushClientAttrib"),
		glPushDebugGroup:                           getProcAddr("glPushDebugGroup"),
		glPushMatrix:                               getProcAddr("glPushMatrix"),
		glPushName:                                 getProcAddr("glPushName"),
		glQueryCounter:                             getProcAddr("glQueryCounter"),
		glRasterPos2d:                              getProcAddr("glRasterPos2d"),
		glRasterPos2dv:                             getProcAddr("glRasterPos2dv"),
		glRasterPos2f:                              getProcAddr("glRasterPos2f"),
		glRasterPos2fv:                             getProcAddr("glRasterPos2fv"),
		glRasterPos2i:                              getProcAddr("glRasterPos2i"),
		glRasterPos2iv:                             getProcAddr("glRasterPos2iv"),
		glRasterPos2s:                              getProcAddr("glRasterPos2s"),
		glRasterPos2sv:                             getProcAddr("glRasterPos2sv"),
		glRasterPos3d:                              getProcAddr("glRasterPos3d"),
		glRasterPos3dv:                             getProcAddr("glRasterPos3dv"),
		glRasterPos3f:                              getProcAddr("glRasterPos3f"),
		glRasterPos3fv:                             getProcAddr("glRasterPos3fv"),
		glRasterPos3i:                              getProcAddr("glRasterPos3i"),
		glRasterPos3iv:                             getProcAddr("glRasterPos3iv"),
		glRasterPos3s:                              getProcAddr("glRasterPos3s"),
		glRasterPos3sv:                             getProcAddr("glRasterPos3sv"),
		glRasterPos4d:                              getProcAddr("glRasterPos4d"),
		glRasterPos4dv:                             getProcAddr("glRasterPos4dv"),
		glRasterPos4f:                              getProcAddr("glRasterPos4f"),
		glRasterPos4fv:                             getProcAddr("glRasterPos4fv"),
		glRasterPos4i:                              getProcAddr("glRasterPos4i"),
		glRasterPos4iv:                             getProcAddr("glRasterPos4iv"),
		glRasterPos4s:                              getProcAddr("glRasterPos4s"),
		glRasterPos4sv:                             getProcAddr("glRasterPos4sv"),
		glReadBuffer:                               getProcAddr("glReadBuffer"),
		glReadPixels:                               getProcAddr("glReadPixels"),
		glReadnPixels:                              getProcAddr("glReadnPixels"),
		glRectd:                                    getProcAddr("glRectd"),
		glRectdv:                                   getProcAddr("glRectdv"),
		glRectf:                                    getProcAddr("glRectf"),
		glRectfv:                                   getProcAddr("glRectfv"),
		glRecti:                                    getProcAddr("glRecti"),
		glRectiv:                                   getProcAddr("glRectiv"),
		glRects:                                    getProcAddr("glRects"),
		glRectsv:                                   getProcAddr("glRectsv"),
		glReleaseShaderCompiler:                    getProcAddr("glReleaseShaderCompiler"),
		glRenderMode:                               getProcAddr("glRenderMode"),
		glRenderbufferStorage:                      getProcAddr("glRenderbufferStorage"),
		glRenderbufferStorageMultisample:           getProcAddr("glRenderbufferStorageMultisample"),
		glResumeTransformFeedback:                  getProcAddr("glResumeTransformFeedback"),
		glRotated:                                  getProcAddr("glRotated"),
		glRotatef:                                  getProcAddr("glRotatef"),
		glSampleCoverage:                           getProcAddr("glSampleCoverage"),
		glSampleMaski:                              getProcAddr("glSampleMaski"),
		glSamplerParameterIiv:                      getProcAddr("glSamplerParameterIiv"),
		glSamplerParameterIuiv:                     getProcAddr("glSamplerParameterIuiv"),
		glSamplerParameterf:                        getProcAddr("glSamplerParameterf"),
		glSamplerParameterfv:                       getProcAddr("glSamplerParameterfv"),
		glSamplerParameteri:                        getProcAddr("glSamplerParameteri"),
		glSamplerParameteriv:                       getProcAddr("glSamplerParameteriv"),
		glScaled:                                   getProcAddr("glScaled"),
		glScalef:                                   getProcAddr("glScalef"),
		glScissor:                                  getProcAddr("glScissor"),
		glScissorArrayv:                            getProcAddr("glScissorArrayv"),
		glScissorIndexed:                           getProcAddr("glScissorIndexed"),
		glScissorIndexedv:                          getProcAddr("glScissorIndexedv"),
		glSecondaryColor3b:                         getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:                        getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:                         getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:                        getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:                         getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:                        getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:                         getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:                        getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:                         getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:                        getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:                        getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:                       getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:                        getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:                       getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:                        getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:                       getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorP3ui:                       getProcAddr("glSecondaryColorP3ui"),
		glSecondaryColorP3uiv:                      getProcAddr("glSecondaryColorP3uiv"),
		glSecondaryColorPointer:                    getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:                             getProcAddr("glSelectBuffer"),
		glShadeModel:                               getProcAddr("glShadeModel"),
		glShaderBinary:                             getProcAddr("glShaderBinary"),
		glShaderSource:                             getProcAddr("glShaderSource"),
		glShaderStorageBlockBinding:                getProcAddr("glShaderStorageBlockBinding"),
		glStencilFunc:                              getProcAddr("glStencilFunc"),
		glStencilFuncSeparate:                      getProcAddr("glStencilFuncSeparate"),
		glStencilMask:                              getProcAddr("glStencilMask"),
		glStencilMaskSeparate:                      getProcAddr("glStencilMaskSeparate"),
		glStencilOp:                                getProcAddr("glStencilOp"),
		glStencilOpSeparate:                        getProcAddr("glStencilOpSeparate"),
		glTexBuffer:                                getProcAddr("glTexBuffer"),
		glTexBufferRange:                           getProcAddr("glTexBufferRange"),
		glTexCoord1d:                               getProcAddr("glTexCoord1d"),
		glTexCoord1dv:                              getProcAddr("glTexCoord1dv"),
		glTexCoord1f:                               getProcAddr("glTexCoord1f"),
		glTexCoord1fv:                              getProcAddr("glTexCoord1fv"),
		glTexCoord1i:                               getProcAddr("glTexCoord1i"),
		glTexCoord1iv:                              getProcAddr("glTexCoord1iv"),
		glTexCoord1s:                               getProcAddr("glTexCoord1s"),
		glTexCoord1sv:                              getProcAddr("glTexCoord1sv"),
		glTexCoord2d:                               getProcAddr("glTexCoord2d"),
		glTexCoord2dv:                              getProcAddr("glTexCoord2dv"),
		glTexCoord2f:                               getProcAddr("glTexCoord2f"),
		glTexCoord2fv:                              getProcAddr("glTexCoord2fv"),
		glTexCoord2i:                               getProcAddr("glTexCoord2i"),
		glTexCoord2iv:                              getProcAddr("glTexCoord2iv"),
		glTexCoord2s:                               getProcAddr("glTexCoord2s"),
		glTexCoord2sv:                              getProcAddr("glTexCoord2sv"),
		glTexCoord3d:                               getProcAddr("glTexCoord3d"),
		glTexCoord3dv:                              getProcAddr("glTexCoord3dv"),
		glTexCoord3f:                               getProcAddr("glTexCoord3f"),
		glTexCoord3fv:                              getProcAddr("glTexCoord3fv"),
		glTexCoord3i:                               getProcAddr("glTexCoord3i"),
		glTexCoord3iv:                              getProcAddr("glTexCoord3iv"),
		glTexCoord3s:                               getProcAddr("glTexCoord3s"),
		glTexCoord3sv:                              getProcAddr("glTexCoord3sv"),
		glTexCoord4d:                               getProcAddr("glTexCoord4d"),
		glTexCoord4dv:                              getProcAddr("glTexCoord4dv"),
		glTexCoord4f:                               getProcAddr("glTexCoord4f"),
		glTexCoord4fv:                              getProcAddr("glTexCoord4fv"),
		glTexCoord4i:                               getProcAddr("glTexCoord4i"),
		glTexCoord4iv:                              getProcAddr("glTexCoord4iv"),
		glTexCoord4s:                               getProcAddr("glTexCoord4s"),
		glTexCoord4sv:                              getProcAddr("glTexCoord4sv"),
		glTexCoordP1ui:                             getProcAddr("glTexCoordP1ui"),
		glTexCoordP1uiv:                            getProcAddr("glTexCoordP1uiv"),
		glTexCoordP2ui:                             getProcAddr("glTexCoordP2ui"),
		glTexCoordP2uiv:                            getProcAddr("glTexCoordP2uiv"),
		glTexCoordP3ui:                             getProcAddr("glTexCoordP3ui"),
		glTexCoordP3uiv:                            getProcAddr("glTexCoordP3uiv"),
		glTexCoordP4ui:                             getProcAddr("glTexCoordP4ui"),
		glTexCoordP4uiv:                            getProcAddr("glTexCoordP4uiv"),
		glTexCoordPointer:                          getProcAddr("glTexCoordPointer"),
		glTexEnvf:                                  getProcAddr("glTexEnvf"),
		glTexEnvfv:                                 getProcAddr("glTexEnvfv"),
		glTexEnvi:                                  getProcAddr("glTexEnvi"),
		glTexEnviv:                                 getProcAddr("glTexEnviv"),
		glTexGend:                                  getProcAddr("glTexGend"),
		glTexGendv:                                 getProcAddr("glTexGendv"),
		glTexGenf:                                  getProcAddr("glTexGenf"),
		glTexGenfv:                                 getProcAddr("glTexGenfv"),
		glTexGeni:                                  getProcAddr("glTexGeni"),
		glTexGeniv:                                 getProcAddr("glTexGeniv"),
		glTexImage1D:                               getProcAddr("glTexImage1D"),
		glTexImage2D:                               getProcAddr("glTexImage2D"),
		glTexImage2DMultisample:                    getProcAddr("glTexImage2DMultisample"),
		glTexImage3D:                               getProcAddr("glTexImage3D"),
		glTexImage3DMultisample:                    getProcAddr("glTexImage3DMultisample"),
		glTexParameterIiv:                          getProcAddr("glTexParameterIiv"),
		glTexParameterIuiv:                         getProcAddr("glTexParameterIuiv"),
		glTexParameterf:                            getProcAddr("glTexParameterf"),
		glTexParameterfv:                           getProcAddr("glTexParameterfv"),
		glTexParameteri:                            getProcAddr("glTexParameteri"),
		glTexParameteriv:                           getProcAddr("glTexParameteriv"),
		glTexStorage1D:                             getProcAddr("glTexStorage1D"),
		glTexStorage2D:                             getProcAddr("glTexStorage2D"),
		glTexStorage2DMultisample:                  getProcAddr("glTexStorage2DMultisample"),
		glTexStorage3D:                             getProcAddr("glTexStorage3D"),
		glTexStorage3DMultisample:                  getProcAddr("glTexStorage3DMultisample"),
		glTexSubImage1D:                            getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:                            getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:                            getProcAddr("glTexSubImage3D"),
		glTextureBarrier:                           getProcAddr("glTextureBarrier"),
		glTextureBuffer:                            getProcAddr("glTextureBuffer"),
		glTextureBufferRange:                       getProcAddr("glTextureBufferRange"),
		glTextureParameterIiv:                      getProcAddr("glTextureParameterIiv"),
		glTextureParameterIuiv:                     getProcAddr("glTextureParameterIuiv"),
		glTextureParameterf:                        getProcAddr("glTextureParameterf"),
		glTextureParameterfv:                       getProcAddr("glTextureParameterfv"),
		glTextureParameteri:                        getProcAddr("glTextureParameteri"),
		glTextureParameteriv:                       getProcAddr("glTextureParameteriv"),
		glTextureStorage1D:                         getProcAddr("glTextureStorage1D"),
		glTextureStorage2D:                         getProcAddr("glTextureStorage2D"),
		glTextureStorage2DMultisample:              getProcAddr("glTextureStorage2DMultisample"),
		glTextureStorage3D:                         getProcAddr("glTextureStorage3D"),
		glTextureStorage3DMultisample:              getProcAddr("glTextureStorage3DMultisample"),
		glTextureSubImage1D:                        getProcAddr("glTextureSubImage1D"),
		glTextureSubImage2D:                        getProcAddr("glTextureSubImage2D"),
		glTextureSubImage3D:                        getProcAddr("glTextureSubImage3D"),
		glTextureView:                              getProcAddr("glTextureView"),
		glTransformFeedbackBufferBase:              getProcAddr("glTransformFeedbackBufferBase"),
		glTransformFeedbackBufferRange:             getProcAddr("glTransformFeedbackBufferRange"),
		glTransformFeedbackVaryings:                getProcAddr("glTransformFeedbackVaryings"),
		glTranslated:                               getProcAddr("glTranslated"),
		glTranslatef:                               getProcAddr("glTranslatef"),
		glUniform1d:                                getProcAddr("glUniform1d"),
		glUniform1dv:                               getProcAddr("glUniform1dv"),
		glUniform1f:                                getProcAddr("glUniform1f"),
		glUniform1fv:                               getProcAddr("glUniform1fv"),
		glUniform1i:                                getProcAddr("glUniform1i"),
		glUniform1iv:                               getProcAddr("glUniform1iv"),
		glUniform1ui:                               getProcAddr("glUniform1ui"),
		glUniform1uiv:                              getProcAddr("glUniform1uiv"),
		glUniform2d:                                getProcAddr("glUniform2d"),
		glUniform2dv:                               getProcAddr("glUniform2dv"),
		glUniform2f:                                getProcAddr("glUniform2f"),
		glUniform2fv:                               getProcAddr("glUniform2fv"),
		glUniform2i:                                getProcAddr("glUniform2i"),
		glUniform2iv:                               getProcAddr("glUniform2iv"),
		glUniform2ui:                               getProcAddr("glUniform2ui"),
		glUniform2uiv:                              getProcAddr("glUniform2uiv"),
		glUniform3d:                                getProcAddr("glUniform3d"),
		glUniform3dv:                               getProcAddr("glUniform3dv"),
		glUniform3f:                                getProcAddr("glUniform3f"),
		glUniform3fv:                               getProcAddr("glUniform3fv"),
		glUniform3i:                                getProcAddr("glUniform3i"),
		glUniform3iv:                               getProcAddr("glUniform3iv"),
		glUniform3ui:                               getProcAddr("glUniform3ui"),
		glUniform3uiv:                              getProcAddr("glUniform3uiv"),
		glUniform4d:                                getProcAddr("glUniform4d"),
		glUniform4dv:                               getProcAddr("glUniform4dv"),
		glUniform4f:                                getProcAddr("glUniform4f"),
		glUniform4fv:                               getProcAddr("glUniform4fv"),
		glUniform4i:                                getProcAddr("glUniform4i"),
		glUniform4iv:                               getProcAddr("glUniform4iv"),
		glUniform4ui:                               getProcAddr("glUniform4ui"),
		glUniform4uiv:                              getProcAddr("glUniform4uiv"),
		glUniformBlockBinding:                      getProcAddr("glUniformBlockBinding"),
		glUniformMatrix2dv:                         getProcAddr("glUniformMatrix2dv"),
		glUniformMatrix2fv:                         getProcAddr("glUniformMatrix2fv"),
		glUniformMatrix2x3dv:                       getProcAddr("glUniformMatrix2x3dv"),
		glUniformMatrix2x3fv:                       getProcAddr("glUniformMatrix2x3fv"),
		glUniformMatrix2x4dv:                       getProcAddr("glUniformMatrix2x4dv"),
		glUniformMatrix2x4fv:                       getProcAddr("glUniformMatrix2x4fv"),
		glUniformMatrix3dv:                         getProcAddr("glUniformMatrix3dv"),
		glUniformMatrix3fv:                         getProcAddr("glUniformMatrix3fv"),
		glUniformMatrix3x2dv:                       getProcAddr("glUniformMatrix3x2dv"),
		glUniformMatrix3x2fv:                       getProcAddr("glUniformMatrix3x2fv"),
		glUniformMatrix3x4dv:                       getProcAddr("glUniformMatrix3x4dv"),
		glUniformMatrix3x4fv:                       getProcAddr("glUniformMatrix3x4fv"),
		glUniformMatrix4dv:                         getProcAddr("glUniformMatrix4dv"),
		glUniformMatrix4fv:                         getProcAddr("glUniformMatrix4fv"),
		glUniformMatrix4x2dv:                       getProcAddr("glUniformMatrix4x2dv"),
		glUniformMatrix4x2fv:                       getProcAddr("glUniformMatrix4x2fv"),
		glUniformMatrix4x3dv:                       getProcAddr("glUniformMatrix4x3dv"),
		glUniformMatrix4x3fv:                       getProcAddr("glUniformMatrix4x3fv"),
		glUniformSubroutinesuiv:                    getProcAddr("glUniformSubroutinesuiv"),
		glUnmapBuffer:                              getProcAddr("glUnmapBuffer"),
		glUnmapNamedBuffer:                         getProcAddr("glUnmapNamedBuffer"),
		glUseProgram:                               getProcAddr("glUseProgram"),
		glUseProgramStages:                         getProcAddr("glUseProgramStages"),
		glValidateProgram:                          getProcAddr("glValidateProgram"),
		glValidateProgramPipeline:                  getProcAddr("glValidateProgramPipeline"),
		glVertex2d:                                 getProcAddr("glVertex2d"),
		glVertex2dv:                                getProcAddr("glVertex2dv"),
		glVertex2f:                                 getProcAddr("glVertex2f"),
		glVertex2fv:                                getProcAddr("glVertex2fv"),
		glVertex2i:                                 getProcAddr("glVertex2i"),
		glVertex2iv:                                getProcAddr("glVertex2iv"),
		glVertex2s:                                 getProcAddr("glVertex2s"),
		glVertex2sv:                                getProcAddr("glVertex2sv"),
		glVertex3d:                                 getProcAddr("glVertex3d"),
		glVertex3dv:                                getProcAddr("glVertex3dv"),
		glVertex3f:                                 getProcAddr("glVertex3f"),
		glVertex3fv:                                getProcAddr("glVertex3fv"),
		glVertex3i:                                 getProcAddr("glVertex3i"),
		glVertex3iv:                                getProcAddr("glVertex3iv"),
		glVertex3s:                                 getProcAddr("glVertex3s"),
		glVertex3sv:                                getProcAddr("glVertex3sv"),
		glVertex4d:                                 getProcAddr("glVertex4d"),
		glVertex4dv:                                getProcAddr("glVertex4dv"),
		glVertex4f:                                 getProcAddr("glVertex4f"),
		glVertex4fv:                                getProcAddr("glVertex4fv"),
		glVertex4i:                                 getProcAddr("glVertex4i"),
		glVertex4iv:                                getProcAddr("glVertex4iv"),
		glVertex4s:                                 getProcAddr("glVertex4s"),
		glVertex4sv:                                getProcAddr("glVertex4sv"),
		glVertexArrayAttribBinding:                 getProcAddr("glVertexArrayAttribBinding"),
		glVertexArrayAttribFormat:                  getProcAddr("glVertexArrayAttribFormat"),
		glVertexArrayAttribIFormat:                 getProcAddr("glVertexArrayAttribIFormat"),
		glVertexArrayAttribLFormat:                 getProcAddr("glVertexArrayAttribLFormat"),
		glVertexArrayBindingDivisor:                getProcAddr("glVertexArrayBindingDivisor"),
		glVertexArrayElementBuffer:                 getProcAddr("glVertexArrayElementBuffer"),
		glVertexArrayVertexBuffer:                  getProcAddr("glVertexArrayVertexBuffer"),
		glVertexArrayVertexBuffers:                 getProcAddr("glVertexArrayVertexBuffers"),
		glVertexAttrib1d:                           getProcAddr("glVertexAttrib1d"),
		glVertexAttrib1dv:                          getProcAddr("glVertexAttrib1dv"),
		glVertexAttrib1f:                           getProcAddr("glVertexAttrib1f"),
		glVertexAttrib1fv:                          getProcAddr("glVertexAttrib1fv"),
		glVertexAttrib1s:                           getProcAddr("glVertexAttrib1s"),
		glVertexAttrib1sv:                          getProcAddr("glVertexAttrib1sv"),
		glVertexAttrib2d:                           getProcAddr("glVertexAttrib2d"),
		glVertexAttrib2dv:                          getProcAddr("glVertexAttrib2dv"),
		glVertexAttrib2f:                           getProcAddr("glVertexAttrib2f"),
		glVertexAttrib2fv:                          getProcAddr("glVertexAttrib2fv"),
		glVertexAttrib2s:                           getProcAddr("glVertexAttrib2s"),
		glVertexAttrib2sv:                          getProcAddr("glVertexAttrib2sv"),
		glVertexAttrib3d:                           getProcAddr("glVertexAttrib3d"),
		glVertexAttrib3dv:                          getProcAddr("glVertexAttrib3dv"),
		glVertexAttrib3f:                           getProcAddr("glVertexAttrib3f"),
		glVertexAttrib3fv:                          getProcAddr("glVertexAttrib3fv"),
		glVertexAttrib3s:                           getProcAddr("glVertexAttrib3s"),
		glVertexAttrib3sv:                          getProcAddr("glVertexAttrib3sv"),
		glVertexAttrib4Nbv:                         getProcAddr("glVertexAttrib4Nbv"),
		glVertexAttrib4Niv:                         getProcAddr("glVertexAttrib4Niv"),
		glVertexAttrib4Nsv:                         getProcAddr("glVertexAttrib4Nsv"),
		glVertexAttrib4Nub:                         getProcAddr("glVertexAttrib4Nub"),
		glVertexAttrib4Nubv:                        getProcAddr("glVertexAttrib4Nubv"),
		glVertexAttrib4Nuiv:                        getProcAddr("glVertexAttrib4Nuiv"),
		glVertexAttrib4Nusv:                        getProcAddr("glVertexAttrib4Nusv"),
		glVertexAttrib4bv:                          getProcAddr("glVertexAttrib4bv"),
		glVertexAttrib4d:                           getProcAddr("glVertexAttrib4d"),
		glVertexAttrib4dv:                          getProcAddr("glVertexAttrib4dv"),
		glVertexAttrib4f:                           getProcAddr("glVertexAttrib4f"),
		glVertexAttrib4fv:                          getProcAddr("glVertexAttrib4fv"),
		glVertexAttrib4iv:                          getProcAddr("glVertexAttrib4iv"),
		glVertexAttrib4s:                           getProcAddr("glVertexAttrib4s"),
		glVertexAttrib4sv:                          getProcAddr("glVertexAttrib4sv"),
		glVertexAttrib4ubv:                         getProcAddr("glVertexAttrib4ubv"),
		glVertexAttrib4uiv:                         getProcAddr("glVertexAttrib4uiv"),
		glVertexAttrib4usv:                         getProcAddr("glVertexAttrib4usv"),
		glVertexAttribBinding:                      getProcAddr("glVertexAttribBinding"),
		glVertexAttribDivisor:                      getProcAddr("glVertexAttribDivisor"),
		glVertexAttribFormat:                       getProcAddr("glVertexAttribFormat"),
		glVertexAttribI1i:                          getProcAddr("glVertexAttribI1i"),
		glVertexAttribI1iv:                         getProcAddr("glVertexAttribI1iv"),
		glVertexAttribI1ui:                         getProcAddr("glVertexAttribI1ui"),
		glVertexAttribI1uiv:                        getProcAddr("glVertexAttribI1uiv"),
		glVertexAttribI2i:                          getProcAddr("glVertexAttribI2i"),
		glVertexAttribI2iv:                         getProcAddr("glVertexAttribI2iv"),
		glVertexAttribI2ui:                         getProcAddr("glVertexAttribI2ui"),
		glVertexAttribI2uiv:                        getProcAddr("glVertexAttribI2uiv"),
		glVertexAttribI3i:                          getProcAddr("glVertexAttribI3i"),
		glVertexAttribI3iv:                         getProcAddr("glVertexAttribI3iv"),
		glVertexAttribI3ui:                         getProcAddr("glVertexAttribI3ui"),
		glVertexAttribI3uiv:                        getProcAddr("glVertexAttribI3uiv"),
		glVertexAttribI4bv:                         getProcAddr("glVertexAttribI4bv"),
		glVertexAttribI4i:                          getProcAddr("glVertexAttribI4i"),
		glVertexAttribI4iv:                         getProcAddr("glVertexAttribI4iv"),
		glVertexAttribI4sv:                         getProcAddr("glVertexAttribI4sv"),
		glVertexAttribI4ubv:                        getProcAddr("glVertexAttribI4ubv"),
		glVertexAttribI4ui:                         getProcAddr("glVertexAttribI4ui"),
		glVertexAttribI4uiv:                        getProcAddr("glVertexAttribI4uiv"),
		glVertexAttribI4usv:                        getProcAddr("glVertexAttribI4usv"),
		glVertexAttribIFormat:                      getProcAddr("glVertexAttribIFormat"),
		glVertexAttribIPointer:                     getProcAddr("glVertexAttribIPointer"),
		glVertexAttribL1d:                          getProcAddr("glVertexAttribL1d"),
		glVertexAttribL1dv:                         getProcAddr("glVertexAttribL1dv"),
		glVertexAttribL2d:                          getProcAddr("glVertexAttribL2d"),
		glVertexAttribL2dv:                         getProcAddr("glVertexAttribL2dv"),
		glVertexAttribL3d:                          getProcAddr("glVertexAttribL3d"),
		glVertexAttribL3dv:                         getProcAddr("glVertexAttribL3dv"),
		glVertexAttribL4d:                          getProcAddr("glVertexAttribL4d"),
		glVertexAttribL4dv:                         getProcAddr("glVertexAttribL4dv"),
		glVertexAttribLFormat:                      getProcAddr("glVertexAttribLFormat"),
		glVertexAttribLPointer:                     getProcAddr("glVertexAttribLPointer"),
		glVertexAttribP1ui:                         getProcAddr("glVertexAttribP1ui"),
		glVertexAttribP1uiv:                        getProcAddr("glVertexAttribP1uiv"),
		glVertexAttribP2ui:                         getProcAddr("glVertexAttribP2ui"),
		glVertexAttribP2uiv:                        getProcAddr("glVertexAttribP2uiv"),
		glVertexAttribP3ui:                         getProcAddr("glVertexAttribP3ui"),
		glVertexAttribP3uiv:                        getProcAddr("glVertexAttribP3uiv"),
		glVertexAttribP4ui:                         getProcAddr("glVertexAttribP4ui"),
		glVertexAttribP4uiv:                        getProcAddr("glVertexAttribP4uiv"),
		glVertexAttribPointer:                      getProcAddr("glVertexAttribPointer"),
		glVertexBindingDivisor:                     getProcAddr("glVertexBindingDivisor"),
		glVertexP2ui:                               getProcAddr("glVertexP2ui"),
		glVertexP2uiv:                              getProcAddr("glVertexP2uiv"),
		glVertexP3ui:                               getProcAddr("glVertexP3ui"),
		glVertexP3uiv:                              getProcAddr("glVertexP3uiv"),
		glVertexP4ui:                               getProcAddr("glVertexP4ui"),
		glVertexP4uiv:                              getProcAddr("glVertexP4uiv"),
		glVertexPointer:                            getProcAddr("glVertexPointer"),
		glViewport:                                 getProcAddr("glViewport"),
		glViewportArrayv:                           getProcAddr("glViewportArrayv"),
		glViewportIndexedf:                         getProcAddr("glViewportIndexedf"),
		glViewportIndexedfv:                        getProcAddr("glViewportIndexedfv"),
		glWaitSync:                                 getProcAddr("glWaitSync"),
		glWindowPos2d:                              getProcAddr("glWindowPos2d"),
		glWindowPos2dv:                             getProcAddr("glWindowPos2dv"),
		glWindowPos2f:                              getProcAddr("glWindowPos2f"),
		glWindowPos2fv:                             getProcAddr("glWindowPos2fv"),
		glWindowPos2i:                              getProcAddr("glWindowPos2i"),
		glWindowPos2iv:                             getProcAddr("glWindowPos2iv"),
		glWindowPos2s:                              getProcAddr("glWindowPos2s"),
		glWindowPos2sv:                             getProcAddr("glWindowPos2sv"),
		glWindowPos3d:                              getProcAddr("glWindowPos3d"),
		glWindowPos3dv:                             getProcAddr("glWindowPos3dv"),
		glWindowPos3f:                              getProcAddr("glWindowPos3f"),
		glWindowPos3fv:                             getProcAddr("glWindowPos3fv"),
		glWindowPos3i:                              getProcAddr("glWindowPos3i"),
		glWindowPos3iv:                             getProcAddr("glWindowPos3iv"),
		glWindowPos3s:                              getProcAddr("glWindowPos3s"),
		glWindowPos3sv:                             getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type GL460 interface {
	Extensions
	Accum(op uint32, value float32)
	ActiveShaderProgram(pipeline uint32, program uint32)
	ActiveTexture(texture uint32)
	AlphaFunc(func_ uint32, ref float32)
	AreTexturesResident(n int32, textures *uint32, residences *bool) bool
	ArrayElement(i int32)
	AttachShader(program uint32, shader uint32)
	Begin(mode uint32)
	BeginConditionalRender(id uint32, mode uint32)
	BeginQuery(target uint32, id uint32)
	BeginQueryIndexed(target uint32, index uint32, id uint32)
	BeginTransformFeedback(primitiveMode uint32)
	BindAttribLocation(program uint32, index uint32, name *uint8)
	BindBuffer(target uint32, buffer uint32)
	BindBufferBase(target uint32, index uint32, buffer uint32)
	BindBufferRange(target uint32, index uint32, buffer uint32, offset uintptr, size int)
	BindBuffersBase(target uint32, first uint32, count int32, buffers *uint32)
	BindBuffersRange(target uint32, first uint32, count int32, buffers *uint32, offsets *uintptr, sizes *int)
	BindFragDataLocation(program uint32, color uint32, name *uint8)
	BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *uint8)
	BindFramebuffer(target uint32, framebuffer uint32)
	BindImageTexture(unit uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format uint32)
	BindImageTextures(first uint32, count int32, textures *uint32)
	BindProgramPipeline(pipeline uint32)
	BindRenderbuffer(target uint32, renderbuffer uint32)
	BindSampler(unit uint32, sampler uint32)
	BindSamplers(first uint32, count int32, samplers *uint32)
	BindTexture(target uint32, texture uint32)
	BindTextureUnit(unit uint32, texture uint32)
	BindTextures(first uint32, count int32, textures *uint32)
	BindTransformFeedback(target uint32, id uint32)
	BindVertexArray(array uint32)
	BindVertexBuffer(bindingindex uint32, buffer uint32, offset uintptr, stride int32)
	BindVertexBuffers(first uint32, count int32, buffers *uint32, offsets *uintptr, strides *int32)
	Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)
	BlendEquationSeparatei(buf uint32, modeRGB uint32, modeAlpha uint32)
	BlendEquationi(buf uint32, mode uint32)
	BlendFunc(sfactor uint32, dfactor uint32)
	BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BlendFuncSeparatei(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32)
	BlendFunci(buf uint32, src uint32, dst uint32)
	BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	BlitNamedFramebuffer(readFramebuffer uint32, drawFramebuffer uint32, srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferStorage(target uint32, size int, data unsafe.Pointer, flags uint32)
	BufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	CallList(list uint32)
	CallLists(n int32, type_ uint32, lists unsafe.Pointer)
	CheckFramebufferStatus(target uint32) uint32
	CheckNamedFramebufferStatus(framebuffer uint32, target uint32) uint32
	ClampColor(target uint32, clamp uint32)
	Clear(mask uint32)
	ClearAccum(red float32, green float32, blue float32, alpha float32)
	ClearBufferData(target uint32, internalformat uint32, format uint32, type_ uint32, data unsafe.Pointer)
	ClearBufferSubData(target uint32, internalformat uint32, offset uintptr, size int, format uint32, type_ uint32, data unsafe.Pointer)
	ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32)
	ClearBufferfv(buffer uint32, drawbuffer int32, value *float32)
	ClearBufferiv(buffer uint32, drawbuffer int32, value *int32)
	ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32)
	ClearColor(red float32, green float32, blue float32, alpha float32)
	ClearDepth(depth float64)
	ClearDepthf(d float32)
	ClearIndex(c float32)
	ClearNamedBufferData(buffer uint32, internalformat uint32, format uint32, type_ uint32, data unsafe.Pointer)
	ClearNamedBufferSubData(buffer uint32, internalformat uint32, offset uintptr, size int, format uint32, type_ uint32, data unsafe.Pointer)
	ClearNamedFramebufferfi(framebuffer uint32, buffer uint32, drawbuffer int32, depth float32, stencil int32)
	ClearNamedFramebufferfv(framebuffer uint32, buffer uint32, drawbuffer int32, value *float32)
	ClearNamedFramebufferiv(framebuffer uint32, buffer uint32, drawbuffer int32, value *int32)
	ClearNamedFramebufferuiv(framebuffer uint32, buffer uint32, drawbuffer int32, value *uint32)
	ClearStencil(s int32)
	ClearTexImage(texture uint32, level int32, format uint32, type_ uint32, data unsafe.Pointer)
	ClearTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, data unsafe.Pointer)
	ClientActiveTexture(texture uint32)
	ClientWaitSync(sync GLsync, flags uint32, timeout uint64) uint32
	ClipControl(origin uint32, depth uint32)
	ClipPlane(plane uint32, equation *float64)
	Color3b(red int8, green int8, blue int8)
	Color3bv(v *int8)
	Color3d(red float64, green float64, blue float64)
	Color3dv(v *float64)
	Color3f(red float32, green float32, blue float32)
	Color3fv(v *float32)
	Color3i(red int32, green int32, blue int32)
	Color3iv(v *int32)
	Color3s(red int16, green int16, blue int16)
	Color3sv(v *int16)
	Color3ub(red uint8, green uint8, blue uint8)
	Color3ubv(v *uint8)
	Color3ui(red uint32, green uint32, blue uint32)
	Color3uiv(v *uint32)
	Color3us(red uint16, green uint16, blue uint16)
	Color3usv(v *uint16)
	Color4b(red int8, green int8, blue int8, alpha int8)
	Color4bv(v *int8)
	Color4d(red float64, green float64, blue float64, alpha float64)
	Color4dv(v *float64)
	Color4f(red float32, green float32, blue float32, alpha float32)
	Color4fv(v *float32)
	Color4i(red int32, green int32, blue int32, alpha int32)
	Color4iv(v *int32)
	Color4s(red int16, green int16, blue int16, alpha int16)
	Color4sv(v *int16)
	Color4ub(red uint8, green uint8, blue uint8, alpha uint8)
	Color4ubv(v *uint8)
	Color4ui(red uint32, green uint32, blue uint32, alpha uint32)
	Color4uiv(v *uint32)
	Color4us(red uint16, green uint16, blue uint16, alpha uint16)
	Color4usv(v *uint16)
	ColorMask(red bool, green bool, blue bool, alpha bool)
	ColorMaski(index uint32, r bool, g bool, b bool, a bool)
	ColorMaterial(face uint32, mode uint32)
	ColorP3ui(type_ uint32, color uint32)
	ColorP3uiv(type_ uint32, color *uint32)
	ColorP4ui(type_ uint32, color uint32)
	ColorP4uiv(type_ uint32, color *uint32)
	ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	CompileShader(shader uint32)
	CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTextureSubImage1D(texture uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset uintptr, writeOffset uintptr, size int)
	CopyImageSubData(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32)
	CopyNamedBufferSubData(readBuffer uint32, writeBuffer uint32, readOffset uintptr, writeOffset uintptr, size int)
	CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)
	CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CopyTextureSubImage1D(texture uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CreateBuffers(n int32, buffers *uint32)
	CreateFramebuffers(n int32, framebuffers *uint32)
	CreateProgram() uint32
	CreateProgramPipelines(n int32, pipelines *uint32)
	CreateQueries(target uint32, n int32, ids *uint32)
	CreateRenderbuffers(n int32, renderbuffers *uint32)
	CreateSamplers(n int32, samplers *uint32)
	CreateShader(type_ uint32) uint32
	CreateShaderProgramv(type_ uint32, count int32, strings **uint8) uint32
	CreateTextures(target uint32, n int32, textures *uint32)
	CreateTransformFeedbacks(n int32, ids *uint32)
	CreateVertexArrays(n int32, arrays *uint32)
	CullFace(mode uint32)
	DebugMessageCallback(callback func(source, type_, id, severity uint32, message string))
	DebugMessageControl(source uint32, type_ uint32, severity uint32, count int32, ids *uint32, enabled bool)
	DebugMessageInsert(source uint32, type_ uint32, id uint32, severity uint32, length int32, buf *uint8)
	DeleteBuffers(n int32, buffers *uint32)
	DeleteFramebuffers(n int32, framebuffers *uint32)
	DeleteLists(list uint32, range_ int32)
	DeleteProgram(program uint32)
	DeleteProgramPipelines(n int32, pipelines *uint32)
	DeleteQueries(n int32, ids *uint32)
	DeleteRenderbuffers(n int32, renderbuffers *uint32)
	DeleteSamplers(count int32, samplers *uint32)
	DeleteShader(shader uint32)
	DeleteSync(sync GLsync)
	DeleteTextures(n int32, textures *uint32)
	DeleteTransformFeedbacks(n int32, ids *uint32)
	DeleteVertexArrays(n int32, arrays *uint32)
	DepthFunc(func_ uint32)
	DepthMask(flag bool)
	DepthRange(n float64, f float64)
	DepthRangeArrayv(first uint32, count int32, v *float64)
	DepthRangeIndexed(index uint32, n float64, f float64)
	DepthRangef(n float32, f float32)
	DetachShader(program uint32, shader uint32)
	Disable(cap uint32)
	DisableClientState(array uint32)
	DisableVertexArrayAttrib(vaobj uint32, index uint32)
	DisableVertexAttribArray(index uint32)
	Disablei(target uint32, index uint32)
	DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32)
	DispatchComputeIndirect(indirect uintptr)
	DrawArrays(mode uint32, first int32, count int32)
	DrawArraysIndirect(mode uint32, indirect unsafe.Pointer)
	DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32)
	DrawArraysInstancedBaseInstance(mode uint32, first int32, count int32, instancecount int32, baseinstance uint32)
	DrawBuffer(buf uint32)
	DrawBuffers(n int32, bufs *uint32)
	DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawElementsBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer)
	DrawElementsInstanced(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32)
	DrawElementsInstancedBaseInstance(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, baseinstance uint32)
	DrawElementsInstancedBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32)
	DrawElementsInstancedBaseVertexBaseInstance(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32, baseinstance uint32)
	DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	DrawRangeElementsBaseVertex(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawTransformFeedback(mode uint32, id uint32)
	DrawTransformFeedbackInstanced(mode uint32, id uint32, instancecount int32)
	DrawTransformFeedbackStream(mode uint32, id uint32, stream uint32)
	DrawTransformFeedbackStreamInstanced(mode uint32, id uint32, stream uint32, instancecount int32)
	EdgeFlag(flag bool)
	EdgeFlagPointer(stride int32, pointer unsafe.Pointer)
	EdgeFlagv(flag *bool)
	Enable(cap uint32)
	EnableClientState(array uint32)
	EnableVertexArrayAttrib(vaobj uint32, index uint32)
	EnableVertexAttribArray(index uint32)
	Enablei(target uint32, index uint32)
	End()
	EndConditionalRender()
	EndList()
	EndQuery(target uint32)
	EndQueryIndexed(target uint32, index uint32)
	EndTransformFeedback()
	EvalCoord1d(u float64)
	EvalCoord1dv(u *float64)
	EvalCoord1f(u float32)
	EvalCoord1fv(u *float32)
	EvalCoord2d(u float64, v float64)
	EvalCoord2dv(u *float64)
	EvalCoord2f(u float32, v float32)
	EvalCoord2fv(u *float32)
	EvalMesh1(mode uint32, i1 int32, i2 int32)
	EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)
	EvalPoint1(i int32)
	EvalPoint2(i int32, j int32)
	FeedbackBuffer(size int32, type_ uint32, buffer *float32)
	FenceSync(condition uint32, flags uint32) GLsync
	Finish()
	Flush()
	FlushMappedBufferRange(target uint32, offset uintptr, length int)
	FlushMappedNamedBufferRange(buffer uint32, offset uintptr, length int)
	FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	FogCoordd(coord float64)
	FogCoorddv(coord *float64)
	FogCoordf(coord float32)
	FogCoordfv(coord *float32)
	Fogf(pname uint32, param float32)
	Fogfv(pname uint32, params *float32)
	Fogi(pname uint32, param int32)
	Fogiv(pname uint32, params *int32)
	FramebufferParameteri(target uint32, pname uint32, param int32)
	FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	FramebufferTexture(target uint32, attachment uint32, texture uint32, level int32)
	FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32)
	FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32)
	FrontFace(mode uint32)
	Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	GenBuffers(n int32, buffers *uint32)
	GenFramebuffers(n int32, framebuffers *uint32)
	GenLists(range_ int32) uint32
	GenProgramPipelines(n int32, pipelines *uint32)
	GenQueries(n int32, ids *uint32)
	GenRenderbuffers(n int32, renderbuffers *uint32)
	GenSamplers(count int32, samplers *uint32)
	GenTextures(n int32, textures *uint32)
	GenTransformFeedbacks(n int32, ids *uint32)
	GenVertexArrays(n int32, arrays *uint32)
	GenerateMipmap(target uint32)
	GenerateTextureMipmap(texture uint32)
	GetActiveAtomicCounterBufferiv(program uint32, bufferIndex uint32, pname uint32, params *int32)
	GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveSubroutineName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineUniformName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineUniformiv(program uint32, shadertype uint32, index uint32, pname uint32, values *int32)
	GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *uint8)
	GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32)
	GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *uint8)
	GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32)
	GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)
	GetAttribLocation(program uint32, name *uint8) int32
	GetBooleani_v(target uint32, index uint32, data *bool)
	GetBooleanv(pname uint32, data *bool)
	GetBufferParameteri64v(target uint32, pname uint32, params *int64)
	GetBufferParameteriv(target uint32, pname uint32, params *int32)
	GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)
	GetBufferSubData(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetClipPlane(plane uint32, equation *float64)
	GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)
	GetCompressedTextureImage(texture uint32, level int32, bufSize int32, pixels unsafe.Pointer)
	GetCompressedTextureSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, bufSize int32, pixels unsafe.Pointer)
	GetDebugMessageLog(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32
	GetDoublei_v(target uint32, index uint32, data *float64)
	GetDoublev(pname uint32, data *float64)
	GetError() uint32
	GetFloati_v(target uint32, index uint32, data *float32)
	GetFloatv(pname uint32, data *float32)
	GetFragDataIndex(program uint32, name *uint8) int32
	GetFragDataLocation(program uint32, name *uint8) int32
	GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32)
	GetFramebufferParameteriv(target uint32, pname uint32, params *int32)
	GetGraphicsResetStatus() uint32
	GetInteger64i_v(target uint32, index uint32, data *int64)
	GetInteger64v(pname uint32, data *int64)
	GetIntegeri_v(target uint32, index uint32, data *int32)
	GetIntegerv(pname uint32, data *int32)
	GetInternalformati64v(target uint32, internalformat uint32, pname uint32, count int32, params *int64)
	GetInternalformativ(target uint32, internalformat uint32, pname uint32, count int32, params *int32)
	GetLightfv(light uint32, pname uint32, params *float32)
	GetLightiv(light uint32, pname uint32, params *int32)
	GetMapdv(target uint32, query uint32, v *float64)
	GetMapfv(target uint32, query uint32, v *float32)
	GetMapiv(target uint32, query uint32, v *int32)
	GetMaterialfv(face uint32, pname uint32, params *float32)
	GetMaterialiv(face uint32, pname uint32, params *int32)
	GetMultisamplefv(pname uint32, index uint32, val *float32)
	GetNamedBufferParameteri64v(buffer uint32, pname uint32, params *int64)
	GetNamedBufferParameteriv(buffer uint32, pname uint32, params *int32)
	GetNamedBufferPointerv(buffer uint32, pname uint32, params *unsafe.Pointer)
	GetNamedBufferSubData(buffer uint32, offset uintptr, size int, data unsafe.Pointer)
	GetNamedFramebufferAttachmentParameteriv(framebuffer uint32, attachment uint32, pname uint32, params *int32)
	GetNamedFramebufferParameteriv(framebuffer uint32, pname uint32, param *int32)
	GetNamedRenderbufferParameteriv(renderbuffer uint32, pname uint32, params *int32)
	GetObjectLabel(identifier uint32, name uint32, bufSize int32, length *int32, label *uint8)
	GetObjectPtrLabel(ptr unsafe.Pointer, bufSize int32, length *int32, label *uint8)
	GetPixelMapfv(map_ uint32, values *float32)
	GetPixelMapuiv(map_ uint32, values *uint32)
	GetPixelMapusv(map_ uint32, values *uint16)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	GetPolygonStipple(mask *uint8)
	GetProgramBinary(program uint32, bufSize int32, length *int32, binaryFormat *uint32, binary unsafe.Pointer)
	GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramInterfaceiv(program uint32, programInterface uint32, pname uint32, params *int32)
	GetProgramPipelineInfoLog(pipeline uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramPipelineiv(pipeline uint32, pname uint32, params *int32)
	GetProgramResourceIndex(program uint32, programInterface uint32, name *uint8) uint32
	GetProgramResourceLocation(program uint32, programInterface uint32, name *uint8) int32
	GetProgramResourceLocationIndex(program uint32, programInterface uint32, name *uint8) int32
	GetProgramResourceName(program uint32, programInterface uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetProgramResourceiv(program uint32, programInterface uint32, index uint32, propCount int32, props *uint32, count int32, length *int32, params *int32)
	GetProgramStageiv(program uint32, shadertype uint32, pname uint32, values *int32)
	GetProgramiv(program uint32, pname uint32, params *int32)
	GetQueryBufferObjecti64v(id uint32, buffer uint32, pname uint32, offset uintptr)
	GetQueryBufferObjectiv(id uint32, buffer uint32, pname uint32, offset uintptr)
	GetQueryBufferObjectui64v(id uint32, buffer uint32, pname uint32, offset uintptr)
	GetQueryBufferObjectuiv(id uint32, buffer uint32, pname uint32, offset uintptr)
	GetQueryIndexediv(target uint32, index uint32, pname uint32, params *int32)
	GetQueryObjecti64v(id uint32, pname uint32, params *int64)
	GetQueryObjectiv(id uint32, pname uint32, params *int32)
	GetQueryObjectui64v(id uint32, pname uint32, params *uint64)
	GetQueryObjectuiv(id uint32, pname uint32, params *uint32)
	GetQueryiv(target uint32, pname uint32, params *int32)
	GetRenderbufferParameteriv(target uint32, pname uint32, params *int32)
	GetSamplerParameterIiv(sampler uint32, pname uint32, params *int32)
	GetSamplerParameterIuiv(sampler uint32, pname uint32, params *uint32)
	GetSamplerParameterfv(sampler uint32, pname uint32, params *float32)
	GetSamplerParameteriv(sampler uint32, pname uint32, params *int32)
	GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8)
	GetShaderPrecisionFormat(shadertype uint32, precisiontype uint32, range_ *int32, precision *int32)
	GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8)
	GetShaderiv(shader uint32, pname uint32, params *int32)
	GetString(name uint32) *uint8
	GetStringi(name uint32, index uint32) *uint8
	GetSubroutineIndex(program uint32, shadertype uint32, name *uint8) uint32
	GetSubroutineUniformLocation(program uint32, shadertype uint32, name *uint8) int32
	GetSynciv(sync GLsync, pname uint32, count int32, length *int32, values *int32)
	GetTexEnvfv(target uint32, pname uint32, params *float32)
	GetTexEnviv(target uint32, pname uint32, params *int32)
	GetTexGendv(coord uint32, pname uint32, params *float64)
	GetTexGenfv(coord uint32, pname uint32, params *float32)
	GetTexGeniv(coord uint32, pname uint32, params *int32)
	GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)
	GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)
	GetTexParameterIiv(target uint32, pname uint32, params *int32)
	GetTexParameterIuiv(target uint32, pname uint32, params *uint32)
	GetTexParameterfv(target uint32, pname uint32, params *float32)
	GetTexParameteriv(target uint32, pname uint32, params *int32)
	GetTextureImage(texture uint32, level int32, format uint32, type_ uint32, bufSize int32, pixels unsafe.Pointer)
	GetTextureLevelParameterfv(texture uint32, level int32, pname uint32, params *float32)
	GetTextureLevelParameteriv(texture uint32, level int32, pname uint32, params *int32)
	GetTextureParameterIiv(texture uint32, pname uint32, params *int32)
	GetTextureParameterIuiv(texture uint32, pname uint32, params *uint32)
	GetTextureParameterfv(texture uint32, pname uint32, params *float32)
	GetTextureParameteriv(texture uint32, pname uint32, params *int32)
	GetTextureSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, bufSize int32, pixels unsafe.Pointer)
	GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetTransformFeedbacki64_v(xfb uint32, pname uint32, index uint32, param *int64)
	GetTransformFeedbacki_v(xfb uint32, pname uint32, index uint32, param *int32)
	GetTransformFeedbackiv(xfb uint32, pname uint32, param *int32)
	GetUniformBlockIndex(program uint32, uniformBlockName *uint8) uint32
	GetUniformIndices(program uint32, uniformCount int32, uniformNames **uint8, uniformIndices *uint32)
	GetUniformLocation(program uint32, name *uint8) int32
	GetUniformSubroutineuiv(shadertype uint32, location int32, params *uint32)
	GetUniformdv(program uint32, location int32, params *float64)
	GetUniformfv(program uint32, location int32, params *float32)
	GetUniformiv(program uint32, location int32, params *int32)
	GetUniformuiv(program uint32, location int32, params *uint32)
	GetVertexArrayIndexed64iv(vaobj uint32, index uint32, pname uint32, param *int64)
	GetVertexArrayIndexediv(vaobj uint32, index uint32, pname uint32, param *int32)
	GetVertexArrayiv(vaobj uint32, pname uint32, param *int32)
	GetVertexAttribIiv(index uint32, pname uint32, params *int32)
	GetVertexAttribIuiv(index uint32, pname uint32, params *uint32)
	GetVertexAttribLdv(index uint32, pname uint32, params *float64)
	GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)
	GetVertexAttribdv(index uint32, pname uint32, params *float64)
	GetVertexAttribfv(index uint32, pname uint32, params *float32)
	GetVertexAttribiv(index uint32, pname uint32, params *int32)
	GetnColorTable(target uint32, format uint32, type_ uint32, bufSize int32, table unsafe.Pointer)
	GetnCompressedTexImage(target uint32, lod int32, bufSize int32, pixels unsafe.Pointer)
	GetnConvolutionFilter(target uint32, format uint32, type_ uint32, bufSize int32, image unsafe.Pointer)
	GetnHistogram(target uint32, reset bool, format uint32, type_ uint32, bufSize int32, values unsafe.Pointer)
	GetnMapdv(target uint32, query uint32, bufSize int32, v *float64)
	GetnMapfv(target uint32, query uint32, bufSize int32, v *float32)
	GetnMapiv(target uint32, query uint32, bufSize int32, v *int32)
	GetnMinmax(target uint32, reset bool, format uint32, type_ uint32, bufSize int32, values unsafe.Pointer)
	GetnPixelMapfv(map_ uint32, bufSize int32, values *float32)
	GetnPixelMapuiv(map_ uint32, bufSize int32, values *uint32)
	GetnPixelMapusv(map_ uint32, bufSize int32, values *uint16)
	GetnPolygonStipple(bufSize int32, pattern *uint8)
	GetnSeparableFilter(target uint32, format uint32, type_ uint32, rowBufSize int32, row unsafe.Pointer, columnBufSize int32, column unsafe.Pointer, span unsafe.Pointer)
	GetnTexImage(target uint32, level int32, format uint32, type_ uint32, bufSize int32, pixels unsafe.Pointer)
	GetnUniformdv(program uint32, location int32, bufSize int32, params *float64)
	GetnUniformfv(program uint32, location int32, bufSize int32, params *float32)
	GetnUniformiv(program uint32, location int32, bufSize int32, params *int32)
	GetnUniformuiv(program uint32, location int32, bufSize int32, params *uint32)
	Hint(target uint32, mode uint32)
	IndexMask(mask uint32)
	IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	Indexd(c float64)
	Indexdv(c *float64)
	Indexf(c float32)
	Indexfv(c *float32)
	Indexi(c int32)
	Indexiv(c *int32)
	Indexs(c int16)
	Indexsv(c *int16)
	Indexub(c uint8)
	Indexubv(c *uint8)
	InitNames()
	InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)
	InvalidateBufferData(buffer uint32)
	InvalidateBufferSubData(buffer uint32, offset uintptr, length int)
	InvalidateFramebuffer(target uint32, numAttachments int32, attachments *uint32)
	InvalidateNamedFramebufferData(framebuffer uint32, numAttachments int32, attachments *uint32)
	InvalidateNamedFramebufferSubData(framebuffer uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32)
	InvalidateSubFramebuffer(target uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32)
	InvalidateTexImage(texture uint32, level int32)
	InvalidateTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32)
	IsBuffer(buffer uint32) bool
	IsEnabled(cap uint32) bool
	IsEnabledi(target uint32, index uint32) bool
	IsFramebuffer(framebuffer uint32) bool
	IsList(list uint32) bool
	IsProgram(program uint32) bool
	IsProgramPipeline(pipeline uint32) bool
	IsQuery(id uint32) bool
	IsRenderbuffer(renderbuffer uint32) bool
	IsSampler(sampler uint32) bool
	IsShader(shader uint32) bool
	IsSync(sync GLsync) bool
	IsTexture(texture uint32) bool
	IsTransformFeedback(id uint32) bool
	IsVertexArray(array uint32) bool
	LightModelf(pname uint32, param float32)
	LightModelfv(pname uint32, params *float32)
	LightModeli(pname uint32, param int32)
	LightModeliv(pname uint32, params *int32)
	Lightf(light uint32, pname uint32, param float32)
	Lightfv(light uint32, pname uint32, params *float32)
	Lighti(light uint32, pname uint32, param int32)
	Lightiv(light uint32, pname uint32, params *int32)
	LineStipple(factor int32, pattern uint16)
	LineWidth(width float32)
	LinkProgram(program uint32)
	ListBase(base uint32)
	LoadIdentity()
	LoadMatrixd(m *float64)
	LoadMatrixf(m *float32)
	LoadName(name uint32)
	LoadTransposeMatrixd(m *float64)
	LoadTransposeMatrixf(m *float32)
	LogicOp(opcode uint32)
	Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	MapBuffer(target uint32, access uint32) unsafe.Pointer
	MapBufferRange(target uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	MapGrid1d(un int32, u1 float64, u2 float64)
	MapGrid1f(un int32, u1 float32, u2 float32)
	MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)
	MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)
	MapNamedBuffer(buffer uint32, access uint32) unsafe.Pointer
	MapNamedBufferRange(buffer uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	Materialf(face uint32, pname uint32, param float32)
	Materialfv(face uint32, pname uint32, params *float32)
	Materiali(face uint32, pname uint32, param int32)
	Materialiv(face uint32, pname uint32, params *int32)
	MatrixMode(mode uint32)
	MemoryBarrier(barriers uint32)
	MemoryBarrierByRegion(barriers uint32)
	MinSampleShading(value float32)
	MultMatrixd(m *float64)
	MultMatrixf(m *float32)
	MultTransposeMatrixd(m *float64)
	MultTransposeMatrixf(m *float32)
	MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)
	MultiDrawArraysIndirect(mode uint32, indirect unsafe.Pointer, drawcount int32, stride int32)
	MultiDrawArraysIndirectCount(mode uint32, indirect unsafe.Pointer, drawcount uintptr, maxdrawcount int32, stride int32)
	MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)
	MultiDrawElementsBaseVertex(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32)
	MultiDrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer, drawcount int32, stride int32)
	MultiDrawElementsIndirectCount(mode uint32, type_ uint32, indirect unsafe.Pointer, drawcount uintptr, maxdrawcount int32, stride int32)
	MultiTexCoord1d(target uint32, s float64)
	MultiTexCoord1dv(target uint32, v *float64)
	MultiTexCoord1f(target uint32, s float32)
	MultiTexCoord1fv(target uint32, v *float32)
	MultiTexCoord1i(target uint32, s int32)
	MultiTexCoord1iv(target uint32, v *int32)
	MultiTexCoord1s(target uint32, s int16)
	MultiTexCoord1sv(target uint32, v *int16)
	MultiTexCoord2d(target uint32, s float64, t float64)
	MultiTexCoord2dv(target uint32, v *float64)
	MultiTexCoord2f(target uint32, s float32, t float32)
	MultiTexCoord2fv(target uint32, v *float32)
	MultiTexCoord2i(target uint32, s int32, t int32)
	MultiTexCoord2iv(target uint32, v *int32)
	MultiTexCoord2s(target uint32, s int16, t int16)
	MultiTexCoord2sv(target uint32, v *int16)
	MultiTexCoord3d(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dv(target uint32, v *float64)
	MultiTexCoord3f(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fv(target uint32, v *float32)
	MultiTexCoord3i(target uint32, s int32, t int32, r int32)
	MultiTexCoord3iv(target uint32, v *int32)
	MultiTexCoord3s(target uint32, s int16, t int16, r int16)
	MultiTexCoord3sv(target uint32, v *int16)
	MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dv(target uint32, v *float64)
	MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fv(target uint32, v *float32)
	MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4iv(target uint32, v *int32)
	MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4sv(target uint32, v *int16)
	MultiTexCoordP1ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP1uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP2ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP2uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP3ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP3uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP4ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP4uiv(texture uint32, type_ uint32, coords *uint32)
	NamedBufferData(buffer uint32, size int, data unsafe.Pointer, usage uint32)
	NamedBufferStorage(buffer uint32, size int, data unsafe.Pointer, flags uint32)
	NamedBufferSubData(buffer uint32, offset uintptr, size int, data unsafe.Pointer)
	NamedFramebufferDrawBuffer(framebuffer uint32, buf uint32)
	NamedFramebufferDrawBuffers(framebuffer uint32, n int32, bufs *uint32)
	NamedFramebufferParameteri(framebuffer uint32, pname uint32, param int32)
	NamedFramebufferReadBuffer(framebuffer uint32, src uint32)
	NamedFramebufferRenderbuffer(framebuffer uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	NamedFramebufferTexture(framebuffer uint32, attachment uint32, texture uint32, level int32)
	NamedFramebufferTextureLayer(framebuffer uint32, attachment uint32, texture uint32, level int32, layer int32)
	NamedRenderbufferStorage(renderbuffer uint32, internalformat uint32, width int32, height int32)
	NamedRenderbufferStorageMultisample(renderbuffer uint32, samples int32, internalformat uint32, width int32, height int32)
	NewList(list uint32, mode uint32)
	Normal3b(nx int8, ny int8, nz int8)
	Normal3bv(v *int8)
	Normal3d(nx float64, ny float64, nz float64)
	Normal3dv(v *float64)
	Normal3f(nx float32, ny float32, nz float32)
	Normal3fv(v *float32)
	Normal3i(nx int32, ny int32, nz int32)
	Normal3iv(v *int32)
	Normal3s(nx int16, ny int16, nz int16)
	Normal3sv(v *int16)
	NormalP3ui(type_ uint32, coords uint32)
	NormalP3uiv(type_ uint32, coords *uint32)
	NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)
	ObjectLabel(identifier uint32, name uint32, length int32, label *uint8)
	ObjectPtrLabel(ptr unsafe.Pointer, length int32, label *uint8)
	Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	PassThrough(token float32)
	PatchParameterfv(pname uint32, values *float32)
	PatchParameteri(pname uint32, value int32)
	PauseTransformFeedback()
	PixelMapfv(map_ uint32, mapsize int32, values *float32)
	PixelMapuiv(map_ uint32, mapsize int32, values *uint32)
	PixelMapusv(map_ uint32, mapsize int32, values *uint16)
	PixelStoref(pname uint32, param float32)
	PixelStorei(pname uint32, param int32)
	PixelTransferf(pname uint32, param float32)
	PixelTransferi(pname uint32, param int32)
	PixelZoom(xfactor float32, yfactor float32)
	PointParameterf(pname uint32, param float32)
	PointParameterfv(pname uint32, params *float32)
	PointParameteri(pname uint32, param int32)
	PointParameteriv(pname uint32, params *int32)
	PointSize(size float32)
	PolygonMode(face uint32, mode uint32)
	PolygonOffset(factor float32, units float32)
	PolygonOffsetClamp(factor float32, units float32, clamp float32)
	PolygonStipple(mask *uint8)
	PopAttrib()
	PopClientAttrib()
	PopDebugGroup()
	PopMatrix()
	PopName()
	PrimitiveRestartIndex(index uint32)
	PrioritizeTextures(n int32, textures *uint32, priorities *float32)
	ProgramBinary(program uint32, binaryFormat uint32, binary unsafe.Pointer, length int32)
	ProgramParameteri(program uint32, pname uint32, value int32)
	ProgramUniform1d(program uint32, location int32, v0 float64)
	ProgramUniform1dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform1f(program uint32, location int32, v0 float32)
	ProgramUniform1fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform1i(program uint32, location int32, v0 int32)
	ProgramUniform1iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform1ui(program uint32, location int32, v0 uint32)
	ProgramUniform1uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform2d(program uint32, location int32, v0 float64, v1 float64)
	ProgramUniform2dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32)
	ProgramUniform2fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32)
	ProgramUniform2iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32)
	ProgramUniform2uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform3d(program uint32, location int32, v0 float64, v1 float64, v2 float64)
	ProgramUniform3dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32)
	ProgramUniform3fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32)
	ProgramUniform3iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32)
	ProgramUniform3uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform4d(program uint32, location int32, v0 float64, v1 float64, v2 float64, v3 float64)
	ProgramUniform4dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	ProgramUniform4fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	ProgramUniform4iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	ProgramUniform4uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniformMatrix2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProvokingVertex(mode uint32)
	PushAttrib(mask uint32)
	PushClientAttrib(mask uint32)
	PushDebugGroup(source uint32, id uint32, length int32, message *uint8)
	PushMatrix()
	PushName(name uint32)
	QueryCounter(id uint32, target uint32)
	RasterPos2d(x float64, y float64)
	RasterPos2dv(v *float64)
	RasterPos2f(x float32, y float32)
	RasterPos2fv(v *float32)
	RasterPos2i(x int32, y int32)
	RasterPos2iv(v *int32)
	RasterPos2s(x int16, y int16)
	RasterPos2sv(v *int16)
	RasterPos3d(x float64, y float64, z float64)
	RasterPos3dv(v *float64)
	RasterPos3f(x float32, y float32, z float32)
	RasterPos3fv(v *float32)
	RasterPos3i(x int32, y int32, z int32)
	RasterPos3iv(v *int32)
	RasterPos3s(x int16, y int16, z int16)
	RasterPos3sv(v *int16)
	RasterPos4d(x float64, y float64, z float64, w float64)
	RasterPos4dv(v *float64)
	RasterPos4f(x float32, y float32, z float32, w float32)
	RasterPos4fv(v *float32)
	RasterPos4i(x int32, y int32, z int32, w int32)
	RasterPos4iv(v *int32)
	RasterPos4s(x int16, y int16, z int16, w int16)
	RasterPos4sv(v *int16)
	ReadBuffer(src uint32)
	ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	ReadnPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, bufSize int32, data unsafe.Pointer)
	Rectd(x1 float64, y1 float64, x2 float64, y2 float64)
	Rectdv(v1 *float64, v2 *float64)
	Rectf(x1 float32, y1 float32, x2 float32, y2 float32)
	Rectfv(v1 *float32, v2 *float32)
	Recti(x1 int32, y1 int32, x2 int32, y2 int32)
	Rectiv(v1 *int32, v2 *int32)
	Rects(x1 int16, y1 int16, x2 int16, y2 int16)
	Rectsv(v1 *int16, v2 *int16)
	ReleaseShaderCompiler()
	RenderMode(mode uint32) int32
	RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32)
	RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32)
	ResumeTransformFeedback()
	Rotated(angle float64, x float64, y float64, z float64)
	Rotatef(angle float32, x float32, y float32, z float32)
	SampleCoverage(value float32, invert bool)
	SampleMaski(maskNumber uint32, mask uint32)
	SamplerParameterIiv(sampler uint32, pname uint32, param *int32)
	SamplerParameterIuiv(sampler uint32, pname uint32, param *uint32)
	SamplerParameterf(sampler uint32, pname uint32, param float32)
	SamplerParameterfv(sampler uint32, pname uint32, param *float32)
	SamplerParameteri(sampler uint32, pname uint32, param int32)
	SamplerParameteriv(sampler uint32, pname uint32, param *int32)
	Scaled(x float64, y float64, z float64)
	Scalef(x float32, y float32, z float32)
	Scissor(x int32, y int32, width int32, height int32)
	ScissorArrayv(first uint32, count int32, v *int32)
	ScissorIndexed(index uint32, left int32, bottom int32, width int32, height int32)
	ScissorIndexedv(index uint32, v *int32)
	SecondaryColor3b(red int8, green int8, blue int8)
	SecondaryColor3bv(v *int8)
	SecondaryColor3d(red float64, green float64, blue float64)
	SecondaryColor3dv(v *float64)
	SecondaryColor3f(red float32, green float32, blue float32)
	SecondaryColor3fv(v *float32)
	SecondaryColor3i(red int32, green int32, blue int32)
	SecondaryColor3iv(v *int32)
	SecondaryColor3s(red int16, green int16, blue int16)
	SecondaryColor3sv(v *int16)
	SecondaryColor3ub(red uint8, green uint8, blue uint8)
	SecondaryColor3ubv(v *uint8)
	SecondaryColor3ui(red uint32, green uint32, blue uint32)
	SecondaryColor3uiv(v *uint32)
	SecondaryColor3us(red uint16, green uint16, blue uint16)
	SecondaryColor3usv(v *uint16)
	SecondaryColorP3ui(type_ uint32, color uint32)
	SecondaryColorP3uiv(type_ uint32, color *uint32)
	SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	SelectBuffer(size int32, buffer *uint32)
	ShadeModel(mode uint32)
	ShaderBinary(count int32, shaders *uint32, binaryFormat uint32, binary unsafe.Pointer, length int32)
	ShaderSource(shader uint32, count int32, string **uint8, length *int32)
	ShaderStorageBlockBinding(program uint32, storageBlockIndex uint32, storageBlockBinding uint32)
	SpecializeShader(shader uint32, pEntryPoint *uint8, numSpecializationConstants uint32, pConstantIndex *uint32, pConstantValue *uint32)
	StencilFunc(func_ uint32, ref int32, mask uint32)
	StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)
	StencilMask(mask uint32)
	StencilMaskSeparate(face uint32, mask uint32)
	StencilOp(fail uint32, zfail uint32, zpass uint32)
	StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)
	TexBuffer(target uint32, internalformat uint32, buffer uint32)
	TexBufferRange(target uint32, internalformat uint32, buffer uint32, offset uintptr, size int)
	TexCoord1d(s float64)
	TexCoord1dv(v *float64)
	TexCoord1f(s float32)
	TexCoord1fv(v *float32)
	TexCoord1i(s int32)
	TexCoord1iv(v *int32)
	TexCoord1s(s int16)
	TexCoord1sv(v *int16)
	TexCoord2d(s float64, t float64)
	TexCoord2dv(v *float64)
	TexCoord2f(s float32, t float32)
	TexCoord2fv(v *float32)
	TexCoord2i(s int32, t int32)
	TexCoord2iv(v *int32)
	TexCoord2s(s int16, t int16)
	TexCoord2sv(v *int16)
	TexCoord3d(s float64, t float64, r float64)
	TexCoord3dv(v *float64)
	TexCoord3f(s float32, t float32, r float32)
	TexCoord3fv(v *float32)
	TexCoord3i(s int32, t int32, r int32)
	TexCoord3iv(v *int32)
	TexCoord3s(s int16, t int16, r int16)
	TexCoord3sv(v *int16)
	TexCoord4d(s float64, t float64, r float64, q float64)
	TexCoord4dv(v *float64)
	TexCoord4f(s float32, t float32, r float32, q float32)
	TexCoord4fv(v *float32)
	TexCoord4i(s int32, t int32, r int32, q int32)
	TexCoord4iv(v *int32)
	TexCoord4s(s int16, t int16, r int16, q int16)
	TexCoord4sv(v *int16)
	TexCoordP1ui(type_ uint32, coords uint32)
	TexCoordP1uiv(type_ uint32, coords *uint32)
	TexCoordP2ui(type_ uint32, coords uint32)
	TexCoordP2uiv(type_ uint32, coords *uint32)
	TexCoordP3ui(type_ uint32, coords uint32)
	TexCoordP3uiv(type_ uint32, coords *uint32)
	TexCoordP4ui(type_ uint32, coords uint32)
	TexCoordP4uiv(type_ uint32, coords *uint32)
	TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	TexEnvf(target uint32, pname uint32, param float32)
	TexEnvfv(target uint32, pname uint32, params *float32)
	TexEnvi(target uint32, pname uint32, param int32)
	TexEnviv(target uint32, pname uint32, params *int32)
	TexGend(coord uint32, pname uint32, param float64)
	TexGendv(coord uint32, pname uint32, params *float64)
	TexGenf(coord uint32, pname uint32, param float32)
	TexGenfv(coord uint32, pname uint32, params *float32)
	TexGeni(coord uint32, pname uint32, param int32)
	TexGeniv(coord uint32, pname uint32, params *int32)
	TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TexParameterIiv(target uint32, pname uint32, params *int32)
	TexParameterIuiv(target uint32, pname uint32, params *uint32)
	TexParameterf(target uint32, pname uint32, param float32)
	TexParameterfv(target uint32, pname uint32, params *float32)
	TexParameteri(target uint32, pname uint32, param int32)
	TexParameteriv(target uint32, pname uint32, params *int32)
	TexStorage1D(target uint32, levels int32, internalformat uint32, width int32)
	TexStorage2D(target uint32, levels int32, internalformat uint32, width int32, height int32)
	TexStorage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexStorage3D(target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32)
	TexStorage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureBarrier()
	TextureBuffer(texture uint32, internalformat uint32, buffer uint32)
	TextureBufferRange(texture uint32, internalformat uint32, buffer uint32, offset uintptr, size int)
	TextureParameterIiv(texture uint32, pname uint32, params *int32)
	TextureParameterIuiv(texture uint32, pname uint32, params *uint32)
	TextureParameterf(texture uint32, pname uint32, param float32)
	TextureParameterfv(texture uint32, pname uint32, param *float32)
	TextureParameteri(texture uint32, pname uint32, param int32)
	TextureParameteriv(texture uint32, pname uint32, param *int32)
	TextureStorage1D(texture uint32, levels int32, internalformat uint32, width int32)
	TextureStorage2D(texture uint32, levels int32, internalformat uint32, width int32, height int32)
	TextureStorage2DMultisample(texture uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TextureStorage3D(texture uint32, levels int32, internalformat uint32, width int32, height int32, depth int32)
	TextureStorage3DMultisample(texture uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TextureSubImage1D(texture uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureView(texture uint32, target uint32, origtexture uint32, internalformat uint32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32)
	TransformFeedbackBufferBase(xfb uint32, index uint32, buffer uint32)
	TransformFeedbackBufferRange(xfb uint32, index uint32, buffer uint32, offset uintptr, size int)
	TransformFeedbackVaryings(program uint32, count int32, varyings **uint8, bufferMode uint32)
	Translated(x float64, y float64, z float64)
	Translatef(x float32, y float32, z float32)
	Uniform1d(location int32, x float64)
	Uniform1dv(location int32, count int32, value *float64)
	Uniform1f(location int32, v0 float32)
	Uniform1fv(location int32, count int32, value *float32)
	Uniform1i(location int32, v0 int32)
	Uniform1iv(location int32, count int32, value *int32)
	Uniform1ui(location int32, v0 uint32)
	Uniform1uiv(location int32, count int32, value *uint32)
	Uniform2d(location int32, x float64, y float64)
	Uniform2dv(location int32, count int32, value *float64)
	Uniform2f(location int32, v0 float32, v1 float32)
	Uniform2fv(location int32, count int32, value *float32)
	Uniform2i(location int32, v0 int32, v1 int32)
	Uniform2iv(location int32, count int32, value *int32)
	Uniform2ui(location int32, v0 uint32, v1 uint32)
	Uniform2uiv(location int32, count int32, value *uint32)
	Uniform3d(location int32, x float64, y float64, z float64)
	Uniform3dv(location int32, count int32, value *float64)
	Uniform3f(location int32, v0 float32, v1 float32, v2 float32)
	Uniform3fv(location int32, count int32, value *float32)
	Uniform3i(location int32, v0 int32, v1 int32, v2 int32)
	Uniform3iv(location int32, count int32, value *int32)
	Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)
	Uniform3uiv(location int32, count int32, value *uint32)
	Uniform4d(location int32, x float64, y float64, z float64, w float64)
	Uniform4dv(location int32, count int32, value *float64)
	Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	Uniform4fv(location int32, count int32, value *float32)
	Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	Uniform4iv(location int32, count int32, value *int32)
	Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	Uniform4uiv(location int32, count int32, value *uint32)
	UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)
	UniformMatrix2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix2x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32)
	UniformSubroutinesuiv(shadertype uint32, count int32, indices *uint32)
	UnmapBuffer(target uint32) bool
	UnmapNamedBuffer(buffer uint32) bool
	UseProgram(program uint32)
	UseProgramStages(pipeline uint32, stages uint32, program uint32)
	ValidateProgram(program uint32)
	ValidateProgramPipeline(pipeline uint32)
	Vertex2d(x float64, y float64)
	Vertex2dv(v *float64)
	Vertex2f(x float32, y float32)
	Vertex2fv(v *float32)
	Vertex2i(x int32, y int32)
	Vertex2iv(v *int32)
	Vertex2s(x int16, y int16)
	Vertex2sv(v *int16)
	Vertex3d(x float64, y float64, z float64)
	Vertex3dv(v *float64)
	Vertex3f(x float32, y float32, z float32)
	Vertex3fv(v *float32)
	Vertex3i(x int32, y int32, z int32)
	Vertex3iv(v *int32)
	Vertex3s(x int16, y int16, z int16)
	Vertex3sv(v *int16)
	Vertex4d(x float64, y float64, z float64, w float64)
	Vertex4dv(v *float64)
	Vertex4f(x float32, y float32, z float32, w float32)
	Vertex4fv(v *float32)
	Vertex4i(x int32, y int32, z int32, w int32)
	Vertex4iv(v *int32)
	Vertex4s(x int16, y int16, z int16, w int16)
	Vertex4sv(v *int16)
	VertexArrayAttribBinding(vaobj uint32, attribindex uint32, bindingindex uint32)
	VertexArrayAttribFormat(vaobj uint32, attribindex uint32, size int32, type_ uint32, normalized bool, relativeoffset uint32)
	VertexArrayAttribIFormat(vaobj uint32, attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexArrayAttribLFormat(vaobj uint32, attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexArrayBindingDivisor(vaobj uint32, bindingindex uint32, divisor uint32)
	VertexArrayElementBuffer(vaobj uint32, buffer uint32)
	VertexArrayVertexBuffer(vaobj uint32, bindingindex uint32, buffer uint32, offset uintptr, stride int32)
	VertexArrayVertexBuffers(vaobj uint32, first uint32, count int32, buffers *uint32, offsets *uintptr, strides *int32)
	VertexAttrib1d(index uint32, x float64)
	VertexAttrib1dv(index uint32, v *float64)
	VertexAttrib1f(index uint32, x float32)
	VertexAttrib1fv(index uint32, v *float32)
	VertexAttrib1s(index uint32, x int16)
	VertexAttrib1sv(index uint32, v *int16)
	VertexAttrib2d(index uint32, x float64, y float64)
	VertexAttrib2dv(index uint32, v *float64)
	VertexAttrib2f(index uint32, x float32, y float32)
	VertexAttrib2fv(index uint32, v *float32)
	VertexAttrib2s(index uint32, x int16, y int16)
	VertexAttrib2sv(index uint32, v *int16)
	VertexAttrib3d(index uint32, x float64, y float64, z float64)
	VertexAttrib3dv(index uint32, v *float64)
	VertexAttrib3f(index uint32, x float32, y float32, z float32)
	VertexAttrib3fv(index uint32, v *float32)
	VertexAttrib3s(index uint32, x int16, y int16, z int16)
	VertexAttrib3sv(index uint32, v *int16)
	VertexAttrib4Nbv(index uint32, v *int8)
	VertexAttrib4Niv(index uint32, v *int32)
	VertexAttrib4Nsv(index uint32, v *int16)
	VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4Nubv(index uint32, v *uint8)
	VertexAttrib4Nuiv(index uint32, v *uint32)
	VertexAttrib4Nusv(index uint32, v *uint16)
	VertexAttrib4bv(index uint32, v *int8)
	VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dv(index uint32, v *float64)
	VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fv(index uint32, v *float32)
	VertexAttrib4iv(index uint32, v *int32)
	VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4sv(index uint32, v *int16)
	VertexAttrib4ubv(index uint32, v *uint8)
	VertexAttrib4uiv(index uint32, v *uint32)
	VertexAttrib4usv(index uint32, v *uint16)
	VertexAttribBinding(attribindex uint32, bindingindex uint32)
	VertexAttribDivisor(index uint32, divisor uint32)
	VertexAttribFormat(attribindex uint32, size int32, type_ uint32, normalized bool, relativeoffset uint32)
	VertexAttribI1i(index uint32, x int32)
	VertexAttribI1iv(index uint32, v *int32)
	VertexAttribI1ui(index uint32, x uint32)
	VertexAttribI1uiv(index uint32, v *uint32)
	VertexAttribI2i(index uint32, x int32, y int32)
	VertexAttribI2iv(index uint32, v *int32)
	VertexAttribI2ui(index uint32, x uint32, y uint32)
	VertexAttribI2uiv(index uint32, v *uint32)
	VertexAttribI3i(index uint32, x int32, y int32, z int32)
	VertexAttribI3iv(index uint32, v *int32)
	VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32)
	VertexAttribI3uiv(index uint32, v *uint32)
	VertexAttribI4bv(index uint32, v *int8)
	VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)
	VertexAttribI4iv(index uint32, v *int32)
	VertexAttribI4sv(index uint32, v *int16)
	VertexAttribI4ubv(index uint32, v *uint8)
	VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)
	VertexAttribI4uiv(index uint32, v *uint32)
	VertexAttribI4usv(index uint32, v *uint16)
	VertexAttribIFormat(attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexAttribIPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribL1d(index uint32, x float64)
	VertexAttribL1dv(index uint32, v *float64)
	VertexAttribL2d(index uint32, x float64, y float64)
	VertexAttribL2dv(index uint32, v *float64)
	VertexAttribL3d(index uint32, x float64, y float64, z float64)
	VertexAttribL3dv(index uint32, v *float64)
	VertexAttribL4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttribL4dv(index uint32, v *float64)
	VertexAttribLFormat(attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexAttribLPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttribP1ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP1uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP2ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP2uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP3ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP3uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP4ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP4uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribPointer(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer)
	VertexBindingDivisor(bindingindex uint32, divisor uint32)
	VertexP2ui(type_ uint32, value uint32)
	VertexP2uiv(type_ uint32, value *uint32)
	VertexP3ui(type_ uint32, value uint32)
	VertexP3uiv(type_ uint32, value *uint32)
	VertexP4ui(type_ uint32, value uint32)
	VertexP4uiv(type_ uint32, value *uint32)
	VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	Viewport(x int32, y int32, width int32, height int32)
	ViewportArrayv(first uint32, count int32, v *float32)
	ViewportIndexedf(index uint32, x float32, y float32, w float32, h float32)
	ViewportIndexedfv(index uint32, v *float32)
	WaitSync(sync GLsync, flags uint32, timeout uint64)
	WindowPos2d(x float64, y float64)
	WindowPos2dv(v *float64)
	WindowPos2f(x float32, y float32)
	WindowPos2fv(v *float32)
	WindowPos2i(x int32, y int32)
	WindowPos2iv(v *int32)
	WindowPos2s(x int16, y int16)
	WindowPos2sv(v *int16)
	WindowPos3d(x float64, y float64, z float64)
	WindowPos3dv(v *float64)
	WindowPos3f(x float32, y float32, z float32)
	WindowPos3fv(v *float32)
	WindowPos3i(x int32, y int32, z int32)
	WindowPos3iv(v *int32)
	WindowPos3s(x int16, y int16, z int16)
	WindowPos3sv(v *int16)
}

func New460(getProcAddr func(name string) unsafe.Pointer) GL460 {
	gl := &lib{
		glAccum:                             getProcAddr("glAccum"),
		glActiveShaderProgram:               getProcAddr("glActiveShaderProgram"),
		glActiveTexture:                     getProcAddr("glActiveTexture"),
		glAlphaFunc:                         getProcAddr("glAlphaFunc"),
		glAreTexturesResident:               getProcAddr("glAreTexturesResident"),
		glArrayElement:                      getProcAddr("glArrayElement"),
		glAttachShader:                      getProcAddr("glAttachShader"),
		glBegin:                             getProcAddr("glBegin"),
		glBeginConditionalRender:            getProcAddr("glBeginConditionalRender"),
		glBeginQuery:                        getProcAddr("glBeginQuery"),
		glBeginQueryIndexed:                 getProcAddr("glBeginQueryIndexed"),
		glBeginTransformFeedback:            getProcAddr("glBeginTransformFeedback"),
		glBindAttribLocation:                getProcAddr("glBindAttribLocation"),
		glBindBuffer:                        getProcAddr("glBindBuffer"),
		glBindBufferBase:                    getProcAddr("glBindBufferBase"),
		glBindBufferRange:                   getProcAddr("glBindBufferRange"),
		glBindBuffersBase:                   getProcAddr("glBindBuffersBase"),
		glBindBuffersRange:                  getProcAddr("glBindBuffersRange"),
		glBindFragDataLocation:              getProcAddr("glBindFragDataLocation"),
		glBindFragDataLocationIndexed:       getProcAddr("glBindFragDataLocationIndexed"),
		glBindFramebuffer:                   getProcAddr("glBindFramebuffer"),
		glBindImageTexture:                  getProcAddr("glBindImageTexture"),
		glBindImageTextures:                 getProcAddr("glBindImageTextures"),
		glBindProgramPipeline:               getProcAddr("glBindProgramPipeline"),
		glBindRenderbuffer:                  getProcAddr("glBindRenderbuffer"),
		glBindSampler:                       getProcAddr("glBindSampler"),
		glBindSamplers:                      getProcAddr("glBindSamplers"),
		glBindTexture:                       getProcAddr("glBindTexture"),
		glBindTextureUnit:                   getProcAddr("glBindTextureUnit"),
		glBindTextures:                      getProcAddr("glBindTextures"),
		glBindTransformFeedback:             getProcAddr("glBindTransformFeedback"),
		glBindVertexArray:                   getProcAddr("glBindVertexArray"),
		glBindVertexBuffer:                  getProcAddr("glBindVertexBuffer"),
		glBindVertexBuffers:                 getProcAddr("glBindVertexBuffers"),
		glBitmap:                            getProcAddr("glBitmap"),
		glBlendColor:                        getProcAddr("glBlendColor"),
		glBlendEquation:                     getProcAddr("glBlendEquation"),
		glBlendEquationSeparate:             getProcAddr("glBlendEquationSeparate"),
		glBlendEquationSeparatei:            getProcAddr("glBlendEquationSeparatei"),
		glBlendEquationi:                    getProcAddr("glBlendEquationi"),
		glBlendFunc:                         getProcAddr("glBlendFunc"),
		glBlendFuncSeparate:                 getProcAddr("glBlendFuncSeparate"),
		glBlendFuncSeparatei:                getProcAddr("glBlendFuncSeparatei"),
		glBlendFunci:                        getProcAddr("glBlendFunci"),
		glBlitFramebuffer:                   getProcAddr("glBlitFramebuffer"),
		glBlitNamedFramebuffer:              getProcAddr("glBlitNamedFramebuffer"),
		glBufferData:                        getProcAddr("glBufferData"),
		glBufferStorage:                     getProcAddr("glBufferStorage"),
		glBufferSubData:                     getProcAddr("glBufferSubData"),
		glCallList:                          getProcAddr("glCallList"),
		glCallLists:                         getProcAddr("glCallLists"),
		glCheckFramebufferStatus:            getProcAddr("glCheckFramebufferStatus"),
		glCheckNamedFramebufferStatus:       getProcAddr("glCheckNamedFramebufferStatus"),
		glClampColor:                        getProcAddr("glClampColor"),
		glClear:                             getProcAddr("glClear"),
		glClearAccum:                        getProcAddr("glClearAccum"),
		glClearBufferData:                   getProcAddr("glClearBufferData"),
		glClearBufferSubData:                getProcAddr("glClearBufferSubData"),
		glClearBufferfi:                     getProcAddr("glClearBufferfi"),
		glClearBufferfv:                     getProcAddr("glClearBufferfv"),
		glClearBufferiv:                     getProcAddr("glClearBufferiv"),
		glClearBufferuiv:                    getProcAddr("glClearBufferuiv"),
		glClearColor:                        getProcAddr("glClearColor"),
		glClearDepth:                        getProcAddr("glClearDepth"),
		glClearDepthf:                       getProcAddr("glClearDepthf"),
		glClearIndex:                        getProcAddr("glClearIndex"),
		glClearNamedBufferData:              getProcAddr("glClearNamedBufferData"),
		glClearNamedBufferSubData:           getProcAddr("glClearNamedBufferSubData"),
		glClearNamedFramebufferfi:           getProcAddr("glClearNamedFramebufferfi"),
		glClearNamedFramebufferfv:           getProcAddr("glClearNamedFramebufferfv"),
		glClearNamedFramebufferiv:           getProcAddr("glClearNamedFramebufferiv"),
		glClearNamedFramebufferuiv:          getProcAddr("glClearNamedFramebufferuiv"),
		glClearStencil:                      getProcAddr("glClearStencil"),
		glClearTexImage:                     getProcAddr("glClearTexImage"),
		glClearTexSubImage:                  getProcAddr("glClearTexSubImage"),
		glClientActiveTexture:               getProcAddr("glClientActiveTexture"),
		glClientWaitSync:                    getProcAddr("glClientWaitSync"),
		glClipControl:                       getProcAddr("glClipControl"),
		glClipPlane:                         getProcAddr("glClipPlane"),
		glColor3b:                           getProcAddr("glColor3b"),
		glColor3bv:                          getProcAddr("glColor3bv"),
		glColor3d:                           getProcAddr("glColor3d"),
		glColor3dv:                          getProcAddr("glColor3dv"),
		glColor3f:                           getProcAddr("glColor3f"),
		glColor3fv:                          getProcAddr("glColor3fv"),
		glColor3i:                           getProcAddr("glColor3i"),
		glColor3iv:                          getProcAddr("glColor3iv"),
		glColor3s:                           getProcAddr("glColor3s"),
		glColor3sv:                          getProcAddr("glColor3sv"),
		glColor3ub:                          getProcAddr("glColor3ub"),
		glColor3ubv:                         getProcAddr("glColor3ubv"),
		glColor3ui:                          getProcAddr("glColor3ui"),
		glColor3uiv:                         getProcAddr("glColor3uiv"),
		glColor3us:                          getProcAddr("glColor3us"),
		glColor3usv:                         getProcAddr("glColor3usv"),
		glColor4b:                           getProcAddr("glColor4b"),
		glColor4bv:                          getProcAddr("glColor4bv"),
		glColor4d:                           getProcAddr("glColor4d"),
		glColor4dv:                          getProcAddr("glColor4dv"),
		glColor4f:                           getProcAddr("glColor4f"),
		glColor4fv:                          getProcAddr("glColor4fv"),
		glColor4i:                           getProcAddr("glColor4i"),
		glColor4iv:                          getProcAddr("glColor4iv"),
		glColor4s:                           getProcAddr("glColor4s"),
		glColor4sv:                          getProcAddr("glColor4sv"),
		glColor4ub:                          getProcAddr("glColor4ub"),
		glColor4ubv:                         getProcAddr("glColor4ubv"),
		glColor4ui:                          getProcAddr("glColor4ui"),
		glColor4uiv:                         getProcAddr("glColor4uiv"),
		glColor4us:                          getProcAddr("glColor4us"),
		glColor4usv:                         getProcAddr("glColor4usv"),
		glColorMask:                         getProcAddr("glColorMask"),
		glColorMaski:                        getProcAddr("glColorMaski"),
		glColorMaterial:                     getProcAddr("glColorMaterial"),
		glColorP3ui:                         getProcAddr("glColorP3ui"),
		glColorP3uiv:                        getProcAddr("glColorP3uiv"),
		glColorP4ui:                         getProcAddr("glColorP4ui"),
		glColorP4uiv:                        getProcAddr("glColorP4uiv"),
		glColorPointer:                      getProcAddr("glColorPointer"),
		glCompileShader:                     getProcAddr("glCompileShader"),
		glCompressedTexImage1D:              getProcAddr("glCompressedTexImage1D"),
		glCompressedTexImage2D:              getProcAddr("glCompressedTexImage2D"),
		glCompressedTexImage3D:              getProcAddr("glCompressedTexImage3D"),
		glCompressedTexSubImage1D:           getProcAddr("glCompressedTexSubImage1D"),
		glCompressedTexSubImage2D:           getProcAddr("glCompressedTexSubImage2D"),
		glCompressedTexSubImage3D:           getProcAddr("glCompressedTexSubImage3D"),
		glCompressedTextureSubImage1D:       getProcAddr("glCompressedTextureSubImage1D"),
		glCompressedTextureSubImage2D:       getProcAddr("glCompressedTextureSubImage2D"),
		glCompressedTextureSubImage3D:       getProcAddr("glCompressedTextureSubImage3D"),
		glCopyBufferSubData:                 getProcAddr("glCopyBufferSubData"),
		glCopyImageSubData:                  getProcAddr("glCopyImageSubData"),
		glCopyNamedBufferSubData:            getProcAddr("glCopyNamedBufferSubData"),
		glCopyPixels:                        getProcAddr("glCopyPixels"),
		glCopyTexImage1D:                    getProcAddr("glCopyTexImage1D"),
		glCopyTexImage2D:                    getProcAddr("glCopyTexImage2D"),
		glCopyTexSubImage1D:                 getProcAddr("glCopyTexSubImage1D"),
		glCopyTexSubImage2D:                 getProcAddr("glCopyTexSubImage2D"),
		glCopyTexSubImage3D:                 getProcAddr("glCopyTexSubImage3D"),
		glCopyTextureSubImage1D:             getProcAddr("glCopyTextureSubImage1D"),
		glCopyTextureSubImage2D:             getProcAddr("glCopyTextureSubImage2D"),
		glCopyTextureSubImage3D:             getProcAddr("glCopyTextureSubImage3D"),
		glCreateBuffers:                     getProcAddr("glCreateBuffers"),
		glCreateFramebuffers:                getProcAddr("glCreateFramebuffers"),
		glCreateProgram:                     getProcAddr("glCreateProgram"),
		glCreateProgramPipelines:            getProcAddr("glCreateProgramPipelines"),
		glCreateQueries:                     getProcAddr("glCreateQueries"),
		glCreateRenderbuffers:               getProcAddr("glCreateRenderbuffers"),
		glCreateSamplers:                    getProcAddr("glCreateSamplers"),
		glCreateShader:                      getProcAddr("glCreateShader"),
		glCreateShaderProgramv:              getProcAddr("glCreateShaderProgramv"),
		glCreateTextures:                    getProcAddr("glCreateTextures"),
		glCreateTransformFeedbacks:          getProcAddr("glCreateTransformFeedbacks"),
		glCreateVertexArrays:                getProcAddr("glCreateVertexArrays"),
		glCullFace:                          getProcAddr("glCullFace"),
		glDebugMessageCallback:              getProcAddr("glDebugMessageCallback"),
		glDebugMessageControl:               getProcAddr("glDebugMessageControl"),
		glDebugMessageInsert:                getProcAddr("glDebugMessageInsert"),
		glDeleteBuffers:                     getProcAddr("glDeleteBuffers"),
		glDeleteFramebuffers:                getProcAddr("glDeleteFramebuffers"),
		glDeleteLists:                       getProcAddr("glDeleteLists"),
		glDeleteProgram:                     getProcAddr("glDeleteProgram"),
		glDeleteProgramPipelines:            getProcAddr("glDeleteProgramPipelines"),
		glDeleteQueries:                     getProcAddr("glDeleteQueries"),
		glDeleteRenderbuffers:               getProcAddr("glDeleteRenderbuffers"),
		glDeleteSamplers:                    getProcAddr("glDeleteSamplers"),
		glDeleteShader:                      getProcAddr("glDeleteShader"),
		glDeleteSync:                        getProcAddr("glDeleteSync"),
		glDeleteTextures:                    getProcAddr("glDeleteTextures"),
		glDeleteTransformFeedbacks:          getProcAddr("glDeleteTransformFeedbacks"),
		glDeleteVertexArrays:                getProcAddr("glDeleteVertexArrays"),
		glDepthFunc:                         getProcAddr("glDepthFunc"),
		glDepthMask:                         getProcAddr("glDepthMask"),
		glDepthRange:                        getProcAddr("glDepthRange"),
		glDepthRangeArrayv:                  getProcAddr("glDepthRangeArrayv"),
		glDepthRangeIndexed:                 getProcAddr("glDepthRangeIndexed"),
		glDepthRangef:                       getProcAddr("glDepthRangef"),
		glDetachShader:                      getProcAddr("glDetachShader"),
		glDisable:                           getProcAddr("glDisable"),
		glDisableClientState:                getProcAddr("glDisableClientState"),
		glDisableVertexArrayAttrib:          getProcAddr("glDisableVertexArrayAttrib"),
		glDisableVertexAttribArray:          getProcAddr("glDisableVertexAttribArray"),
		glDisablei:                          getProcAddr("glDisablei"),
		glDispatchCompute:                   getProcAddr("glDispatchCompute"),
		glDispatchComputeIndirect:           getProcAddr("glDispatchComputeIndirect"),
		glDrawArrays:                        getProcAddr("glDrawArrays"),
		glDrawArraysIndirect:                getProcAddr("glDrawArraysIndirect"),
		glDrawArraysInstanced:               getProcAddr("glDrawArraysInstanced"),
		glDrawArraysInstancedBaseInstance:   getProcAddr("glDrawArraysInstancedBaseInstance"),
		glDrawBuffer:                        getProcAddr("glDrawBuffer"),
		glDrawBuffers:                       getProcAddr("glDrawBuffers"),
		glDrawElements:                      getProcAddr("glDrawElements"),
		glDrawElementsBaseVertex:            getProcAddr("glDrawElementsBaseVertex"),
		glDrawElementsIndirect:              getProcAddr("glDrawElementsIndirect"),
		glDrawElementsInstanced:             getProcAddr("glDrawElementsInstanced"),
		glDrawElementsInstancedBaseInstance: getProcAddr("glDrawElementsInstancedBaseInstance"),
		glDrawElementsInstancedBaseVertex:   getProcAddr("glDrawElementsInstancedBaseVertex"),
		glDrawElementsInstancedBaseVertexBaseInstance: getProcAddr("glDrawElementsInstancedBaseVertexBaseInstance"),
		glDrawPixels:                           getProcAddr("glDrawPixels"),
		glDrawRangeElements:                    getProcAddr("glDrawRangeElements"),
		glDrawRangeElementsBaseVertex:          getProcAddr("glDrawRangeElementsBaseVertex"),
		glDrawTransformFeedback:                getProcAddr("glDrawTransformFeedback"),
		glDrawTransformFeedbackInstanced:       getProcAddr("glDrawTransformFeedbackInstanced"),
		glDrawTransformFeedbackStream:          getProcAddr("glDrawTransformFeedbackStream"),
		glDrawTransformFeedbackStreamInstanced: getProcAddr("glDrawTransformFeedbackStreamInstanced"),
		glEdgeFlag:                             getProcAddr("glEdgeFlag"),
		glEdgeFlagPointer:                      getProcAddr("glEdgeFlagPointer"),
		glEdgeFlagv:                            getProcAddr("glEdgeFlagv"),
		glEnable:                               getProcAddr("glEnable"),
		glEnableClientState:                    getProcAddr("glEnableClientState"),
		glEnableVertexArrayAttrib:              getProcAddr("glEnableVertexArrayAttrib"),
		glEnableVertexAttribArray:              getProcAddr("glEnableVertexAttribArray"),
		glEnablei:                              getProcAddr("glEnablei"),
		glEnd:                                  getProcAddr("glEnd"),
		glEndConditionalRender:                 getProcAddr("glEndConditionalRender"),
		glEndList:                              getProcAddr("glEndList"),
		glEndQuery:                             getProcAddr("glEndQuery"),
		glEndQueryIndexed:                      getProcAddr("glEndQueryIndexed"),
		glEndTransformFeedback:                 getProcAddr("glEndTransformFeedback"),
		glEvalCoord1d:                          getProcAddr("glEvalCoord1d"),
		glEvalCoord1dv:                         getProcAddr("glEvalCoord1dv"),
		glEvalCoord1f:                          getProcAddr("glEvalCoord1f"),
		glEvalCoord1fv:                         getProcAddr("glEvalCoord1fv"),
		glEvalCoord2d:                          getProcAddr("glEvalCoord2d"),
		glEvalCoord2dv:                         getProcAddr("glEvalCoord2dv"),
		glEvalCoord2f:                          getProcAddr("glEvalCoord2f"),
		glEvalCoord2fv:                         getProcAddr("glEvalCoord2fv"),
		glEvalMesh1:                            getProcAddr("glEvalMesh1"),
		glEvalMesh2:                            getProcAddr("glEvalMesh2"),
		glEvalPoint1:                           getProcAddr("glEvalPoint1"),
		glEvalPoint2:                           getProcAddr("glEvalPoint2"),
		glFeedbackBuffer:                       getProcAddr("glFeedbackBuffer"),
		glFenceSync:                            getProcAddr("glFenceSync"),
		glFinish:                               getProcAddr("glFinish"),
		glFlush:                                getProcAddr("glFlush"),
		glFlushMappedBufferRange:               getProcAddr("glFlushMappedBufferRange"),
		glFlushMappedNamedBufferRange:          getProcAddr("glFlushMappedNamedBufferRange"),
		glFogCoordPointer:                      getProcAddr("glFogCoordPointer"),
		glFogCoordd:                            getProcAddr("glFogCoordd"),
		glFogCoorddv:                           getProcAddr("glFogCoorddv"),
		glFogCoordf:                            getProcAddr("glFogCoordf"),
		glFogCoordfv:                           getProcAddr("glFogCoordfv"),
		glFogf:                                 getProcAddr("glFogf"),
		glFogfv:                                getProcAddr("glFogfv"),
		glFogi:                                 getProcAddr("glFogi"),
		glFogiv:                                getProcAddr("glFogiv"),
		glFramebufferParameteri:                getProcAddr("glFramebufferParameteri"),
		glFramebufferRenderbuffer:              getProcAddr("glFramebufferRenderbuffer"),
		glFramebufferTexture:                   getProcAddr("glFramebufferTexture"),
		glFramebufferTexture1D:                 getProcAddr("glFramebufferTexture1D"),
		glFramebufferTexture2D:                 getProcAddr("glFramebufferTexture2D"),
		glFramebufferTexture3D:                 getProcAddr("glFramebufferTexture3D"),
		glFramebufferTextureLayer:              getProcAddr("glFramebufferTextureLayer"),
		glFrontFace:                            getProcAddr("glFrontFace"),
		glFrustum:                              getProcAddr("glFrustum"),
		glGenBuffers:                           getProcAddr("glGenBuffers"),
		glGenFramebuffers:                      getProcAddr("glGenFramebuffers"),
		glGenLists:                             getProcAddr("glGenLists"),
		glGenProgramPipelines:                  getProcAddr("glGenProgramPipelines"),
		glGenQueries:                           getProcAddr("glGenQueries"),
		glGenRenderbuffers:                     getProcAddr("glGenRenderbuffers"),
		glGenSamplers:                          getProcAddr("glGenSamplers"),
		glGenTextures:                          getProcAddr("glGenTextures"),
		glGenTransformFeedbacks:                getProcAddr("glGenTransformFeedbacks"),
		glGenVertexArrays:                      getProcAddr("glGenVertexArrays"),
		glGenerateMipmap:                       getProcAddr("glGenerateMipmap"),
		glGenerateTextureMipmap:                getProcAddr("glGenerateTextureMipmap"),
		glGetActiveAtomicCounterBufferiv:       getProcAddr("glGetActiveAtomicCounterBufferiv"),
		glGetActiveAttrib:                      getProcAddr("glGetActiveAttrib"),
		glGetActiveSubroutineName:              getProcAddr("glGetActiveSubroutineName"),
		glGetActiveSubroutineUniformName:       getProcAddr("glGetActiveSubroutineUniformName"),
		glGetActiveSubroutineUniformiv:         getProcAddr("glGetActiveSubroutineUniformiv"),
		glGetActiveUniform:                     getProcAddr("glGetActiveUniform"),
		glGetActiveUniformBlockName:            getProcAddr("glGetActiveUniformBlockName"),
		glGetActiveUniformBlockiv:              getProcAddr("glGetActiveUniformBlockiv"),
		glGetActiveUniformName:                 getProcAddr("glGetActiveUniformName"),
		glGetActiveUniformsiv:                  getProcAddr("glGetActiveUniformsiv"),
		glGetAttachedShaders:                   getProcAddr("glGetAttachedShaders"),
		glGetAttribLocation:                    getProcAddr("glGetAttribLocation"),
		glGetBooleani_v:                        getProcAddr("glGetBooleani_v"),
		glGetBooleanv:                          getProcAddr("glGetBooleanv"),
		glGetBufferParameteri64v:               getProcAddr("glGetBufferParameteri64v"),
		glGetBufferParameteriv:                 getProcAddr("glGetBufferParameteriv"),
		glGetBufferPointerv:                    getProcAddr("glGetBufferPointerv"),
		glGetBufferSubData:                     getProcAddr("glGetBufferSubData"),
		glGetClipPlane:                         getProcAddr("glGetClipPlane"),
		glGetCompressedTexImage:                getProcAddr("glGetCompressedTexImage"),
		glGetCompressedTextureImage:            getProcAddr("glGetCompressedTextureImage"),
		glGetCompressedTextureSubImage:         getProcAddr("glGetCompressedTextureSubImage"),
		glGetDebugMessageLog:                   getProcAddr("glGetDebugMessageLog"),
		glGetDoublei_v:                         getProcAddr("glGetDoublei_v"),
		glGetDoublev:                           getProcAddr("glGetDoublev"),
		glGetError:                             getProcAddr("glGetError"),
		glGetFloati_v:                          getProcAddr("glGetFloati_v"),
		glGetFloatv:                            getProcAddr("glGetFloatv"),
		glGetFragDataIndex:                     getProcAddr("glGetFragDataIndex"),
		glGetFragDataLocation:                  getProcAddr("glGetFragDataLocation"),
		glGetFramebufferAttachmentParameteriv:  getProcAddr("glGetFramebufferAttachmentParameteriv"),
		glGetFramebufferParameteriv:            getProcAddr("glGetFramebufferParameteriv"),
		glGetGraphicsResetStatus:               getProcAddr("glGetGraphicsResetStatus"),
		glGetInteger64i_v:                      getProcAddr("glGetInteger64i_v"),
		glGetInteger64v:                        getProcAddr("glGetInteger64v"),
		glGetIntegeri_v:                        getProcAddr("glGetIntegeri_v"),
		glGetIntegerv:                          getProcAddr("glGetIntegerv"),
		glGetInternalformati64v:                getProcAddr("glGetInternalformati64v"),
		glGetInternalformativ:                  getProcAddr("glGetInternalformativ"),
		glGetLightfv:                           getProcAddr("glGetLightfv"),
		glGetLightiv:                           getProcAddr("glGetLightiv"),
		glGetMapdv:                             getProcAddr("glGetMapdv"),
		glGetMapfv:                             getProcAddr("glGetMapfv"),
		glGetMapiv:                             getProcAddr("glGetMapiv"),
		glGetMaterialfv:                        getProcAddr("glGetMaterialfv"),
		glGetMaterialiv:                        getProcAddr("glGetMaterialiv"),
		glGetMultisamplefv:                     getProcAddr("glGetMultisamplefv"),
		glGetNamedBufferParameteri64v:          getProcAddr("glGetNamedBufferParameteri64v"),
		glGetNamedBufferParameteriv:            getProcAddr("glGetNamedBufferParameteriv"),
		glGetNamedBufferPointerv:               getProcAddr("glGetNamedBufferPointerv"),
		glGetNamedBufferSubData:                getProcAddr("glGetNamedBufferSubData"),
		glGetNamedFramebufferAttachmentParameteriv: getProcAddr("glGetNamedFramebufferAttachmentParameteriv"),
		glGetNamedFramebufferParameteriv:           getProcAddr("glGetNamedFramebufferParameteriv"),
		glGetNamedRenderbufferParameteriv:          getProcAddr("glGetNamedRenderbufferParameteriv"),
		glGetObjectLabel:                           getProcAddr("glGetObjectLabel"),
		glGetObjectPtrLabel:                        getProcAddr("glGetObjectPtrLabel"),
		glGetPixelMapfv:                            getProcAddr("glGetPixelMapfv"),
		glGetPixelMapuiv:                           getProcAddr("glGetPixelMapuiv"),
		glGetPixelMapusv:                           getProcAddr("glGetPixelMapusv"),
		glGetPointerv:                              getProcAddr("glGetPointerv"),
		glGetPolygonStipple:                        getProcAddr("glGetPolygonStipple"),
		glGetProgramBinary:                         getProcAddr("glGetProgramBinary"),
		glGetProgramInfoLog:                        getProcAddr("glGetProgramInfoLog"),
		glGetProgramInterfaceiv:                    getProcAddr("glGetProgramInterfaceiv"),
		glGetProgramPipelineInfoLog:                getProcAddr("glGetProgramPipelineInfoLog"),
		glGetProgramPipelineiv:                     getProcAddr("glGetProgramPipelineiv"),
		glGetProgramResourceIndex:                  getProcAddr("glGetProgramResourceIndex"),
		glGetProgramResourceLocation:               getProcAddr("glGetProgramResourceLocation"),
		glGetProgramResourceLocationIndex:          getProcAddr("glGetProgramResourceLocationIndex"),
		glGetProgramResourceName:                   getProcAddr("glGetProgramResourceName"),
		glGetProgramResourceiv:                     getProcAddr("glGetProgramResourceiv"),
		glGetProgramStageiv:                        getProcAddr("glGetProgramStageiv"),
		glGetProgramiv:                             getProcAddr("glGetProgramiv"),
		glGetQueryBufferObjecti64v:                 getProcAddr("glGetQueryBufferObjecti64v"),
		glGetQueryBufferObjectiv:                   getProcAddr("glGetQueryBufferObjectiv"),
		glGetQueryBufferObjectui64v:                getProcAddr("glGetQueryBufferObjectui64v"),
		glGetQueryBufferObjectuiv:                  getProcAddr("glGetQueryBufferObjectuiv"),
		glGetQueryIndexediv:                        getProcAddr("glGetQueryIndexediv"),
		glGetQueryObjecti64v:                       getProcAddr("glGetQueryObjecti64v"),
		glGetQueryObjectiv:                         getProcAddr("glGetQueryObjectiv"),
		glGetQueryObjectui64v:                      getProcAddr("glGetQueryObjectui64v"),
		glGetQueryObjectuiv:                        getProcAddr("glGetQueryObjectuiv"),
		glGetQueryiv:                               getProcAddr("glGetQueryiv"),
		glGetRenderbufferParameteriv:               getProcAddr("glGetRenderbufferParameteriv"),
		glGetSamplerParameterIiv:                   getProcAddr("glGetSamplerParameterIiv"),
		glGetSamplerParameterIuiv:                  getProcAddr("glGetSamplerParameterIuiv"),
		glGetSamplerParameterfv:                    getProcAddr("glGetSamplerParameterfv"),
		glGetSamplerParameteriv:                    getProcAddr("glGetSamplerParameteriv"),
		glGetShaderInfoLog:                         getProcAddr("glGetShaderInfoLog"),
		glGetShaderPrecisionFormat:                 getProcAddr("glGetShaderPrecisionFormat"),
		glGetShaderSource:                          getProcAddr("glGetShaderSource"),
		glGetShaderiv:                              getProcAddr("glGetShaderiv"),
		glGetString:                                getProcAddr("glGetString"),
		glGetStringi:                               getProcAddr("glGetStringi"),
		glGetSubroutineIndex:                       getProcAddr("glGetSubroutineIndex"),
		glGetSubroutineUniformLocation:             getProcAddr("glGetSubroutineUniformLocation"),
		glGetSynciv:                                getProcAddr("glGetSynciv"),
		glGetTexEnvfv:                              getProcAddr("glGetTexEnvfv"),
		glGetTexEnviv:                              getProcAddr("glGetTexEnviv"),
		glGetTexGendv:                              getProcAddr("glGetTexGendv"),
		glGetTexGenfv:                              getProcAddr("glGetTexGenfv"),
		glGetTexGeniv:                              getProcAddr("glGetTexGeniv"),
		glGetTexImage:                              getProcAddr("glGetTexImage"),
		glGetTexLevelParameterfv:                   getProcAddr("glGetTexLevelParameterfv"),
		glGetTexLevelParameteriv:                   getProcAddr("glGetTexLevelParameteriv"),
		glGetTexParameterIiv:                       getProcAddr("glGetTexParameterIiv"),
		glGetTexParameterIuiv:                      getProcAddr("glGetTexParameterIuiv"),
		glGetTexParameterfv:                        getProcAddr("glGetTexParameterfv"),
		glGetTexParameteriv:                        getProcAddr("glGetTexParameteriv"),
		glGetTextureImage:                          getProcAddr("glGetTextureImage"),
		glGetTextureLevelParameterfv:               getProcAddr("glGetTextureLevelParameterfv"),
		glGetTextureLevelParameteriv:               getProcAddr("glGetTextureLevelParameteriv"),
		glGetTextureParameterIiv:                   getProcAddr("glGetTextureParameterIiv"),
		glGetTextureParameterIuiv:                  getProcAddr("glGetTextureParameterIuiv"),
		glGetTextureParameterfv:                    getProcAddr("glGetTextureParameterfv"),
		glGetTextureParameteriv:                    getProcAddr("glGetTextureParameteriv"),
		glGetTextureSubImage:                       getProcAddr("glGetTextureSubImage"),
		glGetTransformFeedbackVarying:              getProcAddr("glGetTransformFeedbackVarying"),
		glGetTransformFeedbacki64_v:                getProcAddr("glGetTransformFeedbacki64_v"),
		glGetTransformFeedbacki_v:                  getProcAddr("glGetTransformFeedbacki_v"),
		glGetTransformFeedbackiv:                   getProcAddr("glGetTransformFeedbackiv"),
		glGetUniformBlockIndex:                     getProcAddr("glGetUniformBlockIndex"),
		glGetUniformIndices:                        getProcAddr("glGetUniformIndices"),
		glGetUniformLocation:                       getProcAddr("glGetUniformLocation"),
		glGetUniformSubroutineuiv:                  getProcAddr("glGetUniformSubroutineuiv"),
		glGetUniformdv:                             getProcAddr("glGetUniformdv"),
		glGetUniformfv:                             getProcAddr("glGetUniformfv"),
		glGetUniformiv:                             getProcAddr("glGetUniformiv"),
		glGetUniformuiv:                            getProcAddr("glGetUniformuiv"),
		glGetVertexArrayIndexed64iv:                getProcAddr("glGetVertexArrayIndexed64iv"),
		glGetVertexArrayIndexediv:                  getProcAddr("glGetVertexArrayIndexediv"),
		glGetVertexArrayiv:                         getProcAddr("glGetVertexArrayiv"),
		glGetVertexAttribIiv:                       getProcAddr("glGetVertexAttribIiv"),
		glGetVertexAttribIuiv:                      getProcAddr("glGetVertexAttribIuiv"),
		glGetVertexAttribLdv:                       getProcAddr("glGetVertexAttribLdv"),
		glGetVertexAttribPointerv:                  getProcAddr("glGetVertexAttribPointerv"),
		glGetVertexAttribdv:                        getProcAddr("glGetVertexAttribdv"),
		glGetVertexAttribfv:                        getProcAddr("glGetVertexAttribfv"),
		glGetVertexAttribiv:                        getProcAddr("glGetVertexAttribiv"),
		glGetnColorTable:                           getProcAddr("glGetnColorTable"),
		glGetnCompressedTexImage:                   getProcAddr("glGetnCompressedTexImage"),
		glGetnConvolutionFilter:                    getProcAddr("glGetnConvolutionFilter"),
		glGetnHistogram:                            getProcAddr("glGetnHistogram"),
		glGetnMapdv:                                getProcAddr("glGetnMapdv"),
		glGetnMapfv:                                getProcAddr("glGetnMapfv"),
		glGetnMapiv:                                getProcAddr("glGetnMapiv"),
		glGetnMinmax:                               getProcAddr("glGetnMinmax"),
		glGetnPixelMapfv:                           getProcAddr("glGetnPixelMapfv"),
		glGetnPixelMapuiv:                          getProcAddr("glGetnPixelMapuiv"),
		glGetnPixelMapusv:                          getProcAddr("glGetnPixelMapusv"),
		glGetnPolygonStipple:                       getProcAddr("glGetnPolygonStipple"),
		glGetnSeparableFilter:                      getProcAddr("glGetnSeparableFilter"),
		glGetnTexImage:                             getProcAddr("glGetnTexImage"),
		glGetnUniformdv:                            getProcAddr("glGetnUniformdv"),
		glGetnUniformfv:                            getProcAddr("glGetnUniformfv"),
		glGetnUniformiv:                            getProcAddr("glGetnUniformiv"),
		glGetnUniformuiv:                           getProcAddr("glGetnUniformuiv"),
		glHint:                                     getProcAddr("glHint"),
		glIndexMask:                                getProcAddr("glIndexMask"),
		glIndexPointer:                             getProcAddr("glIndexPointer"),
		glIndexd:                                   getProcAddr("glIndexd"),
		glIndexdv:                                  getProcAddr("glIndexdv"),
		glIndexf:                                   getProcAddr("glIndexf"),
		glIndexfv:                                  getProcAddr("glIndexfv"),
		glIndexi:                                   getProcAddr("glIndexi"),
		glIndexiv:                                  getProcAddr("glIndexiv"),
		glIndexs:                                   getProcAddr("glIndexs"),
		glIndexsv:                                  getProcAddr("glIndexsv"),
		glIndexub:                                  getProcAddr("glIndexub"),
		glIndexubv:                                 getProcAddr("glIndexubv"),
		glInitNames:                                getProcAddr("glInitNames"),
		glInterleavedArrays:                        getProcAddr("glInterleavedArrays"),
		glInvalidateBufferData:                     getProcAddr("glInvalidateBufferData"),
		glInvalidateBufferSubData:                  getProcAddr("glInvalidateBufferSubData"),
		glInvalidateFramebuffer:                    getProcAddr("glInvalidateFramebuffer"),
		glInvalidateNamedFramebufferData:           getProcAddr("glInvalidateNamedFramebufferData"),
		glInvalidateNamedFramebufferSubData:        getProcAddr("glInvalidateNamedFramebufferSubData"),
		glInvalidateSubFramebuffer:                 getProcAddr("glInvalidateSubFramebuffer"),
		glInvalidateTexImage:                       getProcAddr("glInvalidateTexImage"),
		glInvalidateTexSubImage:                    getProcAddr("glInvalidateTexSubImage"),
		glIsBuffer:                                 getProcAddr("glIsBuffer"),
		glIsEnabled:                                getProcAddr("glIsEnabled"),
		glIsEnabledi:                               getProcAddr("glIsEnabledi"),
		glIsFramebuffer:                            getProcAddr("glIsFramebuffer"),
		glIsList:                                   getProcAddr("glIsList"),
		glIsProgram:                                getProcAddr("glIsProgram"),
		glIsProgramPipeline:                        getProcAddr("glIsProgramPipeline"),
		glIsQuery:                                  getProcAddr("glIsQuery"),
		glIsRenderbuffer:                           getProcAddr("glIsRenderbuffer"),
		glIsSampler:                                getProcAddr("glIsSampler"),
		glIsShader:                                 getProcAddr("glIsShader"),
		glIsSync:                                   getProcAddr("glIsSync"),
		glIsTexture:                                getProcAddr("glIsTexture"),
		glIsTransformFeedback:                      getProcAddr("glIsTransformFeedback"),
		glIsVertexArray:                            getProcAddr("glIsVertexArray"),
		glLightModelf:                              getProcAddr("glLightModelf"),
		glLightModelfv:                             getProcAddr("glLightModelfv"),
		glLightModeli:                              getProcAddr("glLightModeli"),
		glLightModeliv:                             getProcAddr("glLightModeliv"),
		glLightf:                                   getProcAddr("glLightf"),
		glLightfv:                                  getProcAddr("glLightfv"),
		glLighti:                                   getProcAddr("glLighti"),
		glLightiv:                                  getProcAddr("glLightiv"),
		glLineStipple:                              getProcAddr("glLineStipple"),
		glLineWidth:                                getProcAddr("glLineWidth"),
		glLinkProgram:                              getProcAddr("glLinkProgram"),
		glListBase:                                 getProcAddr("glListBase"),
		glLoadIdentity:                             getProcAddr("glLoadIdentity"),
		glLoadMatrixd:                              getProcAddr("glLoadMatrixd"),
		glLoadMatrixf:                              getProcAddr("glLoadMatrixf"),
		glLoadName:                                 getProcAddr("glLoadName"),
		glLoadTransposeMatrixd:                     getProcAddr("glLoadTransposeMatrixd"),
		glLoadTransposeMatrixf:                     getProcAddr("glLoadTransposeMatrixf"),
		glLogicOp:                                  getProcAddr("glLogicOp"),
		glMap1d:                                    getProcAddr("glMap1d"),
		glMap1f:                                    getProcAddr("glMap1f"),
		glMap2d:                                    getProcAddr("glMap2d"),
		glMap2f:                                    getProcAddr("glMap2f"),
		glMapBuffer:                                getProcAddr("glMapBuffer"),
		glMapBufferRange:                           getProcAddr("glMapBufferRange"),
		glMapGrid1d:                                getProcAddr("glMapGrid1d"),
		glMapGrid1f:                                getProcAddr("glMapGrid1f"),
		glMapGrid2d:                                getProcAddr("glMapGrid2d"),
		glMapGrid2f:                                getProcAddr("glMapGrid2f"),
		glMapNamedBuffer:                           getProcAddr("glMapNamedBuffer"),
		glMapNamedBufferRange:                      getProcAddr("glMapNamedBufferRange"),
		glMaterialf:                                getProcAddr("glMaterialf"),
		glMaterialfv:                               getProcAddr("glMaterialfv"),
		glMateriali:                                getProcAddr("glMateriali"),
		glMaterialiv:                               getProcAddr("glMaterialiv"),
		glMatrixMode:                               getProcAddr("glMatrixMode"),
		glMemoryBarrier:                            getProcAddr("glMemoryBarrier"),
		glMemoryBarrierByRegion:                    getProcAddr("glMemoryBarrierByRegion"),
		glMinSampleShading:                         getProcAddr("glMinSampleShading"),
		glMultMatrixd:                              getProcAddr("glMultMatrixd"),
		glMultMatrixf:                              getProcAddr("glMultMatrixf"),
		glMultTransposeMatrixd:                     getProcAddr("glMultTransposeMatrixd"),
		glMultTransposeMatrixf:                     getProcAddr("glMultTransposeMatrixf"),
		glMultiDrawArrays:                          getProcAddr("glMultiDrawArrays"),
		glMultiDrawArraysIndirect:                  getProcAddr("glMultiDrawArraysIndirect"),
		glMultiDrawArraysIndirectCount:             getProcAddr("glMultiDrawArraysIndirectCount"),
		glMultiDrawElements:                        getProcAddr("glMultiDrawElements"),
		glMultiDrawElementsBaseVertex:              getProcAddr("glMultiDrawElementsBaseVertex"),
		glMultiDrawElementsIndirect:                getProcAddr("glMultiDrawElementsIndirect"),
		glMultiDrawElementsIndirectCount:           getProcAddr("glMultiDrawElementsIndirectCount"),
		glMultiTexCoord1d:                          getProcAddr("glMultiTexCoord1d"),
		glMultiTexCoord1dv:                         getProcAddr("glMultiTexCoord1dv"),
		glMultiTexCoord1f:                          getProcAddr("glMultiTexCoord1f"),
		glMultiTexCoord1fv:                         getProcAddr("glMultiTexCoord1fv"),
		glMultiTexCoord1i:                          getProcAddr("glMultiTexCoord1i"),
		glMultiTexCoord1iv:                         getProcAddr("glMultiTexCoord1iv"),
		glMultiTexCoord1s:                          getProcAddr("glMultiTexCoord1s"),
		glMultiTexCoord1sv:                         getProcAddr("glMultiTexCoord1sv"),
		glMultiTexCoord2d:                          getProcAddr("glMultiTexCoord2d"),
		glMultiTexCoord2dv:                         getProcAddr("glMultiTexCoord2dv"),
		glMultiTexCoord2f:                          getProcAddr("glMultiTexCoord2f"),
		glMultiTexCoord2fv:                         getProcAddr("glMultiTexCoord2fv"),
		glMultiTexCoord2i:                          getProcAddr("glMultiTexCoord2i"),
		glMultiTexCoord2iv:                         getProcAddr("glMultiTexCoord2iv"),
		glMultiTexCoord2s:                          getProcAddr("glMultiTexCoord2s"),
		glMultiTexCoord2sv:                         getProcAddr("glMultiTexCoord2sv"),
		glMultiTexCoord3d:                          getProcAddr("glMultiTexCoord3d"),
		glMultiTexCoord3dv:                         getProcAddr("glMultiTexCoord3dv"),
		glMultiTexCoord3f:                          getProcAddr("glMultiTexCoord3f"),
		glMultiTexCoord3fv:                         getProcAddr("glMultiTexCoord3fv"),
		glMultiTexCoord3i:                          getProcAddr("glMultiTexCoord3i"),
		glMultiTexCoord3iv:                         getProcAddr("glMultiTexCoord3iv"),
		glMultiTexCoord3s:                          getProcAddr("glMultiTexCoord3s"),
		glMultiTexCoord3sv:                         getProcAddr("glMultiTexCoord3sv"),
		glMultiTexCoord4d:                          getProcAddr("glMultiTexCoord4d"),
		glMultiTexCoord4dv:                         getProcAddr("glMultiTexCoord4dv"),
		glMultiTexCoord4f:                          getProcAddr("glMultiTexCoord4f"),
		glMultiTexCoord4fv:                         getProcAddr("glMultiTexCoord4fv"),
		glMultiTexCoord4i:                          getProcAddr("glMultiTexCoord4i"),
		glMultiTexCoord4iv:                         getProcAddr("glMultiTexCoord4iv"),
		glMultiTexCoord4s:                          getProcAddr("glMultiTexCoord4s"),
		glMultiTexCoord4sv:                         getProcAddr("glMultiTexCoord4sv"),
		glMultiTexCoordP1ui:                        getProcAddr("glMultiTexCoordP1ui"),
		glMultiTexCoordP1uiv:                       getProcAddr("glMultiTexCoordP1uiv"),
		glMultiTexCoordP2ui:                        getProcAddr("glMultiTexCoordP2ui"),
		glMultiTexCoordP2uiv:                       getProcAddr("glMultiTexCoordP2uiv"),
		glMultiTexCoordP3ui:                        getProcAddr("glMultiTexCoordP3ui"),
		glMultiTexCoordP3uiv:                       getProcAddr("glMultiTexCoordP3uiv"),
		glMultiTexCoordP4ui:                        getProcAddr("glMultiTexCoordP4ui"),
		glMultiTexCoordP4uiv:                       getProcAddr("glMultiTexCoordP4uiv"),
		glNamedBufferData:                          getProcAddr("glNamedBufferData"),
		glNamedBufferStorage:                       getProcAddr("glNamedBufferStorage"),
		glNamedBufferSubData:                       getProcAddr("glNamedBufferSubData"),
		glNamedFramebufferDrawBuffer:               getProcAddr("glNamedFramebufferDrawBuffer"),
		glNamedFramebufferDrawBuffers:              getProcAddr("glNamedFramebufferDrawBuffers"),
		glNamedFramebufferParameteri:               getProcAddr("glNamedFramebufferParameteri"),
		glNamedFramebufferReadBuffer:               getProcAddr("glNamedFramebufferReadBuffer"),
		glNamedFramebufferRenderbuffer:             getProcAddr("glNamedFramebufferRenderbuffer"),
		glNamedFramebufferTexture:                  getProcAddr("glNamedFramebufferTexture"),
		glNamedFramebufferTextureLayer:             getProcAddr("glNamedFramebufferTextureLayer"),
		glNamedRenderbufferStorage:                 getProcAddr("glNamedRenderbufferStorage"),
		glNamedRenderbufferStorageMultisample:      getProcAddr("glNamedRenderbufferStorageMultisample"),
		glNewList:                                  getProcAddr("glNewList"),
		glNormal3b:                                 getProcAddr("glNormal3b"),
		glNormal3bv:                                getProcAddr("glNormal3bv"),
		glNormal3d:                                 getProcAddr("glNormal3d"),
		glNormal3dv:                                getProcAddr("glNormal3dv"),
		glNormal3f:                                 getProcAddr("glNormal3f"),
		glNormal3fv:                                getProcAddr("glNormal3fv"),
		glNormal3i:                                 getProcAddr("glNormal3i"),
		glNormal3iv:                                getProcAddr("glNormal3iv"),
		glNormal3s:                                 getProcAddr("glNormal3s"),
		glNormal3sv:                                getProcAddr("glNormal3sv"),
		glNormalP3ui:                               getProcAddr("glNormalP3ui"),
		glNormalP3uiv:                              getProcAddr("glNormalP3uiv"),
		glNormalPointer:                            getProcAddr("glNormalPointer"),
		glObjectLabel:                              getProcAddr("glObjectLabel"),
		glObjectPtrLabel:                           getProcAddr("glObjectPtrLabel"),
		glOrtho:                                    getProcAddr("glOrtho"),
		glPassThrough:                              getProcAddr("glPassThrough"),
		glPatchParameterfv:                         getProcAddr("glPatchParameterfv"),
		glPatchParameteri:                          getProcAddr("glPatchParameteri"),
		glPauseTransformFeedback:                   getProcAddr("glPauseTransformFeedback"),
		glPixelMapfv:                               getProcAddr("glPixelMapfv"),
		glPixelMapuiv:                              getProcAddr("glPixelMapuiv"),
		glPixelMapusv:                              getProcAddr("glPixelMapusv"),
		glPixelStoref:                              getProcAddr("glPixelStoref"),
		glPixelStorei:                              getProcAddr("glPixelStorei"),
		glPixelTransferf:                           getProcAddr("glPixelTransferf"),
		glPixelTransferi:                           getProcAddr("glPixelTransferi"),
		glPixelZoom:                                getProcAddr("glPixelZoom"),
		glPointParameterf:                          getProcAddr("glPointParameterf"),
		glPointParameterfv:                         getProcAddr("glPointParameterfv"),
		glPointParameteri:                          getProcAddr("glPointParameteri"),
		glPointParameteriv:                         getProcAddr("glPointParameteriv"),
		glPointSize:                                getProcAddr("glPointSize"),
		glPolygonMode:                              getProcAddr("glPolygonMode"),
		glPolygonOffset:                            getProcAddr("glPolygonOffset"),
		glPolygonOffsetClamp:                       getProcAddr("glPolygonOffsetClamp"),
		glPolygonStipple:                           getProcAddr("glPolygonStipple"),
		glPopAttrib:                                getProcAddr("glPopAttrib"),
		glPopClientAttrib:                          getProcAddr("glPopClientAttrib"),
		glPopDebugGroup:                            getProcAddr("glPopDebugGroup"),
		glPopMatrix:                                getProcAddr("glPopMatrix"),
		glPopName:                                  getProcAddr("glPopName"),
		glPrimitiveRestartIndex:                    getProcAddr("glPrimitiveRestartIndex"),
		glPrioritizeTextures:                       getProcAddr("glPrioritizeTextures"),
		glProgramBinary:                            getProcAddr("glProgramBinary"),
		glProgramParameteri:                        getProcAddr("glProgramParameteri"),
		glProgramUniform1d:                         getProcAddr("glProgramUniform1d"),
		glProgramUniform1dv:                        getProcAddr("glProgramUniform1dv"),
		glProgramUniform1f:                         getProcAddr("glProgramUniform1f"),
		glProgramUniform1fv:                        getProcAddr("glProgramUniform1fv"),
		glProgramUniform1i:                         getProcAddr("glProgramUniform1i"),
		glProgramUniform1iv:                        getProcAddr("glProgramUniform1iv"),
		glProgramUniform1ui:                        getProcAddr("glProgramUniform1ui"),
		glProgramUniform1uiv:                       getProcAddr("glProgramUniform1uiv"),
		glProgramUniform2d:                         getProcAddr("glProgramUniform2d"),
		glProgramUniform2dv:                        getProcAddr("glProgramUniform2dv"),
		glProgramUniform2f:                         getProcAddr("glProgramUniform2f"),
		glProgramUniform2fv:                        getProcAddr("glProgramUniform2fv"),
		glProgramUniform2i:                         getProcAddr("glProgramUniform2i"),
		glProgramUniform2iv:                        getProcAddr("glProgramUniform2iv"),
		glProgramUniform2ui:                        getProcAddr("glProgramUniform2ui"),
		glProgramUniform2uiv:                       getProcAddr("glProgramUniform2uiv"),
		glProgramUniform3d:                         getProcAddr("glProgramUniform3d"),
		glProgramUniform3dv:                        getProcAddr("glProgramUniform3dv"),
		glProgramUniform3f:                         getProcAddr("glProgramUniform3f"),
		glProgramUniform3fv:                        getProcAddr("glProgramUniform3fv"),
		glProgramUniform3i:                         getProcAddr("glProgramUniform3i"),
		glProgramUniform3iv:                        getProcAddr("glProgramUniform3iv"),
		glProgramUniform3ui:                        getProcAddr("glProgramUniform3ui"),
		glProgramUniform3uiv:                       getProcAddr("glProgramUniform3uiv"),
		glProgramUniform4d:                         getProcAddr("glProgramUniform4d"),
		glProgramUniform4dv:                        getProcAddr("glProgramUniform4dv"),
		glProgramUniform4f:                         getProcAddr("glProgramUniform4f"),
		glProgramUniform4fv:                        getProcAddr("glProgramUniform4fv"),
		glProgramUniform4i:                         getProcAddr("glProgramUniform4i"),
		glProgramUniform4iv:                        getProcAddr("glProgramUniform4iv"),
		glProgramUniform4ui:                        getProcAddr("glProgramUniform4ui"),
		glProgramUniform4uiv:                       getProcAddr("glProgramUniform4uiv"),
		glProgramUniformMatrix2dv:                  getProcAddr("glProgramUniformMatrix2dv"),
		glProgramUniformMatrix2fv:                  getProcAddr("glProgramUniformMatrix2fv"),
		glProgramUniformMatrix2x3dv:                getProcAddr("glProgramUniformMatrix2x3dv"),
		glProgramUniformMatrix2x3fv:                getProcAddr("glProgramUniformMatrix2x3fv"),
		glProgramUniformMatrix2x4dv:                getProcAddr("glProgramUniformMatrix2x4dv"),
		glProgramUniformMatrix2x4fv:                getProcAddr("glProgramUniformMatrix2x4fv"),
		glProgramUniformMatrix3dv:                  getProcAddr("glProgramUniformMatrix3dv"),
		glProgramUniformMatrix3fv:                  getProcAddr("glProgramUniformMatrix3fv"),
		glProgramUniformMatrix3x2dv:                getProcAddr("glProgramUniformMatrix3x2dv"),
		glProgramUniformMatrix3x2fv:                getProcAddr("glProgramUniformMatrix3x2fv"),
		glProgramUniformMatrix3x4dv:                getProcAddr("glProgramUniformMatrix3x4dv"),
		glProgramUniformMatrix3x4fv:                getProcAddr("glProgramUniformMatrix3x4fv"),
		glProgramUniformMatrix4dv:                  getProcAddr("glProgramUniformMatrix4dv"),
		glProgramUniformMatrix4fv:                  getProcAddr("glProgramUniformMatrix4fv"),
		glProgramUniformMatrix4x2dv:                getProcAddr("glProgramUniformMatrix4x2dv"),
		glProgramUniformMatrix4x2fv:                getProcAddr("glProgramUniformMatrix4x2fv"),
		glProgramUniformMatrix4x3dv:                getProcAddr("glProgramUniformMatrix4x3dv"),
		glProgramUniformMatrix4x3fv:                getProcAddr("glProgramUniformMatrix4x3fv"),
		glProvokingVertex:                          getProcAddr("glProvokingVertex"),
		glPushAttrib:                               getProcAddr("glPushAttrib"),
		glPushClientAttrib:                         getProcAddr("glPushClientAttrib"),
		glPushDebugGroup:                           getProcAddr("glPushDebugGroup"),
		glPushMatrix:                               getProcAddr("glPushMatrix"),
		glPushName:                                 getProcAddr("glPushName"),
		glQueryCounter:                             getProcAddr("glQueryCounter"),
		glRasterPos2d:                              getProcAddr("glRasterPos2d"),
		glRasterPos2dv:                             getProcAddr("glRasterPos2dv"),
		glRasterPos2f:                              getProcAddr("glRasterPos2f"),
		glRasterPos2fv:                             getProcAddr("glRasterPos2fv"),
		glRasterPos2i:                              getProcAddr("glRasterPos2i"),
		glRasterPos2iv:                             getProcAddr("glRasterPos2iv"),
		glRasterPos2s:                              getProcAddr("glRasterPos2s"),
		glRasterPos2sv:                             getProcAddr("glRasterPos2sv"),
		glRasterPos3d:                              getProcAddr("glRasterPos3d"),
		glRasterPos3dv:                             getProcAddr("glRasterPos3dv"),
		glRasterPos3f:                              getProcAddr("glRasterPos3f"),
		glRasterPos3fv:                             getProcAddr("glRasterPos3fv"),
		glRasterPos3i:                              getProcAddr("glRasterPos3i"),
		glRasterPos3iv:                             getProcAddr("glRasterPos3iv"),
		glRasterPos3s:                              getProcAddr("glRasterPos3s"),
		glRasterPos3sv:                             getProcAddr("glRasterPos3sv"),
		glRasterPos4d:                              getProcAddr("glRasterPos4d"),
		glRasterPos4dv:                             getProcAddr("glRasterPos4dv"),
		glRasterPos4f:                              getProcAddr("glRasterPos4f"),
		glRasterPos4fv:                             getProcAddr("glRasterPos4fv"),
		glRasterPos4i:                              getProcAddr("glRasterPos4i"),
		glRasterPos4iv:                             getProcAddr("glRasterPos4iv"),
		glRasterPos4s:                              getProcAddr("glRasterPos4s"),
		glRasterPos4sv:                             getProcAddr("glRasterPos4sv"),
		glReadBuffer:                               getProcAddr("glReadBuffer"),
		glReadPixels:                               getProcAddr("glReadPixels"),
		glReadnPixels:                              getProcAddr("glReadnPixels"),
		glRectd:                                    getProcAddr("glRectd"),
		glRectdv:                                   getProcAddr("glRectdv"),
		glRectf:                                    getProcAddr("glRectf"),
		glRectfv:                                   getProcAddr("glRectfv"),
		glRecti:                                    getProcAddr("glRecti"),
		glRectiv:                                   getProcAddr("glRectiv"),
		glRects:                                    getProcAddr("glRects"),
		glRectsv:                                   getProcAddr("glRectsv"),
		glReleaseShaderCompiler:                    getProcAddr("glReleaseShaderCompiler"),
		glRenderMode:                               getProcAddr("glRenderMode"),
		glRenderbufferStorage:                      getProcAddr("glRenderbufferStorage"),
		glRenderbufferStorageMultisample:           getProcAddr("glRenderbufferStorageMultisample"),
		glResumeTransformFeedback:                  getProcAddr("glResumeTransformFeedback"),
		glRotated:                                  getProcAddr("glRotated"),
		glRotatef:                                  getProcAddr("glRotatef"),
		glSampleCoverage:                           getProcAddr("glSampleCoverage"),
		glSampleMaski:                              getProcAddr("glSampleMaski"),
		glSamplerParameterIiv:                      getProcAddr("glSamplerParameterIiv"),
		glSamplerParameterIuiv:                     getProcAddr("glSamplerParameterIuiv"),
		glSamplerParameterf:                        getProcAddr("glSamplerParameterf"),
		glSamplerParameterfv:                       getProcAddr("glSamplerParameterfv"),
		glSamplerParameteri:                        getProcAddr("glSamplerParameteri"),
		glSamplerParameteriv:                       getProcAddr("glSamplerParameteriv"),
		glScaled:                                   getProcAddr("glScaled"),
		glScalef:                                   getProcAddr("glScalef"),
		glScissor:                                  getProcAddr("glScissor"),
		glScissorArrayv:                            getProcAddr("glScissorArrayv"),
		glScissorIndexed:                           getProcAddr("glScissorIndexed"),
		glScissorIndexedv:                          getProcAddr("glScissorIndexedv"),
		glSecondaryColor3b:                         getProcAddr("glSecondaryColor3b"),
		glSecondaryColor3bv:                        getProcAddr("glSecondaryColor3bv"),
		glSecondaryColor3d:                         getProcAddr("glSecondaryColor3d"),
		glSecondaryColor3dv:                        getProcAddr("glSecondaryColor3dv"),
		glSecondaryColor3f:                         getProcAddr("glSecondaryColor3f"),
		glSecondaryColor3fv:                        getProcAddr("glSecondaryColor3fv"),
		glSecondaryColor3i:                         getProcAddr("glSecondaryColor3i"),
		glSecondaryColor3iv:                        getProcAddr("glSecondaryColor3iv"),
		glSecondaryColor3s:                         getProcAddr("glSecondaryColor3s"),
		glSecondaryColor3sv:                        getProcAddr("glSecondaryColor3sv"),
		glSecondaryColor3ub:                        getProcAddr("glSecondaryColor3ub"),
		glSecondaryColor3ubv:                       getProcAddr("glSecondaryColor3ubv"),
		glSecondaryColor3ui:                        getProcAddr("glSecondaryColor3ui"),
		glSecondaryColor3uiv:                       getProcAddr("glSecondaryColor3uiv"),
		glSecondaryColor3us:                        getProcAddr("glSecondaryColor3us"),
		glSecondaryColor3usv:                       getProcAddr("glSecondaryColor3usv"),
		glSecondaryColorP3ui:                       getProcAddr("glSecondaryColorP3ui"),
		glSecondaryColorP3uiv:                      getProcAddr("glSecondaryColorP3uiv"),
		glSecondaryColorPointer:                    getProcAddr("glSecondaryColorPointer"),
		glSelectBuffer:                             getProcAddr("glSelectBuffer"),
		glShadeModel:                               getProcAddr("glShadeModel"),
		glShaderBinary:                             getProcAddr("glShaderBinary"),
		glShaderSource:                             getProcAddr("glShaderSource"),
		glShaderStorageBlockBinding:                getProcAddr("glShaderStorageBlockBinding"),
		glSpecializeShader:                         getProcAddr("glSpecializeShader"),
		glStencilFunc:                              getProcAddr("glStencilFunc"),
		glStencilFuncSeparate:                      getProcAddr("glStencilFuncSeparate"),
		glStencilMask:                              getProcAddr("glStencilMask"),
		glStencilMaskSeparate:                      getProcAddr("glStencilMaskSeparate"),
		glStencilOp:                                getProcAddr("glStencilOp"),
		glStencilOpSeparate:                        getProcAddr("glStencilOpSeparate"),
		glTexBuffer:                                getProcAddr("glTexBuffer"),
		glTexBufferRange:                           getProcAddr("glTexBufferRange"),
		glTexCoord1d:                               getProcAddr("glTexCoord1d"),
		glTexCoord1dv:                              getProcAddr("glTexCoord1dv"),
		glTexCoord1f:                               getProcAddr("glTexCoord1f"),
		glTexCoord1fv:                              getProcAddr("glTexCoord1fv"),
		glTexCoord1i:                               getProcAddr("glTexCoord1i"),
		glTexCoord1iv:                              getProcAddr("glTexCoord1iv"),
		glTexCoord1s:                               getProcAddr("glTexCoord1s"),
		glTexCoord1sv:                              getProcAddr("glTexCoord1sv"),
		glTexCoord2d:                               getProcAddr("glTexCoord2d"),
		glTexCoord2dv:                              getProcAddr("glTexCoord2dv"),
		glTexCoord2f:                               getProcAddr("glTexCoord2f"),
		glTexCoord2fv:                              getProcAddr("glTexCoord2fv"),
		glTexCoord2i:                               getProcAddr("glTexCoord2i"),
		glTexCoord2iv:                              getProcAddr("glTexCoord2iv"),
		glTexCoord2s:                               getProcAddr("glTexCoord2s"),
		glTexCoord2sv:                              getProcAddr("glTexCoord2sv"),
		glTexCoord3d:                               getProcAddr("glTexCoord3d"),
		glTexCoord3dv:                              getProcAddr("glTexCoord3dv"),
		glTexCoord3f:                               getProcAddr("glTexCoord3f"),
		glTexCoord3fv:                              getProcAddr("glTexCoord3fv"),
		glTexCoord3i:                               getProcAddr("glTexCoord3i"),
		glTexCoord3iv:                              getProcAddr("glTexCoord3iv"),
		glTexCoord3s:                               getProcAddr("glTexCoord3s"),
		glTexCoord3sv:                              getProcAddr("glTexCoord3sv"),
		glTexCoord4d:                               getProcAddr("glTexCoord4d"),
		glTexCoord4dv:                              getProcAddr("glTexCoord4dv"),
		glTexCoord4f:                               getProcAddr("glTexCoord4f"),
		glTexCoord4fv:                              getProcAddr("glTexCoord4fv"),
		glTexCoord4i:                               getProcAddr("glTexCoord4i"),
		glTexCoord4iv:                              getProcAddr("glTexCoord4iv"),
		glTexCoord4s:                               getProcAddr("glTexCoord4s"),
		glTexCoord4sv:                              getProcAddr("glTexCoord4sv"),
		glTexCoordP1ui:                             getProcAddr("glTexCoordP1ui"),
		glTexCoordP1uiv:                            getProcAddr("glTexCoordP1uiv"),
		glTexCoordP2ui:                             getProcAddr("glTexCoordP2ui"),
		glTexCoordP2uiv:                            getProcAddr("glTexCoordP2uiv"),
		glTexCoordP3ui:                             getProcAddr("glTexCoordP3ui"),
		glTexCoordP3uiv:                            getProcAddr("glTexCoordP3uiv"),
		glTexCoordP4ui:                             getProcAddr("glTexCoordP4ui"),
		glTexCoordP4uiv:                            getProcAddr("glTexCoordP4uiv"),
		glTexCoordPointer:                          getProcAddr("glTexCoordPointer"),
		glTexEnvf:                                  getProcAddr("glTexEnvf"),
		glTexEnvfv:                                 getProcAddr("glTexEnvfv"),
		glTexEnvi:                                  getProcAddr("glTexEnvi"),
		glTexEnviv:                                 getProcAddr("glTexEnviv"),
		glTexGend:                                  getProcAddr("glTexGend"),
		glTexGendv:                                 getProcAddr("glTexGendv"),
		glTexGenf:                                  getProcAddr("glTexGenf"),
		glTexGenfv:                                 getProcAddr("glTexGenfv"),
		glTexGeni:                                  getProcAddr("glTexGeni"),
		glTexGeniv:                                 getProcAddr("glTexGeniv"),
		glTexImage1D:                               getProcAddr("glTexImage1D"),
		glTexImage2D:                               getProcAddr("glTexImage2D"),
		glTexImage2DMultisample:                    getProcAddr("glTexImage2DMultisample"),
		glTexImage3D:                               getProcAddr("glTexImage3D"),
		glTexImage3DMultisample:                    getProcAddr("glTexImage3DMultisample"),
		glTexParameterIiv:                          getProcAddr("glTexParameterIiv"),
		glTexParameterIuiv:                         getProcAddr("glTexParameterIuiv"),
		glTexParameterf:                            getProcAddr("glTexParameterf"),
		glTexParameterfv:                           getProcAddr("glTexParameterfv"),
		glTexParameteri:                            getProcAddr("glTexParameteri"),
		glTexParameteriv:                           getProcAddr("glTexParameteriv"),
		glTexStorage1D:                             getProcAddr("glTexStorage1D"),
		glTexStorage2D:                             getProcAddr("glTexStorage2D"),
		glTexStorage2DMultisample:                  getProcAddr("glTexStorage2DMultisample"),
		glTexStorage3D:                             getProcAddr("glTexStorage3D"),
		glTexStorage3DMultisample:                  getProcAddr("glTexStorage3DMultisample"),
		glTexSubImage1D:                            getProcAddr("glTexSubImage1D"),
		glTexSubImage2D:                            getProcAddr("glTexSubImage2D"),
		glTexSubImage3D:                            getProcAddr("glTexSubImage3D"),
		glTextureBarrier:                           getProcAddr("glTextureBarrier"),
		glTextureBuffer:                            getProcAddr("glTextureBuffer"),
		glTextureBufferRange:                       getProcAddr("glTextureBufferRange"),
		glTextureParameterIiv:                      getProcAddr("glTextureParameterIiv"),
		glTextureParameterIuiv:                     getProcAddr("glTextureParameterIuiv"),
		glTextureParameterf:                        getProcAddr("glTextureParameterf"),
		glTextureParameterfv:                       getProcAddr("glTextureParameterfv"),
		glTextureParameteri:                        getProcAddr("glTextureParameteri"),
		glTextureParameteriv:                       getProcAddr("glTextureParameteriv"),
		glTextureStorage1D:                         getProcAddr("glTextureStorage1D"),
		glTextureStorage2D:                         getProcAddr("glTextureStorage2D"),
		glTextureStorage2DMultisample:              getProcAddr("glTextureStorage2DMultisample"),
		glTextureStorage3D:                         getProcAddr("glTextureStorage3D"),
		glTextureStorage3DMultisample:              getProcAddr("glTextureStorage3DMultisample"),
		glTextureSubImage1D:                        getProcAddr("glTextureSubImage1D"),
		glTextureSubImage2D:                        getProcAddr("glTextureSubImage2D"),
		glTextureSubImage3D:                        getProcAddr("glTextureSubImage3D"),
		glTextureView:                              getProcAddr("glTextureView"),
		glTransformFeedbackBufferBase:              getProcAddr("glTransformFeedbackBufferBase"),
		glTransformFeedbackBufferRange:             getProcAddr("glTransformFeedbackBufferRange"),
		glTransformFeedbackVaryings:                getProcAddr("glTransformFeedbackVaryings"),
		glTranslated:                               getProcAddr("glTranslated"),
		glTranslatef:                               getProcAddr("glTranslatef"),
		glUniform1d:                                getProcAddr("glUniform1d"),
		glUniform1dv:                               getProcAddr("glUniform1dv"),
		glUniform1f:                                getProcAddr("glUniform1f"),
		glUniform1fv:                               getProcAddr("glUniform1fv"),
		glUniform1i:                                getProcAddr("glUniform1i"),
		glUniform1iv:                               getProcAddr("glUniform1iv"),
		glUniform1ui:                               getProcAddr("glUniform1ui"),
		glUniform1uiv:                              getProcAddr("glUniform1uiv"),
		glUniform2d:                                getProcAddr("glUniform2d"),
		glUniform2dv:                               getProcAddr("glUniform2dv"),
		glUniform2f:                                getProcAddr("glUniform2f"),
		glUniform2fv:                               getProcAddr("glUniform2fv"),
		glUniform2i:                                getProcAddr("glUniform2i"),
		glUniform2iv:                               getProcAddr("glUniform2iv"),
		glUniform2ui:                               getProcAddr("glUniform2ui"),
		glUniform2uiv:                              getProcAddr("glUniform2uiv"),
		glUniform3d:                                getProcAddr("glUniform3d"),
		glUniform3dv:                               getProcAddr("glUniform3dv"),
		glUniform3f:                                getProcAddr("glUniform3f"),
		glUniform3fv:                               getProcAddr("glUniform3fv"),
		glUniform3i:                                getProcAddr("glUniform3i"),
		glUniform3iv:                               getProcAddr("glUniform3iv"),
		glUniform3ui:                               getProcAddr("glUniform3ui"),
		glUniform3uiv:                              getProcAddr("glUniform3uiv"),
		glUniform4d:                                getProcAddr("glUniform4d"),
		glUniform4dv:                               getProcAddr("glUniform4dv"),
		glUniform4f:                                getProcAddr("glUniform4f"),
		glUniform4fv:                               getProcAddr("glUniform4fv"),
		glUniform4i:                                getProcAddr("glUniform4i"),
		glUniform4iv:                               getProcAddr("glUniform4iv"),
		glUniform4ui:                               getProcAddr("glUniform4ui"),
		glUniform4uiv:                              getProcAddr("glUniform4uiv"),
		glUniformBlockBinding:                      getProcAddr("glUniformBlockBinding"),
		glUniformMatrix2dv:                         getProcAddr("glUniformMatrix2dv"),
		glUniformMatrix2fv:                         getProcAddr("glUniformMatrix2fv"),
		glUniformMatrix2x3dv:                       getProcAddr("glUniformMatrix2x3dv"),
		glUniformMatrix2x3fv:                       getProcAddr("glUniformMatrix2x3fv"),
		glUniformMatrix2x4dv:                       getProcAddr("glUniformMatrix2x4dv"),
		glUniformMatrix2x4fv:                       getProcAddr("glUniformMatrix2x4fv"),
		glUniformMatrix3dv:                         getProcAddr("glUniformMatrix3dv"),
		glUniformMatrix3fv:                         getProcAddr("glUniformMatrix3fv"),
		glUniformMatrix3x2dv:                       getProcAddr("glUniformMatrix3x2dv"),
		glUniformMatrix3x2fv:                       getProcAddr("glUniformMatrix3x2fv"),
		glUniformMatrix3x4dv:                       getProcAddr("glUniformMatrix3x4dv"),
		glUniformMatrix3x4fv:                       getProcAddr("glUniformMatrix3x4fv"),
		glUniformMatrix4dv:                         getProcAddr("glUniformMatrix4dv"),
		glUniformMatrix4fv:                         getProcAddr("glUniformMatrix4fv"),
		glUniformMatrix4x2dv:                       getProcAddr("glUniformMatrix4x2dv"),
		glUniformMatrix4x2fv:                       getProcAddr("glUniformMatrix4x2fv"),
		glUniformMatrix4x3dv:                       getProcAddr("glUniformMatrix4x3dv"),
		glUniformMatrix4x3fv:                       getProcAddr("glUniformMatrix4x3fv"),
		glUniformSubroutinesuiv:                    getProcAddr("glUniformSubroutinesuiv"),
		glUnmapBuffer:                              getProcAddr("glUnmapBuffer"),
		glUnmapNamedBuffer:                         getProcAddr("glUnmapNamedBuffer"),
		glUseProgram:                               getProcAddr("glUseProgram"),
		glUseProgramStages:                         getProcAddr("glUseProgramStages"),
		glValidateProgram:                          getProcAddr("glValidateProgram"),
		glValidateProgramPipeline:                  getProcAddr("glValidateProgramPipeline"),
		glVertex2d:                                 getProcAddr("glVertex2d"),
		glVertex2dv:                                getProcAddr("glVertex2dv"),
		glVertex2f:                                 getProcAddr("glVertex2f"),
		glVertex2fv:                                getProcAddr("glVertex2fv"),
		glVertex2i:                                 getProcAddr("glVertex2i"),
		glVertex2iv:                                getProcAddr("glVertex2iv"),
		glVertex2s:                                 getProcAddr("glVertex2s"),
		glVertex2sv:                                getProcAddr("glVertex2sv"),
		glVertex3d:                                 getProcAddr("glVertex3d"),
		glVertex3dv:                                getProcAddr("glVertex3dv"),
		glVertex3f:                                 getProcAddr("glVertex3f"),
		glVertex3fv:                                getProcAddr("glVertex3fv"),
		glVertex3i:                                 getProcAddr("glVertex3i"),
		glVertex3iv:                                getProcAddr("glVertex3iv"),
		glVertex3s:                                 getProcAddr("glVertex3s"),
		glVertex3sv:                                getProcAddr("glVertex3sv"),
		glVertex4d:                                 getProcAddr("glVertex4d"),
		glVertex4dv:                                getProcAddr("glVertex4dv"),
		glVertex4f:                                 getProcAddr("glVertex4f"),
		glVertex4fv:                                getProcAddr("glVertex4fv"),
		glVertex4i:                                 getProcAddr("glVertex4i"),
		glVertex4iv:                                getProcAddr("glVertex4iv"),
		glVertex4s:                                 getProcAddr("glVertex4s"),
		glVertex4sv:                                getProcAddr("glVertex4sv"),
		glVertexArrayAttribBinding:                 getProcAddr("glVertexArrayAttribBinding"),
		glVertexArrayAttribFormat:                  getProcAddr("glVertexArrayAttribFormat"),
		glVertexArrayAttribIFormat:                 getProcAddr("glVertexArrayAttribIFormat"),
		glVertexArrayAttribLFormat:                 getProcAddr("glVertexArrayAttribLFormat"),
		glVertexArrayBindingDivisor:                getProcAddr("glVertexArrayBindingDivisor"),
		glVertexArrayElementBuffer:                 getProcAddr("glVertexArrayElementBuffer"),
		glVertexArrayVertexBuffer:                  getProcAddr("glVertexArrayVertexBuffer"),
		glVertexArrayVertexBuffers:                 getProcAddr("glVertexArrayVertexBuffers"),
		glVertexAttrib1d:                           getProcAddr("glVertexAttrib1d"),
		glVertexAttrib1dv:                          getProcAddr("glVertexAttrib1dv"),
		glVertexAttrib1f:                           getProcAddr("glVertexAttrib1f"),
		glVertexAttrib1fv:                          getProcAddr("glVertexAttrib1fv"),
		glVertexAttrib1s:                           getProcAddr("glVertexAttrib1s"),
		glVertexAttrib1sv:                          getProcAddr("glVertexAttrib1sv"),
		glVertexAttrib2d:                           getProcAddr("glVertexAttrib2d"),
		glVertexAttrib2dv:                          getProcAddr("glVertexAttrib2dv"),
		glVertexAttrib2f:                           getProcAddr("glVertexAttrib2f"),
		glVertexAttrib2fv:                          getProcAddr("glVertexAttrib2fv"),
		glVertexAttrib2s:                           getProcAddr("glVertexAttrib2s"),
		glVertexAttrib2sv:                          getProcAddr("glVertexAttrib2sv"),
		glVertexAttrib3d:                           getProcAddr("glVertexAttrib3d"),
		glVertexAttrib3dv:                          getProcAddr("glVertexAttrib3dv"),
		glVertexAttrib3f:                           getProcAddr("glVertexAttrib3f"),
		glVertexAttrib3fv:                          getProcAddr("glVertexAttrib3fv"),
		glVertexAttrib3s:                           getProcAddr("glVertexAttrib3s"),
		glVertexAttrib3sv:                          getProcAddr("glVertexAttrib3sv"),
		glVertexAttrib4Nbv:                         getProcAddr("glVertexAttrib4Nbv"),
		glVertexAttrib4Niv:                         getProcAddr("glVertexAttrib4Niv"),
		glVertexAttrib4Nsv:                         getProcAddr("glVertexAttrib4Nsv"),
		glVertexAttrib4Nub:                         getProcAddr("glVertexAttrib4Nub"),
		glVertexAttrib4Nubv:                        getProcAddr("glVertexAttrib4Nubv"),
		glVertexAttrib4Nuiv:                        getProcAddr("glVertexAttrib4Nuiv"),
		glVertexAttrib4Nusv:                        getProcAddr("glVertexAttrib4Nusv"),
		glVertexAttrib4bv:                          getProcAddr("glVertexAttrib4bv"),
		glVertexAttrib4d:                           getProcAddr("glVertexAttrib4d"),
		glVertexAttrib4dv:                          getProcAddr("glVertexAttrib4dv"),
		glVertexAttrib4f:                           getProcAddr("glVertexAttrib4f"),
		glVertexAttrib4fv:                          getProcAddr("glVertexAttrib4fv"),
		glVertexAttrib4iv:                          getProcAddr("glVertexAttrib4iv"),
		glVertexAttrib4s:                           getProcAddr("glVertexAttrib4s"),
		glVertexAttrib4sv:                          getProcAddr("glVertexAttrib4sv"),
		glVertexAttrib4ubv:                         getProcAddr("glVertexAttrib4ubv"),
		glVertexAttrib4uiv:                         getProcAddr("glVertexAttrib4uiv"),
		glVertexAttrib4usv:                         getProcAddr("glVertexAttrib4usv"),
		glVertexAttribBinding:                      getProcAddr("glVertexAttribBinding"),
		glVertexAttribDivisor:                      getProcAddr("glVertexAttribDivisor"),
		glVertexAttribFormat:                       getProcAddr("glVertexAttribFormat"),
		glVertexAttribI1i:                          getProcAddr("glVertexAttribI1i"),
		glVertexAttribI1iv:                         getProcAddr("glVertexAttribI1iv"),
		glVertexAttribI1ui:                         getProcAddr("glVertexAttribI1ui"),
		glVertexAttribI1uiv:                        getProcAddr("glVertexAttribI1uiv"),
		glVertexAttribI2i:                          getProcAddr("glVertexAttribI2i"),
		glVertexAttribI2iv:                         getProcAddr("glVertexAttribI2iv"),
		glVertexAttribI2ui:                         getProcAddr("glVertexAttribI2ui"),
		glVertexAttribI2uiv:                        getProcAddr("glVertexAttribI2uiv"),
		glVertexAttribI3i:                          getProcAddr("glVertexAttribI3i"),
		glVertexAttribI3iv:                         getProcAddr("glVertexAttribI3iv"),
		glVertexAttribI3ui:                         getProcAddr("glVertexAttribI3ui"),
		glVertexAttribI3uiv:                        getProcAddr("glVertexAttribI3uiv"),
		glVertexAttribI4bv:                         getProcAddr("glVertexAttribI4bv"),
		glVertexAttribI4i:                          getProcAddr("glVertexAttribI4i"),
		glVertexAttribI4iv:                         getProcAddr("glVertexAttribI4iv"),
		glVertexAttribI4sv:                         getProcAddr("glVertexAttribI4sv"),
		glVertexAttribI4ubv:                        getProcAddr("glVertexAttribI4ubv"),
		glVertexAttribI4ui:                         getProcAddr("glVertexAttribI4ui"),
		glVertexAttribI4uiv:                        getProcAddr("glVertexAttribI4uiv"),
		glVertexAttribI4usv:                        getProcAddr("glVertexAttribI4usv"),
		glVertexAttribIFormat:                      getProcAddr("glVertexAttribIFormat"),
		glVertexAttribIPointer:                     getProcAddr("glVertexAttribIPointer"),
		glVertexAttribL1d:                          getProcAddr("glVertexAttribL1d"),
		glVertexAttribL1dv:                         getProcAddr("glVertexAttribL1dv"),
		glVertexAttribL2d:                          getProcAddr("glVertexAttribL2d"),
		glVertexAttribL2dv:                         getProcAddr("glVertexAttribL2dv"),
		glVertexAttribL3d:                          getProcAddr("glVertexAttribL3d"),
		glVertexAttribL3dv:                         getProcAddr("glVertexAttribL3dv"),
		glVertexAttribL4d:                          getProcAddr("glVertexAttribL4d"),
		glVertexAttribL4dv:                         getProcAddr("glVertexAttribL4dv"),
		glVertexAttribLFormat:                      getProcAddr("glVertexAttribLFormat"),
		glVertexAttribLPointer:                     getProcAddr("glVertexAttribLPointer"),
		glVertexAttribP1ui:                         getProcAddr("glVertexAttribP1ui"),
		glVertexAttribP1uiv:                        getProcAddr("glVertexAttribP1uiv"),
		glVertexAttribP2ui:                         getProcAddr("glVertexAttribP2ui"),
		glVertexAttribP2uiv:                        getProcAddr("glVertexAttribP2uiv"),
		glVertexAttribP3ui:                         getProcAddr("glVertexAttribP3ui"),
		glVertexAttribP3uiv:                        getProcAddr("glVertexAttribP3uiv"),
		glVertexAttribP4ui:                         getProcAddr("glVertexAttribP4ui"),
		glVertexAttribP4uiv:                        getProcAddr("glVertexAttribP4uiv"),
		glVertexAttribPointer:                      getProcAddr("glVertexAttribPointer"),
		glVertexBindingDivisor:                     getProcAddr("glVertexBindingDivisor"),
		glVertexP2ui:                               getProcAddr("glVertexP2ui"),
		glVertexP2uiv:                              getProcAddr("glVertexP2uiv"),
		glVertexP3ui:                               getProcAddr("glVertexP3ui"),
		glVertexP3uiv:                              getProcAddr("glVertexP3uiv"),
		glVertexP4ui:                               getProcAddr("glVertexP4ui"),
		glVertexP4uiv:                              getProcAddr("glVertexP4uiv"),
		glVertexPointer:                            getProcAddr("glVertexPointer"),
		glViewport:                                 getProcAddr("glViewport"),
		glViewportArrayv:                           getProcAddr("glViewportArrayv"),
		glViewportIndexedf:                         getProcAddr("glViewportIndexedf"),
		glViewportIndexedfv:                        getProcAddr("glViewportIndexedfv"),
		glWaitSync:                                 getProcAddr("glWaitSync"),
		glWindowPos2d:                              getProcAddr("glWindowPos2d"),
		glWindowPos2dv:                             getProcAddr("glWindowPos2dv"),
		glWindowPos2f:                              getProcAddr("glWindowPos2f"),
		glWindowPos2fv:                             getProcAddr("glWindowPos2fv"),
		glWindowPos2i:                              getProcAddr("glWindowPos2i"),
		glWindowPos2iv:                             getProcAddr("glWindowPos2iv"),
		glWindowPos2s:                              getProcAddr("glWindowPos2s"),
		glWindowPos2sv:                             getProcAddr("glWindowPos2sv"),
		glWindowPos3d:                              getProcAddr("glWindowPos3d"),
		glWindowPos3dv:                             getProcAddr("glWindowPos3dv"),
		glWindowPos3f:                              getProcAddr("glWindowPos3f"),
		glWindowPos3fv:                             getProcAddr("glWindowPos3fv"),
		glWindowPos3i:                              getProcAddr("glWindowPos3i"),
		glWindowPos3iv:                             getProcAddr("glWindowPos3iv"),
		glWindowPos3s:                              getProcAddr("glWindowPos3s"),
		glWindowPos3sv:                             getProcAddr("glWindowPos3sv"),
	}
	gl.initExtensions(getProcAddr)
	return gl
}

type Extensions interface {
	TbufferMask3DFX(mask uint32)
	DebugMessageEnableAMD(category uint32, severity uint32, count int32, ids *uint32, enabled bool)
	DebugMessageInsertAMD(category uint32, severity uint32, id uint32, length int32, buf *uint8)
	DebugMessageCallbackAMD(callback func(source, type_, id, severity uint32, message string))
	GetDebugMessageLogAMD(count uint32, bufSize int32, categories *uint32, severities *uint32, ids *uint32, lengths *int32, message *uint8) uint32
	BlendFuncIndexedAMD(buf uint32, src uint32, dst uint32)
	BlendFuncSeparateIndexedAMD(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32)
	BlendEquationIndexedAMD(buf uint32, mode uint32)
	BlendEquationSeparateIndexedAMD(buf uint32, modeRGB uint32, modeAlpha uint32)
	RenderbufferStorageMultisampleAdvancedAMD(target uint32, samples int32, storageSamples int32, internalformat uint32, width int32, height int32)
	NamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer uint32, samples int32, storageSamples int32, internalformat uint32, width int32, height int32)
	FramebufferSamplePositionsfvAMD(target uint32, numsamples uint32, pixelindex uint32, values *float32)
	NamedFramebufferSamplePositionsfvAMD(framebuffer uint32, numsamples uint32, pixelindex uint32, values *float32)
	GetFramebufferParameterfvAMD(target uint32, pname uint32, numsamples uint32, pixelindex uint32, size int32, values *float32)
	GetNamedFramebufferParameterfvAMD(framebuffer uint32, pname uint32, numsamples uint32, pixelindex uint32, size int32, values *float32)
	Uniform1i64NV(location int32, x int64)
	Uniform2i64NV(location int32, x int64, y int64)
	Uniform3i64NV(location int32, x int64, y int64, z int64)
	Uniform4i64NV(location int32, x int64, y int64, z int64, w int64)
	Uniform1i64vNV(location int32, count int32, value *int64)
	Uniform2i64vNV(location int32, count int32, value *int64)
	Uniform3i64vNV(location int32, count int32, value *int64)
	Uniform4i64vNV(location int32, count int32, value *int64)
	Uniform1ui64NV(location int32, x uint64)
	Uniform2ui64NV(location int32, x uint64, y uint64)
	Uniform3ui64NV(location int32, x uint64, y uint64, z uint64)
	Uniform4ui64NV(location int32, x uint64, y uint64, z uint64, w uint64)
	Uniform1ui64vNV(location int32, count int32, value *uint64)
	Uniform2ui64vNV(location int32, count int32, value *uint64)
	Uniform3ui64vNV(location int32, count int32, value *uint64)
	Uniform4ui64vNV(location int32, count int32, value *uint64)
	GetUniformi64vNV(program uint32, location int32, params *int64)
	GetUniformui64vNV(program uint32, location int32, params *uint64)
	ProgramUniform1i64NV(program uint32, location int32, x int64)
	ProgramUniform2i64NV(program uint32, location int32, x int64, y int64)
	ProgramUniform3i64NV(program uint32, location int32, x int64, y int64, z int64)
	ProgramUniform4i64NV(program uint32, location int32, x int64, y int64, z int64, w int64)
	ProgramUniform1i64vNV(program uint32, location int32, count int32, value *int64)
	ProgramUniform2i64vNV(program uint32, location int32, count int32, value *int64)
	ProgramUniform3i64vNV(program uint32, location int32, count int32, value *int64)
	ProgramUniform4i64vNV(program uint32, location int32, count int32, value *int64)
	ProgramUniform1ui64NV(program uint32, location int32, x uint64)
	ProgramUniform2ui64NV(program uint32, location int32, x uint64, y uint64)
	ProgramUniform3ui64NV(program uint32, location int32, x uint64, y uint64, z uint64)
	ProgramUniform4ui64NV(program uint32, location int32, x uint64, y uint64, z uint64, w uint64)
	ProgramUniform1ui64vNV(program uint32, location int32, count int32, value *uint64)
	ProgramUniform2ui64vNV(program uint32, location int32, count int32, value *uint64)
	ProgramUniform3ui64vNV(program uint32, location int32, count int32, value *uint64)
	ProgramUniform4ui64vNV(program uint32, location int32, count int32, value *uint64)
	VertexAttribParameteriAMD(index uint32, pname uint32, param int32)
	MultiDrawArraysIndirectAMD(mode uint32, indirect unsafe.Pointer, primcount int32, stride int32)
	MultiDrawElementsIndirectAMD(mode uint32, type_ uint32, indirect unsafe.Pointer, primcount int32, stride int32)
	GenNamesAMD(identifier uint32, num uint32, names *uint32)
	DeleteNamesAMD(identifier uint32, num uint32, names *uint32)
	IsNameAMD(identifier uint32, name uint32) bool
	QueryObjectParameteruiAMD(target uint32, id uint32, pname uint32, param uint32)
	GetPerfMonitorGroupsAMD(numGroups *int32, groupsSize int32, groups *uint32)
	GetPerfMonitorCountersAMD(group uint32, numCounters *int32, maxActiveCounters *int32, counterSize int32, counters *uint32)
	GetPerfMonitorGroupStringAMD(group uint32, bufSize int32, length *int32, groupString *uint8)
	GetPerfMonitorCounterStringAMD(group uint32, counter uint32, bufSize int32, length *int32, counterString *uint8)
	GetPerfMonitorCounterInfoAMD(group uint32, counter uint32, pname uint32, data unsafe.Pointer)
	GenPerfMonitorsAMD(n int32, monitors *uint32)
	DeletePerfMonitorsAMD(n int32, monitors *uint32)
	SelectPerfMonitorCountersAMD(monitor uint32, enable bool, group uint32, numCounters int32, counterList *uint32)
	BeginPerfMonitorAMD(monitor uint32)
	EndPerfMonitorAMD(monitor uint32)
	GetPerfMonitorCounterDataAMD(monitor uint32, pname uint32, dataSize int32, data *uint32, bytesWritten *int32)
	SetMultisamplefvAMD(pname uint32, index uint32, val *float32)
	TexStorageSparseAMD(target uint32, internalFormat uint32, width int32, height int32, depth int32, layers int32, flags uint32)
	TextureStorageSparseAMD(texture uint32, target uint32, internalFormat uint32, width int32, height int32, depth int32, layers int32, flags uint32)
	StencilOpValueAMD(face uint32, value uint32)
	TessellationFactorAMD(factor float32)
	TessellationModeAMD(mode uint32)
	ElementPointerAPPLE(type_ uint32, pointer unsafe.Pointer)
	DrawElementArrayAPPLE(mode uint32, first int32, count int32)
	DrawRangeElementArrayAPPLE(mode uint32, start uint32, end uint32, first int32, count int32)
	MultiDrawElementArrayAPPLE(mode uint32, first *int32, count *int32, primcount int32)
	MultiDrawRangeElementArrayAPPLE(mode uint32, start uint32, end uint32, first *int32, count *int32, primcount int32)
	GenFencesAPPLE(n int32, fences *uint32)
	DeleteFencesAPPLE(n int32, fences *uint32)
	SetFenceAPPLE(fence uint32)
	IsFenceAPPLE(fence uint32) bool
	TestFenceAPPLE(fence uint32) bool
	FinishFenceAPPLE(fence uint32)
	TestObjectAPPLE(object uint32, name uint32) bool
	FinishObjectAPPLE(object uint32, name int32)
	BufferParameteriAPPLE(target uint32, pname uint32, param int32)
	FlushMappedBufferRangeAPPLE(target uint32, offset uintptr, size int)
	ObjectPurgeableAPPLE(objectType uint32, name uint32, option uint32) uint32
	ObjectUnpurgeableAPPLE(objectType uint32, name uint32, option uint32) uint32
	GetObjectParameterivAPPLE(objectType uint32, name uint32, pname uint32, params *int32)
	TextureRangeAPPLE(target uint32, length int32, pointer unsafe.Pointer)
	GetTexParameterPointervAPPLE(target uint32, pname uint32, params *unsafe.Pointer)
	BindVertexArrayAPPLE(array uint32)
	DeleteVertexArraysAPPLE(n int32, arrays *uint32)
	GenVertexArraysAPPLE(n int32, arrays *uint32)
	IsVertexArrayAPPLE(array uint32) bool
	VertexArrayRangeAPPLE(length int32, pointer unsafe.Pointer)
	FlushVertexArrayRangeAPPLE(length int32, pointer unsafe.Pointer)
	VertexArrayParameteriAPPLE(pname uint32, param int32)
	EnableVertexAttribAPPLE(index uint32, pname uint32)
	DisableVertexAttribAPPLE(index uint32, pname uint32)
	IsVertexAttribEnabledAPPLE(index uint32, pname uint32) bool
	MapVertexAttrib1dAPPLE(index uint32, size uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)
	MapVertexAttrib1fAPPLE(index uint32, size uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)
	MapVertexAttrib2dAPPLE(index uint32, size uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)
	MapVertexAttrib2fAPPLE(index uint32, size uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)
	ReleaseShaderCompiler()
	ShaderBinary(count int32, shaders *uint32, binaryFormat uint32, binary unsafe.Pointer, length int32)
	GetShaderPrecisionFormat(shadertype uint32, precisiontype uint32, range_ *int32, precision *int32)
	DepthRangef(n float32, f float32)
	ClearDepthf(d float32)
	MemoryBarrierByRegion(barriers uint32)
	PrimitiveBoundingBoxARB(minX float32, minY float32, minZ float32, minW float32, maxX float32, maxY float32, maxZ float32, maxW float32)
	DrawArraysInstancedBaseInstance(mode uint32, first int32, count int32, instancecount int32, baseinstance uint32)
	DrawElementsInstancedBaseInstance(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, baseinstance uint32)
	DrawElementsInstancedBaseVertexBaseInstance(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32, baseinstance uint32)
	GetTextureHandleARB(texture uint32) uint64
	GetTextureSamplerHandleARB(texture uint32, sampler uint32) uint64
	MakeTextureHandleResidentARB(handle uint64)
	MakeTextureHandleNonResidentARB(handle uint64)
	GetImageHandleARB(texture uint32, level int32, layered bool, layer int32, format uint32) uint64
	MakeImageHandleResidentARB(handle uint64, access uint32)
	MakeImageHandleNonResidentARB(handle uint64)
	UniformHandleui64ARB(location int32, value uint64)
	UniformHandleui64vARB(location int32, count int32, value *uint64)
	ProgramUniformHandleui64ARB(program uint32, location int32, value uint64)
	ProgramUniformHandleui64vARB(program uint32, location int32, count int32, values *uint64)
	IsTextureHandleResidentARB(handle uint64) bool
	IsImageHandleResidentARB(handle uint64) bool
	VertexAttribL1ui64ARB(index uint32, x uint64)
	VertexAttribL1ui64vARB(index uint32, v *uint64)
	GetVertexAttribLui64vARB(index uint32, pname uint32, params *uint64)
	BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *uint8)
	GetFragDataIndex(program uint32, name *uint8) int32
	BufferStorage(target uint32, size int, data unsafe.Pointer, flags uint32)
	ClearBufferData(target uint32, internalformat uint32, format uint32, type_ uint32, data unsafe.Pointer)
	ClearBufferSubData(target uint32, internalformat uint32, offset uintptr, size int, format uint32, type_ uint32, data unsafe.Pointer)
	ClearTexImage(texture uint32, level int32, format uint32, type_ uint32, data unsafe.Pointer)
	ClearTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, data unsafe.Pointer)
	ClipControl(origin uint32, depth uint32)
	ClampColorARB(target uint32, clamp uint32)
	DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32)
	DispatchComputeIndirect(indirect uintptr)
	DispatchComputeGroupSizeARB(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32, group_size_x uint32, group_size_y uint32, group_size_z uint32)
	CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset uintptr, writeOffset uintptr, size int)
	CopyImageSubData(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32)
	DebugMessageControlARB(source uint32, type_ uint32, severity uint32, count int32, ids *uint32, enabled bool)
	DebugMessageInsertARB(source uint32, type_ uint32, id uint32, severity uint32, length int32, buf *uint8)
	DebugMessageCallbackARB(callback func(source, type_, id, severity uint32, message string))
	GetDebugMessageLogARB(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32
	CreateTransformFeedbacks(n int32, ids *uint32)
	TransformFeedbackBufferBase(xfb uint32, index uint32, buffer uint32)
	TransformFeedbackBufferRange(xfb uint32, index uint32, buffer uint32, offset uintptr, size int)
	GetTransformFeedbackiv(xfb uint32, pname uint32, param *int32)
	GetTransformFeedbacki_v(xfb uint32, pname uint32, index uint32, param *int32)
	GetTransformFeedbacki64_v(xfb uint32, pname uint32, index uint32, param *int64)
	CreateBuffers(n int32, buffers *uint32)
	NamedBufferStorage(buffer uint32, size int, data unsafe.Pointer, flags uint32)
	NamedBufferData(buffer uint32, size int, data unsafe.Pointer, usage uint32)
	NamedBufferSubData(buffer uint32, offset uintptr, size int, data unsafe.Pointer)
	CopyNamedBufferSubData(readBuffer uint32, writeBuffer uint32, readOffset uintptr, writeOffset uintptr, size int)
	ClearNamedBufferData(buffer uint32, internalformat uint32, format uint32, type_ uint32, data unsafe.Pointer)
	ClearNamedBufferSubData(buffer uint32, internalformat uint32, offset uintptr, size int, format uint32, type_ uint32, data unsafe.Pointer)
	MapNamedBuffer(buffer uint32, access uint32) unsafe.Pointer
	MapNamedBufferRange(buffer uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	UnmapNamedBuffer(buffer uint32) bool
	FlushMappedNamedBufferRange(buffer uint32, offset uintptr, length int)
	GetNamedBufferParameteriv(buffer uint32, pname uint32, params *int32)
	GetNamedBufferParameteri64v(buffer uint32, pname uint32, params *int64)
	GetNamedBufferPointerv(buffer uint32, pname uint32, params *unsafe.Pointer)
	GetNamedBufferSubData(buffer uint32, offset uintptr, size int, data unsafe.Pointer)
	CreateFramebuffers(n int32, framebuffers *uint32)
	NamedFramebufferRenderbuffer(framebuffer uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	NamedFramebufferParameteri(framebuffer uint32, pname uint32, param int32)
	NamedFramebufferTexture(framebuffer uint32, attachment uint32, texture uint32, level int32)
	NamedFramebufferTextureLayer(framebuffer uint32, attachment uint32, texture uint32, level int32, layer int32)
	NamedFramebufferDrawBuffer(framebuffer uint32, buf uint32)
	NamedFramebufferDrawBuffers(framebuffer uint32, n int32, bufs *uint32)
	NamedFramebufferReadBuffer(framebuffer uint32, src uint32)
	InvalidateNamedFramebufferData(framebuffer uint32, numAttachments int32, attachments *uint32)
	InvalidateNamedFramebufferSubData(framebuffer uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32)
	ClearNamedFramebufferiv(framebuffer uint32, buffer uint32, drawbuffer int32, value *int32)
	ClearNamedFramebufferuiv(framebuffer uint32, buffer uint32, drawbuffer int32, value *uint32)
	ClearNamedFramebufferfv(framebuffer uint32, buffer uint32, drawbuffer int32, value *float32)
	ClearNamedFramebufferfi(framebuffer uint32, buffer uint32, drawbuffer int32, depth float32, stencil int32)
	BlitNamedFramebuffer(readFramebuffer uint32, drawFramebuffer uint32, srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	CheckNamedFramebufferStatus(framebuffer uint32, target uint32) uint32
	GetNamedFramebufferParameteriv(framebuffer uint32, pname uint32, param *int32)
	GetNamedFramebufferAttachmentParameteriv(framebuffer uint32, attachment uint32, pname uint32, params *int32)
	CreateRenderbuffers(n int32, renderbuffers *uint32)
	NamedRenderbufferStorage(renderbuffer uint32, internalformat uint32, width int32, height int32)
	NamedRenderbufferStorageMultisample(renderbuffer uint32, samples int32, internalformat uint32, width int32, height int32)
	GetNamedRenderbufferParameteriv(renderbuffer uint32, pname uint32, params *int32)
	CreateTextures(target uint32, n int32, textures *uint32)
	TextureBuffer(texture uint32, internalformat uint32, buffer uint32)
	TextureBufferRange(texture uint32, internalformat uint32, buffer uint32, offset uintptr, size int)
	TextureStorage1D(texture uint32, levels int32, internalformat uint32, width int32)
	TextureStorage2D(texture uint32, levels int32, internalformat uint32, width int32, height int32)
	TextureStorage3D(texture uint32, levels int32, internalformat uint32, width int32, height int32, depth int32)
	TextureStorage2DMultisample(texture uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TextureStorage3DMultisample(texture uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TextureSubImage1D(texture uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	CompressedTextureSubImage1D(texture uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CopyTextureSubImage1D(texture uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	TextureParameterf(texture uint32, pname uint32, param float32)
	TextureParameterfv(texture uint32, pname uint32, param *float32)
	TextureParameteri(texture uint32, pname uint32, param int32)
	TextureParameterIiv(texture uint32, pname uint32, params *int32)
	TextureParameterIuiv(texture uint32, pname uint32, params *uint32)
	TextureParameteriv(texture uint32, pname uint32, param *int32)
	GenerateTextureMipmap(texture uint32)
	BindTextureUnit(unit uint32, texture uint32)
	GetTextureImage(texture uint32, level int32, format uint32, type_ uint32, bufSize int32, pixels unsafe.Pointer)
	GetCompressedTextureImage(texture uint32, level int32, bufSize int32, pixels unsafe.Pointer)
	GetTextureLevelParameterfv(texture uint32, level int32, pname uint32, params *float32)
	GetTextureLevelParameteriv(texture uint32, level int32, pname uint32, params *int32)
	GetTextureParameterfv(texture uint32, pname uint32, params *float32)
	GetTextureParameterIiv(texture uint32, pname uint32, params *int32)
	GetTextureParameterIuiv(texture uint32, pname uint32, params *uint32)
	GetTextureParameteriv(texture uint32, pname uint32, params *int32)
	CreateVertexArrays(n int32, arrays *uint32)
	DisableVertexArrayAttrib(vaobj uint32, index uint32)
	EnableVertexArrayAttrib(vaobj uint32, index uint32)
	VertexArrayElementBuffer(vaobj uint32, buffer uint32)
	VertexArrayVertexBuffer(vaobj uint32, bindingindex uint32, buffer uint32, offset uintptr, stride int32)
	VertexArrayVertexBuffers(vaobj uint32, first uint32, count int32, buffers *uint32, offsets *uintptr, strides *int32)
	VertexArrayAttribBinding(vaobj uint32, attribindex uint32, bindingindex uint32)
	VertexArrayAttribFormat(vaobj uint32, attribindex uint32, size int32, type_ uint32, normalized bool, relativeoffset uint32)
	VertexArrayAttribIFormat(vaobj uint32, attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexArrayAttribLFormat(vaobj uint32, attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexArrayBindingDivisor(vaobj uint32, bindingindex uint32, divisor uint32)
	GetVertexArrayiv(vaobj uint32, pname uint32, param *int32)
	GetVertexArrayIndexediv(vaobj uint32, index uint32, pname uint32, param *int32)
	GetVertexArrayIndexed64iv(vaobj uint32, index uint32, pname uint32, param *int64)
	CreateSamplers(n int32, samplers *uint32)
	CreateProgramPipelines(n int32, pipelines *uint32)
	CreateQueries(target uint32, n int32, ids *uint32)
	GetQueryBufferObjecti64v(id uint32, buffer uint32, pname uint32, offset uintptr)
	GetQueryBufferObjectiv(id uint32, buffer uint32, pname uint32, offset uintptr)
	GetQueryBufferObjectui64v(id uint32, buffer uint32, pname uint32, offset uintptr)
	GetQueryBufferObjectuiv(id uint32, buffer uint32, pname uint32, offset uintptr)
	DrawBuffersARB(n int32, bufs *uint32)
	BlendEquationiARB(buf uint32, mode uint32)
	BlendEquationSeparateiARB(buf uint32, modeRGB uint32, modeAlpha uint32)
	BlendFunciARB(buf uint32, src uint32, dst uint32)
	BlendFuncSeparateiARB(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32)
	DrawElementsBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawRangeElementsBaseVertex(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer, basevertex int32)
	DrawElementsInstancedBaseVertex(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, instancecount int32, basevertex int32)
	MultiDrawElementsBaseVertex(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32)
	DrawArraysIndirect(mode uint32, indirect unsafe.Pointer)
	DrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer)
	DrawArraysInstancedARB(mode uint32, first int32, count int32, primcount int32)
	DrawElementsInstancedARB(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, primcount int32)
	ProgramStringARB(target uint32, format uint32, len int32, string unsafe.Pointer)
	BindProgramARB(target uint32, program uint32)
	DeleteProgramsARB(n int32, programs *uint32)
	GenProgramsARB(n int32, programs *uint32)
	ProgramEnvParameter4dARB(target uint32, index uint32, x float64, y float64, z float64, w float64)
	ProgramEnvParameter4dvARB(target uint32, index uint32, params *float64)
	ProgramEnvParameter4fARB(target uint32, index uint32, x float32, y float32, z float32, w float32)
	ProgramEnvParameter4fvARB(target uint32, index uint32, params *float32)
	ProgramLocalParameter4dARB(target uint32, index uint32, x float64, y float64, z float64, w float64)
	ProgramLocalParameter4dvARB(target uint32, index uint32, params *float64)
	ProgramLocalParameter4fARB(target uint32, index uint32, x float32, y float32, z float32, w float32)
	ProgramLocalParameter4fvARB(target uint32, index uint32, params *float32)
	GetProgramEnvParameterdvARB(target uint32, index uint32, params *float64)
	GetProgramEnvParameterfvARB(target uint32, index uint32, params *float32)
	GetProgramLocalParameterdvARB(target uint32, index uint32, params *float64)
	GetProgramLocalParameterfvARB(target uint32, index uint32, params *float32)
	GetProgramivARB(target uint32, pname uint32, params *int32)
	GetProgramStringARB(target uint32, pname uint32, string unsafe.Pointer)
	IsProgramARB(program uint32) bool
	FramebufferParameteri(target uint32, pname uint32, param int32)
	GetFramebufferParameteriv(target uint32, pname uint32, params *int32)
	IsRenderbuffer(renderbuffer uint32) bool
	BindRenderbuffer(target uint32, renderbuffer uint32)
	DeleteRenderbuffers(n int32, renderbuffers *uint32)
	GenRenderbuffers(n int32, renderbuffers *uint32)
	RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32)
	GetRenderbufferParameteriv(target uint32, pname uint32, params *int32)
	IsFramebuffer(framebuffer uint32) bool
	BindFramebuffer(target uint32, framebuffer uint32)
	DeleteFramebuffers(n int32, framebuffers *uint32)
	GenFramebuffers(n int32, framebuffers *uint32)
	CheckFramebufferStatus(target uint32) uint32
	FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32)
	FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32)
	GenerateMipmap(target uint32)
	BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32)
	FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32)
	ProgramParameteriARB(program uint32, pname uint32, value int32)
	FramebufferTextureARB(target uint32, attachment uint32, texture uint32, level int32)
	FramebufferTextureLayerARB(target uint32, attachment uint32, texture uint32, level int32, layer int32)
	FramebufferTextureFaceARB(target uint32, attachment uint32, texture uint32, level int32, face uint32)
	GetProgramBinary(program uint32, bufSize int32, length *int32, binaryFormat *uint32, binary unsafe.Pointer)
	ProgramBinary(program uint32, binaryFormat uint32, binary unsafe.Pointer, length int32)
	ProgramParameteri(program uint32, pname uint32, value int32)
	GetTextureSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, bufSize int32, pixels unsafe.Pointer)
	GetCompressedTextureSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, bufSize int32, pixels unsafe.Pointer)
	SpecializeShaderARB(shader uint32, pEntryPoint *uint8, numSpecializationConstants uint32, pConstantIndex *uint32, pConstantValue *uint32)
	Uniform1d(location int32, x float64)
	Uniform2d(location int32, x float64, y float64)
	Uniform3d(location int32, x float64, y float64, z float64)
	Uniform4d(location int32, x float64, y float64, z float64, w float64)
	Uniform1dv(location int32, count int32, value *float64)
	Uniform2dv(location int32, count int32, value *float64)
	Uniform3dv(location int32, count int32, value *float64)
	Uniform4dv(location int32, count int32, value *float64)
	UniformMatrix2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x3dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix2x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix3x4dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x2dv(location int32, count int32, transpose bool, value *float64)
	UniformMatrix4x3dv(location int32, count int32, transpose bool, value *float64)
	GetUniformdv(program uint32, location int32, params *float64)
	Uniform1i64ARB(location int32, x int64)
	Uniform2i64ARB(location int32, x int64, y int64)
	Uniform3i64ARB(location int32, x int64, y int64, z int64)
	Uniform4i64ARB(location int32, x int64, y int64, z int64, w int64)
	Uniform1i64vARB(location int32, count int32, value *int64)
	Uniform2i64vARB(location int32, count int32, value *int64)
	Uniform3i64vARB(location int32, count int32, value *int64)
	Uniform4i64vARB(location int32, count int32, value *int64)
	Uniform1ui64ARB(location int32, x uint64)
	Uniform2ui64ARB(location int32, x uint64, y uint64)
	Uniform3ui64ARB(location int32, x uint64, y uint64, z uint64)
	Uniform4ui64ARB(location int32, x uint64, y uint64, z uint64, w uint64)
	Uniform1ui64vARB(location int32, count int32, value *uint64)
	Uniform2ui64vARB(location int32, count int32, value *uint64)
	Uniform3ui64vARB(location int32, count int32, value *uint64)
	Uniform4ui64vARB(location int32, count int32, value *uint64)
	GetUniformi64vARB(program uint32, location int32, params *int64)
	GetUniformui64vARB(program uint32, location int32, params *uint64)
	GetnUniformi64vARB(program uint32, location int32, bufSize int32, params *int64)
	GetnUniformui64vARB(program uint32, location int32, bufSize int32, params *uint64)
	ProgramUniform1i64ARB(program uint32, location int32, x int64)
	ProgramUniform2i64ARB(program uint32, location int32, x int64, y int64)
	ProgramUniform3i64ARB(program uint32, location int32, x int64, y int64, z int64)
	ProgramUniform4i64ARB(program uint32, location int32, x int64, y int64, z int64, w int64)
	ProgramUniform1i64vARB(program uint32, location int32, count int32, value *int64)
	ProgramUniform2i64vARB(program uint32, location int32, count int32, value *int64)
	ProgramUniform3i64vARB(program uint32, location int32, count int32, value *int64)
	ProgramUniform4i64vARB(program uint32, location int32, count int32, value *int64)
	ProgramUniform1ui64ARB(program uint32, location int32, x uint64)
	ProgramUniform2ui64ARB(program uint32, location int32, x uint64, y uint64)
	ProgramUniform3ui64ARB(program uint32, location int32, x uint64, y uint64, z uint64)
	ProgramUniform4ui64ARB(program uint32, location int32, x uint64, y uint64, z uint64, w uint64)
	ProgramUniform1ui64vARB(program uint32, location int32, count int32, value *uint64)
	ProgramUniform2ui64vARB(program uint32, location int32, count int32, value *uint64)
	ProgramUniform3ui64vARB(program uint32, location int32, count int32, value *uint64)
	ProgramUniform4ui64vARB(program uint32, location int32, count int32, value *uint64)
	BlendColor(red float32, green float32, blue float32, alpha float32)
	BlendEquation(mode uint32)
	ColorTable(target uint32, internalformat uint32, width int32, format uint32, type_ uint32, table unsafe.Pointer)
	ColorTableParameterfv(target uint32, pname uint32, params *float32)
	ColorTableParameteriv(target uint32, pname uint32, params *int32)
	CopyColorTable(target uint32, internalformat uint32, x int32, y int32, width int32)
	GetColorTable(target uint32, format uint32, type_ uint32, table unsafe.Pointer)
	GetColorTableParameterfv(target uint32, pname uint32, params *float32)
	GetColorTableParameteriv(target uint32, pname uint32, params *int32)
	ColorSubTable(target uint32, start int32, count int32, format uint32, type_ uint32, data unsafe.Pointer)
	CopyColorSubTable(target uint32, start int32, x int32, y int32, width int32)
	ConvolutionFilter1D(target uint32, internalformat uint32, width int32, format uint32, type_ uint32, image unsafe.Pointer)
	ConvolutionFilter2D(target uint32, internalformat uint32, width int32, height int32, format uint32, type_ uint32, image unsafe.Pointer)
	ConvolutionParameterf(target uint32, pname uint32, params float32)
	ConvolutionParameterfv(target uint32, pname uint32, params *float32)
	ConvolutionParameteri(target uint32, pname uint32, params int32)
	ConvolutionParameteriv(target uint32, pname uint32, params *int32)
	CopyConvolutionFilter1D(target uint32, internalformat uint32, x int32, y int32, width int32)
	CopyConvolutionFilter2D(target uint32, internalformat uint32, x int32, y int32, width int32, height int32)
	GetConvolutionFilter(target uint32, format uint32, type_ uint32, image unsafe.Pointer)
	GetConvolutionParameterfv(target uint32, pname uint32, params *float32)
	GetConvolutionParameteriv(target uint32, pname uint32, params *int32)
	GetSeparableFilter(target uint32, format uint32, type_ uint32, row unsafe.Pointer, column unsafe.Pointer, span unsafe.Pointer)
	SeparableFilter2D(target uint32, internalformat uint32, width int32, height int32, format uint32, type_ uint32, row unsafe.Pointer, column unsafe.Pointer)
	GetHistogram(target uint32, reset bool, format uint32, type_ uint32, values unsafe.Pointer)
	GetHistogramParameterfv(target uint32, pname uint32, params *float32)
	GetHistogramParameteriv(target uint32, pname uint32, params *int32)
	GetMinmax(target uint32, reset bool, format uint32, type_ uint32, values unsafe.Pointer)
	GetMinmaxParameterfv(target uint32, pname uint32, params *float32)
	GetMinmaxParameteriv(target uint32, pname uint32, params *int32)
	Histogram(target uint32, width int32, internalformat uint32, sink bool)
	Minmax(target uint32, internalformat uint32, sink bool)
	ResetHistogram(target uint32)
	ResetMinmax(target uint32)
	MultiDrawArraysIndirectCountARB(mode uint32, indirect unsafe.Pointer, drawcount uintptr, maxdrawcount int32, stride int32)
	MultiDrawElementsIndirectCountARB(mode uint32, type_ uint32, indirect unsafe.Pointer, drawcount uintptr, maxdrawcount int32, stride int32)
	VertexAttribDivisorARB(index uint32, divisor uint32)
	GetInternalformativ(target uint32, internalformat uint32, pname uint32, count int32, params *int32)
	GetInternalformati64v(target uint32, internalformat uint32, pname uint32, count int32, params *int64)
	InvalidateTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32)
	InvalidateTexImage(texture uint32, level int32)
	InvalidateBufferSubData(buffer uint32, offset uintptr, length int)
	InvalidateBufferData(buffer uint32)
	InvalidateFramebuffer(target uint32, numAttachments int32, attachments *uint32)
	InvalidateSubFramebuffer(target uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32)
	MapBufferRange(target uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	FlushMappedBufferRange(target uint32, offset uintptr, length int)
	CurrentPaletteMatrixARB(index int32)
	MatrixIndexubvARB(size int32, indices *uint8)
	MatrixIndexusvARB(size int32, indices *uint16)
	MatrixIndexuivARB(size int32, indices *uint32)
	MatrixIndexPointerARB(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	BindBuffersBase(target uint32, first uint32, count int32, buffers *uint32)
	BindBuffersRange(target uint32, first uint32, count int32, buffers *uint32, offsets *uintptr, sizes *int)
	BindTextures(first uint32, count int32, textures *uint32)
	BindSamplers(first uint32, count int32, samplers *uint32)
	BindImageTextures(first uint32, count int32, textures *uint32)
	BindVertexBuffers(first uint32, count int32, buffers *uint32, offsets *uintptr, strides *int32)
	MultiDrawArraysIndirect(mode uint32, indirect unsafe.Pointer, drawcount int32, stride int32)
	MultiDrawElementsIndirect(mode uint32, type_ uint32, indirect unsafe.Pointer, drawcount int32, stride int32)
	SampleCoverageARB(value float32, invert bool)
	ActiveTextureARB(texture uint32)
	ClientActiveTextureARB(texture uint32)
	MultiTexCoord1dARB(target uint32, s float64)
	MultiTexCoord1dvARB(target uint32, v *float64)
	MultiTexCoord1fARB(target uint32, s float32)
	MultiTexCoord1fvARB(target uint32, v *float32)
	MultiTexCoord1iARB(target uint32, s int32)
	MultiTexCoord1ivARB(target uint32, v *int32)
	MultiTexCoord1sARB(target uint32, s int16)
	MultiTexCoord1svARB(target uint32, v *int16)
	MultiTexCoord2dARB(target uint32, s float64, t float64)
	MultiTexCoord2dvARB(target uint32, v *float64)
	MultiTexCoord2fARB(target uint32, s float32, t float32)
	MultiTexCoord2fvARB(target uint32, v *float32)
	MultiTexCoord2iARB(target uint32, s int32, t int32)
	MultiTexCoord2ivARB(target uint32, v *int32)
	MultiTexCoord2sARB(target uint32, s int16, t int16)
	MultiTexCoord2svARB(target uint32, v *int16)
	MultiTexCoord3dARB(target uint32, s float64, t float64, r float64)
	MultiTexCoord3dvARB(target uint32, v *float64)
	MultiTexCoord3fARB(target uint32, s float32, t float32, r float32)
	MultiTexCoord3fvARB(target uint32, v *float32)
	MultiTexCoord3iARB(target uint32, s int32, t int32, r int32)
	MultiTexCoord3ivARB(target uint32, v *int32)
	MultiTexCoord3sARB(target uint32, s int16, t int16, r int16)
	MultiTexCoord3svARB(target uint32, v *int16)
	MultiTexCoord4dARB(target uint32, s float64, t float64, r float64, q float64)
	MultiTexCoord4dvARB(target uint32, v *float64)
	MultiTexCoord4fARB(target uint32, s float32, t float32, r float32, q float32)
	MultiTexCoord4fvARB(target uint32, v *float32)
	MultiTexCoord4iARB(target uint32, s int32, t int32, r int32, q int32)
	MultiTexCoord4ivARB(target uint32, v *int32)
	MultiTexCoord4sARB(target uint32, s int16, t int16, r int16, q int16)
	MultiTexCoord4svARB(target uint32, v *int16)
	GenQueriesARB(n int32, ids *uint32)
	DeleteQueriesARB(n int32, ids *uint32)
	IsQueryARB(id uint32) bool
	BeginQueryARB(target uint32, id uint32)
	EndQueryARB(target uint32)
	GetQueryivARB(target uint32, pname uint32, params *int32)
	GetQueryObjectivARB(id uint32, pname uint32, params *int32)
	GetQueryObjectuivARB(id uint32, pname uint32, params *uint32)
	MaxShaderCompilerThreadsARB(count uint32)
	PointParameterfARB(pname uint32, param float32)
	PointParameterfvARB(pname uint32, params *float32)
	PolygonOffsetClamp(factor float32, units float32, clamp float32)
	GetProgramInterfaceiv(program uint32, programInterface uint32, pname uint32, params *int32)
	GetProgramResourceIndex(program uint32, programInterface uint32, name *uint8) uint32
	GetProgramResourceName(program uint32, programInterface uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetProgramResourceiv(program uint32, programInterface uint32, index uint32, propCount int32, props *uint32, count int32, length *int32, params *int32)
	GetProgramResourceLocation(program uint32, programInterface uint32, name *uint8) int32
	GetProgramResourceLocationIndex(program uint32, programInterface uint32, name *uint8) int32
	ProvokingVertex(mode uint32)
	GetGraphicsResetStatusARB() uint32
	GetnTexImageARB(target uint32, level int32, format uint32, type_ uint32, bufSize int32, img unsafe.Pointer)
	ReadnPixelsARB(x int32, y int32, width int32, height int32, format uint32, type_ uint32, bufSize int32, data unsafe.Pointer)
	GetnCompressedTexImageARB(target uint32, lod int32, bufSize int32, img unsafe.Pointer)
	GetnUniformfvARB(program uint32, location int32, bufSize int32, params *float32)
	GetnUniformivARB(program uint32, location int32, bufSize int32, params *int32)
	GetnUniformuivARB(program uint32, location int32, bufSize int32, params *uint32)
	GetnUniformdvARB(program uint32, location int32, bufSize int32, params *float64)
	GetnMapdvARB(target uint32, query uint32, bufSize int32, v *float64)
	GetnMapfvARB(target uint32, query uint32, bufSize int32, v *float32)
	GetnMapivARB(target uint32, query uint32, bufSize int32, v *int32)
	GetnPixelMapfvARB(map_ uint32, bufSize int32, values *float32)
	GetnPixelMapuivARB(map_ uint32, bufSize int32, values *uint32)
	GetnPixelMapusvARB(map_ uint32, bufSize int32, values *uint16)
	GetnPolygonStippleARB(bufSize int32, pattern *uint8)
	GetnColorTableARB(target uint32, format uint32, type_ uint32, bufSize int32, table unsafe.Pointer)
	GetnConvolutionFilterARB(target uint32, format uint32, type_ uint32, bufSize int32, image unsafe.Pointer)
	GetnSeparableFilterARB(target uint32, format uint32, type_ uint32, rowBufSize int32, row unsafe.Pointer, columnBufSize int32, column unsafe.Pointer, span unsafe.Pointer)
	GetnHistogramARB(target uint32, reset bool, format uint32, type_ uint32, bufSize int32, values unsafe.Pointer)
	GetnMinmaxARB(target uint32, reset bool, format uint32, type_ uint32, bufSize int32, values unsafe.Pointer)
	FramebufferSampleLocationsfvARB(target uint32, start uint32, count int32, v *float32)
	NamedFramebufferSampleLocationsfvARB(framebuffer uint32, start uint32, count int32, v *float32)
	EvaluateDepthValuesARB()
	MinSampleShadingARB(value float32)
	GenSamplers(count int32, samplers *uint32)
	DeleteSamplers(count int32, samplers *uint32)
	IsSampler(sampler uint32) bool
	BindSampler(unit uint32, sampler uint32)
	SamplerParameteri(sampler uint32, pname uint32, param int32)
	SamplerParameteriv(sampler uint32, pname uint32, param *int32)
	SamplerParameterf(sampler uint32, pname uint32, param float32)
	SamplerParameterfv(sampler uint32, pname uint32, param *float32)
	SamplerParameterIiv(sampler uint32, pname uint32, param *int32)
	SamplerParameterIuiv(sampler uint32, pname uint32, param *uint32)
	GetSamplerParameteriv(sampler uint32, pname uint32, params *int32)
	GetSamplerParameterIiv(sampler uint32, pname uint32, params *int32)
	GetSamplerParameterfv(sampler uint32, pname uint32, params *float32)
	GetSamplerParameterIuiv(sampler uint32, pname uint32, params *uint32)
	UseProgramStages(pipeline uint32, stages uint32, program uint32)
	ActiveShaderProgram(pipeline uint32, program uint32)
	CreateShaderProgramv(type_ uint32, count int32, strings **uint8) uint32
	BindProgramPipeline(pipeline uint32)
	DeleteProgramPipelines(n int32, pipelines *uint32)
	GenProgramPipelines(n int32, pipelines *uint32)
	IsProgramPipeline(pipeline uint32) bool
	GetProgramPipelineiv(pipeline uint32, pname uint32, params *int32)
	ProgramUniform1i(program uint32, location int32, v0 int32)
	ProgramUniform1iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform1f(program uint32, location int32, v0 float32)
	ProgramUniform1fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform1d(program uint32, location int32, v0 float64)
	ProgramUniform1dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform1ui(program uint32, location int32, v0 uint32)
	ProgramUniform1uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32)
	ProgramUniform2iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32)
	ProgramUniform2fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform2d(program uint32, location int32, v0 float64, v1 float64)
	ProgramUniform2dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32)
	ProgramUniform2uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32)
	ProgramUniform3iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32)
	ProgramUniform3fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform3d(program uint32, location int32, v0 float64, v1 float64, v2 float64)
	ProgramUniform3dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32)
	ProgramUniform3uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	ProgramUniform4iv(program uint32, location int32, count int32, value *int32)
	ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	ProgramUniform4fv(program uint32, location int32, count int32, value *float32)
	ProgramUniform4d(program uint32, location int32, v0 float64, v1 float64, v2 float64, v3 float64)
	ProgramUniform4dv(program uint32, location int32, count int32, value *float64)
	ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	ProgramUniform4uiv(program uint32, location int32, count int32, value *uint32)
	ProgramUniformMatrix2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x2fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x4fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x3fv(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x2dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x4dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x3dv(program uint32, location int32, count int32, transpose bool, value *float64)
	ValidateProgramPipeline(pipeline uint32)
	GetProgramPipelineInfoLog(pipeline uint32, bufSize int32, length *int32, infoLog *uint8)
	GetActiveAtomicCounterBufferiv(program uint32, bufferIndex uint32, pname uint32, params *int32)
	BindImageTexture(unit uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format uint32)
	MemoryBarrier(barriers uint32)
	DeleteObjectARB(obj GLhandleARB)
	GetHandleARB(pname uint32) GLhandleARB
	DetachObjectARB(containerObj GLhandleARB, attachedObj GLhandleARB)
	CreateShaderObjectARB(shaderType uint32) GLhandleARB
	ShaderSourceARB(shaderObj GLhandleARB, count int32, string **uint8, length *int32)
	CompileShaderARB(shaderObj GLhandleARB)
	CreateProgramObjectARB() GLhandleARB
	AttachObjectARB(containerObj GLhandleARB, obj GLhandleARB)
	LinkProgramARB(programObj GLhandleARB)
	UseProgramObjectARB(programObj GLhandleARB)
	ValidateProgramARB(programObj GLhandleARB)
	Uniform1fARB(location int32, v0 float32)
	Uniform2fARB(location int32, v0 float32, v1 float32)
	Uniform3fARB(location int32, v0 float32, v1 float32, v2 float32)
	Uniform4fARB(location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	Uniform1iARB(location int32, v0 int32)
	Uniform2iARB(location int32, v0 int32, v1 int32)
	Uniform3iARB(location int32, v0 int32, v1 int32, v2 int32)
	Uniform4iARB(location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	Uniform1fvARB(location int32, count int32, value *float32)
	Uniform2fvARB(location int32, count int32, value *float32)
	Uniform3fvARB(location int32, count int32, value *float32)
	Uniform4fvARB(location int32, count int32, value *float32)
	Uniform1ivARB(location int32, count int32, value *int32)
	Uniform2ivARB(location int32, count int32, value *int32)
	Uniform3ivARB(location int32, count int32, value *int32)
	Uniform4ivARB(location int32, count int32, value *int32)
	UniformMatrix2fvARB(location int32, count int32, transpose bool, value *float32)
	UniformMatrix3fvARB(location int32, count int32, transpose bool, value *float32)
	UniformMatrix4fvARB(location int32, count int32, transpose bool, value *float32)
	GetObjectParameterfvARB(obj GLhandleARB, pname uint32, params *float32)
	GetObjectParameterivARB(obj GLhandleARB, pname uint32, params *int32)
	GetInfoLogARB(obj GLhandleARB, maxLength int32, length *int32, infoLog *uint8)
	GetAttachedObjectsARB(containerObj GLhandleARB, maxCount int32, count *int32, obj *GLhandleARB)
	GetUniformLocationARB(programObj GLhandleARB, name *uint8) int32
	GetActiveUniformARB(programObj GLhandleARB, index uint32, maxLength int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetUniformfvARB(programObj GLhandleARB, location int32, params *float32)
	GetUniformivARB(programObj GLhandleARB, location int32, params *int32)
	GetShaderSourceARB(obj GLhandleARB, maxLength int32, length *int32, source *uint8)
	ShaderStorageBlockBinding(program uint32, storageBlockIndex uint32, storageBlockBinding uint32)
	GetSubroutineUniformLocation(program uint32, shadertype uint32, name *uint8) int32
	GetSubroutineIndex(program uint32, shadertype uint32, name *uint8) uint32
	GetActiveSubroutineUniformiv(program uint32, shadertype uint32, index uint32, pname uint32, values *int32)
	GetActiveSubroutineUniformName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	GetActiveSubroutineName(program uint32, shadertype uint32, index uint32, bufSize int32, length *int32, name *uint8)
	UniformSubroutinesuiv(shadertype uint32, count int32, indices *uint32)
	GetUniformSubroutineuiv(shadertype uint32, location int32, params *uint32)
	GetProgramStageiv(program uint32, shadertype uint32, pname uint32, values *int32)
	NamedStringARB(type_ uint32, namelen int32, name *uint8, stringlen int32, string *uint8)
	DeleteNamedStringARB(namelen int32, name *uint8)
	CompileShaderIncludeARB(shader uint32, count int32, path **uint8, length *int32)
	IsNamedStringARB(namelen int32, name *uint8) bool
	GetNamedStringARB(namelen int32, name *uint8, bufSize int32, stringlen *int32, string *uint8)
	GetNamedStringivARB(namelen int32, name *uint8, pname uint32, params *int32)
	BufferPageCommitmentARB(target uint32, offset uintptr, size int, commit bool)
	NamedBufferPageCommitmentEXT(buffer uint32, offset uintptr, size int, commit bool)
	NamedBufferPageCommitmentARB(buffer uint32, offset uintptr, size int, commit bool)
	TexPageCommitmentARB(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, commit bool)
	FenceSync(condition uint32, flags uint32) GLsync
	IsSync(sync GLsync) bool
	DeleteSync(sync GLsync)
	ClientWaitSync(sync GLsync, flags uint32, timeout uint64) uint32
	WaitSync(sync GLsync, flags uint32, timeout uint64)
	GetInteger64v(pname uint32, data *int64)
	GetSynciv(sync GLsync, pname uint32, count int32, length *int32, values *int32)
	PatchParameteri(pname uint32, value int32)
	PatchParameterfv(pname uint32, values *float32)
	TextureBarrier()
	TexBufferARB(target uint32, internalformat uint32, buffer uint32)
	TexBufferRange(target uint32, internalformat uint32, buffer uint32, offset uintptr, size int)
	CompressedTexImage3DARB(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage2DARB(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexImage1DARB(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage3DARB(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage2DARB(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)
	CompressedTexSubImage1DARB(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)
	GetCompressedTexImageARB(target uint32, level int32, img unsafe.Pointer)
	TexImage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexImage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	GetMultisamplefv(pname uint32, index uint32, val *float32)
	SampleMaski(maskNumber uint32, mask uint32)
	TexStorage1D(target uint32, levels int32, internalformat uint32, width int32)
	TexStorage2D(target uint32, levels int32, internalformat uint32, width int32, height int32)
	TexStorage3D(target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32)
	TexStorage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TexStorage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	TextureView(texture uint32, target uint32, origtexture uint32, internalformat uint32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32)
	QueryCounter(id uint32, target uint32)
	GetQueryObjecti64v(id uint32, pname uint32, params *int64)
	GetQueryObjectui64v(id uint32, pname uint32, params *uint64)
	BindTransformFeedback(target uint32, id uint32)
	DeleteTransformFeedbacks(n int32, ids *uint32)
	GenTransformFeedbacks(n int32, ids *uint32)
	IsTransformFeedback(id uint32) bool
	PauseTransformFeedback()
	ResumeTransformFeedback()
	DrawTransformFeedback(mode uint32, id uint32)
	DrawTransformFeedbackStream(mode uint32, id uint32, stream uint32)
	BeginQueryIndexed(target uint32, index uint32, id uint32)
	EndQueryIndexed(target uint32, index uint32)
	GetQueryIndexediv(target uint32, index uint32, pname uint32, params *int32)
	DrawTransformFeedbackInstanced(mode uint32, id uint32, instancecount int32)
	DrawTransformFeedbackStreamInstanced(mode uint32, id uint32, stream uint32, instancecount int32)
	LoadTransposeMatrixfARB(m *float32)
	LoadTransposeMatrixdARB(m *float64)
	MultTransposeMatrixfARB(m *float32)
	MultTransposeMatrixdARB(m *float64)
	GetUniformIndices(program uint32, uniformCount int32, uniformNames **uint8, uniformIndices *uint32)
	GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32)
	GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *uint8)
	GetUniformBlockIndex(program uint32, uniformBlockName *uint8) uint32
	GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32)
	GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *uint8)
	UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)
	BindBufferRange(target uint32, index uint32, buffer uint32, offset uintptr, size int)
	BindBufferBase(target uint32, index uint32, buffer uint32)
	GetIntegeri_v(target uint32, index uint32, data *int32)
	BindVertexArray(array uint32)
	DeleteVertexArrays(n int32, arrays *uint32)
	GenVertexArrays(n int32, arrays *uint32)
	IsVertexArray(array uint32) bool
	VertexAttribL1d(index uint32, x float64)
	VertexAttribL2d(index uint32, x float64, y float64)
	VertexAttribL3d(index uint32, x float64, y float64, z float64)
	VertexAttribL4d(index uint32, x float64, y float64, z float64, w float64)
	VertexAttribL1dv(index uint32, v *float64)
	VertexAttribL2dv(index uint32, v *float64)
	VertexAttribL3dv(index uint32, v *float64)
	VertexAttribL4dv(index uint32, v *float64)
	VertexAttribLPointer(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	GetVertexAttribLdv(index uint32, pname uint32, params *float64)
	BindVertexBuffer(bindingindex uint32, buffer uint32, offset uintptr, stride int32)
	VertexAttribFormat(attribindex uint32, size int32, type_ uint32, normalized bool, relativeoffset uint32)
	VertexAttribIFormat(attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexAttribLFormat(attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexAttribBinding(attribindex uint32, bindingindex uint32)
	VertexBindingDivisor(bindingindex uint32, divisor uint32)
	WeightbvARB(size int32, weights *int8)
	WeightsvARB(size int32, weights *int16)
	WeightivARB(size int32, weights *int32)
	WeightfvARB(size int32, weights *float32)
	WeightdvARB(size int32, weights *float64)
	WeightubvARB(size int32, weights *uint8)
	WeightusvARB(size int32, weights *uint16)
	WeightuivARB(size int32, weights *uint32)
	WeightPointerARB(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexBlendARB(count int32)
	BindBufferARB(target uint32, buffer uint32)
	DeleteBuffersARB(n int32, buffers *uint32)
	GenBuffersARB(n int32, buffers *uint32)
	IsBufferARB(buffer uint32) bool
	BufferDataARB(target uint32, size int, data unsafe.Pointer, usage uint32)
	BufferSubDataARB(target uint32, offset uintptr, size int, data unsafe.Pointer)
	GetBufferSubDataARB(target uint32, offset uintptr, size int, data unsafe.Pointer)
	MapBufferARB(target uint32, access uint32) unsafe.Pointer
	UnmapBufferARB(target uint32) bool
	GetBufferParameterivARB(target uint32, pname uint32, params *int32)
	GetBufferPointervARB(target uint32, pname uint32, params *unsafe.Pointer)
	VertexAttrib1dARB(index uint32, x float64)
	VertexAttrib1dvARB(index uint32, v *float64)
	VertexAttrib1fARB(index uint32, x float32)
	VertexAttrib1fvARB(index uint32, v *float32)
	VertexAttrib1sARB(index uint32, x int16)
	VertexAttrib1svARB(index uint32, v *int16)
	VertexAttrib2dARB(index uint32, x float64, y float64)
	VertexAttrib2dvARB(index uint32, v *float64)
	VertexAttrib2fARB(index uint32, x float32, y float32)
	VertexAttrib2fvARB(index uint32, v *float32)
	VertexAttrib2sARB(index uint32, x int16, y int16)
	VertexAttrib2svARB(index uint32, v *int16)
	VertexAttrib3dARB(index uint32, x float64, y float64, z float64)
	VertexAttrib3dvARB(index uint32, v *float64)
	VertexAttrib3fARB(index uint32, x float32, y float32, z float32)
	VertexAttrib3fvARB(index uint32, v *float32)
	VertexAttrib3sARB(index uint32, x int16, y int16, z int16)
	VertexAttrib3svARB(index uint32, v *int16)
	VertexAttrib4NbvARB(index uint32, v *int8)
	VertexAttrib4NivARB(index uint32, v *int32)
	VertexAttrib4NsvARB(index uint32, v *int16)
	VertexAttrib4NubARB(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4NubvARB(index uint32, v *uint8)
	VertexAttrib4NuivARB(index uint32, v *uint32)
	VertexAttrib4NusvARB(index uint32, v *uint16)
	VertexAttrib4bvARB(index uint32, v *int8)
	VertexAttrib4dARB(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dvARB(index uint32, v *float64)
	VertexAttrib4fARB(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fvARB(index uint32, v *float32)
	VertexAttrib4ivARB(index uint32, v *int32)
	VertexAttrib4sARB(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4svARB(index uint32, v *int16)
	VertexAttrib4ubvARB(index uint32, v *uint8)
	VertexAttrib4uivARB(index uint32, v *uint32)
	VertexAttrib4usvARB(index uint32, v *uint16)
	VertexAttribPointerARB(index uint32, size int32, type_ uint32, normalized bool, stride int32, pointer unsafe.Pointer)
	EnableVertexAttribArrayARB(index uint32)
	DisableVertexAttribArrayARB(index uint32)
	GetVertexAttribdvARB(index uint32, pname uint32, params *float64)
	GetVertexAttribfvARB(index uint32, pname uint32, params *float32)
	GetVertexAttribivARB(index uint32, pname uint32, params *int32)
	GetVertexAttribPointervARB(index uint32, pname uint32, pointer *unsafe.Pointer)
	BindAttribLocationARB(programObj GLhandleARB, index uint32, name *uint8)
	GetActiveAttribARB(programObj GLhandleARB, index uint32, maxLength int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetAttribLocationARB(programObj GLhandleARB, name *uint8) int32
	VertexAttribP1ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP1uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP2ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP2uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP3ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP3uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexAttribP4ui(index uint32, type_ uint32, normalized bool, value uint32)
	VertexAttribP4uiv(index uint32, type_ uint32, normalized bool, value *uint32)
	VertexP2ui(type_ uint32, value uint32)
	VertexP2uiv(type_ uint32, value *uint32)
	VertexP3ui(type_ uint32, value uint32)
	VertexP3uiv(type_ uint32, value *uint32)
	VertexP4ui(type_ uint32, value uint32)
	VertexP4uiv(type_ uint32, value *uint32)
	TexCoordP1ui(type_ uint32, coords uint32)
	TexCoordP1uiv(type_ uint32, coords *uint32)
	TexCoordP2ui(type_ uint32, coords uint32)
	TexCoordP2uiv(type_ uint32, coords *uint32)
	TexCoordP3ui(type_ uint32, coords uint32)
	TexCoordP3uiv(type_ uint32, coords *uint32)
	TexCoordP4ui(type_ uint32, coords uint32)
	TexCoordP4uiv(type_ uint32, coords *uint32)
	MultiTexCoordP1ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP1uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP2ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP2uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP3ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP3uiv(texture uint32, type_ uint32, coords *uint32)
	MultiTexCoordP4ui(texture uint32, type_ uint32, coords uint32)
	MultiTexCoordP4uiv(texture uint32, type_ uint32, coords *uint32)
	NormalP3ui(type_ uint32, coords uint32)
	NormalP3uiv(type_ uint32, coords *uint32)
	ColorP3ui(type_ uint32, color uint32)
	ColorP3uiv(type_ uint32, color *uint32)
	ColorP4ui(type_ uint32, color uint32)
	ColorP4uiv(type_ uint32, color *uint32)
	SecondaryColorP3ui(type_ uint32, color uint32)
	SecondaryColorP3uiv(type_ uint32, color *uint32)
	ViewportArrayv(first uint32, count int32, v *float32)
	ViewportIndexedf(index uint32, x float32, y float32, w float32, h float32)
	ViewportIndexedfv(index uint32, v *float32)
	ScissorArrayv(first uint32, count int32, v *int32)
	ScissorIndexed(index uint32, left int32, bottom int32, width int32, height int32)
	ScissorIndexedv(index uint32, v *int32)
	DepthRangeArrayv(first uint32, count int32, v *float64)
	DepthRangeIndexed(index uint32, n float64, f float64)
	GetFloati_v(target uint32, index uint32, data *float32)
	GetDoublei_v(target uint32, index uint32, data *float64)
	DepthRangeArraydvNV(first uint32, count int32, v *float64)
	DepthRangeIndexeddNV(index uint32, n float64, f float64)
	WindowPos2dARB(x float64, y float64)
	WindowPos2dvARB(v *float64)
	WindowPos2fARB(x float32, y float32)
	WindowPos2fvARB(v *float32)
	WindowPos2iARB(x int32, y int32)
	WindowPos2ivARB(v *int32)
	WindowPos2sARB(x int16, y int16)
	WindowPos2svARB(v *int16)
	WindowPos3dARB(x float64, y float64, z float64)
	WindowPos3dvARB(v *float64)
	WindowPos3fARB(x float32, y float32, z float32)
	WindowPos3fvARB(v *float32)
	WindowPos3iARB(x int32, y int32, z int32)
	WindowPos3ivARB(v *int32)
	WindowPos3sARB(x int16, y int16, z int16)
	WindowPos3svARB(v *int16)
	DrawBuffersATI(n int32, bufs *uint32)
	ElementPointerATI(type_ uint32, pointer unsafe.Pointer)
	DrawElementArrayATI(mode uint32, count int32)
	DrawRangeElementArrayATI(mode uint32, start uint32, end uint32, count int32)
	TexBumpParameterivATI(pname uint32, param *int32)
	TexBumpParameterfvATI(pname uint32, param *float32)
	GetTexBumpParameterivATI(pname uint32, param *int32)
	GetTexBumpParameterfvATI(pname uint32, param *float32)
	GenFragmentShadersATI(range_ uint32) uint32
	BindFragmentShaderATI(id uint32)
	DeleteFragmentShaderATI(id uint32)
	BeginFragmentShaderATI()
	EndFragmentShaderATI()
	PassTexCoordATI(dst uint32, coord uint32, swizzle uint32)
	SampleMapATI(dst uint32, interp uint32, swizzle uint32)
	ColorFragmentOp1ATI(op uint32, dst uint32, dstMask uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32)
	ColorFragmentOp2ATI(op uint32, dst uint32, dstMask uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32)
	ColorFragmentOp3ATI(op uint32, dst uint32, dstMask uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32, arg3 uint32, arg3Rep uint32, arg3Mod uint32)
	AlphaFragmentOp1ATI(op uint32, dst uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32)
	AlphaFragmentOp2ATI(op uint32, dst uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32)
	AlphaFragmentOp3ATI(op uint32, dst uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32, arg3 uint32, arg3Rep uint32, arg3Mod uint32)
	SetFragmentShaderConstantATI(dst uint32, value *float32)
	MapObjectBufferATI(buffer uint32) unsafe.Pointer
	UnmapObjectBufferATI(buffer uint32)
	PNTrianglesiATI(pname uint32, param int32)
	PNTrianglesfATI(pname uint32, param float32)
	StencilOpSeparateATI(face uint32, sfail uint32, dpfail uint32, dppass uint32)
	StencilFuncSeparateATI(frontfunc uint32, backfunc uint32, ref int32, mask uint32)
	NewObjectBufferATI(size int32, pointer unsafe.Pointer, usage uint32) uint32
	IsObjectBufferATI(buffer uint32) bool
	UpdateObjectBufferATI(buffer uint32, offset uint32, size int32, pointer unsafe.Pointer, preserve uint32)
	GetObjectBufferfvATI(buffer uint32, pname uint32, params *float32)
	GetObjectBufferivATI(buffer uint32, pname uint32, params *int32)
	FreeObjectBufferATI(buffer uint32)
	ArrayObjectATI(array uint32, size int32, type_ uint32, stride int32, buffer uint32, offset uint32)
	GetArrayObjectfvATI(array uint32, pname uint32, params *float32)
	GetArrayObjectivATI(array uint32, pname uint32, params *int32)
	VariantArrayObjectATI(id uint32, type_ uint32, stride int32, buffer uint32, offset uint32)
	GetVariantArrayObjectfvATI(id uint32, pname uint32, params *float32)
	GetVariantArrayObjectivATI(id uint32, pname uint32, params *int32)
	VertexAttribArrayObjectATI(index uint32, size int32, type_ uint32, normalized bool, stride int32, buffer uint32, offset uint32)
	GetVertexAttribArrayObjectfvATI(index uint32, pname uint32, params *float32)
	GetVertexAttribArrayObjectivATI(index uint32, pname uint32, params *int32)
	VertexStream1sATI(stream uint32, x int16)
	VertexStream1svATI(stream uint32, coords *int16)
	VertexStream1iATI(stream uint32, x int32)
	VertexStream1ivATI(stream uint32, coords *int32)
	VertexStream1fATI(stream uint32, x float32)
	VertexStream1fvATI(stream uint32, coords *float32)
	VertexStream1dATI(stream uint32, x float64)
	VertexStream1dvATI(stream uint32, coords *float64)
	VertexStream2sATI(stream uint32, x int16, y int16)
	VertexStream2svATI(stream uint32, coords *int16)
	VertexStream2iATI(stream uint32, x int32, y int32)
	VertexStream2ivATI(stream uint32, coords *int32)
	VertexStream2fATI(stream uint32, x float32, y float32)
	VertexStream2fvATI(stream uint32, coords *float32)
	VertexStream2dATI(stream uint32, x float64, y float64)
	VertexStream2dvATI(stream uint32, coords *float64)
	VertexStream3sATI(stream uint32, x int16, y int16, z int16)
	VertexStream3svATI(stream uint32, coords *int16)
	VertexStream3iATI(stream uint32, x int32, y int32, z int32)
	VertexStream3ivATI(stream uint32, coords *int32)
	VertexStream3fATI(stream uint32, x float32, y float32, z float32)
	VertexStream3fvATI(stream uint32, coords *float32)
	VertexStream3dATI(stream uint32, x float64, y float64, z float64)
	VertexStream3dvATI(stream uint32, coords *float64)
	VertexStream4sATI(stream uint32, x int16, y int16, z int16, w int16)
	VertexStream4svATI(stream uint32, coords *int16)
	VertexStream4iATI(stream uint32, x int32, y int32, z int32, w int32)
	VertexStream4ivATI(stream uint32, coords *int32)
	VertexStream4fATI(stream uint32, x float32, y float32, z float32, w float32)
	VertexStream4fvATI(stream uint32, coords *float32)
	VertexStream4dATI(stream uint32, x float64, y float64, z float64, w float64)
	VertexStream4dvATI(stream uint32, coords *float64)
	NormalStream3bATI(stream uint32, nx int8, ny int8, nz int8)
	NormalStream3bvATI(stream uint32, coords *int8)
	NormalStream3sATI(stream uint32, nx int16, ny int16, nz int16)
	NormalStream3svATI(stream uint32, coords *int16)
	NormalStream3iATI(stream uint32, nx int32, ny int32, nz int32)
	NormalStream3ivATI(stream uint32, coords *int32)
	NormalStream3fATI(stream uint32, nx float32, ny float32, nz float32)
	NormalStream3fvATI(stream uint32, coords *float32)
	NormalStream3dATI(stream uint32, nx float64, ny float64, nz float64)
	NormalStream3dvATI(stream uint32, coords *float64)
	ClientActiveVertexStreamATI(stream uint32)
	VertexBlendEnviATI(pname uint32, param int32)
	VertexBlendEnvfATI(pname uint32, param float32)
	UniformBufferEXT(program uint32, location int32, buffer uint32)
	GetUniformBufferSizeEXT(program uint32, location int32) int32
	GetUniformOffsetEXT(program uint32, location int32) uintptr
	BlendColorEXT(red float32, green float32, blue float32, alpha float32)
	BlendEquationSeparateEXT(modeRGB uint32, modeAlpha uint32)
	BlendFuncSeparateEXT(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	BlendEquationEXT(mode uint32)
	ColorSubTableEXT(target uint32, start int32, count int32, format uint32, type_ uint32, data unsafe.Pointer)
	CopyColorSubTableEXT(target uint32, start int32, x int32, y int32, width int32)
	LockArraysEXT(first int32, count int32)
	UnlockArraysEXT()
	ConvolutionFilter1DEXT(target uint32, internalformat uint32, width int32, format uint32, type_ uint32, image unsafe.Pointer)
	ConvolutionFilter2DEXT(target uint32, internalformat uint32, width int32, height int32, format uint32, type_ uint32, image unsafe.Pointer)
	ConvolutionParameterfEXT(target uint32, pname uint32, params float32)
	ConvolutionParameterfvEXT(target uint32, pname uint32, params *float32)
	ConvolutionParameteriEXT(target uint32, pname uint32, params int32)
	ConvolutionParameterivEXT(target uint32, pname uint32, params *int32)
	CopyConvolutionFilter1DEXT(target uint32, internalformat uint32, x int32, y int32, width int32)
	CopyConvolutionFilter2DEXT(target uint32, internalformat uint32, x int32, y int32, width int32, height int32)
	GetConvolutionFilterEXT(target uint32, format uint32, type_ uint32, image unsafe.Pointer)
	GetConvolutionParameterfvEXT(target uint32, pname uint32, params *float32)
	GetConvolutionParameterivEXT(target uint32, pname uint32, params *int32)
	GetSeparableFilterEXT(target uint32, format uint32, type_ uint32, row unsafe.Pointer, column unsafe.Pointer, span unsafe.Pointer)
	SeparableFilter2DEXT(target uint32, internalformat uint32, width int32, height int32, format uint32, type_ uint32, row unsafe.Pointer, column unsafe.Pointer)
	Tangent3bEXT(tx int8, ty int8, tz int8)
	Tangent3bvEXT(v *int8)
	Tangent3dEXT(tx float64, ty float64, tz float64)
	Tangent3dvEXT(v *float64)
	Tangent3fEXT(tx float32, ty float32, tz float32)
	Tangent3fvEXT(v *float32)
	Tangent3iEXT(tx int32, ty int32, tz int32)
	Tangent3ivEXT(v *int32)
	Tangent3sEXT(tx int16, ty int16, tz int16)
	Tangent3svEXT(v *int16)
	Binormal3bEXT(bx int8, by int8, bz int8)
	Binormal3bvEXT(v *int8)
	Binormal3dEXT(bx float64, by float64, bz float64)
	Binormal3dvEXT(v *float64)
	Binormal3fEXT(bx float32, by float32, bz float32)
	Binormal3fvEXT(v *float32)
	Binormal3iEXT(bx int32, by int32, bz int32)
	Binormal3ivEXT(v *int32)
	Binormal3sEXT(bx int16, by int16, bz int16)
	Binormal3svEXT(v *int16)
	TangentPointerEXT(type_ uint32, stride int32, pointer unsafe.Pointer)
	BinormalPointerEXT(type_ uint32, stride int32, pointer unsafe.Pointer)
	CopyTexImage1DEXT(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTexImage2DEXT(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTexSubImage1DEXT(target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTexSubImage2DEXT(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	CopyTexSubImage3DEXT(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	CullParameterdvEXT(pname uint32, params *float64)
	CullParameterfvEXT(pname uint32, params *float32)
	LabelObjectEXT(type_ uint32, object uint32, length int32, label *uint8)
	GetObjectLabelEXT(type_ uint32, object uint32, bufSize int32, length *int32, label *uint8)
	InsertEventMarkerEXT(length int32, marker *uint8)
	PushGroupMarkerEXT(length int32, marker *uint8)
	PopGroupMarkerEXT()
	DepthBoundsEXT(zmin float64, zmax float64)
	MatrixLoadfEXT(mode uint32, m *float32)
	MatrixLoaddEXT(mode uint32, m *float64)
	MatrixMultfEXT(mode uint32, m *float32)
	MatrixMultdEXT(mode uint32, m *float64)
	MatrixLoadIdentityEXT(mode uint32)
	MatrixRotatefEXT(mode uint32, angle float32, x float32, y float32, z float32)
	MatrixRotatedEXT(mode uint32, angle float64, x float64, y float64, z float64)
	MatrixScalefEXT(mode uint32, x float32, y float32, z float32)
	MatrixScaledEXT(mode uint32, x float64, y float64, z float64)
	MatrixTranslatefEXT(mode uint32, x float32, y float32, z float32)
	MatrixTranslatedEXT(mode uint32, x float64, y float64, z float64)
	MatrixFrustumEXT(mode uint32, left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	MatrixOrthoEXT(mode uint32, left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)
	MatrixPopEXT(mode uint32)
	MatrixPushEXT(mode uint32)
	ClientAttribDefaultEXT(mask uint32)
	PushClientAttribDefaultEXT(mask uint32)
	TextureParameterfEXT(texture uint32, target uint32, pname uint32, param float32)
	TextureParameterfvEXT(texture uint32, target uint32, pname uint32, params *float32)
	TextureParameteriEXT(texture uint32, target uint32, pname uint32, param int32)
	TextureParameterivEXT(texture uint32, target uint32, pname uint32, params *int32)
	TextureImage1DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureImage2DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	CopyTextureImage1DEXT(texture uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyTextureImage2DEXT(texture uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyTextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyTextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	GetTextureImageEXT(texture uint32, target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetTextureParameterfvEXT(texture uint32, target uint32, pname uint32, params *float32)
	GetTextureParameterivEXT(texture uint32, target uint32, pname uint32, params *int32)
	GetTextureLevelParameterfvEXT(texture uint32, target uint32, level int32, pname uint32, params *float32)
	GetTextureLevelParameterivEXT(texture uint32, target uint32, level int32, pname uint32, params *int32)
	TextureImage3DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	CopyTextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	BindMultiTextureEXT(texunit uint32, target uint32, texture uint32)
	MultiTexCoordPointerEXT(texunit uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	MultiTexEnvfEXT(texunit uint32, target uint32, pname uint32, param float32)
	MultiTexEnvfvEXT(texunit uint32, target uint32, pname uint32, params *float32)
	MultiTexEnviEXT(texunit uint32, target uint32, pname uint32, param int32)
	MultiTexEnvivEXT(texunit uint32, target uint32, pname uint32, params *int32)
	MultiTexGendEXT(texunit uint32, coord uint32, pname uint32, param float64)
	MultiTexGendvEXT(texunit uint32, coord uint32, pname uint32, params *float64)
	MultiTexGenfEXT(texunit uint32, coord uint32, pname uint32, param float32)
	MultiTexGenfvEXT(texunit uint32, coord uint32, pname uint32, params *float32)
	MultiTexGeniEXT(texunit uint32, coord uint32, pname uint32, param int32)
	MultiTexGenivEXT(texunit uint32, coord uint32, pname uint32, params *int32)
	GetMultiTexEnvfvEXT(texunit uint32, target uint32, pname uint32, params *float32)
	GetMultiTexEnvivEXT(texunit uint32, target uint32, pname uint32, params *int32)
	GetMultiTexGendvEXT(texunit uint32, coord uint32, pname uint32, params *float64)
	GetMultiTexGenfvEXT(texunit uint32, coord uint32, pname uint32, params *float32)
	GetMultiTexGenivEXT(texunit uint32, coord uint32, pname uint32, params *int32)
	MultiTexParameteriEXT(texunit uint32, target uint32, pname uint32, param int32)
	MultiTexParameterivEXT(texunit uint32, target uint32, pname uint32, params *int32)
	MultiTexParameterfEXT(texunit uint32, target uint32, pname uint32, param float32)
	MultiTexParameterfvEXT(texunit uint32, target uint32, pname uint32, params *float32)
	MultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	MultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	MultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	MultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	CopyMultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)
	CopyMultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)
	CopyMultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, x int32, y int32, width int32)
	CopyMultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)
	GetMultiTexImageEXT(texunit uint32, target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	GetMultiTexParameterfvEXT(texunit uint32, target uint32, pname uint32, params *float32)
	GetMultiTexParameterivEXT(texunit uint32, target uint32, pname uint32, params *int32)
	GetMultiTexLevelParameterfvEXT(texunit uint32, target uint32, level int32, pname uint32, params *float32)
	GetMultiTexLevelParameterivEXT(texunit uint32, target uint32, level int32, pname uint32, params *int32)
	MultiTexImage3DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	MultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	CopyMultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)
	EnableClientStateIndexedEXT(array uint32, index uint32)
	DisableClientStateIndexedEXT(array uint32, index uint32)
	GetFloatIndexedvEXT(target uint32, index uint32, data *float32)
	GetDoubleIndexedvEXT(target uint32, index uint32, data *float64)
	GetPointerIndexedvEXT(target uint32, index uint32, data *unsafe.Pointer)
	EnableIndexedEXT(target uint32, index uint32)
	DisableIndexedEXT(target uint32, index uint32)
	IsEnabledIndexedEXT(target uint32, index uint32) bool
	GetIntegerIndexedvEXT(target uint32, index uint32, data *int32)
	GetBooleanIndexedvEXT(target uint32, index uint32, data *bool)
	CompressedTextureImage3DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, bits unsafe.Pointer)
	CompressedTextureImage2DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, bits unsafe.Pointer)
	CompressedTextureImage1DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, bits unsafe.Pointer)
	CompressedTextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, bits unsafe.Pointer)
	CompressedTextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, bits unsafe.Pointer)
	CompressedTextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, bits unsafe.Pointer)
	GetCompressedTextureImageEXT(texture uint32, target uint32, lod int32, img unsafe.Pointer)
	CompressedMultiTexImage3DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, bits unsafe.Pointer)
	CompressedMultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, bits unsafe.Pointer)
	CompressedMultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, bits unsafe.Pointer)
	CompressedMultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, bits unsafe.Pointer)
	CompressedMultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, bits unsafe.Pointer)
	CompressedMultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, bits unsafe.Pointer)
	GetCompressedMultiTexImageEXT(texunit uint32, target uint32, lod int32, img unsafe.Pointer)
	MatrixLoadTransposefEXT(mode uint32, m *float32)
	MatrixLoadTransposedEXT(mode uint32, m *float64)
	MatrixMultTransposefEXT(mode uint32, m *float32)
	MatrixMultTransposedEXT(mode uint32, m *float64)
	NamedBufferDataEXT(buffer uint32, size int, data unsafe.Pointer, usage uint32)
	NamedBufferSubDataEXT(buffer uint32, offset uintptr, size int, data unsafe.Pointer)
	MapNamedBufferEXT(buffer uint32, access uint32) unsafe.Pointer
	UnmapNamedBufferEXT(buffer uint32) bool
	GetNamedBufferParameterivEXT(buffer uint32, pname uint32, params *int32)
	GetNamedBufferPointervEXT(buffer uint32, pname uint32, params *unsafe.Pointer)
	GetNamedBufferSubDataEXT(buffer uint32, offset uintptr, size int, data unsafe.Pointer)
	ProgramUniform1fEXT(program uint32, location int32, v0 float32)
	ProgramUniform2fEXT(program uint32, location int32, v0 float32, v1 float32)
	ProgramUniform3fEXT(program uint32, location int32, v0 float32, v1 float32, v2 float32)
	ProgramUniform4fEXT(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32)
	ProgramUniform1iEXT(program uint32, location int32, v0 int32)
	ProgramUniform2iEXT(program uint32, location int32, v0 int32, v1 int32)
	ProgramUniform3iEXT(program uint32, location int32, v0 int32, v1 int32, v2 int32)
	ProgramUniform4iEXT(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32)
	ProgramUniform1fvEXT(program uint32, location int32, count int32, value *float32)
	ProgramUniform2fvEXT(program uint32, location int32, count int32, value *float32)
	ProgramUniform3fvEXT(program uint32, location int32, count int32, value *float32)
	ProgramUniform4fvEXT(program uint32, location int32, count int32, value *float32)
	ProgramUniform1ivEXT(program uint32, location int32, count int32, value *int32)
	ProgramUniform2ivEXT(program uint32, location int32, count int32, value *int32)
	ProgramUniform3ivEXT(program uint32, location int32, count int32, value *int32)
	ProgramUniform4ivEXT(program uint32, location int32, count int32, value *int32)
	ProgramUniformMatrix2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix2x4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix3x4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32)
	ProgramUniformMatrix4x3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32)
	TextureBufferEXT(texture uint32, target uint32, internalformat uint32, buffer uint32)
	MultiTexBufferEXT(texunit uint32, target uint32, internalformat uint32, buffer uint32)
	TextureParameterIivEXT(texture uint32, target uint32, pname uint32, params *int32)
	TextureParameterIuivEXT(texture uint32, target uint32, pname uint32, params *uint32)
	GetTextureParameterIivEXT(texture uint32, target uint32, pname uint32, params *int32)
	GetTextureParameterIuivEXT(texture uint32, target uint32, pname uint32, params *uint32)
	MultiTexParameterIivEXT(texunit uint32, target uint32, pname uint32, params *int32)
	MultiTexParameterIuivEXT(texunit uint32, target uint32, pname uint32, params *uint32)
	GetMultiTexParameterIivEXT(texunit uint32, target uint32, pname uint32, params *int32)
	GetMultiTexParameterIuivEXT(texunit uint32, target uint32, pname uint32, params *uint32)
	ProgramUniform1uiEXT(program uint32, location int32, v0 uint32)
	ProgramUniform2uiEXT(program uint32, location int32, v0 uint32, v1 uint32)
	ProgramUniform3uiEXT(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32)
	ProgramUniform4uiEXT(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	ProgramUniform1uivEXT(program uint32, location int32, count int32, value *uint32)
	ProgramUniform2uivEXT(program uint32, location int32, count int32, value *uint32)
	ProgramUniform3uivEXT(program uint32, location int32, count int32, value *uint32)
	ProgramUniform4uivEXT(program uint32, location int32, count int32, value *uint32)
	NamedProgramLocalParameters4fvEXT(program uint32, target uint32, index uint32, count int32, params *float32)
	NamedProgramLocalParameterI4iEXT(program uint32, target uint32, index uint32, x int32, y int32, z int32, w int32)
	NamedProgramLocalParameterI4ivEXT(program uint32, target uint32, index uint32, params *int32)
	NamedProgramLocalParametersI4ivEXT(program uint32, target uint32, index uint32, count int32, params *int32)
	NamedProgramLocalParameterI4uiEXT(program uint32, target uint32, index uint32, x uint32, y uint32, z uint32, w uint32)
	NamedProgramLocalParameterI4uivEXT(program uint32, target uint32, index uint32, params *uint32)
	NamedProgramLocalParametersI4uivEXT(program uint32, target uint32, index uint32, count int32, params *uint32)
	GetNamedProgramLocalParameterIivEXT(program uint32, target uint32, index uint32, params *int32)
	GetNamedProgramLocalParameterIuivEXT(program uint32, target uint32, index uint32, params *uint32)
	EnableClientStateiEXT(array uint32, index uint32)
	DisableClientStateiEXT(array uint32, index uint32)
	GetFloati_vEXT(pname uint32, index uint32, params *float32)
	GetDoublei_vEXT(pname uint32, index uint32, params *float64)
	GetPointeri_vEXT(pname uint32, index uint32, params *unsafe.Pointer)
	NamedProgramStringEXT(program uint32, target uint32, format uint32, len int32, string unsafe.Pointer)
	NamedProgramLocalParameter4dEXT(program uint32, target uint32, index uint32, x float64, y float64, z float64, w float64)
	NamedProgramLocalParameter4dvEXT(program uint32, target uint32, index uint32, params *float64)
	NamedProgramLocalParameter4fEXT(program uint32, target uint32, index uint32, x float32, y float32, z float32, w float32)
	NamedProgramLocalParameter4fvEXT(program uint32, target uint32, index uint32, params *float32)
	GetNamedProgramLocalParameterdvEXT(program uint32, target uint32, index uint32, params *float64)
	GetNamedProgramLocalParameterfvEXT(program uint32, target uint32, index uint32, params *float32)
	GetNamedProgramivEXT(program uint32, target uint32, pname uint32, params *int32)
	GetNamedProgramStringEXT(program uint32, target uint32, pname uint32, string unsafe.Pointer)
	NamedRenderbufferStorageEXT(renderbuffer uint32, internalformat uint32, width int32, height int32)
	GetNamedRenderbufferParameterivEXT(renderbuffer uint32, pname uint32, params *int32)
	NamedRenderbufferStorageMultisampleEXT(renderbuffer uint32, samples int32, internalformat uint32, width int32, height int32)
	NamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer uint32, coverageSamples int32, colorSamples int32, internalformat uint32, width int32, height int32)
	CheckNamedFramebufferStatusEXT(framebuffer uint32, target uint32) uint32
	NamedFramebufferTexture1DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	NamedFramebufferTexture2DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	NamedFramebufferTexture3DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32)
	NamedFramebufferRenderbufferEXT(framebuffer uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	GetNamedFramebufferAttachmentParameterivEXT(framebuffer uint32, attachment uint32, pname uint32, params *int32)
	GenerateTextureMipmapEXT(texture uint32, target uint32)
	GenerateMultiTexMipmapEXT(texunit uint32, target uint32)
	FramebufferDrawBufferEXT(framebuffer uint32, mode uint32)
	FramebufferDrawBuffersEXT(framebuffer uint32, n int32, bufs *uint32)
	FramebufferReadBufferEXT(framebuffer uint32, mode uint32)
	GetFramebufferParameterivEXT(framebuffer uint32, pname uint32, params *int32)
	NamedCopyBufferSubDataEXT(readBuffer uint32, writeBuffer uint32, readOffset uintptr, writeOffset uintptr, size int)
	NamedFramebufferTextureEXT(framebuffer uint32, attachment uint32, texture uint32, level int32)
	NamedFramebufferTextureLayerEXT(framebuffer uint32, attachment uint32, texture uint32, level int32, layer int32)
	NamedFramebufferTextureFaceEXT(framebuffer uint32, attachment uint32, texture uint32, level int32, face uint32)
	TextureRenderbufferEXT(texture uint32, target uint32, renderbuffer uint32)
	MultiTexRenderbufferEXT(texunit uint32, target uint32, renderbuffer uint32)
	VertexArrayVertexOffsetEXT(vaobj uint32, buffer uint32, size int32, type_ uint32, stride int32, offset uintptr)
	VertexArrayColorOffsetEXT(vaobj uint32, buffer uint32, size int32, type_ uint32, stride int32, offset uintptr)
	VertexArrayEdgeFlagOffsetEXT(vaobj uint32, buffer uint32, stride int32, offset uintptr)
	VertexArrayIndexOffsetEXT(vaobj uint32, buffer uint32, type_ uint32, stride int32, offset uintptr)
	VertexArrayNormalOffsetEXT(vaobj uint32, buffer uint32, type_ uint32, stride int32, offset uintptr)
	VertexArrayTexCoordOffsetEXT(vaobj uint32, buffer uint32, size int32, type_ uint32, stride int32, offset uintptr)
	VertexArrayMultiTexCoordOffsetEXT(vaobj uint32, buffer uint32, texunit uint32, size int32, type_ uint32, stride int32, offset uintptr)
	VertexArrayFogCoordOffsetEXT(vaobj uint32, buffer uint32, type_ uint32, stride int32, offset uintptr)
	VertexArraySecondaryColorOffsetEXT(vaobj uint32, buffer uint32, size int32, type_ uint32, stride int32, offset uintptr)
	VertexArrayVertexAttribOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, type_ uint32, normalized bool, stride int32, offset uintptr)
	VertexArrayVertexAttribIOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, type_ uint32, stride int32, offset uintptr)
	EnableVertexArrayEXT(vaobj uint32, array uint32)
	DisableVertexArrayEXT(vaobj uint32, array uint32)
	EnableVertexArrayAttribEXT(vaobj uint32, index uint32)
	DisableVertexArrayAttribEXT(vaobj uint32, index uint32)
	GetVertexArrayIntegervEXT(vaobj uint32, pname uint32, param *int32)
	GetVertexArrayPointervEXT(vaobj uint32, pname uint32, param *unsafe.Pointer)
	GetVertexArrayIntegeri_vEXT(vaobj uint32, index uint32, pname uint32, param *int32)
	GetVertexArrayPointeri_vEXT(vaobj uint32, index uint32, pname uint32, param *unsafe.Pointer)
	MapNamedBufferRangeEXT(buffer uint32, offset uintptr, length int, access uint32) unsafe.Pointer
	FlushMappedNamedBufferRangeEXT(buffer uint32, offset uintptr, length int)
	NamedBufferStorageEXT(buffer uint32, size int, data unsafe.Pointer, flags uint32)
	ClearNamedBufferDataEXT(buffer uint32, internalformat uint32, format uint32, type_ uint32, data unsafe.Pointer)
	ClearNamedBufferSubDataEXT(buffer uint32, internalformat uint32, offset int, size int, format uint32, type_ uint32, data unsafe.Pointer)
	NamedFramebufferParameteriEXT(framebuffer uint32, pname uint32, param int32)
	GetNamedFramebufferParameterivEXT(framebuffer uint32, pname uint32, params *int32)
	ProgramUniform1dEXT(program uint32, location int32, x float64)
	ProgramUniform2dEXT(program uint32, location int32, x float64, y float64)
	ProgramUniform3dEXT(program uint32, location int32, x float64, y float64, z float64)
	ProgramUniform4dEXT(program uint32, location int32, x float64, y float64, z float64, w float64)
	ProgramUniform1dvEXT(program uint32, location int32, count int32, value *float64)
	ProgramUniform2dvEXT(program uint32, location int32, count int32, value *float64)
	ProgramUniform3dvEXT(program uint32, location int32, count int32, value *float64)
	ProgramUniform4dvEXT(program uint32, location int32, count int32, value *float64)
	ProgramUniformMatrix2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix2x4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix3x4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64)
	ProgramUniformMatrix4x3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64)
	TextureBufferRangeEXT(texture uint32, target uint32, internalformat uint32, buffer uint32, offset uintptr, size int)
	TextureStorage1DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32)
	TextureStorage2DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32, height int32)
	TextureStorage3DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32)
	TextureStorage2DMultisampleEXT(texture uint32, target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool)
	TextureStorage3DMultisampleEXT(texture uint32, target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool)
	VertexArrayBindVertexBufferEXT(vaobj uint32, bindingindex uint32, buffer uint32, offset uintptr, stride int32)
	VertexArrayVertexAttribFormatEXT(vaobj uint32, attribindex uint32, size int32, type_ uint32, normalized bool, relativeoffset uint32)
	VertexArrayVertexAttribIFormatEXT(vaobj uint32, attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexArrayVertexAttribLFormatEXT(vaobj uint32, attribindex uint32, size int32, type_ uint32, relativeoffset uint32)
	VertexArrayVertexAttribBindingEXT(vaobj uint32, attribindex uint32, bindingindex uint32)
	VertexArrayVertexBindingDivisorEXT(vaobj uint32, bindingindex uint32, divisor uint32)
	VertexArrayVertexAttribLOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, type_ uint32, stride int32, offset uintptr)
	TexturePageCommitmentEXT(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, commit bool)
	VertexArrayVertexAttribDivisorEXT(vaobj uint32, index uint32, divisor uint32)
	ColorMaskIndexedEXT(index uint32, r bool, g bool, b bool, a bool)
	DrawArraysInstancedEXT(mode uint32, start int32, count int32, primcount int32)
	DrawElementsInstancedEXT(mode uint32, count int32, type_ uint32, indices unsafe.Pointer, primcount int32)
	DrawRangeElementsEXT(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)
	FogCoordfEXT(coord float32)
	FogCoordfvEXT(coord *float32)
	FogCoorddEXT(coord float64)
	FogCoorddvEXT(coord *float64)
	FogCoordPointerEXT(type_ uint32, stride int32, pointer unsafe.Pointer)
	BlitFramebufferEXT(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	RenderbufferStorageMultisampleEXT(target uint32, samples int32, internalformat uint32, width int32, height int32)
	IsRenderbufferEXT(renderbuffer uint32) bool
	BindRenderbufferEXT(target uint32, renderbuffer uint32)
	DeleteRenderbuffersEXT(n int32, renderbuffers *uint32)
	GenRenderbuffersEXT(n int32, renderbuffers *uint32)
	RenderbufferStorageEXT(target uint32, internalformat uint32, width int32, height int32)
	GetRenderbufferParameterivEXT(target uint32, pname uint32, params *int32)
	IsFramebufferEXT(framebuffer uint32) bool
	BindFramebufferEXT(target uint32, framebuffer uint32)
	DeleteFramebuffersEXT(n int32, framebuffers *uint32)
	GenFramebuffersEXT(n int32, framebuffers *uint32)
	CheckFramebufferStatusEXT(target uint32) uint32
	FramebufferTexture1DEXT(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture2DEXT(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)
	FramebufferTexture3DEXT(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32)
	FramebufferRenderbufferEXT(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)
	GetFramebufferAttachmentParameterivEXT(target uint32, attachment uint32, pname uint32, params *int32)
	GenerateMipmapEXT(target uint32)
	ProgramParameteriEXT(program uint32, pname uint32, value int32)
	ProgramEnvParameters4fvEXT(target uint32, index uint32, count int32, params *float32)
	ProgramLocalParameters4fvEXT(target uint32, index uint32, count int32, params *float32)
	GetUniformuivEXT(program uint32, location int32, params *uint32)
	BindFragDataLocationEXT(program uint32, color uint32, name *uint8)
	GetFragDataLocationEXT(program uint32, name *uint8) int32
	Uniform1uiEXT(location int32, v0 uint32)
	Uniform2uiEXT(location int32, v0 uint32, v1 uint32)
	Uniform3uiEXT(location int32, v0 uint32, v1 uint32, v2 uint32)
	Uniform4uiEXT(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)
	Uniform1uivEXT(location int32, count int32, value *uint32)
	Uniform2uivEXT(location int32, count int32, value *uint32)
	Uniform3uivEXT(location int32, count int32, value *uint32)
	Uniform4uivEXT(location int32, count int32, value *uint32)
	GetHistogramEXT(target uint32, reset bool, format uint32, type_ uint32, values unsafe.Pointer)
	GetHistogramParameterfvEXT(target uint32, pname uint32, params *float32)
	GetHistogramParameterivEXT(target uint32, pname uint32, params *int32)
	GetMinmaxEXT(target uint32, reset bool, format uint32, type_ uint32, values unsafe.Pointer)
	GetMinmaxParameterfvEXT(target uint32, pname uint32, params *float32)
	GetMinmaxParameterivEXT(target uint32, pname uint32, params *int32)
	HistogramEXT(target uint32, width int32, internalformat uint32, sink bool)
	MinmaxEXT(target uint32, internalformat uint32, sink bool)
	ResetHistogramEXT(target uint32)
	ResetMinmaxEXT(target uint32)
	IndexFuncEXT(func_ uint32, ref float32)
	IndexMaterialEXT(face uint32, mode uint32)
	ApplyTextureEXT(mode uint32)
	TextureLightEXT(pname uint32)
	TextureMaterialEXT(face uint32, mode uint32)
	GetUnsignedBytevEXT(pname uint32, data *uint8)
	GetUnsignedBytei_vEXT(target uint32, index uint32, data *uint8)
	DeleteMemoryObjectsEXT(n int32, memoryObjects *uint32)
	IsMemoryObjectEXT(memoryObject uint32) bool
	CreateMemoryObjectsEXT(n int32, memoryObjects *uint32)
	MemoryObjectParameterivEXT(memoryObject uint32, pname uint32, params *int32)
	GetMemoryObjectParameterivEXT(memoryObject uint32, pname uint32, params *int32)
	TexStorageMem2DEXT(target uint32, levels int32, internalFormat uint32, width int32, height int32, memory uint32, offset uint64)
	TexStorageMem2DMultisampleEXT(target uint32, samples int32, internalFormat uint32, width int32, height int32, fixedSampleLocations bool, memory uint32, offset uint64)
	TexStorageMem3DEXT(target uint32, levels int32, internalFormat uint32, width int32, height int32, depth int32, memory uint32, offset uint64)
	TexStorageMem3DMultisampleEXT(target uint32, samples int32, internalFormat uint32, width int32, height int32, depth int32, fixedSampleLocations bool, memory uint32, offset uint64)
	BufferStorageMemEXT(target uint32, size int, memory uint32, offset uint64)
	TextureStorageMem2DEXT(texture uint32, levels int32, internalFormat uint32, width int32, height int32, memory uint32, offset uint64)
	TextureStorageMem2DMultisampleEXT(texture uint32, samples int32, internalFormat uint32, width int32, height int32, fixedSampleLocations bool, memory uint32, offset uint64)
	TextureStorageMem3DEXT(texture uint32, levels int32, internalFormat uint32, width int32, height int32, depth int32, memory uint32, offset uint64)
	TextureStorageMem3DMultisampleEXT(texture uint32, samples int32, internalFormat uint32, width int32, height int32, depth int32, fixedSampleLocations bool, memory uint32, offset uint64)
	NamedBufferStorageMemEXT(buffer uint32, size int, memory uint32, offset uint64)
	TexStorageMem1DEXT(target uint32, levels int32, internalFormat uint32, width int32, memory uint32, offset uint64)
	TextureStorageMem1DEXT(texture uint32, levels int32, internalFormat uint32, width int32, memory uint32, offset uint64)
	ImportMemoryFdEXT(memory uint32, size uint64, handleType uint32, fd int32)
	ImportMemoryWin32HandleEXT(memory uint32, size uint64, handleType uint32, handle unsafe.Pointer)
	ImportMemoryWin32NameEXT(memory uint32, size uint64, handleType uint32, name unsafe.Pointer)
	MultiDrawArraysEXT(mode uint32, first *int32, count *int32, primcount int32)
	MultiDrawElementsEXT(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, primcount int32)
	SampleMaskEXT(value float32, invert bool)
	SamplePatternEXT(pattern uint32)
	ColorTableEXT(target uint32, internalFormat uint32, width int32, format uint32, type_ uint32, table unsafe.Pointer)
	GetColorTableEXT(target uint32, format uint32, type_ uint32, data unsafe.Pointer)
	GetColorTableParameterivEXT(target uint32, pname uint32, params *int32)
	GetColorTableParameterfvEXT(target uint32, pname uint32, params *float32)
	PixelTransformParameteriEXT(target uint32, pname uint32, param int32)
	PixelTransformParameterfEXT(target uint32, pname uint32, param float32)
	PixelTransformParameterivEXT(target uint32, pname uint32, params *int32)
	PixelTransformParameterfvEXT(target uint32, pname uint32, params *float32)
	GetPixelTransformParameterivEXT(target uint32, pname uint32, params *int32)
	GetPixelTransformParameterfvEXT(target uint32, pname uint32, params *float32)
	PointParameterfEXT(pname uint32, param float32)
	PointParameterfvEXT(pname uint32, params *float32)
	PolygonOffsetEXT(factor float32, bias float32)
	PolygonOffsetClampEXT(factor float32, units float32, clamp float32)
	ProvokingVertexEXT(mode uint32)
	RasterSamplesEXT(samples uint32, fixedsamplelocations bool)
	GenSemaphoresEXT(n int32, semaphores *uint32)
	DeleteSemaphoresEXT(n int32, semaphores *uint32)
	IsSemaphoreEXT(semaphore uint32) bool
	SemaphoreParameterui64vEXT(semaphore uint32, pname uint32, params *uint64)
	GetSemaphoreParameterui64vEXT(semaphore uint32, pname uint32, params *uint64)
	WaitSemaphoreEXT(semaphore uint32, numBufferBarriers uint32, buffers *uint32, numTextureBarriers uint32, textures *uint32, srcLayouts *uint32)
	SignalSemaphoreEXT(semaphore uint32, numBufferBarriers uint32, buffers *uint32, numTextureBarriers uint32, textures *uint32, dstLayouts *uint32)
	ImportSemaphoreFdEXT(semaphore uint32, handleType uint32, fd int32)
	ImportSemaphoreWin32HandleEXT(semaphore uint32, handleType uint32, handle unsafe.Pointer)
	ImportSemaphoreWin32NameEXT(semaphore uint32, handleType uint32, name unsafe.Pointer)
	SecondaryColor3bEXT(red int8, green int8, blue int8)
	SecondaryColor3bvEXT(v *int8)
	SecondaryColor3dEXT(red float64, green float64, blue float64)
	SecondaryColor3dvEXT(v *float64)
	SecondaryColor3fEXT(red float32, green float32, blue float32)
	SecondaryColor3fvEXT(v *float32)
	SecondaryColor3iEXT(red int32, green int32, blue int32)
	SecondaryColor3ivEXT(v *int32)
	SecondaryColor3sEXT(red int16, green int16, blue int16)
	SecondaryColor3svEXT(v *int16)
	SecondaryColor3ubEXT(red uint8, green uint8, blue uint8)
	SecondaryColor3ubvEXT(v *uint8)
	SecondaryColor3uiEXT(red uint32, green uint32, blue uint32)
	SecondaryColor3uivEXT(v *uint32)
	SecondaryColor3usEXT(red uint16, green uint16, blue uint16)
	SecondaryColor3usvEXT(v *uint16)
	SecondaryColorPointerEXT(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	UseShaderProgramEXT(type_ uint32, program uint32)
	ActiveProgramEXT(program uint32)
	CreateShaderProgramEXT(type_ uint32, string *uint8) uint32
	ActiveShaderProgramEXT(pipeline uint32, program uint32)
	BindProgramPipelineEXT(pipeline uint32)
	CreateShaderProgramvEXT(type_ uint32, count int32, strings **uint8) uint32
	DeleteProgramPipelinesEXT(n int32, pipelines *uint32)
	GenProgramPipelinesEXT(n int32, pipelines *uint32)
	GetProgramPipelineInfoLogEXT(pipeline uint32, bufSize int32, length *int32, infoLog *uint8)
	GetProgramPipelineivEXT(pipeline uint32, pname uint32, params *int32)
	IsProgramPipelineEXT(pipeline uint32) bool
	UseProgramStagesEXT(pipeline uint32, stages uint32, program uint32)
	ValidateProgramPipelineEXT(pipeline uint32)
	FramebufferFetchBarrierEXT()
	BindImageTextureEXT(index uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format int32)
	MemoryBarrierEXT(barriers uint32)
	StencilClearTagEXT(stencilTagBits int32, stencilClearTag uint32)
	ActiveStencilFaceEXT(face uint32)
	TexSubImage1DEXT(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage2DEXT(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexImage3DEXT(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage3DEXT(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	FramebufferTextureLayerEXT(target uint32, attachment uint32, texture uint32, level int32, layer int32)
	TexBufferEXT(target uint32, internalformat uint32, buffer uint32)
	TexParameterIivEXT(target uint32, pname uint32, params *int32)
	TexParameterIuivEXT(target uint32, pname uint32, params *uint32)
	GetTexParameterIivEXT(target uint32, pname uint32, params *int32)
	GetTexParameterIuivEXT(target uint32, pname uint32, params *uint32)
	ClearColorIiEXT(red int32, green int32, blue int32, alpha int32)
	ClearColorIuiEXT(red uint32, green uint32, blue uint32, alpha uint32)
	AreTexturesResidentEXT(n int32, textures *uint32, residences *bool) bool
	BindTextureEXT(target uint32, texture uint32)
	DeleteTexturesEXT(n int32, textures *uint32)
	GenTexturesEXT(n int32, textures *uint32)
	IsTextureEXT(texture uint32) bool
	PrioritizeTexturesEXT(n int32, textures *uint32, priorities *float32)
	TextureNormalEXT(mode uint32)
	CreateSemaphoresNV(n int32, semaphores *uint32)
	SemaphoreParameterivNV(semaphore uint32, pname uint32, params *int32)
	GetSemaphoreParameterivNV(semaphore uint32, pname uint32, params *int32)
	GetQueryObjecti64vEXT(id uint32, pname uint32, params *int64)
	GetQueryObjectui64vEXT(id uint32, pname uint32, params *uint64)
	BeginTransformFeedbackEXT(primitiveMode uint32)
	EndTransformFeedbackEXT()
	BindBufferRangeEXT(target uint32, index uint32, buffer uint32, offset uintptr, size int)
	BindBufferOffsetEXT(target uint32, index uint32, buffer uint32, offset uintptr)
	BindBufferBaseEXT(target uint32, index uint32, buffer uint32)
	TransformFeedbackVaryingsEXT(program uint32, count int32, varyings **uint8, bufferMode uint32)
	GetTransformFeedbackVaryingEXT(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	ArrayElementEXT(i int32)
	ColorPointerEXT(size int32, type_ uint32, stride int32, count int32, pointer unsafe.Pointer)
	DrawArraysEXT(mode uint32, first int32, count int32)
	EdgeFlagPointerEXT(stride int32, count int32, pointer *bool)
	GetPointervEXT(pname uint32, params *unsafe.Pointer)
	IndexPointerEXT(type_ uint32, stride int32, count int32, pointer unsafe.Pointer)
	NormalPointerEXT(type_ uint32, stride int32, count int32, pointer unsafe.Pointer)
	TexCoordPointerEXT(size int32, type_ uint32, stride int32, count int32, pointer unsafe.Pointer)
	VertexPointerEXT(size int32, type_ uint32, stride int32, count int32, pointer unsafe.Pointer)
	VertexAttribL1dEXT(index uint32, x float64)
	VertexAttribL2dEXT(index uint32, x float64, y float64)
	VertexAttribL3dEXT(index uint32, x float64, y float64, z float64)
	VertexAttribL4dEXT(index uint32, x float64, y float64, z float64, w float64)
	VertexAttribL1dvEXT(index uint32, v *float64)
	VertexAttribL2dvEXT(index uint32, v *float64)
	VertexAttribL3dvEXT(index uint32, v *float64)
	VertexAttribL4dvEXT(index uint32, v *float64)
	VertexAttribLPointerEXT(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	GetVertexAttribLdvEXT(index uint32, pname uint32, params *float64)
	BeginVertexShaderEXT()
	EndVertexShaderEXT()
	BindVertexShaderEXT(id uint32)
	GenVertexShadersEXT(range_ uint32) uint32
	DeleteVertexShaderEXT(id uint32)
	ShaderOp1EXT(op uint32, res uint32, arg1 uint32)
	ShaderOp2EXT(op uint32, res uint32, arg1 uint32, arg2 uint32)
	ShaderOp3EXT(op uint32, res uint32, arg1 uint32, arg2 uint32, arg3 uint32)
	SwizzleEXT(res uint32, in uint32, outX uint32, outY uint32, outZ uint32, outW uint32)
	WriteMaskEXT(res uint32, in uint32, outX uint32, outY uint32, outZ uint32, outW uint32)
	InsertComponentEXT(res uint32, src uint32, num uint32)
	ExtractComponentEXT(res uint32, src uint32, num uint32)
	GenSymbolsEXT(datatype uint32, storagetype uint32, range_ uint32, components uint32) uint32
	SetInvariantEXT(id uint32, type_ uint32, addr unsafe.Pointer)
	SetLocalConstantEXT(id uint32, type_ uint32, addr unsafe.Pointer)
	VariantbvEXT(id uint32, addr *int8)
	VariantsvEXT(id uint32, addr *int16)
	VariantivEXT(id uint32, addr *int32)
	VariantfvEXT(id uint32, addr *float32)
	VariantdvEXT(id uint32, addr *float64)
	VariantubvEXT(id uint32, addr *uint8)
	VariantusvEXT(id uint32, addr *uint16)
	VariantuivEXT(id uint32, addr *uint32)
	VariantPointerEXT(id uint32, type_ uint32, stride uint32, addr unsafe.Pointer)
	EnableVariantClientStateEXT(id uint32)
	DisableVariantClientStateEXT(id uint32)
	BindLightParameterEXT(light uint32, value uint32) uint32
	BindMaterialParameterEXT(face uint32, value uint32) uint32
	BindTexGenParameterEXT(unit uint32, coord uint32, value uint32) uint32
	BindTextureUnitParameterEXT(unit uint32, value uint32) uint32
	BindParameterEXT(value uint32) uint32
	IsVariantEnabledEXT(id uint32, cap uint32) bool
	GetVariantBooleanvEXT(id uint32, value uint32, data *bool)
	GetVariantIntegervEXT(id uint32, value uint32, data *int32)
	GetVariantFloatvEXT(id uint32, value uint32, data *float32)
	GetVariantPointervEXT(id uint32, value uint32, data *unsafe.Pointer)
	GetInvariantBooleanvEXT(id uint32, value uint32, data *bool)
	GetInvariantIntegervEXT(id uint32, value uint32, data *int32)
	GetInvariantFloatvEXT(id uint32, value uint32, data *float32)
	GetLocalConstantBooleanvEXT(id uint32, value uint32, data *bool)
	GetLocalConstantIntegervEXT(id uint32, value uint32, data *int32)
	GetLocalConstantFloatvEXT(id uint32, value uint32, data *float32)
	VertexWeightfEXT(weight float32)
	VertexWeightfvEXT(weight *float32)
	VertexWeightPointerEXT(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	AcquireKeyedMutexWin32EXT(memory uint32, key uint64, timeout uint32) bool
	ReleaseKeyedMutexWin32EXT(memory uint32, key uint64) bool
	WindowRectanglesEXT(mode uint32, count int32, box *int32)
	ImportSyncEXT(external_sync_type uint32, external_sync uintptr, flags uint32) GLsync
	FrameTerminatorGREMEDY()
	StringMarkerGREMEDY(len int32, string unsafe.Pointer)
	ImageTransformParameteriHP(target uint32, pname uint32, param int32)
	ImageTransformParameterfHP(target uint32, pname uint32, param float32)
	ImageTransformParameterivHP(target uint32, pname uint32, params *int32)
	ImageTransformParameterfvHP(target uint32, pname uint32, params *float32)
	GetImageTransformParameterivHP(target uint32, pname uint32, params *int32)
	GetImageTransformParameterfvHP(target uint32, pname uint32, params *float32)
	MultiModeDrawArraysIBM(mode *uint32, first *int32, count *int32, primcount int32, modestride int32)
	MultiModeDrawElementsIBM(mode *uint32, count *int32, type_ uint32, indices *unsafe.Pointer, primcount int32, modestride int32)
	FlushStaticDataIBM(target uint32)
	ColorPointerListIBM(size int32, type_ uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32)
	SecondaryColorPointerListIBM(size int32, type_ uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32)
	EdgeFlagPointerListIBM(stride int32, pointer **bool, ptrstride int32)
	FogCoordPointerListIBM(type_ uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32)
	IndexPointerListIBM(type_ uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32)
	NormalPointerListIBM(type_ uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32)
	TexCoordPointerListIBM(size int32, type_ uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32)
	VertexPointerListIBM(size int32, type_ uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32)
	BlendFuncSeparateINGR(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)
	ApplyFramebufferAttachmentCMAAINTEL()
	SyncTextureINTEL(texture uint32)
	UnmapTexture2DINTEL(texture uint32, level int32)
	MapTexture2DINTEL(texture uint32, level int32, access uint32, stride *int32, layout *uint32) unsafe.Pointer
	VertexPointervINTEL(size int32, type_ uint32, pointer *unsafe.Pointer)
	NormalPointervINTEL(type_ uint32, pointer *unsafe.Pointer)
	ColorPointervINTEL(size int32, type_ uint32, pointer *unsafe.Pointer)
	TexCoordPointervINTEL(size int32, type_ uint32, pointer *unsafe.Pointer)
	BeginPerfQueryINTEL(queryHandle uint32)
	CreatePerfQueryINTEL(queryId uint32, queryHandle *uint32)
	DeletePerfQueryINTEL(queryHandle uint32)
	EndPerfQueryINTEL(queryHandle uint32)
	GetFirstPerfQueryIdINTEL(queryId *uint32)
	GetNextPerfQueryIdINTEL(queryId uint32, nextQueryId *uint32)
	GetPerfCounterInfoINTEL(queryId uint32, counterId uint32, counterNameLength uint32, counterName *uint8, counterDescLength uint32, counterDesc *uint8, counterOffset *uint32, counterDataSize *uint32, counterTypeEnum *uint32, counterDataTypeEnum *uint32, rawCounterMaxValue *uint64)
	GetPerfQueryDataINTEL(queryHandle uint32, flags uint32, dataSize int32, data unsafe.Pointer, bytesWritten *uint32)
	GetPerfQueryIdByNameINTEL(queryName *uint8, queryId *uint32)
	GetPerfQueryInfoINTEL(queryId uint32, queryNameLength uint32, queryName *uint8, dataSize *uint32, noCounters *uint32, noInstances *uint32, capsMask *uint32)
	BlendBarrierKHR()
	DebugMessageControl(source uint32, type_ uint32, severity uint32, count int32, ids *uint32, enabled bool)
	DebugMessageInsert(source uint32, type_ uint32, id uint32, severity uint32, length int32, buf *uint8)
	DebugMessageCallback(callback func(source, type_, id, severity uint32, message string))
	GetDebugMessageLog(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32
	PushDebugGroup(source uint32, id uint32, length int32, message *uint8)
	PopDebugGroup()
	ObjectLabel(identifier uint32, name uint32, length int32, label *uint8)
	GetObjectLabel(identifier uint32, name uint32, bufSize int32, length *int32, label *uint8)
	ObjectPtrLabel(ptr unsafe.Pointer, length int32, label *uint8)
	GetObjectPtrLabel(ptr unsafe.Pointer, bufSize int32, length *int32, label *uint8)
	GetPointerv(pname uint32, params *unsafe.Pointer)
	DebugMessageControlKHR(source uint32, type_ uint32, severity uint32, count int32, ids *uint32, enabled bool)
	DebugMessageInsertKHR(source uint32, type_ uint32, id uint32, severity uint32, length int32, buf *uint8)
	DebugMessageCallbackKHR(callback func(source, type_, id, severity uint32, message string))
	GetDebugMessageLogKHR(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32
	PushDebugGroupKHR(source uint32, id uint32, length int32, message *uint8)
	PopDebugGroupKHR()
	ObjectLabelKHR(identifier uint32, name uint32, length int32, label *uint8)
	GetObjectLabelKHR(identifier uint32, name uint32, bufSize int32, length *int32, label *uint8)
	ObjectPtrLabelKHR(ptr unsafe.Pointer, length int32, label *uint8)
	GetObjectPtrLabelKHR(ptr unsafe.Pointer, bufSize int32, length *int32, label *uint8)
	GetPointervKHR(pname uint32, params *unsafe.Pointer)
	GetGraphicsResetStatus() uint32
	ReadnPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, bufSize int32, data unsafe.Pointer)
	GetnUniformfv(program uint32, location int32, bufSize int32, params *float32)
	GetnUniformiv(program uint32, location int32, bufSize int32, params *int32)
	GetnUniformuiv(program uint32, location int32, bufSize int32, params *uint32)
	GetGraphicsResetStatusKHR() uint32
	ReadnPixelsKHR(x int32, y int32, width int32, height int32, format uint32, type_ uint32, bufSize int32, data unsafe.Pointer)
	GetnUniformfvKHR(program uint32, location int32, bufSize int32, params *float32)
	GetnUniformivKHR(program uint32, location int32, bufSize int32, params *int32)
	GetnUniformuivKHR(program uint32, location int32, bufSize int32, params *uint32)
	MaxShaderCompilerThreadsKHR(count uint32)
	FramebufferParameteriMESA(target uint32, pname uint32, param int32)
	GetFramebufferParameterivMESA(target uint32, pname uint32, params *int32)
	ResizeBuffersMESA()
	WindowPos2dMESA(x float64, y float64)
	WindowPos2dvMESA(v *float64)
	WindowPos2fMESA(x float32, y float32)
	WindowPos2fvMESA(v *float32)
	WindowPos2iMESA(x int32, y int32)
	WindowPos2ivMESA(v *int32)
	WindowPos2sMESA(x int16, y int16)
	WindowPos2svMESA(v *int16)
	WindowPos3dMESA(x float64, y float64, z float64)
	WindowPos3dvMESA(v *float64)
	WindowPos3fMESA(x float32, y float32, z float32)
	WindowPos3fvMESA(v *float32)
	WindowPos3iMESA(x int32, y int32, z int32)
	WindowPos3ivMESA(v *int32)
	WindowPos3sMESA(x int16, y int16, z int16)
	WindowPos3svMESA(v *int16)
	WindowPos4dMESA(x float64, y float64, z float64, w float64)
	WindowPos4dvMESA(v *float64)
	WindowPos4fMESA(x float32, y float32, z float32, w float32)
	WindowPos4fvMESA(v *float32)
	WindowPos4iMESA(x int32, y int32, z int32, w int32)
	WindowPos4ivMESA(v *int32)
	WindowPos4sMESA(x int16, y int16, z int16, w int16)
	WindowPos4svMESA(v *int16)
	BeginConditionalRenderNVX(id uint32)
	EndConditionalRenderNVX()
	LGPUNamedBufferSubDataNVX(gpuMask uint32, buffer uint32, offset uintptr, size int, data unsafe.Pointer)
	LGPUCopyImageSubDataNVX(sourceGpu uint32, destinationGpuMask uint32, srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srxY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, width int32, height int32, depth int32)
	LGPUInterlockNVX()
	AlphaToCoverageDitherControlNV(mode uint32)
	MultiDrawArraysIndirectBindlessNV(mode uint32, indirect unsafe.Pointer, drawCount int32, stride int32, vertexBufferCount int32)
	MultiDrawElementsIndirectBindlessNV(mode uint32, type_ uint32, indirect unsafe.Pointer, drawCount int32, stride int32, vertexBufferCount int32)
	MultiDrawArraysIndirectBindlessCountNV(mode uint32, indirect unsafe.Pointer, drawCount int32, maxDrawCount int32, stride int32, vertexBufferCount int32)
	MultiDrawElementsIndirectBindlessCountNV(mode uint32, type_ uint32, indirect unsafe.Pointer, drawCount int32, maxDrawCount int32, stride int32, vertexBufferCount int32)
	GetTextureHandleNV(texture uint32) uint64
	GetTextureSamplerHandleNV(texture uint32, sampler uint32) uint64
	MakeTextureHandleResidentNV(handle uint64)
	MakeTextureHandleNonResidentNV(handle uint64)
	GetImageHandleNV(texture uint32, level int32, layered bool, layer int32, format uint32) uint64
	MakeImageHandleResidentNV(handle uint64, access uint32)
	MakeImageHandleNonResidentNV(handle uint64)
	UniformHandleui64NV(location int32, value uint64)
	UniformHandleui64vNV(location int32, count int32, value *uint64)
	ProgramUniformHandleui64NV(program uint32, location int32, value uint64)
	ProgramUniformHandleui64vNV(program uint32, location int32, count int32, values *uint64)
	IsTextureHandleResidentNV(handle uint64) bool
	IsImageHandleResidentNV(handle uint64) bool
	BlendParameteriNV(pname uint32, value int32)
	BlendBarrierNV()
	ViewportPositionWScaleNV(index uint32, xcoeff float32, ycoeff float32)
	CreateStatesNV(n int32, states *uint32)
	DeleteStatesNV(n int32, states *uint32)
	IsStateNV(state uint32) bool
	StateCaptureNV(state uint32, mode uint32)
	GetCommandHeaderNV(tokenID uint32, size uint32) uint32
	GetStageIndexNV(shadertype uint32) uint16
	DrawCommandsNV(primitiveMode uint32, buffer uint32, indirects *uintptr, sizes *int32, count uint32)
	DrawCommandsAddressNV(primitiveMode uint32, indirects *uint64, sizes *int32, count uint32)
	DrawCommandsStatesNV(buffer uint32, indirects *uintptr, sizes *int32, states *uint32, fbos *uint32, count uint32)
	DrawCommandsStatesAddressNV(indirects *uint64, sizes *int32, states *uint32, fbos *uint32, count uint32)
	CreateCommandListsNV(n int32, lists *uint32)
	DeleteCommandListsNV(n int32, lists *uint32)
	IsCommandListNV(list uint32) bool
	ListDrawCommandsStatesClientNV(list uint32, segment uint32, indirects *unsafe.Pointer, sizes *int32, states *uint32, fbos *uint32, count uint32)
	CommandListSegmentsNV(list uint32, segments uint32)
	CompileCommandListNV(list uint32)
	CallCommandListNV(list uint32)
	BeginConditionalRenderNV(id uint32, mode uint32)
	EndConditionalRenderNV()
	SubpixelPrecisionBiasNV(xbits uint32, ybits uint32)
	ConservativeRasterParameterfNV(pname uint32, value float32)
	ConservativeRasterParameteriNV(pname uint32, param int32)
	CopyImageSubDataNV(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, width int32, height int32, depth int32)
	DepthRangedNV(zNear float64, zFar float64)
	ClearDepthdNV(depth float64)
	DepthBoundsdNV(zmin float64, zmax float64)
	DrawTextureNV(texture uint32, sampler uint32, x0 float32, y0 float32, x1 float32, y1 float32, z float32, s0 float32, t0 float32, s1 float32, t1 float32)
	DrawVkImageNV(vkImage uint64, sampler uint32, x0 float32, y0 float32, x1 float32, y1 float32, z float32, s0 float32, t0 float32, s1 float32, t1 float32)
	WaitVkSemaphoreNV(vkSemaphore uint64)
	SignalVkSemaphoreNV(vkSemaphore uint64)
	SignalVkFenceNV(vkFence uint64)
	MapControlPointsNV(target uint32, index uint32, type_ uint32, ustride int32, vstride int32, uorder int32, vorder int32, packed bool, points unsafe.Pointer)
	MapParameterivNV(target uint32, pname uint32, params *int32)
	MapParameterfvNV(target uint32, pname uint32, params *float32)
	GetMapControlPointsNV(target uint32, index uint32, type_ uint32, ustride int32, vstride int32, packed bool, points unsafe.Pointer)
	GetMapParameterivNV(target uint32, pname uint32, params *int32)
	GetMapParameterfvNV(target uint32, pname uint32, params *float32)
	GetMapAttribParameterivNV(target uint32, index uint32, pname uint32, params *int32)
	GetMapAttribParameterfvNV(target uint32, index uint32, pname uint32, params *float32)
	EvalMapsNV(target uint32, mode uint32)
	GetMultisamplefvNV(pname uint32, index uint32, val *float32)
	SampleMaskIndexedNV(index uint32, mask uint32)
	TexRenderbufferNV(target uint32, renderbuffer uint32)
	DeleteFencesNV(n int32, fences *uint32)
	GenFencesNV(n int32, fences *uint32)
	IsFenceNV(fence uint32) bool
	TestFenceNV(fence uint32) bool
	GetFenceivNV(fence uint32, pname uint32, params *int32)
	FinishFenceNV(fence uint32)
	SetFenceNV(fence uint32, condition uint32)
	FragmentCoverageColorNV(color uint32)
	ProgramNamedParameter4fNV(id uint32, len int32, name *uint8, x float32, y float32, z float32, w float32)
	ProgramNamedParameter4fvNV(id uint32, len int32, name *uint8, v *float32)
	ProgramNamedParameter4dNV(id uint32, len int32, name *uint8, x float64, y float64, z float64, w float64)
	ProgramNamedParameter4dvNV(id uint32, len int32, name *uint8, v *float64)
	GetProgramNamedParameterfvNV(id uint32, len int32, name *uint8, params *float32)
	GetProgramNamedParameterdvNV(id uint32, len int32, name *uint8, params *float64)
	CoverageModulationTableNV(n int32, v *float32)
	GetCoverageModulationTableNV(bufSize int32, v *float32)
	CoverageModulationNV(components uint32)
	RenderbufferStorageMultisampleCoverageNV(target uint32, coverageSamples int32, colorSamples int32, internalformat uint32, width int32, height int32)
	ProgramVertexLimitNV(target uint32, limit int32)
	FramebufferTextureEXT(target uint32, attachment uint32, texture uint32, level int32)
	FramebufferTextureFaceEXT(target uint32, attachment uint32, texture uint32, level int32, face uint32)
	ProgramLocalParameterI4iNV(target uint32, index uint32, x int32, y int32, z int32, w int32)
	ProgramLocalParameterI4ivNV(target uint32, index uint32, params *int32)
	ProgramLocalParametersI4ivNV(target uint32, index uint32, count int32, params *int32)
	ProgramLocalParameterI4uiNV(target uint32, index uint32, x uint32, y uint32, z uint32, w uint32)
	ProgramLocalParameterI4uivNV(target uint32, index uint32, params *uint32)
	ProgramLocalParametersI4uivNV(target uint32, index uint32, count int32, params *uint32)
	ProgramEnvParameterI4iNV(target uint32, index uint32, x int32, y int32, z int32, w int32)
	ProgramEnvParameterI4ivNV(target uint32, index uint32, params *int32)
	ProgramEnvParametersI4ivNV(target uint32, index uint32, count int32, params *int32)
	ProgramEnvParameterI4uiNV(target uint32, index uint32, x uint32, y uint32, z uint32, w uint32)
	ProgramEnvParameterI4uivNV(target uint32, index uint32, params *uint32)
	ProgramEnvParametersI4uivNV(target uint32, index uint32, count int32, params *uint32)
	GetProgramLocalParameterIivNV(target uint32, index uint32, params *int32)
	GetProgramLocalParameterIuivNV(target uint32, index uint32, params *uint32)
	GetProgramEnvParameterIivNV(target uint32, index uint32, params *int32)
	GetProgramEnvParameterIuivNV(target uint32, index uint32, params *uint32)
	ProgramSubroutineParametersuivNV(target uint32, count int32, params *uint32)
	GetProgramSubroutineParameteruivNV(target uint32, index uint32, param *uint32)
	Vertex2hNV(x uint16, y uint16)
	Vertex2hvNV(v *uint16)
	Vertex3hNV(x uint16, y uint16, z uint16)
	Vertex3hvNV(v *uint16)
	Vertex4hNV(x uint16, y uint16, z uint16, w uint16)
	Vertex4hvNV(v *uint16)
	Normal3hNV(nx uint16, ny uint16, nz uint16)
	Normal3hvNV(v *uint16)
	Color3hNV(red uint16, green uint16, blue uint16)
	Color3hvNV(v *uint16)
	Color4hNV(red uint16, green uint16, blue uint16, alpha uint16)
	Color4hvNV(v *uint16)
	TexCoord1hNV(s uint16)
	TexCoord1hvNV(v *uint16)
	TexCoord2hNV(s uint16, t uint16)
	TexCoord2hvNV(v *uint16)
	TexCoord3hNV(s uint16, t uint16, r uint16)
	TexCoord3hvNV(v *uint16)
	TexCoord4hNV(s uint16, t uint16, r uint16, q uint16)
	TexCoord4hvNV(v *uint16)
	MultiTexCoord1hNV(target uint32, s uint16)
	MultiTexCoord1hvNV(target uint32, v *uint16)
	MultiTexCoord2hNV(target uint32, s uint16, t uint16)
	MultiTexCoord2hvNV(target uint32, v *uint16)
	MultiTexCoord3hNV(target uint32, s uint16, t uint16, r uint16)
	MultiTexCoord3hvNV(target uint32, v *uint16)
	MultiTexCoord4hNV(target uint32, s uint16, t uint16, r uint16, q uint16)
	MultiTexCoord4hvNV(target uint32, v *uint16)
	FogCoordhNV(fog uint16)
	FogCoordhvNV(fog *uint16)
	SecondaryColor3hNV(red uint16, green uint16, blue uint16)
	SecondaryColor3hvNV(v *uint16)
	VertexWeighthNV(weight uint16)
	VertexWeighthvNV(weight *uint16)
	VertexAttrib1hNV(index uint32, x uint16)
	VertexAttrib1hvNV(index uint32, v *uint16)
	VertexAttrib2hNV(index uint32, x uint16, y uint16)
	VertexAttrib2hvNV(index uint32, v *uint16)
	VertexAttrib3hNV(index uint32, x uint16, y uint16, z uint16)
	VertexAttrib3hvNV(index uint32, v *uint16)
	VertexAttrib4hNV(index uint32, x uint16, y uint16, z uint16, w uint16)
	VertexAttrib4hvNV(index uint32, v *uint16)
	VertexAttribs1hvNV(index uint32, n int32, v *uint16)
	VertexAttribs2hvNV(index uint32, n int32, v *uint16)
	VertexAttribs3hvNV(index uint32, n int32, v *uint16)
	VertexAttribs4hvNV(index uint32, n int32, v *uint16)
	GetInternalformatSampleivNV(target uint32, internalformat uint32, samples int32, pname uint32, count int32, params *int32)
	RenderGpuMaskNV(mask uint32)
	MulticastBufferSubDataNV(gpuMask uint32, buffer uint32, offset uintptr, size int, data unsafe.Pointer)
	MulticastCopyBufferSubDataNV(readGpu uint32, writeGpuMask uint32, readBuffer uint32, writeBuffer uint32, readOffset uintptr, writeOffset uintptr, size int)
	MulticastCopyImageSubDataNV(srcGpu uint32, dstGpuMask uint32, srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32)
	MulticastBlitFramebufferNV(srcGpu uint32, dstGpu uint32, srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32)
	MulticastFramebufferSampleLocationsfvNV(gpu uint32, framebuffer uint32, start uint32, count int32, v *float32)
	MulticastBarrierNV()
	MulticastWaitSyncNV(signalGpu uint32, waitGpuMask uint32)
	MulticastGetQueryObjectivNV(gpu uint32, id uint32, pname uint32, params *int32)
	MulticastGetQueryObjectuivNV(gpu uint32, id uint32, pname uint32, params *uint32)
	MulticastGetQueryObjecti64vNV(gpu uint32, id uint32, pname uint32, params *int64)
	MulticastGetQueryObjectui64vNV(gpu uint32, id uint32, pname uint32, params *uint64)
	UploadGpuMaskNVX(mask uint32)
	MulticastViewportArrayvNVX(gpu uint32, first uint32, count int32, v *float32)
	MulticastViewportPositionWScaleNVX(gpu uint32, index uint32, xcoeff float32, ycoeff float32)
	MulticastScissorArrayvNVX(gpu uint32, first uint32, count int32, v *int32)
	AsyncCopyBufferSubDataNVX(waitSemaphoreCount int32, waitSemaphoreArray *uint32, fenceValueArray *uint64, readGpu uint32, writeGpuMask uint32, readBuffer uint32, writeBuffer uint32, readOffset uintptr, writeOffset uintptr, size int, signalSemaphoreCount int32, signalSemaphoreArray *uint32, signalValueArray *uint64) uint32
	AsyncCopyImageSubDataNVX(waitSemaphoreCount int32, waitSemaphoreArray *uint32, waitValueArray *uint64, srcGpu uint32, dstGpuMask uint32, srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32, signalSemaphoreCount int32, signalSemaphoreArray *uint32, signalValueArray *uint64) uint32
	CreateProgressFenceNVX() uint32
	SignalSemaphoreui64NVX(signalGpu uint32, fenceObjectCount int32, semaphoreArray *uint32, fenceValueArray *uint64)
	WaitSemaphoreui64NVX(waitGpu uint32, fenceObjectCount int32, semaphoreArray *uint32, fenceValueArray *uint64)
	ClientWaitSemaphoreui64NVX(fenceObjectCount int32, semaphoreArray *uint32, fenceValueArray *uint64)
	GetMemoryObjectDetachedResourcesuivNV(memory uint32, pname uint32, first int32, count int32, params *uint32)
	ResetMemoryObjectParameterNV(memory uint32, pname uint32)
	TexAttachMemoryNV(target uint32, memory uint32, offset uint64)
	BufferAttachMemoryNV(target uint32, memory uint32, offset uint64)
	TextureAttachMemoryNV(texture uint32, memory uint32, offset uint64)
	NamedBufferAttachMemoryNV(buffer uint32, memory uint32, offset uint64)
	BufferPageCommitmentMemNV(target uint32, offset uintptr, size int, memory uint32, memOffset uint64, commit bool)
	TexPageCommitmentMemNV(target uint32, layer int32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, memory uint32, offset uint64, commit bool)
	NamedBufferPageCommitmentMemNV(buffer uint32, offset uintptr, size int, memory uint32, memOffset uint64, commit bool)
	TexturePageCommitmentMemNV(texture uint32, layer int32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, memory uint32, offset uint64, commit bool)
	DrawMeshTasksNV(first uint32, count uint32)
	DrawMeshTasksIndirectNV(indirect uintptr)
	MultiDrawMeshTasksIndirectNV(indirect uintptr, drawcount int32, stride int32)
	MultiDrawMeshTasksIndirectCountNV(indirect uintptr, drawcount uintptr, maxdrawcount int32, stride int32)
	GenOcclusionQueriesNV(n int32, ids *uint32)
	DeleteOcclusionQueriesNV(n int32, ids *uint32)
	IsOcclusionQueryNV(id uint32) bool
	BeginOcclusionQueryNV(id uint32)
	EndOcclusionQueryNV()
	GetOcclusionQueryivNV(id uint32, pname uint32, params *int32)
	GetOcclusionQueryuivNV(id uint32, pname uint32, params *uint32)
	ProgramBufferParametersfvNV(target uint32, bindingIndex uint32, wordIndex uint32, count int32, params *float32)
	ProgramBufferParametersIivNV(target uint32, bindingIndex uint32, wordIndex uint32, count int32, params *int32)
	ProgramBufferParametersIuivNV(target uint32, bindingIndex uint32, wordIndex uint32, count int32, params *uint32)
	GenPathsNV(range_ int32) uint32
	DeletePathsNV(path uint32, range_ int32)
	IsPathNV(path uint32) bool
	PathCommandsNV(path uint32, numCommands int32, commands *uint8, numCoords int32, coordType uint32, coords unsafe.Pointer)
	PathCoordsNV(path uint32, numCoords int32, coordType uint32, coords unsafe.Pointer)
	PathSubCommandsNV(path uint32, commandStart int32, commandsToDelete int32, numCommands int32, commands *uint8, numCoords int32, coordType uint32, coords unsafe.Pointer)
	PathSubCoordsNV(path uint32, coordStart int32, numCoords int32, coordType uint32, coords unsafe.Pointer)
	PathStringNV(path uint32, format uint32, length int32, pathString unsafe.Pointer)
	PathGlyphsNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, numGlyphs int32, type_ uint32, charcodes unsafe.Pointer, handleMissingGlyphs uint32, pathParameterTemplate uint32, emScale float32)
	PathGlyphRangeNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, firstGlyph uint32, numGlyphs int32, handleMissingGlyphs uint32, pathParameterTemplate uint32, emScale float32)
	WeightPathsNV(resultPath uint32, numPaths int32, paths *uint32, weights *float32)
	CopyPathNV(resultPath uint32, srcPath uint32)
	InterpolatePathsNV(resultPath uint32, pathA uint32, pathB uint32, weight float32)
	TransformPathNV(resultPath uint32, srcPath uint32, transformType uint32, transformValues *float32)
	PathParameterivNV(path uint32, pname uint32, value *int32)
	PathParameteriNV(path uint32, pname uint32, value int32)
	PathParameterfvNV(path uint32, pname uint32, value *float32)
	PathParameterfNV(path uint32, pname uint32, value float32)
	PathDashArrayNV(path uint32, dashCount int32, dashArray *float32)
	PathStencilFuncNV(func_ uint32, ref int32, mask uint32)
	PathStencilDepthOffsetNV(factor float32, units float32)
	StencilFillPathNV(path uint32, fillMode uint32, mask uint32)
	StencilStrokePathNV(path uint32, reference int32, mask uint32)
	StencilFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, fillMode uint32, mask uint32, transformType uint32, transformValues *float32)
	StencilStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, reference int32, mask uint32, transformType uint32, transformValues *float32)
	PathCoverDepthFuncNV(func_ uint32)
	CoverFillPathNV(path uint32, coverMode uint32)
	CoverStrokePathNV(path uint32, coverMode uint32)
	CoverFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, coverMode uint32, transformType uint32, transformValues *float32)
	CoverStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, coverMode uint32, transformType uint32, transformValues *float32)
	GetPathParameterivNV(path uint32, pname uint32, value *int32)
	GetPathParameterfvNV(path uint32, pname uint32, value *float32)
	GetPathCommandsNV(path uint32, commands *uint8)
	GetPathCoordsNV(path uint32, coords *float32)
	GetPathDashArrayNV(path uint32, dashArray *float32)
	GetPathMetricsNV(metricQueryMask uint32, numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, stride int32, metrics *float32)
	GetPathMetricRangeNV(metricQueryMask uint32, firstPathName uint32, numPaths int32, stride int32, metrics *float32)
	GetPathSpacingNV(pathListMode uint32, numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, advanceScale float32, kerningScale float32, transformType uint32, returnedSpacing *float32)
	IsPointInFillPathNV(path uint32, mask uint32, x float32, y float32) bool
	IsPointInStrokePathNV(path uint32, x float32, y float32) bool
	GetPathLengthNV(path uint32, startSegment int32, numSegments int32) float32
	PointAlongPathNV(path uint32, startSegment int32, numSegments int32, distance float32, x *float32, y *float32, tangentX *float32, tangentY *float32) bool
	MatrixLoad3x2fNV(matrixMode uint32, m *float32)
	MatrixLoad3x3fNV(matrixMode uint32, m *float32)
	MatrixLoadTranspose3x3fNV(matrixMode uint32, m *float32)
	MatrixMult3x2fNV(matrixMode uint32, m *float32)
	MatrixMult3x3fNV(matrixMode uint32, m *float32)
	MatrixMultTranspose3x3fNV(matrixMode uint32, m *float32)
	StencilThenCoverFillPathNV(path uint32, fillMode uint32, mask uint32, coverMode uint32)
	StencilThenCoverStrokePathNV(path uint32, reference int32, mask uint32, coverMode uint32)
	StencilThenCoverFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, fillMode uint32, mask uint32, coverMode uint32, transformType uint32, transformValues *float32)
	StencilThenCoverStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, reference int32, mask uint32, coverMode uint32, transformType uint32, transformValues *float32)
	PathGlyphIndexRangeNV(fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, pathParameterTemplate uint32, emScale float32, baseAndCount uint32) uint32
	PathGlyphIndexArrayNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, firstGlyphIndex uint32, numGlyphs int32, pathParameterTemplate uint32, emScale float32) uint32
	PathMemoryGlyphIndexArrayNV(firstPathName uint32, fontTarget uint32, fontSize int, fontData unsafe.Pointer, faceIndex int32, firstGlyphIndex uint32, numGlyphs int32, pathParameterTemplate uint32, emScale float32) uint32
	ProgramPathFragmentInputGenNV(program uint32, location int32, genMode uint32, components int32, coeffs *float32)
	GetProgramResourcefvNV(program uint32, programInterface uint32, index uint32, propCount int32, props *uint32, count int32, length *int32, params *float32)
	PathColorGenNV(color uint32, genMode uint32, colorFormat uint32, coeffs *float32)
	PathTexGenNV(texCoordSet uint32, genMode uint32, components int32, coeffs *float32)
	PathFogGenNV(genMode uint32)
	GetPathColorGenivNV(color uint32, pname uint32, value *int32)
	GetPathColorGenfvNV(color uint32, pname uint32, value *float32)
	GetPathTexGenivNV(texCoordSet uint32, pname uint32, value *int32)
	GetPathTexGenfvNV(texCoordSet uint32, pname uint32, value *float32)
	PixelDataRangeNV(target uint32, length int32, pointer unsafe.Pointer)
	FlushPixelDataRangeNV(target uint32)
	PointParameteriNV(pname uint32, param int32)
	PointParameterivNV(pname uint32, params *int32)
	PresentFrameKeyedNV(video_slot uint32, minPresentTime uint64, beginPresentTimeId uint32, presentDurationId uint32, type_ uint32, target0 uint32, fill0 uint32, key0 uint32, target1 uint32, fill1 uint32, key1 uint32)
	PresentFrameDualFillNV(video_slot uint32, minPresentTime uint64, beginPresentTimeId uint32, presentDurationId uint32, type_ uint32, target0 uint32, fill0 uint32, target1 uint32, fill1 uint32, target2 uint32, fill2 uint32, target3 uint32, fill3 uint32)
	GetVideoivNV(video_slot uint32, pname uint32, params *int32)
	GetVideouivNV(video_slot uint32, pname uint32, params *uint32)
	GetVideoi64vNV(video_slot uint32, pname uint32, params *int64)
	GetVideoui64vNV(video_slot uint32, pname uint32, params *uint64)
	PrimitiveRestartNV()
	PrimitiveRestartIndexNV(index uint32)
	QueryResourceNV(queryType uint32, tagId int32, count uint32, buffer *int32) int32
	GenQueryResourceTagNV(n int32, tagIds *int32)
	DeleteQueryResourceTagNV(n int32, tagIds *int32)
	QueryResourceTagNV(tagId int32, tagString *uint8)
	CombinerParameterfvNV(pname uint32, params *float32)
	CombinerParameterfNV(pname uint32, param float32)
	CombinerParameterivNV(pname uint32, params *int32)
	CombinerParameteriNV(pname uint32, param int32)
	CombinerInputNV(stage uint32, portion uint32, variable uint32, input uint32, mapping uint32, componentUsage uint32)
	CombinerOutputNV(stage uint32, portion uint32, abOutput uint32, cdOutput uint32, sumOutput uint32, scale uint32, bias uint32, abDotProduct bool, cdDotProduct bool, muxSum bool)
	FinalCombinerInputNV(variable uint32, input uint32, mapping uint32, componentUsage uint32)
	GetCombinerInputParameterfvNV(stage uint32, portion uint32, variable uint32, pname uint32, params *float32)
	GetCombinerInputParameterivNV(stage uint32, portion uint32, variable uint32, pname uint32, params *int32)
	GetCombinerOutputParameterfvNV(stage uint32, portion uint32, pname uint32, params *float32)
	GetCombinerOutputParameterivNV(stage uint32, portion uint32, pname uint32, params *int32)
	GetFinalCombinerInputParameterfvNV(variable uint32, pname uint32, params *float32)
	GetFinalCombinerInputParameterivNV(variable uint32, pname uint32, params *int32)
	CombinerStageParameterfvNV(stage uint32, pname uint32, params *float32)
	GetCombinerStageParameterfvNV(stage uint32, pname uint32, params *float32)
	FramebufferSampleLocationsfvNV(target uint32, start uint32, count int32, v *float32)
	NamedFramebufferSampleLocationsfvNV(framebuffer uint32, start uint32, count int32, v *float32)
	ResolveDepthValuesNV()
	ScissorExclusiveNV(x int32, y int32, width int32, height int32)
	ScissorExclusiveArrayvNV(first uint32, count int32, v *int32)
	MakeBufferResidentNV(target uint32, access uint32)
	MakeBufferNonResidentNV(target uint32)
	IsBufferResidentNV(target uint32) bool
	MakeNamedBufferResidentNV(buffer uint32, access uint32)
	MakeNamedBufferNonResidentNV(buffer uint32)
	IsNamedBufferResidentNV(buffer uint32) bool
	GetBufferParameterui64vNV(target uint32, pname uint32, params *uint64)
	GetNamedBufferParameterui64vNV(buffer uint32, pname uint32, params *uint64)
	GetIntegerui64vNV(value uint32, result *uint64)
	Uniformui64NV(location int32, value uint64)
	Uniformui64vNV(location int32, count int32, value *uint64)
	ProgramUniformui64NV(program uint32, location int32, value uint64)
	ProgramUniformui64vNV(program uint32, location int32, count int32, value *uint64)
	BindShadingRateImageNV(texture uint32)
	GetShadingRateImagePaletteNV(viewport uint32, entry uint32, rate *uint32)
	GetShadingRateSampleLocationivNV(rate uint32, samples uint32, index uint32, location *int32)
	ShadingRateImageBarrierNV(synchronize bool)
	ShadingRateImagePaletteNV(viewport uint32, first uint32, count int32, rates *uint32)
	ShadingRateSampleOrderNV(order uint32)
	ShadingRateSampleOrderCustomNV(rate uint32, samples uint32, locations *int32)
	TextureBarrierNV()
	TexImage2DMultisampleCoverageNV(target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, fixedSampleLocations bool)
	TexImage3DMultisampleCoverageNV(target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, depth int32, fixedSampleLocations bool)
	TextureImage2DMultisampleNV(texture uint32, target uint32, samples int32, internalFormat int32, width int32, height int32, fixedSampleLocations bool)
	TextureImage3DMultisampleNV(texture uint32, target uint32, samples int32, internalFormat int32, width int32, height int32, depth int32, fixedSampleLocations bool)
	TextureImage2DMultisampleCoverageNV(texture uint32, target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, fixedSampleLocations bool)
	TextureImage3DMultisampleCoverageNV(texture uint32, target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, depth int32, fixedSampleLocations bool)
	BeginTransformFeedbackNV(primitiveMode uint32)
	EndTransformFeedbackNV()
	TransformFeedbackAttribsNV(count int32, attribs *int32, bufferMode uint32)
	BindBufferRangeNV(target uint32, index uint32, buffer uint32, offset uintptr, size int)
	BindBufferOffsetNV(target uint32, index uint32, buffer uint32, offset uintptr)
	BindBufferBaseNV(target uint32, index uint32, buffer uint32)
	TransformFeedbackVaryingsNV(program uint32, count int32, locations *int32, bufferMode uint32)
	ActiveVaryingNV(program uint32, name *uint8)
	GetVaryingLocationNV(program uint32, name *uint8) int32
	GetActiveVaryingNV(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *uint8)
	GetTransformFeedbackVaryingNV(program uint32, index uint32, location *int32)
	TransformFeedbackStreamAttribsNV(count int32, attribs *int32, nbuffers int32, bufstreams *int32, bufferMode uint32)
	BindTransformFeedbackNV(target uint32, id uint32)
	DeleteTransformFeedbacksNV(n int32, ids *uint32)
	GenTransformFeedbacksNV(n int32, ids *uint32)
	IsTransformFeedbackNV(id uint32) bool
	PauseTransformFeedbackNV()
	ResumeTransformFeedbackNV()
	DrawTransformFeedbackNV(mode uint32, id uint32)
	VDPAUInitNV(vdpDevice unsafe.Pointer, getProcAddress unsafe.Pointer)
	VDPAUFiniNV()
	VDPAURegisterVideoSurfaceNV(vdpSurface unsafe.Pointer, target uint32, numTextureNames int32, textureNames *uint32) uintptr
	VDPAURegisterOutputSurfaceNV(vdpSurface unsafe.Pointer, target uint32, numTextureNames int32, textureNames *uint32) uintptr
	VDPAUIsSurfaceNV(surface uintptr) bool
	VDPAUUnregisterSurfaceNV(surface uintptr)
	VDPAUGetSurfaceivNV(surface uintptr, pname uint32, count int32, length *int32, values *int32)
	VDPAUSurfaceAccessNV(surface uintptr, access uint32)
	VDPAUMapSurfacesNV(numSurfaces int32, surfaces *uintptr)
	VDPAUUnmapSurfacesNV(numSurface int32, surfaces *uintptr)
	VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface unsafe.Pointer, target uint32, numTextureNames int32, textureNames *uint32, isFrameStructure bool) uintptr
	FlushVertexArrayRangeNV()
	VertexArrayRangeNV(length int32, pointer unsafe.Pointer)
	VertexAttribL1i64NV(index uint32, x int64)
	VertexAttribL2i64NV(index uint32, x int64, y int64)
	VertexAttribL3i64NV(index uint32, x int64, y int64, z int64)
	VertexAttribL4i64NV(index uint32, x int64, y int64, z int64, w int64)
	VertexAttribL1i64vNV(index uint32, v *int64)
	VertexAttribL2i64vNV(index uint32, v *int64)
	VertexAttribL3i64vNV(index uint32, v *int64)
	VertexAttribL4i64vNV(index uint32, v *int64)
	VertexAttribL1ui64NV(index uint32, x uint64)
	VertexAttribL2ui64NV(index uint32, x uint64, y uint64)
	VertexAttribL3ui64NV(index uint32, x uint64, y uint64, z uint64)
	VertexAttribL4ui64NV(index uint32, x uint64, y uint64, z uint64, w uint64)
	VertexAttribL1ui64vNV(index uint32, v *uint64)
	VertexAttribL2ui64vNV(index uint32, v *uint64)
	VertexAttribL3ui64vNV(index uint32, v *uint64)
	VertexAttribL4ui64vNV(index uint32, v *uint64)
	GetVertexAttribLi64vNV(index uint32, pname uint32, params *int64)
	GetVertexAttribLui64vNV(index uint32, pname uint32, params *uint64)
	VertexAttribLFormatNV(index uint32, size int32, type_ uint32, stride int32)
	BufferAddressRangeNV(pname uint32, index uint32, address uint64, length int)
	VertexFormatNV(size int32, type_ uint32, stride int32)
	NormalFormatNV(type_ uint32, stride int32)
	ColorFormatNV(size int32, type_ uint32, stride int32)
	IndexFormatNV(type_ uint32, stride int32)
	TexCoordFormatNV(size int32, type_ uint32, stride int32)
	EdgeFlagFormatNV(stride int32)
	SecondaryColorFormatNV(size int32, type_ uint32, stride int32)
	FogCoordFormatNV(type_ uint32, stride int32)
	VertexAttribFormatNV(index uint32, size int32, type_ uint32, normalized bool, stride int32)
	VertexAttribIFormatNV(index uint32, size int32, type_ uint32, stride int32)
	GetIntegerui64i_vNV(value uint32, index uint32, result *uint64)
	AreProgramsResidentNV(n int32, programs *uint32, residences *bool) bool
	BindProgramNV(target uint32, id uint32)
	DeleteProgramsNV(n int32, programs *uint32)
	ExecuteProgramNV(target uint32, id uint32, params *float32)
	GenProgramsNV(n int32, programs *uint32)
	GetProgramParameterdvNV(target uint32, index uint32, pname uint32, params *float64)
	GetProgramParameterfvNV(target uint32, index uint32, pname uint32, params *float32)
	GetProgramivNV(id uint32, pname uint32, params *int32)
	GetProgramStringNV(id uint32, pname uint32, program *uint8)
	GetTrackMatrixivNV(target uint32, address uint32, pname uint32, params *int32)
	GetVertexAttribdvNV(index uint32, pname uint32, params *float64)
	GetVertexAttribfvNV(index uint32, pname uint32, params *float32)
	GetVertexAttribivNV(index uint32, pname uint32, params *int32)
	GetVertexAttribPointervNV(index uint32, pname uint32, pointer *unsafe.Pointer)
	IsProgramNV(id uint32) bool
	LoadProgramNV(target uint32, id uint32, len int32, program *uint8)
	ProgramParameter4dNV(target uint32, index uint32, x float64, y float64, z float64, w float64)
	ProgramParameter4dvNV(target uint32, index uint32, v *float64)
	ProgramParameter4fNV(target uint32, index uint32, x float32, y float32, z float32, w float32)
	ProgramParameter4fvNV(target uint32, index uint32, v *float32)
	ProgramParameters4dvNV(target uint32, index uint32, count int32, v *float64)
	ProgramParameters4fvNV(target uint32, index uint32, count int32, v *float32)
	RequestResidentProgramsNV(n int32, programs *uint32)
	TrackMatrixNV(target uint32, address uint32, matrix uint32, transform uint32)
	VertexAttribPointerNV(index uint32, fsize int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	VertexAttrib1dNV(index uint32, x float64)
	VertexAttrib1dvNV(index uint32, v *float64)
	VertexAttrib1fNV(index uint32, x float32)
	VertexAttrib1fvNV(index uint32, v *float32)
	VertexAttrib1sNV(index uint32, x int16)
	VertexAttrib1svNV(index uint32, v *int16)
	VertexAttrib2dNV(index uint32, x float64, y float64)
	VertexAttrib2dvNV(index uint32, v *float64)
	VertexAttrib2fNV(index uint32, x float32, y float32)
	VertexAttrib2fvNV(index uint32, v *float32)
	VertexAttrib2sNV(index uint32, x int16, y int16)
	VertexAttrib2svNV(index uint32, v *int16)
	VertexAttrib3dNV(index uint32, x float64, y float64, z float64)
	VertexAttrib3dvNV(index uint32, v *float64)
	VertexAttrib3fNV(index uint32, x float32, y float32, z float32)
	VertexAttrib3fvNV(index uint32, v *float32)
	VertexAttrib3sNV(index uint32, x int16, y int16, z int16)
	VertexAttrib3svNV(index uint32, v *int16)
	VertexAttrib4dNV(index uint32, x float64, y float64, z float64, w float64)
	VertexAttrib4dvNV(index uint32, v *float64)
	VertexAttrib4fNV(index uint32, x float32, y float32, z float32, w float32)
	VertexAttrib4fvNV(index uint32, v *float32)
	VertexAttrib4sNV(index uint32, x int16, y int16, z int16, w int16)
	VertexAttrib4svNV(index uint32, v *int16)
	VertexAttrib4ubNV(index uint32, x uint8, y uint8, z uint8, w uint8)
	VertexAttrib4ubvNV(index uint32, v *uint8)
	VertexAttribs1dvNV(index uint32, count int32, v *float64)
	VertexAttribs1fvNV(index uint32, count int32, v *float32)
	VertexAttribs1svNV(index uint32, count int32, v *int16)
	VertexAttribs2dvNV(index uint32, count int32, v *float64)
	VertexAttribs2fvNV(index uint32, count int32, v *float32)
	VertexAttribs2svNV(index uint32, count int32, v *int16)
	VertexAttribs3dvNV(index uint32, count int32, v *float64)
	VertexAttribs3fvNV(index uint32, count int32, v *float32)
	VertexAttribs3svNV(index uint32, count int32, v *int16)
	VertexAttribs4dvNV(index uint32, count int32, v *float64)
	VertexAttribs4fvNV(index uint32, count int32, v *float32)
	VertexAttribs4svNV(index uint32, count int32, v *int16)
	VertexAttribs4ubvNV(index uint32, count int32, v *uint8)
	VertexAttribI1iEXT(index uint32, x int32)
	VertexAttribI2iEXT(index uint32, x int32, y int32)
	VertexAttribI3iEXT(index uint32, x int32, y int32, z int32)
	VertexAttribI4iEXT(index uint32, x int32, y int32, z int32, w int32)
	VertexAttribI1uiEXT(index uint32, x uint32)
	VertexAttribI2uiEXT(index uint32, x uint32, y uint32)
	VertexAttribI3uiEXT(index uint32, x uint32, y uint32, z uint32)
	VertexAttribI4uiEXT(index uint32, x uint32, y uint32, z uint32, w uint32)
	VertexAttribI1ivEXT(index uint32, v *int32)
	VertexAttribI2ivEXT(index uint32, v *int32)
	VertexAttribI3ivEXT(index uint32, v *int32)
	VertexAttribI4ivEXT(index uint32, v *int32)
	VertexAttribI1uivEXT(index uint32, v *uint32)
	VertexAttribI2uivEXT(index uint32, v *uint32)
	VertexAttribI3uivEXT(index uint32, v *uint32)
	VertexAttribI4uivEXT(index uint32, v *uint32)
	VertexAttribI4bvEXT(index uint32, v *int8)
	VertexAttribI4svEXT(index uint32, v *int16)
	VertexAttribI4ubvEXT(index uint32, v *uint8)
	VertexAttribI4usvEXT(index uint32, v *uint16)
	VertexAttribIPointerEXT(index uint32, size int32, type_ uint32, stride int32, pointer unsafe.Pointer)
	GetVertexAttribIivEXT(index uint32, pname uint32, params *int32)
	GetVertexAttribIuivEXT(index uint32, pname uint32, params *uint32)
	BeginVideoCaptureNV(video_capture_slot uint32)
	BindVideoCaptureStreamBufferNV(video_capture_slot uint32, stream uint32, frame_region uint32, offset uintptr)
	BindVideoCaptureStreamTextureNV(video_capture_slot uint32, stream uint32, frame_region uint32, target uint32, texture uint32)
	EndVideoCaptureNV(video_capture_slot uint32)
	GetVideoCaptureivNV(video_capture_slot uint32, pname uint32, params *int32)
	GetVideoCaptureStreamivNV(video_capture_slot uint32, stream uint32, pname uint32, params *int32)
	GetVideoCaptureStreamfvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float32)
	GetVideoCaptureStreamdvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float64)
	VideoCaptureNV(video_capture_slot uint32, sequence_num *uint32, capture_time *uint64) uint32
	VideoCaptureStreamParameterivNV(video_capture_slot uint32, stream uint32, pname uint32, params *int32)
	VideoCaptureStreamParameterfvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float32)
	VideoCaptureStreamParameterdvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float64)
	ViewportSwizzleNV(index uint32, swizzlex uint32, swizzley uint32, swizzlez uint32, swizzlew uint32)
	MultiTexCoord1bOES(texture uint32, s int8)
	MultiTexCoord1bvOES(texture uint32, coords *int8)
	MultiTexCoord2bOES(texture uint32, s int8, t int8)
	MultiTexCoord2bvOES(texture uint32, coords *int8)
	MultiTexCoord3bOES(texture uint32, s int8, t int8, r int8)
	MultiTexCoord3bvOES(texture uint32, coords *int8)
	MultiTexCoord4bOES(texture uint32, s int8, t int8, r int8, q int8)
	MultiTexCoord4bvOES(texture uint32, coords *int8)
	TexCoord1bOES(s int8)
	TexCoord1bvOES(coords *int8)
	TexCoord2bOES(s int8, t int8)
	TexCoord2bvOES(coords *int8)
	TexCoord3bOES(s int8, t int8, r int8)
	TexCoord3bvOES(coords *int8)
	TexCoord4bOES(s int8, t int8, r int8, q int8)
	TexCoord4bvOES(coords *int8)
	Vertex2bOES(x int8, y int8)
	Vertex2bvOES(coords *int8)
	Vertex3bOES(x int8, y int8, z int8)
	Vertex3bvOES(coords *int8)
	Vertex4bOES(x int8, y int8, z int8, w int8)
	Vertex4bvOES(coords *int8)
	AlphaFuncxOES(func_ uint32, ref int32)
	ClearColorxOES(red int32, green int32, blue int32, alpha int32)
	ClearDepthxOES(depth int32)
	ClipPlanexOES(plane uint32, equation *int32)
	Color4xOES(red int32, green int32, blue int32, alpha int32)
	DepthRangexOES(n int32, f int32)
	FogxOES(pname uint32, param int32)
	FogxvOES(pname uint32, param *int32)
	FrustumxOES(l int32, r int32, b int32, t int32, n int32, f int32)
	GetClipPlanexOES(plane uint32, equation *int32)
	GetFixedvOES(pname uint32, params *int32)
	GetTexEnvxvOES(target uint32, pname uint32, params *int32)
	GetTexParameterxvOES(target uint32, pname uint32, params *int32)
	LightModelxOES(pname uint32, param int32)
	LightModelxvOES(pname uint32, param *int32)
	LightxOES(light uint32, pname uint32, param int32)
	LightxvOES(light uint32, pname uint32, params *int32)
	LineWidthxOES(width int32)
	LoadMatrixxOES(m *int32)
	MaterialxOES(face uint32, pname uint32, param int32)
	MaterialxvOES(face uint32, pname uint32, param *int32)
	MultMatrixxOES(m *int32)
	MultiTexCoord4xOES(texture uint32, s int32, t int32, r int32, q int32)
	Normal3xOES(nx int32, ny int32, nz int32)
	OrthoxOES(l int32, r int32, b int32, t int32, n int32, f int32)
	PointParameterxvOES(pname uint32, params *int32)
	PointSizexOES(size int32)
	PolygonOffsetxOES(factor int32, units int32)
	RotatexOES(angle int32, x int32, y int32, z int32)
	ScalexOES(x int32, y int32, z int32)
	TexEnvxOES(target uint32, pname uint32, param int32)
	TexEnvxvOES(target uint32, pname uint32, params *int32)
	TexParameterxOES(target uint32, pname uint32, param int32)
	TexParameterxvOES(target uint32, pname uint32, params *int32)
	TranslatexOES(x int32, y int32, z int32)
	GetLightxvOES(light uint32, pname uint32, params *int32)
	GetMaterialxvOES(face uint32, pname uint32, params *int32)
	PointParameterxOES(pname uint32, param int32)
	SampleCoveragexOES(value int32, invert bool)
	AccumxOES(op uint32, value int32)
	BitmapxOES(width int32, height int32, xorig int32, yorig int32, xmove int32, ymove int32, bitmap *uint8)
	BlendColorxOES(red int32, green int32, blue int32, alpha int32)
	ClearAccumxOES(red int32, green int32, blue int32, alpha int32)
	Color3xOES(red int32, green int32, blue int32)
	Color3xvOES(components *int32)
	Color4xvOES(components *int32)
	ConvolutionParameterxOES(target uint32, pname uint32, param int32)
	ConvolutionParameterxvOES(target uint32, pname uint32, params *int32)
	EvalCoord1xOES(u int32)
	EvalCoord1xvOES(coords *int32)
	EvalCoord2xOES(u int32, v int32)
	EvalCoord2xvOES(coords *int32)
	FeedbackBufferxOES(n int32, type_ uint32, buffer *int32)
	GetConvolutionParameterxvOES(target uint32, pname uint32, params *int32)
	GetHistogramParameterxvOES(target uint32, pname uint32, params *int32)
	GetLightxOES(light uint32, pname uint32, params *int32)
	GetMapxvOES(target uint32, query uint32, v *int32)
	GetMaterialxOES(face uint32, pname uint32, param int32)
	GetPixelMapxv(map_ uint32, size int32, values *int32)
	GetTexGenxvOES(coord uint32, pname uint32, params *int32)
	GetTexLevelParameterxvOES(target uint32, level int32, pname uint32, params *int32)
	IndexxOES(component int32)
	IndexxvOES(component *int32)
	LoadTransposeMatrixxOES(m *int32)
	Map1xOES(target uint32, u1 int32, u2 int32, stride int32, order int32, points int32)
	Map2xOES(target uint32, u1 int32, u2 int32, ustride int32, uorder int32, v1 int32, v2 int32, vstride int32, vorder int32, points int32)
	MapGrid1xOES(n int32, u1 int32, u2 int32)
	MapGrid2xOES(n int32, u1 int32, u2 int32, v1 int32, v2 int32)
	MultTransposeMatrixxOES(m *int32)
	MultiTexCoord1xOES(texture uint32, s int32)
	MultiTexCoord1xvOES(texture uint32, coords *int32)
	MultiTexCoord2xOES(texture uint32, s int32, t int32)
	MultiTexCoord2xvOES(texture uint32, coords *int32)
	MultiTexCoord3xOES(texture uint32, s int32, t int32, r int32)
	MultiTexCoord3xvOES(texture uint32, coords *int32)
	MultiTexCoord4xvOES(texture uint32, coords *int32)
	Normal3xvOES(coords *int32)
	PassThroughxOES(token int32)
	PixelMapx(map_ uint32, size int32, values *int32)
	PixelStorex(pname uint32, param int32)
	PixelTransferxOES(pname uint32, param int32)
	PixelZoomxOES(xfactor int32, yfactor int32)
	PrioritizeTexturesxOES(n int32, textures *uint32, priorities *int32)
	RasterPos2xOES(x int32, y int32)
	RasterPos2xvOES(coords *int32)
	RasterPos3xOES(x int32, y int32, z int32)
	RasterPos3xvOES(coords *int32)
	RasterPos4xOES(x int32, y int32, z int32, w int32)
	RasterPos4xvOES(coords *int32)
	RectxOES(x1 int32, y1 int32, x2 int32, y2 int32)
	RectxvOES(v1 *int32, v2 *int32)
	TexCoord1xOES(s int32)
	TexCoord1xvOES(coords *int32)
	TexCoord2xOES(s int32, t int32)
	TexCoord2xvOES(coords *int32)
	TexCoord3xOES(s int32, t int32, r int32)
	TexCoord3xvOES(coords *int32)
	TexCoord4xOES(s int32, t int32, r int32, q int32)
	TexCoord4xvOES(coords *int32)
	TexGenxOES(coord uint32, pname uint32, param int32)
	TexGenxvOES(coord uint32, pname uint32, params *int32)
	Vertex2xOES(x int32)
	Vertex2xvOES(coords *int32)
	Vertex3xOES(x int32, y int32)
	Vertex3xvOES(coords *int32)
	Vertex4xOES(x int32, y int32, z int32)
	Vertex4xvOES(coords *int32)
	QueryMatrixxOES(mantissa *int32, exponent *int32) uint32
	ClearDepthfOES(depth float32)
	ClipPlanefOES(plane uint32, equation *float32)
	DepthRangefOES(n float32, f float32)
	FrustumfOES(l float32, r float32, b float32, t float32, n float32, f float32)
	GetClipPlanefOES(plane uint32, equation *float32)
	OrthofOES(l float32, r float32, b float32, t float32, n float32, f float32)
	FramebufferTextureMultiviewOVR(target uint32, attachment uint32, texture uint32, level int32, baseViewIndex int32, numViews int32)
	HintPGI(target uint32, mode int32)
	DetailTexFuncSGIS(target uint32, n int32, points *float32)
	GetDetailTexFuncSGIS(target uint32, points *float32)
	FogFuncSGIS(n int32, points *float32)
	GetFogFuncSGIS(points *float32)
	SampleMaskSGIS(value float32, invert bool)
	SamplePatternSGIS(pattern uint32)
	PixelTexGenParameteriSGIS(pname uint32, param int32)
	PixelTexGenParameterivSGIS(pname uint32, params *int32)
	PixelTexGenParameterfSGIS(pname uint32, param float32)
	PixelTexGenParameterfvSGIS(pname uint32, params *float32)
	GetPixelTexGenParameterivSGIS(pname uint32, params *int32)
	GetPixelTexGenParameterfvSGIS(pname uint32, params *float32)
	PointParameterfSGIS(pname uint32, param float32)
	PointParameterfvSGIS(pname uint32, params *float32)
	SharpenTexFuncSGIS(target uint32, n int32, points *float32)
	GetSharpenTexFuncSGIS(target uint32, points *float32)
	TexImage4DSGIS(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, size4d int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TexSubImage4DSGIS(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, woffset int32, width int32, height int32, depth int32, size4d int32, format uint32, type_ uint32, pixels unsafe.Pointer)
	TextureColorMaskSGIS(red bool, green bool, blue bool, alpha bool)
	GetTexFilterFuncSGIS(target uint32, filter uint32, weights *float32)
	TexFilterFuncSGIS(target uint32, filter uint32, n int32, weights *float32)
	AsyncMarkerSGIX(marker uint32)
	FinishAsyncSGIX(markerp *uint32) int32
	PollAsyncSGIX(markerp *uint32) int32
	GenAsyncMarkersSGIX(range_ int32) uint32
	DeleteAsyncMarkersSGIX(marker uint32, range_ int32)
	IsAsyncMarkerSGIX(marker uint32) bool
	FlushRasterSGIX()
	FragmentColorMaterialSGIX(face uint32, mode uint32)
	FragmentLightfSGIX(light uint32, pname uint32, param float32)
	FragmentLightfvSGIX(light uint32, pname uint32, params *float32)
	FragmentLightiSGIX(light uint32, pname uint32, param int32)
	FragmentLightivSGIX(light uint32, pname uint32, params *int32)
	FragmentLightModelfSGIX(pname uint32, param float32)
	FragmentLightModelfvSGIX(pname uint32, params *float32)
	FragmentLightModeliSGIX(pname uint32, param int32)
	FragmentLightModelivSGIX(pname uint32, params *int32)
	FragmentMaterialfSGIX(face uint32, pname uint32, param float32)
	FragmentMaterialfvSGIX(face uint32, pname uint32, params *float32)
	FragmentMaterialiSGIX(face uint32, pname uint32, param int32)
	FragmentMaterialivSGIX(face uint32, pname uint32, params *int32)
	GetFragmentLightfvSGIX(light uint32, pname uint32, params *float32)
	GetFragmentLightivSGIX(light uint32, pname uint32, params *int32)
	GetFragmentMaterialfvSGIX(face uint32, pname uint32, params *float32)
	GetFragmentMaterialivSGIX(face uint32, pname uint32, params *int32)
	LightEnviSGIX(pname uint32, param int32)
	FrameZoomSGIX(factor int32)
	IglooInterfaceSGIX(pname uint32, params unsafe.Pointer)
	GetInstrumentsSGIX() int32
	InstrumentsBufferSGIX(size int32, buffer *int32)
	PollInstrumentsSGIX(marker_p *int32) int32
	ReadInstrumentsSGIX(marker int32)
	StartInstrumentsSGIX()
	StopInstrumentsSGIX(marker int32)
	GetListParameterfvSGIX(list uint32, pname uint32, params *float32)
	GetListParameterivSGIX(list uint32, pname uint32, params *int32)
	ListParameterfSGIX(list uint32, pname uint32, param float32)
	ListParameterfvSGIX(list uint32, pname uint32, params *float32)
	ListParameteriSGIX(list uint32, pname uint32, param int32)
	ListParameterivSGIX(list uint32, pname uint32, params *int32)
	PixelTexGenSGIX(mode uint32)
	DeformationMap3dSGIX(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, w1 float64, w2 float64, wstride int32, worder int32, points *float64)
	DeformationMap3fSGIX(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, w1 float32, w2 float32, wstride int32, worder int32, points *float32)
	DeformSGIX(mask uint32)
	LoadIdentityDeformationMapSGIX(mask uint32)
	ReferencePlaneSGIX(equation *float64)
	SpriteParameterfSGIX(pname uint32, param float32)
	SpriteParameterfvSGIX(pname uint32, params *float32)
	SpriteParameteriSGIX(pname uint32, param int32)
	SpriteParameterivSGIX(pname uint32, params *int32)
	TagSampleBufferSGIX()
	ColorTableSGI(target uint32, internalformat uint32, width int32, format uint32, type_ uint32, table unsafe.Pointer)
	ColorTableParameterfvSGI(target uint32, pname uint32, params *float32)
	ColorTableParameterivSGI(target uint32, pname uint32, params *int32)
	CopyColorTableSGI(target uint32, internalformat uint32, x int32, y int32, width int32)
	GetColorTableSGI(target uint32, format uint32, type_ uint32, table unsafe.Pointer)
	GetColorTableParameterfvSGI(target uint32, pname uint32, params *float32)
	GetColorTableParameterivSGI(target uint32, pname uint32, params *int32)
	FinishTextureSUNX()
	GlobalAlphaFactorbSUN(factor int8)
	GlobalAlphaFactorsSUN(factor int16)
	GlobalAlphaFactoriSUN(factor int32)
	GlobalAlphaFactorfSUN(factor float32)
	GlobalAlphaFactordSUN(factor float64)
	GlobalAlphaFactorubSUN(factor uint8)
	GlobalAlphaFactorusSUN(factor uint16)
	GlobalAlphaFactoruiSUN(factor uint32)
	DrawMeshArraysSUN(mode uint32, first int32, count int32, width int32)
	ReplacementCodeuiSUN(code uint32)
	ReplacementCodeusSUN(code uint16)
	ReplacementCodeubSUN(code uint8)
	ReplacementCodeuivSUN(code *uint32)
	ReplacementCodeusvSUN(code *uint16)
	ReplacementCodeubvSUN(code *uint8)
	ReplacementCodePointerSUN(type_ uint32, stride int32, pointer *unsafe.Pointer)
	Color4ubVertex2fSUN(r uint8, g uint8, b uint8, a uint8, x float32, y float32)
	Color4ubVertex2fvSUN(c *uint8, v *float32)
	Color4ubVertex3fSUN(r uint8, g uint8, b uint8, a uint8, x float32, y float32, z float32)
	Color4ubVertex3fvSUN(c *uint8, v *float32)
	Color3fVertex3fSUN(r float32, g float32, b float32, x float32, y float32, z float32)
	Color3fVertex3fvSUN(c *float32, v *float32)
	Normal3fVertex3fSUN(nx float32, ny float32, nz float32, x float32, y float32, z float32)
	Normal3fVertex3fvSUN(n *float32, v *float32)
	Color4fNormal3fVertex3fSUN(r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32)
	Color4fNormal3fVertex3fvSUN(c *float32, n *float32, v *float32)
	TexCoord2fVertex3fSUN(s float32, t float32, x float32, y float32, z float32)
	TexCoord2fVertex3fvSUN(tc *float32, v *float32)
	TexCoord4fVertex4fSUN(s float32, t float32, p float32, q float32, x float32, y float32, z float32, w float32)
	TexCoord4fVertex4fvSUN(tc *float32, v *float32)
	TexCoord2fColor4ubVertex3fSUN(s float32, t float32, r uint8, g uint8, b uint8, a uint8, x float32, y float32, z float32)
	TexCoord2fColor4ubVertex3fvSUN(tc *float32, c *uint8, v *float32)
	TexCoord2fColor3fVertex3fSUN(s float32, t float32, r float32, g float32, b float32, x float32, y float32, z float32)
	TexCoord2fColor3fVertex3fvSUN(tc *float32, c *float32, v *float32)
	TexCoord2fNormal3fVertex3fSUN(s float32, t float32, nx float32, ny float32, nz float32, x float32, y float32, z float32)
	TexCoord2fNormal3fVertex3fvSUN(tc *float32, n *float32, v *float32)
	TexCoord2fColor4fNormal3fVertex3fSUN(s float32, t float32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32)
	TexCoord2fColor4fNormal3fVertex3fvSUN(tc *float32, c *float32, n *float32, v *float32)
	TexCoord4fColor4fNormal3fVertex4fSUN(s float32, t float32, p float32, q float32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32, w float32)
	TexCoord4fColor4fNormal3fVertex4fvSUN(tc *float32, c *float32, n *float32, v *float32)
	ReplacementCodeuiVertex3fSUN(rc uint32, x float32, y float32, z float32)
	ReplacementCodeuiVertex3fvSUN(rc *uint32, v *float32)
	ReplacementCodeuiColor4ubVertex3fSUN(rc uint32, r uint8, g uint8, b uint8, a uint8, x float32, y float32, z float32)
	ReplacementCodeuiColor4ubVertex3fvSUN(rc *uint32, c *uint8, v *float32)
	ReplacementCodeuiColor3fVertex3fSUN(rc uint32, r float32, g float32, b float32, x float32, y float32, z float32)
	ReplacementCodeuiColor3fVertex3fvSUN(rc *uint32, c *float32, v *float32)
	ReplacementCodeuiNormal3fVertex3fSUN(rc uint32, nx float32, ny float32, nz float32, x float32, y float32, z float32)
	ReplacementCodeuiNormal3fVertex3fvSUN(rc *uint32, n *float32, v *float32)
	ReplacementCodeuiColor4fNormal3fVertex3fSUN(rc uint32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32)
	ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc *uint32, c *float32, n *float32, v *float32)
	ReplacementCodeuiTexCoord2fVertex3fSUN(rc uint32, s float32, t float32, x float32, y float32, z float32)
	ReplacementCodeuiTexCoord2fVertex3fvSUN(rc *uint32, tc *float32, v *float32)
	ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc uint32, s float32, t float32, nx float32, ny float32, nz float32, x float32, y float32, z float32)
	ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc *uint32, tc *float32, n *float32, v *float32)
	ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc uint32, s float32, t float32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32)
	ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc *uint32, tc *float32, c *float32, n *float32, v *float32)
}

func (gl *lib) initExtensions(getProcAddr func(name string) unsafe.Pointer) {
	gl.glTbufferMask3DFX = getProcAddr("glTbufferMask3DFX")
	gl.glDebugMessageEnableAMD = getProcAddr("glDebugMessageEnableAMD")
	gl.glDebugMessageInsertAMD = getProcAddr("glDebugMessageInsertAMD")
	gl.glDebugMessageCallbackAMD = getProcAddr("glDebugMessageCallbackAMD")
	gl.glGetDebugMessageLogAMD = getProcAddr("glGetDebugMessageLogAMD")
	gl.glBlendFuncIndexedAMD = getProcAddr("glBlendFuncIndexedAMD")
	gl.glBlendFuncSeparateIndexedAMD = getProcAddr("glBlendFuncSeparateIndexedAMD")
	gl.glBlendEquationIndexedAMD = getProcAddr("glBlendEquationIndexedAMD")
	gl.glBlendEquationSeparateIndexedAMD = getProcAddr("glBlendEquationSeparateIndexedAMD")
	gl.glRenderbufferStorageMultisampleAdvancedAMD = getProcAddr("glRenderbufferStorageMultisampleAdvancedAMD")
	gl.glNamedRenderbufferStorageMultisampleAdvancedAMD = getProcAddr("glNamedRenderbufferStorageMultisampleAdvancedAMD")
	gl.glFramebufferSamplePositionsfvAMD = getProcAddr("glFramebufferSamplePositionsfvAMD")
	gl.glNamedFramebufferSamplePositionsfvAMD = getProcAddr("glNamedFramebufferSamplePositionsfvAMD")
	gl.glGetFramebufferParameterfvAMD = getProcAddr("glGetFramebufferParameterfvAMD")
	gl.glGetNamedFramebufferParameterfvAMD = getProcAddr("glGetNamedFramebufferParameterfvAMD")
	gl.glUniform1i64NV = getProcAddr("glUniform1i64NV")
	gl.glUniform2i64NV = getProcAddr("glUniform2i64NV")
	gl.glUniform3i64NV = getProcAddr("glUniform3i64NV")
	gl.glUniform4i64NV = getProcAddr("glUniform4i64NV")
	gl.glUniform1i64vNV = getProcAddr("glUniform1i64vNV")
	gl.glUniform2i64vNV = getProcAddr("glUniform2i64vNV")
	gl.glUniform3i64vNV = getProcAddr("glUniform3i64vNV")
	gl.glUniform4i64vNV = getProcAddr("glUniform4i64vNV")
	gl.glUniform1ui64NV = getProcAddr("glUniform1ui64NV")
	gl.glUniform2ui64NV = getProcAddr("glUniform2ui64NV")
	gl.glUniform3ui64NV = getProcAddr("glUniform3ui64NV")
	gl.glUniform4ui64NV = getProcAddr("glUniform4ui64NV")
	gl.glUniform1ui64vNV = getProcAddr("glUniform1ui64vNV")
	gl.glUniform2ui64vNV = getProcAddr("glUniform2ui64vNV")
	gl.glUniform3ui64vNV = getProcAddr("glUniform3ui64vNV")
	gl.glUniform4ui64vNV = getProcAddr("glUniform4ui64vNV")
	gl.glGetUniformi64vNV = getProcAddr("glGetUniformi64vNV")
	gl.glGetUniformui64vNV = getProcAddr("glGetUniformui64vNV")
	gl.glProgramUniform1i64NV = getProcAddr("glProgramUniform1i64NV")
	gl.glProgramUniform2i64NV = getProcAddr("glProgramUniform2i64NV")
	gl.glProgramUniform3i64NV = getProcAddr("glProgramUniform3i64NV")
	gl.glProgramUniform4i64NV = getProcAddr("glProgramUniform4i64NV")
	gl.glProgramUniform1i64vNV = getProcAddr("glProgramUniform1i64vNV")
	gl.glProgramUniform2i64vNV = getProcAddr("glProgramUniform2i64vNV")
	gl.glProgramUniform3i64vNV = getProcAddr("glProgramUniform3i64vNV")
	gl.glProgramUniform4i64vNV = getProcAddr("glProgramUniform4i64vNV")
	gl.glProgramUniform1ui64NV = getProcAddr("glProgramUniform1ui64NV")
	gl.glProgramUniform2ui64NV = getProcAddr("glProgramUniform2ui64NV")
	gl.glProgramUniform3ui64NV = getProcAddr("glProgramUniform3ui64NV")
	gl.glProgramUniform4ui64NV = getProcAddr("glProgramUniform4ui64NV")
	gl.glProgramUniform1ui64vNV = getProcAddr("glProgramUniform1ui64vNV")
	gl.glProgramUniform2ui64vNV = getProcAddr("glProgramUniform2ui64vNV")
	gl.glProgramUniform3ui64vNV = getProcAddr("glProgramUniform3ui64vNV")
	gl.glProgramUniform4ui64vNV = getProcAddr("glProgramUniform4ui64vNV")
	gl.glVertexAttribParameteriAMD = getProcAddr("glVertexAttribParameteriAMD")
	gl.glMultiDrawArraysIndirectAMD = getProcAddr("glMultiDrawArraysIndirectAMD")
	gl.glMultiDrawElementsIndirectAMD = getProcAddr("glMultiDrawElementsIndirectAMD")
	gl.glGenNamesAMD = getProcAddr("glGenNamesAMD")
	gl.glDeleteNamesAMD = getProcAddr("glDeleteNamesAMD")
	gl.glIsNameAMD = getProcAddr("glIsNameAMD")
	gl.glQueryObjectParameteruiAMD = getProcAddr("glQueryObjectParameteruiAMD")
	gl.glGetPerfMonitorGroupsAMD = getProcAddr("glGetPerfMonitorGroupsAMD")
	gl.glGetPerfMonitorCountersAMD = getProcAddr("glGetPerfMonitorCountersAMD")
	gl.glGetPerfMonitorGroupStringAMD = getProcAddr("glGetPerfMonitorGroupStringAMD")
	gl.glGetPerfMonitorCounterStringAMD = getProcAddr("glGetPerfMonitorCounterStringAMD")
	gl.glGetPerfMonitorCounterInfoAMD = getProcAddr("glGetPerfMonitorCounterInfoAMD")
	gl.glGenPerfMonitorsAMD = getProcAddr("glGenPerfMonitorsAMD")
	gl.glDeletePerfMonitorsAMD = getProcAddr("glDeletePerfMonitorsAMD")
	gl.glSelectPerfMonitorCountersAMD = getProcAddr("glSelectPerfMonitorCountersAMD")
	gl.glBeginPerfMonitorAMD = getProcAddr("glBeginPerfMonitorAMD")
	gl.glEndPerfMonitorAMD = getProcAddr("glEndPerfMonitorAMD")
	gl.glGetPerfMonitorCounterDataAMD = getProcAddr("glGetPerfMonitorCounterDataAMD")
	gl.glSetMultisamplefvAMD = getProcAddr("glSetMultisamplefvAMD")
	gl.glTexStorageSparseAMD = getProcAddr("glTexStorageSparseAMD")
	gl.glTextureStorageSparseAMD = getProcAddr("glTextureStorageSparseAMD")
	gl.glStencilOpValueAMD = getProcAddr("glStencilOpValueAMD")
	gl.glTessellationFactorAMD = getProcAddr("glTessellationFactorAMD")
	gl.glTessellationModeAMD = getProcAddr("glTessellationModeAMD")
	gl.glElementPointerAPPLE = getProcAddr("glElementPointerAPPLE")
	gl.glDrawElementArrayAPPLE = getProcAddr("glDrawElementArrayAPPLE")
	gl.glDrawRangeElementArrayAPPLE = getProcAddr("glDrawRangeElementArrayAPPLE")
	gl.glMultiDrawElementArrayAPPLE = getProcAddr("glMultiDrawElementArrayAPPLE")
	gl.glMultiDrawRangeElementArrayAPPLE = getProcAddr("glMultiDrawRangeElementArrayAPPLE")
	gl.glGenFencesAPPLE = getProcAddr("glGenFencesAPPLE")
	gl.glDeleteFencesAPPLE = getProcAddr("glDeleteFencesAPPLE")
	gl.glSetFenceAPPLE = getProcAddr("glSetFenceAPPLE")
	gl.glIsFenceAPPLE = getProcAddr("glIsFenceAPPLE")
	gl.glTestFenceAPPLE = getProcAddr("glTestFenceAPPLE")
	gl.glFinishFenceAPPLE = getProcAddr("glFinishFenceAPPLE")
	gl.glTestObjectAPPLE = getProcAddr("glTestObjectAPPLE")
	gl.glFinishObjectAPPLE = getProcAddr("glFinishObjectAPPLE")
	gl.glBufferParameteriAPPLE = getProcAddr("glBufferParameteriAPPLE")
	gl.glFlushMappedBufferRangeAPPLE = getProcAddr("glFlushMappedBufferRangeAPPLE")
	gl.glObjectPurgeableAPPLE = getProcAddr("glObjectPurgeableAPPLE")
	gl.glObjectUnpurgeableAPPLE = getProcAddr("glObjectUnpurgeableAPPLE")
	gl.glGetObjectParameterivAPPLE = getProcAddr("glGetObjectParameterivAPPLE")
	gl.glTextureRangeAPPLE = getProcAddr("glTextureRangeAPPLE")
	gl.glGetTexParameterPointervAPPLE = getProcAddr("glGetTexParameterPointervAPPLE")
	gl.glBindVertexArrayAPPLE = getProcAddr("glBindVertexArrayAPPLE")
	gl.glDeleteVertexArraysAPPLE = getProcAddr("glDeleteVertexArraysAPPLE")
	gl.glGenVertexArraysAPPLE = getProcAddr("glGenVertexArraysAPPLE")
	gl.glIsVertexArrayAPPLE = getProcAddr("glIsVertexArrayAPPLE")
	gl.glVertexArrayRangeAPPLE = getProcAddr("glVertexArrayRangeAPPLE")
	gl.glFlushVertexArrayRangeAPPLE = getProcAddr("glFlushVertexArrayRangeAPPLE")
	gl.glVertexArrayParameteriAPPLE = getProcAddr("glVertexArrayParameteriAPPLE")
	gl.glEnableVertexAttribAPPLE = getProcAddr("glEnableVertexAttribAPPLE")
	gl.glDisableVertexAttribAPPLE = getProcAddr("glDisableVertexAttribAPPLE")
	gl.glIsVertexAttribEnabledAPPLE = getProcAddr("glIsVertexAttribEnabledAPPLE")
	gl.glMapVertexAttrib1dAPPLE = getProcAddr("glMapVertexAttrib1dAPPLE")
	gl.glMapVertexAttrib1fAPPLE = getProcAddr("glMapVertexAttrib1fAPPLE")
	gl.glMapVertexAttrib2dAPPLE = getProcAddr("glMapVertexAttrib2dAPPLE")
	gl.glMapVertexAttrib2fAPPLE = getProcAddr("glMapVertexAttrib2fAPPLE")
	gl.glReleaseShaderCompiler = getProcAddr("glReleaseShaderCompiler")
	gl.glShaderBinary = getProcAddr("glShaderBinary")
	gl.glGetShaderPrecisionFormat = getProcAddr("glGetShaderPrecisionFormat")
	gl.glDepthRangef = getProcAddr("glDepthRangef")
	gl.glClearDepthf = getProcAddr("glClearDepthf")
	gl.glMemoryBarrierByRegion = getProcAddr("glMemoryBarrierByRegion")
	gl.glPrimitiveBoundingBoxARB = getProcAddr("glPrimitiveBoundingBoxARB")
	gl.glDrawArraysInstancedBaseInstance = getProcAddr("glDrawArraysInstancedBaseInstance")
	gl.glDrawElementsInstancedBaseInstance = getProcAddr("glDrawElementsInstancedBaseInstance")
	gl.glDrawElementsInstancedBaseVertexBaseInstance = getProcAddr("glDrawElementsInstancedBaseVertexBaseInstance")
	gl.glGetTextureHandleARB = getProcAddr("glGetTextureHandleARB")
	gl.glGetTextureSamplerHandleARB = getProcAddr("glGetTextureSamplerHandleARB")
	gl.glMakeTextureHandleResidentARB = getProcAddr("glMakeTextureHandleResidentARB")
	gl.glMakeTextureHandleNonResidentARB = getProcAddr("glMakeTextureHandleNonResidentARB")
	gl.glGetImageHandleARB = getProcAddr("glGetImageHandleARB")
	gl.glMakeImageHandleResidentARB = getProcAddr("glMakeImageHandleResidentARB")
	gl.glMakeImageHandleNonResidentARB = getProcAddr("glMakeImageHandleNonResidentARB")
	gl.glUniformHandleui64ARB = getProcAddr("glUniformHandleui64ARB")
	gl.glUniformHandleui64vARB = getProcAddr("glUniformHandleui64vARB")
	gl.glProgramUniformHandleui64ARB = getProcAddr("glProgramUniformHandleui64ARB")
	gl.glProgramUniformHandleui64vARB = getProcAddr("glProgramUniformHandleui64vARB")
	gl.glIsTextureHandleResidentARB = getProcAddr("glIsTextureHandleResidentARB")
	gl.glIsImageHandleResidentARB = getProcAddr("glIsImageHandleResidentARB")
	gl.glVertexAttribL1ui64ARB = getProcAddr("glVertexAttribL1ui64ARB")
	gl.glVertexAttribL1ui64vARB = getProcAddr("glVertexAttribL1ui64vARB")
	gl.glGetVertexAttribLui64vARB = getProcAddr("glGetVertexAttribLui64vARB")
	gl.glBindFragDataLocationIndexed = getProcAddr("glBindFragDataLocationIndexed")
	gl.glGetFragDataIndex = getProcAddr("glGetFragDataIndex")
	gl.glBufferStorage = getProcAddr("glBufferStorage")
	gl.glClearBufferData = getProcAddr("glClearBufferData")
	gl.glClearBufferSubData = getProcAddr("glClearBufferSubData")
	gl.glClearTexImage = getProcAddr("glClearTexImage")
	gl.glClearTexSubImage = getProcAddr("glClearTexSubImage")
	gl.glClipControl = getProcAddr("glClipControl")
	gl.glClampColorARB = getProcAddr("glClampColorARB")
	gl.glDispatchCompute = getProcAddr("glDispatchCompute")
	gl.glDispatchComputeIndirect = getProcAddr("glDispatchComputeIndirect")
	gl.glDispatchComputeGroupSizeARB = getProcAddr("glDispatchComputeGroupSizeARB")
	gl.glCopyBufferSubData = getProcAddr("glCopyBufferSubData")
	gl.glCopyImageSubData = getProcAddr("glCopyImageSubData")
	gl.glDebugMessageControlARB = getProcAddr("glDebugMessageControlARB")
	gl.glDebugMessageInsertARB = getProcAddr("glDebugMessageInsertARB")
	gl.glDebugMessageCallbackARB = getProcAddr("glDebugMessageCallbackARB")
	gl.glGetDebugMessageLogARB = getProcAddr("glGetDebugMessageLogARB")
	gl.glCreateTransformFeedbacks = getProcAddr("glCreateTransformFeedbacks")
	gl.glTransformFeedbackBufferBase = getProcAddr("glTransformFeedbackBufferBase")
	gl.glTransformFeedbackBufferRange = getProcAddr("glTransformFeedbackBufferRange")
	gl.glGetTransformFeedbackiv = getProcAddr("glGetTransformFeedbackiv")
	gl.glGetTransformFeedbacki_v = getProcAddr("glGetTransformFeedbacki_v")
	gl.glGetTransformFeedbacki64_v = getProcAddr("glGetTransformFeedbacki64_v")
	gl.glCreateBuffers = getProcAddr("glCreateBuffers")
	gl.glNamedBufferStorage = getProcAddr("glNamedBufferStorage")
	gl.glNamedBufferData = getProcAddr("glNamedBufferData")
	gl.glNamedBufferSubData = getProcAddr("glNamedBufferSubData")
	gl.glCopyNamedBufferSubData = getProcAddr("glCopyNamedBufferSubData")
	gl.glClearNamedBufferData = getProcAddr("glClearNamedBufferData")
	gl.glClearNamedBufferSubData = getProcAddr("glClearNamedBufferSubData")
	gl.glMapNamedBuffer = getProcAddr("glMapNamedBuffer")
	gl.glMapNamedBufferRange = getProcAddr("glMapNamedBufferRange")
	gl.glUnmapNamedBuffer = getProcAddr("glUnmapNamedBuffer")
	gl.glFlushMappedNamedBufferRange = getProcAddr("glFlushMappedNamedBufferRange")
	gl.glGetNamedBufferParameteriv = getProcAddr("glGetNamedBufferParameteriv")
	gl.glGetNamedBufferParameteri64v = getProcAddr("glGetNamedBufferParameteri64v")
	gl.glGetNamedBufferPointerv = getProcAddr("glGetNamedBufferPointerv")
	gl.glGetNamedBufferSubData = getProcAddr("glGetNamedBufferSubData")
	gl.glCreateFramebuffers = getProcAddr("glCreateFramebuffers")
	gl.glNamedFramebufferRenderbuffer = getProcAddr("glNamedFramebufferRenderbuffer")
	gl.glNamedFramebufferParameteri = getProcAddr("glNamedFramebufferParameteri")
	gl.glNamedFramebufferTexture = getProcAddr("glNamedFramebufferTexture")
	gl.glNamedFramebufferTextureLayer = getProcAddr("glNamedFramebufferTextureLayer")
	gl.glNamedFramebufferDrawBuffer = getProcAddr("glNamedFramebufferDrawBuffer")
	gl.glNamedFramebufferDrawBuffers = getProcAddr("glNamedFramebufferDrawBuffers")
	gl.glNamedFramebufferReadBuffer = getProcAddr("glNamedFramebufferReadBuffer")
	gl.glInvalidateNamedFramebufferData = getProcAddr("glInvalidateNamedFramebufferData")
	gl.glInvalidateNamedFramebufferSubData = getProcAddr("glInvalidateNamedFramebufferSubData")
	gl.glClearNamedFramebufferiv = getProcAddr("glClearNamedFramebufferiv")
	gl.glClearNamedFramebufferuiv = getProcAddr("glClearNamedFramebufferuiv")
	gl.glClearNamedFramebufferfv = getProcAddr("glClearNamedFramebufferfv")
	gl.glClearNamedFramebufferfi = getProcAddr("glClearNamedFramebufferfi")
	gl.glBlitNamedFramebuffer = getProcAddr("glBlitNamedFramebuffer")
	gl.glCheckNamedFramebufferStatus = getProcAddr("glCheckNamedFramebufferStatus")
	gl.glGetNamedFramebufferParameteriv = getProcAddr("glGetNamedFramebufferParameteriv")
	gl.glGetNamedFramebufferAttachmentParameteriv = getProcAddr("glGetNamedFramebufferAttachmentParameteriv")
	gl.glCreateRenderbuffers = getProcAddr("glCreateRenderbuffers")
	gl.glNamedRenderbufferStorage = getProcAddr("glNamedRenderbufferStorage")
	gl.glNamedRenderbufferStorageMultisample = getProcAddr("glNamedRenderbufferStorageMultisample")
	gl.glGetNamedRenderbufferParameteriv = getProcAddr("glGetNamedRenderbufferParameteriv")
	gl.glCreateTextures = getProcAddr("glCreateTextures")
	gl.glTextureBuffer = getProcAddr("glTextureBuffer")
	gl.glTextureBufferRange = getProcAddr("glTextureBufferRange")
	gl.glTextureStorage1D = getProcAddr("glTextureStorage1D")
	gl.glTextureStorage2D = getProcAddr("glTextureStorage2D")
	gl.glTextureStorage3D = getProcAddr("glTextureStorage3D")
	gl.glTextureStorage2DMultisample = getProcAddr("glTextureStorage2DMultisample")
	gl.glTextureStorage3DMultisample = getProcAddr("glTextureStorage3DMultisample")
	gl.glTextureSubImage1D = getProcAddr("glTextureSubImage1D")
	gl.glTextureSubImage2D = getProcAddr("glTextureSubImage2D")
	gl.glTextureSubImage3D = getProcAddr("glTextureSubImage3D")
	gl.glCompressedTextureSubImage1D = getProcAddr("glCompressedTextureSubImage1D")
	gl.glCompressedTextureSubImage2D = getProcAddr("glCompressedTextureSubImage2D")
	gl.glCompressedTextureSubImage3D = getProcAddr("glCompressedTextureSubImage3D")
	gl.glCopyTextureSubImage1D = getProcAddr("glCopyTextureSubImage1D")
	gl.glCopyTextureSubImage2D = getProcAddr("glCopyTextureSubImage2D")
	gl.glCopyTextureSubImage3D = getProcAddr("glCopyTextureSubImage3D")
	gl.glTextureParameterf = getProcAddr("glTextureParameterf")
	gl.glTextureParameterfv = getProcAddr("glTextureParameterfv")
	gl.glTextureParameteri = getProcAddr("glTextureParameteri")
	gl.glTextureParameterIiv = getProcAddr("glTextureParameterIiv")
	gl.glTextureParameterIuiv = getProcAddr("glTextureParameterIuiv")
	gl.glTextureParameteriv = getProcAddr("glTextureParameteriv")
	gl.glGenerateTextureMipmap = getProcAddr("glGenerateTextureMipmap")
	gl.glBindTextureUnit = getProcAddr("glBindTextureUnit")
	gl.glGetTextureImage = getProcAddr("glGetTextureImage")
	gl.glGetCompressedTextureImage = getProcAddr("glGetCompressedTextureImage")
	gl.glGetTextureLevelParameterfv = getProcAddr("glGetTextureLevelParameterfv")
	gl.glGetTextureLevelParameteriv = getProcAddr("glGetTextureLevelParameteriv")
	gl.glGetTextureParameterfv = getProcAddr("glGetTextureParameterfv")
	gl.glGetTextureParameterIiv = getProcAddr("glGetTextureParameterIiv")
	gl.glGetTextureParameterIuiv = getProcAddr("glGetTextureParameterIuiv")
	gl.glGetTextureParameteriv = getProcAddr("glGetTextureParameteriv")
	gl.glCreateVertexArrays = getProcAddr("glCreateVertexArrays")
	gl.glDisableVertexArrayAttrib = getProcAddr("glDisableVertexArrayAttrib")
	gl.glEnableVertexArrayAttrib = getProcAddr("glEnableVertexArrayAttrib")
	gl.glVertexArrayElementBuffer = getProcAddr("glVertexArrayElementBuffer")
	gl.glVertexArrayVertexBuffer = getProcAddr("glVertexArrayVertexBuffer")
	gl.glVertexArrayVertexBuffers = getProcAddr("glVertexArrayVertexBuffers")
	gl.glVertexArrayAttribBinding = getProcAddr("glVertexArrayAttribBinding")
	gl.glVertexArrayAttribFormat = getProcAddr("glVertexArrayAttribFormat")
	gl.glVertexArrayAttribIFormat = getProcAddr("glVertexArrayAttribIFormat")
	gl.glVertexArrayAttribLFormat = getProcAddr("glVertexArrayAttribLFormat")
	gl.glVertexArrayBindingDivisor = getProcAddr("glVertexArrayBindingDivisor")
	gl.glGetVertexArrayiv = getProcAddr("glGetVertexArrayiv")
	gl.glGetVertexArrayIndexediv = getProcAddr("glGetVertexArrayIndexediv")
	gl.glGetVertexArrayIndexed64iv = getProcAddr("glGetVertexArrayIndexed64iv")
	gl.glCreateSamplers = getProcAddr("glCreateSamplers")
	gl.glCreateProgramPipelines = getProcAddr("glCreateProgramPipelines")
	gl.glCreateQueries = getProcAddr("glCreateQueries")
	gl.glGetQueryBufferObjecti64v = getProcAddr("glGetQueryBufferObjecti64v")
	gl.glGetQueryBufferObjectiv = getProcAddr("glGetQueryBufferObjectiv")
	gl.glGetQueryBufferObjectui64v = getProcAddr("glGetQueryBufferObjectui64v")
	gl.glGetQueryBufferObjectuiv = getProcAddr("glGetQueryBufferObjectuiv")
	gl.glDrawBuffersARB = getProcAddr("glDrawBuffersARB")
	gl.glBlendEquationiARB = getProcAddr("glBlendEquationiARB")
	gl.glBlendEquationSeparateiARB = getProcAddr("glBlendEquationSeparateiARB")
	gl.glBlendFunciARB = getProcAddr("glBlendFunciARB")
	gl.glBlendFuncSeparateiARB = getProcAddr("glBlendFuncSeparateiARB")
	gl.glDrawElementsBaseVertex = getProcAddr("glDrawElementsBaseVertex")
	gl.glDrawRangeElementsBaseVertex = getProcAddr("glDrawRangeElementsBaseVertex")
	gl.glDrawElementsInstancedBaseVertex = getProcAddr("glDrawElementsInstancedBaseVertex")
	gl.glMultiDrawElementsBaseVertex = getProcAddr("glMultiDrawElementsBaseVertex")
	gl.glDrawArraysIndirect = getProcAddr("glDrawArraysIndirect")
	gl.glDrawElementsIndirect = getProcAddr("glDrawElementsIndirect")
	gl.glDrawArraysInstancedARB = getProcAddr("glDrawArraysInstancedARB")
	gl.glDrawElementsInstancedARB = getProcAddr("glDrawElementsInstancedARB")
	gl.glProgramStringARB = getProcAddr("glProgramStringARB")
	gl.glBindProgramARB = getProcAddr("glBindProgramARB")
	gl.glDeleteProgramsARB = getProcAddr("glDeleteProgramsARB")
	gl.glGenProgramsARB = getProcAddr("glGenProgramsARB")
	gl.glProgramEnvParameter4dARB = getProcAddr("glProgramEnvParameter4dARB")
	gl.glProgramEnvParameter4dvARB = getProcAddr("glProgramEnvParameter4dvARB")
	gl.glProgramEnvParameter4fARB = getProcAddr("glProgramEnvParameter4fARB")
	gl.glProgramEnvParameter4fvARB = getProcAddr("glProgramEnvParameter4fvARB")
	gl.glProgramLocalParameter4dARB = getProcAddr("glProgramLocalParameter4dARB")
	gl.glProgramLocalParameter4dvARB = getProcAddr("glProgramLocalParameter4dvARB")
	gl.glProgramLocalParameter4fARB = getProcAddr("glProgramLocalParameter4fARB")
	gl.glProgramLocalParameter4fvARB = getProcAddr("glProgramLocalParameter4fvARB")
	gl.glGetProgramEnvParameterdvARB = getProcAddr("glGetProgramEnvParameterdvARB")
	gl.glGetProgramEnvParameterfvARB = getProcAddr("glGetProgramEnvParameterfvARB")
	gl.glGetProgramLocalParameterdvARB = getProcAddr("glGetProgramLocalParameterdvARB")
	gl.glGetProgramLocalParameterfvARB = getProcAddr("glGetProgramLocalParameterfvARB")
	gl.glGetProgramivARB = getProcAddr("glGetProgramivARB")
	gl.glGetProgramStringARB = getProcAddr("glGetProgramStringARB")
	gl.glIsProgramARB = getProcAddr("glIsProgramARB")
	gl.glFramebufferParameteri = getProcAddr("glFramebufferParameteri")
	gl.glGetFramebufferParameteriv = getProcAddr("glGetFramebufferParameteriv")
	gl.glIsRenderbuffer = getProcAddr("glIsRenderbuffer")
	gl.glBindRenderbuffer = getProcAddr("glBindRenderbuffer")
	gl.glDeleteRenderbuffers = getProcAddr("glDeleteRenderbuffers")
	gl.glGenRenderbuffers = getProcAddr("glGenRenderbuffers")
	gl.glRenderbufferStorage = getProcAddr("glRenderbufferStorage")
	gl.glGetRenderbufferParameteriv = getProcAddr("glGetRenderbufferParameteriv")
	gl.glIsFramebuffer = getProcAddr("glIsFramebuffer")
	gl.glBindFramebuffer = getProcAddr("glBindFramebuffer")
	gl.glDeleteFramebuffers = getProcAddr("glDeleteFramebuffers")
	gl.glGenFramebuffers = getProcAddr("glGenFramebuffers")
	gl.glCheckFramebufferStatus = getProcAddr("glCheckFramebufferStatus")
	gl.glFramebufferTexture1D = getProcAddr("glFramebufferTexture1D")
	gl.glFramebufferTexture2D = getProcAddr("glFramebufferTexture2D")
	gl.glFramebufferTexture3D = getProcAddr("glFramebufferTexture3D")
	gl.glFramebufferRenderbuffer = getProcAddr("glFramebufferRenderbuffer")
	gl.glGetFramebufferAttachmentParameteriv = getProcAddr("glGetFramebufferAttachmentParameteriv")
	gl.glGenerateMipmap = getProcAddr("glGenerateMipmap")
	gl.glBlitFramebuffer = getProcAddr("glBlitFramebuffer")
	gl.glRenderbufferStorageMultisample = getProcAddr("glRenderbufferStorageMultisample")
	gl.glFramebufferTextureLayer = getProcAddr("glFramebufferTextureLayer")
	gl.glProgramParameteriARB = getProcAddr("glProgramParameteriARB")
	gl.glFramebufferTextureARB = getProcAddr("glFramebufferTextureARB")
	gl.glFramebufferTextureLayerARB = getProcAddr("glFramebufferTextureLayerARB")
	gl.glFramebufferTextureFaceARB = getProcAddr("glFramebufferTextureFaceARB")
	gl.glGetProgramBinary = getProcAddr("glGetProgramBinary")
	gl.glProgramBinary = getProcAddr("glProgramBinary")
	gl.glProgramParameteri = getProcAddr("glProgramParameteri")
	gl.glGetTextureSubImage = getProcAddr("glGetTextureSubImage")
	gl.glGetCompressedTextureSubImage = getProcAddr("glGetCompressedTextureSubImage")
	gl.glSpecializeShaderARB = getProcAddr("glSpecializeShaderARB")
	gl.glUniform1d = getProcAddr("glUniform1d")
	gl.glUniform2d = getProcAddr("glUniform2d")
	gl.glUniform3d = getProcAddr("glUniform3d")
	gl.glUniform4d = getProcAddr("glUniform4d")
	gl.glUniform1dv = getProcAddr("glUniform1dv")
	gl.glUniform2dv = getProcAddr("glUniform2dv")
	gl.glUniform3dv = getProcAddr("glUniform3dv")
	gl.glUniform4dv = getProcAddr("glUniform4dv")
	gl.glUniformMatrix2dv = getProcAddr("glUniformMatrix2dv")
	gl.glUniformMatrix3dv = getProcAddr("glUniformMatrix3dv")
	gl.glUniformMatrix4dv = getProcAddr("glUniformMatrix4dv")
	gl.glUniformMatrix2x3dv = getProcAddr("glUniformMatrix2x3dv")
	gl.glUniformMatrix2x4dv = getProcAddr("glUniformMatrix2x4dv")
	gl.glUniformMatrix3x2dv = getProcAddr("glUniformMatrix3x2dv")
	gl.glUniformMatrix3x4dv = getProcAddr("glUniformMatrix3x4dv")
	gl.glUniformMatrix4x2dv = getProcAddr("glUniformMatrix4x2dv")
	gl.glUniformMatrix4x3dv = getProcAddr("glUniformMatrix4x3dv")
	gl.glGetUniformdv = getProcAddr("glGetUniformdv")
	gl.glUniform1i64ARB = getProcAddr("glUniform1i64ARB")
	gl.glUniform2i64ARB = getProcAddr("glUniform2i64ARB")
	gl.glUniform3i64ARB = getProcAddr("glUniform3i64ARB")
	gl.glUniform4i64ARB = getProcAddr("glUniform4i64ARB")
	gl.glUniform1i64vARB = getProcAddr("glUniform1i64vARB")
	gl.glUniform2i64vARB = getProcAddr("glUniform2i64vARB")
	gl.glUniform3i64vARB = getProcAddr("glUniform3i64vARB")
	gl.glUniform4i64vARB = getProcAddr("glUniform4i64vARB")
	gl.glUniform1ui64ARB = getProcAddr("glUniform1ui64ARB")
	gl.glUniform2ui64ARB = getProcAddr("glUniform2ui64ARB")
	gl.glUniform3ui64ARB = getProcAddr("glUniform3ui64ARB")
	gl.glUniform4ui64ARB = getProcAddr("glUniform4ui64ARB")
	gl.glUniform1ui64vARB = getProcAddr("glUniform1ui64vARB")
	gl.glUniform2ui64vARB = getProcAddr("glUniform2ui64vARB")
	gl.glUniform3ui64vARB = getProcAddr("glUniform3ui64vARB")
	gl.glUniform4ui64vARB = getProcAddr("glUniform4ui64vARB")
	gl.glGetUniformi64vARB = getProcAddr("glGetUniformi64vARB")
	gl.glGetUniformui64vARB = getProcAddr("glGetUniformui64vARB")
	gl.glGetnUniformi64vARB = getProcAddr("glGetnUniformi64vARB")
	gl.glGetnUniformui64vARB = getProcAddr("glGetnUniformui64vARB")
	gl.glProgramUniform1i64ARB = getProcAddr("glProgramUniform1i64ARB")
	gl.glProgramUniform2i64ARB = getProcAddr("glProgramUniform2i64ARB")
	gl.glProgramUniform3i64ARB = getProcAddr("glProgramUniform3i64ARB")
	gl.glProgramUniform4i64ARB = getProcAddr("glProgramUniform4i64ARB")
	gl.glProgramUniform1i64vARB = getProcAddr("glProgramUniform1i64vARB")
	gl.glProgramUniform2i64vARB = getProcAddr("glProgramUniform2i64vARB")
	gl.glProgramUniform3i64vARB = getProcAddr("glProgramUniform3i64vARB")
	gl.glProgramUniform4i64vARB = getProcAddr("glProgramUniform4i64vARB")
	gl.glProgramUniform1ui64ARB = getProcAddr("glProgramUniform1ui64ARB")
	gl.glProgramUniform2ui64ARB = getProcAddr("glProgramUniform2ui64ARB")
	gl.glProgramUniform3ui64ARB = getProcAddr("glProgramUniform3ui64ARB")
	gl.glProgramUniform4ui64ARB = getProcAddr("glProgramUniform4ui64ARB")
	gl.glProgramUniform1ui64vARB = getProcAddr("glProgramUniform1ui64vARB")
	gl.glProgramUniform2ui64vARB = getProcAddr("glProgramUniform2ui64vARB")
	gl.glProgramUniform3ui64vARB = getProcAddr("glProgramUniform3ui64vARB")
	gl.glProgramUniform4ui64vARB = getProcAddr("glProgramUniform4ui64vARB")
	gl.glBlendColor = getProcAddr("glBlendColor")
	gl.glBlendEquation = getProcAddr("glBlendEquation")
	gl.glColorTable = getProcAddr("glColorTable")
	gl.glColorTableParameterfv = getProcAddr("glColorTableParameterfv")
	gl.glColorTableParameteriv = getProcAddr("glColorTableParameteriv")
	gl.glCopyColorTable = getProcAddr("glCopyColorTable")
	gl.glGetColorTable = getProcAddr("glGetColorTable")
	gl.glGetColorTableParameterfv = getProcAddr("glGetColorTableParameterfv")
	gl.glGetColorTableParameteriv = getProcAddr("glGetColorTableParameteriv")
	gl.glColorSubTable = getProcAddr("glColorSubTable")
	gl.glCopyColorSubTable = getProcAddr("glCopyColorSubTable")
	gl.glConvolutionFilter1D = getProcAddr("glConvolutionFilter1D")
	gl.glConvolutionFilter2D = getProcAddr("glConvolutionFilter2D")
	gl.glConvolutionParameterf = getProcAddr("glConvolutionParameterf")
	gl.glConvolutionParameterfv = getProcAddr("glConvolutionParameterfv")
	gl.glConvolutionParameteri = getProcAddr("glConvolutionParameteri")
	gl.glConvolutionParameteriv = getProcAddr("glConvolutionParameteriv")
	gl.glCopyConvolutionFilter1D = getProcAddr("glCopyConvolutionFilter1D")
	gl.glCopyConvolutionFilter2D = getProcAddr("glCopyConvolutionFilter2D")
	gl.glGetConvolutionFilter = getProcAddr("glGetConvolutionFilter")
	gl.glGetConvolutionParameterfv = getProcAddr("glGetConvolutionParameterfv")
	gl.glGetConvolutionParameteriv = getProcAddr("glGetConvolutionParameteriv")
	gl.glGetSeparableFilter = getProcAddr("glGetSeparableFilter")
	gl.glSeparableFilter2D = getProcAddr("glSeparableFilter2D")
	gl.glGetHistogram = getProcAddr("glGetHistogram")
	gl.glGetHistogramParameterfv = getProcAddr("glGetHistogramParameterfv")
	gl.glGetHistogramParameteriv = getProcAddr("glGetHistogramParameteriv")
	gl.glGetMinmax = getProcAddr("glGetMinmax")
	gl.glGetMinmaxParameterfv = getProcAddr("glGetMinmaxParameterfv")
	gl.glGetMinmaxParameteriv = getProcAddr("glGetMinmaxParameteriv")
	gl.glHistogram = getProcAddr("glHistogram")
	gl.glMinmax = getProcAddr("glMinmax")
	gl.glResetHistogram = getProcAddr("glResetHistogram")
	gl.glResetMinmax = getProcAddr("glResetMinmax")
	gl.glMultiDrawArraysIndirectCountARB = getProcAddr("glMultiDrawArraysIndirectCountARB")
	gl.glMultiDrawElementsIndirectCountARB = getProcAddr("glMultiDrawElementsIndirectCountARB")
	gl.glVertexAttribDivisorARB = getProcAddr("glVertexAttribDivisorARB")
	gl.glGetInternalformativ = getProcAddr("glGetInternalformativ")
	gl.glGetInternalformati64v = getProcAddr("glGetInternalformati64v")
	gl.glInvalidateTexSubImage = getProcAddr("glInvalidateTexSubImage")
	gl.glInvalidateTexImage = getProcAddr("glInvalidateTexImage")
	gl.glInvalidateBufferSubData = getProcAddr("glInvalidateBufferSubData")
	gl.glInvalidateBufferData = getProcAddr("glInvalidateBufferData")
	gl.glInvalidateFramebuffer = getProcAddr("glInvalidateFramebuffer")
	gl.glInvalidateSubFramebuffer = getProcAddr("glInvalidateSubFramebuffer")
	gl.glMapBufferRange = getProcAddr("glMapBufferRange")
	gl.glFlushMappedBufferRange = getProcAddr("glFlushMappedBufferRange")
	gl.glCurrentPaletteMatrixARB = getProcAddr("glCurrentPaletteMatrixARB")
	gl.glMatrixIndexubvARB = getProcAddr("glMatrixIndexubvARB")
	gl.glMatrixIndexusvARB = getProcAddr("glMatrixIndexusvARB")
	gl.glMatrixIndexuivARB = getProcAddr("glMatrixIndexuivARB")
	gl.glMatrixIndexPointerARB = getProcAddr("glMatrixIndexPointerARB")
	gl.glBindBuffersBase = getProcAddr("glBindBuffersBase")
	gl.glBindBuffersRange = getProcAddr("glBindBuffersRange")
	gl.glBindTextures = getProcAddr("glBindTextures")
	gl.glBindSamplers = getProcAddr("glBindSamplers")
	gl.glBindImageTextures = getProcAddr("glBindImageTextures")
	gl.glBindVertexBuffers = getProcAddr("glBindVertexBuffers")
	gl.glMultiDrawArraysIndirect = getProcAddr("glMultiDrawArraysIndirect")
	gl.glMultiDrawElementsIndirect = getProcAddr("glMultiDrawElementsIndirect")
	gl.glSampleCoverageARB = getProcAddr("glSampleCoverageARB")
	gl.glActiveTextureARB = getProcAddr("glActiveTextureARB")
	gl.glClientActiveTextureARB = getProcAddr("glClientActiveTextureARB")
	gl.glMultiTexCoord1dARB = getProcAddr("glMultiTexCoord1dARB")
	gl.glMultiTexCoord1dvARB = getProcAddr("glMultiTexCoord1dvARB")
	gl.glMultiTexCoord1fARB = getProcAddr("glMultiTexCoord1fARB")
	gl.glMultiTexCoord1fvARB = getProcAddr("glMultiTexCoord1fvARB")
	gl.glMultiTexCoord1iARB = getProcAddr("glMultiTexCoord1iARB")
	gl.glMultiTexCoord1ivARB = getProcAddr("glMultiTexCoord1ivARB")
	gl.glMultiTexCoord1sARB = getProcAddr("glMultiTexCoord1sARB")
	gl.glMultiTexCoord1svARB = getProcAddr("glMultiTexCoord1svARB")
	gl.glMultiTexCoord2dARB = getProcAddr("glMultiTexCoord2dARB")
	gl.glMultiTexCoord2dvARB = getProcAddr("glMultiTexCoord2dvARB")
	gl.glMultiTexCoord2fARB = getProcAddr("glMultiTexCoord2fARB")
	gl.glMultiTexCoord2fvARB = getProcAddr("glMultiTexCoord2fvARB")
	gl.glMultiTexCoord2iARB = getProcAddr("glMultiTexCoord2iARB")
	gl.glMultiTexCoord2ivARB = getProcAddr("glMultiTexCoord2ivARB")
	gl.glMultiTexCoord2sARB = getProcAddr("glMultiTexCoord2sARB")
	gl.glMultiTexCoord2svARB = getProcAddr("glMultiTexCoord2svARB")
	gl.glMultiTexCoord3dARB = getProcAddr("glMultiTexCoord3dARB")
	gl.glMultiTexCoord3dvARB = getProcAddr("glMultiTexCoord3dvARB")
	gl.glMultiTexCoord3fARB = getProcAddr("glMultiTexCoord3fARB")
	gl.glMultiTexCoord3fvARB = getProcAddr("glMultiTexCoord3fvARB")
	gl.glMultiTexCoord3iARB = getProcAddr("glMultiTexCoord3iARB")
	gl.glMultiTexCoord3ivARB = getProcAddr("glMultiTexCoord3ivARB")
	gl.glMultiTexCoord3sARB = getProcAddr("glMultiTexCoord3sARB")
	gl.glMultiTexCoord3svARB = getProcAddr("glMultiTexCoord3svARB")
	gl.glMultiTexCoord4dARB = getProcAddr("glMultiTexCoord4dARB")
	gl.glMultiTexCoord4dvARB = getProcAddr("glMultiTexCoord4dvARB")
	gl.glMultiTexCoord4fARB = getProcAddr("glMultiTexCoord4fARB")
	gl.glMultiTexCoord4fvARB = getProcAddr("glMultiTexCoord4fvARB")
	gl.glMultiTexCoord4iARB = getProcAddr("glMultiTexCoord4iARB")
	gl.glMultiTexCoord4ivARB = getProcAddr("glMultiTexCoord4ivARB")
	gl.glMultiTexCoord4sARB = getProcAddr("glMultiTexCoord4sARB")
	gl.glMultiTexCoord4svARB = getProcAddr("glMultiTexCoord4svARB")
	gl.glGenQueriesARB = getProcAddr("glGenQueriesARB")
	gl.glDeleteQueriesARB = getProcAddr("glDeleteQueriesARB")
	gl.glIsQueryARB = getProcAddr("glIsQueryARB")
	gl.glBeginQueryARB = getProcAddr("glBeginQueryARB")
	gl.glEndQueryARB = getProcAddr("glEndQueryARB")
	gl.glGetQueryivARB = getProcAddr("glGetQueryivARB")
	gl.glGetQueryObjectivARB = getProcAddr("glGetQueryObjectivARB")
	gl.glGetQueryObjectuivARB = getProcAddr("glGetQueryObjectuivARB")
	gl.glMaxShaderCompilerThreadsARB = getProcAddr("glMaxShaderCompilerThreadsARB")
	gl.glPointParameterfARB = getProcAddr("glPointParameterfARB")
	gl.glPointParameterfvARB = getProcAddr("glPointParameterfvARB")
	gl.glPolygonOffsetClamp = getProcAddr("glPolygonOffsetClamp")
	gl.glGetProgramInterfaceiv = getProcAddr("glGetProgramInterfaceiv")
	gl.glGetProgramResourceIndex = getProcAddr("glGetProgramResourceIndex")
	gl.glGetProgramResourceName = getProcAddr("glGetProgramResourceName")
	gl.glGetProgramResourceiv = getProcAddr("glGetProgramResourceiv")
	gl.glGetProgramResourceLocation = getProcAddr("glGetProgramResourceLocation")
	gl.glGetProgramResourceLocationIndex = getProcAddr("glGetProgramResourceLocationIndex")
	gl.glProvokingVertex = getProcAddr("glProvokingVertex")
	gl.glGetGraphicsResetStatusARB = getProcAddr("glGetGraphicsResetStatusARB")
	gl.glGetnTexImageARB = getProcAddr("glGetnTexImageARB")
	gl.glReadnPixelsARB = getProcAddr("glReadnPixelsARB")
	gl.glGetnCompressedTexImageARB = getProcAddr("glGetnCompressedTexImageARB")
	gl.glGetnUniformfvARB = getProcAddr("glGetnUniformfvARB")
	gl.glGetnUniformivARB = getProcAddr("glGetnUniformivARB")
	gl.glGetnUniformuivARB = getProcAddr("glGetnUniformuivARB")
	gl.glGetnUniformdvARB = getProcAddr("glGetnUniformdvARB")
	gl.glGetnMapdvARB = getProcAddr("glGetnMapdvARB")
	gl.glGetnMapfvARB = getProcAddr("glGetnMapfvARB")
	gl.glGetnMapivARB = getProcAddr("glGetnMapivARB")
	gl.glGetnPixelMapfvARB = getProcAddr("glGetnPixelMapfvARB")
	gl.glGetnPixelMapuivARB = getProcAddr("glGetnPixelMapuivARB")
	gl.glGetnPixelMapusvARB = getProcAddr("glGetnPixelMapusvARB")
	gl.glGetnPolygonStippleARB = getProcAddr("glGetnPolygonStippleARB")
	gl.glGetnColorTableARB = getProcAddr("glGetnColorTableARB")
	gl.glGetnConvolutionFilterARB = getProcAddr("glGetnConvolutionFilterARB")
	gl.glGetnSeparableFilterARB = getProcAddr("glGetnSeparableFilterARB")
	gl.glGetnHistogramARB = getProcAddr("glGetnHistogramARB")
	gl.glGetnMinmaxARB = getProcAddr("glGetnMinmaxARB")
	gl.glFramebufferSampleLocationsfvARB = getProcAddr("glFramebufferSampleLocationsfvARB")
	gl.glNamedFramebufferSampleLocationsfvARB = getProcAddr("glNamedFramebufferSampleLocationsfvARB")
	gl.glEvaluateDepthValuesARB = getProcAddr("glEvaluateDepthValuesARB")
	gl.glMinSampleShadingARB = getProcAddr("glMinSampleShadingARB")
	gl.glGenSamplers = getProcAddr("glGenSamplers")
	gl.glDeleteSamplers = getProcAddr("glDeleteSamplers")
	gl.glIsSampler = getProcAddr("glIsSampler")
	gl.glBindSampler = getProcAddr("glBindSampler")
	gl.glSamplerParameteri = getProcAddr("glSamplerParameteri")
	gl.glSamplerParameteriv = getProcAddr("glSamplerParameteriv")
	gl.glSamplerParameterf = getProcAddr("glSamplerParameterf")
	gl.glSamplerParameterfv = getProcAddr("glSamplerParameterfv")
	gl.glSamplerParameterIiv = getProcAddr("glSamplerParameterIiv")
	gl.glSamplerParameterIuiv = getProcAddr("glSamplerParameterIuiv")
	gl.glGetSamplerParameteriv = getProcAddr("glGetSamplerParameteriv")
	gl.glGetSamplerParameterIiv = getProcAddr("glGetSamplerParameterIiv")
	gl.glGetSamplerParameterfv = getProcAddr("glGetSamplerParameterfv")
	gl.glGetSamplerParameterIuiv = getProcAddr("glGetSamplerParameterIuiv")
	gl.glUseProgramStages = getProcAddr("glUseProgramStages")
	gl.glActiveShaderProgram = getProcAddr("glActiveShaderProgram")
	gl.glCreateShaderProgramv = getProcAddr("glCreateShaderProgramv")
	gl.glBindProgramPipeline = getProcAddr("glBindProgramPipeline")
	gl.glDeleteProgramPipelines = getProcAddr("glDeleteProgramPipelines")
	gl.glGenProgramPipelines = getProcAddr("glGenProgramPipelines")
	gl.glIsProgramPipeline = getProcAddr("glIsProgramPipeline")
	gl.glGetProgramPipelineiv = getProcAddr("glGetProgramPipelineiv")
	gl.glProgramParameteri = getProcAddr("glProgramParameteri")
	gl.glProgramUniform1i = getProcAddr("glProgramUniform1i")
	gl.glProgramUniform1iv = getProcAddr("glProgramUniform1iv")
	gl.glProgramUniform1f = getProcAddr("glProgramUniform1f")
	gl.glProgramUniform1fv = getProcAddr("glProgramUniform1fv")
	gl.glProgramUniform1d = getProcAddr("glProgramUniform1d")
	gl.glProgramUniform1dv = getProcAddr("glProgramUniform1dv")
	gl.glProgramUniform1ui = getProcAddr("glProgramUniform1ui")
	gl.glProgramUniform1uiv = getProcAddr("glProgramUniform1uiv")
	gl.glProgramUniform2i = getProcAddr("glProgramUniform2i")
	gl.glProgramUniform2iv = getProcAddr("glProgramUniform2iv")
	gl.glProgramUniform2f = getProcAddr("glProgramUniform2f")
	gl.glProgramUniform2fv = getProcAddr("glProgramUniform2fv")
	gl.glProgramUniform2d = getProcAddr("glProgramUniform2d")
	gl.glProgramUniform2dv = getProcAddr("glProgramUniform2dv")
	gl.glProgramUniform2ui = getProcAddr("glProgramUniform2ui")
	gl.glProgramUniform2uiv = getProcAddr("glProgramUniform2uiv")
	gl.glProgramUniform3i = getProcAddr("glProgramUniform3i")
	gl.glProgramUniform3iv = getProcAddr("glProgramUniform3iv")
	gl.glProgramUniform3f = getProcAddr("glProgramUniform3f")
	gl.glProgramUniform3fv = getProcAddr("glProgramUniform3fv")
	gl.glProgramUniform3d = getProcAddr("glProgramUniform3d")
	gl.glProgramUniform3dv = getProcAddr("glProgramUniform3dv")
	gl.glProgramUniform3ui = getProcAddr("glProgramUniform3ui")
	gl.glProgramUniform3uiv = getProcAddr("glProgramUniform3uiv")
	gl.glProgramUniform4i = getProcAddr("glProgramUniform4i")
	gl.glProgramUniform4iv = getProcAddr("glProgramUniform4iv")
	gl.glProgramUniform4f = getProcAddr("glProgramUniform4f")
	gl.glProgramUniform4fv = getProcAddr("glProgramUniform4fv")
	gl.glProgramUniform4d = getProcAddr("glProgramUniform4d")
	gl.glProgramUniform4dv = getProcAddr("glProgramUniform4dv")
	gl.glProgramUniform4ui = getProcAddr("glProgramUniform4ui")
	gl.glProgramUniform4uiv = getProcAddr("glProgramUniform4uiv")
	gl.glProgramUniformMatrix2fv = getProcAddr("glProgramUniformMatrix2fv")
	gl.glProgramUniformMatrix3fv = getProcAddr("glProgramUniformMatrix3fv")
	gl.glProgramUniformMatrix4fv = getProcAddr("glProgramUniformMatrix4fv")
	gl.glProgramUniformMatrix2dv = getProcAddr("glProgramUniformMatrix2dv")
	gl.glProgramUniformMatrix3dv = getProcAddr("glProgramUniformMatrix3dv")
	gl.glProgramUniformMatrix4dv = getProcAddr("glProgramUniformMatrix4dv")
	gl.glProgramUniformMatrix2x3fv = getProcAddr("glProgramUniformMatrix2x3fv")
	gl.glProgramUniformMatrix3x2fv = getProcAddr("glProgramUniformMatrix3x2fv")
	gl.glProgramUniformMatrix2x4fv = getProcAddr("glProgramUniformMatrix2x4fv")
	gl.glProgramUniformMatrix4x2fv = getProcAddr("glProgramUniformMatrix4x2fv")
	gl.glProgramUniformMatrix3x4fv = getProcAddr("glProgramUniformMatrix3x4fv")
	gl.glProgramUniformMatrix4x3fv = getProcAddr("glProgramUniformMatrix4x3fv")
	gl.glProgramUniformMatrix2x3dv = getProcAddr("glProgramUniformMatrix2x3dv")
	gl.glProgramUniformMatrix3x2dv = getProcAddr("glProgramUniformMatrix3x2dv")
	gl.glProgramUniformMatrix2x4dv = getProcAddr("glProgramUniformMatrix2x4dv")
	gl.glProgramUniformMatrix4x2dv = getProcAddr("glProgramUniformMatrix4x2dv")
	gl.glProgramUniformMatrix3x4dv = getProcAddr("glProgramUniformMatrix3x4dv")
	gl.glProgramUniformMatrix4x3dv = getProcAddr("glProgramUniformMatrix4x3dv")
	gl.glValidateProgramPipeline = getProcAddr("glValidateProgramPipeline")
	gl.glGetProgramPipelineInfoLog = getProcAddr("glGetProgramPipelineInfoLog")
	gl.glGetActiveAtomicCounterBufferiv = getProcAddr("glGetActiveAtomicCounterBufferiv")
	gl.glBindImageTexture = getProcAddr("glBindImageTexture")
	gl.glMemoryBarrier = getProcAddr("glMemoryBarrier")
	gl.glDeleteObjectARB = getProcAddr("glDeleteObjectARB")
	gl.glGetHandleARB = getProcAddr("glGetHandleARB")
	gl.glDetachObjectARB = getProcAddr("glDetachObjectARB")
	gl.glCreateShaderObjectARB = getProcAddr("glCreateShaderObjectARB")
	gl.glShaderSourceARB = getProcAddr("glShaderSourceARB")
	gl.glCompileShaderARB = getProcAddr("glCompileShaderARB")
	gl.glCreateProgramObjectARB = getProcAddr("glCreateProgramObjectARB")
	gl.glAttachObjectARB = getProcAddr("glAttachObjectARB")
	gl.glLinkProgramARB = getProcAddr("glLinkProgramARB")
	gl.glUseProgramObjectARB = getProcAddr("glUseProgramObjectARB")
	gl.glValidateProgramARB = getProcAddr("glValidateProgramARB")
	gl.glUniform1fARB = getProcAddr("glUniform1fARB")
	gl.glUniform2fARB = getProcAddr("glUniform2fARB")
	gl.glUniform3fARB = getProcAddr("glUniform3fARB")
	gl.glUniform4fARB = getProcAddr("glUniform4fARB")
	gl.glUniform1iARB = getProcAddr("glUniform1iARB")
	gl.glUniform2iARB = getProcAddr("glUniform2iARB")
	gl.glUniform3iARB = getProcAddr("glUniform3iARB")
	gl.glUniform4iARB = getProcAddr("glUniform4iARB")
	gl.glUniform1fvARB = getProcAddr("glUniform1fvARB")
	gl.glUniform2fvARB = getProcAddr("glUniform2fvARB")
	gl.glUniform3fvARB = getProcAddr("glUniform3fvARB")
	gl.glUniform4fvARB = getProcAddr("glUniform4fvARB")
	gl.glUniform1ivARB = getProcAddr("glUniform1ivARB")
	gl.glUniform2ivARB = getProcAddr("glUniform2ivARB")
	gl.glUniform3ivARB = getProcAddr("glUniform3ivARB")
	gl.glUniform4ivARB = getProcAddr("glUniform4ivARB")
	gl.glUniformMatrix2fvARB = getProcAddr("glUniformMatrix2fvARB")
	gl.glUniformMatrix3fvARB = getProcAddr("glUniformMatrix3fvARB")
	gl.glUniformMatrix4fvARB = getProcAddr("glUniformMatrix4fvARB")
	gl.glGetObjectParameterfvARB = getProcAddr("glGetObjectParameterfvARB")
	gl.glGetObjectParameterivARB = getProcAddr("glGetObjectParameterivARB")
	gl.glGetInfoLogARB = getProcAddr("glGetInfoLogARB")
	gl.glGetAttachedObjectsARB = getProcAddr("glGetAttachedObjectsARB")
	gl.glGetUniformLocationARB = getProcAddr("glGetUniformLocationARB")
	gl.glGetActiveUniformARB = getProcAddr("glGetActiveUniformARB")
	gl.glGetUniformfvARB = getProcAddr("glGetUniformfvARB")
	gl.glGetUniformivARB = getProcAddr("glGetUniformivARB")
	gl.glGetShaderSourceARB = getProcAddr("glGetShaderSourceARB")
	gl.glShaderStorageBlockBinding = getProcAddr("glShaderStorageBlockBinding")
	gl.glGetSubroutineUniformLocation = getProcAddr("glGetSubroutineUniformLocation")
	gl.glGetSubroutineIndex = getProcAddr("glGetSubroutineIndex")
	gl.glGetActiveSubroutineUniformiv = getProcAddr("glGetActiveSubroutineUniformiv")
	gl.glGetActiveSubroutineUniformName = getProcAddr("glGetActiveSubroutineUniformName")
	gl.glGetActiveSubroutineName = getProcAddr("glGetActiveSubroutineName")
	gl.glUniformSubroutinesuiv = getProcAddr("glUniformSubroutinesuiv")
	gl.glGetUniformSubroutineuiv = getProcAddr("glGetUniformSubroutineuiv")
	gl.glGetProgramStageiv = getProcAddr("glGetProgramStageiv")
	gl.glNamedStringARB = getProcAddr("glNamedStringARB")
	gl.glDeleteNamedStringARB = getProcAddr("glDeleteNamedStringARB")
	gl.glCompileShaderIncludeARB = getProcAddr("glCompileShaderIncludeARB")
	gl.glIsNamedStringARB = getProcAddr("glIsNamedStringARB")
	gl.glGetNamedStringARB = getProcAddr("glGetNamedStringARB")
	gl.glGetNamedStringivARB = getProcAddr("glGetNamedStringivARB")
	gl.glBufferPageCommitmentARB = getProcAddr("glBufferPageCommitmentARB")
	gl.glNamedBufferPageCommitmentEXT = getProcAddr("glNamedBufferPageCommitmentEXT")
	gl.glNamedBufferPageCommitmentARB = getProcAddr("glNamedBufferPageCommitmentARB")
	gl.glTexPageCommitmentARB = getProcAddr("glTexPageCommitmentARB")
	gl.glFenceSync = getProcAddr("glFenceSync")
	gl.glIsSync = getProcAddr("glIsSync")
	gl.glDeleteSync = getProcAddr("glDeleteSync")
	gl.glClientWaitSync = getProcAddr("glClientWaitSync")
	gl.glWaitSync = getProcAddr("glWaitSync")
	gl.glGetInteger64v = getProcAddr("glGetInteger64v")
	gl.glGetSynciv = getProcAddr("glGetSynciv")
	gl.glPatchParameteri = getProcAddr("glPatchParameteri")
	gl.glPatchParameterfv = getProcAddr("glPatchParameterfv")
	gl.glTextureBarrier = getProcAddr("glTextureBarrier")
	gl.glTexBufferARB = getProcAddr("glTexBufferARB")
	gl.glTexBufferRange = getProcAddr("glTexBufferRange")
	gl.glCompressedTexImage3DARB = getProcAddr("glCompressedTexImage3DARB")
	gl.glCompressedTexImage2DARB = getProcAddr("glCompressedTexImage2DARB")
	gl.glCompressedTexImage1DARB = getProcAddr("glCompressedTexImage1DARB")
	gl.glCompressedTexSubImage3DARB = getProcAddr("glCompressedTexSubImage3DARB")
	gl.glCompressedTexSubImage2DARB = getProcAddr("glCompressedTexSubImage2DARB")
	gl.glCompressedTexSubImage1DARB = getProcAddr("glCompressedTexSubImage1DARB")
	gl.glGetCompressedTexImageARB = getProcAddr("glGetCompressedTexImageARB")
	gl.glTexImage2DMultisample = getProcAddr("glTexImage2DMultisample")
	gl.glTexImage3DMultisample = getProcAddr("glTexImage3DMultisample")
	gl.glGetMultisamplefv = getProcAddr("glGetMultisamplefv")
	gl.glSampleMaski = getProcAddr("glSampleMaski")
	gl.glTexStorage1D = getProcAddr("glTexStorage1D")
	gl.glTexStorage2D = getProcAddr("glTexStorage2D")
	gl.glTexStorage3D = getProcAddr("glTexStorage3D")
	gl.glTexStorage2DMultisample = getProcAddr("glTexStorage2DMultisample")
	gl.glTexStorage3DMultisample = getProcAddr("glTexStorage3DMultisample")
	gl.glTextureView = getProcAddr("glTextureView")
	gl.glQueryCounter = getProcAddr("glQueryCounter")
	gl.glGetQueryObjecti64v = getProcAddr("glGetQueryObjecti64v")
	gl.glGetQueryObjectui64v = getProcAddr("glGetQueryObjectui64v")
	gl.glBindTransformFeedback = getProcAddr("glBindTransformFeedback")
	gl.glDeleteTransformFeedbacks = getProcAddr("glDeleteTransformFeedbacks")
	gl.glGenTransformFeedbacks = getProcAddr("glGenTransformFeedbacks")
	gl.glIsTransformFeedback = getProcAddr("glIsTransformFeedback")
	gl.glPauseTransformFeedback = getProcAddr("glPauseTransformFeedback")
	gl.glResumeTransformFeedback = getProcAddr("glResumeTransformFeedback")
	gl.glDrawTransformFeedback = getProcAddr("glDrawTransformFeedback")
	gl.glDrawTransformFeedbackStream = getProcAddr("glDrawTransformFeedbackStream")
	gl.glBeginQueryIndexed = getProcAddr("glBeginQueryIndexed")
	gl.glEndQueryIndexed = getProcAddr("glEndQueryIndexed")
	gl.glGetQueryIndexediv = getProcAddr("glGetQueryIndexediv")
	gl.glDrawTransformFeedbackInstanced = getProcAddr("glDrawTransformFeedbackInstanced")
	gl.glDrawTransformFeedbackStreamInstanced = getProcAddr("glDrawTransformFeedbackStreamInstanced")
	gl.glLoadTransposeMatrixfARB = getProcAddr("glLoadTransposeMatrixfARB")
	gl.glLoadTransposeMatrixdARB = getProcAddr("glLoadTransposeMatrixdARB")
	gl.glMultTransposeMatrixfARB = getProcAddr("glMultTransposeMatrixfARB")
	gl.glMultTransposeMatrixdARB = getProcAddr("glMultTransposeMatrixdARB")
	gl.glGetUniformIndices = getProcAddr("glGetUniformIndices")
	gl.glGetActiveUniformsiv = getProcAddr("glGetActiveUniformsiv")
	gl.glGetActiveUniformName = getProcAddr("glGetActiveUniformName")
	gl.glGetUniformBlockIndex = getProcAddr("glGetUniformBlockIndex")
	gl.glGetActiveUniformBlockiv = getProcAddr("glGetActiveUniformBlockiv")
	gl.glGetActiveUniformBlockName = getProcAddr("glGetActiveUniformBlockName")
	gl.glUniformBlockBinding = getProcAddr("glUniformBlockBinding")
	gl.glBindBufferRange = getProcAddr("glBindBufferRange")
	gl.glBindBufferBase = getProcAddr("glBindBufferBase")
	gl.glGetIntegeri_v = getProcAddr("glGetIntegeri_v")
	gl.glBindVertexArray = getProcAddr("glBindVertexArray")
	gl.glDeleteVertexArrays = getProcAddr("glDeleteVertexArrays")
	gl.glGenVertexArrays = getProcAddr("glGenVertexArrays")
	gl.glIsVertexArray = getProcAddr("glIsVertexArray")
	gl.glVertexAttribL1d = getProcAddr("glVertexAttribL1d")
	gl.glVertexAttribL2d = getProcAddr("glVertexAttribL2d")
	gl.glVertexAttribL3d = getProcAddr("glVertexAttribL3d")
	gl.glVertexAttribL4d = getProcAddr("glVertexAttribL4d")
	gl.glVertexAttribL1dv = getProcAddr("glVertexAttribL1dv")
	gl.glVertexAttribL2dv = getProcAddr("glVertexAttribL2dv")
	gl.glVertexAttribL3dv = getProcAddr("glVertexAttribL3dv")
	gl.glVertexAttribL4dv = getProcAddr("glVertexAttribL4dv")
	gl.glVertexAttribLPointer = getProcAddr("glVertexAttribLPointer")
	gl.glGetVertexAttribLdv = getProcAddr("glGetVertexAttribLdv")
	gl.glBindVertexBuffer = getProcAddr("glBindVertexBuffer")
	gl.glVertexAttribFormat = getProcAddr("glVertexAttribFormat")
	gl.glVertexAttribIFormat = getProcAddr("glVertexAttribIFormat")
	gl.glVertexAttribLFormat = getProcAddr("glVertexAttribLFormat")
	gl.glVertexAttribBinding = getProcAddr("glVertexAttribBinding")
	gl.glVertexBindingDivisor = getProcAddr("glVertexBindingDivisor")
	gl.glWeightbvARB = getProcAddr("glWeightbvARB")
	gl.glWeightsvARB = getProcAddr("glWeightsvARB")
	gl.glWeightivARB = getProcAddr("glWeightivARB")
	gl.glWeightfvARB = getProcAddr("glWeightfvARB")
	gl.glWeightdvARB = getProcAddr("glWeightdvARB")
	gl.glWeightubvARB = getProcAddr("glWeightubvARB")
	gl.glWeightusvARB = getProcAddr("glWeightusvARB")
	gl.glWeightuivARB = getProcAddr("glWeightuivARB")
	gl.glWeightPointerARB = getProcAddr("glWeightPointerARB")
	gl.glVertexBlendARB = getProcAddr("glVertexBlendARB")
	gl.glBindBufferARB = getProcAddr("glBindBufferARB")
	gl.glDeleteBuffersARB = getProcAddr("glDeleteBuffersARB")
	gl.glGenBuffersARB = getProcAddr("glGenBuffersARB")
	gl.glIsBufferARB = getProcAddr("glIsBufferARB")
	gl.glBufferDataARB = getProcAddr("glBufferDataARB")
	gl.glBufferSubDataARB = getProcAddr("glBufferSubDataARB")
	gl.glGetBufferSubDataARB = getProcAddr("glGetBufferSubDataARB")
	gl.glMapBufferARB = getProcAddr("glMapBufferARB")
	gl.glUnmapBufferARB = getProcAddr("glUnmapBufferARB")
	gl.glGetBufferParameterivARB = getProcAddr("glGetBufferParameterivARB")
	gl.glGetBufferPointervARB = getProcAddr("glGetBufferPointervARB")
	gl.glVertexAttrib1dARB = getProcAddr("glVertexAttrib1dARB")
	gl.glVertexAttrib1dvARB = getProcAddr("glVertexAttrib1dvARB")
	gl.glVertexAttrib1fARB = getProcAddr("glVertexAttrib1fARB")
	gl.glVertexAttrib1fvARB = getProcAddr("glVertexAttrib1fvARB")
	gl.glVertexAttrib1sARB = getProcAddr("glVertexAttrib1sARB")
	gl.glVertexAttrib1svARB = getProcAddr("glVertexAttrib1svARB")
	gl.glVertexAttrib2dARB = getProcAddr("glVertexAttrib2dARB")
	gl.glVertexAttrib2dvARB = getProcAddr("glVertexAttrib2dvARB")
	gl.glVertexAttrib2fARB = getProcAddr("glVertexAttrib2fARB")
	gl.glVertexAttrib2fvARB = getProcAddr("glVertexAttrib2fvARB")
	gl.glVertexAttrib2sARB = getProcAddr("glVertexAttrib2sARB")
	gl.glVertexAttrib2svARB = getProcAddr("glVertexAttrib2svARB")
	gl.glVertexAttrib3dARB = getProcAddr("glVertexAttrib3dARB")
	gl.glVertexAttrib3dvARB = getProcAddr("glVertexAttrib3dvARB")
	gl.glVertexAttrib3fARB = getProcAddr("glVertexAttrib3fARB")
	gl.glVertexAttrib3fvARB = getProcAddr("glVertexAttrib3fvARB")
	gl.glVertexAttrib3sARB = getProcAddr("glVertexAttrib3sARB")
	gl.glVertexAttrib3svARB = getProcAddr("glVertexAttrib3svARB")
	gl.glVertexAttrib4NbvARB = getProcAddr("glVertexAttrib4NbvARB")
	gl.glVertexAttrib4NivARB = getProcAddr("glVertexAttrib4NivARB")
	gl.glVertexAttrib4NsvARB = getProcAddr("glVertexAttrib4NsvARB")
	gl.glVertexAttrib4NubARB = getProcAddr("glVertexAttrib4NubARB")
	gl.glVertexAttrib4NubvARB = getProcAddr("glVertexAttrib4NubvARB")
	gl.glVertexAttrib4NuivARB = getProcAddr("glVertexAttrib4NuivARB")
	gl.glVertexAttrib4NusvARB = getProcAddr("glVertexAttrib4NusvARB")
	gl.glVertexAttrib4bvARB = getProcAddr("glVertexAttrib4bvARB")
	gl.glVertexAttrib4dARB = getProcAddr("glVertexAttrib4dARB")
	gl.glVertexAttrib4dvARB = getProcAddr("glVertexAttrib4dvARB")
	gl.glVertexAttrib4fARB = getProcAddr("glVertexAttrib4fARB")
	gl.glVertexAttrib4fvARB = getProcAddr("glVertexAttrib4fvARB")
	gl.glVertexAttrib4ivARB = getProcAddr("glVertexAttrib4ivARB")
	gl.glVertexAttrib4sARB = getProcAddr("glVertexAttrib4sARB")
	gl.glVertexAttrib4svARB = getProcAddr("glVertexAttrib4svARB")
	gl.glVertexAttrib4ubvARB = getProcAddr("glVertexAttrib4ubvARB")
	gl.glVertexAttrib4uivARB = getProcAddr("glVertexAttrib4uivARB")
	gl.glVertexAttrib4usvARB = getProcAddr("glVertexAttrib4usvARB")
	gl.glVertexAttribPointerARB = getProcAddr("glVertexAttribPointerARB")
	gl.glEnableVertexAttribArrayARB = getProcAddr("glEnableVertexAttribArrayARB")
	gl.glDisableVertexAttribArrayARB = getProcAddr("glDisableVertexAttribArrayARB")
	gl.glProgramStringARB = getProcAddr("glProgramStringARB")
	gl.glBindProgramARB = getProcAddr("glBindProgramARB")
	gl.glDeleteProgramsARB = getProcAddr("glDeleteProgramsARB")
	gl.glGenProgramsARB = getProcAddr("glGenProgramsARB")
	gl.glProgramEnvParameter4dARB = getProcAddr("glProgramEnvParameter4dARB")
	gl.glProgramEnvParameter4dvARB = getProcAddr("glProgramEnvParameter4dvARB")
	gl.glProgramEnvParameter4fARB = getProcAddr("glProgramEnvParameter4fARB")
	gl.glProgramEnvParameter4fvARB = getProcAddr("glProgramEnvParameter4fvARB")
	gl.glProgramLocalParameter4dARB = getProcAddr("glProgramLocalParameter4dARB")
	gl.glProgramLocalParameter4dvARB = getProcAddr("glProgramLocalParameter4dvARB")
	gl.glProgramLocalParameter4fARB = getProcAddr("glProgramLocalParameter4fARB")
	gl.glProgramLocalParameter4fvARB = getProcAddr("glProgramLocalParameter4fvARB")
	gl.glGetProgramEnvParameterdvARB = getProcAddr("glGetProgramEnvParameterdvARB")
	gl.glGetProgramEnvParameterfvARB = getProcAddr("glGetProgramEnvParameterfvARB")
	gl.glGetProgramLocalParameterdvARB = getProcAddr("glGetProgramLocalParameterdvARB")
	gl.glGetProgramLocalParameterfvARB = getProcAddr("glGetProgramLocalParameterfvARB")
	gl.glGetProgramivARB = getProcAddr("glGetProgramivARB")
	gl.glGetProgramStringARB = getProcAddr("glGetProgramStringARB")
	gl.glGetVertexAttribdvARB = getProcAddr("glGetVertexAttribdvARB")
	gl.glGetVertexAttribfvARB = getProcAddr("glGetVertexAttribfvARB")
	gl.glGetVertexAttribivARB = getProcAddr("glGetVertexAttribivARB")
	gl.glGetVertexAttribPointervARB = getProcAddr("glGetVertexAttribPointervARB")
	gl.glIsProgramARB = getProcAddr("glIsProgramARB")
	gl.glVertexAttrib1fARB = getProcAddr("glVertexAttrib1fARB")
	gl.glVertexAttrib1sARB = getProcAddr("glVertexAttrib1sARB")
	gl.glVertexAttrib1dARB = getProcAddr("glVertexAttrib1dARB")
	gl.glVertexAttrib2fARB = getProcAddr("glVertexAttrib2fARB")
	gl.glVertexAttrib2sARB = getProcAddr("glVertexAttrib2sARB")
	gl.glVertexAttrib2dARB = getProcAddr("glVertexAttrib2dARB")
	gl.glVertexAttrib3fARB = getProcAddr("glVertexAttrib3fARB")
	gl.glVertexAttrib3sARB = getProcAddr("glVertexAttrib3sARB")
	gl.glVertexAttrib3dARB = getProcAddr("glVertexAttrib3dARB")
	gl.glVertexAttrib4fARB = getProcAddr("glVertexAttrib4fARB")
	gl.glVertexAttrib4sARB = getProcAddr("glVertexAttrib4sARB")
	gl.glVertexAttrib4dARB = getProcAddr("glVertexAttrib4dARB")
	gl.glVertexAttrib4NubARB = getProcAddr("glVertexAttrib4NubARB")
	gl.glVertexAttrib1fvARB = getProcAddr("glVertexAttrib1fvARB")
	gl.glVertexAttrib1svARB = getProcAddr("glVertexAttrib1svARB")
	gl.glVertexAttrib1dvARB = getProcAddr("glVertexAttrib1dvARB")
	gl.glVertexAttrib2fvARB = getProcAddr("glVertexAttrib2fvARB")
	gl.glVertexAttrib2svARB = getProcAddr("glVertexAttrib2svARB")
	gl.glVertexAttrib2dvARB = getProcAddr("glVertexAttrib2dvARB")
	gl.glVertexAttrib3fvARB = getProcAddr("glVertexAttrib3fvARB")
	gl.glVertexAttrib3svARB = getProcAddr("glVertexAttrib3svARB")
	gl.glVertexAttrib3dvARB = getProcAddr("glVertexAttrib3dvARB")
	gl.glVertexAttrib4fvARB = getProcAddr("glVertexAttrib4fvARB")
	gl.glVertexAttrib4svARB = getProcAddr("glVertexAttrib4svARB")
	gl.glVertexAttrib4dvARB = getProcAddr("glVertexAttrib4dvARB")
	gl.glVertexAttrib4ivARB = getProcAddr("glVertexAttrib4ivARB")
	gl.glVertexAttrib4bvARB = getProcAddr("glVertexAttrib4bvARB")
	gl.glVertexAttrib4ubvARB = getProcAddr("glVertexAttrib4ubvARB")
	gl.glVertexAttrib4usvARB = getProcAddr("glVertexAttrib4usvARB")
	gl.glVertexAttrib4uivARB = getProcAddr("glVertexAttrib4uivARB")
	gl.glVertexAttrib4NbvARB = getProcAddr("glVertexAttrib4NbvARB")
	gl.glVertexAttrib4NsvARB = getProcAddr("glVertexAttrib4NsvARB")
	gl.glVertexAttrib4NivARB = getProcAddr("glVertexAttrib4NivARB")
	gl.glVertexAttrib4NubvARB = getProcAddr("glVertexAttrib4NubvARB")
	gl.glVertexAttrib4NusvARB = getProcAddr("glVertexAttrib4NusvARB")
	gl.glVertexAttrib4NuivARB = getProcAddr("glVertexAttrib4NuivARB")
	gl.glVertexAttribPointerARB = getProcAddr("glVertexAttribPointerARB")
	gl.glEnableVertexAttribArrayARB = getProcAddr("glEnableVertexAttribArrayARB")
	gl.glDisableVertexAttribArrayARB = getProcAddr("glDisableVertexAttribArrayARB")
	gl.glBindAttribLocationARB = getProcAddr("glBindAttribLocationARB")
	gl.glGetActiveAttribARB = getProcAddr("glGetActiveAttribARB")
	gl.glGetAttribLocationARB = getProcAddr("glGetAttribLocationARB")
	gl.glGetVertexAttribdvARB = getProcAddr("glGetVertexAttribdvARB")
	gl.glGetVertexAttribfvARB = getProcAddr("glGetVertexAttribfvARB")
	gl.glGetVertexAttribivARB = getProcAddr("glGetVertexAttribivARB")
	gl.glGetVertexAttribPointervARB = getProcAddr("glGetVertexAttribPointervARB")
	gl.glVertexAttribP1ui = getProcAddr("glVertexAttribP1ui")
	gl.glVertexAttribP1uiv = getProcAddr("glVertexAttribP1uiv")
	gl.glVertexAttribP2ui = getProcAddr("glVertexAttribP2ui")
	gl.glVertexAttribP2uiv = getProcAddr("glVertexAttribP2uiv")
	gl.glVertexAttribP3ui = getProcAddr("glVertexAttribP3ui")
	gl.glVertexAttribP3uiv = getProcAddr("glVertexAttribP3uiv")
	gl.glVertexAttribP4ui = getProcAddr("glVertexAttribP4ui")
	gl.glVertexAttribP4uiv = getProcAddr("glVertexAttribP4uiv")
	gl.glVertexP2ui = getProcAddr("glVertexP2ui")
	gl.glVertexP2uiv = getProcAddr("glVertexP2uiv")
	gl.glVertexP3ui = getProcAddr("glVertexP3ui")
	gl.glVertexP3uiv = getProcAddr("glVertexP3uiv")
	gl.glVertexP4ui = getProcAddr("glVertexP4ui")
	gl.glVertexP4uiv = getProcAddr("glVertexP4uiv")
	gl.glTexCoordP1ui = getProcAddr("glTexCoordP1ui")
	gl.glTexCoordP1uiv = getProcAddr("glTexCoordP1uiv")
	gl.glTexCoordP2ui = getProcAddr("glTexCoordP2ui")
	gl.glTexCoordP2uiv = getProcAddr("glTexCoordP2uiv")
	gl.glTexCoordP3ui = getProcAddr("glTexCoordP3ui")
	gl.glTexCoordP3uiv = getProcAddr("glTexCoordP3uiv")
	gl.glTexCoordP4ui = getProcAddr("glTexCoordP4ui")
	gl.glTexCoordP4uiv = getProcAddr("glTexCoordP4uiv")
	gl.glMultiTexCoordP1ui = getProcAddr("glMultiTexCoordP1ui")
	gl.glMultiTexCoordP1uiv = getProcAddr("glMultiTexCoordP1uiv")
	gl.glMultiTexCoordP2ui = getProcAddr("glMultiTexCoordP2ui")
	gl.glMultiTexCoordP2uiv = getProcAddr("glMultiTexCoordP2uiv")
	gl.glMultiTexCoordP3ui = getProcAddr("glMultiTexCoordP3ui")
	gl.glMultiTexCoordP3uiv = getProcAddr("glMultiTexCoordP3uiv")
	gl.glMultiTexCoordP4ui = getProcAddr("glMultiTexCoordP4ui")
	gl.glMultiTexCoordP4uiv = getProcAddr("glMultiTexCoordP4uiv")
	gl.glNormalP3ui = getProcAddr("glNormalP3ui")
	gl.glNormalP3uiv = getProcAddr("glNormalP3uiv")
	gl.glColorP3ui = getProcAddr("glColorP3ui")
	gl.glColorP3uiv = getProcAddr("glColorP3uiv")
	gl.glColorP4ui = getProcAddr("glColorP4ui")
	gl.glColorP4uiv = getProcAddr("glColorP4uiv")
	gl.glSecondaryColorP3ui = getProcAddr("glSecondaryColorP3ui")
	gl.glSecondaryColorP3uiv = getProcAddr("glSecondaryColorP3uiv")
	gl.glViewportArrayv = getProcAddr("glViewportArrayv")
	gl.glViewportIndexedf = getProcAddr("glViewportIndexedf")
	gl.glViewportIndexedfv = getProcAddr("glViewportIndexedfv")
	gl.glScissorArrayv = getProcAddr("glScissorArrayv")
	gl.glScissorIndexed = getProcAddr("glScissorIndexed")
	gl.glScissorIndexedv = getProcAddr("glScissorIndexedv")
	gl.glDepthRangeArrayv = getProcAddr("glDepthRangeArrayv")
	gl.glDepthRangeIndexed = getProcAddr("glDepthRangeIndexed")
	gl.glGetFloati_v = getProcAddr("glGetFloati_v")
	gl.glGetDoublei_v = getProcAddr("glGetDoublei_v")
	gl.glDepthRangeArraydvNV = getProcAddr("glDepthRangeArraydvNV")
	gl.glDepthRangeIndexeddNV = getProcAddr("glDepthRangeIndexeddNV")
	gl.glWindowPos2dARB = getProcAddr("glWindowPos2dARB")
	gl.glWindowPos2dvARB = getProcAddr("glWindowPos2dvARB")
	gl.glWindowPos2fARB = getProcAddr("glWindowPos2fARB")
	gl.glWindowPos2fvARB = getProcAddr("glWindowPos2fvARB")
	gl.glWindowPos2iARB = getProcAddr("glWindowPos2iARB")
	gl.glWindowPos2ivARB = getProcAddr("glWindowPos2ivARB")
	gl.glWindowPos2sARB = getProcAddr("glWindowPos2sARB")
	gl.glWindowPos2svARB = getProcAddr("glWindowPos2svARB")
	gl.glWindowPos3dARB = getProcAddr("glWindowPos3dARB")
	gl.glWindowPos3dvARB = getProcAddr("glWindowPos3dvARB")
	gl.glWindowPos3fARB = getProcAddr("glWindowPos3fARB")
	gl.glWindowPos3fvARB = getProcAddr("glWindowPos3fvARB")
	gl.glWindowPos3iARB = getProcAddr("glWindowPos3iARB")
	gl.glWindowPos3ivARB = getProcAddr("glWindowPos3ivARB")
	gl.glWindowPos3sARB = getProcAddr("glWindowPos3sARB")
	gl.glWindowPos3svARB = getProcAddr("glWindowPos3svARB")
	gl.glDrawBuffersATI = getProcAddr("glDrawBuffersATI")
	gl.glElementPointerATI = getProcAddr("glElementPointerATI")
	gl.glDrawElementArrayATI = getProcAddr("glDrawElementArrayATI")
	gl.glDrawRangeElementArrayATI = getProcAddr("glDrawRangeElementArrayATI")
	gl.glTexBumpParameterivATI = getProcAddr("glTexBumpParameterivATI")
	gl.glTexBumpParameterfvATI = getProcAddr("glTexBumpParameterfvATI")
	gl.glGetTexBumpParameterivATI = getProcAddr("glGetTexBumpParameterivATI")
	gl.glGetTexBumpParameterfvATI = getProcAddr("glGetTexBumpParameterfvATI")
	gl.glGenFragmentShadersATI = getProcAddr("glGenFragmentShadersATI")
	gl.glBindFragmentShaderATI = getProcAddr("glBindFragmentShaderATI")
	gl.glDeleteFragmentShaderATI = getProcAddr("glDeleteFragmentShaderATI")
	gl.glBeginFragmentShaderATI = getProcAddr("glBeginFragmentShaderATI")
	gl.glEndFragmentShaderATI = getProcAddr("glEndFragmentShaderATI")
	gl.glPassTexCoordATI = getProcAddr("glPassTexCoordATI")
	gl.glSampleMapATI = getProcAddr("glSampleMapATI")
	gl.glColorFragmentOp1ATI = getProcAddr("glColorFragmentOp1ATI")
	gl.glColorFragmentOp2ATI = getProcAddr("glColorFragmentOp2ATI")
	gl.glColorFragmentOp3ATI = getProcAddr("glColorFragmentOp3ATI")
	gl.glAlphaFragmentOp1ATI = getProcAddr("glAlphaFragmentOp1ATI")
	gl.glAlphaFragmentOp2ATI = getProcAddr("glAlphaFragmentOp2ATI")
	gl.glAlphaFragmentOp3ATI = getProcAddr("glAlphaFragmentOp3ATI")
	gl.glSetFragmentShaderConstantATI = getProcAddr("glSetFragmentShaderConstantATI")
	gl.glMapObjectBufferATI = getProcAddr("glMapObjectBufferATI")
	gl.glUnmapObjectBufferATI = getProcAddr("glUnmapObjectBufferATI")
	gl.glPNTrianglesiATI = getProcAddr("glPNTrianglesiATI")
	gl.glPNTrianglesfATI = getProcAddr("glPNTrianglesfATI")
	gl.glStencilOpSeparateATI = getProcAddr("glStencilOpSeparateATI")
	gl.glStencilFuncSeparateATI = getProcAddr("glStencilFuncSeparateATI")
	gl.glNewObjectBufferATI = getProcAddr("glNewObjectBufferATI")
	gl.glIsObjectBufferATI = getProcAddr("glIsObjectBufferATI")
	gl.glUpdateObjectBufferATI = getProcAddr("glUpdateObjectBufferATI")
	gl.glGetObjectBufferfvATI = getProcAddr("glGetObjectBufferfvATI")
	gl.glGetObjectBufferivATI = getProcAddr("glGetObjectBufferivATI")
	gl.glFreeObjectBufferATI = getProcAddr("glFreeObjectBufferATI")
	gl.glArrayObjectATI = getProcAddr("glArrayObjectATI")
	gl.glGetArrayObjectfvATI = getProcAddr("glGetArrayObjectfvATI")
	gl.glGetArrayObjectivATI = getProcAddr("glGetArrayObjectivATI")
	gl.glVariantArrayObjectATI = getProcAddr("glVariantArrayObjectATI")
	gl.glGetVariantArrayObjectfvATI = getProcAddr("glGetVariantArrayObjectfvATI")
	gl.glGetVariantArrayObjectivATI = getProcAddr("glGetVariantArrayObjectivATI")
	gl.glVertexAttribArrayObjectATI = getProcAddr("glVertexAttribArrayObjectATI")
	gl.glGetVertexAttribArrayObjectfvATI = getProcAddr("glGetVertexAttribArrayObjectfvATI")
	gl.glGetVertexAttribArrayObjectivATI = getProcAddr("glGetVertexAttribArrayObjectivATI")
	gl.glVertexStream1sATI = getProcAddr("glVertexStream1sATI")
	gl.glVertexStream1svATI = getProcAddr("glVertexStream1svATI")
	gl.glVertexStream1iATI = getProcAddr("glVertexStream1iATI")
	gl.glVertexStream1ivATI = getProcAddr("glVertexStream1ivATI")
	gl.glVertexStream1fATI = getProcAddr("glVertexStream1fATI")
	gl.glVertexStream1fvATI = getProcAddr("glVertexStream1fvATI")
	gl.glVertexStream1dATI = getProcAddr("glVertexStream1dATI")
	gl.glVertexStream1dvATI = getProcAddr("glVertexStream1dvATI")
	gl.glVertexStream2sATI = getProcAddr("glVertexStream2sATI")
	gl.glVertexStream2svATI = getProcAddr("glVertexStream2svATI")
	gl.glVertexStream2iATI = getProcAddr("glVertexStream2iATI")
	gl.glVertexStream2ivATI = getProcAddr("glVertexStream2ivATI")
	gl.glVertexStream2fATI = getProcAddr("glVertexStream2fATI")
	gl.glVertexStream2fvATI = getProcAddr("glVertexStream2fvATI")
	gl.glVertexStream2dATI = getProcAddr("glVertexStream2dATI")
	gl.glVertexStream2dvATI = getProcAddr("glVertexStream2dvATI")
	gl.glVertexStream3sATI = getProcAddr("glVertexStream3sATI")
	gl.glVertexStream3svATI = getProcAddr("glVertexStream3svATI")
	gl.glVertexStream3iATI = getProcAddr("glVertexStream3iATI")
	gl.glVertexStream3ivATI = getProcAddr("glVertexStream3ivATI")
	gl.glVertexStream3fATI = getProcAddr("glVertexStream3fATI")
	gl.glVertexStream3fvATI = getProcAddr("glVertexStream3fvATI")
	gl.glVertexStream3dATI = getProcAddr("glVertexStream3dATI")
	gl.glVertexStream3dvATI = getProcAddr("glVertexStream3dvATI")
	gl.glVertexStream4sATI = getProcAddr("glVertexStream4sATI")
	gl.glVertexStream4svATI = getProcAddr("glVertexStream4svATI")
	gl.glVertexStream4iATI = getProcAddr("glVertexStream4iATI")
	gl.glVertexStream4ivATI = getProcAddr("glVertexStream4ivATI")
	gl.glVertexStream4fATI = getProcAddr("glVertexStream4fATI")
	gl.glVertexStream4fvATI = getProcAddr("glVertexStream4fvATI")
	gl.glVertexStream4dATI = getProcAddr("glVertexStream4dATI")
	gl.glVertexStream4dvATI = getProcAddr("glVertexStream4dvATI")
	gl.glNormalStream3bATI = getProcAddr("glNormalStream3bATI")
	gl.glNormalStream3bvATI = getProcAddr("glNormalStream3bvATI")
	gl.glNormalStream3sATI = getProcAddr("glNormalStream3sATI")
	gl.glNormalStream3svATI = getProcAddr("glNormalStream3svATI")
	gl.glNormalStream3iATI = getProcAddr("glNormalStream3iATI")
	gl.glNormalStream3ivATI = getProcAddr("glNormalStream3ivATI")
	gl.glNormalStream3fATI = getProcAddr("glNormalStream3fATI")
	gl.glNormalStream3fvATI = getProcAddr("glNormalStream3fvATI")
	gl.glNormalStream3dATI = getProcAddr("glNormalStream3dATI")
	gl.glNormalStream3dvATI = getProcAddr("glNormalStream3dvATI")
	gl.glClientActiveVertexStreamATI = getProcAddr("glClientActiveVertexStreamATI")
	gl.glVertexBlendEnviATI = getProcAddr("glVertexBlendEnviATI")
	gl.glVertexBlendEnvfATI = getProcAddr("glVertexBlendEnvfATI")
	gl.glUniformBufferEXT = getProcAddr("glUniformBufferEXT")
	gl.glGetUniformBufferSizeEXT = getProcAddr("glGetUniformBufferSizeEXT")
	gl.glGetUniformOffsetEXT = getProcAddr("glGetUniformOffsetEXT")
	gl.glBlendColorEXT = getProcAddr("glBlendColorEXT")
	gl.glBlendEquationSeparateEXT = getProcAddr("glBlendEquationSeparateEXT")
	gl.glBlendFuncSeparateEXT = getProcAddr("glBlendFuncSeparateEXT")
	gl.glBlendEquationEXT = getProcAddr("glBlendEquationEXT")
	gl.glColorSubTableEXT = getProcAddr("glColorSubTableEXT")
	gl.glCopyColorSubTableEXT = getProcAddr("glCopyColorSubTableEXT")
	gl.glLockArraysEXT = getProcAddr("glLockArraysEXT")
	gl.glUnlockArraysEXT = getProcAddr("glUnlockArraysEXT")
	gl.glConvolutionFilter1DEXT = getProcAddr("glConvolutionFilter1DEXT")
	gl.glConvolutionFilter2DEXT = getProcAddr("glConvolutionFilter2DEXT")
	gl.glConvolutionParameterfEXT = getProcAddr("glConvolutionParameterfEXT")
	gl.glConvolutionParameterfvEXT = getProcAddr("glConvolutionParameterfvEXT")
	gl.glConvolutionParameteriEXT = getProcAddr("glConvolutionParameteriEXT")
	gl.glConvolutionParameterivEXT = getProcAddr("glConvolutionParameterivEXT")
	gl.glCopyConvolutionFilter1DEXT = getProcAddr("glCopyConvolutionFilter1DEXT")
	gl.glCopyConvolutionFilter2DEXT = getProcAddr("glCopyConvolutionFilter2DEXT")
	gl.glGetConvolutionFilterEXT = getProcAddr("glGetConvolutionFilterEXT")
	gl.glGetConvolutionParameterfvEXT = getProcAddr("glGetConvolutionParameterfvEXT")
	gl.glGetConvolutionParameterivEXT = getProcAddr("glGetConvolutionParameterivEXT")
	gl.glGetSeparableFilterEXT = getProcAddr("glGetSeparableFilterEXT")
	gl.glSeparableFilter2DEXT = getProcAddr("glSeparableFilter2DEXT")
	gl.glTangent3bEXT = getProcAddr("glTangent3bEXT")
	gl.glTangent3bvEXT = getProcAddr("glTangent3bvEXT")
	gl.glTangent3dEXT = getProcAddr("glTangent3dEXT")
	gl.glTangent3dvEXT = getProcAddr("glTangent3dvEXT")
	gl.glTangent3fEXT = getProcAddr("glTangent3fEXT")
	gl.glTangent3fvEXT = getProcAddr("glTangent3fvEXT")
	gl.glTangent3iEXT = getProcAddr("glTangent3iEXT")
	gl.glTangent3ivEXT = getProcAddr("glTangent3ivEXT")
	gl.glTangent3sEXT = getProcAddr("glTangent3sEXT")
	gl.glTangent3svEXT = getProcAddr("glTangent3svEXT")
	gl.glBinormal3bEXT = getProcAddr("glBinormal3bEXT")
	gl.glBinormal3bvEXT = getProcAddr("glBinormal3bvEXT")
	gl.glBinormal3dEXT = getProcAddr("glBinormal3dEXT")
	gl.glBinormal3dvEXT = getProcAddr("glBinormal3dvEXT")
	gl.glBinormal3fEXT = getProcAddr("glBinormal3fEXT")
	gl.glBinormal3fvEXT = getProcAddr("glBinormal3fvEXT")
	gl.glBinormal3iEXT = getProcAddr("glBinormal3iEXT")
	gl.glBinormal3ivEXT = getProcAddr("glBinormal3ivEXT")
	gl.glBinormal3sEXT = getProcAddr("glBinormal3sEXT")
	gl.glBinormal3svEXT = getProcAddr("glBinormal3svEXT")
	gl.glTangentPointerEXT = getProcAddr("glTangentPointerEXT")
	gl.glBinormalPointerEXT = getProcAddr("glBinormalPointerEXT")
	gl.glCopyTexImage1DEXT = getProcAddr("glCopyTexImage1DEXT")
	gl.glCopyTexImage2DEXT = getProcAddr("glCopyTexImage2DEXT")
	gl.glCopyTexSubImage1DEXT = getProcAddr("glCopyTexSubImage1DEXT")
	gl.glCopyTexSubImage2DEXT = getProcAddr("glCopyTexSubImage2DEXT")
	gl.glCopyTexSubImage3DEXT = getProcAddr("glCopyTexSubImage3DEXT")
	gl.glCullParameterdvEXT = getProcAddr("glCullParameterdvEXT")
	gl.glCullParameterfvEXT = getProcAddr("glCullParameterfvEXT")
	gl.glLabelObjectEXT = getProcAddr("glLabelObjectEXT")
	gl.glGetObjectLabelEXT = getProcAddr("glGetObjectLabelEXT")
	gl.glInsertEventMarkerEXT = getProcAddr("glInsertEventMarkerEXT")
	gl.glPushGroupMarkerEXT = getProcAddr("glPushGroupMarkerEXT")
	gl.glPopGroupMarkerEXT = getProcAddr("glPopGroupMarkerEXT")
	gl.glDepthBoundsEXT = getProcAddr("glDepthBoundsEXT")
	gl.glMatrixLoadfEXT = getProcAddr("glMatrixLoadfEXT")
	gl.glMatrixLoaddEXT = getProcAddr("glMatrixLoaddEXT")
	gl.glMatrixMultfEXT = getProcAddr("glMatrixMultfEXT")
	gl.glMatrixMultdEXT = getProcAddr("glMatrixMultdEXT")
	gl.glMatrixLoadIdentityEXT = getProcAddr("glMatrixLoadIdentityEXT")
	gl.glMatrixRotatefEXT = getProcAddr("glMatrixRotatefEXT")
	gl.glMatrixRotatedEXT = getProcAddr("glMatrixRotatedEXT")
	gl.glMatrixScalefEXT = getProcAddr("glMatrixScalefEXT")
	gl.glMatrixScaledEXT = getProcAddr("glMatrixScaledEXT")
	gl.glMatrixTranslatefEXT = getProcAddr("glMatrixTranslatefEXT")
	gl.glMatrixTranslatedEXT = getProcAddr("glMatrixTranslatedEXT")
	gl.glMatrixFrustumEXT = getProcAddr("glMatrixFrustumEXT")
	gl.glMatrixOrthoEXT = getProcAddr("glMatrixOrthoEXT")
	gl.glMatrixPopEXT = getProcAddr("glMatrixPopEXT")
	gl.glMatrixPushEXT = getProcAddr("glMatrixPushEXT")
	gl.glClientAttribDefaultEXT = getProcAddr("glClientAttribDefaultEXT")
	gl.glPushClientAttribDefaultEXT = getProcAddr("glPushClientAttribDefaultEXT")
	gl.glTextureParameterfEXT = getProcAddr("glTextureParameterfEXT")
	gl.glTextureParameterfvEXT = getProcAddr("glTextureParameterfvEXT")
	gl.glTextureParameteriEXT = getProcAddr("glTextureParameteriEXT")
	gl.glTextureParameterivEXT = getProcAddr("glTextureParameterivEXT")
	gl.glTextureImage1DEXT = getProcAddr("glTextureImage1DEXT")
	gl.glTextureImage2DEXT = getProcAddr("glTextureImage2DEXT")
	gl.glTextureSubImage1DEXT = getProcAddr("glTextureSubImage1DEXT")
	gl.glTextureSubImage2DEXT = getProcAddr("glTextureSubImage2DEXT")
	gl.glCopyTextureImage1DEXT = getProcAddr("glCopyTextureImage1DEXT")
	gl.glCopyTextureImage2DEXT = getProcAddr("glCopyTextureImage2DEXT")
	gl.glCopyTextureSubImage1DEXT = getProcAddr("glCopyTextureSubImage1DEXT")
	gl.glCopyTextureSubImage2DEXT = getProcAddr("glCopyTextureSubImage2DEXT")
	gl.glGetTextureImageEXT = getProcAddr("glGetTextureImageEXT")
	gl.glGetTextureParameterfvEXT = getProcAddr("glGetTextureParameterfvEXT")
	gl.glGetTextureParameterivEXT = getProcAddr("glGetTextureParameterivEXT")
	gl.glGetTextureLevelParameterfvEXT = getProcAddr("glGetTextureLevelParameterfvEXT")
	gl.glGetTextureLevelParameterivEXT = getProcAddr("glGetTextureLevelParameterivEXT")
	gl.glTextureImage3DEXT = getProcAddr("glTextureImage3DEXT")
	gl.glTextureSubImage3DEXT = getProcAddr("glTextureSubImage3DEXT")
	gl.glCopyTextureSubImage3DEXT = getProcAddr("glCopyTextureSubImage3DEXT")
	gl.glBindMultiTextureEXT = getProcAddr("glBindMultiTextureEXT")
	gl.glMultiTexCoordPointerEXT = getProcAddr("glMultiTexCoordPointerEXT")
	gl.glMultiTexEnvfEXT = getProcAddr("glMultiTexEnvfEXT")
	gl.glMultiTexEnvfvEXT = getProcAddr("glMultiTexEnvfvEXT")
	gl.glMultiTexEnviEXT = getProcAddr("glMultiTexEnviEXT")
	gl.glMultiTexEnvivEXT = getProcAddr("glMultiTexEnvivEXT")
	gl.glMultiTexGendEXT = getProcAddr("glMultiTexGendEXT")
	gl.glMultiTexGendvEXT = getProcAddr("glMultiTexGendvEXT")
	gl.glMultiTexGenfEXT = getProcAddr("glMultiTexGenfEXT")
	gl.glMultiTexGenfvEXT = getProcAddr("glMultiTexGenfvEXT")
	gl.glMultiTexGeniEXT = getProcAddr("glMultiTexGeniEXT")
	gl.glMultiTexGenivEXT = getProcAddr("glMultiTexGenivEXT")
	gl.glGetMultiTexEnvfvEXT = getProcAddr("glGetMultiTexEnvfvEXT")
	gl.glGetMultiTexEnvivEXT = getProcAddr("glGetMultiTexEnvivEXT")
	gl.glGetMultiTexGendvEXT = getProcAddr("glGetMultiTexGendvEXT")
	gl.glGetMultiTexGenfvEXT = getProcAddr("glGetMultiTexGenfvEXT")
	gl.glGetMultiTexGenivEXT = getProcAddr("glGetMultiTexGenivEXT")
	gl.glMultiTexParameteriEXT = getProcAddr("glMultiTexParameteriEXT")
	gl.glMultiTexParameterivEXT = getProcAddr("glMultiTexParameterivEXT")
	gl.glMultiTexParameterfEXT = getProcAddr("glMultiTexParameterfEXT")
	gl.glMultiTexParameterfvEXT = getProcAddr("glMultiTexParameterfvEXT")
	gl.glMultiTexImage1DEXT = getProcAddr("glMultiTexImage1DEXT")
	gl.glMultiTexImage2DEXT = getProcAddr("glMultiTexImage2DEXT")
	gl.glMultiTexSubImage1DEXT = getProcAddr("glMultiTexSubImage1DEXT")
	gl.glMultiTexSubImage2DEXT = getProcAddr("glMultiTexSubImage2DEXT")
	gl.glCopyMultiTexImage1DEXT = getProcAddr("glCopyMultiTexImage1DEXT")
	gl.glCopyMultiTexImage2DEXT = getProcAddr("glCopyMultiTexImage2DEXT")
	gl.glCopyMultiTexSubImage1DEXT = getProcAddr("glCopyMultiTexSubImage1DEXT")
	gl.glCopyMultiTexSubImage2DEXT = getProcAddr("glCopyMultiTexSubImage2DEXT")
	gl.glGetMultiTexImageEXT = getProcAddr("glGetMultiTexImageEXT")
	gl.glGetMultiTexParameterfvEXT = getProcAddr("glGetMultiTexParameterfvEXT")
	gl.glGetMultiTexParameterivEXT = getProcAddr("glGetMultiTexParameterivEXT")
	gl.glGetMultiTexLevelParameterfvEXT = getProcAddr("glGetMultiTexLevelParameterfvEXT")
	gl.glGetMultiTexLevelParameterivEXT = getProcAddr("glGetMultiTexLevelParameterivEXT")
	gl.glMultiTexImage3DEXT = getProcAddr("glMultiTexImage3DEXT")
	gl.glMultiTexSubImage3DEXT = getProcAddr("glMultiTexSubImage3DEXT")
	gl.glCopyMultiTexSubImage3DEXT = getProcAddr("glCopyMultiTexSubImage3DEXT")
	gl.glEnableClientStateIndexedEXT = getProcAddr("glEnableClientStateIndexedEXT")
	gl.glDisableClientStateIndexedEXT = getProcAddr("glDisableClientStateIndexedEXT")
	gl.glGetFloatIndexedvEXT = getProcAddr("glGetFloatIndexedvEXT")
	gl.glGetDoubleIndexedvEXT = getProcAddr("glGetDoubleIndexedvEXT")
	gl.glGetPointerIndexedvEXT = getProcAddr("glGetPointerIndexedvEXT")
	gl.glEnableIndexedEXT = getProcAddr("glEnableIndexedEXT")
	gl.glDisableIndexedEXT = getProcAddr("glDisableIndexedEXT")
	gl.glIsEnabledIndexedEXT = getProcAddr("glIsEnabledIndexedEXT")
	gl.glGetIntegerIndexedvEXT = getProcAddr("glGetIntegerIndexedvEXT")
	gl.glGetBooleanIndexedvEXT = getProcAddr("glGetBooleanIndexedvEXT")
	gl.glCompressedTextureImage3DEXT = getProcAddr("glCompressedTextureImage3DEXT")
	gl.glCompressedTextureImage2DEXT = getProcAddr("glCompressedTextureImage2DEXT")
	gl.glCompressedTextureImage1DEXT = getProcAddr("glCompressedTextureImage1DEXT")
	gl.glCompressedTextureSubImage3DEXT = getProcAddr("glCompressedTextureSubImage3DEXT")
	gl.glCompressedTextureSubImage2DEXT = getProcAddr("glCompressedTextureSubImage2DEXT")
	gl.glCompressedTextureSubImage1DEXT = getProcAddr("glCompressedTextureSubImage1DEXT")
	gl.glGetCompressedTextureImageEXT = getProcAddr("glGetCompressedTextureImageEXT")
	gl.glCompressedMultiTexImage3DEXT = getProcAddr("glCompressedMultiTexImage3DEXT")
	gl.glCompressedMultiTexImage2DEXT = getProcAddr("glCompressedMultiTexImage2DEXT")
	gl.glCompressedMultiTexImage1DEXT = getProcAddr("glCompressedMultiTexImage1DEXT")
	gl.glCompressedMultiTexSubImage3DEXT = getProcAddr("glCompressedMultiTexSubImage3DEXT")
	gl.glCompressedMultiTexSubImage2DEXT = getProcAddr("glCompressedMultiTexSubImage2DEXT")
	gl.glCompressedMultiTexSubImage1DEXT = getProcAddr("glCompressedMultiTexSubImage1DEXT")
	gl.glGetCompressedMultiTexImageEXT = getProcAddr("glGetCompressedMultiTexImageEXT")
	gl.glMatrixLoadTransposefEXT = getProcAddr("glMatrixLoadTransposefEXT")
	gl.glMatrixLoadTransposedEXT = getProcAddr("glMatrixLoadTransposedEXT")
	gl.glMatrixMultTransposefEXT = getProcAddr("glMatrixMultTransposefEXT")
	gl.glMatrixMultTransposedEXT = getProcAddr("glMatrixMultTransposedEXT")
	gl.glNamedBufferDataEXT = getProcAddr("glNamedBufferDataEXT")
	gl.glNamedBufferSubDataEXT = getProcAddr("glNamedBufferSubDataEXT")
	gl.glMapNamedBufferEXT = getProcAddr("glMapNamedBufferEXT")
	gl.glUnmapNamedBufferEXT = getProcAddr("glUnmapNamedBufferEXT")
	gl.glGetNamedBufferParameterivEXT = getProcAddr("glGetNamedBufferParameterivEXT")
	gl.glGetNamedBufferPointervEXT = getProcAddr("glGetNamedBufferPointervEXT")
	gl.glGetNamedBufferSubDataEXT = getProcAddr("glGetNamedBufferSubDataEXT")
	gl.glProgramUniform1fEXT = getProcAddr("glProgramUniform1fEXT")
	gl.glProgramUniform2fEXT = getProcAddr("glProgramUniform2fEXT")
	gl.glProgramUniform3fEXT = getProcAddr("glProgramUniform3fEXT")
	gl.glProgramUniform4fEXT = getProcAddr("glProgramUniform4fEXT")
	gl.glProgramUniform1iEXT = getProcAddr("glProgramUniform1iEXT")
	gl.glProgramUniform2iEXT = getProcAddr("glProgramUniform2iEXT")
	gl.glProgramUniform3iEXT = getProcAddr("glProgramUniform3iEXT")
	gl.glProgramUniform4iEXT = getProcAddr("glProgramUniform4iEXT")
	gl.glProgramUniform1fvEXT = getProcAddr("glProgramUniform1fvEXT")
	gl.glProgramUniform2fvEXT = getProcAddr("glProgramUniform2fvEXT")
	gl.glProgramUniform3fvEXT = getProcAddr("glProgramUniform3fvEXT")
	gl.glProgramUniform4fvEXT = getProcAddr("glProgramUniform4fvEXT")
	gl.glProgramUniform1ivEXT = getProcAddr("glProgramUniform1ivEXT")
	gl.glProgramUniform2ivEXT = getProcAddr("glProgramUniform2ivEXT")
	gl.glProgramUniform3ivEXT = getProcAddr("glProgramUniform3ivEXT")
	gl.glProgramUniform4ivEXT = getProcAddr("glProgramUniform4ivEXT")
	gl.glProgramUniformMatrix2fvEXT = getProcAddr("glProgramUniformMatrix2fvEXT")
	gl.glProgramUniformMatrix3fvEXT = getProcAddr("glProgramUniformMatrix3fvEXT")
	gl.glProgramUniformMatrix4fvEXT = getProcAddr("glProgramUniformMatrix4fvEXT")
	gl.glProgramUniformMatrix2x3fvEXT = getProcAddr("glProgramUniformMatrix2x3fvEXT")
	gl.glProgramUniformMatrix3x2fvEXT = getProcAddr("glProgramUniformMatrix3x2fvEXT")
	gl.glProgramUniformMatrix2x4fvEXT = getProcAddr("glProgramUniformMatrix2x4fvEXT")
	gl.glProgramUniformMatrix4x2fvEXT = getProcAddr("glProgramUniformMatrix4x2fvEXT")
	gl.glProgramUniformMatrix3x4fvEXT = getProcAddr("glProgramUniformMatrix3x4fvEXT")
	gl.glProgramUniformMatrix4x3fvEXT = getProcAddr("glProgramUniformMatrix4x3fvEXT")
	gl.glTextureBufferEXT = getProcAddr("glTextureBufferEXT")
	gl.glMultiTexBufferEXT = getProcAddr("glMultiTexBufferEXT")
	gl.glTextureParameterIivEXT = getProcAddr("glTextureParameterIivEXT")
	gl.glTextureParameterIuivEXT = getProcAddr("glTextureParameterIuivEXT")
	gl.glGetTextureParameterIivEXT = getProcAddr("glGetTextureParameterIivEXT")
	gl.glGetTextureParameterIuivEXT = getProcAddr("glGetTextureParameterIuivEXT")
	gl.glMultiTexParameterIivEXT = getProcAddr("glMultiTexParameterIivEXT")
	gl.glMultiTexParameterIuivEXT = getProcAddr("glMultiTexParameterIuivEXT")
	gl.glGetMultiTexParameterIivEXT = getProcAddr("glGetMultiTexParameterIivEXT")
	gl.glGetMultiTexParameterIuivEXT = getProcAddr("glGetMultiTexParameterIuivEXT")
	gl.glProgramUniform1uiEXT = getProcAddr("glProgramUniform1uiEXT")
	gl.glProgramUniform2uiEXT = getProcAddr("glProgramUniform2uiEXT")
	gl.glProgramUniform3uiEXT = getProcAddr("glProgramUniform3uiEXT")
	gl.glProgramUniform4uiEXT = getProcAddr("glProgramUniform4uiEXT")
	gl.glProgramUniform1uivEXT = getProcAddr("glProgramUniform1uivEXT")
	gl.glProgramUniform2uivEXT = getProcAddr("glProgramUniform2uivEXT")
	gl.glProgramUniform3uivEXT = getProcAddr("glProgramUniform3uivEXT")
	gl.glProgramUniform4uivEXT = getProcAddr("glProgramUniform4uivEXT")
	gl.glNamedProgramLocalParameters4fvEXT = getProcAddr("glNamedProgramLocalParameters4fvEXT")
	gl.glNamedProgramLocalParameterI4iEXT = getProcAddr("glNamedProgramLocalParameterI4iEXT")
	gl.glNamedProgramLocalParameterI4ivEXT = getProcAddr("glNamedProgramLocalParameterI4ivEXT")
	gl.glNamedProgramLocalParametersI4ivEXT = getProcAddr("glNamedProgramLocalParametersI4ivEXT")
	gl.glNamedProgramLocalParameterI4uiEXT = getProcAddr("glNamedProgramLocalParameterI4uiEXT")
	gl.glNamedProgramLocalParameterI4uivEXT = getProcAddr("glNamedProgramLocalParameterI4uivEXT")
	gl.glNamedProgramLocalParametersI4uivEXT = getProcAddr("glNamedProgramLocalParametersI4uivEXT")
	gl.glGetNamedProgramLocalParameterIivEXT = getProcAddr("glGetNamedProgramLocalParameterIivEXT")
	gl.glGetNamedProgramLocalParameterIuivEXT = getProcAddr("glGetNamedProgramLocalParameterIuivEXT")
	gl.glEnableClientStateiEXT = getProcAddr("glEnableClientStateiEXT")
	gl.glDisableClientStateiEXT = getProcAddr("glDisableClientStateiEXT")
	gl.glGetFloati_vEXT = getProcAddr("glGetFloati_vEXT")
	gl.glGetDoublei_vEXT = getProcAddr("glGetDoublei_vEXT")
	gl.glGetPointeri_vEXT = getProcAddr("glGetPointeri_vEXT")
	gl.glNamedProgramStringEXT = getProcAddr("glNamedProgramStringEXT")
	gl.glNamedProgramLocalParameter4dEXT = getProcAddr("glNamedProgramLocalParameter4dEXT")
	gl.glNamedProgramLocalParameter4dvEXT = getProcAddr("glNamedProgramLocalParameter4dvEXT")
	gl.glNamedProgramLocalParameter4fEXT = getProcAddr("glNamedProgramLocalParameter4fEXT")
	gl.glNamedProgramLocalParameter4fvEXT = getProcAddr("glNamedProgramLocalParameter4fvEXT")
	gl.glGetNamedProgramLocalParameterdvEXT = getProcAddr("glGetNamedProgramLocalParameterdvEXT")
	gl.glGetNamedProgramLocalParameterfvEXT = getProcAddr("glGetNamedProgramLocalParameterfvEXT")
	gl.glGetNamedProgramivEXT = getProcAddr("glGetNamedProgramivEXT")
	gl.glGetNamedProgramStringEXT = getProcAddr("glGetNamedProgramStringEXT")
	gl.glNamedRenderbufferStorageEXT = getProcAddr("glNamedRenderbufferStorageEXT")
	gl.glGetNamedRenderbufferParameterivEXT = getProcAddr("glGetNamedRenderbufferParameterivEXT")
	gl.glNamedRenderbufferStorageMultisampleEXT = getProcAddr("glNamedRenderbufferStorageMultisampleEXT")
	gl.glNamedRenderbufferStorageMultisampleCoverageEXT = getProcAddr("glNamedRenderbufferStorageMultisampleCoverageEXT")
	gl.glCheckNamedFramebufferStatusEXT = getProcAddr("glCheckNamedFramebufferStatusEXT")
	gl.glNamedFramebufferTexture1DEXT = getProcAddr("glNamedFramebufferTexture1DEXT")
	gl.glNamedFramebufferTexture2DEXT = getProcAddr("glNamedFramebufferTexture2DEXT")
	gl.glNamedFramebufferTexture3DEXT = getProcAddr("glNamedFramebufferTexture3DEXT")
	gl.glNamedFramebufferRenderbufferEXT = getProcAddr("glNamedFramebufferRenderbufferEXT")
	gl.glGetNamedFramebufferAttachmentParameterivEXT = getProcAddr("glGetNamedFramebufferAttachmentParameterivEXT")
	gl.glGenerateTextureMipmapEXT = getProcAddr("glGenerateTextureMipmapEXT")
	gl.glGenerateMultiTexMipmapEXT = getProcAddr("glGenerateMultiTexMipmapEXT")
	gl.glFramebufferDrawBufferEXT = getProcAddr("glFramebufferDrawBufferEXT")
	gl.glFramebufferDrawBuffersEXT = getProcAddr("glFramebufferDrawBuffersEXT")
	gl.glFramebufferReadBufferEXT = getProcAddr("glFramebufferReadBufferEXT")
	gl.glGetFramebufferParameterivEXT = getProcAddr("glGetFramebufferParameterivEXT")
	gl.glNamedCopyBufferSubDataEXT = getProcAddr("glNamedCopyBufferSubDataEXT")
	gl.glNamedFramebufferTextureEXT = getProcAddr("glNamedFramebufferTextureEXT")
	gl.glNamedFramebufferTextureLayerEXT = getProcAddr("glNamedFramebufferTextureLayerEXT")
	gl.glNamedFramebufferTextureFaceEXT = getProcAddr("glNamedFramebufferTextureFaceEXT")
	gl.glTextureRenderbufferEXT = getProcAddr("glTextureRenderbufferEXT")
	gl.glMultiTexRenderbufferEXT = getProcAddr("glMultiTexRenderbufferEXT")
	gl.glVertexArrayVertexOffsetEXT = getProcAddr("glVertexArrayVertexOffsetEXT")
	gl.glVertexArrayColorOffsetEXT = getProcAddr("glVertexArrayColorOffsetEXT")
	gl.glVertexArrayEdgeFlagOffsetEXT = getProcAddr("glVertexArrayEdgeFlagOffsetEXT")
	gl.glVertexArrayIndexOffsetEXT = getProcAddr("glVertexArrayIndexOffsetEXT")
	gl.glVertexArrayNormalOffsetEXT = getProcAddr("glVertexArrayNormalOffsetEXT")
	gl.glVertexArrayTexCoordOffsetEXT = getProcAddr("glVertexArrayTexCoordOffsetEXT")
	gl.glVertexArrayMultiTexCoordOffsetEXT = getProcAddr("glVertexArrayMultiTexCoordOffsetEXT")
	gl.glVertexArrayFogCoordOffsetEXT = getProcAddr("glVertexArrayFogCoordOffsetEXT")
	gl.glVertexArraySecondaryColorOffsetEXT = getProcAddr("glVertexArraySecondaryColorOffsetEXT")
	gl.glVertexArrayVertexAttribOffsetEXT = getProcAddr("glVertexArrayVertexAttribOffsetEXT")
	gl.glVertexArrayVertexAttribIOffsetEXT = getProcAddr("glVertexArrayVertexAttribIOffsetEXT")
	gl.glEnableVertexArrayEXT = getProcAddr("glEnableVertexArrayEXT")
	gl.glDisableVertexArrayEXT = getProcAddr("glDisableVertexArrayEXT")
	gl.glEnableVertexArrayAttribEXT = getProcAddr("glEnableVertexArrayAttribEXT")
	gl.glDisableVertexArrayAttribEXT = getProcAddr("glDisableVertexArrayAttribEXT")
	gl.glGetVertexArrayIntegervEXT = getProcAddr("glGetVertexArrayIntegervEXT")
	gl.glGetVertexArrayPointervEXT = getProcAddr("glGetVertexArrayPointervEXT")
	gl.glGetVertexArrayIntegeri_vEXT = getProcAddr("glGetVertexArrayIntegeri_vEXT")
	gl.glGetVertexArrayPointeri_vEXT = getProcAddr("glGetVertexArrayPointeri_vEXT")
	gl.glMapNamedBufferRangeEXT = getProcAddr("glMapNamedBufferRangeEXT")
	gl.glFlushMappedNamedBufferRangeEXT = getProcAddr("glFlushMappedNamedBufferRangeEXT")
	gl.glNamedBufferStorageEXT = getProcAddr("glNamedBufferStorageEXT")
	gl.glClearNamedBufferDataEXT = getProcAddr("glClearNamedBufferDataEXT")
	gl.glClearNamedBufferSubDataEXT = getProcAddr("glClearNamedBufferSubDataEXT")
	gl.glNamedFramebufferParameteriEXT = getProcAddr("glNamedFramebufferParameteriEXT")
	gl.glGetNamedFramebufferParameterivEXT = getProcAddr("glGetNamedFramebufferParameterivEXT")
	gl.glProgramUniform1dEXT = getProcAddr("glProgramUniform1dEXT")
	gl.glProgramUniform2dEXT = getProcAddr("glProgramUniform2dEXT")
	gl.glProgramUniform3dEXT = getProcAddr("glProgramUniform3dEXT")
	gl.glProgramUniform4dEXT = getProcAddr("glProgramUniform4dEXT")
	gl.glProgramUniform1dvEXT = getProcAddr("glProgramUniform1dvEXT")
	gl.glProgramUniform2dvEXT = getProcAddr("glProgramUniform2dvEXT")
	gl.glProgramUniform3dvEXT = getProcAddr("glProgramUniform3dvEXT")
	gl.glProgramUniform4dvEXT = getProcAddr("glProgramUniform4dvEXT")
	gl.glProgramUniformMatrix2dvEXT = getProcAddr("glProgramUniformMatrix2dvEXT")
	gl.glProgramUniformMatrix3dvEXT = getProcAddr("glProgramUniformMatrix3dvEXT")
	gl.glProgramUniformMatrix4dvEXT = getProcAddr("glProgramUniformMatrix4dvEXT")
	gl.glProgramUniformMatrix2x3dvEXT = getProcAddr("glProgramUniformMatrix2x3dvEXT")
	gl.glProgramUniformMatrix2x4dvEXT = getProcAddr("glProgramUniformMatrix2x4dvEXT")
	gl.glProgramUniformMatrix3x2dvEXT = getProcAddr("glProgramUniformMatrix3x2dvEXT")
	gl.glProgramUniformMatrix3x4dvEXT = getProcAddr("glProgramUniformMatrix3x4dvEXT")
	gl.glProgramUniformMatrix4x2dvEXT = getProcAddr("glProgramUniformMatrix4x2dvEXT")
	gl.glProgramUniformMatrix4x3dvEXT = getProcAddr("glProgramUniformMatrix4x3dvEXT")
	gl.glTextureBufferRangeEXT = getProcAddr("glTextureBufferRangeEXT")
	gl.glTextureStorage1DEXT = getProcAddr("glTextureStorage1DEXT")
	gl.glTextureStorage2DEXT = getProcAddr("glTextureStorage2DEXT")
	gl.glTextureStorage3DEXT = getProcAddr("glTextureStorage3DEXT")
	gl.glTextureStorage2DMultisampleEXT = getProcAddr("glTextureStorage2DMultisampleEXT")
	gl.glTextureStorage3DMultisampleEXT = getProcAddr("glTextureStorage3DMultisampleEXT")
	gl.glVertexArrayBindVertexBufferEXT = getProcAddr("glVertexArrayBindVertexBufferEXT")
	gl.glVertexArrayVertexAttribFormatEXT = getProcAddr("glVertexArrayVertexAttribFormatEXT")
	gl.glVertexArrayVertexAttribIFormatEXT = getProcAddr("glVertexArrayVertexAttribIFormatEXT")
	gl.glVertexArrayVertexAttribLFormatEXT = getProcAddr("glVertexArrayVertexAttribLFormatEXT")
	gl.glVertexArrayVertexAttribBindingEXT = getProcAddr("glVertexArrayVertexAttribBindingEXT")
	gl.glVertexArrayVertexBindingDivisorEXT = getProcAddr("glVertexArrayVertexBindingDivisorEXT")
	gl.glVertexArrayVertexAttribLOffsetEXT = getProcAddr("glVertexArrayVertexAttribLOffsetEXT")
	gl.glTexturePageCommitmentEXT = getProcAddr("glTexturePageCommitmentEXT")
	gl.glVertexArrayVertexAttribDivisorEXT = getProcAddr("glVertexArrayVertexAttribDivisorEXT")
	gl.glColorMaskIndexedEXT = getProcAddr("glColorMaskIndexedEXT")
	gl.glGetBooleanIndexedvEXT = getProcAddr("glGetBooleanIndexedvEXT")
	gl.glGetIntegerIndexedvEXT = getProcAddr("glGetIntegerIndexedvEXT")
	gl.glEnableIndexedEXT = getProcAddr("glEnableIndexedEXT")
	gl.glDisableIndexedEXT = getProcAddr("glDisableIndexedEXT")
	gl.glIsEnabledIndexedEXT = getProcAddr("glIsEnabledIndexedEXT")
	gl.glDrawArraysInstancedEXT = getProcAddr("glDrawArraysInstancedEXT")
	gl.glDrawElementsInstancedEXT = getProcAddr("glDrawElementsInstancedEXT")
	gl.glDrawRangeElementsEXT = getProcAddr("glDrawRangeElementsEXT")
	gl.glFogCoordfEXT = getProcAddr("glFogCoordfEXT")
	gl.glFogCoordfvEXT = getProcAddr("glFogCoordfvEXT")
	gl.glFogCoorddEXT = getProcAddr("glFogCoorddEXT")
	gl.glFogCoorddvEXT = getProcAddr("glFogCoorddvEXT")
	gl.glFogCoordPointerEXT = getProcAddr("glFogCoordPointerEXT")
	gl.glBlitFramebufferEXT = getProcAddr("glBlitFramebufferEXT")
	gl.glRenderbufferStorageMultisampleEXT = getProcAddr("glRenderbufferStorageMultisampleEXT")
	gl.glIsRenderbufferEXT = getProcAddr("glIsRenderbufferEXT")
	gl.glBindRenderbufferEXT = getProcAddr("glBindRenderbufferEXT")
	gl.glDeleteRenderbuffersEXT = getProcAddr("glDeleteRenderbuffersEXT")
	gl.glGenRenderbuffersEXT = getProcAddr("glGenRenderbuffersEXT")
	gl.glRenderbufferStorageEXT = getProcAddr("glRenderbufferStorageEXT")
	gl.glGetRenderbufferParameterivEXT = getProcAddr("glGetRenderbufferParameterivEXT")
	gl.glIsFramebufferEXT = getProcAddr("glIsFramebufferEXT")
	gl.glBindFramebufferEXT = getProcAddr("glBindFramebufferEXT")
	gl.glDeleteFramebuffersEXT = getProcAddr("glDeleteFramebuffersEXT")
	gl.glGenFramebuffersEXT = getProcAddr("glGenFramebuffersEXT")
	gl.glCheckFramebufferStatusEXT = getProcAddr("glCheckFramebufferStatusEXT")
	gl.glFramebufferTexture1DEXT = getProcAddr("glFramebufferTexture1DEXT")
	gl.glFramebufferTexture2DEXT = getProcAddr("glFramebufferTexture2DEXT")
	gl.glFramebufferTexture3DEXT = getProcAddr("glFramebufferTexture3DEXT")
	gl.glFramebufferRenderbufferEXT = getProcAddr("glFramebufferRenderbufferEXT")
	gl.glGetFramebufferAttachmentParameterivEXT = getProcAddr("glGetFramebufferAttachmentParameterivEXT")
	gl.glGenerateMipmapEXT = getProcAddr("glGenerateMipmapEXT")
	gl.glProgramParameteriEXT = getProcAddr("glProgramParameteriEXT")
	gl.glProgramEnvParameters4fvEXT = getProcAddr("glProgramEnvParameters4fvEXT")
	gl.glProgramLocalParameters4fvEXT = getProcAddr("glProgramLocalParameters4fvEXT")
	gl.glGetUniformuivEXT = getProcAddr("glGetUniformuivEXT")
	gl.glBindFragDataLocationEXT = getProcAddr("glBindFragDataLocationEXT")
	gl.glGetFragDataLocationEXT = getProcAddr("glGetFragDataLocationEXT")
	gl.glUniform1uiEXT = getProcAddr("glUniform1uiEXT")
	gl.glUniform2uiEXT = getProcAddr("glUniform2uiEXT")
	gl.glUniform3uiEXT = getProcAddr("glUniform3uiEXT")
	gl.glUniform4uiEXT = getProcAddr("glUniform4uiEXT")
	gl.glUniform1uivEXT = getProcAddr("glUniform1uivEXT")
	gl.glUniform2uivEXT = getProcAddr("glUniform2uivEXT")
	gl.glUniform3uivEXT = getProcAddr("glUniform3uivEXT")
	gl.glUniform4uivEXT = getProcAddr("glUniform4uivEXT")
	gl.glGetHistogramEXT = getProcAddr("glGetHistogramEXT")
	gl.glGetHistogramParameterfvEXT = getProcAddr("glGetHistogramParameterfvEXT")
	gl.glGetHistogramParameterivEXT = getProcAddr("glGetHistogramParameterivEXT")
	gl.glGetMinmaxEXT = getProcAddr("glGetMinmaxEXT")
	gl.glGetMinmaxParameterfvEXT = getProcAddr("glGetMinmaxParameterfvEXT")
	gl.glGetMinmaxParameterivEXT = getProcAddr("glGetMinmaxParameterivEXT")
	gl.glHistogramEXT = getProcAddr("glHistogramEXT")
	gl.glMinmaxEXT = getProcAddr("glMinmaxEXT")
	gl.glResetHistogramEXT = getProcAddr("glResetHistogramEXT")
	gl.glResetMinmaxEXT = getProcAddr("glResetMinmaxEXT")
	gl.glIndexFuncEXT = getProcAddr("glIndexFuncEXT")
	gl.glIndexMaterialEXT = getProcAddr("glIndexMaterialEXT")
	gl.glApplyTextureEXT = getProcAddr("glApplyTextureEXT")
	gl.glTextureLightEXT = getProcAddr("glTextureLightEXT")
	gl.glTextureMaterialEXT = getProcAddr("glTextureMaterialEXT")
	gl.glGetUnsignedBytevEXT = getProcAddr("glGetUnsignedBytevEXT")
	gl.glGetUnsignedBytei_vEXT = getProcAddr("glGetUnsignedBytei_vEXT")
	gl.glDeleteMemoryObjectsEXT = getProcAddr("glDeleteMemoryObjectsEXT")
	gl.glIsMemoryObjectEXT = getProcAddr("glIsMemoryObjectEXT")
	gl.glCreateMemoryObjectsEXT = getProcAddr("glCreateMemoryObjectsEXT")
	gl.glMemoryObjectParameterivEXT = getProcAddr("glMemoryObjectParameterivEXT")
	gl.glGetMemoryObjectParameterivEXT = getProcAddr("glGetMemoryObjectParameterivEXT")
	gl.glTexStorageMem2DEXT = getProcAddr("glTexStorageMem2DEXT")
	gl.glTexStorageMem2DMultisampleEXT = getProcAddr("glTexStorageMem2DMultisampleEXT")
	gl.glTexStorageMem3DEXT = getProcAddr("glTexStorageMem3DEXT")
	gl.glTexStorageMem3DMultisampleEXT = getProcAddr("glTexStorageMem3DMultisampleEXT")
	gl.glBufferStorageMemEXT = getProcAddr("glBufferStorageMemEXT")
	gl.glTextureStorageMem2DEXT = getProcAddr("glTextureStorageMem2DEXT")
	gl.glTextureStorageMem2DMultisampleEXT = getProcAddr("glTextureStorageMem2DMultisampleEXT")
	gl.glTextureStorageMem3DEXT = getProcAddr("glTextureStorageMem3DEXT")
	gl.glTextureStorageMem3DMultisampleEXT = getProcAddr("glTextureStorageMem3DMultisampleEXT")
	gl.glNamedBufferStorageMemEXT = getProcAddr("glNamedBufferStorageMemEXT")
	gl.glTexStorageMem1DEXT = getProcAddr("glTexStorageMem1DEXT")
	gl.glTextureStorageMem1DEXT = getProcAddr("glTextureStorageMem1DEXT")
	gl.glImportMemoryFdEXT = getProcAddr("glImportMemoryFdEXT")
	gl.glImportMemoryWin32HandleEXT = getProcAddr("glImportMemoryWin32HandleEXT")
	gl.glImportMemoryWin32NameEXT = getProcAddr("glImportMemoryWin32NameEXT")
	gl.glMultiDrawArraysEXT = getProcAddr("glMultiDrawArraysEXT")
	gl.glMultiDrawElementsEXT = getProcAddr("glMultiDrawElementsEXT")
	gl.glSampleMaskEXT = getProcAddr("glSampleMaskEXT")
	gl.glSamplePatternEXT = getProcAddr("glSamplePatternEXT")
	gl.glColorTableEXT = getProcAddr("glColorTableEXT")
	gl.glGetColorTableEXT = getProcAddr("glGetColorTableEXT")
	gl.glGetColorTableParameterivEXT = getProcAddr("glGetColorTableParameterivEXT")
	gl.glGetColorTableParameterfvEXT = getProcAddr("glGetColorTableParameterfvEXT")
	gl.glPixelTransformParameteriEXT = getProcAddr("glPixelTransformParameteriEXT")
	gl.glPixelTransformParameterfEXT = getProcAddr("glPixelTransformParameterfEXT")
	gl.glPixelTransformParameterivEXT = getProcAddr("glPixelTransformParameterivEXT")
	gl.glPixelTransformParameterfvEXT = getProcAddr("glPixelTransformParameterfvEXT")
	gl.glGetPixelTransformParameterivEXT = getProcAddr("glGetPixelTransformParameterivEXT")
	gl.glGetPixelTransformParameterfvEXT = getProcAddr("glGetPixelTransformParameterfvEXT")
	gl.glPointParameterfEXT = getProcAddr("glPointParameterfEXT")
	gl.glPointParameterfvEXT = getProcAddr("glPointParameterfvEXT")
	gl.glPolygonOffsetEXT = getProcAddr("glPolygonOffsetEXT")
	gl.glPolygonOffsetClampEXT = getProcAddr("glPolygonOffsetClampEXT")
	gl.glProvokingVertexEXT = getProcAddr("glProvokingVertexEXT")
	gl.glRasterSamplesEXT = getProcAddr("glRasterSamplesEXT")
	gl.glGetUnsignedBytevEXT = getProcAddr("glGetUnsignedBytevEXT")
	gl.glGetUnsignedBytei_vEXT = getProcAddr("glGetUnsignedBytei_vEXT")
	gl.glGenSemaphoresEXT = getProcAddr("glGenSemaphoresEXT")
	gl.glDeleteSemaphoresEXT = getProcAddr("glDeleteSemaphoresEXT")
	gl.glIsSemaphoreEXT = getProcAddr("glIsSemaphoreEXT")
	gl.glSemaphoreParameterui64vEXT = getProcAddr("glSemaphoreParameterui64vEXT")
	gl.glGetSemaphoreParameterui64vEXT = getProcAddr("glGetSemaphoreParameterui64vEXT")
	gl.glWaitSemaphoreEXT = getProcAddr("glWaitSemaphoreEXT")
	gl.glSignalSemaphoreEXT = getProcAddr("glSignalSemaphoreEXT")
	gl.glImportSemaphoreFdEXT = getProcAddr("glImportSemaphoreFdEXT")
	gl.glImportSemaphoreWin32HandleEXT = getProcAddr("glImportSemaphoreWin32HandleEXT")
	gl.glImportSemaphoreWin32NameEXT = getProcAddr("glImportSemaphoreWin32NameEXT")
	gl.glSecondaryColor3bEXT = getProcAddr("glSecondaryColor3bEXT")
	gl.glSecondaryColor3bvEXT = getProcAddr("glSecondaryColor3bvEXT")
	gl.glSecondaryColor3dEXT = getProcAddr("glSecondaryColor3dEXT")
	gl.glSecondaryColor3dvEXT = getProcAddr("glSecondaryColor3dvEXT")
	gl.glSecondaryColor3fEXT = getProcAddr("glSecondaryColor3fEXT")
	gl.glSecondaryColor3fvEXT = getProcAddr("glSecondaryColor3fvEXT")
	gl.glSecondaryColor3iEXT = getProcAddr("glSecondaryColor3iEXT")
	gl.glSecondaryColor3ivEXT = getProcAddr("glSecondaryColor3ivEXT")
	gl.glSecondaryColor3sEXT = getProcAddr("glSecondaryColor3sEXT")
	gl.glSecondaryColor3svEXT = getProcAddr("glSecondaryColor3svEXT")
	gl.glSecondaryColor3ubEXT = getProcAddr("glSecondaryColor3ubEXT")
	gl.glSecondaryColor3ubvEXT = getProcAddr("glSecondaryColor3ubvEXT")
	gl.glSecondaryColor3uiEXT = getProcAddr("glSecondaryColor3uiEXT")
	gl.glSecondaryColor3uivEXT = getProcAddr("glSecondaryColor3uivEXT")
	gl.glSecondaryColor3usEXT = getProcAddr("glSecondaryColor3usEXT")
	gl.glSecondaryColor3usvEXT = getProcAddr("glSecondaryColor3usvEXT")
	gl.glSecondaryColorPointerEXT = getProcAddr("glSecondaryColorPointerEXT")
	gl.glUseShaderProgramEXT = getProcAddr("glUseShaderProgramEXT")
	gl.glActiveProgramEXT = getProcAddr("glActiveProgramEXT")
	gl.glCreateShaderProgramEXT = getProcAddr("glCreateShaderProgramEXT")
	gl.glActiveShaderProgramEXT = getProcAddr("glActiveShaderProgramEXT")
	gl.glBindProgramPipelineEXT = getProcAddr("glBindProgramPipelineEXT")
	gl.glCreateShaderProgramvEXT = getProcAddr("glCreateShaderProgramvEXT")
	gl.glDeleteProgramPipelinesEXT = getProcAddr("glDeleteProgramPipelinesEXT")
	gl.glGenProgramPipelinesEXT = getProcAddr("glGenProgramPipelinesEXT")
	gl.glGetProgramPipelineInfoLogEXT = getProcAddr("glGetProgramPipelineInfoLogEXT")
	gl.glGetProgramPipelineivEXT = getProcAddr("glGetProgramPipelineivEXT")
	gl.glIsProgramPipelineEXT = getProcAddr("glIsProgramPipelineEXT")
	gl.glProgramParameteriEXT = getProcAddr("glProgramParameteriEXT")
	gl.glProgramUniform1fEXT = getProcAddr("glProgramUniform1fEXT")
	gl.glProgramUniform1fvEXT = getProcAddr("glProgramUniform1fvEXT")
	gl.glProgramUniform1iEXT = getProcAddr("glProgramUniform1iEXT")
	gl.glProgramUniform1ivEXT = getProcAddr("glProgramUniform1ivEXT")
	gl.glProgramUniform2fEXT = getProcAddr("glProgramUniform2fEXT")
	gl.glProgramUniform2fvEXT = getProcAddr("glProgramUniform2fvEXT")
	gl.glProgramUniform2iEXT = getProcAddr("glProgramUniform2iEXT")
	gl.glProgramUniform2ivEXT = getProcAddr("glProgramUniform2ivEXT")
	gl.glProgramUniform3fEXT = getProcAddr("glProgramUniform3fEXT")
	gl.glProgramUniform3fvEXT = getProcAddr("glProgramUniform3fvEXT")
	gl.glProgramUniform3iEXT = getProcAddr("glProgramUniform3iEXT")
	gl.glProgramUniform3ivEXT = getProcAddr("glProgramUniform3ivEXT")
	gl.glProgramUniform4fEXT = getProcAddr("glProgramUniform4fEXT")
	gl.glProgramUniform4fvEXT = getProcAddr("glProgramUniform4fvEXT")
	gl.glProgramUniform4iEXT = getProcAddr("glProgramUniform4iEXT")
	gl.glProgramUniform4ivEXT = getProcAddr("glProgramUniform4ivEXT")
	gl.glProgramUniformMatrix2fvEXT = getProcAddr("glProgramUniformMatrix2fvEXT")
	gl.glProgramUniformMatrix3fvEXT = getProcAddr("glProgramUniformMatrix3fvEXT")
	gl.glProgramUniformMatrix4fvEXT = getProcAddr("glProgramUniformMatrix4fvEXT")
	gl.glUseProgramStagesEXT = getProcAddr("glUseProgramStagesEXT")
	gl.glValidateProgramPipelineEXT = getProcAddr("glValidateProgramPipelineEXT")
	gl.glProgramUniform1uiEXT = getProcAddr("glProgramUniform1uiEXT")
	gl.glProgramUniform2uiEXT = getProcAddr("glProgramUniform2uiEXT")
	gl.glProgramUniform3uiEXT = getProcAddr("glProgramUniform3uiEXT")
	gl.glProgramUniform4uiEXT = getProcAddr("glProgramUniform4uiEXT")
	gl.glProgramUniform1uivEXT = getProcAddr("glProgramUniform1uivEXT")
	gl.glProgramUniform2uivEXT = getProcAddr("glProgramUniform2uivEXT")
	gl.glProgramUniform3uivEXT = getProcAddr("glProgramUniform3uivEXT")
	gl.glProgramUniform4uivEXT = getProcAddr("glProgramUniform4uivEXT")
	gl.glProgramUniformMatrix2x3fvEXT = getProcAddr("glProgramUniformMatrix2x3fvEXT")
	gl.glProgramUniformMatrix3x2fvEXT = getProcAddr("glProgramUniformMatrix3x2fvEXT")
	gl.glProgramUniformMatrix2x4fvEXT = getProcAddr("glProgramUniformMatrix2x4fvEXT")
	gl.glProgramUniformMatrix4x2fvEXT = getProcAddr("glProgramUniformMatrix4x2fvEXT")
	gl.glProgramUniformMatrix3x4fvEXT = getProcAddr("glProgramUniformMatrix3x4fvEXT")
	gl.glProgramUniformMatrix4x3fvEXT = getProcAddr("glProgramUniformMatrix4x3fvEXT")
	gl.glFramebufferFetchBarrierEXT = getProcAddr("glFramebufferFetchBarrierEXT")
	gl.glBindImageTextureEXT = getProcAddr("glBindImageTextureEXT")
	gl.glMemoryBarrierEXT = getProcAddr("glMemoryBarrierEXT")
	gl.glStencilClearTagEXT = getProcAddr("glStencilClearTagEXT")
	gl.glActiveStencilFaceEXT = getProcAddr("glActiveStencilFaceEXT")
	gl.glTexSubImage1DEXT = getProcAddr("glTexSubImage1DEXT")
	gl.glTexSubImage2DEXT = getProcAddr("glTexSubImage2DEXT")
	gl.glTexImage3DEXT = getProcAddr("glTexImage3DEXT")
	gl.glTexSubImage3DEXT = getProcAddr("glTexSubImage3DEXT")
	gl.glFramebufferTextureLayerEXT = getProcAddr("glFramebufferTextureLayerEXT")
	gl.glTexBufferEXT = getProcAddr("glTexBufferEXT")
	gl.glTexParameterIivEXT = getProcAddr("glTexParameterIivEXT")
	gl.glTexParameterIuivEXT = getProcAddr("glTexParameterIuivEXT")
	gl.glGetTexParameterIivEXT = getProcAddr("glGetTexParameterIivEXT")
	gl.glGetTexParameterIuivEXT = getProcAddr("glGetTexParameterIuivEXT")
	gl.glClearColorIiEXT = getProcAddr("glClearColorIiEXT")
	gl.glClearColorIuiEXT = getProcAddr("glClearColorIuiEXT")
	gl.glAreTexturesResidentEXT = getProcAddr("glAreTexturesResidentEXT")
	gl.glBindTextureEXT = getProcAddr("glBindTextureEXT")
	gl.glDeleteTexturesEXT = getProcAddr("glDeleteTexturesEXT")
	gl.glGenTexturesEXT = getProcAddr("glGenTexturesEXT")
	gl.glIsTextureEXT = getProcAddr("glIsTextureEXT")
	gl.glPrioritizeTexturesEXT = getProcAddr("glPrioritizeTexturesEXT")
	gl.glTextureNormalEXT = getProcAddr("glTextureNormalEXT")
	gl.glCreateSemaphoresNV = getProcAddr("glCreateSemaphoresNV")
	gl.glSemaphoreParameterivNV = getProcAddr("glSemaphoreParameterivNV")
	gl.glGetSemaphoreParameterivNV = getProcAddr("glGetSemaphoreParameterivNV")
	gl.glGetQueryObjecti64vEXT = getProcAddr("glGetQueryObjecti64vEXT")
	gl.glGetQueryObjectui64vEXT = getProcAddr("glGetQueryObjectui64vEXT")
	gl.glBeginTransformFeedbackEXT = getProcAddr("glBeginTransformFeedbackEXT")
	gl.glEndTransformFeedbackEXT = getProcAddr("glEndTransformFeedbackEXT")
	gl.glBindBufferRangeEXT = getProcAddr("glBindBufferRangeEXT")
	gl.glBindBufferOffsetEXT = getProcAddr("glBindBufferOffsetEXT")
	gl.glBindBufferBaseEXT = getProcAddr("glBindBufferBaseEXT")
	gl.glTransformFeedbackVaryingsEXT = getProcAddr("glTransformFeedbackVaryingsEXT")
	gl.glGetTransformFeedbackVaryingEXT = getProcAddr("glGetTransformFeedbackVaryingEXT")
	gl.glArrayElementEXT = getProcAddr("glArrayElementEXT")
	gl.glColorPointerEXT = getProcAddr("glColorPointerEXT")
	gl.glDrawArraysEXT = getProcAddr("glDrawArraysEXT")
	gl.glEdgeFlagPointerEXT = getProcAddr("glEdgeFlagPointerEXT")
	gl.glGetPointervEXT = getProcAddr("glGetPointervEXT")
	gl.glIndexPointerEXT = getProcAddr("glIndexPointerEXT")
	gl.glNormalPointerEXT = getProcAddr("glNormalPointerEXT")
	gl.glTexCoordPointerEXT = getProcAddr("glTexCoordPointerEXT")
	gl.glVertexPointerEXT = getProcAddr("glVertexPointerEXT")
	gl.glVertexAttribL1dEXT = getProcAddr("glVertexAttribL1dEXT")
	gl.glVertexAttribL2dEXT = getProcAddr("glVertexAttribL2dEXT")
	gl.glVertexAttribL3dEXT = getProcAddr("glVertexAttribL3dEXT")
	gl.glVertexAttribL4dEXT = getProcAddr("glVertexAttribL4dEXT")
	gl.glVertexAttribL1dvEXT = getProcAddr("glVertexAttribL1dvEXT")
	gl.glVertexAttribL2dvEXT = getProcAddr("glVertexAttribL2dvEXT")
	gl.glVertexAttribL3dvEXT = getProcAddr("glVertexAttribL3dvEXT")
	gl.glVertexAttribL4dvEXT = getProcAddr("glVertexAttribL4dvEXT")
	gl.glVertexAttribLPointerEXT = getProcAddr("glVertexAttribLPointerEXT")
	gl.glGetVertexAttribLdvEXT = getProcAddr("glGetVertexAttribLdvEXT")
	gl.glBeginVertexShaderEXT = getProcAddr("glBeginVertexShaderEXT")
	gl.glEndVertexShaderEXT = getProcAddr("glEndVertexShaderEXT")
	gl.glBindVertexShaderEXT = getProcAddr("glBindVertexShaderEXT")
	gl.glGenVertexShadersEXT = getProcAddr("glGenVertexShadersEXT")
	gl.glDeleteVertexShaderEXT = getProcAddr("glDeleteVertexShaderEXT")
	gl.glShaderOp1EXT = getProcAddr("glShaderOp1EXT")
	gl.glShaderOp2EXT = getProcAddr("glShaderOp2EXT")
	gl.glShaderOp3EXT = getProcAddr("glShaderOp3EXT")
	gl.glSwizzleEXT = getProcAddr("glSwizzleEXT")
	gl.glWriteMaskEXT = getProcAddr("glWriteMaskEXT")
	gl.glInsertComponentEXT = getProcAddr("glInsertComponentEXT")
	gl.glExtractComponentEXT = getProcAddr("glExtractComponentEXT")
	gl.glGenSymbolsEXT = getProcAddr("glGenSymbolsEXT")
	gl.glSetInvariantEXT = getProcAddr("glSetInvariantEXT")
	gl.glSetLocalConstantEXT = getProcAddr("glSetLocalConstantEXT")
	gl.glVariantbvEXT = getProcAddr("glVariantbvEXT")
	gl.glVariantsvEXT = getProcAddr("glVariantsvEXT")
	gl.glVariantivEXT = getProcAddr("glVariantivEXT")
	gl.glVariantfvEXT = getProcAddr("glVariantfvEXT")
	gl.glVariantdvEXT = getProcAddr("glVariantdvEXT")
	gl.glVariantubvEXT = getProcAddr("glVariantubvEXT")
	gl.glVariantusvEXT = getProcAddr("glVariantusvEXT")
	gl.glVariantuivEXT = getProcAddr("glVariantuivEXT")
	gl.glVariantPointerEXT = getProcAddr("glVariantPointerEXT")
	gl.glEnableVariantClientStateEXT = getProcAddr("glEnableVariantClientStateEXT")
	gl.glDisableVariantClientStateEXT = getProcAddr("glDisableVariantClientStateEXT")
	gl.glBindLightParameterEXT = getProcAddr("glBindLightParameterEXT")
	gl.glBindMaterialParameterEXT = getProcAddr("glBindMaterialParameterEXT")
	gl.glBindTexGenParameterEXT = getProcAddr("glBindTexGenParameterEXT")
	gl.glBindTextureUnitParameterEXT = getProcAddr("glBindTextureUnitParameterEXT")
	gl.glBindParameterEXT = getProcAddr("glBindParameterEXT")
	gl.glIsVariantEnabledEXT = getProcAddr("glIsVariantEnabledEXT")
	gl.glGetVariantBooleanvEXT = getProcAddr("glGetVariantBooleanvEXT")
	gl.glGetVariantIntegervEXT = getProcAddr("glGetVariantIntegervEXT")
	gl.glGetVariantFloatvEXT = getProcAddr("glGetVariantFloatvEXT")
	gl.glGetVariantPointervEXT = getProcAddr("glGetVariantPointervEXT")
	gl.glGetInvariantBooleanvEXT = getProcAddr("glGetInvariantBooleanvEXT")
	gl.glGetInvariantIntegervEXT = getProcAddr("glGetInvariantIntegervEXT")
	gl.glGetInvariantFloatvEXT = getProcAddr("glGetInvariantFloatvEXT")
	gl.glGetLocalConstantBooleanvEXT = getProcAddr("glGetLocalConstantBooleanvEXT")
	gl.glGetLocalConstantIntegervEXT = getProcAddr("glGetLocalConstantIntegervEXT")
	gl.glGetLocalConstantFloatvEXT = getProcAddr("glGetLocalConstantFloatvEXT")
	gl.glVertexWeightfEXT = getProcAddr("glVertexWeightfEXT")
	gl.glVertexWeightfvEXT = getProcAddr("glVertexWeightfvEXT")
	gl.glVertexWeightPointerEXT = getProcAddr("glVertexWeightPointerEXT")
	gl.glAcquireKeyedMutexWin32EXT = getProcAddr("glAcquireKeyedMutexWin32EXT")
	gl.glReleaseKeyedMutexWin32EXT = getProcAddr("glReleaseKeyedMutexWin32EXT")
	gl.glWindowRectanglesEXT = getProcAddr("glWindowRectanglesEXT")
	gl.glImportSyncEXT = getProcAddr("glImportSyncEXT")
	gl.glFrameTerminatorGREMEDY = getProcAddr("glFrameTerminatorGREMEDY")
	gl.glStringMarkerGREMEDY = getProcAddr("glStringMarkerGREMEDY")
	gl.glImageTransformParameteriHP = getProcAddr("glImageTransformParameteriHP")
	gl.glImageTransformParameterfHP = getProcAddr("glImageTransformParameterfHP")
	gl.glImageTransformParameterivHP = getProcAddr("glImageTransformParameterivHP")
	gl.glImageTransformParameterfvHP = getProcAddr("glImageTransformParameterfvHP")
	gl.glGetImageTransformParameterivHP = getProcAddr("glGetImageTransformParameterivHP")
	gl.glGetImageTransformParameterfvHP = getProcAddr("glGetImageTransformParameterfvHP")
	gl.glMultiModeDrawArraysIBM = getProcAddr("glMultiModeDrawArraysIBM")
	gl.glMultiModeDrawElementsIBM = getProcAddr("glMultiModeDrawElementsIBM")
	gl.glFlushStaticDataIBM = getProcAddr("glFlushStaticDataIBM")
	gl.glColorPointerListIBM = getProcAddr("glColorPointerListIBM")
	gl.glSecondaryColorPointerListIBM = getProcAddr("glSecondaryColorPointerListIBM")
	gl.glEdgeFlagPointerListIBM = getProcAddr("glEdgeFlagPointerListIBM")
	gl.glFogCoordPointerListIBM = getProcAddr("glFogCoordPointerListIBM")
	gl.glIndexPointerListIBM = getProcAddr("glIndexPointerListIBM")
	gl.glNormalPointerListIBM = getProcAddr("glNormalPointerListIBM")
	gl.glTexCoordPointerListIBM = getProcAddr("glTexCoordPointerListIBM")
	gl.glVertexPointerListIBM = getProcAddr("glVertexPointerListIBM")
	gl.glBlendFuncSeparateINGR = getProcAddr("glBlendFuncSeparateINGR")
	gl.glApplyFramebufferAttachmentCMAAINTEL = getProcAddr("glApplyFramebufferAttachmentCMAAINTEL")
	gl.glSyncTextureINTEL = getProcAddr("glSyncTextureINTEL")
	gl.glUnmapTexture2DINTEL = getProcAddr("glUnmapTexture2DINTEL")
	gl.glMapTexture2DINTEL = getProcAddr("glMapTexture2DINTEL")
	gl.glVertexPointervINTEL = getProcAddr("glVertexPointervINTEL")
	gl.glNormalPointervINTEL = getProcAddr("glNormalPointervINTEL")
	gl.glColorPointervINTEL = getProcAddr("glColorPointervINTEL")
	gl.glTexCoordPointervINTEL = getProcAddr("glTexCoordPointervINTEL")
	gl.glBeginPerfQueryINTEL = getProcAddr("glBeginPerfQueryINTEL")
	gl.glCreatePerfQueryINTEL = getProcAddr("glCreatePerfQueryINTEL")
	gl.glDeletePerfQueryINTEL = getProcAddr("glDeletePerfQueryINTEL")
	gl.glEndPerfQueryINTEL = getProcAddr("glEndPerfQueryINTEL")
	gl.glGetFirstPerfQueryIdINTEL = getProcAddr("glGetFirstPerfQueryIdINTEL")
	gl.glGetNextPerfQueryIdINTEL = getProcAddr("glGetNextPerfQueryIdINTEL")
	gl.glGetPerfCounterInfoINTEL = getProcAddr("glGetPerfCounterInfoINTEL")
	gl.glGetPerfQueryDataINTEL = getProcAddr("glGetPerfQueryDataINTEL")
	gl.glGetPerfQueryIdByNameINTEL = getProcAddr("glGetPerfQueryIdByNameINTEL")
	gl.glGetPerfQueryInfoINTEL = getProcAddr("glGetPerfQueryInfoINTEL")
	gl.glBlendBarrierKHR = getProcAddr("glBlendBarrierKHR")
	gl.glDebugMessageControl = getProcAddr("glDebugMessageControl")
	gl.glDebugMessageInsert = getProcAddr("glDebugMessageInsert")
	gl.glDebugMessageCallback = getProcAddr("glDebugMessageCallback")
	gl.glGetDebugMessageLog = getProcAddr("glGetDebugMessageLog")
	gl.glPushDebugGroup = getProcAddr("glPushDebugGroup")
	gl.glPopDebugGroup = getProcAddr("glPopDebugGroup")
	gl.glObjectLabel = getProcAddr("glObjectLabel")
	gl.glGetObjectLabel = getProcAddr("glGetObjectLabel")
	gl.glObjectPtrLabel = getProcAddr("glObjectPtrLabel")
	gl.glGetObjectPtrLabel = getProcAddr("glGetObjectPtrLabel")
	gl.glGetPointerv = getProcAddr("glGetPointerv")
	gl.glDebugMessageControlKHR = getProcAddr("glDebugMessageControlKHR")
	gl.glDebugMessageInsertKHR = getProcAddr("glDebugMessageInsertKHR")
	gl.glDebugMessageCallbackKHR = getProcAddr("glDebugMessageCallbackKHR")
	gl.glGetDebugMessageLogKHR = getProcAddr("glGetDebugMessageLogKHR")
	gl.glPushDebugGroupKHR = getProcAddr("glPushDebugGroupKHR")
	gl.glPopDebugGroupKHR = getProcAddr("glPopDebugGroupKHR")
	gl.glObjectLabelKHR = getProcAddr("glObjectLabelKHR")
	gl.glGetObjectLabelKHR = getProcAddr("glGetObjectLabelKHR")
	gl.glObjectPtrLabelKHR = getProcAddr("glObjectPtrLabelKHR")
	gl.glGetObjectPtrLabelKHR = getProcAddr("glGetObjectPtrLabelKHR")
	gl.glGetPointervKHR = getProcAddr("glGetPointervKHR")
	gl.glGetGraphicsResetStatus = getProcAddr("glGetGraphicsResetStatus")
	gl.glReadnPixels = getProcAddr("glReadnPixels")
	gl.glGetnUniformfv = getProcAddr("glGetnUniformfv")
	gl.glGetnUniformiv = getProcAddr("glGetnUniformiv")
	gl.glGetnUniformuiv = getProcAddr("glGetnUniformuiv")
	gl.glGetGraphicsResetStatusKHR = getProcAddr("glGetGraphicsResetStatusKHR")
	gl.glReadnPixelsKHR = getProcAddr("glReadnPixelsKHR")
	gl.glGetnUniformfvKHR = getProcAddr("glGetnUniformfvKHR")
	gl.glGetnUniformivKHR = getProcAddr("glGetnUniformivKHR")
	gl.glGetnUniformuivKHR = getProcAddr("glGetnUniformuivKHR")
	gl.glMaxShaderCompilerThreadsKHR = getProcAddr("glMaxShaderCompilerThreadsKHR")
	gl.glFramebufferParameteriMESA = getProcAddr("glFramebufferParameteriMESA")
	gl.glGetFramebufferParameterivMESA = getProcAddr("glGetFramebufferParameterivMESA")
	gl.glResizeBuffersMESA = getProcAddr("glResizeBuffersMESA")
	gl.glWindowPos2dMESA = getProcAddr("glWindowPos2dMESA")
	gl.glWindowPos2dvMESA = getProcAddr("glWindowPos2dvMESA")
	gl.glWindowPos2fMESA = getProcAddr("glWindowPos2fMESA")
	gl.glWindowPos2fvMESA = getProcAddr("glWindowPos2fvMESA")
	gl.glWindowPos2iMESA = getProcAddr("glWindowPos2iMESA")
	gl.glWindowPos2ivMESA = getProcAddr("glWindowPos2ivMESA")
	gl.glWindowPos2sMESA = getProcAddr("glWindowPos2sMESA")
	gl.glWindowPos2svMESA = getProcAddr("glWindowPos2svMESA")
	gl.glWindowPos3dMESA = getProcAddr("glWindowPos3dMESA")
	gl.glWindowPos3dvMESA = getProcAddr("glWindowPos3dvMESA")
	gl.glWindowPos3fMESA = getProcAddr("glWindowPos3fMESA")
	gl.glWindowPos3fvMESA = getProcAddr("glWindowPos3fvMESA")
	gl.glWindowPos3iMESA = getProcAddr("glWindowPos3iMESA")
	gl.glWindowPos3ivMESA = getProcAddr("glWindowPos3ivMESA")
	gl.glWindowPos3sMESA = getProcAddr("glWindowPos3sMESA")
	gl.glWindowPos3svMESA = getProcAddr("glWindowPos3svMESA")
	gl.glWindowPos4dMESA = getProcAddr("glWindowPos4dMESA")
	gl.glWindowPos4dvMESA = getProcAddr("glWindowPos4dvMESA")
	gl.glWindowPos4fMESA = getProcAddr("glWindowPos4fMESA")
	gl.glWindowPos4fvMESA = getProcAddr("glWindowPos4fvMESA")
	gl.glWindowPos4iMESA = getProcAddr("glWindowPos4iMESA")
	gl.glWindowPos4ivMESA = getProcAddr("glWindowPos4ivMESA")
	gl.glWindowPos4sMESA = getProcAddr("glWindowPos4sMESA")
	gl.glWindowPos4svMESA = getProcAddr("glWindowPos4svMESA")
	gl.glBeginConditionalRenderNVX = getProcAddr("glBeginConditionalRenderNVX")
	gl.glEndConditionalRenderNVX = getProcAddr("glEndConditionalRenderNVX")
	gl.glLGPUNamedBufferSubDataNVX = getProcAddr("glLGPUNamedBufferSubDataNVX")
	gl.glLGPUCopyImageSubDataNVX = getProcAddr("glLGPUCopyImageSubDataNVX")
	gl.glLGPUInterlockNVX = getProcAddr("glLGPUInterlockNVX")
	gl.glAlphaToCoverageDitherControlNV = getProcAddr("glAlphaToCoverageDitherControlNV")
	gl.glMultiDrawArraysIndirectBindlessNV = getProcAddr("glMultiDrawArraysIndirectBindlessNV")
	gl.glMultiDrawElementsIndirectBindlessNV = getProcAddr("glMultiDrawElementsIndirectBindlessNV")
	gl.glMultiDrawArraysIndirectBindlessCountNV = getProcAddr("glMultiDrawArraysIndirectBindlessCountNV")
	gl.glMultiDrawElementsIndirectBindlessCountNV = getProcAddr("glMultiDrawElementsIndirectBindlessCountNV")
	gl.glGetTextureHandleNV = getProcAddr("glGetTextureHandleNV")
	gl.glGetTextureSamplerHandleNV = getProcAddr("glGetTextureSamplerHandleNV")
	gl.glMakeTextureHandleResidentNV = getProcAddr("glMakeTextureHandleResidentNV")
	gl.glMakeTextureHandleNonResidentNV = getProcAddr("glMakeTextureHandleNonResidentNV")
	gl.glGetImageHandleNV = getProcAddr("glGetImageHandleNV")
	gl.glMakeImageHandleResidentNV = getProcAddr("glMakeImageHandleResidentNV")
	gl.glMakeImageHandleNonResidentNV = getProcAddr("glMakeImageHandleNonResidentNV")
	gl.glUniformHandleui64NV = getProcAddr("glUniformHandleui64NV")
	gl.glUniformHandleui64vNV = getProcAddr("glUniformHandleui64vNV")
	gl.glProgramUniformHandleui64NV = getProcAddr("glProgramUniformHandleui64NV")
	gl.glProgramUniformHandleui64vNV = getProcAddr("glProgramUniformHandleui64vNV")
	gl.glIsTextureHandleResidentNV = getProcAddr("glIsTextureHandleResidentNV")
	gl.glIsImageHandleResidentNV = getProcAddr("glIsImageHandleResidentNV")
	gl.glBlendParameteriNV = getProcAddr("glBlendParameteriNV")
	gl.glBlendBarrierNV = getProcAddr("glBlendBarrierNV")
	gl.glViewportPositionWScaleNV = getProcAddr("glViewportPositionWScaleNV")
	gl.glCreateStatesNV = getProcAddr("glCreateStatesNV")
	gl.glDeleteStatesNV = getProcAddr("glDeleteStatesNV")
	gl.glIsStateNV = getProcAddr("glIsStateNV")
	gl.glStateCaptureNV = getProcAddr("glStateCaptureNV")
	gl.glGetCommandHeaderNV = getProcAddr("glGetCommandHeaderNV")
	gl.glGetStageIndexNV = getProcAddr("glGetStageIndexNV")
	gl.glDrawCommandsNV = getProcAddr("glDrawCommandsNV")
	gl.glDrawCommandsAddressNV = getProcAddr("glDrawCommandsAddressNV")
	gl.glDrawCommandsStatesNV = getProcAddr("glDrawCommandsStatesNV")
	gl.glDrawCommandsStatesAddressNV = getProcAddr("glDrawCommandsStatesAddressNV")
	gl.glCreateCommandListsNV = getProcAddr("glCreateCommandListsNV")
	gl.glDeleteCommandListsNV = getProcAddr("glDeleteCommandListsNV")
	gl.glIsCommandListNV = getProcAddr("glIsCommandListNV")
	gl.glListDrawCommandsStatesClientNV = getProcAddr("glListDrawCommandsStatesClientNV")
	gl.glCommandListSegmentsNV = getProcAddr("glCommandListSegmentsNV")
	gl.glCompileCommandListNV = getProcAddr("glCompileCommandListNV")
	gl.glCallCommandListNV = getProcAddr("glCallCommandListNV")
	gl.glBeginConditionalRenderNV = getProcAddr("glBeginConditionalRenderNV")
	gl.glEndConditionalRenderNV = getProcAddr("glEndConditionalRenderNV")
	gl.glSubpixelPrecisionBiasNV = getProcAddr("glSubpixelPrecisionBiasNV")
	gl.glConservativeRasterParameterfNV = getProcAddr("glConservativeRasterParameterfNV")
	gl.glConservativeRasterParameteriNV = getProcAddr("glConservativeRasterParameteriNV")
	gl.glCopyImageSubDataNV = getProcAddr("glCopyImageSubDataNV")
	gl.glDepthRangedNV = getProcAddr("glDepthRangedNV")
	gl.glClearDepthdNV = getProcAddr("glClearDepthdNV")
	gl.glDepthBoundsdNV = getProcAddr("glDepthBoundsdNV")
	gl.glDrawTextureNV = getProcAddr("glDrawTextureNV")
	gl.glDrawVkImageNV = getProcAddr("glDrawVkImageNV")
	gl.glWaitVkSemaphoreNV = getProcAddr("glWaitVkSemaphoreNV")
	gl.glSignalVkSemaphoreNV = getProcAddr("glSignalVkSemaphoreNV")
	gl.glSignalVkFenceNV = getProcAddr("glSignalVkFenceNV")
	gl.glMapControlPointsNV = getProcAddr("glMapControlPointsNV")
	gl.glMapParameterivNV = getProcAddr("glMapParameterivNV")
	gl.glMapParameterfvNV = getProcAddr("glMapParameterfvNV")
	gl.glGetMapControlPointsNV = getProcAddr("glGetMapControlPointsNV")
	gl.glGetMapParameterivNV = getProcAddr("glGetMapParameterivNV")
	gl.glGetMapParameterfvNV = getProcAddr("glGetMapParameterfvNV")
	gl.glGetMapAttribParameterivNV = getProcAddr("glGetMapAttribParameterivNV")
	gl.glGetMapAttribParameterfvNV = getProcAddr("glGetMapAttribParameterfvNV")
	gl.glEvalMapsNV = getProcAddr("glEvalMapsNV")
	gl.glGetMultisamplefvNV = getProcAddr("glGetMultisamplefvNV")
	gl.glSampleMaskIndexedNV = getProcAddr("glSampleMaskIndexedNV")
	gl.glTexRenderbufferNV = getProcAddr("glTexRenderbufferNV")
	gl.glDeleteFencesNV = getProcAddr("glDeleteFencesNV")
	gl.glGenFencesNV = getProcAddr("glGenFencesNV")
	gl.glIsFenceNV = getProcAddr("glIsFenceNV")
	gl.glTestFenceNV = getProcAddr("glTestFenceNV")
	gl.glGetFenceivNV = getProcAddr("glGetFenceivNV")
	gl.glFinishFenceNV = getProcAddr("glFinishFenceNV")
	gl.glSetFenceNV = getProcAddr("glSetFenceNV")
	gl.glFragmentCoverageColorNV = getProcAddr("glFragmentCoverageColorNV")
	gl.glProgramNamedParameter4fNV = getProcAddr("glProgramNamedParameter4fNV")
	gl.glProgramNamedParameter4fvNV = getProcAddr("glProgramNamedParameter4fvNV")
	gl.glProgramNamedParameter4dNV = getProcAddr("glProgramNamedParameter4dNV")
	gl.glProgramNamedParameter4dvNV = getProcAddr("glProgramNamedParameter4dvNV")
	gl.glGetProgramNamedParameterfvNV = getProcAddr("glGetProgramNamedParameterfvNV")
	gl.glGetProgramNamedParameterdvNV = getProcAddr("glGetProgramNamedParameterdvNV")
	gl.glRasterSamplesEXT = getProcAddr("glRasterSamplesEXT")
	gl.glCoverageModulationTableNV = getProcAddr("glCoverageModulationTableNV")
	gl.glGetCoverageModulationTableNV = getProcAddr("glGetCoverageModulationTableNV")
	gl.glCoverageModulationNV = getProcAddr("glCoverageModulationNV")
	gl.glRenderbufferStorageMultisampleCoverageNV = getProcAddr("glRenderbufferStorageMultisampleCoverageNV")
	gl.glProgramVertexLimitNV = getProcAddr("glProgramVertexLimitNV")
	gl.glFramebufferTextureEXT = getProcAddr("glFramebufferTextureEXT")
	gl.glFramebufferTextureLayerEXT = getProcAddr("glFramebufferTextureLayerEXT")
	gl.glFramebufferTextureFaceEXT = getProcAddr("glFramebufferTextureFaceEXT")
	gl.glProgramLocalParameterI4iNV = getProcAddr("glProgramLocalParameterI4iNV")
	gl.glProgramLocalParameterI4ivNV = getProcAddr("glProgramLocalParameterI4ivNV")
	gl.glProgramLocalParametersI4ivNV = getProcAddr("glProgramLocalParametersI4ivNV")
	gl.glProgramLocalParameterI4uiNV = getProcAddr("glProgramLocalParameterI4uiNV")
	gl.glProgramLocalParameterI4uivNV = getProcAddr("glProgramLocalParameterI4uivNV")
	gl.glProgramLocalParametersI4uivNV = getProcAddr("glProgramLocalParametersI4uivNV")
	gl.glProgramEnvParameterI4iNV = getProcAddr("glProgramEnvParameterI4iNV")
	gl.glProgramEnvParameterI4ivNV = getProcAddr("glProgramEnvParameterI4ivNV")
	gl.glProgramEnvParametersI4ivNV = getProcAddr("glProgramEnvParametersI4ivNV")
	gl.glProgramEnvParameterI4uiNV = getProcAddr("glProgramEnvParameterI4uiNV")
	gl.glProgramEnvParameterI4uivNV = getProcAddr("glProgramEnvParameterI4uivNV")
	gl.glProgramEnvParametersI4uivNV = getProcAddr("glProgramEnvParametersI4uivNV")
	gl.glGetProgramLocalParameterIivNV = getProcAddr("glGetProgramLocalParameterIivNV")
	gl.glGetProgramLocalParameterIuivNV = getProcAddr("glGetProgramLocalParameterIuivNV")
	gl.glGetProgramEnvParameterIivNV = getProcAddr("glGetProgramEnvParameterIivNV")
	gl.glGetProgramEnvParameterIuivNV = getProcAddr("glGetProgramEnvParameterIuivNV")
	gl.glProgramSubroutineParametersuivNV = getProcAddr("glProgramSubroutineParametersuivNV")
	gl.glGetProgramSubroutineParameteruivNV = getProcAddr("glGetProgramSubroutineParameteruivNV")
	gl.glUniform1i64NV = getProcAddr("glUniform1i64NV")
	gl.glUniform2i64NV = getProcAddr("glUniform2i64NV")
	gl.glUniform3i64NV = getProcAddr("glUniform3i64NV")
	gl.glUniform4i64NV = getProcAddr("glUniform4i64NV")
	gl.glUniform1i64vNV = getProcAddr("glUniform1i64vNV")
	gl.glUniform2i64vNV = getProcAddr("glUniform2i64vNV")
	gl.glUniform3i64vNV = getProcAddr("glUniform3i64vNV")
	gl.glUniform4i64vNV = getProcAddr("glUniform4i64vNV")
	gl.glUniform1ui64NV = getProcAddr("glUniform1ui64NV")
	gl.glUniform2ui64NV = getProcAddr("glUniform2ui64NV")
	gl.glUniform3ui64NV = getProcAddr("glUniform3ui64NV")
	gl.glUniform4ui64NV = getProcAddr("glUniform4ui64NV")
	gl.glUniform1ui64vNV = getProcAddr("glUniform1ui64vNV")
	gl.glUniform2ui64vNV = getProcAddr("glUniform2ui64vNV")
	gl.glUniform3ui64vNV = getProcAddr("glUniform3ui64vNV")
	gl.glUniform4ui64vNV = getProcAddr("glUniform4ui64vNV")
	gl.glGetUniformi64vNV = getProcAddr("glGetUniformi64vNV")
	gl.glProgramUniform1i64NV = getProcAddr("glProgramUniform1i64NV")
	gl.glProgramUniform2i64NV = getProcAddr("glProgramUniform2i64NV")
	gl.glProgramUniform3i64NV = getProcAddr("glProgramUniform3i64NV")
	gl.glProgramUniform4i64NV = getProcAddr("glProgramUniform4i64NV")
	gl.glProgramUniform1i64vNV = getProcAddr("glProgramUniform1i64vNV")
	gl.glProgramUniform2i64vNV = getProcAddr("glProgramUniform2i64vNV")
	gl.glProgramUniform3i64vNV = getProcAddr("glProgramUniform3i64vNV")
	gl.glProgramUniform4i64vNV = getProcAddr("glProgramUniform4i64vNV")
	gl.glProgramUniform1ui64NV = getProcAddr("glProgramUniform1ui64NV")
	gl.glProgramUniform2ui64NV = getProcAddr("glProgramUniform2ui64NV")
	gl.glProgramUniform3ui64NV = getProcAddr("glProgramUniform3ui64NV")
	gl.glProgramUniform4ui64NV = getProcAddr("glProgramUniform4ui64NV")
	gl.glProgramUniform1ui64vNV = getProcAddr("glProgramUniform1ui64vNV")
	gl.glProgramUniform2ui64vNV = getProcAddr("glProgramUniform2ui64vNV")
	gl.glProgramUniform3ui64vNV = getProcAddr("glProgramUniform3ui64vNV")
	gl.glProgramUniform4ui64vNV = getProcAddr("glProgramUniform4ui64vNV")
	gl.glVertex2hNV = getProcAddr("glVertex2hNV")
	gl.glVertex2hvNV = getProcAddr("glVertex2hvNV")
	gl.glVertex3hNV = getProcAddr("glVertex3hNV")
	gl.glVertex3hvNV = getProcAddr("glVertex3hvNV")
	gl.glVertex4hNV = getProcAddr("glVertex4hNV")
	gl.glVertex4hvNV = getProcAddr("glVertex4hvNV")
	gl.glNormal3hNV = getProcAddr("glNormal3hNV")
	gl.glNormal3hvNV = getProcAddr("glNormal3hvNV")
	gl.glColor3hNV = getProcAddr("glColor3hNV")
	gl.glColor3hvNV = getProcAddr("glColor3hvNV")
	gl.glColor4hNV = getProcAddr("glColor4hNV")
	gl.glColor4hvNV = getProcAddr("glColor4hvNV")
	gl.glTexCoord1hNV = getProcAddr("glTexCoord1hNV")
	gl.glTexCoord1hvNV = getProcAddr("glTexCoord1hvNV")
	gl.glTexCoord2hNV = getProcAddr("glTexCoord2hNV")
	gl.glTexCoord2hvNV = getProcAddr("glTexCoord2hvNV")
	gl.glTexCoord3hNV = getProcAddr("glTexCoord3hNV")
	gl.glTexCoord3hvNV = getProcAddr("glTexCoord3hvNV")
	gl.glTexCoord4hNV = getProcAddr("glTexCoord4hNV")
	gl.glTexCoord4hvNV = getProcAddr("glTexCoord4hvNV")
	gl.glMultiTexCoord1hNV = getProcAddr("glMultiTexCoord1hNV")
	gl.glMultiTexCoord1hvNV = getProcAddr("glMultiTexCoord1hvNV")
	gl.glMultiTexCoord2hNV = getProcAddr("glMultiTexCoord2hNV")
	gl.glMultiTexCoord2hvNV = getProcAddr("glMultiTexCoord2hvNV")
	gl.glMultiTexCoord3hNV = getProcAddr("glMultiTexCoord3hNV")
	gl.glMultiTexCoord3hvNV = getProcAddr("glMultiTexCoord3hvNV")
	gl.glMultiTexCoord4hNV = getProcAddr("glMultiTexCoord4hNV")
	gl.glMultiTexCoord4hvNV = getProcAddr("glMultiTexCoord4hvNV")
	gl.glFogCoordhNV = getProcAddr("glFogCoordhNV")
	gl.glFogCoordhvNV = getProcAddr("glFogCoordhvNV")
	gl.glSecondaryColor3hNV = getProcAddr("glSecondaryColor3hNV")
	gl.glSecondaryColor3hvNV = getProcAddr("glSecondaryColor3hvNV")
	gl.glVertexWeighthNV = getProcAddr("glVertexWeighthNV")
	gl.glVertexWeighthvNV = getProcAddr("glVertexWeighthvNV")
	gl.glVertexAttrib1hNV = getProcAddr("glVertexAttrib1hNV")
	gl.glVertexAttrib1hvNV = getProcAddr("glVertexAttrib1hvNV")
	gl.glVertexAttrib2hNV = getProcAddr("glVertexAttrib2hNV")
	gl.glVertexAttrib2hvNV = getProcAddr("glVertexAttrib2hvNV")
	gl.glVertexAttrib3hNV = getProcAddr("glVertexAttrib3hNV")
	gl.glVertexAttrib3hvNV = getProcAddr("glVertexAttrib3hvNV")
	gl.glVertexAttrib4hNV = getProcAddr("glVertexAttrib4hNV")
	gl.glVertexAttrib4hvNV = getProcAddr("glVertexAttrib4hvNV")
	gl.glVertexAttribs1hvNV = getProcAddr("glVertexAttribs1hvNV")
	gl.glVertexAttribs2hvNV = getProcAddr("glVertexAttribs2hvNV")
	gl.glVertexAttribs3hvNV = getProcAddr("glVertexAttribs3hvNV")
	gl.glVertexAttribs4hvNV = getProcAddr("glVertexAttribs4hvNV")
	gl.glGetInternalformatSampleivNV = getProcAddr("glGetInternalformatSampleivNV")
	gl.glRenderGpuMaskNV = getProcAddr("glRenderGpuMaskNV")
	gl.glMulticastBufferSubDataNV = getProcAddr("glMulticastBufferSubDataNV")
	gl.glMulticastCopyBufferSubDataNV = getProcAddr("glMulticastCopyBufferSubDataNV")
	gl.glMulticastCopyImageSubDataNV = getProcAddr("glMulticastCopyImageSubDataNV")
	gl.glMulticastBlitFramebufferNV = getProcAddr("glMulticastBlitFramebufferNV")
	gl.glMulticastFramebufferSampleLocationsfvNV = getProcAddr("glMulticastFramebufferSampleLocationsfvNV")
	gl.glMulticastBarrierNV = getProcAddr("glMulticastBarrierNV")
	gl.glMulticastWaitSyncNV = getProcAddr("glMulticastWaitSyncNV")
	gl.glMulticastGetQueryObjectivNV = getProcAddr("glMulticastGetQueryObjectivNV")
	gl.glMulticastGetQueryObjectuivNV = getProcAddr("glMulticastGetQueryObjectuivNV")
	gl.glMulticastGetQueryObjecti64vNV = getProcAddr("glMulticastGetQueryObjecti64vNV")
	gl.glMulticastGetQueryObjectui64vNV = getProcAddr("glMulticastGetQueryObjectui64vNV")
	gl.glUploadGpuMaskNVX = getProcAddr("glUploadGpuMaskNVX")
	gl.glMulticastViewportArrayvNVX = getProcAddr("glMulticastViewportArrayvNVX")
	gl.glMulticastViewportPositionWScaleNVX = getProcAddr("glMulticastViewportPositionWScaleNVX")
	gl.glMulticastScissorArrayvNVX = getProcAddr("glMulticastScissorArrayvNVX")
	gl.glAsyncCopyBufferSubDataNVX = getProcAddr("glAsyncCopyBufferSubDataNVX")
	gl.glAsyncCopyImageSubDataNVX = getProcAddr("glAsyncCopyImageSubDataNVX")
	gl.glCreateProgressFenceNVX = getProcAddr("glCreateProgressFenceNVX")
	gl.glSignalSemaphoreui64NVX = getProcAddr("glSignalSemaphoreui64NVX")
	gl.glWaitSemaphoreui64NVX = getProcAddr("glWaitSemaphoreui64NVX")
	gl.glClientWaitSemaphoreui64NVX = getProcAddr("glClientWaitSemaphoreui64NVX")
	gl.glGetMemoryObjectDetachedResourcesuivNV = getProcAddr("glGetMemoryObjectDetachedResourcesuivNV")
	gl.glResetMemoryObjectParameterNV = getProcAddr("glResetMemoryObjectParameterNV")
	gl.glTexAttachMemoryNV = getProcAddr("glTexAttachMemoryNV")
	gl.glBufferAttachMemoryNV = getProcAddr("glBufferAttachMemoryNV")
	gl.glTextureAttachMemoryNV = getProcAddr("glTextureAttachMemoryNV")
	gl.glNamedBufferAttachMemoryNV = getProcAddr("glNamedBufferAttachMemoryNV")
	gl.glBufferPageCommitmentMemNV = getProcAddr("glBufferPageCommitmentMemNV")
	gl.glTexPageCommitmentMemNV = getProcAddr("glTexPageCommitmentMemNV")
	gl.glNamedBufferPageCommitmentMemNV = getProcAddr("glNamedBufferPageCommitmentMemNV")
	gl.glTexturePageCommitmentMemNV = getProcAddr("glTexturePageCommitmentMemNV")
	gl.glDrawMeshTasksNV = getProcAddr("glDrawMeshTasksNV")
	gl.glDrawMeshTasksIndirectNV = getProcAddr("glDrawMeshTasksIndirectNV")
	gl.glMultiDrawMeshTasksIndirectNV = getProcAddr("glMultiDrawMeshTasksIndirectNV")
	gl.glMultiDrawMeshTasksIndirectCountNV = getProcAddr("glMultiDrawMeshTasksIndirectCountNV")
	gl.glGenOcclusionQueriesNV = getProcAddr("glGenOcclusionQueriesNV")
	gl.glDeleteOcclusionQueriesNV = getProcAddr("glDeleteOcclusionQueriesNV")
	gl.glIsOcclusionQueryNV = getProcAddr("glIsOcclusionQueryNV")
	gl.glBeginOcclusionQueryNV = getProcAddr("glBeginOcclusionQueryNV")
	gl.glEndOcclusionQueryNV = getProcAddr("glEndOcclusionQueryNV")
	gl.glGetOcclusionQueryivNV = getProcAddr("glGetOcclusionQueryivNV")
	gl.glGetOcclusionQueryuivNV = getProcAddr("glGetOcclusionQueryuivNV")
	gl.glProgramBufferParametersfvNV = getProcAddr("glProgramBufferParametersfvNV")
	gl.glProgramBufferParametersIivNV = getProcAddr("glProgramBufferParametersIivNV")
	gl.glProgramBufferParametersIuivNV = getProcAddr("glProgramBufferParametersIuivNV")
	gl.glGenPathsNV = getProcAddr("glGenPathsNV")
	gl.glDeletePathsNV = getProcAddr("glDeletePathsNV")
	gl.glIsPathNV = getProcAddr("glIsPathNV")
	gl.glPathCommandsNV = getProcAddr("glPathCommandsNV")
	gl.glPathCoordsNV = getProcAddr("glPathCoordsNV")
	gl.glPathSubCommandsNV = getProcAddr("glPathSubCommandsNV")
	gl.glPathSubCoordsNV = getProcAddr("glPathSubCoordsNV")
	gl.glPathStringNV = getProcAddr("glPathStringNV")
	gl.glPathGlyphsNV = getProcAddr("glPathGlyphsNV")
	gl.glPathGlyphRangeNV = getProcAddr("glPathGlyphRangeNV")
	gl.glWeightPathsNV = getProcAddr("glWeightPathsNV")
	gl.glCopyPathNV = getProcAddr("glCopyPathNV")
	gl.glInterpolatePathsNV = getProcAddr("glInterpolatePathsNV")
	gl.glTransformPathNV = getProcAddr("glTransformPathNV")
	gl.glPathParameterivNV = getProcAddr("glPathParameterivNV")
	gl.glPathParameteriNV = getProcAddr("glPathParameteriNV")
	gl.glPathParameterfvNV = getProcAddr("glPathParameterfvNV")
	gl.glPathParameterfNV = getProcAddr("glPathParameterfNV")
	gl.glPathDashArrayNV = getProcAddr("glPathDashArrayNV")
	gl.glPathStencilFuncNV = getProcAddr("glPathStencilFuncNV")
	gl.glPathStencilDepthOffsetNV = getProcAddr("glPathStencilDepthOffsetNV")
	gl.glStencilFillPathNV = getProcAddr("glStencilFillPathNV")
	gl.glStencilStrokePathNV = getProcAddr("glStencilStrokePathNV")
	gl.glStencilFillPathInstancedNV = getProcAddr("glStencilFillPathInstancedNV")
	gl.glStencilStrokePathInstancedNV = getProcAddr("glStencilStrokePathInstancedNV")
	gl.glPathCoverDepthFuncNV = getProcAddr("glPathCoverDepthFuncNV")
	gl.glCoverFillPathNV = getProcAddr("glCoverFillPathNV")
	gl.glCoverStrokePathNV = getProcAddr("glCoverStrokePathNV")
	gl.glCoverFillPathInstancedNV = getProcAddr("glCoverFillPathInstancedNV")
	gl.glCoverStrokePathInstancedNV = getProcAddr("glCoverStrokePathInstancedNV")
	gl.glGetPathParameterivNV = getProcAddr("glGetPathParameterivNV")
	gl.glGetPathParameterfvNV = getProcAddr("glGetPathParameterfvNV")
	gl.glGetPathCommandsNV = getProcAddr("glGetPathCommandsNV")
	gl.glGetPathCoordsNV = getProcAddr("glGetPathCoordsNV")
	gl.glGetPathDashArrayNV = getProcAddr("glGetPathDashArrayNV")
	gl.glGetPathMetricsNV = getProcAddr("glGetPathMetricsNV")
	gl.glGetPathMetricRangeNV = getProcAddr("glGetPathMetricRangeNV")
	gl.glGetPathSpacingNV = getProcAddr("glGetPathSpacingNV")
	gl.glIsPointInFillPathNV = getProcAddr("glIsPointInFillPathNV")
	gl.glIsPointInStrokePathNV = getProcAddr("glIsPointInStrokePathNV")
	gl.glGetPathLengthNV = getProcAddr("glGetPathLengthNV")
	gl.glPointAlongPathNV = getProcAddr("glPointAlongPathNV")
	gl.glMatrixLoad3x2fNV = getProcAddr("glMatrixLoad3x2fNV")
	gl.glMatrixLoad3x3fNV = getProcAddr("glMatrixLoad3x3fNV")
	gl.glMatrixLoadTranspose3x3fNV = getProcAddr("glMatrixLoadTranspose3x3fNV")
	gl.glMatrixMult3x2fNV = getProcAddr("glMatrixMult3x2fNV")
	gl.glMatrixMult3x3fNV = getProcAddr("glMatrixMult3x3fNV")
	gl.glMatrixMultTranspose3x3fNV = getProcAddr("glMatrixMultTranspose3x3fNV")
	gl.glStencilThenCoverFillPathNV = getProcAddr("glStencilThenCoverFillPathNV")
	gl.glStencilThenCoverStrokePathNV = getProcAddr("glStencilThenCoverStrokePathNV")
	gl.glStencilThenCoverFillPathInstancedNV = getProcAddr("glStencilThenCoverFillPathInstancedNV")
	gl.glStencilThenCoverStrokePathInstancedNV = getProcAddr("glStencilThenCoverStrokePathInstancedNV")
	gl.glPathGlyphIndexRangeNV = getProcAddr("glPathGlyphIndexRangeNV")
	gl.glPathGlyphIndexArrayNV = getProcAddr("glPathGlyphIndexArrayNV")
	gl.glPathMemoryGlyphIndexArrayNV = getProcAddr("glPathMemoryGlyphIndexArrayNV")
	gl.glProgramPathFragmentInputGenNV = getProcAddr("glProgramPathFragmentInputGenNV")
	gl.glGetProgramResourcefvNV = getProcAddr("glGetProgramResourcefvNV")
	gl.glPathColorGenNV = getProcAddr("glPathColorGenNV")
	gl.glPathTexGenNV = getProcAddr("glPathTexGenNV")
	gl.glPathFogGenNV = getProcAddr("glPathFogGenNV")
	gl.glGetPathColorGenivNV = getProcAddr("glGetPathColorGenivNV")
	gl.glGetPathColorGenfvNV = getProcAddr("glGetPathColorGenfvNV")
	gl.glGetPathTexGenivNV = getProcAddr("glGetPathTexGenivNV")
	gl.glGetPathTexGenfvNV = getProcAddr("glGetPathTexGenfvNV")
	gl.glMatrixFrustumEXT = getProcAddr("glMatrixFrustumEXT")
	gl.glMatrixLoadIdentityEXT = getProcAddr("glMatrixLoadIdentityEXT")
	gl.glMatrixLoadTransposefEXT = getProcAddr("glMatrixLoadTransposefEXT")
	gl.glMatrixLoadTransposedEXT = getProcAddr("glMatrixLoadTransposedEXT")
	gl.glMatrixLoadfEXT = getProcAddr("glMatrixLoadfEXT")
	gl.glMatrixLoaddEXT = getProcAddr("glMatrixLoaddEXT")
	gl.glMatrixMultTransposefEXT = getProcAddr("glMatrixMultTransposefEXT")
	gl.glMatrixMultTransposedEXT = getProcAddr("glMatrixMultTransposedEXT")
	gl.glMatrixMultfEXT = getProcAddr("glMatrixMultfEXT")
	gl.glMatrixMultdEXT = getProcAddr("glMatrixMultdEXT")
	gl.glMatrixOrthoEXT = getProcAddr("glMatrixOrthoEXT")
	gl.glMatrixPopEXT = getProcAddr("glMatrixPopEXT")
	gl.glMatrixPushEXT = getProcAddr("glMatrixPushEXT")
	gl.glMatrixRotatefEXT = getProcAddr("glMatrixRotatefEXT")
	gl.glMatrixRotatedEXT = getProcAddr("glMatrixRotatedEXT")
	gl.glMatrixScalefEXT = getProcAddr("glMatrixScalefEXT")
	gl.glMatrixScaledEXT = getProcAddr("glMatrixScaledEXT")
	gl.glMatrixTranslatefEXT = getProcAddr("glMatrixTranslatefEXT")
	gl.glMatrixTranslatedEXT = getProcAddr("glMatrixTranslatedEXT")
	gl.glPixelDataRangeNV = getProcAddr("glPixelDataRangeNV")
	gl.glFlushPixelDataRangeNV = getProcAddr("glFlushPixelDataRangeNV")
	gl.glPointParameteriNV = getProcAddr("glPointParameteriNV")
	gl.glPointParameterivNV = getProcAddr("glPointParameterivNV")
	gl.glPresentFrameKeyedNV = getProcAddr("glPresentFrameKeyedNV")
	gl.glPresentFrameDualFillNV = getProcAddr("glPresentFrameDualFillNV")
	gl.glGetVideoivNV = getProcAddr("glGetVideoivNV")
	gl.glGetVideouivNV = getProcAddr("glGetVideouivNV")
	gl.glGetVideoi64vNV = getProcAddr("glGetVideoi64vNV")
	gl.glGetVideoui64vNV = getProcAddr("glGetVideoui64vNV")
	gl.glPrimitiveRestartNV = getProcAddr("glPrimitiveRestartNV")
	gl.glPrimitiveRestartIndexNV = getProcAddr("glPrimitiveRestartIndexNV")
	gl.glQueryResourceNV = getProcAddr("glQueryResourceNV")
	gl.glGenQueryResourceTagNV = getProcAddr("glGenQueryResourceTagNV")
	gl.glDeleteQueryResourceTagNV = getProcAddr("glDeleteQueryResourceTagNV")
	gl.glQueryResourceTagNV = getProcAddr("glQueryResourceTagNV")
	gl.glCombinerParameterfvNV = getProcAddr("glCombinerParameterfvNV")
	gl.glCombinerParameterfNV = getProcAddr("glCombinerParameterfNV")
	gl.glCombinerParameterivNV = getProcAddr("glCombinerParameterivNV")
	gl.glCombinerParameteriNV = getProcAddr("glCombinerParameteriNV")
	gl.glCombinerInputNV = getProcAddr("glCombinerInputNV")
	gl.glCombinerOutputNV = getProcAddr("glCombinerOutputNV")
	gl.glFinalCombinerInputNV = getProcAddr("glFinalCombinerInputNV")
	gl.glGetCombinerInputParameterfvNV = getProcAddr("glGetCombinerInputParameterfvNV")
	gl.glGetCombinerInputParameterivNV = getProcAddr("glGetCombinerInputParameterivNV")
	gl.glGetCombinerOutputParameterfvNV = getProcAddr("glGetCombinerOutputParameterfvNV")
	gl.glGetCombinerOutputParameterivNV = getProcAddr("glGetCombinerOutputParameterivNV")
	gl.glGetFinalCombinerInputParameterfvNV = getProcAddr("glGetFinalCombinerInputParameterfvNV")
	gl.glGetFinalCombinerInputParameterivNV = getProcAddr("glGetFinalCombinerInputParameterivNV")
	gl.glCombinerStageParameterfvNV = getProcAddr("glCombinerStageParameterfvNV")
	gl.glGetCombinerStageParameterfvNV = getProcAddr("glGetCombinerStageParameterfvNV")
	gl.glFramebufferSampleLocationsfvNV = getProcAddr("glFramebufferSampleLocationsfvNV")
	gl.glNamedFramebufferSampleLocationsfvNV = getProcAddr("glNamedFramebufferSampleLocationsfvNV")
	gl.glResolveDepthValuesNV = getProcAddr("glResolveDepthValuesNV")
	gl.glScissorExclusiveNV = getProcAddr("glScissorExclusiveNV")
	gl.glScissorExclusiveArrayvNV = getProcAddr("glScissorExclusiveArrayvNV")
	gl.glMakeBufferResidentNV = getProcAddr("glMakeBufferResidentNV")
	gl.glMakeBufferNonResidentNV = getProcAddr("glMakeBufferNonResidentNV")
	gl.glIsBufferResidentNV = getProcAddr("glIsBufferResidentNV")
	gl.glMakeNamedBufferResidentNV = getProcAddr("glMakeNamedBufferResidentNV")
	gl.glMakeNamedBufferNonResidentNV = getProcAddr("glMakeNamedBufferNonResidentNV")
	gl.glIsNamedBufferResidentNV = getProcAddr("glIsNamedBufferResidentNV")
	gl.glGetBufferParameterui64vNV = getProcAddr("glGetBufferParameterui64vNV")
	gl.glGetNamedBufferParameterui64vNV = getProcAddr("glGetNamedBufferParameterui64vNV")
	gl.glGetIntegerui64vNV = getProcAddr("glGetIntegerui64vNV")
	gl.glUniformui64NV = getProcAddr("glUniformui64NV")
	gl.glUniformui64vNV = getProcAddr("glUniformui64vNV")
	gl.glGetUniformui64vNV = getProcAddr("glGetUniformui64vNV")
	gl.glProgramUniformui64NV = getProcAddr("glProgramUniformui64NV")
	gl.glProgramUniformui64vNV = getProcAddr("glProgramUniformui64vNV")
	gl.glBindShadingRateImageNV = getProcAddr("glBindShadingRateImageNV")
	gl.glGetShadingRateImagePaletteNV = getProcAddr("glGetShadingRateImagePaletteNV")
	gl.glGetShadingRateSampleLocationivNV = getProcAddr("glGetShadingRateSampleLocationivNV")
	gl.glShadingRateImageBarrierNV = getProcAddr("glShadingRateImageBarrierNV")
	gl.glShadingRateImagePaletteNV = getProcAddr("glShadingRateImagePaletteNV")
	gl.glShadingRateSampleOrderNV = getProcAddr("glShadingRateSampleOrderNV")
	gl.glShadingRateSampleOrderCustomNV = getProcAddr("glShadingRateSampleOrderCustomNV")
	gl.glTextureBarrierNV = getProcAddr("glTextureBarrierNV")
	gl.glTexImage2DMultisampleCoverageNV = getProcAddr("glTexImage2DMultisampleCoverageNV")
	gl.glTexImage3DMultisampleCoverageNV = getProcAddr("glTexImage3DMultisampleCoverageNV")
	gl.glTextureImage2DMultisampleNV = getProcAddr("glTextureImage2DMultisampleNV")
	gl.glTextureImage3DMultisampleNV = getProcAddr("glTextureImage3DMultisampleNV")
	gl.glTextureImage2DMultisampleCoverageNV = getProcAddr("glTextureImage2DMultisampleCoverageNV")
	gl.glTextureImage3DMultisampleCoverageNV = getProcAddr("glTextureImage3DMultisampleCoverageNV")
	gl.glBeginTransformFeedbackNV = getProcAddr("glBeginTransformFeedbackNV")
	gl.glEndTransformFeedbackNV = getProcAddr("glEndTransformFeedbackNV")
	gl.glTransformFeedbackAttribsNV = getProcAddr("glTransformFeedbackAttribsNV")
	gl.glBindBufferRangeNV = getProcAddr("glBindBufferRangeNV")
	gl.glBindBufferOffsetNV = getProcAddr("glBindBufferOffsetNV")
	gl.glBindBufferBaseNV = getProcAddr("glBindBufferBaseNV")
	gl.glTransformFeedbackVaryingsNV = getProcAddr("glTransformFeedbackVaryingsNV")
	gl.glActiveVaryingNV = getProcAddr("glActiveVaryingNV")
	gl.glGetVaryingLocationNV = getProcAddr("glGetVaryingLocationNV")
	gl.glGetActiveVaryingNV = getProcAddr("glGetActiveVaryingNV")
	gl.glGetTransformFeedbackVaryingNV = getProcAddr("glGetTransformFeedbackVaryingNV")
	gl.glTransformFeedbackStreamAttribsNV = getProcAddr("glTransformFeedbackStreamAttribsNV")
	gl.glBindTransformFeedbackNV = getProcAddr("glBindTransformFeedbackNV")
	gl.glDeleteTransformFeedbacksNV = getProcAddr("glDeleteTransformFeedbacksNV")
	gl.glGenTransformFeedbacksNV = getProcAddr("glGenTransformFeedbacksNV")
	gl.glIsTransformFeedbackNV = getProcAddr("glIsTransformFeedbackNV")
	gl.glPauseTransformFeedbackNV = getProcAddr("glPauseTransformFeedbackNV")
	gl.glResumeTransformFeedbackNV = getProcAddr("glResumeTransformFeedbackNV")
	gl.glDrawTransformFeedbackNV = getProcAddr("glDrawTransformFeedbackNV")
	gl.glVDPAUInitNV = getProcAddr("glVDPAUInitNV")
	gl.glVDPAUFiniNV = getProcAddr("glVDPAUFiniNV")
	gl.glVDPAURegisterVideoSurfaceNV = getProcAddr("glVDPAURegisterVideoSurfaceNV")
	gl.glVDPAURegisterOutputSurfaceNV = getProcAddr("glVDPAURegisterOutputSurfaceNV")
	gl.glVDPAUIsSurfaceNV = getProcAddr("glVDPAUIsSurfaceNV")
	gl.glVDPAUUnregisterSurfaceNV = getProcAddr("glVDPAUUnregisterSurfaceNV")
	gl.glVDPAUGetSurfaceivNV = getProcAddr("glVDPAUGetSurfaceivNV")
	gl.glVDPAUSurfaceAccessNV = getProcAddr("glVDPAUSurfaceAccessNV")
	gl.glVDPAUMapSurfacesNV = getProcAddr("glVDPAUMapSurfacesNV")
	gl.glVDPAUUnmapSurfacesNV = getProcAddr("glVDPAUUnmapSurfacesNV")
	gl.glVDPAURegisterVideoSurfaceWithPictureStructureNV = getProcAddr("glVDPAURegisterVideoSurfaceWithPictureStructureNV")
	gl.glFlushVertexArrayRangeNV = getProcAddr("glFlushVertexArrayRangeNV")
	gl.glVertexArrayRangeNV = getProcAddr("glVertexArrayRangeNV")
	gl.glVertexAttribL1i64NV = getProcAddr("glVertexAttribL1i64NV")
	gl.glVertexAttribL2i64NV = getProcAddr("glVertexAttribL2i64NV")
	gl.glVertexAttribL3i64NV = getProcAddr("glVertexAttribL3i64NV")
	gl.glVertexAttribL4i64NV = getProcAddr("glVertexAttribL4i64NV")
	gl.glVertexAttribL1i64vNV = getProcAddr("glVertexAttribL1i64vNV")
	gl.glVertexAttribL2i64vNV = getProcAddr("glVertexAttribL2i64vNV")
	gl.glVertexAttribL3i64vNV = getProcAddr("glVertexAttribL3i64vNV")
	gl.glVertexAttribL4i64vNV = getProcAddr("glVertexAttribL4i64vNV")
	gl.glVertexAttribL1ui64NV = getProcAddr("glVertexAttribL1ui64NV")
	gl.glVertexAttribL2ui64NV = getProcAddr("glVertexAttribL2ui64NV")
	gl.glVertexAttribL3ui64NV = getProcAddr("glVertexAttribL3ui64NV")
	gl.glVertexAttribL4ui64NV = getProcAddr("glVertexAttribL4ui64NV")
	gl.glVertexAttribL1ui64vNV = getProcAddr("glVertexAttribL1ui64vNV")
	gl.glVertexAttribL2ui64vNV = getProcAddr("glVertexAttribL2ui64vNV")
	gl.glVertexAttribL3ui64vNV = getProcAddr("glVertexAttribL3ui64vNV")
	gl.glVertexAttribL4ui64vNV = getProcAddr("glVertexAttribL4ui64vNV")
	gl.glGetVertexAttribLi64vNV = getProcAddr("glGetVertexAttribLi64vNV")
	gl.glGetVertexAttribLui64vNV = getProcAddr("glGetVertexAttribLui64vNV")
	gl.glVertexAttribLFormatNV = getProcAddr("glVertexAttribLFormatNV")
	gl.glBufferAddressRangeNV = getProcAddr("glBufferAddressRangeNV")
	gl.glVertexFormatNV = getProcAddr("glVertexFormatNV")
	gl.glNormalFormatNV = getProcAddr("glNormalFormatNV")
	gl.glColorFormatNV = getProcAddr("glColorFormatNV")
	gl.glIndexFormatNV = getProcAddr("glIndexFormatNV")
	gl.glTexCoordFormatNV = getProcAddr("glTexCoordFormatNV")
	gl.glEdgeFlagFormatNV = getProcAddr("glEdgeFlagFormatNV")
	gl.glSecondaryColorFormatNV = getProcAddr("glSecondaryColorFormatNV")
	gl.glFogCoordFormatNV = getProcAddr("glFogCoordFormatNV")
	gl.glVertexAttribFormatNV = getProcAddr("glVertexAttribFormatNV")
	gl.glVertexAttribIFormatNV = getProcAddr("glVertexAttribIFormatNV")
	gl.glGetIntegerui64i_vNV = getProcAddr("glGetIntegerui64i_vNV")
	gl.glAreProgramsResidentNV = getProcAddr("glAreProgramsResidentNV")
	gl.glBindProgramNV = getProcAddr("glBindProgramNV")
	gl.glDeleteProgramsNV = getProcAddr("glDeleteProgramsNV")
	gl.glExecuteProgramNV = getProcAddr("glExecuteProgramNV")
	gl.glGenProgramsNV = getProcAddr("glGenProgramsNV")
	gl.glGetProgramParameterdvNV = getProcAddr("glGetProgramParameterdvNV")
	gl.glGetProgramParameterfvNV = getProcAddr("glGetProgramParameterfvNV")
	gl.glGetProgramivNV = getProcAddr("glGetProgramivNV")
	gl.glGetProgramStringNV = getProcAddr("glGetProgramStringNV")
	gl.glGetTrackMatrixivNV = getProcAddr("glGetTrackMatrixivNV")
	gl.glGetVertexAttribdvNV = getProcAddr("glGetVertexAttribdvNV")
	gl.glGetVertexAttribfvNV = getProcAddr("glGetVertexAttribfvNV")
	gl.glGetVertexAttribivNV = getProcAddr("glGetVertexAttribivNV")
	gl.glGetVertexAttribPointervNV = getProcAddr("glGetVertexAttribPointervNV")
	gl.glIsProgramNV = getProcAddr("glIsProgramNV")
	gl.glLoadProgramNV = getProcAddr("glLoadProgramNV")
	gl.glProgramParameter4dNV = getProcAddr("glProgramParameter4dNV")
	gl.glProgramParameter4dvNV = getProcAddr("glProgramParameter4dvNV")
	gl.glProgramParameter4fNV = getProcAddr("glProgramParameter4fNV")
	gl.glProgramParameter4fvNV = getProcAddr("glProgramParameter4fvNV")
	gl.glProgramParameters4dvNV = getProcAddr("glProgramParameters4dvNV")
	gl.glProgramParameters4fvNV = getProcAddr("glProgramParameters4fvNV")
	gl.glRequestResidentProgramsNV = getProcAddr("glRequestResidentProgramsNV")
	gl.glTrackMatrixNV = getProcAddr("glTrackMatrixNV")
	gl.glVertexAttribPointerNV = getProcAddr("glVertexAttribPointerNV")
	gl.glVertexAttrib1dNV = getProcAddr("glVertexAttrib1dNV")
	gl.glVertexAttrib1dvNV = getProcAddr("glVertexAttrib1dvNV")
	gl.glVertexAttrib1fNV = getProcAddr("glVertexAttrib1fNV")
	gl.glVertexAttrib1fvNV = getProcAddr("glVertexAttrib1fvNV")
	gl.glVertexAttrib1sNV = getProcAddr("glVertexAttrib1sNV")
	gl.glVertexAttrib1svNV = getProcAddr("glVertexAttrib1svNV")
	gl.glVertexAttrib2dNV = getProcAddr("glVertexAttrib2dNV")
	gl.glVertexAttrib2dvNV = getProcAddr("glVertexAttrib2dvNV")
	gl.glVertexAttrib2fNV = getProcAddr("glVertexAttrib2fNV")
	gl.glVertexAttrib2fvNV = getProcAddr("glVertexAttrib2fvNV")
	gl.glVertexAttrib2sNV = getProcAddr("glVertexAttrib2sNV")
	gl.glVertexAttrib2svNV = getProcAddr("glVertexAttrib2svNV")
	gl.glVertexAttrib3dNV = getProcAddr("glVertexAttrib3dNV")
	gl.glVertexAttrib3dvNV = getProcAddr("glVertexAttrib3dvNV")
	gl.glVertexAttrib3fNV = getProcAddr("glVertexAttrib3fNV")
	gl.glVertexAttrib3fvNV = getProcAddr("glVertexAttrib3fvNV")
	gl.glVertexAttrib3sNV = getProcAddr("glVertexAttrib3sNV")
	gl.glVertexAttrib3svNV = getProcAddr("glVertexAttrib3svNV")
	gl.glVertexAttrib4dNV = getProcAddr("glVertexAttrib4dNV")
	gl.glVertexAttrib4dvNV = getProcAddr("glVertexAttrib4dvNV")
	gl.glVertexAttrib4fNV = getProcAddr("glVertexAttrib4fNV")
	gl.glVertexAttrib4fvNV = getProcAddr("glVertexAttrib4fvNV")
	gl.glVertexAttrib4sNV = getProcAddr("glVertexAttrib4sNV")
	gl.glVertexAttrib4svNV = getProcAddr("glVertexAttrib4svNV")
	gl.glVertexAttrib4ubNV = getProcAddr("glVertexAttrib4ubNV")
	gl.glVertexAttrib4ubvNV = getProcAddr("glVertexAttrib4ubvNV")
	gl.glVertexAttribs1dvNV = getProcAddr("glVertexAttribs1dvNV")
	gl.glVertexAttribs1fvNV = getProcAddr("glVertexAttribs1fvNV")
	gl.glVertexAttribs1svNV = getProcAddr("glVertexAttribs1svNV")
	gl.glVertexAttribs2dvNV = getProcAddr("glVertexAttribs2dvNV")
	gl.glVertexAttribs2fvNV = getProcAddr("glVertexAttribs2fvNV")
	gl.glVertexAttribs2svNV = getProcAddr("glVertexAttribs2svNV")
	gl.glVertexAttribs3dvNV = getProcAddr("glVertexAttribs3dvNV")
	gl.glVertexAttribs3fvNV = getProcAddr("glVertexAttribs3fvNV")
	gl.glVertexAttribs3svNV = getProcAddr("glVertexAttribs3svNV")
	gl.glVertexAttribs4dvNV = getProcAddr("glVertexAttribs4dvNV")
	gl.glVertexAttribs4fvNV = getProcAddr("glVertexAttribs4fvNV")
	gl.glVertexAttribs4svNV = getProcAddr("glVertexAttribs4svNV")
	gl.glVertexAttribs4ubvNV = getProcAddr("glVertexAttribs4ubvNV")
	gl.glVertexAttribI1iEXT = getProcAddr("glVertexAttribI1iEXT")
	gl.glVertexAttribI2iEXT = getProcAddr("glVertexAttribI2iEXT")
	gl.glVertexAttribI3iEXT = getProcAddr("glVertexAttribI3iEXT")
	gl.glVertexAttribI4iEXT = getProcAddr("glVertexAttribI4iEXT")
	gl.glVertexAttribI1uiEXT = getProcAddr("glVertexAttribI1uiEXT")
	gl.glVertexAttribI2uiEXT = getProcAddr("glVertexAttribI2uiEXT")
	gl.glVertexAttribI3uiEXT = getProcAddr("glVertexAttribI3uiEXT")
	gl.glVertexAttribI4uiEXT = getProcAddr("glVertexAttribI4uiEXT")
	gl.glVertexAttribI1ivEXT = getProcAddr("glVertexAttribI1ivEXT")
	gl.glVertexAttribI2ivEXT = getProcAddr("glVertexAttribI2ivEXT")
	gl.glVertexAttribI3ivEXT = getProcAddr("glVertexAttribI3ivEXT")
	gl.glVertexAttribI4ivEXT = getProcAddr("glVertexAttribI4ivEXT")
	gl.glVertexAttribI1uivEXT = getProcAddr("glVertexAttribI1uivEXT")
	gl.glVertexAttribI2uivEXT = getProcAddr("glVertexAttribI2uivEXT")
	gl.glVertexAttribI3uivEXT = getProcAddr("glVertexAttribI3uivEXT")
	gl.glVertexAttribI4uivEXT = getProcAddr("glVertexAttribI4uivEXT")
	gl.glVertexAttribI4bvEXT = getProcAddr("glVertexAttribI4bvEXT")
	gl.glVertexAttribI4svEXT = getProcAddr("glVertexAttribI4svEXT")
	gl.glVertexAttribI4ubvEXT = getProcAddr("glVertexAttribI4ubvEXT")
	gl.glVertexAttribI4usvEXT = getProcAddr("glVertexAttribI4usvEXT")
	gl.glVertexAttribIPointerEXT = getProcAddr("glVertexAttribIPointerEXT")
	gl.glGetVertexAttribIivEXT = getProcAddr("glGetVertexAttribIivEXT")
	gl.glGetVertexAttribIuivEXT = getProcAddr("glGetVertexAttribIuivEXT")
	gl.glBeginVideoCaptureNV = getProcAddr("glBeginVideoCaptureNV")
	gl.glBindVideoCaptureStreamBufferNV = getProcAddr("glBindVideoCaptureStreamBufferNV")
	gl.glBindVideoCaptureStreamTextureNV = getProcAddr("glBindVideoCaptureStreamTextureNV")
	gl.glEndVideoCaptureNV = getProcAddr("glEndVideoCaptureNV")
	gl.glGetVideoCaptureivNV = getProcAddr("glGetVideoCaptureivNV")
	gl.glGetVideoCaptureStreamivNV = getProcAddr("glGetVideoCaptureStreamivNV")
	gl.glGetVideoCaptureStreamfvNV = getProcAddr("glGetVideoCaptureStreamfvNV")
	gl.glGetVideoCaptureStreamdvNV = getProcAddr("glGetVideoCaptureStreamdvNV")
	gl.glVideoCaptureNV = getProcAddr("glVideoCaptureNV")
	gl.glVideoCaptureStreamParameterivNV = getProcAddr("glVideoCaptureStreamParameterivNV")
	gl.glVideoCaptureStreamParameterfvNV = getProcAddr("glVideoCaptureStreamParameterfvNV")
	gl.glVideoCaptureStreamParameterdvNV = getProcAddr("glVideoCaptureStreamParameterdvNV")
	gl.glViewportSwizzleNV = getProcAddr("glViewportSwizzleNV")
	gl.glMultiTexCoord1bOES = getProcAddr("glMultiTexCoord1bOES")
	gl.glMultiTexCoord1bvOES = getProcAddr("glMultiTexCoord1bvOES")
	gl.glMultiTexCoord2bOES = getProcAddr("glMultiTexCoord2bOES")
	gl.glMultiTexCoord2bvOES = getProcAddr("glMultiTexCoord2bvOES")
	gl.glMultiTexCoord3bOES = getProcAddr("glMultiTexCoord3bOES")
	gl.glMultiTexCoord3bvOES = getProcAddr("glMultiTexCoord3bvOES")
	gl.glMultiTexCoord4bOES = getProcAddr("glMultiTexCoord4bOES")
	gl.glMultiTexCoord4bvOES = getProcAddr("glMultiTexCoord4bvOES")
	gl.glTexCoord1bOES = getProcAddr("glTexCoord1bOES")
	gl.glTexCoord1bvOES = getProcAddr("glTexCoord1bvOES")
	gl.glTexCoord2bOES = getProcAddr("glTexCoord2bOES")
	gl.glTexCoord2bvOES = getProcAddr("glTexCoord2bvOES")
	gl.glTexCoord3bOES = getProcAddr("glTexCoord3bOES")
	gl.glTexCoord3bvOES = getProcAddr("glTexCoord3bvOES")
	gl.glTexCoord4bOES = getProcAddr("glTexCoord4bOES")
	gl.glTexCoord4bvOES = getProcAddr("glTexCoord4bvOES")
	gl.glVertex2bOES = getProcAddr("glVertex2bOES")
	gl.glVertex2bvOES = getProcAddr("glVertex2bvOES")
	gl.glVertex3bOES = getProcAddr("glVertex3bOES")
	gl.glVertex3bvOES = getProcAddr("glVertex3bvOES")
	gl.glVertex4bOES = getProcAddr("glVertex4bOES")
	gl.glVertex4bvOES = getProcAddr("glVertex4bvOES")
	gl.glAlphaFuncxOES = getProcAddr("glAlphaFuncxOES")
	gl.glClearColorxOES = getProcAddr("glClearColorxOES")
	gl.glClearDepthxOES = getProcAddr("glClearDepthxOES")
	gl.glClipPlanexOES = getProcAddr("glClipPlanexOES")
	gl.glColor4xOES = getProcAddr("glColor4xOES")
	gl.glDepthRangexOES = getProcAddr("glDepthRangexOES")
	gl.glFogxOES = getProcAddr("glFogxOES")
	gl.glFogxvOES = getProcAddr("glFogxvOES")
	gl.glFrustumxOES = getProcAddr("glFrustumxOES")
	gl.glGetClipPlanexOES = getProcAddr("glGetClipPlanexOES")
	gl.glGetFixedvOES = getProcAddr("glGetFixedvOES")
	gl.glGetTexEnvxvOES = getProcAddr("glGetTexEnvxvOES")
	gl.glGetTexParameterxvOES = getProcAddr("glGetTexParameterxvOES")
	gl.glLightModelxOES = getProcAddr("glLightModelxOES")
	gl.glLightModelxvOES = getProcAddr("glLightModelxvOES")
	gl.glLightxOES = getProcAddr("glLightxOES")
	gl.glLightxvOES = getProcAddr("glLightxvOES")
	gl.glLineWidthxOES = getProcAddr("glLineWidthxOES")
	gl.glLoadMatrixxOES = getProcAddr("glLoadMatrixxOES")
	gl.glMaterialxOES = getProcAddr("glMaterialxOES")
	gl.glMaterialxvOES = getProcAddr("glMaterialxvOES")
	gl.glMultMatrixxOES = getProcAddr("glMultMatrixxOES")
	gl.glMultiTexCoord4xOES = getProcAddr("glMultiTexCoord4xOES")
	gl.glNormal3xOES = getProcAddr("glNormal3xOES")
	gl.glOrthoxOES = getProcAddr("glOrthoxOES")
	gl.glPointParameterxvOES = getProcAddr("glPointParameterxvOES")
	gl.glPointSizexOES = getProcAddr("glPointSizexOES")
	gl.glPolygonOffsetxOES = getProcAddr("glPolygonOffsetxOES")
	gl.glRotatexOES = getProcAddr("glRotatexOES")
	gl.glScalexOES = getProcAddr("glScalexOES")
	gl.glTexEnvxOES = getProcAddr("glTexEnvxOES")
	gl.glTexEnvxvOES = getProcAddr("glTexEnvxvOES")
	gl.glTexParameterxOES = getProcAddr("glTexParameterxOES")
	gl.glTexParameterxvOES = getProcAddr("glTexParameterxvOES")
	gl.glTranslatexOES = getProcAddr("glTranslatexOES")
	gl.glGetLightxvOES = getProcAddr("glGetLightxvOES")
	gl.glGetMaterialxvOES = getProcAddr("glGetMaterialxvOES")
	gl.glPointParameterxOES = getProcAddr("glPointParameterxOES")
	gl.glSampleCoveragexOES = getProcAddr("glSampleCoveragexOES")
	gl.glAccumxOES = getProcAddr("glAccumxOES")
	gl.glBitmapxOES = getProcAddr("glBitmapxOES")
	gl.glBlendColorxOES = getProcAddr("glBlendColorxOES")
	gl.glClearAccumxOES = getProcAddr("glClearAccumxOES")
	gl.glColor3xOES = getProcAddr("glColor3xOES")
	gl.glColor3xvOES = getProcAddr("glColor3xvOES")
	gl.glColor4xvOES = getProcAddr("glColor4xvOES")
	gl.glConvolutionParameterxOES = getProcAddr("glConvolutionParameterxOES")
	gl.glConvolutionParameterxvOES = getProcAddr("glConvolutionParameterxvOES")
	gl.glEvalCoord1xOES = getProcAddr("glEvalCoord1xOES")
	gl.glEvalCoord1xvOES = getProcAddr("glEvalCoord1xvOES")
	gl.glEvalCoord2xOES = getProcAddr("glEvalCoord2xOES")
	gl.glEvalCoord2xvOES = getProcAddr("glEvalCoord2xvOES")
	gl.glFeedbackBufferxOES = getProcAddr("glFeedbackBufferxOES")
	gl.glGetConvolutionParameterxvOES = getProcAddr("glGetConvolutionParameterxvOES")
	gl.glGetHistogramParameterxvOES = getProcAddr("glGetHistogramParameterxvOES")
	gl.glGetLightxOES = getProcAddr("glGetLightxOES")
	gl.glGetMapxvOES = getProcAddr("glGetMapxvOES")
	gl.glGetMaterialxOES = getProcAddr("glGetMaterialxOES")
	gl.glGetPixelMapxv = getProcAddr("glGetPixelMapxv")
	gl.glGetTexGenxvOES = getProcAddr("glGetTexGenxvOES")
	gl.glGetTexLevelParameterxvOES = getProcAddr("glGetTexLevelParameterxvOES")
	gl.glIndexxOES = getProcAddr("glIndexxOES")
	gl.glIndexxvOES = getProcAddr("glIndexxvOES")
	gl.glLoadTransposeMatrixxOES = getProcAddr("glLoadTransposeMatrixxOES")
	gl.glMap1xOES = getProcAddr("glMap1xOES")
	gl.glMap2xOES = getProcAddr("glMap2xOES")
	gl.glMapGrid1xOES = getProcAddr("glMapGrid1xOES")
	gl.glMapGrid2xOES = getProcAddr("glMapGrid2xOES")
	gl.glMultTransposeMatrixxOES = getProcAddr("glMultTransposeMatrixxOES")
	gl.glMultiTexCoord1xOES = getProcAddr("glMultiTexCoord1xOES")
	gl.glMultiTexCoord1xvOES = getProcAddr("glMultiTexCoord1xvOES")
	gl.glMultiTexCoord2xOES = getProcAddr("glMultiTexCoord2xOES")
	gl.glMultiTexCoord2xvOES = getProcAddr("glMultiTexCoord2xvOES")
	gl.glMultiTexCoord3xOES = getProcAddr("glMultiTexCoord3xOES")
	gl.glMultiTexCoord3xvOES = getProcAddr("glMultiTexCoord3xvOES")
	gl.glMultiTexCoord4xvOES = getProcAddr("glMultiTexCoord4xvOES")
	gl.glNormal3xvOES = getProcAddr("glNormal3xvOES")
	gl.glPassThroughxOES = getProcAddr("glPassThroughxOES")
	gl.glPixelMapx = getProcAddr("glPixelMapx")
	gl.glPixelStorex = getProcAddr("glPixelStorex")
	gl.glPixelTransferxOES = getProcAddr("glPixelTransferxOES")
	gl.glPixelZoomxOES = getProcAddr("glPixelZoomxOES")
	gl.glPrioritizeTexturesxOES = getProcAddr("glPrioritizeTexturesxOES")
	gl.glRasterPos2xOES = getProcAddr("glRasterPos2xOES")
	gl.glRasterPos2xvOES = getProcAddr("glRasterPos2xvOES")
	gl.glRasterPos3xOES = getProcAddr("glRasterPos3xOES")
	gl.glRasterPos3xvOES = getProcAddr("glRasterPos3xvOES")
	gl.glRasterPos4xOES = getProcAddr("glRasterPos4xOES")
	gl.glRasterPos4xvOES = getProcAddr("glRasterPos4xvOES")
	gl.glRectxOES = getProcAddr("glRectxOES")
	gl.glRectxvOES = getProcAddr("glRectxvOES")
	gl.glTexCoord1xOES = getProcAddr("glTexCoord1xOES")
	gl.glTexCoord1xvOES = getProcAddr("glTexCoord1xvOES")
	gl.glTexCoord2xOES = getProcAddr("glTexCoord2xOES")
	gl.glTexCoord2xvOES = getProcAddr("glTexCoord2xvOES")
	gl.glTexCoord3xOES = getProcAddr("glTexCoord3xOES")
	gl.glTexCoord3xvOES = getProcAddr("glTexCoord3xvOES")
	gl.glTexCoord4xOES = getProcAddr("glTexCoord4xOES")
	gl.glTexCoord4xvOES = getProcAddr("glTexCoord4xvOES")
	gl.glTexGenxOES = getProcAddr("glTexGenxOES")
	gl.glTexGenxvOES = getProcAddr("glTexGenxvOES")
	gl.glVertex2xOES = getProcAddr("glVertex2xOES")
	gl.glVertex2xvOES = getProcAddr("glVertex2xvOES")
	gl.glVertex3xOES = getProcAddr("glVertex3xOES")
	gl.glVertex3xvOES = getProcAddr("glVertex3xvOES")
	gl.glVertex4xOES = getProcAddr("glVertex4xOES")
	gl.glVertex4xvOES = getProcAddr("glVertex4xvOES")
	gl.glQueryMatrixxOES = getProcAddr("glQueryMatrixxOES")
	gl.glClearDepthfOES = getProcAddr("glClearDepthfOES")
	gl.glClipPlanefOES = getProcAddr("glClipPlanefOES")
	gl.glDepthRangefOES = getProcAddr("glDepthRangefOES")
	gl.glFrustumfOES = getProcAddr("glFrustumfOES")
	gl.glGetClipPlanefOES = getProcAddr("glGetClipPlanefOES")
	gl.glOrthofOES = getProcAddr("glOrthofOES")
	gl.glFramebufferTextureMultiviewOVR = getProcAddr("glFramebufferTextureMultiviewOVR")
	gl.glHintPGI = getProcAddr("glHintPGI")
	gl.glDetailTexFuncSGIS = getProcAddr("glDetailTexFuncSGIS")
	gl.glGetDetailTexFuncSGIS = getProcAddr("glGetDetailTexFuncSGIS")
	gl.glFogFuncSGIS = getProcAddr("glFogFuncSGIS")
	gl.glGetFogFuncSGIS = getProcAddr("glGetFogFuncSGIS")
	gl.glSampleMaskSGIS = getProcAddr("glSampleMaskSGIS")
	gl.glSamplePatternSGIS = getProcAddr("glSamplePatternSGIS")
	gl.glPixelTexGenParameteriSGIS = getProcAddr("glPixelTexGenParameteriSGIS")
	gl.glPixelTexGenParameterivSGIS = getProcAddr("glPixelTexGenParameterivSGIS")
	gl.glPixelTexGenParameterfSGIS = getProcAddr("glPixelTexGenParameterfSGIS")
	gl.glPixelTexGenParameterfvSGIS = getProcAddr("glPixelTexGenParameterfvSGIS")
	gl.glGetPixelTexGenParameterivSGIS = getProcAddr("glGetPixelTexGenParameterivSGIS")
	gl.glGetPixelTexGenParameterfvSGIS = getProcAddr("glGetPixelTexGenParameterfvSGIS")
	gl.glPointParameterfSGIS = getProcAddr("glPointParameterfSGIS")
	gl.glPointParameterfvSGIS = getProcAddr("glPointParameterfvSGIS")
	gl.glSharpenTexFuncSGIS = getProcAddr("glSharpenTexFuncSGIS")
	gl.glGetSharpenTexFuncSGIS = getProcAddr("glGetSharpenTexFuncSGIS")
	gl.glTexImage4DSGIS = getProcAddr("glTexImage4DSGIS")
	gl.glTexSubImage4DSGIS = getProcAddr("glTexSubImage4DSGIS")
	gl.glTextureColorMaskSGIS = getProcAddr("glTextureColorMaskSGIS")
	gl.glGetTexFilterFuncSGIS = getProcAddr("glGetTexFilterFuncSGIS")
	gl.glTexFilterFuncSGIS = getProcAddr("glTexFilterFuncSGIS")
	gl.glAsyncMarkerSGIX = getProcAddr("glAsyncMarkerSGIX")
	gl.glFinishAsyncSGIX = getProcAddr("glFinishAsyncSGIX")
	gl.glPollAsyncSGIX = getProcAddr("glPollAsyncSGIX")
	gl.glGenAsyncMarkersSGIX = getProcAddr("glGenAsyncMarkersSGIX")
	gl.glDeleteAsyncMarkersSGIX = getProcAddr("glDeleteAsyncMarkersSGIX")
	gl.glIsAsyncMarkerSGIX = getProcAddr("glIsAsyncMarkerSGIX")
	gl.glFlushRasterSGIX = getProcAddr("glFlushRasterSGIX")
	gl.glFragmentColorMaterialSGIX = getProcAddr("glFragmentColorMaterialSGIX")
	gl.glFragmentLightfSGIX = getProcAddr("glFragmentLightfSGIX")
	gl.glFragmentLightfvSGIX = getProcAddr("glFragmentLightfvSGIX")
	gl.glFragmentLightiSGIX = getProcAddr("glFragmentLightiSGIX")
	gl.glFragmentLightivSGIX = getProcAddr("glFragmentLightivSGIX")
	gl.glFragmentLightModelfSGIX = getProcAddr("glFragmentLightModelfSGIX")
	gl.glFragmentLightModelfvSGIX = getProcAddr("glFragmentLightModelfvSGIX")
	gl.glFragmentLightModeliSGIX = getProcAddr("glFragmentLightModeliSGIX")
	gl.glFragmentLightModelivSGIX = getProcAddr("glFragmentLightModelivSGIX")
	gl.glFragmentMaterialfSGIX = getProcAddr("glFragmentMaterialfSGIX")
	gl.glFragmentMaterialfvSGIX = getProcAddr("glFragmentMaterialfvSGIX")
	gl.glFragmentMaterialiSGIX = getProcAddr("glFragmentMaterialiSGIX")
	gl.glFragmentMaterialivSGIX = getProcAddr("glFragmentMaterialivSGIX")
	gl.glGetFragmentLightfvSGIX = getProcAddr("glGetFragmentLightfvSGIX")
	gl.glGetFragmentLightivSGIX = getProcAddr("glGetFragmentLightivSGIX")
	gl.glGetFragmentMaterialfvSGIX = getProcAddr("glGetFragmentMaterialfvSGIX")
	gl.glGetFragmentMaterialivSGIX = getProcAddr("glGetFragmentMaterialivSGIX")
	gl.glLightEnviSGIX = getProcAddr("glLightEnviSGIX")
	gl.glFrameZoomSGIX = getProcAddr("glFrameZoomSGIX")
	gl.glIglooInterfaceSGIX = getProcAddr("glIglooInterfaceSGIX")
	gl.glGetInstrumentsSGIX = getProcAddr("glGetInstrumentsSGIX")
	gl.glInstrumentsBufferSGIX = getProcAddr("glInstrumentsBufferSGIX")
	gl.glPollInstrumentsSGIX = getProcAddr("glPollInstrumentsSGIX")
	gl.glReadInstrumentsSGIX = getProcAddr("glReadInstrumentsSGIX")
	gl.glStartInstrumentsSGIX = getProcAddr("glStartInstrumentsSGIX")
	gl.glStopInstrumentsSGIX = getProcAddr("glStopInstrumentsSGIX")
	gl.glGetListParameterfvSGIX = getProcAddr("glGetListParameterfvSGIX")
	gl.glGetListParameterivSGIX = getProcAddr("glGetListParameterivSGIX")
	gl.glListParameterfSGIX = getProcAddr("glListParameterfSGIX")
	gl.glListParameterfvSGIX = getProcAddr("glListParameterfvSGIX")
	gl.glListParameteriSGIX = getProcAddr("glListParameteriSGIX")
	gl.glListParameterivSGIX = getProcAddr("glListParameterivSGIX")
	gl.glPixelTexGenSGIX = getProcAddr("glPixelTexGenSGIX")
	gl.glDeformationMap3dSGIX = getProcAddr("glDeformationMap3dSGIX")
	gl.glDeformationMap3fSGIX = getProcAddr("glDeformationMap3fSGIX")
	gl.glDeformSGIX = getProcAddr("glDeformSGIX")
	gl.glLoadIdentityDeformationMapSGIX = getProcAddr("glLoadIdentityDeformationMapSGIX")
	gl.glReferencePlaneSGIX = getProcAddr("glReferencePlaneSGIX")
	gl.glSpriteParameterfSGIX = getProcAddr("glSpriteParameterfSGIX")
	gl.glSpriteParameterfvSGIX = getProcAddr("glSpriteParameterfvSGIX")
	gl.glSpriteParameteriSGIX = getProcAddr("glSpriteParameteriSGIX")
	gl.glSpriteParameterivSGIX = getProcAddr("glSpriteParameterivSGIX")
	gl.glTagSampleBufferSGIX = getProcAddr("glTagSampleBufferSGIX")
	gl.glColorTableSGI = getProcAddr("glColorTableSGI")
	gl.glColorTableParameterfvSGI = getProcAddr("glColorTableParameterfvSGI")
	gl.glColorTableParameterivSGI = getProcAddr("glColorTableParameterivSGI")
	gl.glCopyColorTableSGI = getProcAddr("glCopyColorTableSGI")
	gl.glGetColorTableSGI = getProcAddr("glGetColorTableSGI")
	gl.glGetColorTableParameterfvSGI = getProcAddr("glGetColorTableParameterfvSGI")
	gl.glGetColorTableParameterivSGI = getProcAddr("glGetColorTableParameterivSGI")
	gl.glFinishTextureSUNX = getProcAddr("glFinishTextureSUNX")
	gl.glGlobalAlphaFactorbSUN = getProcAddr("glGlobalAlphaFactorbSUN")
	gl.glGlobalAlphaFactorsSUN = getProcAddr("glGlobalAlphaFactorsSUN")
	gl.glGlobalAlphaFactoriSUN = getProcAddr("glGlobalAlphaFactoriSUN")
	gl.glGlobalAlphaFactorfSUN = getProcAddr("glGlobalAlphaFactorfSUN")
	gl.glGlobalAlphaFactordSUN = getProcAddr("glGlobalAlphaFactordSUN")
	gl.glGlobalAlphaFactorubSUN = getProcAddr("glGlobalAlphaFactorubSUN")
	gl.glGlobalAlphaFactorusSUN = getProcAddr("glGlobalAlphaFactorusSUN")
	gl.glGlobalAlphaFactoruiSUN = getProcAddr("glGlobalAlphaFactoruiSUN")
	gl.glDrawMeshArraysSUN = getProcAddr("glDrawMeshArraysSUN")
	gl.glReplacementCodeuiSUN = getProcAddr("glReplacementCodeuiSUN")
	gl.glReplacementCodeusSUN = getProcAddr("glReplacementCodeusSUN")
	gl.glReplacementCodeubSUN = getProcAddr("glReplacementCodeubSUN")
	gl.glReplacementCodeuivSUN = getProcAddr("glReplacementCodeuivSUN")
	gl.glReplacementCodeusvSUN = getProcAddr("glReplacementCodeusvSUN")
	gl.glReplacementCodeubvSUN = getProcAddr("glReplacementCodeubvSUN")
	gl.glReplacementCodePointerSUN = getProcAddr("glReplacementCodePointerSUN")
	gl.glColor4ubVertex2fSUN = getProcAddr("glColor4ubVertex2fSUN")
	gl.glColor4ubVertex2fvSUN = getProcAddr("glColor4ubVertex2fvSUN")
	gl.glColor4ubVertex3fSUN = getProcAddr("glColor4ubVertex3fSUN")
	gl.glColor4ubVertex3fvSUN = getProcAddr("glColor4ubVertex3fvSUN")
	gl.glColor3fVertex3fSUN = getProcAddr("glColor3fVertex3fSUN")
	gl.glColor3fVertex3fvSUN = getProcAddr("glColor3fVertex3fvSUN")
	gl.glNormal3fVertex3fSUN = getProcAddr("glNormal3fVertex3fSUN")
	gl.glNormal3fVertex3fvSUN = getProcAddr("glNormal3fVertex3fvSUN")
	gl.glColor4fNormal3fVertex3fSUN = getProcAddr("glColor4fNormal3fVertex3fSUN")
	gl.glColor4fNormal3fVertex3fvSUN = getProcAddr("glColor4fNormal3fVertex3fvSUN")
	gl.glTexCoord2fVertex3fSUN = getProcAddr("glTexCoord2fVertex3fSUN")
	gl.glTexCoord2fVertex3fvSUN = getProcAddr("glTexCoord2fVertex3fvSUN")
	gl.glTexCoord4fVertex4fSUN = getProcAddr("glTexCoord4fVertex4fSUN")
	gl.glTexCoord4fVertex4fvSUN = getProcAddr("glTexCoord4fVertex4fvSUN")
	gl.glTexCoord2fColor4ubVertex3fSUN = getProcAddr("glTexCoord2fColor4ubVertex3fSUN")
	gl.glTexCoord2fColor4ubVertex3fvSUN = getProcAddr("glTexCoord2fColor4ubVertex3fvSUN")
	gl.glTexCoord2fColor3fVertex3fSUN = getProcAddr("glTexCoord2fColor3fVertex3fSUN")
	gl.glTexCoord2fColor3fVertex3fvSUN = getProcAddr("glTexCoord2fColor3fVertex3fvSUN")
	gl.glTexCoord2fNormal3fVertex3fSUN = getProcAddr("glTexCoord2fNormal3fVertex3fSUN")
	gl.glTexCoord2fNormal3fVertex3fvSUN = getProcAddr("glTexCoord2fNormal3fVertex3fvSUN")
	gl.glTexCoord2fColor4fNormal3fVertex3fSUN = getProcAddr("glTexCoord2fColor4fNormal3fVertex3fSUN")
	gl.glTexCoord2fColor4fNormal3fVertex3fvSUN = getProcAddr("glTexCoord2fColor4fNormal3fVertex3fvSUN")
	gl.glTexCoord4fColor4fNormal3fVertex4fSUN = getProcAddr("glTexCoord4fColor4fNormal3fVertex4fSUN")
	gl.glTexCoord4fColor4fNormal3fVertex4fvSUN = getProcAddr("glTexCoord4fColor4fNormal3fVertex4fvSUN")
	gl.glReplacementCodeuiVertex3fSUN = getProcAddr("glReplacementCodeuiVertex3fSUN")
	gl.glReplacementCodeuiVertex3fvSUN = getProcAddr("glReplacementCodeuiVertex3fvSUN")
	gl.glReplacementCodeuiColor4ubVertex3fSUN = getProcAddr("glReplacementCodeuiColor4ubVertex3fSUN")
	gl.glReplacementCodeuiColor4ubVertex3fvSUN = getProcAddr("glReplacementCodeuiColor4ubVertex3fvSUN")
	gl.glReplacementCodeuiColor3fVertex3fSUN = getProcAddr("glReplacementCodeuiColor3fVertex3fSUN")
	gl.glReplacementCodeuiColor3fVertex3fvSUN = getProcAddr("glReplacementCodeuiColor3fVertex3fvSUN")
	gl.glReplacementCodeuiNormal3fVertex3fSUN = getProcAddr("glReplacementCodeuiNormal3fVertex3fSUN")
	gl.glReplacementCodeuiNormal3fVertex3fvSUN = getProcAddr("glReplacementCodeuiNormal3fVertex3fvSUN")
	gl.glReplacementCodeuiColor4fNormal3fVertex3fSUN = getProcAddr("glReplacementCodeuiColor4fNormal3fVertex3fSUN")
	gl.glReplacementCodeuiColor4fNormal3fVertex3fvSUN = getProcAddr("glReplacementCodeuiColor4fNormal3fVertex3fvSUN")
	gl.glReplacementCodeuiTexCoord2fVertex3fSUN = getProcAddr("glReplacementCodeuiTexCoord2fVertex3fSUN")
	gl.glReplacementCodeuiTexCoord2fVertex3fvSUN = getProcAddr("glReplacementCodeuiTexCoord2fVertex3fvSUN")
	gl.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = getProcAddr("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN")
	gl.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = getProcAddr("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")
	gl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = getProcAddr("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN")
	gl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = getProcAddr("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")
}

type GLhandleARB C.GLhandleARB
type GLsync C.GLsync

const (
	CURRENT_BIT                                                           = 0x00000001
	POINT_BIT                                                             = 0x00000002
	LINE_BIT                                                              = 0x00000004
	POLYGON_BIT                                                           = 0x00000008
	POLYGON_STIPPLE_BIT                                                   = 0x00000010
	PIXEL_MODE_BIT                                                        = 0x00000020
	LIGHTING_BIT                                                          = 0x00000040
	FOG_BIT                                                               = 0x00000080
	DEPTH_BUFFER_BIT                                                      = 0x00000100
	ACCUM_BUFFER_BIT                                                      = 0x00000200
	STENCIL_BUFFER_BIT                                                    = 0x00000400
	VIEWPORT_BIT                                                          = 0x00000800
	TRANSFORM_BIT                                                         = 0x00001000
	ENABLE_BIT                                                            = 0x00002000
	COLOR_BUFFER_BIT                                                      = 0x00004000
	HINT_BIT                                                              = 0x00008000
	EVAL_BIT                                                              = 0x00010000
	LIST_BIT                                                              = 0x00020000
	TEXTURE_BIT                                                           = 0x00040000
	SCISSOR_BIT                                                           = 0x00080000
	MULTISAMPLE_BIT                                                       = 0x20000000
	MULTISAMPLE_BIT_ARB                                                   = 0x20000000
	MULTISAMPLE_BIT_EXT                                                   = 0x20000000
	MULTISAMPLE_BIT_3DFX                                                  = 0x20000000
	ALL_ATTRIB_BITS                                                       = 0xFFFFFFFF
	DYNAMIC_STORAGE_BIT                                                   = 0x0100
	DYNAMIC_STORAGE_BIT_EXT                                               = 0x0100
	CLIENT_STORAGE_BIT                                                    = 0x0200
	CLIENT_STORAGE_BIT_EXT                                                = 0x0200
	SPARSE_STORAGE_BIT_ARB                                                = 0x0400
	LGPU_SEPARATE_STORAGE_BIT_NVX                                         = 0x0800
	PER_GPU_STORAGE_BIT_NV                                                = 0x0800
	EXTERNAL_STORAGE_BIT_NVX                                              = 0x2000
	COVERAGE_BUFFER_BIT_NV                                                = 0x00008000
	CLIENT_PIXEL_STORE_BIT                                                = 0x00000001
	CLIENT_VERTEX_ARRAY_BIT                                               = 0x00000002
	CLIENT_ALL_ATTRIB_BITS                                                = 0xFFFFFFFF
	CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT                                   = 0x00000001
	CONTEXT_FLAG_DEBUG_BIT                                                = 0x00000002
	CONTEXT_FLAG_DEBUG_BIT_KHR                                            = 0x00000002
	CONTEXT_FLAG_ROBUST_ACCESS_BIT                                        = 0x00000004
	CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB                                    = 0x00000004
	CONTEXT_FLAG_NO_ERROR_BIT                                             = 0x00000008
	CONTEXT_FLAG_NO_ERROR_BIT_KHR                                         = 0x00000008
	CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT                                = 0x00000010
	CONTEXT_CORE_PROFILE_BIT                                              = 0x00000001
	CONTEXT_COMPATIBILITY_PROFILE_BIT                                     = 0x00000002
	MAP_READ_BIT                                                          = 0x0001
	MAP_READ_BIT_EXT                                                      = 0x0001
	MAP_WRITE_BIT                                                         = 0x0002
	MAP_WRITE_BIT_EXT                                                     = 0x0002
	MAP_INVALIDATE_RANGE_BIT                                              = 0x0004
	MAP_INVALIDATE_RANGE_BIT_EXT                                          = 0x0004
	MAP_INVALIDATE_BUFFER_BIT                                             = 0x0008
	MAP_INVALIDATE_BUFFER_BIT_EXT                                         = 0x0008
	MAP_FLUSH_EXPLICIT_BIT                                                = 0x0010
	MAP_FLUSH_EXPLICIT_BIT_EXT                                            = 0x0010
	MAP_UNSYNCHRONIZED_BIT                                                = 0x0020
	MAP_UNSYNCHRONIZED_BIT_EXT                                            = 0x0020
	MAP_PERSISTENT_BIT                                                    = 0x0040
	MAP_PERSISTENT_BIT_EXT                                                = 0x0040
	MAP_COHERENT_BIT                                                      = 0x0080
	MAP_COHERENT_BIT_EXT                                                  = 0x0080
	VERTEX_ATTRIB_ARRAY_BARRIER_BIT                                       = 0x00000001
	VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT                                   = 0x00000001
	ELEMENT_ARRAY_BARRIER_BIT                                             = 0x00000002
	ELEMENT_ARRAY_BARRIER_BIT_EXT                                         = 0x00000002
	UNIFORM_BARRIER_BIT                                                   = 0x00000004
	UNIFORM_BARRIER_BIT_EXT                                               = 0x00000004
	TEXTURE_FETCH_BARRIER_BIT                                             = 0x00000008
	TEXTURE_FETCH_BARRIER_BIT_EXT                                         = 0x00000008
	SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV                                   = 0x00000010
	SHADER_IMAGE_ACCESS_BARRIER_BIT                                       = 0x00000020
	SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT                                   = 0x00000020
	COMMAND_BARRIER_BIT                                                   = 0x00000040
	COMMAND_BARRIER_BIT_EXT                                               = 0x00000040
	PIXEL_BUFFER_BARRIER_BIT                                              = 0x00000080
	PIXEL_BUFFER_BARRIER_BIT_EXT                                          = 0x00000080
	TEXTURE_UPDATE_BARRIER_BIT                                            = 0x00000100
	TEXTURE_UPDATE_BARRIER_BIT_EXT                                        = 0x00000100
	BUFFER_UPDATE_BARRIER_BIT                                             = 0x00000200
	BUFFER_UPDATE_BARRIER_BIT_EXT                                         = 0x00000200
	FRAMEBUFFER_BARRIER_BIT                                               = 0x00000400
	FRAMEBUFFER_BARRIER_BIT_EXT                                           = 0x00000400
	TRANSFORM_FEEDBACK_BARRIER_BIT                                        = 0x00000800
	TRANSFORM_FEEDBACK_BARRIER_BIT_EXT                                    = 0x00000800
	ATOMIC_COUNTER_BARRIER_BIT                                            = 0x00001000
	ATOMIC_COUNTER_BARRIER_BIT_EXT                                        = 0x00001000
	SHADER_STORAGE_BARRIER_BIT                                            = 0x00002000
	CLIENT_MAPPED_BUFFER_BARRIER_BIT                                      = 0x00004000
	CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT                                  = 0x00004000
	QUERY_BUFFER_BARRIER_BIT                                              = 0x00008000
	ALL_BARRIER_BITS                                                      = 0xFFFFFFFF
	ALL_BARRIER_BITS_EXT                                                  = 0xFFFFFFFF
	QUERY_DEPTH_PASS_EVENT_BIT_AMD                                        = 0x00000001
	QUERY_DEPTH_FAIL_EVENT_BIT_AMD                                        = 0x00000002
	QUERY_STENCIL_FAIL_EVENT_BIT_AMD                                      = 0x00000004
	QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD                                 = 0x00000008
	QUERY_ALL_EVENT_BITS_AMD                                              = 0xFFFFFFFF
	SYNC_FLUSH_COMMANDS_BIT                                               = 0x00000001
	SYNC_FLUSH_COMMANDS_BIT_APPLE                                         = 0x00000001
	VERTEX_SHADER_BIT                                                     = 0x00000001
	VERTEX_SHADER_BIT_EXT                                                 = 0x00000001
	FRAGMENT_SHADER_BIT                                                   = 0x00000002
	FRAGMENT_SHADER_BIT_EXT                                               = 0x00000002
	GEOMETRY_SHADER_BIT                                                   = 0x00000004
	GEOMETRY_SHADER_BIT_EXT                                               = 0x00000004
	GEOMETRY_SHADER_BIT_OES                                               = 0x00000004
	TESS_CONTROL_SHADER_BIT                                               = 0x00000008
	TESS_CONTROL_SHADER_BIT_EXT                                           = 0x00000008
	TESS_CONTROL_SHADER_BIT_OES                                           = 0x00000008
	TESS_EVALUATION_SHADER_BIT                                            = 0x00000010
	TESS_EVALUATION_SHADER_BIT_EXT                                        = 0x00000010
	TESS_EVALUATION_SHADER_BIT_OES                                        = 0x00000010
	COMPUTE_SHADER_BIT                                                    = 0x00000020
	MESH_SHADER_BIT_NV                                                    = 0x00000040
	TASK_SHADER_BIT_NV                                                    = 0x00000080
	ALL_SHADER_BITS                                                       = 0xFFFFFFFF
	ALL_SHADER_BITS_EXT                                                   = 0xFFFFFFFF
	SUBGROUP_FEATURE_BASIC_BIT_KHR                                        = 0x00000001
	SUBGROUP_FEATURE_VOTE_BIT_KHR                                         = 0x00000002
	SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR                                   = 0x00000004
	SUBGROUP_FEATURE_BALLOT_BIT_KHR                                       = 0x00000008
	SUBGROUP_FEATURE_SHUFFLE_BIT_KHR                                      = 0x00000010
	SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR                             = 0x00000020
	SUBGROUP_FEATURE_CLUSTERED_BIT_KHR                                    = 0x00000040
	SUBGROUP_FEATURE_QUAD_BIT_KHR                                         = 0x00000080
	SUBGROUP_FEATURE_PARTITIONED_BIT_NV                                   = 0x00000100
	TEXTURE_STORAGE_SPARSE_BIT_AMD                                        = 0x00000001
	RED_BIT_ATI                                                           = 0x00000001
	GREEN_BIT_ATI                                                         = 0x00000002
	BLUE_BIT_ATI                                                          = 0x00000004
	GL_2X_BIT_ATI                                                         = 0x00000001
	GL_4X_BIT_ATI                                                         = 0x00000002
	GL_8X_BIT_ATI                                                         = 0x00000004
	HALF_BIT_ATI                                                          = 0x00000008
	QUARTER_BIT_ATI                                                       = 0x00000010
	EIGHTH_BIT_ATI                                                        = 0x00000020
	SATURATE_BIT_ATI                                                      = 0x00000040
	COMP_BIT_ATI                                                          = 0x00000002
	NEGATE_BIT_ATI                                                        = 0x00000004
	BIAS_BIT_ATI                                                          = 0x00000008
	TRACE_OPERATIONS_BIT_MESA                                             = 0x0001
	TRACE_PRIMITIVES_BIT_MESA                                             = 0x0002
	TRACE_ARRAYS_BIT_MESA                                                 = 0x0004
	TRACE_TEXTURES_BIT_MESA                                               = 0x0008
	TRACE_PIXELS_BIT_MESA                                                 = 0x0010
	TRACE_ERRORS_BIT_MESA                                                 = 0x0020
	TRACE_ALL_BITS_MESA                                                   = 0xFFFF
	BOLD_BIT_NV                                                           = 0x01
	ITALIC_BIT_NV                                                         = 0x02
	GLYPH_WIDTH_BIT_NV                                                    = 0x01
	GLYPH_HEIGHT_BIT_NV                                                   = 0x02
	GLYPH_HORIZONTAL_BEARING_X_BIT_NV                                     = 0x04
	GLYPH_HORIZONTAL_BEARING_Y_BIT_NV                                     = 0x08
	GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV                               = 0x10
	GLYPH_VERTICAL_BEARING_X_BIT_NV                                       = 0x20
	GLYPH_VERTICAL_BEARING_Y_BIT_NV                                       = 0x40
	GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV                                 = 0x80
	GLYPH_HAS_KERNING_BIT_NV                                              = 0x100
	FONT_X_MIN_BOUNDS_BIT_NV                                              = 0x00010000
	FONT_Y_MIN_BOUNDS_BIT_NV                                              = 0x00020000
	FONT_X_MAX_BOUNDS_BIT_NV                                              = 0x00040000
	FONT_Y_MAX_BOUNDS_BIT_NV                                              = 0x00080000
	FONT_UNITS_PER_EM_BIT_NV                                              = 0x00100000
	FONT_ASCENDER_BIT_NV                                                  = 0x00200000
	FONT_DESCENDER_BIT_NV                                                 = 0x00400000
	FONT_HEIGHT_BIT_NV                                                    = 0x00800000
	FONT_MAX_ADVANCE_WIDTH_BIT_NV                                         = 0x01000000
	FONT_MAX_ADVANCE_HEIGHT_BIT_NV                                        = 0x02000000
	FONT_UNDERLINE_POSITION_BIT_NV                                        = 0x04000000
	FONT_UNDERLINE_THICKNESS_BIT_NV                                       = 0x08000000
	FONT_HAS_KERNING_BIT_NV                                               = 0x10000000
	FONT_NUM_GLYPH_INDICES_BIT_NV                                         = 0x20000000
	PERFQUERY_SINGLE_CONTEXT_INTEL                                        = 0x00000000
	PERFQUERY_GLOBAL_CONTEXT_INTEL                                        = 0x00000001
	VERTEX23_BIT_PGI                                                      = 0x00000004
	VERTEX4_BIT_PGI                                                       = 0x00000008
	COLOR3_BIT_PGI                                                        = 0x00010000
	COLOR4_BIT_PGI                                                        = 0x00020000
	EDGEFLAG_BIT_PGI                                                      = 0x00040000
	INDEX_BIT_PGI                                                         = 0x00080000
	MAT_AMBIENT_BIT_PGI                                                   = 0x00100000
	MAT_AMBIENT_AND_DIFFUSE_BIT_PGI                                       = 0x00200000
	MAT_DIFFUSE_BIT_PGI                                                   = 0x00400000
	MAT_EMISSION_BIT_PGI                                                  = 0x00800000
	MAT_COLOR_INDEXES_BIT_PGI                                             = 0x01000000
	MAT_SHININESS_BIT_PGI                                                 = 0x02000000
	MAT_SPECULAR_BIT_PGI                                                  = 0x04000000
	NORMAL_BIT_PGI                                                        = 0x08000000
	TEXCOORD1_BIT_PGI                                                     = 0x10000000
	TEXCOORD2_BIT_PGI                                                     = 0x20000000
	TEXCOORD3_BIT_PGI                                                     = 0x40000000
	TEXCOORD4_BIT_PGI                                                     = 0x80000000
	COLOR_BUFFER_BIT0_QCOM                                                = 0x00000001
	COLOR_BUFFER_BIT1_QCOM                                                = 0x00000002
	COLOR_BUFFER_BIT2_QCOM                                                = 0x00000004
	COLOR_BUFFER_BIT3_QCOM                                                = 0x00000008
	COLOR_BUFFER_BIT4_QCOM                                                = 0x00000010
	COLOR_BUFFER_BIT5_QCOM                                                = 0x00000020
	COLOR_BUFFER_BIT6_QCOM                                                = 0x00000040
	COLOR_BUFFER_BIT7_QCOM                                                = 0x00000080
	DEPTH_BUFFER_BIT0_QCOM                                                = 0x00000100
	DEPTH_BUFFER_BIT1_QCOM                                                = 0x00000200
	DEPTH_BUFFER_BIT2_QCOM                                                = 0x00000400
	DEPTH_BUFFER_BIT3_QCOM                                                = 0x00000800
	DEPTH_BUFFER_BIT4_QCOM                                                = 0x00001000
	DEPTH_BUFFER_BIT5_QCOM                                                = 0x00002000
	DEPTH_BUFFER_BIT6_QCOM                                                = 0x00004000
	DEPTH_BUFFER_BIT7_QCOM                                                = 0x00008000
	STENCIL_BUFFER_BIT0_QCOM                                              = 0x00010000
	STENCIL_BUFFER_BIT1_QCOM                                              = 0x00020000
	STENCIL_BUFFER_BIT2_QCOM                                              = 0x00040000
	STENCIL_BUFFER_BIT3_QCOM                                              = 0x00080000
	STENCIL_BUFFER_BIT4_QCOM                                              = 0x00100000
	STENCIL_BUFFER_BIT5_QCOM                                              = 0x00200000
	STENCIL_BUFFER_BIT6_QCOM                                              = 0x00400000
	STENCIL_BUFFER_BIT7_QCOM                                              = 0x00800000
	MULTISAMPLE_BUFFER_BIT0_QCOM                                          = 0x01000000
	MULTISAMPLE_BUFFER_BIT1_QCOM                                          = 0x02000000
	MULTISAMPLE_BUFFER_BIT2_QCOM                                          = 0x04000000
	MULTISAMPLE_BUFFER_BIT3_QCOM                                          = 0x08000000
	MULTISAMPLE_BUFFER_BIT4_QCOM                                          = 0x10000000
	MULTISAMPLE_BUFFER_BIT5_QCOM                                          = 0x20000000
	MULTISAMPLE_BUFFER_BIT6_QCOM                                          = 0x40000000
	MULTISAMPLE_BUFFER_BIT7_QCOM                                          = 0x80000000
	FOVEATION_ENABLE_BIT_QCOM                                             = 0x00000001
	FOVEATION_SCALED_BIN_METHOD_BIT_QCOM                                  = 0x00000002
	FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM                           = 0x00000004
	TEXTURE_DEFORMATION_BIT_SGIX                                          = 0x00000001
	GEOMETRY_DEFORMATION_BIT_SGIX                                         = 0x00000002
	TERMINATE_SEQUENCE_COMMAND_NV                                         = 0x0000
	NOP_COMMAND_NV                                                        = 0x0001
	DRAW_ELEMENTS_COMMAND_NV                                              = 0x0002
	DRAW_ARRAYS_COMMAND_NV                                                = 0x0003
	DRAW_ELEMENTS_STRIP_COMMAND_NV                                        = 0x0004
	DRAW_ARRAYS_STRIP_COMMAND_NV                                          = 0x0005
	DRAW_ELEMENTS_INSTANCED_COMMAND_NV                                    = 0x0006
	DRAW_ARRAYS_INSTANCED_COMMAND_NV                                      = 0x0007
	ELEMENT_ADDRESS_COMMAND_NV                                            = 0x0008
	ATTRIBUTE_ADDRESS_COMMAND_NV                                          = 0x0009
	UNIFORM_ADDRESS_COMMAND_NV                                            = 0x000A
	BLEND_COLOR_COMMAND_NV                                                = 0x000B
	STENCIL_REF_COMMAND_NV                                                = 0x000C
	LINE_WIDTH_COMMAND_NV                                                 = 0x000D
	POLYGON_OFFSET_COMMAND_NV                                             = 0x000E
	ALPHA_REF_COMMAND_NV                                                  = 0x000F
	VIEWPORT_COMMAND_NV                                                   = 0x0010
	SCISSOR_COMMAND_NV                                                    = 0x0011
	FRONT_FACE_COMMAND_NV                                                 = 0x0012
	LAYOUT_DEFAULT_INTEL                                                  = 0
	LAYOUT_LINEAR_INTEL                                                   = 1
	LAYOUT_LINEAR_CPU_CACHED_INTEL                                        = 2
	CLOSE_PATH_NV                                                         = 0x00
	MOVE_TO_NV                                                            = 0x02
	RELATIVE_MOVE_TO_NV                                                   = 0x03
	LINE_TO_NV                                                            = 0x04
	RELATIVE_LINE_TO_NV                                                   = 0x05
	HORIZONTAL_LINE_TO_NV                                                 = 0x06
	RELATIVE_HORIZONTAL_LINE_TO_NV                                        = 0x07
	VERTICAL_LINE_TO_NV                                                   = 0x08
	RELATIVE_VERTICAL_LINE_TO_NV                                          = 0x09
	QUADRATIC_CURVE_TO_NV                                                 = 0x0A
	RELATIVE_QUADRATIC_CURVE_TO_NV                                        = 0x0B
	CUBIC_CURVE_TO_NV                                                     = 0x0C
	RELATIVE_CUBIC_CURVE_TO_NV                                            = 0x0D
	SMOOTH_QUADRATIC_CURVE_TO_NV                                          = 0x0E
	RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV                                 = 0x0F
	SMOOTH_CUBIC_CURVE_TO_NV                                              = 0x10
	RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV                                     = 0x11
	SMALL_CCW_ARC_TO_NV                                                   = 0x12
	RELATIVE_SMALL_CCW_ARC_TO_NV                                          = 0x13
	SMALL_CW_ARC_TO_NV                                                    = 0x14
	RELATIVE_SMALL_CW_ARC_TO_NV                                           = 0x15
	LARGE_CCW_ARC_TO_NV                                                   = 0x16
	RELATIVE_LARGE_CCW_ARC_TO_NV                                          = 0x17
	LARGE_CW_ARC_TO_NV                                                    = 0x18
	RELATIVE_LARGE_CW_ARC_TO_NV                                           = 0x19
	CONIC_CURVE_TO_NV                                                     = 0x1A
	RELATIVE_CONIC_CURVE_TO_NV                                            = 0x1B
	SHARED_EDGE_NV                                                        = 0xC0
	ROUNDED_RECT_NV                                                       = 0xE8
	RELATIVE_ROUNDED_RECT_NV                                              = 0xE9
	ROUNDED_RECT2_NV                                                      = 0xEA
	RELATIVE_ROUNDED_RECT2_NV                                             = 0xEB
	ROUNDED_RECT4_NV                                                      = 0xEC
	RELATIVE_ROUNDED_RECT4_NV                                             = 0xED
	ROUNDED_RECT8_NV                                                      = 0xEE
	RELATIVE_ROUNDED_RECT8_NV                                             = 0xEF
	RESTART_PATH_NV                                                       = 0xF0
	DUP_FIRST_CUBIC_CURVE_TO_NV                                           = 0xF2
	DUP_LAST_CUBIC_CURVE_TO_NV                                            = 0xF4
	RECT_NV                                                               = 0xF6
	RELATIVE_RECT_NV                                                      = 0xF7
	CIRCULAR_CCW_ARC_TO_NV                                                = 0xF8
	CIRCULAR_CW_ARC_TO_NV                                                 = 0xFA
	CIRCULAR_TANGENT_ARC_TO_NV                                            = 0xFC
	ARC_TO_NV                                                             = 0xFE
	RELATIVE_ARC_TO_NV                                                    = 0xFF
	NEXT_BUFFER_NV                                                        = -2
	SKIP_COMPONENTS4_NV                                                   = -3
	SKIP_COMPONENTS3_NV                                                   = -4
	SKIP_COMPONENTS2_NV                                                   = -5
	SKIP_COMPONENTS1_NV                                                   = -6
	RESTART_SUN                                                           = 0x0001
	REPLACE_MIDDLE_SUN                                                    = 0x0002
	REPLACE_OLDEST_SUN                                                    = 0x0003
	FALSE                                                                 = 0
	NO_ERROR                                                              = 0
	ZERO                                                                  = 0
	NONE                                                                  = 0
	NONE_OES                                                              = 0
	TRUE                                                                  = 1
	ONE                                                                   = 1
	INVALID_INDEX                                                         = 0xFFFFFFFF
	ALL_PIXELS_AMD                                                        = 0xFFFFFFFF
	TIMEOUT_IGNORED                                                       = 0xFFFFFFFFFFFFFFFF
	TIMEOUT_IGNORED_APPLE                                                 = 0xFFFFFFFFFFFFFFFF
	VERSION_ES_CL_1_0                                                     = 1
	VERSION_ES_CM_1_1                                                     = 1
	VERSION_ES_CL_1_1                                                     = 1
	UUID_SIZE_EXT                                                         = 16
	LUID_SIZE_EXT                                                         = 8
	POINTS                                                                = 0x0000
	LINES                                                                 = 0x0001
	LINE_LOOP                                                             = 0x0002
	LINE_STRIP                                                            = 0x0003
	TRIANGLES                                                             = 0x0004
	TRIANGLE_STRIP                                                        = 0x0005
	TRIANGLE_FAN                                                          = 0x0006
	QUADS                                                                 = 0x0007
	QUADS_EXT                                                             = 0x0007
	QUADS_OES                                                             = 0x0007
	QUAD_STRIP                                                            = 0x0008
	POLYGON                                                               = 0x0009
	LINES_ADJACENCY                                                       = 0x000A
	LINES_ADJACENCY_ARB                                                   = 0x000A
	LINES_ADJACENCY_EXT                                                   = 0x000A
	LINES_ADJACENCY_OES                                                   = 0x000A
	LINE_STRIP_ADJACENCY                                                  = 0x000B
	LINE_STRIP_ADJACENCY_ARB                                              = 0x000B
	LINE_STRIP_ADJACENCY_EXT                                              = 0x000B
	LINE_STRIP_ADJACENCY_OES                                              = 0x000B
	TRIANGLES_ADJACENCY                                                   = 0x000C
	TRIANGLES_ADJACENCY_ARB                                               = 0x000C
	TRIANGLES_ADJACENCY_EXT                                               = 0x000C
	TRIANGLES_ADJACENCY_OES                                               = 0x000C
	TRIANGLE_STRIP_ADJACENCY                                              = 0x000D
	TRIANGLE_STRIP_ADJACENCY_ARB                                          = 0x000D
	TRIANGLE_STRIP_ADJACENCY_EXT                                          = 0x000D
	TRIANGLE_STRIP_ADJACENCY_OES                                          = 0x000D
	PATCHES                                                               = 0x000E
	PATCHES_EXT                                                           = 0x000E
	PATCHES_OES                                                           = 0x000E
	ACCUM                                                                 = 0x0100
	LOAD                                                                  = 0x0101
	RETURN                                                                = 0x0102
	MULT                                                                  = 0x0103
	ADD                                                                   = 0x0104
	NEVER                                                                 = 0x0200
	LESS                                                                  = 0x0201
	EQUAL                                                                 = 0x0202
	LEQUAL                                                                = 0x0203
	GREATER                                                               = 0x0204
	NOTEQUAL                                                              = 0x0205
	GEQUAL                                                                = 0x0206
	ALWAYS                                                                = 0x0207
	SRC_COLOR                                                             = 0x0300
	ONE_MINUS_SRC_COLOR                                                   = 0x0301
	SRC_ALPHA                                                             = 0x0302
	ONE_MINUS_SRC_ALPHA                                                   = 0x0303
	DST_ALPHA                                                             = 0x0304
	ONE_MINUS_DST_ALPHA                                                   = 0x0305
	DST_COLOR                                                             = 0x0306
	ONE_MINUS_DST_COLOR                                                   = 0x0307
	SRC_ALPHA_SATURATE                                                    = 0x0308
	SRC_ALPHA_SATURATE_EXT                                                = 0x0308
	FRONT_LEFT                                                            = 0x0400
	FRONT_RIGHT                                                           = 0x0401
	BACK_LEFT                                                             = 0x0402
	BACK_RIGHT                                                            = 0x0403
	FRONT                                                                 = 0x0404
	BACK                                                                  = 0x0405
	LEFT                                                                  = 0x0406
	RIGHT                                                                 = 0x0407
	FRONT_AND_BACK                                                        = 0x0408
	AUX0                                                                  = 0x0409
	AUX1                                                                  = 0x040A
	AUX2                                                                  = 0x040B
	AUX3                                                                  = 0x040C
	INVALID_ENUM                                                          = 0x0500
	INVALID_VALUE                                                         = 0x0501
	INVALID_OPERATION                                                     = 0x0502
	STACK_OVERFLOW                                                        = 0x0503
	STACK_OVERFLOW_KHR                                                    = 0x0503
	STACK_UNDERFLOW                                                       = 0x0504
	STACK_UNDERFLOW_KHR                                                   = 0x0504
	OUT_OF_MEMORY                                                         = 0x0505
	INVALID_FRAMEBUFFER_OPERATION                                         = 0x0506
	INVALID_FRAMEBUFFER_OPERATION_EXT                                     = 0x0506
	INVALID_FRAMEBUFFER_OPERATION_OES                                     = 0x0506
	CONTEXT_LOST                                                          = 0x0507
	CONTEXT_LOST_KHR                                                      = 0x0507
	GL_2D                                                                 = 0x0600
	GL_3D                                                                 = 0x0601
	GL_3D_COLOR                                                           = 0x0602
	GL_3D_COLOR_TEXTURE                                                   = 0x0603
	GL_4D_COLOR_TEXTURE                                                   = 0x0604
	PASS_THROUGH_TOKEN                                                    = 0x0700
	POINT_TOKEN                                                           = 0x0701
	LINE_TOKEN                                                            = 0x0702
	POLYGON_TOKEN                                                         = 0x0703
	BITMAP_TOKEN                                                          = 0x0704
	DRAW_PIXEL_TOKEN                                                      = 0x0705
	COPY_PIXEL_TOKEN                                                      = 0x0706
	LINE_RESET_TOKEN                                                      = 0x0707
	EXP                                                                   = 0x0800
	EXP2                                                                  = 0x0801
	CW                                                                    = 0x0900
	CCW                                                                   = 0x0901
	COEFF                                                                 = 0x0A00
	ORDER                                                                 = 0x0A01
	DOMAIN                                                                = 0x0A02
	CURRENT_COLOR                                                         = 0x0B00
	CURRENT_INDEX                                                         = 0x0B01
	CURRENT_NORMAL                                                        = 0x0B02
	CURRENT_TEXTURE_COORDS                                                = 0x0B03
	CURRENT_RASTER_COLOR                                                  = 0x0B04
	CURRENT_RASTER_INDEX                                                  = 0x0B05
	CURRENT_RASTER_TEXTURE_COORDS                                         = 0x0B06
	CURRENT_RASTER_POSITION                                               = 0x0B07
	CURRENT_RASTER_POSITION_VALID                                         = 0x0B08
	CURRENT_RASTER_DISTANCE                                               = 0x0B09
	POINT_SMOOTH                                                          = 0x0B10
	POINT_SIZE                                                            = 0x0B11
	POINT_SIZE_RANGE                                                      = 0x0B12
	SMOOTH_POINT_SIZE_RANGE                                               = 0x0B12
	POINT_SIZE_GRANULARITY                                                = 0x0B13
	SMOOTH_POINT_SIZE_GRANULARITY                                         = 0x0B13
	LINE_SMOOTH                                                           = 0x0B20
	LINE_WIDTH                                                            = 0x0B21
	LINE_WIDTH_RANGE                                                      = 0x0B22
	SMOOTH_LINE_WIDTH_RANGE                                               = 0x0B22
	LINE_WIDTH_GRANULARITY                                                = 0x0B23
	SMOOTH_LINE_WIDTH_GRANULARITY                                         = 0x0B23
	LINE_STIPPLE                                                          = 0x0B24
	LINE_STIPPLE_PATTERN                                                  = 0x0B25
	LINE_STIPPLE_REPEAT                                                   = 0x0B26
	LIST_MODE                                                             = 0x0B30
	MAX_LIST_NESTING                                                      = 0x0B31
	LIST_BASE                                                             = 0x0B32
	LIST_INDEX                                                            = 0x0B33
	POLYGON_MODE                                                          = 0x0B40
	POLYGON_MODE_NV                                                       = 0x0B40
	POLYGON_SMOOTH                                                        = 0x0B41
	POLYGON_STIPPLE                                                       = 0x0B42
	EDGE_FLAG                                                             = 0x0B43
	CULL_FACE                                                             = 0x0B44
	CULL_FACE_MODE                                                        = 0x0B45
	FRONT_FACE                                                            = 0x0B46
	LIGHTING                                                              = 0x0B50
	LIGHT_MODEL_LOCAL_VIEWER                                              = 0x0B51
	LIGHT_MODEL_TWO_SIDE                                                  = 0x0B52
	LIGHT_MODEL_AMBIENT                                                   = 0x0B53
	SHADE_MODEL                                                           = 0x0B54
	COLOR_MATERIAL_FACE                                                   = 0x0B55
	COLOR_MATERIAL_PARAMETER                                              = 0x0B56
	COLOR_MATERIAL                                                        = 0x0B57
	FOG                                                                   = 0x0B60
	FOG_INDEX                                                             = 0x0B61
	FOG_DENSITY                                                           = 0x0B62
	FOG_START                                                             = 0x0B63
	FOG_END                                                               = 0x0B64
	FOG_MODE                                                              = 0x0B65
	FOG_COLOR                                                             = 0x0B66
	DEPTH_RANGE                                                           = 0x0B70
	DEPTH_TEST                                                            = 0x0B71
	DEPTH_WRITEMASK                                                       = 0x0B72
	DEPTH_CLEAR_VALUE                                                     = 0x0B73
	DEPTH_FUNC                                                            = 0x0B74
	ACCUM_CLEAR_VALUE                                                     = 0x0B80
	STENCIL_TEST                                                          = 0x0B90
	STENCIL_CLEAR_VALUE                                                   = 0x0B91
	STENCIL_FUNC                                                          = 0x0B92
	STENCIL_VALUE_MASK                                                    = 0x0B93
	STENCIL_FAIL                                                          = 0x0B94
	STENCIL_PASS_DEPTH_FAIL                                               = 0x0B95
	STENCIL_PASS_DEPTH_PASS                                               = 0x0B96
	STENCIL_REF                                                           = 0x0B97
	STENCIL_WRITEMASK                                                     = 0x0B98
	MATRIX_MODE                                                           = 0x0BA0
	NORMALIZE                                                             = 0x0BA1
	VIEWPORT                                                              = 0x0BA2
	MODELVIEW_STACK_DEPTH                                                 = 0x0BA3
	MODELVIEW0_STACK_DEPTH_EXT                                            = 0x0BA3
	PATH_MODELVIEW_STACK_DEPTH_NV                                         = 0x0BA3
	PROJECTION_STACK_DEPTH                                                = 0x0BA4
	PATH_PROJECTION_STACK_DEPTH_NV                                        = 0x0BA4
	TEXTURE_STACK_DEPTH                                                   = 0x0BA5
	MODELVIEW_MATRIX                                                      = 0x0BA6
	MODELVIEW0_MATRIX_EXT                                                 = 0x0BA6
	PATH_MODELVIEW_MATRIX_NV                                              = 0x0BA6
	PROJECTION_MATRIX                                                     = 0x0BA7
	PATH_PROJECTION_MATRIX_NV                                             = 0x0BA7
	TEXTURE_MATRIX                                                        = 0x0BA8
	ATTRIB_STACK_DEPTH                                                    = 0x0BB0
	CLIENT_ATTRIB_STACK_DEPTH                                             = 0x0BB1
	ALPHA_TEST                                                            = 0x0BC0
	ALPHA_TEST_QCOM                                                       = 0x0BC0
	ALPHA_TEST_FUNC                                                       = 0x0BC1
	ALPHA_TEST_FUNC_QCOM                                                  = 0x0BC1
	ALPHA_TEST_REF                                                        = 0x0BC2
	ALPHA_TEST_REF_QCOM                                                   = 0x0BC2
	DITHER                                                                = 0x0BD0
	BLEND_DST                                                             = 0x0BE0
	BLEND_SRC                                                             = 0x0BE1
	BLEND                                                                 = 0x0BE2
	LOGIC_OP_MODE                                                         = 0x0BF0
	INDEX_LOGIC_OP                                                        = 0x0BF1
	LOGIC_OP                                                              = 0x0BF1
	COLOR_LOGIC_OP                                                        = 0x0BF2
	AUX_BUFFERS                                                           = 0x0C00
	DRAW_BUFFER                                                           = 0x0C01
	DRAW_BUFFER_EXT                                                       = 0x0C01
	READ_BUFFER                                                           = 0x0C02
	READ_BUFFER_EXT                                                       = 0x0C02
	READ_BUFFER_NV                                                        = 0x0C02
	SCISSOR_BOX                                                           = 0x0C10
	SCISSOR_TEST                                                          = 0x0C11
	INDEX_CLEAR_VALUE                                                     = 0x0C20
	INDEX_WRITEMASK                                                       = 0x0C21
	COLOR_CLEAR_VALUE                                                     = 0x0C22
	COLOR_WRITEMASK                                                       = 0x0C23
	INDEX_MODE                                                            = 0x0C30
	RGBA_MODE                                                             = 0x0C31
	DOUBLEBUFFER                                                          = 0x0C32
	STEREO                                                                = 0x0C33
	RENDER_MODE                                                           = 0x0C40
	PERSPECTIVE_CORRECTION_HINT                                           = 0x0C50
	POINT_SMOOTH_HINT                                                     = 0x0C51
	LINE_SMOOTH_HINT                                                      = 0x0C52
	POLYGON_SMOOTH_HINT                                                   = 0x0C53
	FOG_HINT                                                              = 0x0C54
	TEXTURE_GEN_S                                                         = 0x0C60
	TEXTURE_GEN_T                                                         = 0x0C61
	TEXTURE_GEN_R                                                         = 0x0C62
	TEXTURE_GEN_Q                                                         = 0x0C63
	PIXEL_MAP_I_TO_I                                                      = 0x0C70
	PIXEL_MAP_S_TO_S                                                      = 0x0C71
	PIXEL_MAP_I_TO_R                                                      = 0x0C72
	PIXEL_MAP_I_TO_G                                                      = 0x0C73
	PIXEL_MAP_I_TO_B                                                      = 0x0C74
	PIXEL_MAP_I_TO_A                                                      = 0x0C75
	PIXEL_MAP_R_TO_R                                                      = 0x0C76
	PIXEL_MAP_G_TO_G                                                      = 0x0C77
	PIXEL_MAP_B_TO_B                                                      = 0x0C78
	PIXEL_MAP_A_TO_A                                                      = 0x0C79
	PIXEL_MAP_I_TO_I_SIZE                                                 = 0x0CB0
	PIXEL_MAP_S_TO_S_SIZE                                                 = 0x0CB1
	PIXEL_MAP_I_TO_R_SIZE                                                 = 0x0CB2
	PIXEL_MAP_I_TO_G_SIZE                                                 = 0x0CB3
	PIXEL_MAP_I_TO_B_SIZE                                                 = 0x0CB4
	PIXEL_MAP_I_TO_A_SIZE                                                 = 0x0CB5
	PIXEL_MAP_R_TO_R_SIZE                                                 = 0x0CB6
	PIXEL_MAP_G_TO_G_SIZE                                                 = 0x0CB7
	PIXEL_MAP_B_TO_B_SIZE                                                 = 0x0CB8
	PIXEL_MAP_A_TO_A_SIZE                                                 = 0x0CB9
	UNPACK_SWAP_BYTES                                                     = 0x0CF0
	UNPACK_LSB_FIRST                                                      = 0x0CF1
	UNPACK_ROW_LENGTH                                                     = 0x0CF2
	UNPACK_ROW_LENGTH_EXT                                                 = 0x0CF2
	UNPACK_SKIP_ROWS                                                      = 0x0CF3
	UNPACK_SKIP_ROWS_EXT                                                  = 0x0CF3
	UNPACK_SKIP_PIXELS                                                    = 0x0CF4
	UNPACK_SKIP_PIXELS_EXT                                                = 0x0CF4
	UNPACK_ALIGNMENT                                                      = 0x0CF5
	PACK_SWAP_BYTES                                                       = 0x0D00
	PACK_LSB_FIRST                                                        = 0x0D01
	PACK_ROW_LENGTH                                                       = 0x0D02
	PACK_SKIP_ROWS                                                        = 0x0D03
	PACK_SKIP_PIXELS                                                      = 0x0D04
	PACK_ALIGNMENT                                                        = 0x0D05
	MAP_COLOR                                                             = 0x0D10
	MAP_STENCIL                                                           = 0x0D11
	INDEX_SHIFT                                                           = 0x0D12
	INDEX_OFFSET                                                          = 0x0D13
	RED_SCALE                                                             = 0x0D14
	RED_BIAS                                                              = 0x0D15
	ZOOM_X                                                                = 0x0D16
	ZOOM_Y                                                                = 0x0D17
	GREEN_SCALE                                                           = 0x0D18
	GREEN_BIAS                                                            = 0x0D19
	BLUE_SCALE                                                            = 0x0D1A
	BLUE_BIAS                                                             = 0x0D1B
	ALPHA_SCALE                                                           = 0x0D1C
	ALPHA_BIAS                                                            = 0x0D1D
	DEPTH_SCALE                                                           = 0x0D1E
	DEPTH_BIAS                                                            = 0x0D1F
	MAX_EVAL_ORDER                                                        = 0x0D30
	MAX_LIGHTS                                                            = 0x0D31
	MAX_CLIP_PLANES                                                       = 0x0D32
	MAX_CLIP_PLANES_IMG                                                   = 0x0D32
	MAX_CLIP_DISTANCES                                                    = 0x0D32
	MAX_CLIP_DISTANCES_EXT                                                = 0x0D32
	MAX_CLIP_DISTANCES_APPLE                                              = 0x0D32
	MAX_TEXTURE_SIZE                                                      = 0x0D33
	MAX_PIXEL_MAP_TABLE                                                   = 0x0D34
	MAX_ATTRIB_STACK_DEPTH                                                = 0x0D35
	MAX_MODELVIEW_STACK_DEPTH                                             = 0x0D36
	PATH_MAX_MODELVIEW_STACK_DEPTH_NV                                     = 0x0D36
	MAX_NAME_STACK_DEPTH                                                  = 0x0D37
	MAX_PROJECTION_STACK_DEPTH                                            = 0x0D38
	PATH_MAX_PROJECTION_STACK_DEPTH_NV                                    = 0x0D38
	MAX_TEXTURE_STACK_DEPTH                                               = 0x0D39
	MAX_VIEWPORT_DIMS                                                     = 0x0D3A
	MAX_CLIENT_ATTRIB_STACK_DEPTH                                         = 0x0D3B
	SUBPIXEL_BITS                                                         = 0x0D50
	INDEX_BITS                                                            = 0x0D51
	RED_BITS                                                              = 0x0D52
	GREEN_BITS                                                            = 0x0D53
	BLUE_BITS                                                             = 0x0D54
	ALPHA_BITS                                                            = 0x0D55
	DEPTH_BITS                                                            = 0x0D56
	STENCIL_BITS                                                          = 0x0D57
	ACCUM_RED_BITS                                                        = 0x0D58
	ACCUM_GREEN_BITS                                                      = 0x0D59
	ACCUM_BLUE_BITS                                                       = 0x0D5A
	ACCUM_ALPHA_BITS                                                      = 0x0D5B
	NAME_STACK_DEPTH                                                      = 0x0D70
	AUTO_NORMAL                                                           = 0x0D80
	MAP1_COLOR_4                                                          = 0x0D90
	MAP1_INDEX                                                            = 0x0D91
	MAP1_NORMAL                                                           = 0x0D92
	MAP1_TEXTURE_COORD_1                                                  = 0x0D93
	MAP1_TEXTURE_COORD_2                                                  = 0x0D94
	MAP1_TEXTURE_COORD_3                                                  = 0x0D95
	MAP1_TEXTURE_COORD_4                                                  = 0x0D96
	MAP1_VERTEX_3                                                         = 0x0D97
	MAP1_VERTEX_4                                                         = 0x0D98
	MAP2_COLOR_4                                                          = 0x0DB0
	MAP2_INDEX                                                            = 0x0DB1
	MAP2_NORMAL                                                           = 0x0DB2
	MAP2_TEXTURE_COORD_1                                                  = 0x0DB3
	MAP2_TEXTURE_COORD_2                                                  = 0x0DB4
	MAP2_TEXTURE_COORD_3                                                  = 0x0DB5
	MAP2_TEXTURE_COORD_4                                                  = 0x0DB6
	MAP2_VERTEX_3                                                         = 0x0DB7
	MAP2_VERTEX_4                                                         = 0x0DB8
	MAP1_GRID_DOMAIN                                                      = 0x0DD0
	MAP1_GRID_SEGMENTS                                                    = 0x0DD1
	MAP2_GRID_DOMAIN                                                      = 0x0DD2
	MAP2_GRID_SEGMENTS                                                    = 0x0DD3
	TEXTURE_1D                                                            = 0x0DE0
	TEXTURE_2D                                                            = 0x0DE1
	FEEDBACK_BUFFER_POINTER                                               = 0x0DF0
	FEEDBACK_BUFFER_SIZE                                                  = 0x0DF1
	FEEDBACK_BUFFER_TYPE                                                  = 0x0DF2
	SELECTION_BUFFER_POINTER                                              = 0x0DF3
	SELECTION_BUFFER_SIZE                                                 = 0x0DF4
	TEXTURE_WIDTH                                                         = 0x1000
	TEXTURE_HEIGHT                                                        = 0x1001
	TEXTURE_INTERNAL_FORMAT                                               = 0x1003
	TEXTURE_COMPONENTS                                                    = 0x1003
	TEXTURE_BORDER_COLOR                                                  = 0x1004
	TEXTURE_BORDER_COLOR_EXT                                              = 0x1004
	TEXTURE_BORDER_COLOR_NV                                               = 0x1004
	TEXTURE_BORDER_COLOR_OES                                              = 0x1004
	TEXTURE_BORDER                                                        = 0x1005
	TEXTURE_TARGET                                                        = 0x1006
	DONT_CARE                                                             = 0x1100
	FASTEST                                                               = 0x1101
	NICEST                                                                = 0x1102
	AMBIENT                                                               = 0x1200
	DIFFUSE                                                               = 0x1201
	SPECULAR                                                              = 0x1202
	POSITION                                                              = 0x1203
	SPOT_DIRECTION                                                        = 0x1204
	SPOT_EXPONENT                                                         = 0x1205
	SPOT_CUTOFF                                                           = 0x1206
	CONSTANT_ATTENUATION                                                  = 0x1207
	LINEAR_ATTENUATION                                                    = 0x1208
	QUADRATIC_ATTENUATION                                                 = 0x1209
	COMPILE                                                               = 0x1300
	COMPILE_AND_EXECUTE                                                   = 0x1301
	BYTE                                                                  = 0x1400
	UNSIGNED_BYTE                                                         = 0x1401
	SHORT                                                                 = 0x1402
	UNSIGNED_SHORT                                                        = 0x1403
	INT                                                                   = 0x1404
	UNSIGNED_INT                                                          = 0x1405
	FLOAT                                                                 = 0x1406
	GL_2_BYTES                                                            = 0x1407
	GL_2_BYTES_NV                                                         = 0x1407
	GL_3_BYTES                                                            = 0x1408
	GL_3_BYTES_NV                                                         = 0x1408
	GL_4_BYTES                                                            = 0x1409
	GL_4_BYTES_NV                                                         = 0x1409
	DOUBLE                                                                = 0x140A
	DOUBLE_EXT                                                            = 0x140A
	HALF_FLOAT                                                            = 0x140B
	HALF_FLOAT_ARB                                                        = 0x140B
	HALF_FLOAT_NV                                                         = 0x140B
	HALF_APPLE                                                            = 0x140B
	FIXED                                                                 = 0x140C
	FIXED_OES                                                             = 0x140C
	INT64_ARB                                                             = 0x140E
	INT64_NV                                                              = 0x140E
	UNSIGNED_INT64_ARB                                                    = 0x140F
	UNSIGNED_INT64_NV                                                     = 0x140F
	CLEAR                                                                 = 0x1500
	AND                                                                   = 0x1501
	AND_REVERSE                                                           = 0x1502
	COPY                                                                  = 0x1503
	AND_INVERTED                                                          = 0x1504
	NOOP                                                                  = 0x1505
	XOR                                                                   = 0x1506
	XOR_NV                                                                = 0x1506
	OR                                                                    = 0x1507
	NOR                                                                   = 0x1508
	EQUIV                                                                 = 0x1509
	INVERT                                                                = 0x150A
	OR_REVERSE                                                            = 0x150B
	COPY_INVERTED                                                         = 0x150C
	OR_INVERTED                                                           = 0x150D
	NAND                                                                  = 0x150E
	SET                                                                   = 0x150F
	EMISSION                                                              = 0x1600
	SHININESS                                                             = 0x1601
	AMBIENT_AND_DIFFUSE                                                   = 0x1602
	COLOR_INDEXES                                                         = 0x1603
	MODELVIEW                                                             = 0x1700
	MODELVIEW0_ARB                                                        = 0x1700
	MODELVIEW0_EXT                                                        = 0x1700
	PATH_MODELVIEW_NV                                                     = 0x1700
	PROJECTION                                                            = 0x1701
	PATH_PROJECTION_NV                                                    = 0x1701
	TEXTURE                                                               = 0x1702
	COLOR                                                                 = 0x1800
	COLOR_EXT                                                             = 0x1800
	DEPTH                                                                 = 0x1801
	DEPTH_EXT                                                             = 0x1801
	STENCIL                                                               = 0x1802
	STENCIL_EXT                                                           = 0x1802
	COLOR_INDEX                                                           = 0x1900
	STENCIL_INDEX                                                         = 0x1901
	STENCIL_INDEX_OES                                                     = 0x1901
	DEPTH_COMPONENT                                                       = 0x1902
	RED                                                                   = 0x1903
	RED_EXT                                                               = 0x1903
	RED_NV                                                                = 0x1903
	GREEN                                                                 = 0x1904
	GREEN_NV                                                              = 0x1904
	BLUE                                                                  = 0x1905
	BLUE_NV                                                               = 0x1905
	ALPHA                                                                 = 0x1906
	RGB                                                                   = 0x1907
	RGBA                                                                  = 0x1908
	LUMINANCE                                                             = 0x1909
	LUMINANCE_ALPHA                                                       = 0x190A
	BITMAP                                                                = 0x1A00
	POINT                                                                 = 0x1B00
	POINT_NV                                                              = 0x1B00
	LINE                                                                  = 0x1B01
	LINE_NV                                                               = 0x1B01
	FILL                                                                  = 0x1B02
	FILL_NV                                                               = 0x1B02
	RENDER                                                                = 0x1C00
	FEEDBACK                                                              = 0x1C01
	SELECT                                                                = 0x1C02
	FLAT                                                                  = 0x1D00
	SMOOTH                                                                = 0x1D01
	KEEP                                                                  = 0x1E00
	REPLACE                                                               = 0x1E01
	INCR                                                                  = 0x1E02
	DECR                                                                  = 0x1E03
	VENDOR                                                                = 0x1F00
	RENDERER                                                              = 0x1F01
	VERSION                                                               = 0x1F02
	EXTENSIONS                                                            = 0x1F03
	S                                                                     = 0x2000
	T                                                                     = 0x2001
	R                                                                     = 0x2002
	Q                                                                     = 0x2003
	MODULATE                                                              = 0x2100
	DECAL                                                                 = 0x2101
	TEXTURE_ENV_MODE                                                      = 0x2200
	TEXTURE_ENV_COLOR                                                     = 0x2201
	TEXTURE_ENV                                                           = 0x2300
	EYE_LINEAR                                                            = 0x2400
	EYE_LINEAR_NV                                                         = 0x2400
	OBJECT_LINEAR                                                         = 0x2401
	OBJECT_LINEAR_NV                                                      = 0x2401
	SPHERE_MAP                                                            = 0x2402
	TEXTURE_GEN_MODE                                                      = 0x2500
	TEXTURE_GEN_MODE_OES                                                  = 0x2500
	OBJECT_PLANE                                                          = 0x2501
	EYE_PLANE                                                             = 0x2502
	NEAREST                                                               = 0x2600
	LINEAR                                                                = 0x2601
	NEAREST_MIPMAP_NEAREST                                                = 0x2700
	LINEAR_MIPMAP_NEAREST                                                 = 0x2701
	NEAREST_MIPMAP_LINEAR                                                 = 0x2702
	LINEAR_MIPMAP_LINEAR                                                  = 0x2703
	TEXTURE_MAG_FILTER                                                    = 0x2800
	TEXTURE_MIN_FILTER                                                    = 0x2801
	TEXTURE_WRAP_S                                                        = 0x2802
	TEXTURE_WRAP_T                                                        = 0x2803
	CLAMP                                                                 = 0x2900
	REPEAT                                                                = 0x2901
	POLYGON_OFFSET_UNITS                                                  = 0x2A00
	POLYGON_OFFSET_POINT                                                  = 0x2A01
	POLYGON_OFFSET_POINT_NV                                               = 0x2A01
	POLYGON_OFFSET_LINE                                                   = 0x2A02
	POLYGON_OFFSET_LINE_NV                                                = 0x2A02
	R3_G3_B2                                                              = 0x2A10
	V2F                                                                   = 0x2A20
	V3F                                                                   = 0x2A21
	C4UB_V2F                                                              = 0x2A22
	C4UB_V3F                                                              = 0x2A23
	C3F_V3F                                                               = 0x2A24
	N3F_V3F                                                               = 0x2A25
	C4F_N3F_V3F                                                           = 0x2A26
	T2F_V3F                                                               = 0x2A27
	T4F_V4F                                                               = 0x2A28
	T2F_C4UB_V3F                                                          = 0x2A29
	T2F_C3F_V3F                                                           = 0x2A2A
	T2F_N3F_V3F                                                           = 0x2A2B
	T2F_C4F_N3F_V3F                                                       = 0x2A2C
	T4F_C4F_N3F_V4F                                                       = 0x2A2D
	CLIP_PLANE0                                                           = 0x3000
	CLIP_PLANE0_IMG                                                       = 0x3000
	CLIP_DISTANCE0                                                        = 0x3000
	CLIP_DISTANCE0_EXT                                                    = 0x3000
	CLIP_DISTANCE0_APPLE                                                  = 0x3000
	CLIP_PLANE1                                                           = 0x3001
	CLIP_PLANE1_IMG                                                       = 0x3001
	CLIP_DISTANCE1                                                        = 0x3001
	CLIP_DISTANCE1_EXT                                                    = 0x3001
	CLIP_DISTANCE1_APPLE                                                  = 0x3001
	CLIP_PLANE2                                                           = 0x3002
	CLIP_PLANE2_IMG                                                       = 0x3002
	CLIP_DISTANCE2                                                        = 0x3002
	CLIP_DISTANCE2_EXT                                                    = 0x3002
	CLIP_DISTANCE2_APPLE                                                  = 0x3002
	CLIP_PLANE3                                                           = 0x3003
	CLIP_PLANE3_IMG                                                       = 0x3003
	CLIP_DISTANCE3                                                        = 0x3003
	CLIP_DISTANCE3_EXT                                                    = 0x3003
	CLIP_DISTANCE3_APPLE                                                  = 0x3003
	CLIP_PLANE4                                                           = 0x3004
	CLIP_PLANE4_IMG                                                       = 0x3004
	CLIP_DISTANCE4                                                        = 0x3004
	CLIP_DISTANCE4_EXT                                                    = 0x3004
	CLIP_DISTANCE4_APPLE                                                  = 0x3004
	CLIP_PLANE5                                                           = 0x3005
	CLIP_PLANE5_IMG                                                       = 0x3005
	CLIP_DISTANCE5                                                        = 0x3005
	CLIP_DISTANCE5_EXT                                                    = 0x3005
	CLIP_DISTANCE5_APPLE                                                  = 0x3005
	CLIP_DISTANCE6                                                        = 0x3006
	CLIP_DISTANCE6_EXT                                                    = 0x3006
	CLIP_DISTANCE6_APPLE                                                  = 0x3006
	CLIP_DISTANCE7                                                        = 0x3007
	CLIP_DISTANCE7_EXT                                                    = 0x3007
	CLIP_DISTANCE7_APPLE                                                  = 0x3007
	LIGHT0                                                                = 0x4000
	LIGHT1                                                                = 0x4001
	LIGHT2                                                                = 0x4002
	LIGHT3                                                                = 0x4003
	LIGHT4                                                                = 0x4004
	LIGHT5                                                                = 0x4005
	LIGHT6                                                                = 0x4006
	LIGHT7                                                                = 0x4007
	ABGR_EXT                                                              = 0x8000
	CONSTANT_COLOR                                                        = 0x8001
	CONSTANT_COLOR_EXT                                                    = 0x8001
	ONE_MINUS_CONSTANT_COLOR                                              = 0x8002
	ONE_MINUS_CONSTANT_COLOR_EXT                                          = 0x8002
	CONSTANT_ALPHA                                                        = 0x8003
	CONSTANT_ALPHA_EXT                                                    = 0x8003
	ONE_MINUS_CONSTANT_ALPHA                                              = 0x8004
	ONE_MINUS_CONSTANT_ALPHA_EXT                                          = 0x8004
	BLEND_COLOR                                                           = 0x8005
	BLEND_COLOR_EXT                                                       = 0x8005
	FUNC_ADD                                                              = 0x8006
	FUNC_ADD_EXT                                                          = 0x8006
	FUNC_ADD_OES                                                          = 0x8006
	MIN                                                                   = 0x8007
	MIN_EXT                                                               = 0x8007
	MAX                                                                   = 0x8008
	MAX_EXT                                                               = 0x8008
	BLEND_EQUATION                                                        = 0x8009
	BLEND_EQUATION_EXT                                                    = 0x8009
	BLEND_EQUATION_OES                                                    = 0x8009
	BLEND_EQUATION_RGB                                                    = 0x8009
	BLEND_EQUATION_RGB_EXT                                                = 0x8009
	BLEND_EQUATION_RGB_OES                                                = 0x8009
	FUNC_SUBTRACT                                                         = 0x800A
	FUNC_SUBTRACT_EXT                                                     = 0x800A
	FUNC_SUBTRACT_OES                                                     = 0x800A
	FUNC_REVERSE_SUBTRACT                                                 = 0x800B
	FUNC_REVERSE_SUBTRACT_EXT                                             = 0x800B
	FUNC_REVERSE_SUBTRACT_OES                                             = 0x800B
	CMYK_EXT                                                              = 0x800C
	CMYKA_EXT                                                             = 0x800D
	PACK_CMYK_HINT_EXT                                                    = 0x800E
	UNPACK_CMYK_HINT_EXT                                                  = 0x800F
	CONVOLUTION_1D                                                        = 0x8010
	CONVOLUTION_1D_EXT                                                    = 0x8010
	CONVOLUTION_2D                                                        = 0x8011
	CONVOLUTION_2D_EXT                                                    = 0x8011
	SEPARABLE_2D                                                          = 0x8012
	SEPARABLE_2D_EXT                                                      = 0x8012
	CONVOLUTION_BORDER_MODE                                               = 0x8013
	CONVOLUTION_BORDER_MODE_EXT                                           = 0x8013
	CONVOLUTION_FILTER_SCALE                                              = 0x8014
	CONVOLUTION_FILTER_SCALE_EXT                                          = 0x8014
	CONVOLUTION_FILTER_BIAS                                               = 0x8015
	CONVOLUTION_FILTER_BIAS_EXT                                           = 0x8015
	REDUCE                                                                = 0x8016
	REDUCE_EXT                                                            = 0x8016
	CONVOLUTION_FORMAT                                                    = 0x8017
	CONVOLUTION_FORMAT_EXT                                                = 0x8017
	CONVOLUTION_WIDTH                                                     = 0x8018
	CONVOLUTION_WIDTH_EXT                                                 = 0x8018
	CONVOLUTION_HEIGHT                                                    = 0x8019
	CONVOLUTION_HEIGHT_EXT                                                = 0x8019
	MAX_CONVOLUTION_WIDTH                                                 = 0x801A
	MAX_CONVOLUTION_WIDTH_EXT                                             = 0x801A
	MAX_CONVOLUTION_HEIGHT                                                = 0x801B
	MAX_CONVOLUTION_HEIGHT_EXT                                            = 0x801B
	POST_CONVOLUTION_RED_SCALE                                            = 0x801C
	POST_CONVOLUTION_RED_SCALE_EXT                                        = 0x801C
	POST_CONVOLUTION_GREEN_SCALE                                          = 0x801D
	POST_CONVOLUTION_GREEN_SCALE_EXT                                      = 0x801D
	POST_CONVOLUTION_BLUE_SCALE                                           = 0x801E
	POST_CONVOLUTION_BLUE_SCALE_EXT                                       = 0x801E
	POST_CONVOLUTION_ALPHA_SCALE                                          = 0x801F
	POST_CONVOLUTION_ALPHA_SCALE_EXT                                      = 0x801F
	POST_CONVOLUTION_RED_BIAS                                             = 0x8020
	POST_CONVOLUTION_RED_BIAS_EXT                                         = 0x8020
	POST_CONVOLUTION_GREEN_BIAS                                           = 0x8021
	POST_CONVOLUTION_GREEN_BIAS_EXT                                       = 0x8021
	POST_CONVOLUTION_BLUE_BIAS                                            = 0x8022
	POST_CONVOLUTION_BLUE_BIAS_EXT                                        = 0x8022
	POST_CONVOLUTION_ALPHA_BIAS                                           = 0x8023
	POST_CONVOLUTION_ALPHA_BIAS_EXT                                       = 0x8023
	HISTOGRAM                                                             = 0x8024
	HISTOGRAM_EXT                                                         = 0x8024
	PROXY_HISTOGRAM                                                       = 0x8025
	PROXY_HISTOGRAM_EXT                                                   = 0x8025
	HISTOGRAM_WIDTH                                                       = 0x8026
	HISTOGRAM_WIDTH_EXT                                                   = 0x8026
	HISTOGRAM_FORMAT                                                      = 0x8027
	HISTOGRAM_FORMAT_EXT                                                  = 0x8027
	HISTOGRAM_RED_SIZE                                                    = 0x8028
	HISTOGRAM_RED_SIZE_EXT                                                = 0x8028
	HISTOGRAM_GREEN_SIZE                                                  = 0x8029
	HISTOGRAM_GREEN_SIZE_EXT                                              = 0x8029
	HISTOGRAM_BLUE_SIZE                                                   = 0x802A
	HISTOGRAM_BLUE_SIZE_EXT                                               = 0x802A
	HISTOGRAM_ALPHA_SIZE                                                  = 0x802B
	HISTOGRAM_ALPHA_SIZE_EXT                                              = 0x802B
	HISTOGRAM_LUMINANCE_SIZE                                              = 0x802C
	HISTOGRAM_LUMINANCE_SIZE_EXT                                          = 0x802C
	HISTOGRAM_SINK                                                        = 0x802D
	HISTOGRAM_SINK_EXT                                                    = 0x802D
	MINMAX                                                                = 0x802E
	MINMAX_EXT                                                            = 0x802E
	MINMAX_FORMAT                                                         = 0x802F
	MINMAX_FORMAT_EXT                                                     = 0x802F
	MINMAX_SINK                                                           = 0x8030
	MINMAX_SINK_EXT                                                       = 0x8030
	TABLE_TOO_LARGE_EXT                                                   = 0x8031
	TABLE_TOO_LARGE                                                       = 0x8031
	UNSIGNED_BYTE_3_3_2                                                   = 0x8032
	UNSIGNED_BYTE_3_3_2_EXT                                               = 0x8032
	UNSIGNED_SHORT_4_4_4_4                                                = 0x8033
	UNSIGNED_SHORT_4_4_4_4_EXT                                            = 0x8033
	UNSIGNED_SHORT_5_5_5_1                                                = 0x8034
	UNSIGNED_SHORT_5_5_5_1_EXT                                            = 0x8034
	UNSIGNED_INT_8_8_8_8                                                  = 0x8035
	UNSIGNED_INT_8_8_8_8_EXT                                              = 0x8035
	UNSIGNED_INT_10_10_10_2                                               = 0x8036
	UNSIGNED_INT_10_10_10_2_EXT                                           = 0x8036
	POLYGON_OFFSET_EXT                                                    = 0x8037
	POLYGON_OFFSET_FILL                                                   = 0x8037
	POLYGON_OFFSET_FACTOR                                                 = 0x8038
	POLYGON_OFFSET_FACTOR_EXT                                             = 0x8038
	POLYGON_OFFSET_BIAS_EXT                                               = 0x8039
	RESCALE_NORMAL                                                        = 0x803A
	RESCALE_NORMAL_EXT                                                    = 0x803A
	ALPHA4                                                                = 0x803B
	ALPHA4_EXT                                                            = 0x803B
	ALPHA8                                                                = 0x803C
	ALPHA8_EXT                                                            = 0x803C
	ALPHA8_OES                                                            = 0x803C
	ALPHA12                                                               = 0x803D
	ALPHA12_EXT                                                           = 0x803D
	ALPHA16                                                               = 0x803E
	ALPHA16_EXT                                                           = 0x803E
	LUMINANCE4                                                            = 0x803F
	LUMINANCE4_EXT                                                        = 0x803F
	LUMINANCE8                                                            = 0x8040
	LUMINANCE8_EXT                                                        = 0x8040
	LUMINANCE8_OES                                                        = 0x8040
	LUMINANCE12                                                           = 0x8041
	LUMINANCE12_EXT                                                       = 0x8041
	LUMINANCE16                                                           = 0x8042
	LUMINANCE16_EXT                                                       = 0x8042
	LUMINANCE4_ALPHA4                                                     = 0x8043
	LUMINANCE4_ALPHA4_EXT                                                 = 0x8043
	LUMINANCE4_ALPHA4_OES                                                 = 0x8043
	LUMINANCE6_ALPHA2                                                     = 0x8044
	LUMINANCE6_ALPHA2_EXT                                                 = 0x8044
	LUMINANCE8_ALPHA8                                                     = 0x8045
	LUMINANCE8_ALPHA8_EXT                                                 = 0x8045
	LUMINANCE8_ALPHA8_OES                                                 = 0x8045
	LUMINANCE12_ALPHA4                                                    = 0x8046
	LUMINANCE12_ALPHA4_EXT                                                = 0x8046
	LUMINANCE12_ALPHA12                                                   = 0x8047
	LUMINANCE12_ALPHA12_EXT                                               = 0x8047
	LUMINANCE16_ALPHA16                                                   = 0x8048
	LUMINANCE16_ALPHA16_EXT                                               = 0x8048
	INTENSITY                                                             = 0x8049
	INTENSITY_EXT                                                         = 0x8049
	INTENSITY4                                                            = 0x804A
	INTENSITY4_EXT                                                        = 0x804A
	INTENSITY8                                                            = 0x804B
	INTENSITY8_EXT                                                        = 0x804B
	INTENSITY12                                                           = 0x804C
	INTENSITY12_EXT                                                       = 0x804C
	INTENSITY16                                                           = 0x804D
	INTENSITY16_EXT                                                       = 0x804D
	RGB2_EXT                                                              = 0x804E
	RGB4                                                                  = 0x804F
	RGB4_EXT                                                              = 0x804F
	RGB5                                                                  = 0x8050
	RGB5_EXT                                                              = 0x8050
	RGB8                                                                  = 0x8051
	RGB8_EXT                                                              = 0x8051
	RGB8_OES                                                              = 0x8051
	RGB10                                                                 = 0x8052
	RGB10_EXT                                                             = 0x8052
	RGB12                                                                 = 0x8053
	RGB12_EXT                                                             = 0x8053
	RGB16                                                                 = 0x8054
	RGB16_EXT                                                             = 0x8054
	RGBA2                                                                 = 0x8055
	RGBA2_EXT                                                             = 0x8055
	RGBA4                                                                 = 0x8056
	RGBA4_EXT                                                             = 0x8056
	RGBA4_OES                                                             = 0x8056
	RGB5_A1                                                               = 0x8057
	RGB5_A1_EXT                                                           = 0x8057
	RGB5_A1_OES                                                           = 0x8057
	RGBA8                                                                 = 0x8058
	RGBA8_EXT                                                             = 0x8058
	RGBA8_OES                                                             = 0x8058
	RGB10_A2                                                              = 0x8059
	RGB10_A2_EXT                                                          = 0x8059
	RGBA12                                                                = 0x805A
	RGBA12_EXT                                                            = 0x805A
	RGBA16                                                                = 0x805B
	RGBA16_EXT                                                            = 0x805B
	TEXTURE_RED_SIZE                                                      = 0x805C
	TEXTURE_RED_SIZE_EXT                                                  = 0x805C
	TEXTURE_GREEN_SIZE                                                    = 0x805D
	TEXTURE_GREEN_SIZE_EXT                                                = 0x805D
	TEXTURE_BLUE_SIZE                                                     = 0x805E
	TEXTURE_BLUE_SIZE_EXT                                                 = 0x805E
	TEXTURE_ALPHA_SIZE                                                    = 0x805F
	TEXTURE_ALPHA_SIZE_EXT                                                = 0x805F
	TEXTURE_LUMINANCE_SIZE                                                = 0x8060
	TEXTURE_LUMINANCE_SIZE_EXT                                            = 0x8060
	TEXTURE_INTENSITY_SIZE                                                = 0x8061
	TEXTURE_INTENSITY_SIZE_EXT                                            = 0x8061
	REPLACE_EXT                                                           = 0x8062
	PROXY_TEXTURE_1D                                                      = 0x8063
	PROXY_TEXTURE_1D_EXT                                                  = 0x8063
	PROXY_TEXTURE_2D                                                      = 0x8064
	PROXY_TEXTURE_2D_EXT                                                  = 0x8064
	TEXTURE_TOO_LARGE_EXT                                                 = 0x8065
	TEXTURE_PRIORITY                                                      = 0x8066
	TEXTURE_PRIORITY_EXT                                                  = 0x8066
	TEXTURE_RESIDENT                                                      = 0x8067
	TEXTURE_RESIDENT_EXT                                                  = 0x8067
	TEXTURE_1D_BINDING_EXT                                                = 0x8068
	TEXTURE_BINDING_1D                                                    = 0x8068
	TEXTURE_2D_BINDING_EXT                                                = 0x8069
	TEXTURE_BINDING_2D                                                    = 0x8069
	TEXTURE_3D_BINDING_EXT                                                = 0x806A
	TEXTURE_3D_BINDING_OES                                                = 0x806A
	TEXTURE_BINDING_3D                                                    = 0x806A
	TEXTURE_BINDING_3D_OES                                                = 0x806A
	PACK_SKIP_IMAGES                                                      = 0x806B
	PACK_SKIP_IMAGES_EXT                                                  = 0x806B
	PACK_IMAGE_HEIGHT                                                     = 0x806C
	PACK_IMAGE_HEIGHT_EXT                                                 = 0x806C
	UNPACK_SKIP_IMAGES                                                    = 0x806D
	UNPACK_SKIP_IMAGES_EXT                                                = 0x806D
	UNPACK_IMAGE_HEIGHT                                                   = 0x806E
	UNPACK_IMAGE_HEIGHT_EXT                                               = 0x806E
	TEXTURE_3D                                                            = 0x806F
	TEXTURE_3D_EXT                                                        = 0x806F
	TEXTURE_3D_OES                                                        = 0x806F
	PROXY_TEXTURE_3D                                                      = 0x8070
	PROXY_TEXTURE_3D_EXT                                                  = 0x8070
	TEXTURE_DEPTH                                                         = 0x8071
	TEXTURE_DEPTH_EXT                                                     = 0x8071
	TEXTURE_WRAP_R                                                        = 0x8072
	TEXTURE_WRAP_R_EXT                                                    = 0x8072
	TEXTURE_WRAP_R_OES                                                    = 0x8072
	MAX_3D_TEXTURE_SIZE                                                   = 0x8073
	MAX_3D_TEXTURE_SIZE_EXT                                               = 0x8073
	MAX_3D_TEXTURE_SIZE_OES                                               = 0x8073
	VERTEX_ARRAY                                                          = 0x8074
	VERTEX_ARRAY_EXT                                                      = 0x8074
	VERTEX_ARRAY_KHR                                                      = 0x8074
	NORMAL_ARRAY                                                          = 0x8075
	NORMAL_ARRAY_EXT                                                      = 0x8075
	COLOR_ARRAY                                                           = 0x8076
	COLOR_ARRAY_EXT                                                       = 0x8076
	INDEX_ARRAY                                                           = 0x8077
	INDEX_ARRAY_EXT                                                       = 0x8077
	TEXTURE_COORD_ARRAY                                                   = 0x8078
	TEXTURE_COORD_ARRAY_EXT                                               = 0x8078
	EDGE_FLAG_ARRAY                                                       = 0x8079
	EDGE_FLAG_ARRAY_EXT                                                   = 0x8079
	VERTEX_ARRAY_SIZE                                                     = 0x807A
	VERTEX_ARRAY_SIZE_EXT                                                 = 0x807A
	VERTEX_ARRAY_TYPE                                                     = 0x807B
	VERTEX_ARRAY_TYPE_EXT                                                 = 0x807B
	VERTEX_ARRAY_STRIDE                                                   = 0x807C
	VERTEX_ARRAY_STRIDE_EXT                                               = 0x807C
	VERTEX_ARRAY_COUNT_EXT                                                = 0x807D
	NORMAL_ARRAY_TYPE                                                     = 0x807E
	NORMAL_ARRAY_TYPE_EXT                                                 = 0x807E
	NORMAL_ARRAY_STRIDE                                                   = 0x807F
	NORMAL_ARRAY_STRIDE_EXT                                               = 0x807F
	NORMAL_ARRAY_COUNT_EXT                                                = 0x8080
	COLOR_ARRAY_SIZE                                                      = 0x8081
	COLOR_ARRAY_SIZE_EXT                                                  = 0x8081
	COLOR_ARRAY_TYPE                                                      = 0x8082
	COLOR_ARRAY_TYPE_EXT                                                  = 0x8082
	COLOR_ARRAY_STRIDE                                                    = 0x8083
	COLOR_ARRAY_STRIDE_EXT                                                = 0x8083
	COLOR_ARRAY_COUNT_EXT                                                 = 0x8084
	INDEX_ARRAY_TYPE                                                      = 0x8085
	INDEX_ARRAY_TYPE_EXT                                                  = 0x8085
	INDEX_ARRAY_STRIDE                                                    = 0x8086
	INDEX_ARRAY_STRIDE_EXT                                                = 0x8086
	INDEX_ARRAY_COUNT_EXT                                                 = 0x8087
	TEXTURE_COORD_ARRAY_SIZE                                              = 0x8088
	TEXTURE_COORD_ARRAY_SIZE_EXT                                          = 0x8088
	TEXTURE_COORD_ARRAY_TYPE                                              = 0x8089
	TEXTURE_COORD_ARRAY_TYPE_EXT                                          = 0x8089
	TEXTURE_COORD_ARRAY_STRIDE                                            = 0x808A
	TEXTURE_COORD_ARRAY_STRIDE_EXT                                        = 0x808A
	TEXTURE_COORD_ARRAY_COUNT_EXT                                         = 0x808B
	EDGE_FLAG_ARRAY_STRIDE                                                = 0x808C
	EDGE_FLAG_ARRAY_STRIDE_EXT                                            = 0x808C
	EDGE_FLAG_ARRAY_COUNT_EXT                                             = 0x808D
	VERTEX_ARRAY_POINTER                                                  = 0x808E
	VERTEX_ARRAY_POINTER_EXT                                              = 0x808E
	NORMAL_ARRAY_POINTER                                                  = 0x808F
	NORMAL_ARRAY_POINTER_EXT                                              = 0x808F
	COLOR_ARRAY_POINTER                                                   = 0x8090
	COLOR_ARRAY_POINTER_EXT                                               = 0x8090
	INDEX_ARRAY_POINTER                                                   = 0x8091
	INDEX_ARRAY_POINTER_EXT                                               = 0x8091
	TEXTURE_COORD_ARRAY_POINTER                                           = 0x8092
	TEXTURE_COORD_ARRAY_POINTER_EXT                                       = 0x8092
	EDGE_FLAG_ARRAY_POINTER                                               = 0x8093
	EDGE_FLAG_ARRAY_POINTER_EXT                                           = 0x8093
	INTERLACE_SGIX                                                        = 0x8094
	DETAIL_TEXTURE_2D_SGIS                                                = 0x8095
	DETAIL_TEXTURE_2D_BINDING_SGIS                                        = 0x8096
	LINEAR_DETAIL_SGIS                                                    = 0x8097
	LINEAR_DETAIL_ALPHA_SGIS                                              = 0x8098
	LINEAR_DETAIL_COLOR_SGIS                                              = 0x8099
	DETAIL_TEXTURE_LEVEL_SGIS                                             = 0x809A
	DETAIL_TEXTURE_MODE_SGIS                                              = 0x809B
	DETAIL_TEXTURE_FUNC_POINTS_SGIS                                       = 0x809C
	MULTISAMPLE                                                           = 0x809D
	MULTISAMPLE_ARB                                                       = 0x809D
	MULTISAMPLE_EXT                                                       = 0x809D
	MULTISAMPLE_SGIS                                                      = 0x809D
	SAMPLE_ALPHA_TO_COVERAGE                                              = 0x809E
	SAMPLE_ALPHA_TO_COVERAGE_ARB                                          = 0x809E
	SAMPLE_ALPHA_TO_MASK_EXT                                              = 0x809E
	SAMPLE_ALPHA_TO_MASK_SGIS                                             = 0x809E
	SAMPLE_ALPHA_TO_ONE                                                   = 0x809F
	SAMPLE_ALPHA_TO_ONE_ARB                                               = 0x809F
	SAMPLE_ALPHA_TO_ONE_EXT                                               = 0x809F
	SAMPLE_ALPHA_TO_ONE_SGIS                                              = 0x809F
	SAMPLE_COVERAGE                                                       = 0x80A0
	SAMPLE_COVERAGE_ARB                                                   = 0x80A0
	SAMPLE_MASK_EXT                                                       = 0x80A0
	SAMPLE_MASK_SGIS                                                      = 0x80A0
	GL_1PASS_EXT                                                          = 0x80A1
	GL_1PASS_SGIS                                                         = 0x80A1
	GL_2PASS_0_EXT                                                        = 0x80A2
	GL_2PASS_0_SGIS                                                       = 0x80A2
	GL_2PASS_1_EXT                                                        = 0x80A3
	GL_2PASS_1_SGIS                                                       = 0x80A3
	GL_4PASS_0_EXT                                                        = 0x80A4
	GL_4PASS_0_SGIS                                                       = 0x80A4
	GL_4PASS_1_EXT                                                        = 0x80A5
	GL_4PASS_1_SGIS                                                       = 0x80A5
	GL_4PASS_2_EXT                                                        = 0x80A6
	GL_4PASS_2_SGIS                                                       = 0x80A6
	GL_4PASS_3_EXT                                                        = 0x80A7
	GL_4PASS_3_SGIS                                                       = 0x80A7
	SAMPLE_BUFFERS                                                        = 0x80A8
	SAMPLE_BUFFERS_ARB                                                    = 0x80A8
	SAMPLE_BUFFERS_EXT                                                    = 0x80A8
	SAMPLE_BUFFERS_SGIS                                                   = 0x80A8
	SAMPLES                                                               = 0x80A9
	SAMPLES_ARB                                                           = 0x80A9
	SAMPLES_EXT                                                           = 0x80A9
	SAMPLES_SGIS                                                          = 0x80A9
	SAMPLE_COVERAGE_VALUE                                                 = 0x80AA
	SAMPLE_COVERAGE_VALUE_ARB                                             = 0x80AA
	SAMPLE_MASK_VALUE_EXT                                                 = 0x80AA
	SAMPLE_MASK_VALUE_SGIS                                                = 0x80AA
	SAMPLE_COVERAGE_INVERT                                                = 0x80AB
	SAMPLE_COVERAGE_INVERT_ARB                                            = 0x80AB
	SAMPLE_MASK_INVERT_EXT                                                = 0x80AB
	SAMPLE_MASK_INVERT_SGIS                                               = 0x80AB
	SAMPLE_PATTERN_EXT                                                    = 0x80AC
	SAMPLE_PATTERN_SGIS                                                   = 0x80AC
	LINEAR_SHARPEN_SGIS                                                   = 0x80AD
	LINEAR_SHARPEN_ALPHA_SGIS                                             = 0x80AE
	LINEAR_SHARPEN_COLOR_SGIS                                             = 0x80AF
	SHARPEN_TEXTURE_FUNC_POINTS_SGIS                                      = 0x80B0
	COLOR_MATRIX                                                          = 0x80B1
	COLOR_MATRIX_SGI                                                      = 0x80B1
	COLOR_MATRIX_STACK_DEPTH                                              = 0x80B2
	COLOR_MATRIX_STACK_DEPTH_SGI                                          = 0x80B2
	MAX_COLOR_MATRIX_STACK_DEPTH                                          = 0x80B3
	MAX_COLOR_MATRIX_STACK_DEPTH_SGI                                      = 0x80B3
	POST_COLOR_MATRIX_RED_SCALE                                           = 0x80B4
	POST_COLOR_MATRIX_RED_SCALE_SGI                                       = 0x80B4
	POST_COLOR_MATRIX_GREEN_SCALE                                         = 0x80B5
	POST_COLOR_MATRIX_GREEN_SCALE_SGI                                     = 0x80B5
	POST_COLOR_MATRIX_BLUE_SCALE                                          = 0x80B6
	POST_COLOR_MATRIX_BLUE_SCALE_SGI                                      = 0x80B6
	POST_COLOR_MATRIX_ALPHA_SCALE                                         = 0x80B7
	POST_COLOR_MATRIX_ALPHA_SCALE_SGI                                     = 0x80B7
	POST_COLOR_MATRIX_RED_BIAS                                            = 0x80B8
	POST_COLOR_MATRIX_RED_BIAS_SGI                                        = 0x80B8
	POST_COLOR_MATRIX_GREEN_BIAS                                          = 0x80B9
	POST_COLOR_MATRIX_GREEN_BIAS_SGI                                      = 0x80B9
	POST_COLOR_MATRIX_BLUE_BIAS                                           = 0x80BA
	POST_COLOR_MATRIX_BLUE_BIAS_SGI                                       = 0x80BA
	POST_COLOR_MATRIX_ALPHA_BIAS                                          = 0x80BB
	POST_COLOR_MATRIX_ALPHA_BIAS_SGI                                      = 0x80BB
	TEXTURE_COLOR_TABLE_SGI                                               = 0x80BC
	PROXY_TEXTURE_COLOR_TABLE_SGI                                         = 0x80BD
	TEXTURE_ENV_BIAS_SGIX                                                 = 0x80BE
	SHADOW_AMBIENT_SGIX                                                   = 0x80BF
	TEXTURE_COMPARE_FAIL_VALUE_ARB                                        = 0x80BF
	BLEND_DST_RGB                                                         = 0x80C8
	BLEND_DST_RGB_EXT                                                     = 0x80C8
	BLEND_DST_RGB_OES                                                     = 0x80C8
	BLEND_SRC_RGB                                                         = 0x80C9
	BLEND_SRC_RGB_EXT                                                     = 0x80C9
	BLEND_SRC_RGB_OES                                                     = 0x80C9
	BLEND_DST_ALPHA                                                       = 0x80CA
	BLEND_DST_ALPHA_EXT                                                   = 0x80CA
	BLEND_DST_ALPHA_OES                                                   = 0x80CA
	BLEND_SRC_ALPHA                                                       = 0x80CB
	BLEND_SRC_ALPHA_EXT                                                   = 0x80CB
	BLEND_SRC_ALPHA_OES                                                   = 0x80CB
	GL_422_EXT                                                            = 0x80CC
	GL_422_REV_EXT                                                        = 0x80CD
	GL_422_AVERAGE_EXT                                                    = 0x80CE
	GL_422_REV_AVERAGE_EXT                                                = 0x80CF
	COLOR_TABLE                                                           = 0x80D0
	COLOR_TABLE_SGI                                                       = 0x80D0
	POST_CONVOLUTION_COLOR_TABLE                                          = 0x80D1
	POST_CONVOLUTION_COLOR_TABLE_SGI                                      = 0x80D1
	POST_COLOR_MATRIX_COLOR_TABLE                                         = 0x80D2
	POST_COLOR_MATRIX_COLOR_TABLE_SGI                                     = 0x80D2
	PROXY_COLOR_TABLE                                                     = 0x80D3
	PROXY_COLOR_TABLE_SGI                                                 = 0x80D3
	PROXY_POST_CONVOLUTION_COLOR_TABLE                                    = 0x80D4
	PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI                                = 0x80D4
	PROXY_POST_COLOR_MATRIX_COLOR_TABLE                                   = 0x80D5
	PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI                               = 0x80D5
	COLOR_TABLE_SCALE                                                     = 0x80D6
	COLOR_TABLE_SCALE_SGI                                                 = 0x80D6
	COLOR_TABLE_BIAS                                                      = 0x80D7
	COLOR_TABLE_BIAS_SGI                                                  = 0x80D7
	COLOR_TABLE_FORMAT                                                    = 0x80D8
	COLOR_TABLE_FORMAT_SGI                                                = 0x80D8
	COLOR_TABLE_WIDTH                                                     = 0x80D9
	COLOR_TABLE_WIDTH_SGI                                                 = 0x80D9
	COLOR_TABLE_RED_SIZE                                                  = 0x80DA
	COLOR_TABLE_RED_SIZE_SGI                                              = 0x80DA
	COLOR_TABLE_GREEN_SIZE                                                = 0x80DB
	COLOR_TABLE_GREEN_SIZE_SGI                                            = 0x80DB
	COLOR_TABLE_BLUE_SIZE                                                 = 0x80DC
	COLOR_TABLE_BLUE_SIZE_SGI                                             = 0x80DC
	COLOR_TABLE_ALPHA_SIZE                                                = 0x80DD
	COLOR_TABLE_ALPHA_SIZE_SGI                                            = 0x80DD
	COLOR_TABLE_LUMINANCE_SIZE                                            = 0x80DE
	COLOR_TABLE_LUMINANCE_SIZE_SGI                                        = 0x80DE
	COLOR_TABLE_INTENSITY_SIZE                                            = 0x80DF
	COLOR_TABLE_INTENSITY_SIZE_SGI                                        = 0x80DF
	BGR                                                                   = 0x80E0
	BGR_EXT                                                               = 0x80E0
	BGRA                                                                  = 0x80E1
	BGRA_EXT                                                              = 0x80E1
	BGRA_IMG                                                              = 0x80E1
	COLOR_INDEX1_EXT                                                      = 0x80E2
	COLOR_INDEX2_EXT                                                      = 0x80E3
	COLOR_INDEX4_EXT                                                      = 0x80E4
	COLOR_INDEX8_EXT                                                      = 0x80E5
	COLOR_INDEX12_EXT                                                     = 0x80E6
	COLOR_INDEX16_EXT                                                     = 0x80E7
	MAX_ELEMENTS_VERTICES                                                 = 0x80E8
	MAX_ELEMENTS_VERTICES_EXT                                             = 0x80E8
	MAX_ELEMENTS_INDICES                                                  = 0x80E9
	MAX_ELEMENTS_INDICES_EXT                                              = 0x80E9
	PHONG_WIN                                                             = 0x80EA
	PHONG_HINT_WIN                                                        = 0x80EB
	FOG_SPECULAR_TEXTURE_WIN                                              = 0x80EC
	TEXTURE_INDEX_SIZE_EXT                                                = 0x80ED
	PARAMETER_BUFFER                                                      = 0x80EE
	PARAMETER_BUFFER_ARB                                                  = 0x80EE
	PARAMETER_BUFFER_BINDING                                              = 0x80EF
	PARAMETER_BUFFER_BINDING_ARB                                          = 0x80EF
	CLIP_VOLUME_CLIPPING_HINT_EXT                                         = 0x80F0
	DUAL_ALPHA4_SGIS                                                      = 0x8110
	DUAL_ALPHA8_SGIS                                                      = 0x8111
	DUAL_ALPHA12_SGIS                                                     = 0x8112
	DUAL_ALPHA16_SGIS                                                     = 0x8113
	DUAL_LUMINANCE4_SGIS                                                  = 0x8114
	DUAL_LUMINANCE8_SGIS                                                  = 0x8115
	DUAL_LUMINANCE12_SGIS                                                 = 0x8116
	DUAL_LUMINANCE16_SGIS                                                 = 0x8117
	DUAL_INTENSITY4_SGIS                                                  = 0x8118
	DUAL_INTENSITY8_SGIS                                                  = 0x8119
	DUAL_INTENSITY12_SGIS                                                 = 0x811A
	DUAL_INTENSITY16_SGIS                                                 = 0x811B
	DUAL_LUMINANCE_ALPHA4_SGIS                                            = 0x811C
	DUAL_LUMINANCE_ALPHA8_SGIS                                            = 0x811D
	QUAD_ALPHA4_SGIS                                                      = 0x811E
	QUAD_ALPHA8_SGIS                                                      = 0x811F
	QUAD_LUMINANCE4_SGIS                                                  = 0x8120
	QUAD_LUMINANCE8_SGIS                                                  = 0x8121
	QUAD_INTENSITY4_SGIS                                                  = 0x8122
	QUAD_INTENSITY8_SGIS                                                  = 0x8123
	DUAL_TEXTURE_SELECT_SGIS                                              = 0x8124
	QUAD_TEXTURE_SELECT_SGIS                                              = 0x8125
	POINT_SIZE_MIN                                                        = 0x8126
	POINT_SIZE_MIN_ARB                                                    = 0x8126
	POINT_SIZE_MIN_EXT                                                    = 0x8126
	POINT_SIZE_MIN_SGIS                                                   = 0x8126
	POINT_SIZE_MAX                                                        = 0x8127
	POINT_SIZE_MAX_ARB                                                    = 0x8127
	POINT_SIZE_MAX_EXT                                                    = 0x8127
	POINT_SIZE_MAX_SGIS                                                   = 0x8127
	POINT_FADE_THRESHOLD_SIZE                                             = 0x8128
	POINT_FADE_THRESHOLD_SIZE_ARB                                         = 0x8128
	POINT_FADE_THRESHOLD_SIZE_EXT                                         = 0x8128
	POINT_FADE_THRESHOLD_SIZE_SGIS                                        = 0x8128
	DISTANCE_ATTENUATION_EXT                                              = 0x8129
	DISTANCE_ATTENUATION_SGIS                                             = 0x8129
	POINT_DISTANCE_ATTENUATION                                            = 0x8129
	POINT_DISTANCE_ATTENUATION_ARB                                        = 0x8129
	FOG_FUNC_SGIS                                                         = 0x812A
	FOG_FUNC_POINTS_SGIS                                                  = 0x812B
	MAX_FOG_FUNC_POINTS_SGIS                                              = 0x812C
	CLAMP_TO_BORDER                                                       = 0x812D
	CLAMP_TO_BORDER_ARB                                                   = 0x812D
	CLAMP_TO_BORDER_EXT                                                   = 0x812D
	CLAMP_TO_BORDER_NV                                                    = 0x812D
	CLAMP_TO_BORDER_SGIS                                                  = 0x812D
	CLAMP_TO_BORDER_OES                                                   = 0x812D
	TEXTURE_MULTI_BUFFER_HINT_SGIX                                        = 0x812E
	CLAMP_TO_EDGE                                                         = 0x812F
	CLAMP_TO_EDGE_SGIS                                                    = 0x812F
	PACK_SKIP_VOLUMES_SGIS                                                = 0x8130
	PACK_IMAGE_DEPTH_SGIS                                                 = 0x8131
	UNPACK_SKIP_VOLUMES_SGIS                                              = 0x8132
	UNPACK_IMAGE_DEPTH_SGIS                                               = 0x8133
	TEXTURE_4D_SGIS                                                       = 0x8134
	PROXY_TEXTURE_4D_SGIS                                                 = 0x8135
	TEXTURE_4DSIZE_SGIS                                                   = 0x8136
	TEXTURE_WRAP_Q_SGIS                                                   = 0x8137
	MAX_4D_TEXTURE_SIZE_SGIS                                              = 0x8138
	PIXEL_TEX_GEN_SGIX                                                    = 0x8139
	TEXTURE_MIN_LOD                                                       = 0x813A
	TEXTURE_MIN_LOD_SGIS                                                  = 0x813A
	TEXTURE_MAX_LOD                                                       = 0x813B
	TEXTURE_MAX_LOD_SGIS                                                  = 0x813B
	TEXTURE_BASE_LEVEL                                                    = 0x813C
	TEXTURE_BASE_LEVEL_SGIS                                               = 0x813C
	TEXTURE_MAX_LEVEL                                                     = 0x813D
	TEXTURE_MAX_LEVEL_APPLE                                               = 0x813D
	TEXTURE_MAX_LEVEL_SGIS                                                = 0x813D
	PIXEL_TILE_BEST_ALIGNMENT_SGIX                                        = 0x813E
	PIXEL_TILE_CACHE_INCREMENT_SGIX                                       = 0x813F
	PIXEL_TILE_WIDTH_SGIX                                                 = 0x8140
	PIXEL_TILE_HEIGHT_SGIX                                                = 0x8141
	PIXEL_TILE_GRID_WIDTH_SGIX                                            = 0x8142
	PIXEL_TILE_GRID_HEIGHT_SGIX                                           = 0x8143
	PIXEL_TILE_GRID_DEPTH_SGIX                                            = 0x8144
	PIXEL_TILE_CACHE_SIZE_SGIX                                            = 0x8145
	FILTER4_SGIS                                                          = 0x8146
	TEXTURE_FILTER4_SIZE_SGIS                                             = 0x8147
	SPRITE_SGIX                                                           = 0x8148
	SPRITE_MODE_SGIX                                                      = 0x8149
	SPRITE_AXIS_SGIX                                                      = 0x814A
	SPRITE_TRANSLATION_SGIX                                               = 0x814B
	SPRITE_AXIAL_SGIX                                                     = 0x814C
	SPRITE_OBJECT_ALIGNED_SGIX                                            = 0x814D
	SPRITE_EYE_ALIGNED_SGIX                                               = 0x814E
	TEXTURE_4D_BINDING_SGIS                                               = 0x814F
	IGNORE_BORDER_HP                                                      = 0x8150
	CONSTANT_BORDER                                                       = 0x8151
	CONSTANT_BORDER_HP                                                    = 0x8151
	REPLICATE_BORDER                                                      = 0x8153
	REPLICATE_BORDER_HP                                                   = 0x8153
	CONVOLUTION_BORDER_COLOR                                              = 0x8154
	CONVOLUTION_BORDER_COLOR_HP                                           = 0x8154
	IMAGE_SCALE_X_HP                                                      = 0x8155
	IMAGE_SCALE_Y_HP                                                      = 0x8156
	IMAGE_TRANSLATE_X_HP                                                  = 0x8157
	IMAGE_TRANSLATE_Y_HP                                                  = 0x8158
	IMAGE_ROTATE_ANGLE_HP                                                 = 0x8159
	IMAGE_ROTATE_ORIGIN_X_HP                                              = 0x815A
	IMAGE_ROTATE_ORIGIN_Y_HP                                              = 0x815B
	IMAGE_MAG_FILTER_HP                                                   = 0x815C
	IMAGE_MIN_FILTER_HP                                                   = 0x815D
	IMAGE_CUBIC_WEIGHT_HP                                                 = 0x815E
	CUBIC_HP                                                              = 0x815F
	AVERAGE_HP                                                            = 0x8160
	IMAGE_TRANSFORM_2D_HP                                                 = 0x8161
	POST_IMAGE_TRANSFORM_COLOR_TABLE_HP                                   = 0x8162
	PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP                             = 0x8163
	OCCLUSION_TEST_HP                                                     = 0x8165
	OCCLUSION_TEST_RESULT_HP                                              = 0x8166
	TEXTURE_LIGHTING_MODE_HP                                              = 0x8167
	TEXTURE_POST_SPECULAR_HP                                              = 0x8168
	TEXTURE_PRE_SPECULAR_HP                                               = 0x8169
	LINEAR_CLIPMAP_LINEAR_SGIX                                            = 0x8170
	TEXTURE_CLIPMAP_CENTER_SGIX                                           = 0x8171
	TEXTURE_CLIPMAP_FRAME_SGIX                                            = 0x8172
	TEXTURE_CLIPMAP_OFFSET_SGIX                                           = 0x8173
	TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX                                    = 0x8174
	TEXTURE_CLIPMAP_LOD_OFFSET_SGIX                                       = 0x8175
	TEXTURE_CLIPMAP_DEPTH_SGIX                                            = 0x8176
	MAX_CLIPMAP_DEPTH_SGIX                                                = 0x8177
	MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX                                        = 0x8178
	POST_TEXTURE_FILTER_BIAS_SGIX                                         = 0x8179
	POST_TEXTURE_FILTER_SCALE_SGIX                                        = 0x817A
	POST_TEXTURE_FILTER_BIAS_RANGE_SGIX                                   = 0x817B
	POST_TEXTURE_FILTER_SCALE_RANGE_SGIX                                  = 0x817C
	REFERENCE_PLANE_SGIX                                                  = 0x817D
	REFERENCE_PLANE_EQUATION_SGIX                                         = 0x817E
	IR_INSTRUMENT1_SGIX                                                   = 0x817F
	INSTRUMENT_BUFFER_POINTER_SGIX                                        = 0x8180
	INSTRUMENT_MEASUREMENTS_SGIX                                          = 0x8181
	LIST_PRIORITY_SGIX                                                    = 0x8182
	CALLIGRAPHIC_FRAGMENT_SGIX                                            = 0x8183
	PIXEL_TEX_GEN_Q_CEILING_SGIX                                          = 0x8184
	PIXEL_TEX_GEN_Q_ROUND_SGIX                                            = 0x8185
	PIXEL_TEX_GEN_Q_FLOOR_SGIX                                            = 0x8186
	PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX                                      = 0x8187
	PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX                                   = 0x8188
	PIXEL_TEX_GEN_ALPHA_LS_SGIX                                           = 0x8189
	PIXEL_TEX_GEN_ALPHA_MS_SGIX                                           = 0x818A
	FRAMEZOOM_SGIX                                                        = 0x818B
	FRAMEZOOM_FACTOR_SGIX                                                 = 0x818C
	MAX_FRAMEZOOM_FACTOR_SGIX                                             = 0x818D
	TEXTURE_LOD_BIAS_S_SGIX                                               = 0x818E
	TEXTURE_LOD_BIAS_T_SGIX                                               = 0x818F
	TEXTURE_LOD_BIAS_R_SGIX                                               = 0x8190
	GENERATE_MIPMAP                                                       = 0x8191
	GENERATE_MIPMAP_SGIS                                                  = 0x8191
	GENERATE_MIPMAP_HINT                                                  = 0x8192
	GENERATE_MIPMAP_HINT_SGIS                                             = 0x8192
	GEOMETRY_DEFORMATION_SGIX                                             = 0x8194
	TEXTURE_DEFORMATION_SGIX                                              = 0x8195
	DEFORMATIONS_MASK_SGIX                                                = 0x8196
	MAX_DEFORMATION_ORDER_SGIX                                            = 0x8197
	FOG_OFFSET_SGIX                                                       = 0x8198
	FOG_OFFSET_VALUE_SGIX                                                 = 0x8199
	TEXTURE_COMPARE_SGIX                                                  = 0x819A
	TEXTURE_COMPARE_OPERATOR_SGIX                                         = 0x819B
	TEXTURE_LEQUAL_R_SGIX                                                 = 0x819C
	TEXTURE_GEQUAL_R_SGIX                                                 = 0x819D
	DEPTH_COMPONENT16                                                     = 0x81A5
	DEPTH_COMPONENT16_ARB                                                 = 0x81A5
	DEPTH_COMPONENT16_OES                                                 = 0x81A5
	DEPTH_COMPONENT16_SGIX                                                = 0x81A5
	DEPTH_COMPONENT24                                                     = 0x81A6
	DEPTH_COMPONENT24_ARB                                                 = 0x81A6
	DEPTH_COMPONENT24_OES                                                 = 0x81A6
	DEPTH_COMPONENT24_SGIX                                                = 0x81A6
	DEPTH_COMPONENT32                                                     = 0x81A7
	DEPTH_COMPONENT32_ARB                                                 = 0x81A7
	DEPTH_COMPONENT32_OES                                                 = 0x81A7
	DEPTH_COMPONENT32_SGIX                                                = 0x81A7
	ARRAY_ELEMENT_LOCK_FIRST_EXT                                          = 0x81A8
	ARRAY_ELEMENT_LOCK_COUNT_EXT                                          = 0x81A9
	CULL_VERTEX_EXT                                                       = 0x81AA
	CULL_VERTEX_EYE_POSITION_EXT                                          = 0x81AB
	CULL_VERTEX_OBJECT_POSITION_EXT                                       = 0x81AC
	IUI_V2F_EXT                                                           = 0x81AD
	IUI_V3F_EXT                                                           = 0x81AE
	IUI_N3F_V2F_EXT                                                       = 0x81AF
	IUI_N3F_V3F_EXT                                                       = 0x81B0
	T2F_IUI_V2F_EXT                                                       = 0x81B1
	T2F_IUI_V3F_EXT                                                       = 0x81B2
	T2F_IUI_N3F_V2F_EXT                                                   = 0x81B3
	T2F_IUI_N3F_V3F_EXT                                                   = 0x81B4
	INDEX_TEST_EXT                                                        = 0x81B5
	INDEX_TEST_FUNC_EXT                                                   = 0x81B6
	INDEX_TEST_REF_EXT                                                    = 0x81B7
	INDEX_MATERIAL_EXT                                                    = 0x81B8
	INDEX_MATERIAL_PARAMETER_EXT                                          = 0x81B9
	INDEX_MATERIAL_FACE_EXT                                               = 0x81BA
	YCRCB_422_SGIX                                                        = 0x81BB
	YCRCB_444_SGIX                                                        = 0x81BC
	WRAP_BORDER_SUN                                                       = 0x81D4
	UNPACK_CONSTANT_DATA_SUNX                                             = 0x81D5
	TEXTURE_CONSTANT_DATA_SUNX                                            = 0x81D6
	TRIANGLE_LIST_SUN                                                     = 0x81D7
	REPLACEMENT_CODE_SUN                                                  = 0x81D8
	GLOBAL_ALPHA_SUN                                                      = 0x81D9
	GLOBAL_ALPHA_FACTOR_SUN                                               = 0x81DA
	TEXTURE_COLOR_WRITEMASK_SGIS                                          = 0x81EF
	EYE_DISTANCE_TO_POINT_SGIS                                            = 0x81F0
	OBJECT_DISTANCE_TO_POINT_SGIS                                         = 0x81F1
	EYE_DISTANCE_TO_LINE_SGIS                                             = 0x81F2
	OBJECT_DISTANCE_TO_LINE_SGIS                                          = 0x81F3
	EYE_POINT_SGIS                                                        = 0x81F4
	OBJECT_POINT_SGIS                                                     = 0x81F5
	EYE_LINE_SGIS                                                         = 0x81F6
	OBJECT_LINE_SGIS                                                      = 0x81F7
	LIGHT_MODEL_COLOR_CONTROL                                             = 0x81F8
	LIGHT_MODEL_COLOR_CONTROL_EXT                                         = 0x81F8
	SINGLE_COLOR                                                          = 0x81F9
	SINGLE_COLOR_EXT                                                      = 0x81F9
	SEPARATE_SPECULAR_COLOR                                               = 0x81FA
	SEPARATE_SPECULAR_COLOR_EXT                                           = 0x81FA
	SHARED_TEXTURE_PALETTE_EXT                                            = 0x81FB
	TEXT_FRAGMENT_SHADER_ATI                                              = 0x8200
	FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING                                 = 0x8210
	FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT                             = 0x8210
	FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE                                 = 0x8211
	FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT                             = 0x8211
	FRAMEBUFFER_ATTACHMENT_RED_SIZE                                       = 0x8212
	FRAMEBUFFER_ATTACHMENT_GREEN_SIZE                                     = 0x8213
	FRAMEBUFFER_ATTACHMENT_BLUE_SIZE                                      = 0x8214
	FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE                                     = 0x8215
	FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE                                     = 0x8216
	FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE                                   = 0x8217
	FRAMEBUFFER_DEFAULT                                                   = 0x8218
	FRAMEBUFFER_UNDEFINED                                                 = 0x8219
	FRAMEBUFFER_UNDEFINED_OES                                             = 0x8219
	DEPTH_STENCIL_ATTACHMENT                                              = 0x821A
	MAJOR_VERSION                                                         = 0x821B
	MINOR_VERSION                                                         = 0x821C
	NUM_EXTENSIONS                                                        = 0x821D
	CONTEXT_FLAGS                                                         = 0x821E
	BUFFER_IMMUTABLE_STORAGE                                              = 0x821F
	BUFFER_IMMUTABLE_STORAGE_EXT                                          = 0x821F
	BUFFER_STORAGE_FLAGS                                                  = 0x8220
	BUFFER_STORAGE_FLAGS_EXT                                              = 0x8220
	PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED                               = 0x8221
	PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES                           = 0x8221
	INDEX                                                                 = 0x8222
	COMPRESSED_RED                                                        = 0x8225
	COMPRESSED_RG                                                         = 0x8226
	RG                                                                    = 0x8227
	RG_EXT                                                                = 0x8227
	RG_INTEGER                                                            = 0x8228
	R8                                                                    = 0x8229
	R8_EXT                                                                = 0x8229
	R16                                                                   = 0x822A
	R16_EXT                                                               = 0x822A
	RG8                                                                   = 0x822B
	RG8_EXT                                                               = 0x822B
	RG16                                                                  = 0x822C
	RG16_EXT                                                              = 0x822C
	R16F                                                                  = 0x822D
	R16F_EXT                                                              = 0x822D
	R32F                                                                  = 0x822E
	R32F_EXT                                                              = 0x822E
	RG16F                                                                 = 0x822F
	RG16F_EXT                                                             = 0x822F
	RG32F                                                                 = 0x8230
	RG32F_EXT                                                             = 0x8230
	R8I                                                                   = 0x8231
	R8UI                                                                  = 0x8232
	R16I                                                                  = 0x8233
	R16UI                                                                 = 0x8234
	R32I                                                                  = 0x8235
	R32UI                                                                 = 0x8236
	RG8I                                                                  = 0x8237
	RG8UI                                                                 = 0x8238
	RG16I                                                                 = 0x8239
	RG16UI                                                                = 0x823A
	RG32I                                                                 = 0x823B
	RG32UI                                                                = 0x823C
	SYNC_CL_EVENT_ARB                                                     = 0x8240
	SYNC_CL_EVENT_COMPLETE_ARB                                            = 0x8241
	DEBUG_OUTPUT_SYNCHRONOUS                                              = 0x8242
	DEBUG_OUTPUT_SYNCHRONOUS_ARB                                          = 0x8242
	DEBUG_OUTPUT_SYNCHRONOUS_KHR                                          = 0x8242
	DEBUG_NEXT_LOGGED_MESSAGE_LENGTH                                      = 0x8243
	DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB                                  = 0x8243
	DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR                                  = 0x8243
	DEBUG_CALLBACK_FUNCTION                                               = 0x8244
	DEBUG_CALLBACK_FUNCTION_ARB                                           = 0x8244
	DEBUG_CALLBACK_FUNCTION_KHR                                           = 0x8244
	DEBUG_CALLBACK_USER_PARAM                                             = 0x8245
	DEBUG_CALLBACK_USER_PARAM_ARB                                         = 0x8245
	DEBUG_CALLBACK_USER_PARAM_KHR                                         = 0x8245
	DEBUG_SOURCE_API                                                      = 0x8246
	DEBUG_SOURCE_API_ARB                                                  = 0x8246
	DEBUG_SOURCE_API_KHR                                                  = 0x8246
	DEBUG_SOURCE_WINDOW_SYSTEM                                            = 0x8247
	DEBUG_SOURCE_WINDOW_SYSTEM_ARB                                        = 0x8247
	DEBUG_SOURCE_WINDOW_SYSTEM_KHR                                        = 0x8247
	DEBUG_SOURCE_SHADER_COMPILER                                          = 0x8248
	DEBUG_SOURCE_SHADER_COMPILER_ARB                                      = 0x8248
	DEBUG_SOURCE_SHADER_COMPILER_KHR                                      = 0x8248
	DEBUG_SOURCE_THIRD_PARTY                                              = 0x8249
	DEBUG_SOURCE_THIRD_PARTY_ARB                                          = 0x8249
	DEBUG_SOURCE_THIRD_PARTY_KHR                                          = 0x8249
	DEBUG_SOURCE_APPLICATION                                              = 0x824A
	DEBUG_SOURCE_APPLICATION_ARB                                          = 0x824A
	DEBUG_SOURCE_APPLICATION_KHR                                          = 0x824A
	DEBUG_SOURCE_OTHER                                                    = 0x824B
	DEBUG_SOURCE_OTHER_ARB                                                = 0x824B
	DEBUG_SOURCE_OTHER_KHR                                                = 0x824B
	DEBUG_TYPE_ERROR                                                      = 0x824C
	DEBUG_TYPE_ERROR_ARB                                                  = 0x824C
	DEBUG_TYPE_ERROR_KHR                                                  = 0x824C
	DEBUG_TYPE_DEPRECATED_BEHAVIOR                                        = 0x824D
	DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB                                    = 0x824D
	DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR                                    = 0x824D
	DEBUG_TYPE_UNDEFINED_BEHAVIOR                                         = 0x824E
	DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB                                     = 0x824E
	DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR                                     = 0x824E
	DEBUG_TYPE_PORTABILITY                                                = 0x824F
	DEBUG_TYPE_PORTABILITY_ARB                                            = 0x824F
	DEBUG_TYPE_PORTABILITY_KHR                                            = 0x824F
	DEBUG_TYPE_PERFORMANCE                                                = 0x8250
	DEBUG_TYPE_PERFORMANCE_ARB                                            = 0x8250
	DEBUG_TYPE_PERFORMANCE_KHR                                            = 0x8250
	DEBUG_TYPE_OTHER                                                      = 0x8251
	DEBUG_TYPE_OTHER_ARB                                                  = 0x8251
	DEBUG_TYPE_OTHER_KHR                                                  = 0x8251
	LOSE_CONTEXT_ON_RESET                                                 = 0x8252
	LOSE_CONTEXT_ON_RESET_ARB                                             = 0x8252
	LOSE_CONTEXT_ON_RESET_EXT                                             = 0x8252
	LOSE_CONTEXT_ON_RESET_KHR                                             = 0x8252
	GUILTY_CONTEXT_RESET                                                  = 0x8253
	GUILTY_CONTEXT_RESET_ARB                                              = 0x8253
	GUILTY_CONTEXT_RESET_EXT                                              = 0x8253
	GUILTY_CONTEXT_RESET_KHR                                              = 0x8253
	INNOCENT_CONTEXT_RESET                                                = 0x8254
	INNOCENT_CONTEXT_RESET_ARB                                            = 0x8254
	INNOCENT_CONTEXT_RESET_EXT                                            = 0x8254
	INNOCENT_CONTEXT_RESET_KHR                                            = 0x8254
	UNKNOWN_CONTEXT_RESET                                                 = 0x8255
	UNKNOWN_CONTEXT_RESET_ARB                                             = 0x8255
	UNKNOWN_CONTEXT_RESET_EXT                                             = 0x8255
	UNKNOWN_CONTEXT_RESET_KHR                                             = 0x8255
	RESET_NOTIFICATION_STRATEGY                                           = 0x8256
	RESET_NOTIFICATION_STRATEGY_ARB                                       = 0x8256
	RESET_NOTIFICATION_STRATEGY_EXT                                       = 0x8256
	RESET_NOTIFICATION_STRATEGY_KHR                                       = 0x8256
	PROGRAM_BINARY_RETRIEVABLE_HINT                                       = 0x8257
	PROGRAM_SEPARABLE                                                     = 0x8258
	PROGRAM_SEPARABLE_EXT                                                 = 0x8258
	ACTIVE_PROGRAM                                                        = 0x8259
	PROGRAM_PIPELINE_BINDING                                              = 0x825A
	PROGRAM_PIPELINE_BINDING_EXT                                          = 0x825A
	MAX_VIEWPORTS                                                         = 0x825B
	MAX_VIEWPORTS_NV                                                      = 0x825B
	MAX_VIEWPORTS_OES                                                     = 0x825B
	VIEWPORT_SUBPIXEL_BITS                                                = 0x825C
	VIEWPORT_SUBPIXEL_BITS_EXT                                            = 0x825C
	VIEWPORT_SUBPIXEL_BITS_NV                                             = 0x825C
	VIEWPORT_SUBPIXEL_BITS_OES                                            = 0x825C
	VIEWPORT_BOUNDS_RANGE                                                 = 0x825D
	VIEWPORT_BOUNDS_RANGE_EXT                                             = 0x825D
	VIEWPORT_BOUNDS_RANGE_NV                                              = 0x825D
	VIEWPORT_BOUNDS_RANGE_OES                                             = 0x825D
	LAYER_PROVOKING_VERTEX                                                = 0x825E
	LAYER_PROVOKING_VERTEX_EXT                                            = 0x825E
	LAYER_PROVOKING_VERTEX_OES                                            = 0x825E
	VIEWPORT_INDEX_PROVOKING_VERTEX                                       = 0x825F
	VIEWPORT_INDEX_PROVOKING_VERTEX_EXT                                   = 0x825F
	VIEWPORT_INDEX_PROVOKING_VERTEX_NV                                    = 0x825F
	VIEWPORT_INDEX_PROVOKING_VERTEX_OES                                   = 0x825F
	UNDEFINED_VERTEX                                                      = 0x8260
	UNDEFINED_VERTEX_EXT                                                  = 0x8260
	UNDEFINED_VERTEX_OES                                                  = 0x8260
	NO_RESET_NOTIFICATION                                                 = 0x8261
	NO_RESET_NOTIFICATION_ARB                                             = 0x8261
	NO_RESET_NOTIFICATION_EXT                                             = 0x8261
	NO_RESET_NOTIFICATION_KHR                                             = 0x8261
	MAX_COMPUTE_SHARED_MEMORY_SIZE                                        = 0x8262
	MAX_COMPUTE_UNIFORM_COMPONENTS                                        = 0x8263
	MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS                                    = 0x8264
	MAX_COMPUTE_ATOMIC_COUNTERS                                           = 0x8265
	MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS                               = 0x8266
	COMPUTE_WORK_GROUP_SIZE                                               = 0x8267
	DEBUG_TYPE_MARKER                                                     = 0x8268
	DEBUG_TYPE_MARKER_KHR                                                 = 0x8268
	DEBUG_TYPE_PUSH_GROUP                                                 = 0x8269
	DEBUG_TYPE_PUSH_GROUP_KHR                                             = 0x8269
	DEBUG_TYPE_POP_GROUP                                                  = 0x826A
	DEBUG_TYPE_POP_GROUP_KHR                                              = 0x826A
	DEBUG_SEVERITY_NOTIFICATION                                           = 0x826B
	DEBUG_SEVERITY_NOTIFICATION_KHR                                       = 0x826B
	MAX_DEBUG_GROUP_STACK_DEPTH                                           = 0x826C
	MAX_DEBUG_GROUP_STACK_DEPTH_KHR                                       = 0x826C
	DEBUG_GROUP_STACK_DEPTH                                               = 0x826D
	DEBUG_GROUP_STACK_DEPTH_KHR                                           = 0x826D
	MAX_UNIFORM_LOCATIONS                                                 = 0x826E
	INTERNALFORMAT_SUPPORTED                                              = 0x826F
	INTERNALFORMAT_PREFERRED                                              = 0x8270
	INTERNALFORMAT_RED_SIZE                                               = 0x8271
	INTERNALFORMAT_GREEN_SIZE                                             = 0x8272
	INTERNALFORMAT_BLUE_SIZE                                              = 0x8273
	INTERNALFORMAT_ALPHA_SIZE                                             = 0x8274
	INTERNALFORMAT_DEPTH_SIZE                                             = 0x8275
	INTERNALFORMAT_STENCIL_SIZE                                           = 0x8276
	INTERNALFORMAT_SHARED_SIZE                                            = 0x8277
	INTERNALFORMAT_RED_TYPE                                               = 0x8278
	INTERNALFORMAT_GREEN_TYPE                                             = 0x8279
	INTERNALFORMAT_BLUE_TYPE                                              = 0x827A
	INTERNALFORMAT_ALPHA_TYPE                                             = 0x827B
	INTERNALFORMAT_DEPTH_TYPE                                             = 0x827C
	INTERNALFORMAT_STENCIL_TYPE                                           = 0x827D
	MAX_WIDTH                                                             = 0x827E
	MAX_HEIGHT                                                            = 0x827F
	MAX_DEPTH                                                             = 0x8280
	MAX_LAYERS                                                            = 0x8281
	MAX_COMBINED_DIMENSIONS                                               = 0x8282
	COLOR_COMPONENTS                                                      = 0x8283
	DEPTH_COMPONENTS                                                      = 0x8284
	STENCIL_COMPONENTS                                                    = 0x8285
	COLOR_RENDERABLE                                                      = 0x8286
	DEPTH_RENDERABLE                                                      = 0x8287
	STENCIL_RENDERABLE                                                    = 0x8288
	FRAMEBUFFER_RENDERABLE                                                = 0x8289
	FRAMEBUFFER_RENDERABLE_LAYERED                                        = 0x828A
	FRAMEBUFFER_BLEND                                                     = 0x828B
	READ_PIXELS                                                           = 0x828C
	READ_PIXELS_FORMAT                                                    = 0x828D
	READ_PIXELS_TYPE                                                      = 0x828E
	TEXTURE_IMAGE_FORMAT                                                  = 0x828F
	TEXTURE_IMAGE_TYPE                                                    = 0x8290
	GET_TEXTURE_IMAGE_FORMAT                                              = 0x8291
	GET_TEXTURE_IMAGE_TYPE                                                = 0x8292
	MIPMAP                                                                = 0x8293
	MANUAL_GENERATE_MIPMAP                                                = 0x8294
	AUTO_GENERATE_MIPMAP                                                  = 0x8295
	COLOR_ENCODING                                                        = 0x8296
	SRGB_READ                                                             = 0x8297
	SRGB_WRITE                                                            = 0x8298
	SRGB_DECODE_ARB                                                       = 0x8299
	FILTER                                                                = 0x829A
	VERTEX_TEXTURE                                                        = 0x829B
	TESS_CONTROL_TEXTURE                                                  = 0x829C
	TESS_EVALUATION_TEXTURE                                               = 0x829D
	GEOMETRY_TEXTURE                                                      = 0x829E
	FRAGMENT_TEXTURE                                                      = 0x829F
	COMPUTE_TEXTURE                                                       = 0x82A0
	TEXTURE_SHADOW                                                        = 0x82A1
	TEXTURE_GATHER                                                        = 0x82A2
	TEXTURE_GATHER_SHADOW                                                 = 0x82A3
	SHADER_IMAGE_LOAD                                                     = 0x82A4
	SHADER_IMAGE_STORE                                                    = 0x82A5
	SHADER_IMAGE_ATOMIC                                                   = 0x82A6
	IMAGE_TEXEL_SIZE                                                      = 0x82A7
	IMAGE_COMPATIBILITY_CLASS                                             = 0x82A8
	IMAGE_PIXEL_FORMAT                                                    = 0x82A9
	IMAGE_PIXEL_TYPE                                                      = 0x82AA
	SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST                                   = 0x82AC
	SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST                                 = 0x82AD
	SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE                                  = 0x82AE
	SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE                                = 0x82AF
	TEXTURE_COMPRESSED_BLOCK_WIDTH                                        = 0x82B1
	TEXTURE_COMPRESSED_BLOCK_HEIGHT                                       = 0x82B2
	TEXTURE_COMPRESSED_BLOCK_SIZE                                         = 0x82B3
	CLEAR_BUFFER                                                          = 0x82B4
	TEXTURE_VIEW                                                          = 0x82B5
	VIEW_COMPATIBILITY_CLASS                                              = 0x82B6
	FULL_SUPPORT                                                          = 0x82B7
	CAVEAT_SUPPORT                                                        = 0x82B8
	IMAGE_CLASS_4_X_32                                                    = 0x82B9
	IMAGE_CLASS_2_X_32                                                    = 0x82BA
	IMAGE_CLASS_1_X_32                                                    = 0x82BB
	IMAGE_CLASS_4_X_16                                                    = 0x82BC
	IMAGE_CLASS_2_X_16                                                    = 0x82BD
	IMAGE_CLASS_1_X_16                                                    = 0x82BE
	IMAGE_CLASS_4_X_8                                                     = 0x82BF
	IMAGE_CLASS_2_X_8                                                     = 0x82C0
	IMAGE_CLASS_1_X_8                                                     = 0x82C1
	IMAGE_CLASS_11_11_10                                                  = 0x82C2
	IMAGE_CLASS_10_10_10_2                                                = 0x82C3
	VIEW_CLASS_128_BITS                                                   = 0x82C4
	VIEW_CLASS_96_BITS                                                    = 0x82C5
	VIEW_CLASS_64_BITS                                                    = 0x82C6
	VIEW_CLASS_48_BITS                                                    = 0x82C7
	VIEW_CLASS_32_BITS                                                    = 0x82C8
	VIEW_CLASS_24_BITS                                                    = 0x82C9
	VIEW_CLASS_16_BITS                                                    = 0x82CA
	VIEW_CLASS_8_BITS                                                     = 0x82CB
	VIEW_CLASS_S3TC_DXT1_RGB                                              = 0x82CC
	VIEW_CLASS_S3TC_DXT1_RGBA                                             = 0x82CD
	VIEW_CLASS_S3TC_DXT3_RGBA                                             = 0x82CE
	VIEW_CLASS_S3TC_DXT5_RGBA                                             = 0x82CF
	VIEW_CLASS_RGTC1_RED                                                  = 0x82D0
	VIEW_CLASS_RGTC2_RG                                                   = 0x82D1
	VIEW_CLASS_BPTC_UNORM                                                 = 0x82D2
	VIEW_CLASS_BPTC_FLOAT                                                 = 0x82D3
	VERTEX_ATTRIB_BINDING                                                 = 0x82D4
	VERTEX_ATTRIB_RELATIVE_OFFSET                                         = 0x82D5
	VERTEX_BINDING_DIVISOR                                                = 0x82D6
	VERTEX_BINDING_OFFSET                                                 = 0x82D7
	VERTEX_BINDING_STRIDE                                                 = 0x82D8
	MAX_VERTEX_ATTRIB_RELATIVE_OFFSET                                     = 0x82D9
	MAX_VERTEX_ATTRIB_BINDINGS                                            = 0x82DA
	TEXTURE_VIEW_MIN_LEVEL                                                = 0x82DB
	TEXTURE_VIEW_MIN_LEVEL_EXT                                            = 0x82DB
	TEXTURE_VIEW_MIN_LEVEL_OES                                            = 0x82DB
	TEXTURE_VIEW_NUM_LEVELS                                               = 0x82DC
	TEXTURE_VIEW_NUM_LEVELS_EXT                                           = 0x82DC
	TEXTURE_VIEW_NUM_LEVELS_OES                                           = 0x82DC
	TEXTURE_VIEW_MIN_LAYER                                                = 0x82DD
	TEXTURE_VIEW_MIN_LAYER_EXT                                            = 0x82DD
	TEXTURE_VIEW_MIN_LAYER_OES                                            = 0x82DD
	TEXTURE_VIEW_NUM_LAYERS                                               = 0x82DE
	TEXTURE_VIEW_NUM_LAYERS_EXT                                           = 0x82DE
	TEXTURE_VIEW_NUM_LAYERS_OES                                           = 0x82DE
	TEXTURE_IMMUTABLE_LEVELS                                              = 0x82DF
	BUFFER                                                                = 0x82E0
	BUFFER_KHR                                                            = 0x82E0
	SHADER                                                                = 0x82E1
	SHADER_KHR                                                            = 0x82E1
	PROGRAM                                                               = 0x82E2
	PROGRAM_KHR                                                           = 0x82E2
	QUERY                                                                 = 0x82E3
	QUERY_KHR                                                             = 0x82E3
	PROGRAM_PIPELINE                                                      = 0x82E4
	PROGRAM_PIPELINE_KHR                                                  = 0x82E4
	MAX_VERTEX_ATTRIB_STRIDE                                              = 0x82E5
	SAMPLER                                                               = 0x82E6
	SAMPLER_KHR                                                           = 0x82E6
	DISPLAY_LIST                                                          = 0x82E7
	MAX_LABEL_LENGTH                                                      = 0x82E8
	MAX_LABEL_LENGTH_KHR                                                  = 0x82E8
	NUM_SHADING_LANGUAGE_VERSIONS                                         = 0x82E9
	QUERY_TARGET                                                          = 0x82EA
	TRANSFORM_FEEDBACK_OVERFLOW                                           = 0x82EC
	TRANSFORM_FEEDBACK_OVERFLOW_ARB                                       = 0x82EC
	TRANSFORM_FEEDBACK_STREAM_OVERFLOW                                    = 0x82ED
	TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB                                = 0x82ED
	VERTICES_SUBMITTED                                                    = 0x82EE
	VERTICES_SUBMITTED_ARB                                                = 0x82EE
	PRIMITIVES_SUBMITTED                                                  = 0x82EF
	PRIMITIVES_SUBMITTED_ARB                                              = 0x82EF
	VERTEX_SHADER_INVOCATIONS                                             = 0x82F0
	VERTEX_SHADER_INVOCATIONS_ARB                                         = 0x82F0
	TESS_CONTROL_SHADER_PATCHES                                           = 0x82F1
	TESS_CONTROL_SHADER_PATCHES_ARB                                       = 0x82F1
	TESS_EVALUATION_SHADER_INVOCATIONS                                    = 0x82F2
	TESS_EVALUATION_SHADER_INVOCATIONS_ARB                                = 0x82F2
	GEOMETRY_SHADER_PRIMITIVES_EMITTED                                    = 0x82F3
	GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB                                = 0x82F3
	FRAGMENT_SHADER_INVOCATIONS                                           = 0x82F4
	FRAGMENT_SHADER_INVOCATIONS_ARB                                       = 0x82F4
	COMPUTE_SHADER_INVOCATIONS                                            = 0x82F5
	COMPUTE_SHADER_INVOCATIONS_ARB                                        = 0x82F5
	CLIPPING_INPUT_PRIMITIVES                                             = 0x82F6
	CLIPPING_INPUT_PRIMITIVES_ARB                                         = 0x82F6
	CLIPPING_OUTPUT_PRIMITIVES                                            = 0x82F7
	CLIPPING_OUTPUT_PRIMITIVES_ARB                                        = 0x82F7
	SPARSE_BUFFER_PAGE_SIZE_ARB                                           = 0x82F8
	MAX_CULL_DISTANCES                                                    = 0x82F9
	MAX_CULL_DISTANCES_EXT                                                = 0x82F9
	MAX_COMBINED_CLIP_AND_CULL_DISTANCES                                  = 0x82FA
	MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT                              = 0x82FA
	CONTEXT_RELEASE_BEHAVIOR                                              = 0x82FB
	CONTEXT_RELEASE_BEHAVIOR_KHR                                          = 0x82FB
	CONTEXT_RELEASE_BEHAVIOR_FLUSH                                        = 0x82FC
	CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR                                    = 0x82FC
	ROBUST_GPU_TIMEOUT_MS_KHR                                             = 0x82FD
	DEPTH_PASS_INSTRUMENT_SGIX                                            = 0x8310
	DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX                                   = 0x8311
	DEPTH_PASS_INSTRUMENT_MAX_SGIX                                        = 0x8312
	FRAGMENTS_INSTRUMENT_SGIX                                             = 0x8313
	FRAGMENTS_INSTRUMENT_COUNTERS_SGIX                                    = 0x8314
	FRAGMENTS_INSTRUMENT_MAX_SGIX                                         = 0x8315
	CONVOLUTION_HINT_SGIX                                                 = 0x8316
	YCRCB_SGIX                                                            = 0x8318
	YCRCBA_SGIX                                                           = 0x8319
	UNPACK_COMPRESSED_SIZE_SGIX                                           = 0x831A
	PACK_MAX_COMPRESSED_SIZE_SGIX                                         = 0x831B
	PACK_COMPRESSED_SIZE_SGIX                                             = 0x831C
	SLIM8U_SGIX                                                           = 0x831D
	SLIM10U_SGIX                                                          = 0x831E
	SLIM12S_SGIX                                                          = 0x831F
	ALPHA_MIN_SGIX                                                        = 0x8320
	ALPHA_MAX_SGIX                                                        = 0x8321
	SCALEBIAS_HINT_SGIX                                                   = 0x8322
	ASYNC_MARKER_SGIX                                                     = 0x8329
	PIXEL_TEX_GEN_MODE_SGIX                                               = 0x832B
	ASYNC_HISTOGRAM_SGIX                                                  = 0x832C
	MAX_ASYNC_HISTOGRAM_SGIX                                              = 0x832D
	PIXEL_TRANSFORM_2D_EXT                                                = 0x8330
	PIXEL_MAG_FILTER_EXT                                                  = 0x8331
	PIXEL_MIN_FILTER_EXT                                                  = 0x8332
	PIXEL_CUBIC_WEIGHT_EXT                                                = 0x8333
	CUBIC_EXT                                                             = 0x8334
	AVERAGE_EXT                                                           = 0x8335
	PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT                                    = 0x8336
	MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT                                = 0x8337
	PIXEL_TRANSFORM_2D_MATRIX_EXT                                         = 0x8338
	FRAGMENT_MATERIAL_EXT                                                 = 0x8349
	FRAGMENT_NORMAL_EXT                                                   = 0x834A
	FRAGMENT_COLOR_EXT                                                    = 0x834C
	ATTENUATION_EXT                                                       = 0x834D
	SHADOW_ATTENUATION_EXT                                                = 0x834E
	TEXTURE_APPLICATION_MODE_EXT                                          = 0x834F
	TEXTURE_LIGHT_EXT                                                     = 0x8350
	TEXTURE_MATERIAL_FACE_EXT                                             = 0x8351
	TEXTURE_MATERIAL_PARAMETER_EXT                                        = 0x8352
	PIXEL_TEXTURE_SGIS                                                    = 0x8353
	PIXEL_FRAGMENT_RGB_SOURCE_SGIS                                        = 0x8354
	PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS                                      = 0x8355
	PIXEL_GROUP_COLOR_SGIS                                                = 0x8356
	LINE_QUALITY_HINT_SGIX                                                = 0x835B
	ASYNC_TEX_IMAGE_SGIX                                                  = 0x835C
	ASYNC_DRAW_PIXELS_SGIX                                                = 0x835D
	ASYNC_READ_PIXELS_SGIX                                                = 0x835E
	MAX_ASYNC_TEX_IMAGE_SGIX                                              = 0x835F
	MAX_ASYNC_DRAW_PIXELS_SGIX                                            = 0x8360
	MAX_ASYNC_READ_PIXELS_SGIX                                            = 0x8361
	UNSIGNED_BYTE_2_3_3_REV                                               = 0x8362
	UNSIGNED_BYTE_2_3_3_REV_EXT                                           = 0x8362
	UNSIGNED_SHORT_5_6_5                                                  = 0x8363
	UNSIGNED_SHORT_5_6_5_EXT                                              = 0x8363
	UNSIGNED_SHORT_5_6_5_REV                                              = 0x8364
	UNSIGNED_SHORT_5_6_5_REV_EXT                                          = 0x8364
	UNSIGNED_SHORT_4_4_4_4_REV                                            = 0x8365
	UNSIGNED_SHORT_4_4_4_4_REV_EXT                                        = 0x8365
	UNSIGNED_SHORT_4_4_4_4_REV_IMG                                        = 0x8365
	UNSIGNED_SHORT_1_5_5_5_REV                                            = 0x8366
	UNSIGNED_SHORT_1_5_5_5_REV_EXT                                        = 0x8366
	UNSIGNED_INT_8_8_8_8_REV                                              = 0x8367
	UNSIGNED_INT_8_8_8_8_REV_EXT                                          = 0x8367
	UNSIGNED_INT_2_10_10_10_REV                                           = 0x8368
	UNSIGNED_INT_2_10_10_10_REV_EXT                                       = 0x8368
	TEXTURE_MAX_CLAMP_S_SGIX                                              = 0x8369
	TEXTURE_MAX_CLAMP_T_SGIX                                              = 0x836A
	TEXTURE_MAX_CLAMP_R_SGIX                                              = 0x836B
	MIRRORED_REPEAT                                                       = 0x8370
	MIRRORED_REPEAT_ARB                                                   = 0x8370
	MIRRORED_REPEAT_IBM                                                   = 0x8370
	MIRRORED_REPEAT_OES                                                   = 0x8370
	RGB_S3TC                                                              = 0x83A0
	RGB4_S3TC                                                             = 0x83A1
	RGBA_S3TC                                                             = 0x83A2
	RGBA4_S3TC                                                            = 0x83A3
	RGBA_DXT5_S3TC                                                        = 0x83A4
	RGBA4_DXT5_S3TC                                                       = 0x83A5
	VERTEX_PRECLIP_SGIX                                                   = 0x83EE
	VERTEX_PRECLIP_HINT_SGIX                                              = 0x83EF
	COMPRESSED_RGB_S3TC_DXT1_EXT                                          = 0x83F0
	COMPRESSED_RGBA_S3TC_DXT1_EXT                                         = 0x83F1
	COMPRESSED_RGBA_S3TC_DXT3_ANGLE                                       = 0x83F2
	COMPRESSED_RGBA_S3TC_DXT3_EXT                                         = 0x83F2
	COMPRESSED_RGBA_S3TC_DXT5_ANGLE                                       = 0x83F3
	COMPRESSED_RGBA_S3TC_DXT5_EXT                                         = 0x83F3
	PARALLEL_ARRAYS_INTEL                                                 = 0x83F4
	VERTEX_ARRAY_PARALLEL_POINTERS_INTEL                                  = 0x83F5
	NORMAL_ARRAY_PARALLEL_POINTERS_INTEL                                  = 0x83F6
	COLOR_ARRAY_PARALLEL_POINTERS_INTEL                                   = 0x83F7
	TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL                           = 0x83F8
	PERFQUERY_DONOT_FLUSH_INTEL                                           = 0x83F9
	PERFQUERY_FLUSH_INTEL                                                 = 0x83FA
	PERFQUERY_WAIT_INTEL                                                  = 0x83FB
	BLACKHOLE_RENDER_INTEL                                                = 0x83FC
	CONSERVATIVE_RASTERIZATION_INTEL                                      = 0x83FE
	TEXTURE_MEMORY_LAYOUT_INTEL                                           = 0x83FF
	FRAGMENT_LIGHTING_SGIX                                                = 0x8400
	FRAGMENT_COLOR_MATERIAL_SGIX                                          = 0x8401
	FRAGMENT_COLOR_MATERIAL_FACE_SGIX                                     = 0x8402
	FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX                                = 0x8403
	MAX_FRAGMENT_LIGHTS_SGIX                                              = 0x8404
	MAX_ACTIVE_LIGHTS_SGIX                                                = 0x8405
	CURRENT_RASTER_NORMAL_SGIX                                            = 0x8406
	LIGHT_ENV_MODE_SGIX                                                   = 0x8407
	FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX                                = 0x8408
	FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX                                    = 0x8409
	FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX                                     = 0x840A
	FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX                        = 0x840B
	FRAGMENT_LIGHT0_SGIX                                                  = 0x840C
	FRAGMENT_LIGHT1_SGIX                                                  = 0x840D
	FRAGMENT_LIGHT2_SGIX                                                  = 0x840E
	FRAGMENT_LIGHT3_SGIX                                                  = 0x840F
	FRAGMENT_LIGHT4_SGIX                                                  = 0x8410
	FRAGMENT_LIGHT5_SGIX                                                  = 0x8411
	FRAGMENT_LIGHT6_SGIX                                                  = 0x8412
	FRAGMENT_LIGHT7_SGIX                                                  = 0x8413
	PACK_RESAMPLE_SGIX                                                    = 0x842E
	UNPACK_RESAMPLE_SGIX                                                  = 0x842F
	RESAMPLE_DECIMATE_SGIX                                                = 0x8430
	RESAMPLE_REPLICATE_SGIX                                               = 0x8433
	RESAMPLE_ZERO_FILL_SGIX                                               = 0x8434
	TANGENT_ARRAY_EXT                                                     = 0x8439
	BINORMAL_ARRAY_EXT                                                    = 0x843A
	CURRENT_TANGENT_EXT                                                   = 0x843B
	CURRENT_BINORMAL_EXT                                                  = 0x843C
	TANGENT_ARRAY_TYPE_EXT                                                = 0x843E
	TANGENT_ARRAY_STRIDE_EXT                                              = 0x843F
	BINORMAL_ARRAY_TYPE_EXT                                               = 0x8440
	BINORMAL_ARRAY_STRIDE_EXT                                             = 0x8441
	TANGENT_ARRAY_POINTER_EXT                                             = 0x8442
	BINORMAL_ARRAY_POINTER_EXT                                            = 0x8443
	MAP1_TANGENT_EXT                                                      = 0x8444
	MAP2_TANGENT_EXT                                                      = 0x8445
	MAP1_BINORMAL_EXT                                                     = 0x8446
	MAP2_BINORMAL_EXT                                                     = 0x8447
	NEAREST_CLIPMAP_NEAREST_SGIX                                          = 0x844D
	NEAREST_CLIPMAP_LINEAR_SGIX                                           = 0x844E
	LINEAR_CLIPMAP_NEAREST_SGIX                                           = 0x844F
	FOG_COORDINATE_SOURCE                                                 = 0x8450
	FOG_COORDINATE_SOURCE_EXT                                             = 0x8450
	FOG_COORD_SRC                                                         = 0x8450
	FOG_COORDINATE                                                        = 0x8451
	FOG_COORD                                                             = 0x8451
	FOG_COORDINATE_EXT                                                    = 0x8451
	FRAGMENT_DEPTH                                                        = 0x8452
	FRAGMENT_DEPTH_EXT                                                    = 0x8452
	CURRENT_FOG_COORDINATE                                                = 0x8453
	CURRENT_FOG_COORD                                                     = 0x8453
	CURRENT_FOG_COORDINATE_EXT                                            = 0x8453
	FOG_COORDINATE_ARRAY_TYPE                                             = 0x8454
	FOG_COORDINATE_ARRAY_TYPE_EXT                                         = 0x8454
	FOG_COORD_ARRAY_TYPE                                                  = 0x8454
	FOG_COORDINATE_ARRAY_STRIDE                                           = 0x8455
	FOG_COORDINATE_ARRAY_STRIDE_EXT                                       = 0x8455
	FOG_COORD_ARRAY_STRIDE                                                = 0x8455
	FOG_COORDINATE_ARRAY_POINTER                                          = 0x8456
	FOG_COORDINATE_ARRAY_POINTER_EXT                                      = 0x8456
	FOG_COORD_ARRAY_POINTER                                               = 0x8456
	FOG_COORDINATE_ARRAY                                                  = 0x8457
	FOG_COORDINATE_ARRAY_EXT                                              = 0x8457
	FOG_COORD_ARRAY                                                       = 0x8457
	COLOR_SUM                                                             = 0x8458
	COLOR_SUM_ARB                                                         = 0x8458
	COLOR_SUM_EXT                                                         = 0x8458
	CURRENT_SECONDARY_COLOR                                               = 0x8459
	CURRENT_SECONDARY_COLOR_EXT                                           = 0x8459
	SECONDARY_COLOR_ARRAY_SIZE                                            = 0x845A
	SECONDARY_COLOR_ARRAY_SIZE_EXT                                        = 0x845A
	SECONDARY_COLOR_ARRAY_TYPE                                            = 0x845B
	SECONDARY_COLOR_ARRAY_TYPE_EXT                                        = 0x845B
	SECONDARY_COLOR_ARRAY_STRIDE                                          = 0x845C
	SECONDARY_COLOR_ARRAY_STRIDE_EXT                                      = 0x845C
	SECONDARY_COLOR_ARRAY_POINTER                                         = 0x845D
	SECONDARY_COLOR_ARRAY_POINTER_EXT                                     = 0x845D
	SECONDARY_COLOR_ARRAY                                                 = 0x845E
	SECONDARY_COLOR_ARRAY_EXT                                             = 0x845E
	CURRENT_RASTER_SECONDARY_COLOR                                        = 0x845F
	ALIASED_POINT_SIZE_RANGE                                              = 0x846D
	ALIASED_LINE_WIDTH_RANGE                                              = 0x846E
	SCREEN_COORDINATES_REND                                               = 0x8490
	INVERTED_SCREEN_W_REND                                                = 0x8491
	TEXTURE0                                                              = 0x84C0
	TEXTURE0_ARB                                                          = 0x84C0
	TEXTURE1                                                              = 0x84C1
	TEXTURE1_ARB                                                          = 0x84C1
	TEXTURE2                                                              = 0x84C2
	TEXTURE2_ARB                                                          = 0x84C2
	TEXTURE3                                                              = 0x84C3
	TEXTURE3_ARB                                                          = 0x84C3
	TEXTURE4                                                              = 0x84C4
	TEXTURE4_ARB                                                          = 0x84C4
	TEXTURE5                                                              = 0x84C5
	TEXTURE5_ARB                                                          = 0x84C5
	TEXTURE6                                                              = 0x84C6
	TEXTURE6_ARB                                                          = 0x84C6
	TEXTURE7                                                              = 0x84C7
	TEXTURE7_ARB                                                          = 0x84C7
	TEXTURE8                                                              = 0x84C8
	TEXTURE8_ARB                                                          = 0x84C8
	TEXTURE9                                                              = 0x84C9
	TEXTURE9_ARB                                                          = 0x84C9
	TEXTURE10                                                             = 0x84CA
	TEXTURE10_ARB                                                         = 0x84CA
	TEXTURE11                                                             = 0x84CB
	TEXTURE11_ARB                                                         = 0x84CB
	TEXTURE12                                                             = 0x84CC
	TEXTURE12_ARB                                                         = 0x84CC
	TEXTURE13                                                             = 0x84CD
	TEXTURE13_ARB                                                         = 0x84CD
	TEXTURE14                                                             = 0x84CE
	TEXTURE14_ARB                                                         = 0x84CE
	TEXTURE15                                                             = 0x84CF
	TEXTURE15_ARB                                                         = 0x84CF
	TEXTURE16                                                             = 0x84D0
	TEXTURE16_ARB                                                         = 0x84D0
	TEXTURE17                                                             = 0x84D1
	TEXTURE17_ARB                                                         = 0x84D1
	TEXTURE18                                                             = 0x84D2
	TEXTURE18_ARB                                                         = 0x84D2
	TEXTURE19                                                             = 0x84D3
	TEXTURE19_ARB                                                         = 0x84D3
	TEXTURE20                                                             = 0x84D4
	TEXTURE20_ARB                                                         = 0x84D4
	TEXTURE21                                                             = 0x84D5
	TEXTURE21_ARB                                                         = 0x84D5
	TEXTURE22                                                             = 0x84D6
	TEXTURE22_ARB                                                         = 0x84D6
	TEXTURE23                                                             = 0x84D7
	TEXTURE23_ARB                                                         = 0x84D7
	TEXTURE24                                                             = 0x84D8
	TEXTURE24_ARB                                                         = 0x84D8
	TEXTURE25                                                             = 0x84D9
	TEXTURE25_ARB                                                         = 0x84D9
	TEXTURE26                                                             = 0x84DA
	TEXTURE26_ARB                                                         = 0x84DA
	TEXTURE27                                                             = 0x84DB
	TEXTURE27_ARB                                                         = 0x84DB
	TEXTURE28                                                             = 0x84DC
	TEXTURE28_ARB                                                         = 0x84DC
	TEXTURE29                                                             = 0x84DD
	TEXTURE29_ARB                                                         = 0x84DD
	TEXTURE30                                                             = 0x84DE
	TEXTURE30_ARB                                                         = 0x84DE
	TEXTURE31                                                             = 0x84DF
	TEXTURE31_ARB                                                         = 0x84DF
	ACTIVE_TEXTURE                                                        = 0x84E0
	ACTIVE_TEXTURE_ARB                                                    = 0x84E0
	CLIENT_ACTIVE_TEXTURE                                                 = 0x84E1
	CLIENT_ACTIVE_TEXTURE_ARB                                             = 0x84E1
	MAX_TEXTURE_UNITS                                                     = 0x84E2
	MAX_TEXTURE_UNITS_ARB                                                 = 0x84E2
	TRANSPOSE_MODELVIEW_MATRIX                                            = 0x84E3
	TRANSPOSE_MODELVIEW_MATRIX_ARB                                        = 0x84E3
	PATH_TRANSPOSE_MODELVIEW_MATRIX_NV                                    = 0x84E3
	TRANSPOSE_PROJECTION_MATRIX                                           = 0x84E4
	TRANSPOSE_PROJECTION_MATRIX_ARB                                       = 0x84E4
	PATH_TRANSPOSE_PROJECTION_MATRIX_NV                                   = 0x84E4
	TRANSPOSE_TEXTURE_MATRIX                                              = 0x84E5
	TRANSPOSE_TEXTURE_MATRIX_ARB                                          = 0x84E5
	TRANSPOSE_COLOR_MATRIX                                                = 0x84E6
	TRANSPOSE_COLOR_MATRIX_ARB                                            = 0x84E6
	SUBTRACT                                                              = 0x84E7
	SUBTRACT_ARB                                                          = 0x84E7
	MAX_RENDERBUFFER_SIZE                                                 = 0x84E8
	MAX_RENDERBUFFER_SIZE_EXT                                             = 0x84E8
	MAX_RENDERBUFFER_SIZE_OES                                             = 0x84E8
	COMPRESSED_ALPHA                                                      = 0x84E9
	COMPRESSED_ALPHA_ARB                                                  = 0x84E9
	COMPRESSED_LUMINANCE                                                  = 0x84EA
	COMPRESSED_LUMINANCE_ARB                                              = 0x84EA
	COMPRESSED_LUMINANCE_ALPHA                                            = 0x84EB
	COMPRESSED_LUMINANCE_ALPHA_ARB                                        = 0x84EB
	COMPRESSED_INTENSITY                                                  = 0x84EC
	COMPRESSED_INTENSITY_ARB                                              = 0x84EC
	COMPRESSED_RGB                                                        = 0x84ED
	COMPRESSED_RGB_ARB                                                    = 0x84ED
	COMPRESSED_RGBA                                                       = 0x84EE
	COMPRESSED_RGBA_ARB                                                   = 0x84EE
	TEXTURE_COMPRESSION_HINT                                              = 0x84EF
	TEXTURE_COMPRESSION_HINT_ARB                                          = 0x84EF
	UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER                       = 0x84F0
	UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER                    = 0x84F1
	ALL_COMPLETED_NV                                                      = 0x84F2
	FENCE_STATUS_NV                                                       = 0x84F3
	FENCE_CONDITION_NV                                                    = 0x84F4
	TEXTURE_RECTANGLE                                                     = 0x84F5
	TEXTURE_RECTANGLE_ARB                                                 = 0x84F5
	TEXTURE_RECTANGLE_NV                                                  = 0x84F5
	TEXTURE_BINDING_RECTANGLE                                             = 0x84F6
	TEXTURE_BINDING_RECTANGLE_ARB                                         = 0x84F6
	TEXTURE_BINDING_RECTANGLE_NV                                          = 0x84F6
	PROXY_TEXTURE_RECTANGLE                                               = 0x84F7
	PROXY_TEXTURE_RECTANGLE_ARB                                           = 0x84F7
	PROXY_TEXTURE_RECTANGLE_NV                                            = 0x84F7
	MAX_RECTANGLE_TEXTURE_SIZE                                            = 0x84F8
	MAX_RECTANGLE_TEXTURE_SIZE_ARB                                        = 0x84F8
	MAX_RECTANGLE_TEXTURE_SIZE_NV                                         = 0x84F8
	DEPTH_STENCIL                                                         = 0x84F9
	DEPTH_STENCIL_EXT                                                     = 0x84F9
	DEPTH_STENCIL_NV                                                      = 0x84F9
	DEPTH_STENCIL_OES                                                     = 0x84F9
	UNSIGNED_INT_24_8                                                     = 0x84FA
	UNSIGNED_INT_24_8_EXT                                                 = 0x84FA
	UNSIGNED_INT_24_8_NV                                                  = 0x84FA
	UNSIGNED_INT_24_8_OES                                                 = 0x84FA
	MAX_TEXTURE_LOD_BIAS                                                  = 0x84FD
	MAX_TEXTURE_LOD_BIAS_EXT                                              = 0x84FD
	TEXTURE_MAX_ANISOTROPY                                                = 0x84FE
	TEXTURE_MAX_ANISOTROPY_EXT                                            = 0x84FE
	MAX_TEXTURE_MAX_ANISOTROPY                                            = 0x84FF
	MAX_TEXTURE_MAX_ANISOTROPY_EXT                                        = 0x84FF
	TEXTURE_FILTER_CONTROL                                                = 0x8500
	TEXTURE_FILTER_CONTROL_EXT                                            = 0x8500
	TEXTURE_LOD_BIAS                                                      = 0x8501
	TEXTURE_LOD_BIAS_EXT                                                  = 0x8501
	MODELVIEW1_STACK_DEPTH_EXT                                            = 0x8502
	COMBINE4_NV                                                           = 0x8503
	MAX_SHININESS_NV                                                      = 0x8504
	MAX_SPOT_EXPONENT_NV                                                  = 0x8505
	MODELVIEW1_MATRIX_EXT                                                 = 0x8506
	INCR_WRAP                                                             = 0x8507
	INCR_WRAP_EXT                                                         = 0x8507
	INCR_WRAP_OES                                                         = 0x8507
	DECR_WRAP                                                             = 0x8508
	DECR_WRAP_EXT                                                         = 0x8508
	DECR_WRAP_OES                                                         = 0x8508
	VERTEX_WEIGHTING_EXT                                                  = 0x8509
	MODELVIEW1_ARB                                                        = 0x850A
	MODELVIEW1_EXT                                                        = 0x850A
	CURRENT_VERTEX_WEIGHT_EXT                                             = 0x850B
	VERTEX_WEIGHT_ARRAY_EXT                                               = 0x850C
	VERTEX_WEIGHT_ARRAY_SIZE_EXT                                          = 0x850D
	VERTEX_WEIGHT_ARRAY_TYPE_EXT                                          = 0x850E
	VERTEX_WEIGHT_ARRAY_STRIDE_EXT                                        = 0x850F
	VERTEX_WEIGHT_ARRAY_POINTER_EXT                                       = 0x8510
	NORMAL_MAP                                                            = 0x8511
	NORMAL_MAP_ARB                                                        = 0x8511
	NORMAL_MAP_EXT                                                        = 0x8511
	NORMAL_MAP_NV                                                         = 0x8511
	NORMAL_MAP_OES                                                        = 0x8511
	REFLECTION_MAP                                                        = 0x8512
	REFLECTION_MAP_ARB                                                    = 0x8512
	REFLECTION_MAP_EXT                                                    = 0x8512
	REFLECTION_MAP_NV                                                     = 0x8512
	REFLECTION_MAP_OES                                                    = 0x8512
	TEXTURE_CUBE_MAP                                                      = 0x8513
	TEXTURE_CUBE_MAP_ARB                                                  = 0x8513
	TEXTURE_CUBE_MAP_EXT                                                  = 0x8513
	TEXTURE_CUBE_MAP_OES                                                  = 0x8513
	TEXTURE_BINDING_CUBE_MAP                                              = 0x8514
	TEXTURE_BINDING_CUBE_MAP_ARB                                          = 0x8514
	TEXTURE_BINDING_CUBE_MAP_EXT                                          = 0x8514
	TEXTURE_BINDING_CUBE_MAP_OES                                          = 0x8514
	TEXTURE_CUBE_MAP_POSITIVE_X                                           = 0x8515
	TEXTURE_CUBE_MAP_POSITIVE_X_ARB                                       = 0x8515
	TEXTURE_CUBE_MAP_POSITIVE_X_EXT                                       = 0x8515
	TEXTURE_CUBE_MAP_POSITIVE_X_OES                                       = 0x8515
	TEXTURE_CUBE_MAP_NEGATIVE_X                                           = 0x8516
	TEXTURE_CUBE_MAP_NEGATIVE_X_ARB                                       = 0x8516
	TEXTURE_CUBE_MAP_NEGATIVE_X_EXT                                       = 0x8516
	TEXTURE_CUBE_MAP_NEGATIVE_X_OES                                       = 0x8516
	TEXTURE_CUBE_MAP_POSITIVE_Y                                           = 0x8517
	TEXTURE_CUBE_MAP_POSITIVE_Y_ARB                                       = 0x8517
	TEXTURE_CUBE_MAP_POSITIVE_Y_EXT                                       = 0x8517
	TEXTURE_CUBE_MAP_POSITIVE_Y_OES                                       = 0x8517
	TEXTURE_CUBE_MAP_NEGATIVE_Y                                           = 0x8518
	TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB                                       = 0x8518
	TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT                                       = 0x8518
	TEXTURE_CUBE_MAP_NEGATIVE_Y_OES                                       = 0x8518
	TEXTURE_CUBE_MAP_POSITIVE_Z                                           = 0x8519
	TEXTURE_CUBE_MAP_POSITIVE_Z_ARB                                       = 0x8519
	TEXTURE_CUBE_MAP_POSITIVE_Z_EXT                                       = 0x8519
	TEXTURE_CUBE_MAP_POSITIVE_Z_OES                                       = 0x8519
	TEXTURE_CUBE_MAP_NEGATIVE_Z                                           = 0x851A
	TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB                                       = 0x851A
	TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT                                       = 0x851A
	TEXTURE_CUBE_MAP_NEGATIVE_Z_OES                                       = 0x851A
	PROXY_TEXTURE_CUBE_MAP                                                = 0x851B
	PROXY_TEXTURE_CUBE_MAP_ARB                                            = 0x851B
	PROXY_TEXTURE_CUBE_MAP_EXT                                            = 0x851B
	MAX_CUBE_MAP_TEXTURE_SIZE                                             = 0x851C
	MAX_CUBE_MAP_TEXTURE_SIZE_ARB                                         = 0x851C
	MAX_CUBE_MAP_TEXTURE_SIZE_EXT                                         = 0x851C
	MAX_CUBE_MAP_TEXTURE_SIZE_OES                                         = 0x851C
	VERTEX_ARRAY_RANGE_APPLE                                              = 0x851D
	VERTEX_ARRAY_RANGE_NV                                                 = 0x851D
	VERTEX_ARRAY_RANGE_LENGTH_APPLE                                       = 0x851E
	VERTEX_ARRAY_RANGE_LENGTH_NV                                          = 0x851E
	VERTEX_ARRAY_RANGE_VALID_NV                                           = 0x851F
	VERTEX_ARRAY_STORAGE_HINT_APPLE                                       = 0x851F
	MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV                                     = 0x8520
	VERTEX_ARRAY_RANGE_POINTER_APPLE                                      = 0x8521
	VERTEX_ARRAY_RANGE_POINTER_NV                                         = 0x8521
	REGISTER_COMBINERS_NV                                                 = 0x8522
	VARIABLE_A_NV                                                         = 0x8523
	VARIABLE_B_NV                                                         = 0x8524
	VARIABLE_C_NV                                                         = 0x8525
	VARIABLE_D_NV                                                         = 0x8526
	VARIABLE_E_NV                                                         = 0x8527
	VARIABLE_F_NV                                                         = 0x8528
	VARIABLE_G_NV                                                         = 0x8529
	CONSTANT_COLOR0_NV                                                    = 0x852A
	CONSTANT_COLOR1_NV                                                    = 0x852B
	PRIMARY_COLOR_NV                                                      = 0x852C
	SECONDARY_COLOR_NV                                                    = 0x852D
	SPARE0_NV                                                             = 0x852E
	SPARE1_NV                                                             = 0x852F
	DISCARD_NV                                                            = 0x8530
	E_TIMES_F_NV                                                          = 0x8531
	SPARE0_PLUS_SECONDARY_COLOR_NV                                        = 0x8532
	VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV                                   = 0x8533
	MULTISAMPLE_FILTER_HINT_NV                                            = 0x8534
	PER_STAGE_CONSTANTS_NV                                                = 0x8535
	UNSIGNED_IDENTITY_NV                                                  = 0x8536
	UNSIGNED_INVERT_NV                                                    = 0x8537
	EXPAND_NORMAL_NV                                                      = 0x8538
	EXPAND_NEGATE_NV                                                      = 0x8539
	HALF_BIAS_NORMAL_NV                                                   = 0x853A
	HALF_BIAS_NEGATE_NV                                                   = 0x853B
	SIGNED_IDENTITY_NV                                                    = 0x853C
	SIGNED_NEGATE_NV                                                      = 0x853D
	SCALE_BY_TWO_NV                                                       = 0x853E
	SCALE_BY_FOUR_NV                                                      = 0x853F
	SCALE_BY_ONE_HALF_NV                                                  = 0x8540
	BIAS_BY_NEGATIVE_ONE_HALF_NV                                          = 0x8541
	COMBINER_INPUT_NV                                                     = 0x8542
	COMBINER_MAPPING_NV                                                   = 0x8543
	COMBINER_COMPONENT_USAGE_NV                                           = 0x8544
	COMBINER_AB_DOT_PRODUCT_NV                                            = 0x8545
	COMBINER_CD_DOT_PRODUCT_NV                                            = 0x8546
	COMBINER_MUX_SUM_NV                                                   = 0x8547
	COMBINER_SCALE_NV                                                     = 0x8548
	COMBINER_BIAS_NV                                                      = 0x8549
	COMBINER_AB_OUTPUT_NV                                                 = 0x854A
	COMBINER_CD_OUTPUT_NV                                                 = 0x854B
	COMBINER_SUM_OUTPUT_NV                                                = 0x854C
	MAX_GENERAL_COMBINERS_NV                                              = 0x854D
	NUM_GENERAL_COMBINERS_NV                                              = 0x854E
	COLOR_SUM_CLAMP_NV                                                    = 0x854F
	COMBINER0_NV                                                          = 0x8550
	COMBINER1_NV                                                          = 0x8551
	COMBINER2_NV                                                          = 0x8552
	COMBINER3_NV                                                          = 0x8553
	COMBINER4_NV                                                          = 0x8554
	COMBINER5_NV                                                          = 0x8555
	COMBINER6_NV                                                          = 0x8556
	COMBINER7_NV                                                          = 0x8557
	PRIMITIVE_RESTART_NV                                                  = 0x8558
	PRIMITIVE_RESTART_INDEX_NV                                            = 0x8559
	FOG_DISTANCE_MODE_NV                                                  = 0x855A
	EYE_RADIAL_NV                                                         = 0x855B
	EYE_PLANE_ABSOLUTE_NV                                                 = 0x855C
	EMBOSS_LIGHT_NV                                                       = 0x855D
	EMBOSS_CONSTANT_NV                                                    = 0x855E
	EMBOSS_MAP_NV                                                         = 0x855F
	RED_MIN_CLAMP_INGR                                                    = 0x8560
	GREEN_MIN_CLAMP_INGR                                                  = 0x8561
	BLUE_MIN_CLAMP_INGR                                                   = 0x8562
	ALPHA_MIN_CLAMP_INGR                                                  = 0x8563
	RED_MAX_CLAMP_INGR                                                    = 0x8564
	GREEN_MAX_CLAMP_INGR                                                  = 0x8565
	BLUE_MAX_CLAMP_INGR                                                   = 0x8566
	ALPHA_MAX_CLAMP_INGR                                                  = 0x8567
	INTERLACE_READ_INGR                                                   = 0x8568
	COMBINE                                                               = 0x8570
	COMBINE_ARB                                                           = 0x8570
	COMBINE_EXT                                                           = 0x8570
	COMBINE_RGB                                                           = 0x8571
	COMBINE_RGB_ARB                                                       = 0x8571
	COMBINE_RGB_EXT                                                       = 0x8571
	COMBINE_ALPHA                                                         = 0x8572
	COMBINE_ALPHA_ARB                                                     = 0x8572
	COMBINE_ALPHA_EXT                                                     = 0x8572
	RGB_SCALE                                                             = 0x8573
	RGB_SCALE_ARB                                                         = 0x8573
	RGB_SCALE_EXT                                                         = 0x8573
	ADD_SIGNED                                                            = 0x8574
	ADD_SIGNED_ARB                                                        = 0x8574
	ADD_SIGNED_EXT                                                        = 0x8574
	INTERPOLATE                                                           = 0x8575
	INTERPOLATE_ARB                                                       = 0x8575
	INTERPOLATE_EXT                                                       = 0x8575
	CONSTANT                                                              = 0x8576
	CONSTANT_ARB                                                          = 0x8576
	CONSTANT_EXT                                                          = 0x8576
	CONSTANT_NV                                                           = 0x8576
	PRIMARY_COLOR                                                         = 0x8577
	PRIMARY_COLOR_ARB                                                     = 0x8577
	PRIMARY_COLOR_EXT                                                     = 0x8577
	PREVIOUS                                                              = 0x8578
	PREVIOUS_ARB                                                          = 0x8578
	PREVIOUS_EXT                                                          = 0x8578
	SOURCE0_RGB                                                           = 0x8580
	SOURCE0_RGB_ARB                                                       = 0x8580
	SOURCE0_RGB_EXT                                                       = 0x8580
	SRC0_RGB                                                              = 0x8580
	SOURCE1_RGB                                                           = 0x8581
	SOURCE1_RGB_ARB                                                       = 0x8581
	SOURCE1_RGB_EXT                                                       = 0x8581
	SRC1_RGB                                                              = 0x8581
	SOURCE2_RGB                                                           = 0x8582
	SOURCE2_RGB_ARB                                                       = 0x8582
	SOURCE2_RGB_EXT                                                       = 0x8582
	SRC2_RGB                                                              = 0x8582
	SOURCE3_RGB_NV                                                        = 0x8583
	SOURCE0_ALPHA                                                         = 0x8588
	SOURCE0_ALPHA_ARB                                                     = 0x8588
	SOURCE0_ALPHA_EXT                                                     = 0x8588
	SRC0_ALPHA                                                            = 0x8588
	SOURCE1_ALPHA                                                         = 0x8589
	SOURCE1_ALPHA_ARB                                                     = 0x8589
	SOURCE1_ALPHA_EXT                                                     = 0x8589
	SRC1_ALPHA                                                            = 0x8589
	SRC1_ALPHA_EXT                                                        = 0x8589
	SOURCE2_ALPHA                                                         = 0x858A
	SOURCE2_ALPHA_ARB                                                     = 0x858A
	SOURCE2_ALPHA_EXT                                                     = 0x858A
	SRC2_ALPHA                                                            = 0x858A
	SOURCE3_ALPHA_NV                                                      = 0x858B
	OPERAND0_RGB                                                          = 0x8590
	OPERAND0_RGB_ARB                                                      = 0x8590
	OPERAND0_RGB_EXT                                                      = 0x8590
	OPERAND1_RGB                                                          = 0x8591
	OPERAND1_RGB_ARB                                                      = 0x8591
	OPERAND1_RGB_EXT                                                      = 0x8591
	OPERAND2_RGB                                                          = 0x8592
	OPERAND2_RGB_ARB                                                      = 0x8592
	OPERAND2_RGB_EXT                                                      = 0x8592
	OPERAND3_RGB_NV                                                       = 0x8593
	OPERAND0_ALPHA                                                        = 0x8598
	OPERAND0_ALPHA_ARB                                                    = 0x8598
	OPERAND0_ALPHA_EXT                                                    = 0x8598
	OPERAND1_ALPHA                                                        = 0x8599
	OPERAND1_ALPHA_ARB                                                    = 0x8599
	OPERAND1_ALPHA_EXT                                                    = 0x8599
	OPERAND2_ALPHA                                                        = 0x859A
	OPERAND2_ALPHA_ARB                                                    = 0x859A
	OPERAND2_ALPHA_EXT                                                    = 0x859A
	OPERAND3_ALPHA_NV                                                     = 0x859B
	PACK_SUBSAMPLE_RATE_SGIX                                              = 0x85A0
	UNPACK_SUBSAMPLE_RATE_SGIX                                            = 0x85A1
	PIXEL_SUBSAMPLE_4444_SGIX                                             = 0x85A2
	PIXEL_SUBSAMPLE_2424_SGIX                                             = 0x85A3
	PIXEL_SUBSAMPLE_4242_SGIX                                             = 0x85A4
	PERTURB_EXT                                                           = 0x85AE
	TEXTURE_NORMAL_EXT                                                    = 0x85AF
	LIGHT_MODEL_SPECULAR_VECTOR_APPLE                                     = 0x85B0
	TRANSFORM_HINT_APPLE                                                  = 0x85B1
	UNPACK_CLIENT_STORAGE_APPLE                                           = 0x85B2
	BUFFER_OBJECT_APPLE                                                   = 0x85B3
	STORAGE_CLIENT_APPLE                                                  = 0x85B4
	VERTEX_ARRAY_BINDING                                                  = 0x85B5
	VERTEX_ARRAY_BINDING_APPLE                                            = 0x85B5
	VERTEX_ARRAY_BINDING_OES                                              = 0x85B5
	TEXTURE_RANGE_LENGTH_APPLE                                            = 0x85B7
	TEXTURE_RANGE_POINTER_APPLE                                           = 0x85B8
	YCBCR_422_APPLE                                                       = 0x85B9
	UNSIGNED_SHORT_8_8_APPLE                                              = 0x85BA
	UNSIGNED_SHORT_8_8_MESA                                               = 0x85BA
	UNSIGNED_SHORT_8_8_REV_APPLE                                          = 0x85BB
	UNSIGNED_SHORT_8_8_REV_MESA                                           = 0x85BB
	TEXTURE_STORAGE_HINT_APPLE                                            = 0x85BC
	STORAGE_PRIVATE_APPLE                                                 = 0x85BD
	STORAGE_CACHED_APPLE                                                  = 0x85BE
	STORAGE_SHARED_APPLE                                                  = 0x85BF
	REPLACEMENT_CODE_ARRAY_SUN                                            = 0x85C0
	REPLACEMENT_CODE_ARRAY_TYPE_SUN                                       = 0x85C1
	REPLACEMENT_CODE_ARRAY_STRIDE_SUN                                     = 0x85C2
	REPLACEMENT_CODE_ARRAY_POINTER_SUN                                    = 0x85C3
	R1UI_V3F_SUN                                                          = 0x85C4
	R1UI_C4UB_V3F_SUN                                                     = 0x85C5
	R1UI_C3F_V3F_SUN                                                      = 0x85C6
	R1UI_N3F_V3F_SUN                                                      = 0x85C7
	R1UI_C4F_N3F_V3F_SUN                                                  = 0x85C8
	R1UI_T2F_V3F_SUN                                                      = 0x85C9
	R1UI_T2F_N3F_V3F_SUN                                                  = 0x85CA
	R1UI_T2F_C4F_N3F_V3F_SUN                                              = 0x85CB
	SLICE_ACCUM_SUN                                                       = 0x85CC
	QUAD_MESH_SUN                                                         = 0x8614
	TRIANGLE_MESH_SUN                                                     = 0x8615
	VERTEX_PROGRAM_ARB                                                    = 0x8620
	VERTEX_PROGRAM_NV                                                     = 0x8620
	VERTEX_STATE_PROGRAM_NV                                               = 0x8621
	VERTEX_ATTRIB_ARRAY_ENABLED                                           = 0x8622
	VERTEX_ATTRIB_ARRAY_ENABLED_ARB                                       = 0x8622
	ATTRIB_ARRAY_SIZE_NV                                                  = 0x8623
	VERTEX_ATTRIB_ARRAY_SIZE                                              = 0x8623
	VERTEX_ATTRIB_ARRAY_SIZE_ARB                                          = 0x8623
	ATTRIB_ARRAY_STRIDE_NV                                                = 0x8624
	VERTEX_ATTRIB_ARRAY_STRIDE                                            = 0x8624
	VERTEX_ATTRIB_ARRAY_STRIDE_ARB                                        = 0x8624
	ATTRIB_ARRAY_TYPE_NV                                                  = 0x8625
	VERTEX_ATTRIB_ARRAY_TYPE                                              = 0x8625
	VERTEX_ATTRIB_ARRAY_TYPE_ARB                                          = 0x8625
	CURRENT_ATTRIB_NV                                                     = 0x8626
	CURRENT_VERTEX_ATTRIB                                                 = 0x8626
	CURRENT_VERTEX_ATTRIB_ARB                                             = 0x8626
	PROGRAM_LENGTH_ARB                                                    = 0x8627
	PROGRAM_LENGTH_NV                                                     = 0x8627
	PROGRAM_STRING_ARB                                                    = 0x8628
	PROGRAM_STRING_NV                                                     = 0x8628
	MODELVIEW_PROJECTION_NV                                               = 0x8629
	IDENTITY_NV                                                           = 0x862A
	INVERSE_NV                                                            = 0x862B
	TRANSPOSE_NV                                                          = 0x862C
	INVERSE_TRANSPOSE_NV                                                  = 0x862D
	MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB                                    = 0x862E
	MAX_TRACK_MATRIX_STACK_DEPTH_NV                                       = 0x862E
	MAX_PROGRAM_MATRICES_ARB                                              = 0x862F
	MAX_TRACK_MATRICES_NV                                                 = 0x862F
	MATRIX0_NV                                                            = 0x8630
	MATRIX1_NV                                                            = 0x8631
	MATRIX2_NV                                                            = 0x8632
	MATRIX3_NV                                                            = 0x8633
	MATRIX4_NV                                                            = 0x8634
	MATRIX5_NV                                                            = 0x8635
	MATRIX6_NV                                                            = 0x8636
	MATRIX7_NV                                                            = 0x8637
	CURRENT_MATRIX_STACK_DEPTH_ARB                                        = 0x8640
	CURRENT_MATRIX_STACK_DEPTH_NV                                         = 0x8640
	CURRENT_MATRIX_ARB                                                    = 0x8641
	CURRENT_MATRIX_NV                                                     = 0x8641
	VERTEX_PROGRAM_POINT_SIZE                                             = 0x8642
	VERTEX_PROGRAM_POINT_SIZE_ARB                                         = 0x8642
	VERTEX_PROGRAM_POINT_SIZE_NV                                          = 0x8642
	PROGRAM_POINT_SIZE                                                    = 0x8642
	PROGRAM_POINT_SIZE_ARB                                                = 0x8642
	PROGRAM_POINT_SIZE_EXT                                                = 0x8642
	VERTEX_PROGRAM_TWO_SIDE                                               = 0x8643
	VERTEX_PROGRAM_TWO_SIDE_ARB                                           = 0x8643
	VERTEX_PROGRAM_TWO_SIDE_NV                                            = 0x8643
	PROGRAM_PARAMETER_NV                                                  = 0x8644
	ATTRIB_ARRAY_POINTER_NV                                               = 0x8645
	VERTEX_ATTRIB_ARRAY_POINTER                                           = 0x8645
	VERTEX_ATTRIB_ARRAY_POINTER_ARB                                       = 0x8645
	PROGRAM_TARGET_NV                                                     = 0x8646
	PROGRAM_RESIDENT_NV                                                   = 0x8647
	TRACK_MATRIX_NV                                                       = 0x8648
	TRACK_MATRIX_TRANSFORM_NV                                             = 0x8649
	VERTEX_PROGRAM_BINDING_NV                                             = 0x864A
	PROGRAM_ERROR_POSITION_ARB                                            = 0x864B
	PROGRAM_ERROR_POSITION_NV                                             = 0x864B
	OFFSET_TEXTURE_RECTANGLE_NV                                           = 0x864C
	OFFSET_TEXTURE_RECTANGLE_SCALE_NV                                     = 0x864D
	DOT_PRODUCT_TEXTURE_RECTANGLE_NV                                      = 0x864E
	DEPTH_CLAMP                                                           = 0x864F
	DEPTH_CLAMP_NV                                                        = 0x864F
	DEPTH_CLAMP_EXT                                                       = 0x864F
	VERTEX_ATTRIB_ARRAY0_NV                                               = 0x8650
	VERTEX_ATTRIB_ARRAY1_NV                                               = 0x8651
	VERTEX_ATTRIB_ARRAY2_NV                                               = 0x8652
	VERTEX_ATTRIB_ARRAY3_NV                                               = 0x8653
	VERTEX_ATTRIB_ARRAY4_NV                                               = 0x8654
	VERTEX_ATTRIB_ARRAY5_NV                                               = 0x8655
	VERTEX_ATTRIB_ARRAY6_NV                                               = 0x8656
	VERTEX_ATTRIB_ARRAY7_NV                                               = 0x8657
	VERTEX_ATTRIB_ARRAY8_NV                                               = 0x8658
	VERTEX_ATTRIB_ARRAY9_NV                                               = 0x8659
	VERTEX_ATTRIB_ARRAY10_NV                                              = 0x865A
	VERTEX_ATTRIB_ARRAY11_NV                                              = 0x865B
	VERTEX_ATTRIB_ARRAY12_NV                                              = 0x865C
	VERTEX_ATTRIB_ARRAY13_NV                                              = 0x865D
	VERTEX_ATTRIB_ARRAY14_NV                                              = 0x865E
	VERTEX_ATTRIB_ARRAY15_NV                                              = 0x865F
	MAP1_VERTEX_ATTRIB0_4_NV                                              = 0x8660
	MAP1_VERTEX_ATTRIB1_4_NV                                              = 0x8661
	MAP1_VERTEX_ATTRIB2_4_NV                                              = 0x8662
	MAP1_VERTEX_ATTRIB3_4_NV                                              = 0x8663
	MAP1_VERTEX_ATTRIB4_4_NV                                              = 0x8664
	MAP1_VERTEX_ATTRIB5_4_NV                                              = 0x8665
	MAP1_VERTEX_ATTRIB6_4_NV                                              = 0x8666
	MAP1_VERTEX_ATTRIB7_4_NV                                              = 0x8667
	MAP1_VERTEX_ATTRIB8_4_NV                                              = 0x8668
	MAP1_VERTEX_ATTRIB9_4_NV                                              = 0x8669
	MAP1_VERTEX_ATTRIB10_4_NV                                             = 0x866A
	MAP1_VERTEX_ATTRIB11_4_NV                                             = 0x866B
	MAP1_VERTEX_ATTRIB12_4_NV                                             = 0x866C
	MAP1_VERTEX_ATTRIB13_4_NV                                             = 0x866D
	MAP1_VERTEX_ATTRIB14_4_NV                                             = 0x866E
	MAP1_VERTEX_ATTRIB15_4_NV                                             = 0x866F
	MAP2_VERTEX_ATTRIB0_4_NV                                              = 0x8670
	MAP2_VERTEX_ATTRIB1_4_NV                                              = 0x8671
	MAP2_VERTEX_ATTRIB2_4_NV                                              = 0x8672
	MAP2_VERTEX_ATTRIB3_4_NV                                              = 0x8673
	MAP2_VERTEX_ATTRIB4_4_NV                                              = 0x8674
	MAP2_VERTEX_ATTRIB5_4_NV                                              = 0x8675
	MAP2_VERTEX_ATTRIB6_4_NV                                              = 0x8676
	MAP2_VERTEX_ATTRIB7_4_NV                                              = 0x8677
	PROGRAM_BINDING_ARB                                                   = 0x8677
	MAP2_VERTEX_ATTRIB8_4_NV                                              = 0x8678
	MAP2_VERTEX_ATTRIB9_4_NV                                              = 0x8679
	MAP2_VERTEX_ATTRIB10_4_NV                                             = 0x867A
	MAP2_VERTEX_ATTRIB11_4_NV                                             = 0x867B
	MAP2_VERTEX_ATTRIB12_4_NV                                             = 0x867C
	MAP2_VERTEX_ATTRIB13_4_NV                                             = 0x867D
	MAP2_VERTEX_ATTRIB14_4_NV                                             = 0x867E
	MAP2_VERTEX_ATTRIB15_4_NV                                             = 0x867F
	TEXTURE_COMPRESSED_IMAGE_SIZE                                         = 0x86A0
	TEXTURE_COMPRESSED_IMAGE_SIZE_ARB                                     = 0x86A0
	TEXTURE_COMPRESSED                                                    = 0x86A1
	TEXTURE_COMPRESSED_ARB                                                = 0x86A1
	NUM_COMPRESSED_TEXTURE_FORMATS                                        = 0x86A2
	NUM_COMPRESSED_TEXTURE_FORMATS_ARB                                    = 0x86A2
	COMPRESSED_TEXTURE_FORMATS                                            = 0x86A3
	COMPRESSED_TEXTURE_FORMATS_ARB                                        = 0x86A3
	MAX_VERTEX_UNITS_ARB                                                  = 0x86A4
	MAX_VERTEX_UNITS_OES                                                  = 0x86A4
	ACTIVE_VERTEX_UNITS_ARB                                               = 0x86A5
	WEIGHT_SUM_UNITY_ARB                                                  = 0x86A6
	VERTEX_BLEND_ARB                                                      = 0x86A7
	CURRENT_WEIGHT_ARB                                                    = 0x86A8
	WEIGHT_ARRAY_TYPE_ARB                                                 = 0x86A9
	WEIGHT_ARRAY_TYPE_OES                                                 = 0x86A9
	WEIGHT_ARRAY_STRIDE_ARB                                               = 0x86AA
	WEIGHT_ARRAY_STRIDE_OES                                               = 0x86AA
	WEIGHT_ARRAY_SIZE_ARB                                                 = 0x86AB
	WEIGHT_ARRAY_SIZE_OES                                                 = 0x86AB
	WEIGHT_ARRAY_POINTER_ARB                                              = 0x86AC
	WEIGHT_ARRAY_POINTER_OES                                              = 0x86AC
	WEIGHT_ARRAY_ARB                                                      = 0x86AD
	WEIGHT_ARRAY_OES                                                      = 0x86AD
	DOT3_RGB                                                              = 0x86AE
	DOT3_RGB_ARB                                                          = 0x86AE
	DOT3_RGBA                                                             = 0x86AF
	DOT3_RGBA_ARB                                                         = 0x86AF
	DOT3_RGBA_IMG                                                         = 0x86AF
	COMPRESSED_RGB_FXT1_3DFX                                              = 0x86B0
	COMPRESSED_RGBA_FXT1_3DFX                                             = 0x86B1
	MULTISAMPLE_3DFX                                                      = 0x86B2
	SAMPLE_BUFFERS_3DFX                                                   = 0x86B3
	SAMPLES_3DFX                                                          = 0x86B4
	EVAL_2D_NV                                                            = 0x86C0
	EVAL_TRIANGULAR_2D_NV                                                 = 0x86C1
	MAP_TESSELLATION_NV                                                   = 0x86C2
	MAP_ATTRIB_U_ORDER_NV                                                 = 0x86C3
	MAP_ATTRIB_V_ORDER_NV                                                 = 0x86C4
	EVAL_FRACTIONAL_TESSELLATION_NV                                       = 0x86C5
	EVAL_VERTEX_ATTRIB0_NV                                                = 0x86C6
	EVAL_VERTEX_ATTRIB1_NV                                                = 0x86C7
	EVAL_VERTEX_ATTRIB2_NV                                                = 0x86C8
	EVAL_VERTEX_ATTRIB3_NV                                                = 0x86C9
	EVAL_VERTEX_ATTRIB4_NV                                                = 0x86CA
	EVAL_VERTEX_ATTRIB5_NV                                                = 0x86CB
	EVAL_VERTEX_ATTRIB6_NV                                                = 0x86CC
	EVAL_VERTEX_ATTRIB7_NV                                                = 0x86CD
	EVAL_VERTEX_ATTRIB8_NV                                                = 0x86CE
	EVAL_VERTEX_ATTRIB9_NV                                                = 0x86CF
	EVAL_VERTEX_ATTRIB10_NV                                               = 0x86D0
	EVAL_VERTEX_ATTRIB11_NV                                               = 0x86D1
	EVAL_VERTEX_ATTRIB12_NV                                               = 0x86D2
	EVAL_VERTEX_ATTRIB13_NV                                               = 0x86D3
	EVAL_VERTEX_ATTRIB14_NV                                               = 0x86D4
	EVAL_VERTEX_ATTRIB15_NV                                               = 0x86D5
	MAX_MAP_TESSELLATION_NV                                               = 0x86D6
	MAX_RATIONAL_EVAL_ORDER_NV                                            = 0x86D7
	MAX_PROGRAM_PATCH_ATTRIBS_NV                                          = 0x86D8
	RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV                                  = 0x86D9
	UNSIGNED_INT_S8_S8_8_8_NV                                             = 0x86DA
	UNSIGNED_INT_8_8_S8_S8_REV_NV                                         = 0x86DB
	DSDT_MAG_INTENSITY_NV                                                 = 0x86DC
	SHADER_CONSISTENT_NV                                                  = 0x86DD
	TEXTURE_SHADER_NV                                                     = 0x86DE
	SHADER_OPERATION_NV                                                   = 0x86DF
	CULL_MODES_NV                                                         = 0x86E0
	OFFSET_TEXTURE_MATRIX_NV                                              = 0x86E1
	OFFSET_TEXTURE_2D_MATRIX_NV                                           = 0x86E1
	OFFSET_TEXTURE_SCALE_NV                                               = 0x86E2
	OFFSET_TEXTURE_2D_SCALE_NV                                            = 0x86E2
	OFFSET_TEXTURE_BIAS_NV                                                = 0x86E3
	OFFSET_TEXTURE_2D_BIAS_NV                                             = 0x86E3
	PREVIOUS_TEXTURE_INPUT_NV                                             = 0x86E4
	CONST_EYE_NV                                                          = 0x86E5
	PASS_THROUGH_NV                                                       = 0x86E6
	CULL_FRAGMENT_NV                                                      = 0x86E7
	OFFSET_TEXTURE_2D_NV                                                  = 0x86E8
	DEPENDENT_AR_TEXTURE_2D_NV                                            = 0x86E9
	DEPENDENT_GB_TEXTURE_2D_NV                                            = 0x86EA
	SURFACE_STATE_NV                                                      = 0x86EB
	DOT_PRODUCT_NV                                                        = 0x86EC
	DOT_PRODUCT_DEPTH_REPLACE_NV                                          = 0x86ED
	DOT_PRODUCT_TEXTURE_2D_NV                                             = 0x86EE
	DOT_PRODUCT_TEXTURE_3D_NV                                             = 0x86EF
	DOT_PRODUCT_TEXTURE_CUBE_MAP_NV                                       = 0x86F0
	DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV                                       = 0x86F1
	DOT_PRODUCT_REFLECT_CUBE_MAP_NV                                       = 0x86F2
	DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV                             = 0x86F3
	HILO_NV                                                               = 0x86F4
	DSDT_NV                                                               = 0x86F5
	DSDT_MAG_NV                                                           = 0x86F6
	DSDT_MAG_VIB_NV                                                       = 0x86F7
	HILO16_NV                                                             = 0x86F8
	SIGNED_HILO_NV                                                        = 0x86F9
	SIGNED_HILO16_NV                                                      = 0x86FA
	SIGNED_RGBA_NV                                                        = 0x86FB
	SIGNED_RGBA8_NV                                                       = 0x86FC
	SURFACE_REGISTERED_NV                                                 = 0x86FD
	SIGNED_RGB_NV                                                         = 0x86FE
	SIGNED_RGB8_NV                                                        = 0x86FF
	SURFACE_MAPPED_NV                                                     = 0x8700
	SIGNED_LUMINANCE_NV                                                   = 0x8701
	SIGNED_LUMINANCE8_NV                                                  = 0x8702
	SIGNED_LUMINANCE_ALPHA_NV                                             = 0x8703
	SIGNED_LUMINANCE8_ALPHA8_NV                                           = 0x8704
	SIGNED_ALPHA_NV                                                       = 0x8705
	SIGNED_ALPHA8_NV                                                      = 0x8706
	SIGNED_INTENSITY_NV                                                   = 0x8707
	SIGNED_INTENSITY8_NV                                                  = 0x8708
	DSDT8_NV                                                              = 0x8709
	DSDT8_MAG8_NV                                                         = 0x870A
	DSDT8_MAG8_INTENSITY8_NV                                              = 0x870B
	SIGNED_RGB_UNSIGNED_ALPHA_NV                                          = 0x870C
	SIGNED_RGB8_UNSIGNED_ALPHA8_NV                                        = 0x870D
	HI_SCALE_NV                                                           = 0x870E
	LO_SCALE_NV                                                           = 0x870F
	DS_SCALE_NV                                                           = 0x8710
	DT_SCALE_NV                                                           = 0x8711
	MAGNITUDE_SCALE_NV                                                    = 0x8712
	VIBRANCE_SCALE_NV                                                     = 0x8713
	HI_BIAS_NV                                                            = 0x8714
	LO_BIAS_NV                                                            = 0x8715
	DS_BIAS_NV                                                            = 0x8716
	DT_BIAS_NV                                                            = 0x8717
	MAGNITUDE_BIAS_NV                                                     = 0x8718
	VIBRANCE_BIAS_NV                                                      = 0x8719
	TEXTURE_BORDER_VALUES_NV                                              = 0x871A
	TEXTURE_HI_SIZE_NV                                                    = 0x871B
	TEXTURE_LO_SIZE_NV                                                    = 0x871C
	TEXTURE_DS_SIZE_NV                                                    = 0x871D
	TEXTURE_DT_SIZE_NV                                                    = 0x871E
	TEXTURE_MAG_SIZE_NV                                                   = 0x871F
	MODELVIEW2_ARB                                                        = 0x8722
	MODELVIEW3_ARB                                                        = 0x8723
	MODELVIEW4_ARB                                                        = 0x8724
	MODELVIEW5_ARB                                                        = 0x8725
	MODELVIEW6_ARB                                                        = 0x8726
	MODELVIEW7_ARB                                                        = 0x8727
	MODELVIEW8_ARB                                                        = 0x8728
	MODELVIEW9_ARB                                                        = 0x8729
	MODELVIEW10_ARB                                                       = 0x872A
	MODELVIEW11_ARB                                                       = 0x872B
	MODELVIEW12_ARB                                                       = 0x872C
	MODELVIEW13_ARB                                                       = 0x872D
	MODELVIEW14_ARB                                                       = 0x872E
	MODELVIEW15_ARB                                                       = 0x872F
	MODELVIEW16_ARB                                                       = 0x8730
	MODELVIEW17_ARB                                                       = 0x8731
	MODELVIEW18_ARB                                                       = 0x8732
	MODELVIEW19_ARB                                                       = 0x8733
	MODELVIEW20_ARB                                                       = 0x8734
	MODELVIEW21_ARB                                                       = 0x8735
	MODELVIEW22_ARB                                                       = 0x8736
	MODELVIEW23_ARB                                                       = 0x8737
	MODELVIEW24_ARB                                                       = 0x8738
	MODELVIEW25_ARB                                                       = 0x8739
	MODELVIEW26_ARB                                                       = 0x873A
	MODELVIEW27_ARB                                                       = 0x873B
	MODELVIEW28_ARB                                                       = 0x873C
	MODELVIEW29_ARB                                                       = 0x873D
	MODELVIEW30_ARB                                                       = 0x873E
	MODELVIEW31_ARB                                                       = 0x873F
	DOT3_RGB_EXT                                                          = 0x8740
	Z400_BINARY_AMD                                                       = 0x8740
	DOT3_RGBA_EXT                                                         = 0x8741
	PROGRAM_BINARY_LENGTH_OES                                             = 0x8741
	PROGRAM_BINARY_LENGTH                                                 = 0x8741
	MIRROR_CLAMP_ATI                                                      = 0x8742
	MIRROR_CLAMP_EXT                                                      = 0x8742
	MIRROR_CLAMP_TO_EDGE                                                  = 0x8743
	MIRROR_CLAMP_TO_EDGE_ATI                                              = 0x8743
	MIRROR_CLAMP_TO_EDGE_EXT                                              = 0x8743
	MODULATE_ADD_ATI                                                      = 0x8744
	MODULATE_SIGNED_ADD_ATI                                               = 0x8745
	MODULATE_SUBTRACT_ATI                                                 = 0x8746
	SET_AMD                                                               = 0x874A
	REPLACE_VALUE_AMD                                                     = 0x874B
	STENCIL_OP_VALUE_AMD                                                  = 0x874C
	STENCIL_BACK_OP_VALUE_AMD                                             = 0x874D
	VERTEX_ATTRIB_ARRAY_LONG                                              = 0x874E
	OCCLUSION_QUERY_EVENT_MASK_AMD                                        = 0x874F
	DEPTH_STENCIL_MESA                                                    = 0x8750
	UNSIGNED_INT_24_8_MESA                                                = 0x8751
	UNSIGNED_INT_8_24_REV_MESA                                            = 0x8752
	UNSIGNED_SHORT_15_1_MESA                                              = 0x8753
	UNSIGNED_SHORT_1_15_REV_MESA                                          = 0x8754
	TRACE_MASK_MESA                                                       = 0x8755
	TRACE_NAME_MESA                                                       = 0x8756
	YCBCR_MESA                                                            = 0x8757
	PACK_INVERT_MESA                                                      = 0x8758
	DEBUG_OBJECT_MESA                                                     = 0x8759
	TEXTURE_1D_STACK_MESAX                                                = 0x8759
	DEBUG_PRINT_MESA                                                      = 0x875A
	TEXTURE_2D_STACK_MESAX                                                = 0x875A
	DEBUG_ASSERT_MESA                                                     = 0x875B
	PROXY_TEXTURE_1D_STACK_MESAX                                          = 0x875B
	PROXY_TEXTURE_2D_STACK_MESAX                                          = 0x875C
	TEXTURE_1D_STACK_BINDING_MESAX                                        = 0x875D
	TEXTURE_2D_STACK_BINDING_MESAX                                        = 0x875E
	PROGRAM_BINARY_FORMAT_MESA                                            = 0x875F
	STATIC_ATI                                                            = 0x8760
	DYNAMIC_ATI                                                           = 0x8761
	PRESERVE_ATI                                                          = 0x8762
	DISCARD_ATI                                                           = 0x8763
	BUFFER_SIZE                                                           = 0x8764
	BUFFER_SIZE_ARB                                                       = 0x8764
	OBJECT_BUFFER_SIZE_ATI                                                = 0x8764
	BUFFER_USAGE                                                          = 0x8765
	BUFFER_USAGE_ARB                                                      = 0x8765
	OBJECT_BUFFER_USAGE_ATI                                               = 0x8765
	ARRAY_OBJECT_BUFFER_ATI                                               = 0x8766
	ARRAY_OBJECT_OFFSET_ATI                                               = 0x8767
	ELEMENT_ARRAY_ATI                                                     = 0x8768
	ELEMENT_ARRAY_TYPE_ATI                                                = 0x8769
	ELEMENT_ARRAY_POINTER_ATI                                             = 0x876A
	MAX_VERTEX_STREAMS_ATI                                                = 0x876B
	VERTEX_STREAM0_ATI                                                    = 0x876C
	VERTEX_STREAM1_ATI                                                    = 0x876D
	VERTEX_STREAM2_ATI                                                    = 0x876E
	VERTEX_STREAM3_ATI                                                    = 0x876F
	VERTEX_STREAM4_ATI                                                    = 0x8770
	VERTEX_STREAM5_ATI                                                    = 0x8771
	VERTEX_STREAM6_ATI                                                    = 0x8772
	VERTEX_STREAM7_ATI                                                    = 0x8773
	VERTEX_SOURCE_ATI                                                     = 0x8774
	BUMP_ROT_MATRIX_ATI                                                   = 0x8775
	BUMP_ROT_MATRIX_SIZE_ATI                                              = 0x8776
	BUMP_NUM_TEX_UNITS_ATI                                                = 0x8777
	BUMP_TEX_UNITS_ATI                                                    = 0x8778
	DUDV_ATI                                                              = 0x8779
	DU8DV8_ATI                                                            = 0x877A
	BUMP_ENVMAP_ATI                                                       = 0x877B
	BUMP_TARGET_ATI                                                       = 0x877C
	VERTEX_SHADER_EXT                                                     = 0x8780
	VERTEX_SHADER_BINDING_EXT                                             = 0x8781
	OP_INDEX_EXT                                                          = 0x8782
	OP_NEGATE_EXT                                                         = 0x8783
	OP_DOT3_EXT                                                           = 0x8784
	OP_DOT4_EXT                                                           = 0x8785
	OP_MUL_EXT                                                            = 0x8786
	OP_ADD_EXT                                                            = 0x8787
	OP_MADD_EXT                                                           = 0x8788
	OP_FRAC_EXT                                                           = 0x8789
	OP_MAX_EXT                                                            = 0x878A
	OP_MIN_EXT                                                            = 0x878B
	OP_SET_GE_EXT                                                         = 0x878C
	OP_SET_LT_EXT                                                         = 0x878D
	OP_CLAMP_EXT                                                          = 0x878E
	OP_FLOOR_EXT                                                          = 0x878F
	OP_ROUND_EXT                                                          = 0x8790
	OP_EXP_BASE_2_EXT                                                     = 0x8791
	OP_LOG_BASE_2_EXT                                                     = 0x8792
	OP_POWER_EXT                                                          = 0x8793
	OP_RECIP_EXT                                                          = 0x8794
	OP_RECIP_SQRT_EXT                                                     = 0x8795
	OP_SUB_EXT                                                            = 0x8796
	OP_CROSS_PRODUCT_EXT                                                  = 0x8797
	OP_MULTIPLY_MATRIX_EXT                                                = 0x8798
	OP_MOV_EXT                                                            = 0x8799
	OUTPUT_VERTEX_EXT                                                     = 0x879A
	OUTPUT_COLOR0_EXT                                                     = 0x879B
	OUTPUT_COLOR1_EXT                                                     = 0x879C
	OUTPUT_TEXTURE_COORD0_EXT                                             = 0x879D
	OUTPUT_TEXTURE_COORD1_EXT                                             = 0x879E
	OUTPUT_TEXTURE_COORD2_EXT                                             = 0x879F
	OUTPUT_TEXTURE_COORD3_EXT                                             = 0x87A0
	OUTPUT_TEXTURE_COORD4_EXT                                             = 0x87A1
	OUTPUT_TEXTURE_COORD5_EXT                                             = 0x87A2
	OUTPUT_TEXTURE_COORD6_EXT                                             = 0x87A3
	OUTPUT_TEXTURE_COORD7_EXT                                             = 0x87A4
	OUTPUT_TEXTURE_COORD8_EXT                                             = 0x87A5
	OUTPUT_TEXTURE_COORD9_EXT                                             = 0x87A6
	OUTPUT_TEXTURE_COORD10_EXT                                            = 0x87A7
	OUTPUT_TEXTURE_COORD11_EXT                                            = 0x87A8
	OUTPUT_TEXTURE_COORD12_EXT                                            = 0x87A9
	OUTPUT_TEXTURE_COORD13_EXT                                            = 0x87AA
	OUTPUT_TEXTURE_COORD14_EXT                                            = 0x87AB
	OUTPUT_TEXTURE_COORD15_EXT                                            = 0x87AC
	OUTPUT_TEXTURE_COORD16_EXT                                            = 0x87AD
	OUTPUT_TEXTURE_COORD17_EXT                                            = 0x87AE
	OUTPUT_TEXTURE_COORD18_EXT                                            = 0x87AF
	OUTPUT_TEXTURE_COORD19_EXT                                            = 0x87B0
	OUTPUT_TEXTURE_COORD20_EXT                                            = 0x87B1
	OUTPUT_TEXTURE_COORD21_EXT                                            = 0x87B2
	OUTPUT_TEXTURE_COORD22_EXT                                            = 0x87B3
	OUTPUT_TEXTURE_COORD23_EXT                                            = 0x87B4
	OUTPUT_TEXTURE_COORD24_EXT                                            = 0x87B5
	OUTPUT_TEXTURE_COORD25_EXT                                            = 0x87B6
	OUTPUT_TEXTURE_COORD26_EXT                                            = 0x87B7
	OUTPUT_TEXTURE_COORD27_EXT                                            = 0x87B8
	OUTPUT_TEXTURE_COORD28_EXT                                            = 0x87B9
	OUTPUT_TEXTURE_COORD29_EXT                                            = 0x87BA
	OUTPUT_TEXTURE_COORD30_EXT                                            = 0x87BB
	OUTPUT_TEXTURE_COORD31_EXT                                            = 0x87BC
	OUTPUT_FOG_EXT                                                        = 0x87BD
	SCALAR_EXT                                                            = 0x87BE
	VECTOR_EXT                                                            = 0x87BF
	MATRIX_EXT                                                            = 0x87C0
	VARIANT_EXT                                                           = 0x87C1
	INVARIANT_EXT                                                         = 0x87C2
	LOCAL_CONSTANT_EXT                                                    = 0x87C3
	LOCAL_EXT                                                             = 0x87C4
	MAX_VERTEX_SHADER_INSTRUCTIONS_EXT                                    = 0x87C5
	MAX_VERTEX_SHADER_VARIANTS_EXT                                        = 0x87C6
	MAX_VERTEX_SHADER_INVARIANTS_EXT                                      = 0x87C7
	MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT                                 = 0x87C8
	MAX_VERTEX_SHADER_LOCALS_EXT                                          = 0x87C9
	MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT                          = 0x87CA
	MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT                              = 0x87CB
	MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT                       = 0x87CC
	MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT                            = 0x87CD
	MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT                                = 0x87CE
	VERTEX_SHADER_INSTRUCTIONS_EXT                                        = 0x87CF
	VERTEX_SHADER_VARIANTS_EXT                                            = 0x87D0
	VERTEX_SHADER_INVARIANTS_EXT                                          = 0x87D1
	VERTEX_SHADER_LOCAL_CONSTANTS_EXT                                     = 0x87D2
	VERTEX_SHADER_LOCALS_EXT                                              = 0x87D3
	VERTEX_SHADER_OPTIMIZED_EXT                                           = 0x87D4
	X_EXT                                                                 = 0x87D5
	Y_EXT                                                                 = 0x87D6
	Z_EXT                                                                 = 0x87D7
	W_EXT                                                                 = 0x87D8
	NEGATIVE_X_EXT                                                        = 0x87D9
	NEGATIVE_Y_EXT                                                        = 0x87DA
	NEGATIVE_Z_EXT                                                        = 0x87DB
	NEGATIVE_W_EXT                                                        = 0x87DC
	ZERO_EXT                                                              = 0x87DD
	ONE_EXT                                                               = 0x87DE
	NEGATIVE_ONE_EXT                                                      = 0x87DF
	NORMALIZED_RANGE_EXT                                                  = 0x87E0
	FULL_RANGE_EXT                                                        = 0x87E1
	CURRENT_VERTEX_EXT                                                    = 0x87E2
	MVP_MATRIX_EXT                                                        = 0x87E3
	VARIANT_VALUE_EXT                                                     = 0x87E4
	VARIANT_DATATYPE_EXT                                                  = 0x87E5
	VARIANT_ARRAY_STRIDE_EXT                                              = 0x87E6
	VARIANT_ARRAY_TYPE_EXT                                                = 0x87E7
	VARIANT_ARRAY_EXT                                                     = 0x87E8
	VARIANT_ARRAY_POINTER_EXT                                             = 0x87E9
	INVARIANT_VALUE_EXT                                                   = 0x87EA
	INVARIANT_DATATYPE_EXT                                                = 0x87EB
	LOCAL_CONSTANT_VALUE_EXT                                              = 0x87EC
	LOCAL_CONSTANT_DATATYPE_EXT                                           = 0x87ED
	ATC_RGBA_INTERPOLATED_ALPHA_AMD                                       = 0x87EE
	PN_TRIANGLES_ATI                                                      = 0x87F0
	MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI                                = 0x87F1
	PN_TRIANGLES_POINT_MODE_ATI                                           = 0x87F2
	PN_TRIANGLES_NORMAL_MODE_ATI                                          = 0x87F3
	PN_TRIANGLES_TESSELATION_LEVEL_ATI                                    = 0x87F4
	PN_TRIANGLES_POINT_MODE_LINEAR_ATI                                    = 0x87F5
	PN_TRIANGLES_POINT_MODE_CUBIC_ATI                                     = 0x87F6
	PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI                                   = 0x87F7
	PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI                                = 0x87F8
	GL_3DC_X_AMD                                                          = 0x87F9
	GL_3DC_XY_AMD                                                         = 0x87FA
	VBO_FREE_MEMORY_ATI                                                   = 0x87FB
	TEXTURE_FREE_MEMORY_ATI                                               = 0x87FC
	RENDERBUFFER_FREE_MEMORY_ATI                                          = 0x87FD
	NUM_PROGRAM_BINARY_FORMATS                                            = 0x87FE
	NUM_PROGRAM_BINARY_FORMATS_OES                                        = 0x87FE
	PROGRAM_BINARY_FORMATS                                                = 0x87FF
	PROGRAM_BINARY_FORMATS_OES                                            = 0x87FF
	STENCIL_BACK_FUNC                                                     = 0x8800
	STENCIL_BACK_FUNC_ATI                                                 = 0x8800
	STENCIL_BACK_FAIL                                                     = 0x8801
	STENCIL_BACK_FAIL_ATI                                                 = 0x8801
	STENCIL_BACK_PASS_DEPTH_FAIL                                          = 0x8802
	STENCIL_BACK_PASS_DEPTH_FAIL_ATI                                      = 0x8802
	STENCIL_BACK_PASS_DEPTH_PASS                                          = 0x8803
	STENCIL_BACK_PASS_DEPTH_PASS_ATI                                      = 0x8803
	FRAGMENT_PROGRAM_ARB                                                  = 0x8804
	PROGRAM_ALU_INSTRUCTIONS_ARB                                          = 0x8805
	PROGRAM_TEX_INSTRUCTIONS_ARB                                          = 0x8806
	PROGRAM_TEX_INDIRECTIONS_ARB                                          = 0x8807
	PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB                                   = 0x8808
	PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB                                   = 0x8809
	PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB                                   = 0x880A
	MAX_PROGRAM_ALU_INSTRUCTIONS_ARB                                      = 0x880B
	MAX_PROGRAM_TEX_INSTRUCTIONS_ARB                                      = 0x880C
	MAX_PROGRAM_TEX_INDIRECTIONS_ARB                                      = 0x880D
	MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB                               = 0x880E
	MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB                               = 0x880F
	MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB                               = 0x8810
	RGBA32F                                                               = 0x8814
	RGBA32F_ARB                                                           = 0x8814
	RGBA32F_EXT                                                           = 0x8814
	RGBA_FLOAT32_APPLE                                                    = 0x8814
	RGBA_FLOAT32_ATI                                                      = 0x8814
	RGB32F                                                                = 0x8815
	RGB32F_ARB                                                            = 0x8815
	RGB32F_EXT                                                            = 0x8815
	RGB_FLOAT32_APPLE                                                     = 0x8815
	RGB_FLOAT32_ATI                                                       = 0x8815
	ALPHA32F_ARB                                                          = 0x8816
	ALPHA32F_EXT                                                          = 0x8816
	ALPHA_FLOAT32_APPLE                                                   = 0x8816
	ALPHA_FLOAT32_ATI                                                     = 0x8816
	INTENSITY32F_ARB                                                      = 0x8817
	INTENSITY_FLOAT32_APPLE                                               = 0x8817
	INTENSITY_FLOAT32_ATI                                                 = 0x8817
	LUMINANCE32F_ARB                                                      = 0x8818
	LUMINANCE32F_EXT                                                      = 0x8818
	LUMINANCE_FLOAT32_APPLE                                               = 0x8818
	LUMINANCE_FLOAT32_ATI                                                 = 0x8818
	LUMINANCE_ALPHA32F_ARB                                                = 0x8819
	LUMINANCE_ALPHA32F_EXT                                                = 0x8819
	LUMINANCE_ALPHA_FLOAT32_APPLE                                         = 0x8819
	LUMINANCE_ALPHA_FLOAT32_ATI                                           = 0x8819
	RGBA16F                                                               = 0x881A
	RGBA16F_ARB                                                           = 0x881A
	RGBA16F_EXT                                                           = 0x881A
	RGBA_FLOAT16_APPLE                                                    = 0x881A
	RGBA_FLOAT16_ATI                                                      = 0x881A
	RGB16F                                                                = 0x881B
	RGB16F_ARB                                                            = 0x881B
	RGB16F_EXT                                                            = 0x881B
	RGB_FLOAT16_APPLE                                                     = 0x881B
	RGB_FLOAT16_ATI                                                       = 0x881B
	ALPHA16F_ARB                                                          = 0x881C
	ALPHA16F_EXT                                                          = 0x881C
	ALPHA_FLOAT16_APPLE                                                   = 0x881C
	ALPHA_FLOAT16_ATI                                                     = 0x881C
	INTENSITY16F_ARB                                                      = 0x881D
	INTENSITY_FLOAT16_APPLE                                               = 0x881D
	INTENSITY_FLOAT16_ATI                                                 = 0x881D
	LUMINANCE16F_ARB                                                      = 0x881E
	LUMINANCE16F_EXT                                                      = 0x881E
	LUMINANCE_FLOAT16_APPLE                                               = 0x881E
	LUMINANCE_FLOAT16_ATI                                                 = 0x881E
	LUMINANCE_ALPHA16F_ARB                                                = 0x881F
	LUMINANCE_ALPHA16F_EXT                                                = 0x881F
	LUMINANCE_ALPHA_FLOAT16_APPLE                                         = 0x881F
	LUMINANCE_ALPHA_FLOAT16_ATI                                           = 0x881F
	RGBA_FLOAT_MODE_ARB                                                   = 0x8820
	RGBA_FLOAT_MODE_ATI                                                   = 0x8820
	WRITEONLY_RENDERING_QCOM                                              = 0x8823
	MAX_DRAW_BUFFERS                                                      = 0x8824
	MAX_DRAW_BUFFERS_ARB                                                  = 0x8824
	MAX_DRAW_BUFFERS_ATI                                                  = 0x8824
	MAX_DRAW_BUFFERS_EXT                                                  = 0x8824
	MAX_DRAW_BUFFERS_NV                                                   = 0x8824
	DRAW_BUFFER0                                                          = 0x8825
	DRAW_BUFFER0_ARB                                                      = 0x8825
	DRAW_BUFFER0_ATI                                                      = 0x8825
	DRAW_BUFFER0_EXT                                                      = 0x8825
	DRAW_BUFFER0_NV                                                       = 0x8825
	DRAW_BUFFER1                                                          = 0x8826
	DRAW_BUFFER1_ARB                                                      = 0x8826
	DRAW_BUFFER1_ATI                                                      = 0x8826
	DRAW_BUFFER1_EXT                                                      = 0x8826
	DRAW_BUFFER1_NV                                                       = 0x8826
	DRAW_BUFFER2                                                          = 0x8827
	DRAW_BUFFER2_ARB                                                      = 0x8827
	DRAW_BUFFER2_ATI                                                      = 0x8827
	DRAW_BUFFER2_EXT                                                      = 0x8827
	DRAW_BUFFER2_NV                                                       = 0x8827
	DRAW_BUFFER3                                                          = 0x8828
	DRAW_BUFFER3_ARB                                                      = 0x8828
	DRAW_BUFFER3_ATI                                                      = 0x8828
	DRAW_BUFFER3_EXT                                                      = 0x8828
	DRAW_BUFFER3_NV                                                       = 0x8828
	DRAW_BUFFER4                                                          = 0x8829
	DRAW_BUFFER4_ARB                                                      = 0x8829
	DRAW_BUFFER4_ATI                                                      = 0x8829
	DRAW_BUFFER4_EXT                                                      = 0x8829
	DRAW_BUFFER4_NV                                                       = 0x8829
	DRAW_BUFFER5                                                          = 0x882A
	DRAW_BUFFER5_ARB                                                      = 0x882A
	DRAW_BUFFER5_ATI                                                      = 0x882A
	DRAW_BUFFER5_EXT                                                      = 0x882A
	DRAW_BUFFER5_NV                                                       = 0x882A
	DRAW_BUFFER6                                                          = 0x882B
	DRAW_BUFFER6_ARB                                                      = 0x882B
	DRAW_BUFFER6_ATI                                                      = 0x882B
	DRAW_BUFFER6_EXT                                                      = 0x882B
	DRAW_BUFFER6_NV                                                       = 0x882B
	DRAW_BUFFER7                                                          = 0x882C
	DRAW_BUFFER7_ARB                                                      = 0x882C
	DRAW_BUFFER7_ATI                                                      = 0x882C
	DRAW_BUFFER7_EXT                                                      = 0x882C
	DRAW_BUFFER7_NV                                                       = 0x882C
	DRAW_BUFFER8                                                          = 0x882D
	DRAW_BUFFER8_ARB                                                      = 0x882D
	DRAW_BUFFER8_ATI                                                      = 0x882D
	DRAW_BUFFER8_EXT                                                      = 0x882D
	DRAW_BUFFER8_NV                                                       = 0x882D
	DRAW_BUFFER9                                                          = 0x882E
	DRAW_BUFFER9_ARB                                                      = 0x882E
	DRAW_BUFFER9_ATI                                                      = 0x882E
	DRAW_BUFFER9_EXT                                                      = 0x882E
	DRAW_BUFFER9_NV                                                       = 0x882E
	DRAW_BUFFER10                                                         = 0x882F
	DRAW_BUFFER10_ARB                                                     = 0x882F
	DRAW_BUFFER10_ATI                                                     = 0x882F
	DRAW_BUFFER10_EXT                                                     = 0x882F
	DRAW_BUFFER10_NV                                                      = 0x882F
	DRAW_BUFFER11                                                         = 0x8830
	DRAW_BUFFER11_ARB                                                     = 0x8830
	DRAW_BUFFER11_ATI                                                     = 0x8830
	DRAW_BUFFER11_EXT                                                     = 0x8830
	DRAW_BUFFER11_NV                                                      = 0x8830
	DRAW_BUFFER12                                                         = 0x8831
	DRAW_BUFFER12_ARB                                                     = 0x8831
	DRAW_BUFFER12_ATI                                                     = 0x8831
	DRAW_BUFFER12_EXT                                                     = 0x8831
	DRAW_BUFFER12_NV                                                      = 0x8831
	DRAW_BUFFER13                                                         = 0x8832
	DRAW_BUFFER13_ARB                                                     = 0x8832
	DRAW_BUFFER13_ATI                                                     = 0x8832
	DRAW_BUFFER13_EXT                                                     = 0x8832
	DRAW_BUFFER13_NV                                                      = 0x8832
	DRAW_BUFFER14                                                         = 0x8833
	DRAW_BUFFER14_ARB                                                     = 0x8833
	DRAW_BUFFER14_ATI                                                     = 0x8833
	DRAW_BUFFER14_EXT                                                     = 0x8833
	DRAW_BUFFER14_NV                                                      = 0x8833
	DRAW_BUFFER15                                                         = 0x8834
	DRAW_BUFFER15_ARB                                                     = 0x8834
	DRAW_BUFFER15_ATI                                                     = 0x8834
	DRAW_BUFFER15_EXT                                                     = 0x8834
	DRAW_BUFFER15_NV                                                      = 0x8834
	COLOR_CLEAR_UNCLAMPED_VALUE_ATI                                       = 0x8835
	COMPRESSED_LUMINANCE_ALPHA_3DC_ATI                                    = 0x8837
	BLEND_EQUATION_ALPHA                                                  = 0x883D
	BLEND_EQUATION_ALPHA_EXT                                              = 0x883D
	BLEND_EQUATION_ALPHA_OES                                              = 0x883D
	SUBSAMPLE_DISTANCE_AMD                                                = 0x883F
	MATRIX_PALETTE_ARB                                                    = 0x8840
	MATRIX_PALETTE_OES                                                    = 0x8840
	MAX_MATRIX_PALETTE_STACK_DEPTH_ARB                                    = 0x8841
	MAX_PALETTE_MATRICES_ARB                                              = 0x8842
	MAX_PALETTE_MATRICES_OES                                              = 0x8842
	CURRENT_PALETTE_MATRIX_ARB                                            = 0x8843
	CURRENT_PALETTE_MATRIX_OES                                            = 0x8843
	MATRIX_INDEX_ARRAY_ARB                                                = 0x8844
	MATRIX_INDEX_ARRAY_OES                                                = 0x8844
	CURRENT_MATRIX_INDEX_ARB                                              = 0x8845
	MATRIX_INDEX_ARRAY_SIZE_ARB                                           = 0x8846
	MATRIX_INDEX_ARRAY_SIZE_OES                                           = 0x8846
	MATRIX_INDEX_ARRAY_TYPE_ARB                                           = 0x8847
	MATRIX_INDEX_ARRAY_TYPE_OES                                           = 0x8847
	MATRIX_INDEX_ARRAY_STRIDE_ARB                                         = 0x8848
	MATRIX_INDEX_ARRAY_STRIDE_OES                                         = 0x8848
	MATRIX_INDEX_ARRAY_POINTER_ARB                                        = 0x8849
	MATRIX_INDEX_ARRAY_POINTER_OES                                        = 0x8849
	TEXTURE_DEPTH_SIZE                                                    = 0x884A
	TEXTURE_DEPTH_SIZE_ARB                                                = 0x884A
	DEPTH_TEXTURE_MODE                                                    = 0x884B
	DEPTH_TEXTURE_MODE_ARB                                                = 0x884B
	TEXTURE_COMPARE_MODE                                                  = 0x884C
	TEXTURE_COMPARE_MODE_ARB                                              = 0x884C
	TEXTURE_COMPARE_MODE_EXT                                              = 0x884C
	TEXTURE_COMPARE_FUNC                                                  = 0x884D
	TEXTURE_COMPARE_FUNC_ARB                                              = 0x884D
	TEXTURE_COMPARE_FUNC_EXT                                              = 0x884D
	COMPARE_R_TO_TEXTURE                                                  = 0x884E
	COMPARE_R_TO_TEXTURE_ARB                                              = 0x884E
	COMPARE_REF_DEPTH_TO_TEXTURE_EXT                                      = 0x884E
	COMPARE_REF_TO_TEXTURE                                                = 0x884E
	COMPARE_REF_TO_TEXTURE_EXT                                            = 0x884E
	TEXTURE_CUBE_MAP_SEAMLESS                                             = 0x884F
	OFFSET_PROJECTIVE_TEXTURE_2D_NV                                       = 0x8850
	OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV                                 = 0x8851
	OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV                                = 0x8852
	OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV                          = 0x8853
	OFFSET_HILO_TEXTURE_2D_NV                                             = 0x8854
	OFFSET_HILO_TEXTURE_RECTANGLE_NV                                      = 0x8855
	OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV                                  = 0x8856
	OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV                           = 0x8857
	DEPENDENT_HILO_TEXTURE_2D_NV                                          = 0x8858
	DEPENDENT_RGB_TEXTURE_3D_NV                                           = 0x8859
	DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV                                     = 0x885A
	DOT_PRODUCT_PASS_THROUGH_NV                                           = 0x885B
	DOT_PRODUCT_TEXTURE_1D_NV                                             = 0x885C
	DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV                                   = 0x885D
	HILO8_NV                                                              = 0x885E
	SIGNED_HILO8_NV                                                       = 0x885F
	FORCE_BLUE_TO_ONE_NV                                                  = 0x8860
	POINT_SPRITE                                                          = 0x8861
	POINT_SPRITE_ARB                                                      = 0x8861
	POINT_SPRITE_NV                                                       = 0x8861
	POINT_SPRITE_OES                                                      = 0x8861
	COORD_REPLACE                                                         = 0x8862
	COORD_REPLACE_ARB                                                     = 0x8862
	COORD_REPLACE_NV                                                      = 0x8862
	COORD_REPLACE_OES                                                     = 0x8862
	POINT_SPRITE_R_MODE_NV                                                = 0x8863
	PIXEL_COUNTER_BITS_NV                                                 = 0x8864
	QUERY_COUNTER_BITS                                                    = 0x8864
	QUERY_COUNTER_BITS_ARB                                                = 0x8864
	QUERY_COUNTER_BITS_EXT                                                = 0x8864
	CURRENT_OCCLUSION_QUERY_ID_NV                                         = 0x8865
	CURRENT_QUERY                                                         = 0x8865
	CURRENT_QUERY_ARB                                                     = 0x8865
	CURRENT_QUERY_EXT                                                     = 0x8865
	PIXEL_COUNT_NV                                                        = 0x8866
	QUERY_RESULT                                                          = 0x8866
	QUERY_RESULT_ARB                                                      = 0x8866
	QUERY_RESULT_EXT                                                      = 0x8866
	PIXEL_COUNT_AVAILABLE_NV                                              = 0x8867
	QUERY_RESULT_AVAILABLE                                                = 0x8867
	QUERY_RESULT_AVAILABLE_ARB                                            = 0x8867
	QUERY_RESULT_AVAILABLE_EXT                                            = 0x8867
	MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV                              = 0x8868
	MAX_VERTEX_ATTRIBS                                                    = 0x8869
	MAX_VERTEX_ATTRIBS_ARB                                                = 0x8869
	VERTEX_ATTRIB_ARRAY_NORMALIZED                                        = 0x886A
	VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB                                    = 0x886A
	MAX_TESS_CONTROL_INPUT_COMPONENTS                                     = 0x886C
	MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT                                 = 0x886C
	MAX_TESS_CONTROL_INPUT_COMPONENTS_OES                                 = 0x886C
	MAX_TESS_EVALUATION_INPUT_COMPONENTS                                  = 0x886D
	MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT                              = 0x886D
	MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES                              = 0x886D
	DEPTH_STENCIL_TO_RGBA_NV                                              = 0x886E
	DEPTH_STENCIL_TO_BGRA_NV                                              = 0x886F
	FRAGMENT_PROGRAM_NV                                                   = 0x8870
	MAX_TEXTURE_COORDS                                                    = 0x8871
	MAX_TEXTURE_COORDS_ARB                                                = 0x8871
	MAX_TEXTURE_COORDS_NV                                                 = 0x8871
	MAX_TEXTURE_IMAGE_UNITS                                               = 0x8872
	MAX_TEXTURE_IMAGE_UNITS_ARB                                           = 0x8872
	MAX_TEXTURE_IMAGE_UNITS_NV                                            = 0x8872
	FRAGMENT_PROGRAM_BINDING_NV                                           = 0x8873
	PROGRAM_ERROR_STRING_ARB                                              = 0x8874
	PROGRAM_ERROR_STRING_NV                                               = 0x8874
	PROGRAM_FORMAT_ASCII_ARB                                              = 0x8875
	PROGRAM_FORMAT_ARB                                                    = 0x8876
	WRITE_PIXEL_DATA_RANGE_NV                                             = 0x8878
	READ_PIXEL_DATA_RANGE_NV                                              = 0x8879
	WRITE_PIXEL_DATA_RANGE_LENGTH_NV                                      = 0x887A
	READ_PIXEL_DATA_RANGE_LENGTH_NV                                       = 0x887B
	WRITE_PIXEL_DATA_RANGE_POINTER_NV                                     = 0x887C
	READ_PIXEL_DATA_RANGE_POINTER_NV                                      = 0x887D
	GEOMETRY_SHADER_INVOCATIONS                                           = 0x887F
	GEOMETRY_SHADER_INVOCATIONS_EXT                                       = 0x887F
	GEOMETRY_SHADER_INVOCATIONS_OES                                       = 0x887F
	FLOAT_R_NV                                                            = 0x8880
	FLOAT_RG_NV                                                           = 0x8881
	FLOAT_RGB_NV                                                          = 0x8882
	FLOAT_RGBA_NV                                                         = 0x8883
	FLOAT_R16_NV                                                          = 0x8884
	FLOAT_R32_NV                                                          = 0x8885
	FLOAT_RG16_NV                                                         = 0x8886
	FLOAT_RG32_NV                                                         = 0x8887
	FLOAT_RGB16_NV                                                        = 0x8888
	FLOAT_RGB32_NV                                                        = 0x8889
	FLOAT_RGBA16_NV                                                       = 0x888A
	FLOAT_RGBA32_NV                                                       = 0x888B
	TEXTURE_FLOAT_COMPONENTS_NV                                           = 0x888C
	FLOAT_CLEAR_COLOR_VALUE_NV                                            = 0x888D
	FLOAT_RGBA_MODE_NV                                                    = 0x888E
	TEXTURE_UNSIGNED_REMAP_MODE_NV                                        = 0x888F
	DEPTH_BOUNDS_TEST_EXT                                                 = 0x8890
	DEPTH_BOUNDS_EXT                                                      = 0x8891
	ARRAY_BUFFER                                                          = 0x8892
	ARRAY_BUFFER_ARB                                                      = 0x8892
	ELEMENT_ARRAY_BUFFER                                                  = 0x8893
	ELEMENT_ARRAY_BUFFER_ARB                                              = 0x8893
	ARRAY_BUFFER_BINDING                                                  = 0x8894
	ARRAY_BUFFER_BINDING_ARB                                              = 0x8894
	ELEMENT_ARRAY_BUFFER_BINDING                                          = 0x8895
	ELEMENT_ARRAY_BUFFER_BINDING_ARB                                      = 0x8895
	VERTEX_ARRAY_BUFFER_BINDING                                           = 0x8896
	VERTEX_ARRAY_BUFFER_BINDING_ARB                                       = 0x8896
	NORMAL_ARRAY_BUFFER_BINDING                                           = 0x8897
	NORMAL_ARRAY_BUFFER_BINDING_ARB                                       = 0x8897
	COLOR_ARRAY_BUFFER_BINDING                                            = 0x8898
	COLOR_ARRAY_BUFFER_BINDING_ARB                                        = 0x8898
	INDEX_ARRAY_BUFFER_BINDING                                            = 0x8899
	INDEX_ARRAY_BUFFER_BINDING_ARB                                        = 0x8899
	TEXTURE_COORD_ARRAY_BUFFER_BINDING                                    = 0x889A
	TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB                                = 0x889A
	EDGE_FLAG_ARRAY_BUFFER_BINDING                                        = 0x889B
	EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB                                    = 0x889B
	SECONDARY_COLOR_ARRAY_BUFFER_BINDING                                  = 0x889C
	SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB                              = 0x889C
	FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB                               = 0x889D
	FOG_COORDINATE_ARRAY_BUFFER_BINDING                                   = 0x889D
	FOG_COORD_ARRAY_BUFFER_BINDING                                        = 0x889D
	WEIGHT_ARRAY_BUFFER_BINDING                                           = 0x889E
	WEIGHT_ARRAY_BUFFER_BINDING_ARB                                       = 0x889E
	WEIGHT_ARRAY_BUFFER_BINDING_OES                                       = 0x889E
	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING                                    = 0x889F
	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB                                = 0x889F
	PROGRAM_INSTRUCTIONS_ARB                                              = 0x88A0
	MAX_PROGRAM_INSTRUCTIONS_ARB                                          = 0x88A1
	PROGRAM_NATIVE_INSTRUCTIONS_ARB                                       = 0x88A2
	MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB                                   = 0x88A3
	PROGRAM_TEMPORARIES_ARB                                               = 0x88A4
	MAX_PROGRAM_TEMPORARIES_ARB                                           = 0x88A5
	PROGRAM_NATIVE_TEMPORARIES_ARB                                        = 0x88A6
	MAX_PROGRAM_NATIVE_TEMPORARIES_ARB                                    = 0x88A7
	PROGRAM_PARAMETERS_ARB                                                = 0x88A8
	MAX_PROGRAM_PARAMETERS_ARB                                            = 0x88A9
	PROGRAM_NATIVE_PARAMETERS_ARB                                         = 0x88AA
	MAX_PROGRAM_NATIVE_PARAMETERS_ARB                                     = 0x88AB
	PROGRAM_ATTRIBS_ARB                                                   = 0x88AC
	MAX_PROGRAM_ATTRIBS_ARB                                               = 0x88AD
	PROGRAM_NATIVE_ATTRIBS_ARB                                            = 0x88AE
	MAX_PROGRAM_NATIVE_ATTRIBS_ARB                                        = 0x88AF
	PROGRAM_ADDRESS_REGISTERS_ARB                                         = 0x88B0
	MAX_PROGRAM_ADDRESS_REGISTERS_ARB                                     = 0x88B1
	PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB                                  = 0x88B2
	MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB                              = 0x88B3
	MAX_PROGRAM_LOCAL_PARAMETERS_ARB                                      = 0x88B4
	MAX_PROGRAM_ENV_PARAMETERS_ARB                                        = 0x88B5
	PROGRAM_UNDER_NATIVE_LIMITS_ARB                                       = 0x88B6
	TRANSPOSE_CURRENT_MATRIX_ARB                                          = 0x88B7
	READ_ONLY                                                             = 0x88B8
	READ_ONLY_ARB                                                         = 0x88B8
	WRITE_ONLY                                                            = 0x88B9
	WRITE_ONLY_ARB                                                        = 0x88B9
	WRITE_ONLY_OES                                                        = 0x88B9
	READ_WRITE                                                            = 0x88BA
	READ_WRITE_ARB                                                        = 0x88BA
	BUFFER_ACCESS                                                         = 0x88BB
	BUFFER_ACCESS_ARB                                                     = 0x88BB
	BUFFER_ACCESS_OES                                                     = 0x88BB
	BUFFER_MAPPED                                                         = 0x88BC
	BUFFER_MAPPED_ARB                                                     = 0x88BC
	BUFFER_MAPPED_OES                                                     = 0x88BC
	BUFFER_MAP_POINTER                                                    = 0x88BD
	BUFFER_MAP_POINTER_ARB                                                = 0x88BD
	BUFFER_MAP_POINTER_OES                                                = 0x88BD
	WRITE_DISCARD_NV                                                      = 0x88BE
	TIME_ELAPSED                                                          = 0x88BF
	TIME_ELAPSED_EXT                                                      = 0x88BF
	MATRIX0_ARB                                                           = 0x88C0
	MATRIX1_ARB                                                           = 0x88C1
	MATRIX2_ARB                                                           = 0x88C2
	MATRIX3_ARB                                                           = 0x88C3
	MATRIX4_ARB                                                           = 0x88C4
	MATRIX5_ARB                                                           = 0x88C5
	MATRIX6_ARB                                                           = 0x88C6
	MATRIX7_ARB                                                           = 0x88C7
	MATRIX8_ARB                                                           = 0x88C8
	MATRIX9_ARB                                                           = 0x88C9
	MATRIX10_ARB                                                          = 0x88CA
	MATRIX11_ARB                                                          = 0x88CB
	MATRIX12_ARB                                                          = 0x88CC
	MATRIX13_ARB                                                          = 0x88CD
	MATRIX14_ARB                                                          = 0x88CE
	MATRIX15_ARB                                                          = 0x88CF
	MATRIX16_ARB                                                          = 0x88D0
	MATRIX17_ARB                                                          = 0x88D1
	MATRIX18_ARB                                                          = 0x88D2
	MATRIX19_ARB                                                          = 0x88D3
	MATRIX20_ARB                                                          = 0x88D4
	MATRIX21_ARB                                                          = 0x88D5
	MATRIX22_ARB                                                          = 0x88D6
	MATRIX23_ARB                                                          = 0x88D7
	MATRIX24_ARB                                                          = 0x88D8
	MATRIX25_ARB                                                          = 0x88D9
	MATRIX26_ARB                                                          = 0x88DA
	MATRIX27_ARB                                                          = 0x88DB
	MATRIX28_ARB                                                          = 0x88DC
	MATRIX29_ARB                                                          = 0x88DD
	MATRIX30_ARB                                                          = 0x88DE
	MATRIX31_ARB                                                          = 0x88DF
	STREAM_DRAW                                                           = 0x88E0
	STREAM_DRAW_ARB                                                       = 0x88E0
	STREAM_READ                                                           = 0x88E1
	STREAM_READ_ARB                                                       = 0x88E1
	STREAM_COPY                                                           = 0x88E2
	STREAM_COPY_ARB                                                       = 0x88E2
	STATIC_DRAW                                                           = 0x88E4
	STATIC_DRAW_ARB                                                       = 0x88E4
	STATIC_READ                                                           = 0x88E5
	STATIC_READ_ARB                                                       = 0x88E5
	STATIC_COPY                                                           = 0x88E6
	STATIC_COPY_ARB                                                       = 0x88E6
	DYNAMIC_DRAW                                                          = 0x88E8
	DYNAMIC_DRAW_ARB                                                      = 0x88E8
	DYNAMIC_READ                                                          = 0x88E9
	DYNAMIC_READ_ARB                                                      = 0x88E9
	DYNAMIC_COPY                                                          = 0x88EA
	DYNAMIC_COPY_ARB                                                      = 0x88EA
	PIXEL_PACK_BUFFER                                                     = 0x88EB
	PIXEL_PACK_BUFFER_ARB                                                 = 0x88EB
	PIXEL_PACK_BUFFER_EXT                                                 = 0x88EB
	PIXEL_PACK_BUFFER_NV                                                  = 0x88EB
	PIXEL_UNPACK_BUFFER                                                   = 0x88EC
	PIXEL_UNPACK_BUFFER_ARB                                               = 0x88EC
	PIXEL_UNPACK_BUFFER_EXT                                               = 0x88EC
	PIXEL_UNPACK_BUFFER_NV                                                = 0x88EC
	PIXEL_PACK_BUFFER_BINDING                                             = 0x88ED
	PIXEL_PACK_BUFFER_BINDING_ARB                                         = 0x88ED
	PIXEL_PACK_BUFFER_BINDING_EXT                                         = 0x88ED
	PIXEL_PACK_BUFFER_BINDING_NV                                          = 0x88ED
	ETC1_SRGB8_NV                                                         = 0x88EE
	PIXEL_UNPACK_BUFFER_BINDING                                           = 0x88EF
	PIXEL_UNPACK_BUFFER_BINDING_ARB                                       = 0x88EF
	PIXEL_UNPACK_BUFFER_BINDING_EXT                                       = 0x88EF
	PIXEL_UNPACK_BUFFER_BINDING_NV                                        = 0x88EF
	DEPTH24_STENCIL8                                                      = 0x88F0
	DEPTH24_STENCIL8_EXT                                                  = 0x88F0
	DEPTH24_STENCIL8_OES                                                  = 0x88F0
	TEXTURE_STENCIL_SIZE                                                  = 0x88F1
	TEXTURE_STENCIL_SIZE_EXT                                              = 0x88F1
	STENCIL_TAG_BITS_EXT                                                  = 0x88F2
	STENCIL_CLEAR_TAG_VALUE_EXT                                           = 0x88F3
	MAX_PROGRAM_EXEC_INSTRUCTIONS_NV                                      = 0x88F4
	MAX_PROGRAM_CALL_DEPTH_NV                                             = 0x88F5
	MAX_PROGRAM_IF_DEPTH_NV                                               = 0x88F6
	MAX_PROGRAM_LOOP_DEPTH_NV                                             = 0x88F7
	MAX_PROGRAM_LOOP_COUNT_NV                                             = 0x88F8
	SRC1_COLOR                                                            = 0x88F9
	SRC1_COLOR_EXT                                                        = 0x88F9
	ONE_MINUS_SRC1_COLOR                                                  = 0x88FA
	ONE_MINUS_SRC1_COLOR_EXT                                              = 0x88FA
	ONE_MINUS_SRC1_ALPHA                                                  = 0x88FB
	ONE_MINUS_SRC1_ALPHA_EXT                                              = 0x88FB
	MAX_DUAL_SOURCE_DRAW_BUFFERS                                          = 0x88FC
	MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT                                      = 0x88FC
	VERTEX_ATTRIB_ARRAY_INTEGER                                           = 0x88FD
	VERTEX_ATTRIB_ARRAY_INTEGER_EXT                                       = 0x88FD
	VERTEX_ATTRIB_ARRAY_INTEGER_NV                                        = 0x88FD
	VERTEX_ATTRIB_ARRAY_DIVISOR                                           = 0x88FE
	VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE                                     = 0x88FE
	VERTEX_ATTRIB_ARRAY_DIVISOR_ARB                                       = 0x88FE
	VERTEX_ATTRIB_ARRAY_DIVISOR_EXT                                       = 0x88FE
	VERTEX_ATTRIB_ARRAY_DIVISOR_NV                                        = 0x88FE
	MAX_ARRAY_TEXTURE_LAYERS                                              = 0x88FF
	MAX_ARRAY_TEXTURE_LAYERS_EXT                                          = 0x88FF
	MIN_PROGRAM_TEXEL_OFFSET                                              = 0x8904
	MIN_PROGRAM_TEXEL_OFFSET_EXT                                          = 0x8904
	MIN_PROGRAM_TEXEL_OFFSET_NV                                           = 0x8904
	MAX_PROGRAM_TEXEL_OFFSET                                              = 0x8905
	MAX_PROGRAM_TEXEL_OFFSET_EXT                                          = 0x8905
	MAX_PROGRAM_TEXEL_OFFSET_NV                                           = 0x8905
	PROGRAM_ATTRIB_COMPONENTS_NV                                          = 0x8906
	PROGRAM_RESULT_COMPONENTS_NV                                          = 0x8907
	MAX_PROGRAM_ATTRIB_COMPONENTS_NV                                      = 0x8908
	MAX_PROGRAM_RESULT_COMPONENTS_NV                                      = 0x8909
	STENCIL_TEST_TWO_SIDE_EXT                                             = 0x8910
	ACTIVE_STENCIL_FACE_EXT                                               = 0x8911
	MIRROR_CLAMP_TO_BORDER_EXT                                            = 0x8912
	SAMPLES_PASSED                                                        = 0x8914
	SAMPLES_PASSED_ARB                                                    = 0x8914
	GEOMETRY_VERTICES_OUT                                                 = 0x8916
	GEOMETRY_LINKED_VERTICES_OUT_EXT                                      = 0x8916
	GEOMETRY_LINKED_VERTICES_OUT_OES                                      = 0x8916
	GEOMETRY_INPUT_TYPE                                                   = 0x8917
	GEOMETRY_LINKED_INPUT_TYPE_EXT                                        = 0x8917
	GEOMETRY_LINKED_INPUT_TYPE_OES                                        = 0x8917
	GEOMETRY_OUTPUT_TYPE                                                  = 0x8918
	GEOMETRY_LINKED_OUTPUT_TYPE_EXT                                       = 0x8918
	GEOMETRY_LINKED_OUTPUT_TYPE_OES                                       = 0x8918
	SAMPLER_BINDING                                                       = 0x8919
	CLAMP_VERTEX_COLOR                                                    = 0x891A
	CLAMP_VERTEX_COLOR_ARB                                                = 0x891A
	CLAMP_FRAGMENT_COLOR                                                  = 0x891B
	CLAMP_FRAGMENT_COLOR_ARB                                              = 0x891B
	CLAMP_READ_COLOR                                                      = 0x891C
	CLAMP_READ_COLOR_ARB                                                  = 0x891C
	FIXED_ONLY                                                            = 0x891D
	FIXED_ONLY_ARB                                                        = 0x891D
	TESS_CONTROL_PROGRAM_NV                                               = 0x891E
	TESS_EVALUATION_PROGRAM_NV                                            = 0x891F
	FRAGMENT_SHADER_ATI                                                   = 0x8920
	REG_0_ATI                                                             = 0x8921
	REG_1_ATI                                                             = 0x8922
	REG_2_ATI                                                             = 0x8923
	REG_3_ATI                                                             = 0x8924
	REG_4_ATI                                                             = 0x8925
	REG_5_ATI                                                             = 0x8926
	REG_6_ATI                                                             = 0x8927
	REG_7_ATI                                                             = 0x8928
	REG_8_ATI                                                             = 0x8929
	REG_9_ATI                                                             = 0x892A
	REG_10_ATI                                                            = 0x892B
	REG_11_ATI                                                            = 0x892C
	REG_12_ATI                                                            = 0x892D
	REG_13_ATI                                                            = 0x892E
	REG_14_ATI                                                            = 0x892F
	REG_15_ATI                                                            = 0x8930
	REG_16_ATI                                                            = 0x8931
	REG_17_ATI                                                            = 0x8932
	REG_18_ATI                                                            = 0x8933
	REG_19_ATI                                                            = 0x8934
	REG_20_ATI                                                            = 0x8935
	REG_21_ATI                                                            = 0x8936
	REG_22_ATI                                                            = 0x8937
	REG_23_ATI                                                            = 0x8938
	REG_24_ATI                                                            = 0x8939
	REG_25_ATI                                                            = 0x893A
	REG_26_ATI                                                            = 0x893B
	REG_27_ATI                                                            = 0x893C
	REG_28_ATI                                                            = 0x893D
	REG_29_ATI                                                            = 0x893E
	REG_30_ATI                                                            = 0x893F
	REG_31_ATI                                                            = 0x8940
	CON_0_ATI                                                             = 0x8941
	CON_1_ATI                                                             = 0x8942
	CON_2_ATI                                                             = 0x8943
	CON_3_ATI                                                             = 0x8944
	CON_4_ATI                                                             = 0x8945
	CON_5_ATI                                                             = 0x8946
	CON_6_ATI                                                             = 0x8947
	CON_7_ATI                                                             = 0x8948
	CON_8_ATI                                                             = 0x8949
	CON_9_ATI                                                             = 0x894A
	CON_10_ATI                                                            = 0x894B
	CON_11_ATI                                                            = 0x894C
	CON_12_ATI                                                            = 0x894D
	CON_13_ATI                                                            = 0x894E
	CON_14_ATI                                                            = 0x894F
	CON_15_ATI                                                            = 0x8950
	CON_16_ATI                                                            = 0x8951
	CON_17_ATI                                                            = 0x8952
	CON_18_ATI                                                            = 0x8953
	CON_19_ATI                                                            = 0x8954
	CON_20_ATI                                                            = 0x8955
	CON_21_ATI                                                            = 0x8956
	CON_22_ATI                                                            = 0x8957
	CON_23_ATI                                                            = 0x8958
	CON_24_ATI                                                            = 0x8959
	CON_25_ATI                                                            = 0x895A
	CON_26_ATI                                                            = 0x895B
	CON_27_ATI                                                            = 0x895C
	CON_28_ATI                                                            = 0x895D
	CON_29_ATI                                                            = 0x895E
	CON_30_ATI                                                            = 0x895F
	CON_31_ATI                                                            = 0x8960
	MOV_ATI                                                               = 0x8961
	ADD_ATI                                                               = 0x8963
	MUL_ATI                                                               = 0x8964
	SUB_ATI                                                               = 0x8965
	DOT3_ATI                                                              = 0x8966
	DOT4_ATI                                                              = 0x8967
	MAD_ATI                                                               = 0x8968
	LERP_ATI                                                              = 0x8969
	CND_ATI                                                               = 0x896A
	CND0_ATI                                                              = 0x896B
	DOT2_ADD_ATI                                                          = 0x896C
	SECONDARY_INTERPOLATOR_ATI                                            = 0x896D
	NUM_FRAGMENT_REGISTERS_ATI                                            = 0x896E
	NUM_FRAGMENT_CONSTANTS_ATI                                            = 0x896F
	NUM_PASSES_ATI                                                        = 0x8970
	NUM_INSTRUCTIONS_PER_PASS_ATI                                         = 0x8971
	NUM_INSTRUCTIONS_TOTAL_ATI                                            = 0x8972
	NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI                                 = 0x8973
	NUM_LOOPBACK_COMPONENTS_ATI                                           = 0x8974
	COLOR_ALPHA_PAIRING_ATI                                               = 0x8975
	SWIZZLE_STR_ATI                                                       = 0x8976
	SWIZZLE_STQ_ATI                                                       = 0x8977
	SWIZZLE_STR_DR_ATI                                                    = 0x8978
	SWIZZLE_STQ_DQ_ATI                                                    = 0x8979
	SWIZZLE_STRQ_ATI                                                      = 0x897A
	SWIZZLE_STRQ_DQ_ATI                                                   = 0x897B
	INTERLACE_OML                                                         = 0x8980
	INTERLACE_READ_OML                                                    = 0x8981
	FORMAT_SUBSAMPLE_24_24_OML                                            = 0x8982
	FORMAT_SUBSAMPLE_244_244_OML                                          = 0x8983
	PACK_RESAMPLE_OML                                                     = 0x8984
	UNPACK_RESAMPLE_OML                                                   = 0x8985
	RESAMPLE_REPLICATE_OML                                                = 0x8986
	RESAMPLE_ZERO_FILL_OML                                                = 0x8987
	RESAMPLE_AVERAGE_OML                                                  = 0x8988
	RESAMPLE_DECIMATE_OML                                                 = 0x8989
	POINT_SIZE_ARRAY_TYPE_OES                                             = 0x898A
	POINT_SIZE_ARRAY_STRIDE_OES                                           = 0x898B
	POINT_SIZE_ARRAY_POINTER_OES                                          = 0x898C
	MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES                                = 0x898D
	PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES                               = 0x898E
	TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES                                  = 0x898F
	VERTEX_ATTRIB_MAP1_APPLE                                              = 0x8A00
	VERTEX_ATTRIB_MAP2_APPLE                                              = 0x8A01
	VERTEX_ATTRIB_MAP1_SIZE_APPLE                                         = 0x8A02
	VERTEX_ATTRIB_MAP1_COEFF_APPLE                                        = 0x8A03
	VERTEX_ATTRIB_MAP1_ORDER_APPLE                                        = 0x8A04
	VERTEX_ATTRIB_MAP1_DOMAIN_APPLE                                       = 0x8A05
	VERTEX_ATTRIB_MAP2_SIZE_APPLE                                         = 0x8A06
	VERTEX_ATTRIB_MAP2_COEFF_APPLE                                        = 0x8A07
	VERTEX_ATTRIB_MAP2_ORDER_APPLE                                        = 0x8A08
	VERTEX_ATTRIB_MAP2_DOMAIN_APPLE                                       = 0x8A09
	DRAW_PIXELS_APPLE                                                     = 0x8A0A
	FENCE_APPLE                                                           = 0x8A0B
	ELEMENT_ARRAY_APPLE                                                   = 0x8A0C
	ELEMENT_ARRAY_TYPE_APPLE                                              = 0x8A0D
	ELEMENT_ARRAY_POINTER_APPLE                                           = 0x8A0E
	COLOR_FLOAT_APPLE                                                     = 0x8A0F
	UNIFORM_BUFFER                                                        = 0x8A11
	BUFFER_SERIALIZED_MODIFY_APPLE                                        = 0x8A12
	BUFFER_FLUSHING_UNMAP_APPLE                                           = 0x8A13
	AUX_DEPTH_STENCIL_APPLE                                               = 0x8A14
	PACK_ROW_BYTES_APPLE                                                  = 0x8A15
	UNPACK_ROW_BYTES_APPLE                                                = 0x8A16
	RELEASED_APPLE                                                        = 0x8A19
	VOLATILE_APPLE                                                        = 0x8A1A
	RETAINED_APPLE                                                        = 0x8A1B
	UNDEFINED_APPLE                                                       = 0x8A1C
	PURGEABLE_APPLE                                                       = 0x8A1D
	RGB_422_APPLE                                                         = 0x8A1F
	UNIFORM_BUFFER_BINDING                                                = 0x8A28
	UNIFORM_BUFFER_START                                                  = 0x8A29
	UNIFORM_BUFFER_SIZE                                                   = 0x8A2A
	MAX_VERTEX_UNIFORM_BLOCKS                                             = 0x8A2B
	MAX_GEOMETRY_UNIFORM_BLOCKS                                           = 0x8A2C
	MAX_GEOMETRY_UNIFORM_BLOCKS_EXT                                       = 0x8A2C
	MAX_GEOMETRY_UNIFORM_BLOCKS_OES                                       = 0x8A2C
	MAX_FRAGMENT_UNIFORM_BLOCKS                                           = 0x8A2D
	MAX_COMBINED_UNIFORM_BLOCKS                                           = 0x8A2E
	MAX_UNIFORM_BUFFER_BINDINGS                                           = 0x8A2F
	MAX_UNIFORM_BLOCK_SIZE                                                = 0x8A30
	MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS                                = 0x8A31
	MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS                              = 0x8A32
	MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT                          = 0x8A32
	MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES                          = 0x8A32
	MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS                              = 0x8A33
	UNIFORM_BUFFER_OFFSET_ALIGNMENT                                       = 0x8A34
	ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH                                  = 0x8A35
	ACTIVE_UNIFORM_BLOCKS                                                 = 0x8A36
	UNIFORM_TYPE                                                          = 0x8A37
	UNIFORM_SIZE                                                          = 0x8A38
	UNIFORM_NAME_LENGTH                                                   = 0x8A39
	UNIFORM_BLOCK_INDEX                                                   = 0x8A3A
	UNIFORM_OFFSET                                                        = 0x8A3B
	UNIFORM_ARRAY_STRIDE                                                  = 0x8A3C
	UNIFORM_MATRIX_STRIDE                                                 = 0x8A3D
	UNIFORM_IS_ROW_MAJOR                                                  = 0x8A3E
	UNIFORM_BLOCK_BINDING                                                 = 0x8A3F
	UNIFORM_BLOCK_DATA_SIZE                                               = 0x8A40
	UNIFORM_BLOCK_NAME_LENGTH                                             = 0x8A41
	UNIFORM_BLOCK_ACTIVE_UNIFORMS                                         = 0x8A42
	UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES                                  = 0x8A43
	UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER                             = 0x8A44
	UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER                           = 0x8A45
	UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER                           = 0x8A46
	TEXTURE_SRGB_DECODE_EXT                                               = 0x8A48
	DECODE_EXT                                                            = 0x8A49
	SKIP_DECODE_EXT                                                       = 0x8A4A
	PROGRAM_PIPELINE_OBJECT_EXT                                           = 0x8A4F
	RGB_RAW_422_APPLE                                                     = 0x8A51
	FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT                                  = 0x8A52
	SYNC_OBJECT_APPLE                                                     = 0x8A53
	COMPRESSED_SRGB_PVRTC_2BPPV1_EXT                                      = 0x8A54
	COMPRESSED_SRGB_PVRTC_4BPPV1_EXT                                      = 0x8A55
	COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT                                = 0x8A56
	COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT                                = 0x8A57
	FRAGMENT_SHADER                                                       = 0x8B30
	FRAGMENT_SHADER_ARB                                                   = 0x8B30
	VERTEX_SHADER                                                         = 0x8B31
	VERTEX_SHADER_ARB                                                     = 0x8B31
	PROGRAM_OBJECT_ARB                                                    = 0x8B40
	PROGRAM_OBJECT_EXT                                                    = 0x8B40
	SHADER_OBJECT_ARB                                                     = 0x8B48
	SHADER_OBJECT_EXT                                                     = 0x8B48
	MAX_FRAGMENT_UNIFORM_COMPONENTS                                       = 0x8B49
	MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB                                   = 0x8B49
	MAX_VERTEX_UNIFORM_COMPONENTS                                         = 0x8B4A
	MAX_VERTEX_UNIFORM_COMPONENTS_ARB                                     = 0x8B4A
	MAX_VARYING_FLOATS                                                    = 0x8B4B
	MAX_VARYING_COMPONENTS                                                = 0x8B4B
	MAX_VARYING_COMPONENTS_EXT                                            = 0x8B4B
	MAX_VARYING_FLOATS_ARB                                                = 0x8B4B
	MAX_VERTEX_TEXTURE_IMAGE_UNITS                                        = 0x8B4C
	MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB                                    = 0x8B4C
	MAX_COMBINED_TEXTURE_IMAGE_UNITS                                      = 0x8B4D
	MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB                                  = 0x8B4D
	OBJECT_TYPE_ARB                                                       = 0x8B4E
	SHADER_TYPE                                                           = 0x8B4F
	OBJECT_SUBTYPE_ARB                                                    = 0x8B4F
	FLOAT_VEC2                                                            = 0x8B50
	FLOAT_VEC2_ARB                                                        = 0x8B50
	FLOAT_VEC3                                                            = 0x8B51
	FLOAT_VEC3_ARB                                                        = 0x8B51
	FLOAT_VEC4                                                            = 0x8B52
	FLOAT_VEC4_ARB                                                        = 0x8B52
	INT_VEC2                                                              = 0x8B53
	INT_VEC2_ARB                                                          = 0x8B53
	INT_VEC3                                                              = 0x8B54
	INT_VEC3_ARB                                                          = 0x8B54
	INT_VEC4                                                              = 0x8B55
	INT_VEC4_ARB                                                          = 0x8B55
	BOOL                                                                  = 0x8B56
	BOOL_ARB                                                              = 0x8B56
	BOOL_VEC2                                                             = 0x8B57
	BOOL_VEC2_ARB                                                         = 0x8B57
	BOOL_VEC3                                                             = 0x8B58
	BOOL_VEC3_ARB                                                         = 0x8B58
	BOOL_VEC4                                                             = 0x8B59
	BOOL_VEC4_ARB                                                         = 0x8B59
	FLOAT_MAT2                                                            = 0x8B5A
	FLOAT_MAT2_ARB                                                        = 0x8B5A
	FLOAT_MAT3                                                            = 0x8B5B
	FLOAT_MAT3_ARB                                                        = 0x8B5B
	FLOAT_MAT4                                                            = 0x8B5C
	FLOAT_MAT4_ARB                                                        = 0x8B5C
	SAMPLER_1D                                                            = 0x8B5D
	SAMPLER_1D_ARB                                                        = 0x8B5D
	SAMPLER_2D                                                            = 0x8B5E
	SAMPLER_2D_ARB                                                        = 0x8B5E
	SAMPLER_3D                                                            = 0x8B5F
	SAMPLER_3D_ARB                                                        = 0x8B5F
	SAMPLER_3D_OES                                                        = 0x8B5F
	SAMPLER_CUBE                                                          = 0x8B60
	SAMPLER_CUBE_ARB                                                      = 0x8B60
	SAMPLER_1D_SHADOW                                                     = 0x8B61
	SAMPLER_1D_SHADOW_ARB                                                 = 0x8B61
	SAMPLER_2D_SHADOW                                                     = 0x8B62
	SAMPLER_2D_SHADOW_ARB                                                 = 0x8B62
	SAMPLER_2D_SHADOW_EXT                                                 = 0x8B62
	SAMPLER_2D_RECT                                                       = 0x8B63
	SAMPLER_2D_RECT_ARB                                                   = 0x8B63
	SAMPLER_2D_RECT_SHADOW                                                = 0x8B64
	SAMPLER_2D_RECT_SHADOW_ARB                                            = 0x8B64
	FLOAT_MAT2x3                                                          = 0x8B65
	FLOAT_MAT2x3_NV                                                       = 0x8B65
	FLOAT_MAT2x4                                                          = 0x8B66
	FLOAT_MAT2x4_NV                                                       = 0x8B66
	FLOAT_MAT3x2                                                          = 0x8B67
	FLOAT_MAT3x2_NV                                                       = 0x8B67
	FLOAT_MAT3x4                                                          = 0x8B68
	FLOAT_MAT3x4_NV                                                       = 0x8B68
	FLOAT_MAT4x2                                                          = 0x8B69
	FLOAT_MAT4x2_NV                                                       = 0x8B69
	FLOAT_MAT4x3                                                          = 0x8B6A
	FLOAT_MAT4x3_NV                                                       = 0x8B6A
	DELETE_STATUS                                                         = 0x8B80
	OBJECT_DELETE_STATUS_ARB                                              = 0x8B80
	COMPILE_STATUS                                                        = 0x8B81
	OBJECT_COMPILE_STATUS_ARB                                             = 0x8B81
	LINK_STATUS                                                           = 0x8B82
	OBJECT_LINK_STATUS_ARB                                                = 0x8B82
	VALIDATE_STATUS                                                       = 0x8B83
	OBJECT_VALIDATE_STATUS_ARB                                            = 0x8B83
	INFO_LOG_LENGTH                                                       = 0x8B84
	OBJECT_INFO_LOG_LENGTH_ARB                                            = 0x8B84
	ATTACHED_SHADERS                                                      = 0x8B85
	OBJECT_ATTACHED_OBJECTS_ARB                                           = 0x8B85
	ACTIVE_UNIFORMS                                                       = 0x8B86
	OBJECT_ACTIVE_UNIFORMS_ARB                                            = 0x8B86
	ACTIVE_UNIFORM_MAX_LENGTH                                             = 0x8B87
	OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB                                  = 0x8B87
	SHADER_SOURCE_LENGTH                                                  = 0x8B88
	OBJECT_SHADER_SOURCE_LENGTH_ARB                                       = 0x8B88
	ACTIVE_ATTRIBUTES                                                     = 0x8B89
	OBJECT_ACTIVE_ATTRIBUTES_ARB                                          = 0x8B89
	ACTIVE_ATTRIBUTE_MAX_LENGTH                                           = 0x8B8A
	OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB                                = 0x8B8A
	FRAGMENT_SHADER_DERIVATIVE_HINT                                       = 0x8B8B
	FRAGMENT_SHADER_DERIVATIVE_HINT_ARB                                   = 0x8B8B
	FRAGMENT_SHADER_DERIVATIVE_HINT_OES                                   = 0x8B8B
	SHADING_LANGUAGE_VERSION                                              = 0x8B8C
	SHADING_LANGUAGE_VERSION_ARB                                          = 0x8B8C
	CURRENT_PROGRAM                                                       = 0x8B8D
	ACTIVE_PROGRAM_EXT                                                    = 0x8B8D
	PALETTE4_RGB8_OES                                                     = 0x8B90
	PALETTE4_RGBA8_OES                                                    = 0x8B91
	PALETTE4_R5_G6_B5_OES                                                 = 0x8B92
	PALETTE4_RGBA4_OES                                                    = 0x8B93
	PALETTE4_RGB5_A1_OES                                                  = 0x8B94
	PALETTE8_RGB8_OES                                                     = 0x8B95
	PALETTE8_RGBA8_OES                                                    = 0x8B96
	PALETTE8_R5_G6_B5_OES                                                 = 0x8B97
	PALETTE8_RGBA4_OES                                                    = 0x8B98
	PALETTE8_RGB5_A1_OES                                                  = 0x8B99
	IMPLEMENTATION_COLOR_READ_TYPE                                        = 0x8B9A
	IMPLEMENTATION_COLOR_READ_TYPE_OES                                    = 0x8B9A
	IMPLEMENTATION_COLOR_READ_FORMAT                                      = 0x8B9B
	IMPLEMENTATION_COLOR_READ_FORMAT_OES                                  = 0x8B9B
	POINT_SIZE_ARRAY_OES                                                  = 0x8B9C
	TEXTURE_CROP_RECT_OES                                                 = 0x8B9D
	MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES                                 = 0x8B9E
	POINT_SIZE_ARRAY_BUFFER_BINDING_OES                                   = 0x8B9F
	FRAGMENT_PROGRAM_POSITION_MESA                                        = 0x8BB0
	FRAGMENT_PROGRAM_CALLBACK_MESA                                        = 0x8BB1
	FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA                                   = 0x8BB2
	FRAGMENT_PROGRAM_CALLBACK_DATA_MESA                                   = 0x8BB3
	VERTEX_PROGRAM_POSITION_MESA                                          = 0x8BB4
	VERTEX_PROGRAM_CALLBACK_MESA                                          = 0x8BB5
	VERTEX_PROGRAM_CALLBACK_FUNC_MESA                                     = 0x8BB6
	VERTEX_PROGRAM_CALLBACK_DATA_MESA                                     = 0x8BB7
	TILE_RASTER_ORDER_FIXED_MESA                                          = 0x8BB8
	TILE_RASTER_ORDER_INCREASING_X_MESA                                   = 0x8BB9
	TILE_RASTER_ORDER_INCREASING_Y_MESA                                   = 0x8BBA
	FRAMEBUFFER_FLIP_Y_MESA                                               = 0x8BBB
	FRAMEBUFFER_FLIP_X_MESA                                               = 0x8BBC
	FRAMEBUFFER_SWAP_XY_MESA                                              = 0x8BBD
	COUNTER_TYPE_AMD                                                      = 0x8BC0
	COUNTER_RANGE_AMD                                                     = 0x8BC1
	UNSIGNED_INT64_AMD                                                    = 0x8BC2
	PERCENTAGE_AMD                                                        = 0x8BC3
	PERFMON_RESULT_AVAILABLE_AMD                                          = 0x8BC4
	PERFMON_RESULT_SIZE_AMD                                               = 0x8BC5
	PERFMON_RESULT_AMD                                                    = 0x8BC6
	TEXTURE_WIDTH_QCOM                                                    = 0x8BD2
	TEXTURE_HEIGHT_QCOM                                                   = 0x8BD3
	TEXTURE_DEPTH_QCOM                                                    = 0x8BD4
	TEXTURE_INTERNAL_FORMAT_QCOM                                          = 0x8BD5
	TEXTURE_FORMAT_QCOM                                                   = 0x8BD6
	TEXTURE_TYPE_QCOM                                                     = 0x8BD7
	TEXTURE_IMAGE_VALID_QCOM                                              = 0x8BD8
	TEXTURE_NUM_LEVELS_QCOM                                               = 0x8BD9
	TEXTURE_TARGET_QCOM                                                   = 0x8BDA
	TEXTURE_OBJECT_VALID_QCOM                                             = 0x8BDB
	STATE_RESTORE                                                         = 0x8BDC
	SAMPLER_EXTERNAL_2D_Y2Y_EXT                                           = 0x8BE7
	TEXTURE_PROTECTED_EXT                                                 = 0x8BFA
	TEXTURE_FOVEATED_FEATURE_BITS_QCOM                                    = 0x8BFB
	TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM                               = 0x8BFC
	TEXTURE_FOVEATED_FEATURE_QUERY_QCOM                                   = 0x8BFD
	TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM                          = 0x8BFE
	FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM                                 = 0x8BFF
	COMPRESSED_RGB_PVRTC_4BPPV1_IMG                                       = 0x8C00
	COMPRESSED_RGB_PVRTC_2BPPV1_IMG                                       = 0x8C01
	COMPRESSED_RGBA_PVRTC_4BPPV1_IMG                                      = 0x8C02
	COMPRESSED_RGBA_PVRTC_2BPPV1_IMG                                      = 0x8C03
	MODULATE_COLOR_IMG                                                    = 0x8C04
	RECIP_ADD_SIGNED_ALPHA_IMG                                            = 0x8C05
	TEXTURE_ALPHA_MODULATE_IMG                                            = 0x8C06
	FACTOR_ALPHA_MODULATE_IMG                                             = 0x8C07
	FRAGMENT_ALPHA_MODULATE_IMG                                           = 0x8C08
	ADD_BLEND_IMG                                                         = 0x8C09
	SGX_BINARY_IMG                                                        = 0x8C0A
	TEXTURE_RED_TYPE                                                      = 0x8C10
	TEXTURE_RED_TYPE_ARB                                                  = 0x8C10
	TEXTURE_GREEN_TYPE                                                    = 0x8C11
	TEXTURE_GREEN_TYPE_ARB                                                = 0x8C11
	TEXTURE_BLUE_TYPE                                                     = 0x8C12
	TEXTURE_BLUE_TYPE_ARB                                                 = 0x8C12
	TEXTURE_ALPHA_TYPE                                                    = 0x8C13
	TEXTURE_ALPHA_TYPE_ARB                                                = 0x8C13
	TEXTURE_LUMINANCE_TYPE                                                = 0x8C14
	TEXTURE_LUMINANCE_TYPE_ARB                                            = 0x8C14
	TEXTURE_INTENSITY_TYPE                                                = 0x8C15
	TEXTURE_INTENSITY_TYPE_ARB                                            = 0x8C15
	TEXTURE_DEPTH_TYPE                                                    = 0x8C16
	TEXTURE_DEPTH_TYPE_ARB                                                = 0x8C16
	UNSIGNED_NORMALIZED                                                   = 0x8C17
	UNSIGNED_NORMALIZED_ARB                                               = 0x8C17
	UNSIGNED_NORMALIZED_EXT                                               = 0x8C17
	TEXTURE_1D_ARRAY                                                      = 0x8C18
	TEXTURE_1D_ARRAY_EXT                                                  = 0x8C18
	PROXY_TEXTURE_1D_ARRAY                                                = 0x8C19
	PROXY_TEXTURE_1D_ARRAY_EXT                                            = 0x8C19
	TEXTURE_2D_ARRAY                                                      = 0x8C1A
	TEXTURE_2D_ARRAY_EXT                                                  = 0x8C1A
	PROXY_TEXTURE_2D_ARRAY                                                = 0x8C1B
	PROXY_TEXTURE_2D_ARRAY_EXT                                            = 0x8C1B
	TEXTURE_BINDING_1D_ARRAY                                              = 0x8C1C
	TEXTURE_BINDING_1D_ARRAY_EXT                                          = 0x8C1C
	TEXTURE_BINDING_2D_ARRAY                                              = 0x8C1D
	TEXTURE_BINDING_2D_ARRAY_EXT                                          = 0x8C1D
	GEOMETRY_PROGRAM_NV                                                   = 0x8C26
	MAX_PROGRAM_OUTPUT_VERTICES_NV                                        = 0x8C27
	MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV                                = 0x8C28
	MAX_GEOMETRY_TEXTURE_IMAGE_UNITS                                      = 0x8C29
	MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB                                  = 0x8C29
	MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT                                  = 0x8C29
	MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES                                  = 0x8C29
	TEXTURE_BUFFER                                                        = 0x8C2A
	TEXTURE_BUFFER_ARB                                                    = 0x8C2A
	TEXTURE_BUFFER_EXT                                                    = 0x8C2A
	TEXTURE_BUFFER_OES                                                    = 0x8C2A
	TEXTURE_BUFFER_BINDING                                                = 0x8C2A
	TEXTURE_BUFFER_BINDING_EXT                                            = 0x8C2A
	TEXTURE_BUFFER_BINDING_OES                                            = 0x8C2A
	MAX_TEXTURE_BUFFER_SIZE                                               = 0x8C2B
	MAX_TEXTURE_BUFFER_SIZE_ARB                                           = 0x8C2B
	MAX_TEXTURE_BUFFER_SIZE_EXT                                           = 0x8C2B
	MAX_TEXTURE_BUFFER_SIZE_OES                                           = 0x8C2B
	TEXTURE_BINDING_BUFFER                                                = 0x8C2C
	TEXTURE_BINDING_BUFFER_ARB                                            = 0x8C2C
	TEXTURE_BINDING_BUFFER_EXT                                            = 0x8C2C
	TEXTURE_BINDING_BUFFER_OES                                            = 0x8C2C
	TEXTURE_BUFFER_DATA_STORE_BINDING                                     = 0x8C2D
	TEXTURE_BUFFER_DATA_STORE_BINDING_ARB                                 = 0x8C2D
	TEXTURE_BUFFER_DATA_STORE_BINDING_EXT                                 = 0x8C2D
	TEXTURE_BUFFER_DATA_STORE_BINDING_OES                                 = 0x8C2D
	TEXTURE_BUFFER_FORMAT_ARB                                             = 0x8C2E
	TEXTURE_BUFFER_FORMAT_EXT                                             = 0x8C2E
	ANY_SAMPLES_PASSED                                                    = 0x8C2F
	ANY_SAMPLES_PASSED_EXT                                                = 0x8C2F
	SAMPLE_SHADING                                                        = 0x8C36
	SAMPLE_SHADING_ARB                                                    = 0x8C36
	SAMPLE_SHADING_OES                                                    = 0x8C36
	MIN_SAMPLE_SHADING_VALUE                                              = 0x8C37
	MIN_SAMPLE_SHADING_VALUE_ARB                                          = 0x8C37
	MIN_SAMPLE_SHADING_VALUE_OES                                          = 0x8C37
	R11F_G11F_B10F                                                        = 0x8C3A
	R11F_G11F_B10F_APPLE                                                  = 0x8C3A
	R11F_G11F_B10F_EXT                                                    = 0x8C3A
	UNSIGNED_INT_10F_11F_11F_REV                                          = 0x8C3B
	UNSIGNED_INT_10F_11F_11F_REV_APPLE                                    = 0x8C3B
	UNSIGNED_INT_10F_11F_11F_REV_EXT                                      = 0x8C3B
	RGBA_SIGNED_COMPONENTS_EXT                                            = 0x8C3C
	RGB9_E5                                                               = 0x8C3D
	RGB9_E5_APPLE                                                         = 0x8C3D
	RGB9_E5_EXT                                                           = 0x8C3D
	UNSIGNED_INT_5_9_9_9_REV                                              = 0x8C3E
	UNSIGNED_INT_5_9_9_9_REV_APPLE                                        = 0x8C3E
	UNSIGNED_INT_5_9_9_9_REV_EXT                                          = 0x8C3E
	TEXTURE_SHARED_SIZE                                                   = 0x8C3F
	TEXTURE_SHARED_SIZE_EXT                                               = 0x8C3F
	SRGB                                                                  = 0x8C40
	SRGB_EXT                                                              = 0x8C40
	SRGB8                                                                 = 0x8C41
	SRGB8_EXT                                                             = 0x8C41
	SRGB8_NV                                                              = 0x8C41
	SRGB_ALPHA                                                            = 0x8C42
	SRGB_ALPHA_EXT                                                        = 0x8C42
	SRGB8_ALPHA8                                                          = 0x8C43
	SRGB8_ALPHA8_EXT                                                      = 0x8C43
	SLUMINANCE_ALPHA                                                      = 0x8C44
	SLUMINANCE_ALPHA_EXT                                                  = 0x8C44
	SLUMINANCE_ALPHA_NV                                                   = 0x8C44
	SLUMINANCE8_ALPHA8                                                    = 0x8C45
	SLUMINANCE8_ALPHA8_EXT                                                = 0x8C45
	SLUMINANCE8_ALPHA8_NV                                                 = 0x8C45
	SLUMINANCE                                                            = 0x8C46
	SLUMINANCE_EXT                                                        = 0x8C46
	SLUMINANCE_NV                                                         = 0x8C46
	SLUMINANCE8                                                           = 0x8C47
	SLUMINANCE8_EXT                                                       = 0x8C47
	SLUMINANCE8_NV                                                        = 0x8C47
	COMPRESSED_SRGB                                                       = 0x8C48
	COMPRESSED_SRGB_EXT                                                   = 0x8C48
	COMPRESSED_SRGB_ALPHA                                                 = 0x8C49
	COMPRESSED_SRGB_ALPHA_EXT                                             = 0x8C49
	COMPRESSED_SLUMINANCE                                                 = 0x8C4A
	COMPRESSED_SLUMINANCE_EXT                                             = 0x8C4A
	COMPRESSED_SLUMINANCE_ALPHA                                           = 0x8C4B
	COMPRESSED_SLUMINANCE_ALPHA_EXT                                       = 0x8C4B
	COMPRESSED_SRGB_S3TC_DXT1_EXT                                         = 0x8C4C
	COMPRESSED_SRGB_S3TC_DXT1_NV                                          = 0x8C4C
	COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT                                   = 0x8C4D
	COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV                                    = 0x8C4D
	COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT                                   = 0x8C4E
	COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV                                    = 0x8C4E
	COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT                                   = 0x8C4F
	COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV                                    = 0x8C4F
	COMPRESSED_LUMINANCE_LATC1_EXT                                        = 0x8C70
	COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT                                 = 0x8C71
	COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT                                  = 0x8C72
	COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT                           = 0x8C73
	TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV                              = 0x8C74
	TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV                           = 0x8C75
	TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH                                 = 0x8C76
	TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT                             = 0x8C76
	BACK_PRIMARY_COLOR_NV                                                 = 0x8C77
	BACK_SECONDARY_COLOR_NV                                               = 0x8C78
	TEXTURE_COORD_NV                                                      = 0x8C79
	CLIP_DISTANCE_NV                                                      = 0x8C7A
	VERTEX_ID_NV                                                          = 0x8C7B
	PRIMITIVE_ID_NV                                                       = 0x8C7C
	GENERIC_ATTRIB_NV                                                     = 0x8C7D
	TRANSFORM_FEEDBACK_ATTRIBS_NV                                         = 0x8C7E
	TRANSFORM_FEEDBACK_BUFFER_MODE                                        = 0x8C7F
	TRANSFORM_FEEDBACK_BUFFER_MODE_EXT                                    = 0x8C7F
	TRANSFORM_FEEDBACK_BUFFER_MODE_NV                                     = 0x8C7F
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS                            = 0x8C80
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT                        = 0x8C80
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV                         = 0x8C80
	ACTIVE_VARYINGS_NV                                                    = 0x8C81
	ACTIVE_VARYING_MAX_LENGTH_NV                                          = 0x8C82
	TRANSFORM_FEEDBACK_VARYINGS                                           = 0x8C83
	TRANSFORM_FEEDBACK_VARYINGS_EXT                                       = 0x8C83
	TRANSFORM_FEEDBACK_VARYINGS_NV                                        = 0x8C83
	TRANSFORM_FEEDBACK_BUFFER_START                                       = 0x8C84
	TRANSFORM_FEEDBACK_BUFFER_START_EXT                                   = 0x8C84
	TRANSFORM_FEEDBACK_BUFFER_START_NV                                    = 0x8C84
	TRANSFORM_FEEDBACK_BUFFER_SIZE                                        = 0x8C85
	TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT                                    = 0x8C85
	TRANSFORM_FEEDBACK_BUFFER_SIZE_NV                                     = 0x8C85
	TRANSFORM_FEEDBACK_RECORD_NV                                          = 0x8C86
	PRIMITIVES_GENERATED                                                  = 0x8C87
	PRIMITIVES_GENERATED_EXT                                              = 0x8C87
	PRIMITIVES_GENERATED_NV                                               = 0x8C87
	PRIMITIVES_GENERATED_OES                                              = 0x8C87
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN                                 = 0x8C88
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT                             = 0x8C88
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV                              = 0x8C88
	RASTERIZER_DISCARD                                                    = 0x8C89
	RASTERIZER_DISCARD_EXT                                                = 0x8C89
	RASTERIZER_DISCARD_NV                                                 = 0x8C89
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS                         = 0x8C8A
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT                     = 0x8C8A
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV                      = 0x8C8A
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS                               = 0x8C8B
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT                           = 0x8C8B
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV                            = 0x8C8B
	INTERLEAVED_ATTRIBS                                                   = 0x8C8C
	INTERLEAVED_ATTRIBS_EXT                                               = 0x8C8C
	INTERLEAVED_ATTRIBS_NV                                                = 0x8C8C
	SEPARATE_ATTRIBS                                                      = 0x8C8D
	SEPARATE_ATTRIBS_EXT                                                  = 0x8C8D
	SEPARATE_ATTRIBS_NV                                                   = 0x8C8D
	TRANSFORM_FEEDBACK_BUFFER                                             = 0x8C8E
	TRANSFORM_FEEDBACK_BUFFER_EXT                                         = 0x8C8E
	TRANSFORM_FEEDBACK_BUFFER_NV                                          = 0x8C8E
	TRANSFORM_FEEDBACK_BUFFER_BINDING                                     = 0x8C8F
	TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT                                 = 0x8C8F
	TRANSFORM_FEEDBACK_BUFFER_BINDING_NV                                  = 0x8C8F
	MOTION_ESTIMATION_SEARCH_BLOCK_X_QCOM                                 = 0x8C90
	MOTION_ESTIMATION_SEARCH_BLOCK_Y_QCOM                                 = 0x8C91
	ATC_RGB_AMD                                                           = 0x8C92
	ATC_RGBA_EXPLICIT_ALPHA_AMD                                           = 0x8C93
	POINT_SPRITE_COORD_ORIGIN                                             = 0x8CA0
	LOWER_LEFT                                                            = 0x8CA1
	LOWER_LEFT_EXT                                                        = 0x8CA1
	UPPER_LEFT                                                            = 0x8CA2
	UPPER_LEFT_EXT                                                        = 0x8CA2
	STENCIL_BACK_REF                                                      = 0x8CA3
	STENCIL_BACK_VALUE_MASK                                               = 0x8CA4
	STENCIL_BACK_WRITEMASK                                                = 0x8CA5
	DRAW_FRAMEBUFFER_BINDING                                              = 0x8CA6
	DRAW_FRAMEBUFFER_BINDING_ANGLE                                        = 0x8CA6
	DRAW_FRAMEBUFFER_BINDING_APPLE                                        = 0x8CA6
	DRAW_FRAMEBUFFER_BINDING_EXT                                          = 0x8CA6
	DRAW_FRAMEBUFFER_BINDING_NV                                           = 0x8CA6
	FRAMEBUFFER_BINDING                                                   = 0x8CA6
	FRAMEBUFFER_BINDING_ANGLE                                             = 0x8CA6
	FRAMEBUFFER_BINDING_EXT                                               = 0x8CA6
	FRAMEBUFFER_BINDING_OES                                               = 0x8CA6
	RENDERBUFFER_BINDING                                                  = 0x8CA7
	RENDERBUFFER_BINDING_ANGLE                                            = 0x8CA7
	RENDERBUFFER_BINDING_EXT                                              = 0x8CA7
	RENDERBUFFER_BINDING_OES                                              = 0x8CA7
	READ_FRAMEBUFFER                                                      = 0x8CA8
	READ_FRAMEBUFFER_ANGLE                                                = 0x8CA8
	READ_FRAMEBUFFER_APPLE                                                = 0x8CA8
	READ_FRAMEBUFFER_EXT                                                  = 0x8CA8
	READ_FRAMEBUFFER_NV                                                   = 0x8CA8
	DRAW_FRAMEBUFFER                                                      = 0x8CA9
	DRAW_FRAMEBUFFER_ANGLE                                                = 0x8CA9
	DRAW_FRAMEBUFFER_APPLE                                                = 0x8CA9
	DRAW_FRAMEBUFFER_EXT                                                  = 0x8CA9
	DRAW_FRAMEBUFFER_NV                                                   = 0x8CA9
	READ_FRAMEBUFFER_BINDING                                              = 0x8CAA
	READ_FRAMEBUFFER_BINDING_ANGLE                                        = 0x8CAA
	READ_FRAMEBUFFER_BINDING_APPLE                                        = 0x8CAA
	READ_FRAMEBUFFER_BINDING_EXT                                          = 0x8CAA
	READ_FRAMEBUFFER_BINDING_NV                                           = 0x8CAA
	RENDERBUFFER_COVERAGE_SAMPLES_NV                                      = 0x8CAB
	RENDERBUFFER_SAMPLES                                                  = 0x8CAB
	RENDERBUFFER_SAMPLES_ANGLE                                            = 0x8CAB
	RENDERBUFFER_SAMPLES_APPLE                                            = 0x8CAB
	RENDERBUFFER_SAMPLES_EXT                                              = 0x8CAB
	RENDERBUFFER_SAMPLES_NV                                               = 0x8CAB
	DEPTH_COMPONENT32F                                                    = 0x8CAC
	DEPTH32F_STENCIL8                                                     = 0x8CAD
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE                                    = 0x8CD0
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT                                = 0x8CD0
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES                                = 0x8CD0
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME                                    = 0x8CD1
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT                                = 0x8CD1
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES                                = 0x8CD1
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL                                  = 0x8CD2
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT                              = 0x8CD2
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES                              = 0x8CD2
	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE                          = 0x8CD3
	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT                      = 0x8CD3
	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES                      = 0x8CD3
	FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT                         = 0x8CD4
	FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES                         = 0x8CD4
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER                                  = 0x8CD4
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT                              = 0x8CD4
	FRAMEBUFFER_COMPLETE                                                  = 0x8CD5
	FRAMEBUFFER_COMPLETE_EXT                                              = 0x8CD5
	FRAMEBUFFER_COMPLETE_OES                                              = 0x8CD5
	FRAMEBUFFER_INCOMPLETE_ATTACHMENT                                     = 0x8CD6
	FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT                                 = 0x8CD6
	FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES                                 = 0x8CD6
	FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT                             = 0x8CD7
	FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT                         = 0x8CD7
	FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES                         = 0x8CD7
	FRAMEBUFFER_INCOMPLETE_DIMENSIONS                                     = 0x8CD9
	FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT                                 = 0x8CD9
	FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES                                 = 0x8CD9
	FRAMEBUFFER_INCOMPLETE_FORMATS_EXT                                    = 0x8CDA
	FRAMEBUFFER_INCOMPLETE_FORMATS_OES                                    = 0x8CDA
	FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER                                    = 0x8CDB
	FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT                                = 0x8CDB
	FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES                                = 0x8CDB
	FRAMEBUFFER_INCOMPLETE_READ_BUFFER                                    = 0x8CDC
	FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT                                = 0x8CDC
	FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES                                = 0x8CDC
	FRAMEBUFFER_UNSUPPORTED                                               = 0x8CDD
	FRAMEBUFFER_UNSUPPORTED_EXT                                           = 0x8CDD
	FRAMEBUFFER_UNSUPPORTED_OES                                           = 0x8CDD
	MAX_COLOR_ATTACHMENTS                                                 = 0x8CDF
	MAX_COLOR_ATTACHMENTS_EXT                                             = 0x8CDF
	MAX_COLOR_ATTACHMENTS_NV                                              = 0x8CDF
	COLOR_ATTACHMENT0                                                     = 0x8CE0
	COLOR_ATTACHMENT0_EXT                                                 = 0x8CE0
	COLOR_ATTACHMENT0_NV                                                  = 0x8CE0
	COLOR_ATTACHMENT0_OES                                                 = 0x8CE0
	COLOR_ATTACHMENT1                                                     = 0x8CE1
	COLOR_ATTACHMENT1_EXT                                                 = 0x8CE1
	COLOR_ATTACHMENT1_NV                                                  = 0x8CE1
	COLOR_ATTACHMENT2                                                     = 0x8CE2
	COLOR_ATTACHMENT2_EXT                                                 = 0x8CE2
	COLOR_ATTACHMENT2_NV                                                  = 0x8CE2
	COLOR_ATTACHMENT3                                                     = 0x8CE3
	COLOR_ATTACHMENT3_EXT                                                 = 0x8CE3
	COLOR_ATTACHMENT3_NV                                                  = 0x8CE3
	COLOR_ATTACHMENT4                                                     = 0x8CE4
	COLOR_ATTACHMENT4_EXT                                                 = 0x8CE4
	COLOR_ATTACHMENT4_NV                                                  = 0x8CE4
	COLOR_ATTACHMENT5                                                     = 0x8CE5
	COLOR_ATTACHMENT5_EXT                                                 = 0x8CE5
	COLOR_ATTACHMENT5_NV                                                  = 0x8CE5
	COLOR_ATTACHMENT6                                                     = 0x8CE6
	COLOR_ATTACHMENT6_EXT                                                 = 0x8CE6
	COLOR_ATTACHMENT6_NV                                                  = 0x8CE6
	COLOR_ATTACHMENT7                                                     = 0x8CE7
	COLOR_ATTACHMENT7_EXT                                                 = 0x8CE7
	COLOR_ATTACHMENT7_NV                                                  = 0x8CE7
	COLOR_ATTACHMENT8                                                     = 0x8CE8
	COLOR_ATTACHMENT8_EXT                                                 = 0x8CE8
	COLOR_ATTACHMENT8_NV                                                  = 0x8CE8
	COLOR_ATTACHMENT9                                                     = 0x8CE9
	COLOR_ATTACHMENT9_EXT                                                 = 0x8CE9
	COLOR_ATTACHMENT9_NV                                                  = 0x8CE9
	COLOR_ATTACHMENT10                                                    = 0x8CEA
	COLOR_ATTACHMENT10_EXT                                                = 0x8CEA
	COLOR_ATTACHMENT10_NV                                                 = 0x8CEA
	COLOR_ATTACHMENT11                                                    = 0x8CEB
	COLOR_ATTACHMENT11_EXT                                                = 0x8CEB
	COLOR_ATTACHMENT11_NV                                                 = 0x8CEB
	COLOR_ATTACHMENT12                                                    = 0x8CEC
	COLOR_ATTACHMENT12_EXT                                                = 0x8CEC
	COLOR_ATTACHMENT12_NV                                                 = 0x8CEC
	COLOR_ATTACHMENT13                                                    = 0x8CED
	COLOR_ATTACHMENT13_EXT                                                = 0x8CED
	COLOR_ATTACHMENT13_NV                                                 = 0x8CED
	COLOR_ATTACHMENT14                                                    = 0x8CEE
	COLOR_ATTACHMENT14_EXT                                                = 0x8CEE
	COLOR_ATTACHMENT14_NV                                                 = 0x8CEE
	COLOR_ATTACHMENT15                                                    = 0x8CEF
	COLOR_ATTACHMENT15_EXT                                                = 0x8CEF
	COLOR_ATTACHMENT15_NV                                                 = 0x8CEF
	COLOR_ATTACHMENT16                                                    = 0x8CF0
	COLOR_ATTACHMENT17                                                    = 0x8CF1
	COLOR_ATTACHMENT18                                                    = 0x8CF2
	COLOR_ATTACHMENT19                                                    = 0x8CF3
	COLOR_ATTACHMENT20                                                    = 0x8CF4
	COLOR_ATTACHMENT21                                                    = 0x8CF5
	COLOR_ATTACHMENT22                                                    = 0x8CF6
	COLOR_ATTACHMENT23                                                    = 0x8CF7
	COLOR_ATTACHMENT24                                                    = 0x8CF8
	COLOR_ATTACHMENT25                                                    = 0x8CF9
	COLOR_ATTACHMENT26                                                    = 0x8CFA
	COLOR_ATTACHMENT27                                                    = 0x8CFB
	COLOR_ATTACHMENT28                                                    = 0x8CFC
	COLOR_ATTACHMENT29                                                    = 0x8CFD
	COLOR_ATTACHMENT30                                                    = 0x8CFE
	COLOR_ATTACHMENT31                                                    = 0x8CFF
	DEPTH_ATTACHMENT                                                      = 0x8D00
	DEPTH_ATTACHMENT_EXT                                                  = 0x8D00
	DEPTH_ATTACHMENT_OES                                                  = 0x8D00
	STENCIL_ATTACHMENT                                                    = 0x8D20
	STENCIL_ATTACHMENT_EXT                                                = 0x8D20
	STENCIL_ATTACHMENT_OES                                                = 0x8D20
	FRAMEBUFFER                                                           = 0x8D40
	FRAMEBUFFER_EXT                                                       = 0x8D40
	FRAMEBUFFER_OES                                                       = 0x8D40
	RENDERBUFFER                                                          = 0x8D41
	RENDERBUFFER_EXT                                                      = 0x8D41
	RENDERBUFFER_OES                                                      = 0x8D41
	RENDERBUFFER_WIDTH                                                    = 0x8D42
	RENDERBUFFER_WIDTH_EXT                                                = 0x8D42
	RENDERBUFFER_WIDTH_OES                                                = 0x8D42
	RENDERBUFFER_HEIGHT                                                   = 0x8D43
	RENDERBUFFER_HEIGHT_EXT                                               = 0x8D43
	RENDERBUFFER_HEIGHT_OES                                               = 0x8D43
	RENDERBUFFER_INTERNAL_FORMAT                                          = 0x8D44
	RENDERBUFFER_INTERNAL_FORMAT_EXT                                      = 0x8D44
	RENDERBUFFER_INTERNAL_FORMAT_OES                                      = 0x8D44
	STENCIL_INDEX1                                                        = 0x8D46
	STENCIL_INDEX1_EXT                                                    = 0x8D46
	STENCIL_INDEX1_OES                                                    = 0x8D46
	STENCIL_INDEX4                                                        = 0x8D47
	STENCIL_INDEX4_EXT                                                    = 0x8D47
	STENCIL_INDEX4_OES                                                    = 0x8D47
	STENCIL_INDEX8                                                        = 0x8D48
	STENCIL_INDEX8_EXT                                                    = 0x8D48
	STENCIL_INDEX8_OES                                                    = 0x8D48
	STENCIL_INDEX16                                                       = 0x8D49
	STENCIL_INDEX16_EXT                                                   = 0x8D49
	RENDERBUFFER_RED_SIZE                                                 = 0x8D50
	RENDERBUFFER_RED_SIZE_EXT                                             = 0x8D50
	RENDERBUFFER_RED_SIZE_OES                                             = 0x8D50
	RENDERBUFFER_GREEN_SIZE                                               = 0x8D51
	RENDERBUFFER_GREEN_SIZE_EXT                                           = 0x8D51
	RENDERBUFFER_GREEN_SIZE_OES                                           = 0x8D51
	RENDERBUFFER_BLUE_SIZE                                                = 0x8D52
	RENDERBUFFER_BLUE_SIZE_EXT                                            = 0x8D52
	RENDERBUFFER_BLUE_SIZE_OES                                            = 0x8D52
	RENDERBUFFER_ALPHA_SIZE                                               = 0x8D53
	RENDERBUFFER_ALPHA_SIZE_EXT                                           = 0x8D53
	RENDERBUFFER_ALPHA_SIZE_OES                                           = 0x8D53
	RENDERBUFFER_DEPTH_SIZE                                               = 0x8D54
	RENDERBUFFER_DEPTH_SIZE_EXT                                           = 0x8D54
	RENDERBUFFER_DEPTH_SIZE_OES                                           = 0x8D54
	RENDERBUFFER_STENCIL_SIZE                                             = 0x8D55
	RENDERBUFFER_STENCIL_SIZE_EXT                                         = 0x8D55
	RENDERBUFFER_STENCIL_SIZE_OES                                         = 0x8D55
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE                                    = 0x8D56
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE                              = 0x8D56
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE                              = 0x8D56
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT                                = 0x8D56
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV                                 = 0x8D56
	MAX_SAMPLES                                                           = 0x8D57
	MAX_SAMPLES_ANGLE                                                     = 0x8D57
	MAX_SAMPLES_APPLE                                                     = 0x8D57
	MAX_SAMPLES_EXT                                                       = 0x8D57
	MAX_SAMPLES_NV                                                        = 0x8D57
	TEXTURE_GEN_STR_OES                                                   = 0x8D60
	HALF_FLOAT_OES                                                        = 0x8D61
	RGB565_OES                                                            = 0x8D62
	RGB565                                                                = 0x8D62
	ETC1_RGB8_OES                                                         = 0x8D64
	TEXTURE_EXTERNAL_OES                                                  = 0x8D65
	SAMPLER_EXTERNAL_OES                                                  = 0x8D66
	TEXTURE_BINDING_EXTERNAL_OES                                          = 0x8D67
	REQUIRED_TEXTURE_IMAGE_UNITS_OES                                      = 0x8D68
	PRIMITIVE_RESTART_FIXED_INDEX                                         = 0x8D69
	ANY_SAMPLES_PASSED_CONSERVATIVE                                       = 0x8D6A
	ANY_SAMPLES_PASSED_CONSERVATIVE_EXT                                   = 0x8D6A
	MAX_ELEMENT_INDEX                                                     = 0x8D6B
	FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT                            = 0x8D6C
	RGBA32UI                                                              = 0x8D70
	RGBA32UI_EXT                                                          = 0x8D70
	RGB32UI                                                               = 0x8D71
	RGB32UI_EXT                                                           = 0x8D71
	ALPHA32UI_EXT                                                         = 0x8D72
	INTENSITY32UI_EXT                                                     = 0x8D73
	LUMINANCE32UI_EXT                                                     = 0x8D74
	LUMINANCE_ALPHA32UI_EXT                                               = 0x8D75
	RGBA16UI                                                              = 0x8D76
	RGBA16UI_EXT                                                          = 0x8D76
	RGB16UI                                                               = 0x8D77
	RGB16UI_EXT                                                           = 0x8D77
	ALPHA16UI_EXT                                                         = 0x8D78
	INTENSITY16UI_EXT                                                     = 0x8D79
	LUMINANCE16UI_EXT                                                     = 0x8D7A
	LUMINANCE_ALPHA16UI_EXT                                               = 0x8D7B
	RGBA8UI                                                               = 0x8D7C
	RGBA8UI_EXT                                                           = 0x8D7C
	RGB8UI                                                                = 0x8D7D
	RGB8UI_EXT                                                            = 0x8D7D
	ALPHA8UI_EXT                                                          = 0x8D7E
	INTENSITY8UI_EXT                                                      = 0x8D7F
	LUMINANCE8UI_EXT                                                      = 0x8D80
	LUMINANCE_ALPHA8UI_EXT                                                = 0x8D81
	RGBA32I                                                               = 0x8D82
	RGBA32I_EXT                                                           = 0x8D82
	RGB32I                                                                = 0x8D83
	RGB32I_EXT                                                            = 0x8D83
	ALPHA32I_EXT                                                          = 0x8D84
	INTENSITY32I_EXT                                                      = 0x8D85
	LUMINANCE32I_EXT                                                      = 0x8D86
	LUMINANCE_ALPHA32I_EXT                                                = 0x8D87
	RGBA16I                                                               = 0x8D88
	RGBA16I_EXT                                                           = 0x8D88
	RGB16I                                                                = 0x8D89
	RGB16I_EXT                                                            = 0x8D89
	ALPHA16I_EXT                                                          = 0x8D8A
	INTENSITY16I_EXT                                                      = 0x8D8B
	LUMINANCE16I_EXT                                                      = 0x8D8C
	LUMINANCE_ALPHA16I_EXT                                                = 0x8D8D
	RGBA8I                                                                = 0x8D8E
	RGBA8I_EXT                                                            = 0x8D8E
	RGB8I                                                                 = 0x8D8F
	RGB8I_EXT                                                             = 0x8D8F
	ALPHA8I_EXT                                                           = 0x8D90
	INTENSITY8I_EXT                                                       = 0x8D91
	LUMINANCE8I_EXT                                                       = 0x8D92
	LUMINANCE_ALPHA8I_EXT                                                 = 0x8D93
	RED_INTEGER                                                           = 0x8D94
	RED_INTEGER_EXT                                                       = 0x8D94
	GREEN_INTEGER                                                         = 0x8D95
	GREEN_INTEGER_EXT                                                     = 0x8D95
	BLUE_INTEGER                                                          = 0x8D96
	BLUE_INTEGER_EXT                                                      = 0x8D96
	ALPHA_INTEGER                                                         = 0x8D97
	ALPHA_INTEGER_EXT                                                     = 0x8D97
	RGB_INTEGER                                                           = 0x8D98
	RGB_INTEGER_EXT                                                       = 0x8D98
	RGBA_INTEGER                                                          = 0x8D99
	RGBA_INTEGER_EXT                                                      = 0x8D99
	BGR_INTEGER                                                           = 0x8D9A
	BGR_INTEGER_EXT                                                       = 0x8D9A
	BGRA_INTEGER                                                          = 0x8D9B
	BGRA_INTEGER_EXT                                                      = 0x8D9B
	LUMINANCE_INTEGER_EXT                                                 = 0x8D9C
	LUMINANCE_ALPHA_INTEGER_EXT                                           = 0x8D9D
	RGBA_INTEGER_MODE_EXT                                                 = 0x8D9E
	INT_2_10_10_10_REV                                                    = 0x8D9F
	MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV                              = 0x8DA0
	MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV                                  = 0x8DA1
	VERTEX_PROGRAM_PARAMETER_BUFFER_NV                                    = 0x8DA2
	GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV                                  = 0x8DA3
	FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV                                  = 0x8DA4
	MAX_PROGRAM_GENERIC_ATTRIBS_NV                                        = 0x8DA5
	MAX_PROGRAM_GENERIC_RESULTS_NV                                        = 0x8DA6
	FRAMEBUFFER_ATTACHMENT_LAYERED                                        = 0x8DA7
	FRAMEBUFFER_ATTACHMENT_LAYERED_ARB                                    = 0x8DA7
	FRAMEBUFFER_ATTACHMENT_LAYERED_EXT                                    = 0x8DA7
	FRAMEBUFFER_ATTACHMENT_LAYERED_OES                                    = 0x8DA7
	FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS                                  = 0x8DA8
	FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB                              = 0x8DA8
	FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT                              = 0x8DA8
	FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES                              = 0x8DA8
	FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB                                = 0x8DA9
	FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT                                = 0x8DA9
	LAYER_NV                                                              = 0x8DAA
	DEPTH_COMPONENT32F_NV                                                 = 0x8DAB
	DEPTH32F_STENCIL8_NV                                                  = 0x8DAC
	FLOAT_32_UNSIGNED_INT_24_8_REV                                        = 0x8DAD
	FLOAT_32_UNSIGNED_INT_24_8_REV_NV                                     = 0x8DAD
	SHADER_INCLUDE_ARB                                                    = 0x8DAE
	DEPTH_BUFFER_FLOAT_MODE_NV                                            = 0x8DAF
	FRAMEBUFFER_SRGB                                                      = 0x8DB9
	FRAMEBUFFER_SRGB_EXT                                                  = 0x8DB9
	FRAMEBUFFER_SRGB_CAPABLE_EXT                                          = 0x8DBA
	COMPRESSED_RED_RGTC1                                                  = 0x8DBB
	COMPRESSED_RED_RGTC1_EXT                                              = 0x8DBB
	COMPRESSED_SIGNED_RED_RGTC1                                           = 0x8DBC
	COMPRESSED_SIGNED_RED_RGTC1_EXT                                       = 0x8DBC
	COMPRESSED_RED_GREEN_RGTC2_EXT                                        = 0x8DBD
	COMPRESSED_RG_RGTC2                                                   = 0x8DBD
	COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT                                 = 0x8DBE
	COMPRESSED_SIGNED_RG_RGTC2                                            = 0x8DBE
	SAMPLER_1D_ARRAY                                                      = 0x8DC0
	SAMPLER_1D_ARRAY_EXT                                                  = 0x8DC0
	SAMPLER_2D_ARRAY                                                      = 0x8DC1
	SAMPLER_2D_ARRAY_EXT                                                  = 0x8DC1
	SAMPLER_BUFFER                                                        = 0x8DC2
	SAMPLER_BUFFER_EXT                                                    = 0x8DC2
	SAMPLER_BUFFER_OES                                                    = 0x8DC2
	SAMPLER_1D_ARRAY_SHADOW                                               = 0x8DC3
	SAMPLER_1D_ARRAY_SHADOW_EXT                                           = 0x8DC3
	SAMPLER_2D_ARRAY_SHADOW                                               = 0x8DC4
	SAMPLER_2D_ARRAY_SHADOW_EXT                                           = 0x8DC4
	SAMPLER_2D_ARRAY_SHADOW_NV                                            = 0x8DC4
	SAMPLER_CUBE_SHADOW                                                   = 0x8DC5
	SAMPLER_CUBE_SHADOW_EXT                                               = 0x8DC5
	SAMPLER_CUBE_SHADOW_NV                                                = 0x8DC5
	UNSIGNED_INT_VEC2                                                     = 0x8DC6
	UNSIGNED_INT_VEC2_EXT                                                 = 0x8DC6
	UNSIGNED_INT_VEC3                                                     = 0x8DC7
	UNSIGNED_INT_VEC3_EXT                                                 = 0x8DC7
	UNSIGNED_INT_VEC4                                                     = 0x8DC8
	UNSIGNED_INT_VEC4_EXT                                                 = 0x8DC8
	INT_SAMPLER_1D                                                        = 0x8DC9
	INT_SAMPLER_1D_EXT                                                    = 0x8DC9
	INT_SAMPLER_2D                                                        = 0x8DCA
	INT_SAMPLER_2D_EXT                                                    = 0x8DCA
	INT_SAMPLER_3D                                                        = 0x8DCB
	INT_SAMPLER_3D_EXT                                                    = 0x8DCB
	INT_SAMPLER_CUBE                                                      = 0x8DCC
	INT_SAMPLER_CUBE_EXT                                                  = 0x8DCC
	INT_SAMPLER_2D_RECT                                                   = 0x8DCD
	INT_SAMPLER_2D_RECT_EXT                                               = 0x8DCD
	INT_SAMPLER_1D_ARRAY                                                  = 0x8DCE
	INT_SAMPLER_1D_ARRAY_EXT                                              = 0x8DCE
	INT_SAMPLER_2D_ARRAY                                                  = 0x8DCF
	INT_SAMPLER_2D_ARRAY_EXT                                              = 0x8DCF
	INT_SAMPLER_BUFFER                                                    = 0x8DD0
	INT_SAMPLER_BUFFER_EXT                                                = 0x8DD0
	INT_SAMPLER_BUFFER_OES                                                = 0x8DD0
	UNSIGNED_INT_SAMPLER_1D                                               = 0x8DD1
	UNSIGNED_INT_SAMPLER_1D_EXT                                           = 0x8DD1
	UNSIGNED_INT_SAMPLER_2D                                               = 0x8DD2
	UNSIGNED_INT_SAMPLER_2D_EXT                                           = 0x8DD2
	UNSIGNED_INT_SAMPLER_3D                                               = 0x8DD3
	UNSIGNED_INT_SAMPLER_3D_EXT                                           = 0x8DD3
	UNSIGNED_INT_SAMPLER_CUBE                                             = 0x8DD4
	UNSIGNED_INT_SAMPLER_CUBE_EXT                                         = 0x8DD4
	UNSIGNED_INT_SAMPLER_2D_RECT                                          = 0x8DD5
	UNSIGNED_INT_SAMPLER_2D_RECT_EXT                                      = 0x8DD5
	UNSIGNED_INT_SAMPLER_1D_ARRAY                                         = 0x8DD6
	UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT                                     = 0x8DD6
	UNSIGNED_INT_SAMPLER_2D_ARRAY                                         = 0x8DD7
	UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT                                     = 0x8DD7
	UNSIGNED_INT_SAMPLER_BUFFER                                           = 0x8DD8
	UNSIGNED_INT_SAMPLER_BUFFER_EXT                                       = 0x8DD8
	UNSIGNED_INT_SAMPLER_BUFFER_OES                                       = 0x8DD8
	GEOMETRY_SHADER                                                       = 0x8DD9
	GEOMETRY_SHADER_ARB                                                   = 0x8DD9
	GEOMETRY_SHADER_EXT                                                   = 0x8DD9
	GEOMETRY_SHADER_OES                                                   = 0x8DD9
	GEOMETRY_VERTICES_OUT_ARB                                             = 0x8DDA
	GEOMETRY_VERTICES_OUT_EXT                                             = 0x8DDA
	GEOMETRY_INPUT_TYPE_ARB                                               = 0x8DDB
	GEOMETRY_INPUT_TYPE_EXT                                               = 0x8DDB
	GEOMETRY_OUTPUT_TYPE_ARB                                              = 0x8DDC
	GEOMETRY_OUTPUT_TYPE_EXT                                              = 0x8DDC
	MAX_GEOMETRY_VARYING_COMPONENTS_ARB                                   = 0x8DDD
	MAX_GEOMETRY_VARYING_COMPONENTS_EXT                                   = 0x8DDD
	MAX_VERTEX_VARYING_COMPONENTS_ARB                                     = 0x8DDE
	MAX_VERTEX_VARYING_COMPONENTS_EXT                                     = 0x8DDE
	MAX_GEOMETRY_UNIFORM_COMPONENTS                                       = 0x8DDF
	MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB                                   = 0x8DDF
	MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT                                   = 0x8DDF
	MAX_GEOMETRY_UNIFORM_COMPONENTS_OES                                   = 0x8DDF
	MAX_GEOMETRY_OUTPUT_VERTICES                                          = 0x8DE0
	MAX_GEOMETRY_OUTPUT_VERTICES_ARB                                      = 0x8DE0
	MAX_GEOMETRY_OUTPUT_VERTICES_EXT                                      = 0x8DE0
	MAX_GEOMETRY_OUTPUT_VERTICES_OES                                      = 0x8DE0
	MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS                                  = 0x8DE1
	MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB                              = 0x8DE1
	MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT                              = 0x8DE1
	MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES                              = 0x8DE1
	MAX_VERTEX_BINDABLE_UNIFORMS_EXT                                      = 0x8DE2
	MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT                                    = 0x8DE3
	MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT                                    = 0x8DE4
	ACTIVE_SUBROUTINES                                                    = 0x8DE5
	ACTIVE_SUBROUTINE_UNIFORMS                                            = 0x8DE6
	MAX_SUBROUTINES                                                       = 0x8DE7
	MAX_SUBROUTINE_UNIFORM_LOCATIONS                                      = 0x8DE8
	NAMED_STRING_LENGTH_ARB                                               = 0x8DE9
	NAMED_STRING_TYPE_ARB                                                 = 0x8DEA
	MAX_BINDABLE_UNIFORM_SIZE_EXT                                         = 0x8DED
	UNIFORM_BUFFER_EXT                                                    = 0x8DEE
	UNIFORM_BUFFER_BINDING_EXT                                            = 0x8DEF
	LOW_FLOAT                                                             = 0x8DF0
	MEDIUM_FLOAT                                                          = 0x8DF1
	HIGH_FLOAT                                                            = 0x8DF2
	LOW_INT                                                               = 0x8DF3
	MEDIUM_INT                                                            = 0x8DF4
	HIGH_INT                                                              = 0x8DF5
	UNSIGNED_INT_10_10_10_2_OES                                           = 0x8DF6
	INT_10_10_10_2_OES                                                    = 0x8DF7
	SHADER_BINARY_FORMATS                                                 = 0x8DF8
	NUM_SHADER_BINARY_FORMATS                                             = 0x8DF9
	SHADER_COMPILER                                                       = 0x8DFA
	MAX_VERTEX_UNIFORM_VECTORS                                            = 0x8DFB
	MAX_VARYING_VECTORS                                                   = 0x8DFC
	MAX_FRAGMENT_UNIFORM_VECTORS                                          = 0x8DFD
	RENDERBUFFER_COLOR_SAMPLES_NV                                         = 0x8E10
	MAX_MULTISAMPLE_COVERAGE_MODES_NV                                     = 0x8E11
	MULTISAMPLE_COVERAGE_MODES_NV                                         = 0x8E12
	QUERY_WAIT                                                            = 0x8E13
	QUERY_WAIT_NV                                                         = 0x8E13
	QUERY_NO_WAIT                                                         = 0x8E14
	QUERY_NO_WAIT_NV                                                      = 0x8E14
	QUERY_BY_REGION_WAIT                                                  = 0x8E15
	QUERY_BY_REGION_WAIT_NV                                               = 0x8E15
	QUERY_BY_REGION_NO_WAIT                                               = 0x8E16
	QUERY_BY_REGION_NO_WAIT_NV                                            = 0x8E16
	QUERY_WAIT_INVERTED                                                   = 0x8E17
	QUERY_NO_WAIT_INVERTED                                                = 0x8E18
	QUERY_BY_REGION_WAIT_INVERTED                                         = 0x8E19
	QUERY_BY_REGION_NO_WAIT_INVERTED                                      = 0x8E1A
	POLYGON_OFFSET_CLAMP                                                  = 0x8E1B
	POLYGON_OFFSET_CLAMP_EXT                                              = 0x8E1B
	MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS                          = 0x8E1E
	MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT                      = 0x8E1E
	MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES                      = 0x8E1E
	MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS                       = 0x8E1F
	MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT                   = 0x8E1F
	MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES                   = 0x8E1F
	COLOR_SAMPLES_NV                                                      = 0x8E20
	TRANSFORM_FEEDBACK                                                    = 0x8E22
	TRANSFORM_FEEDBACK_NV                                                 = 0x8E22
	TRANSFORM_FEEDBACK_BUFFER_PAUSED                                      = 0x8E23
	TRANSFORM_FEEDBACK_PAUSED                                             = 0x8E23
	TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV                                   = 0x8E23
	TRANSFORM_FEEDBACK_BUFFER_ACTIVE                                      = 0x8E24
	TRANSFORM_FEEDBACK_ACTIVE                                             = 0x8E24
	TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV                                   = 0x8E24
	TRANSFORM_FEEDBACK_BINDING                                            = 0x8E25
	TRANSFORM_FEEDBACK_BINDING_NV                                         = 0x8E25
	FRAME_NV                                                              = 0x8E26
	FIELDS_NV                                                             = 0x8E27
	CURRENT_TIME_NV                                                       = 0x8E28
	TIMESTAMP                                                             = 0x8E28
	TIMESTAMP_EXT                                                         = 0x8E28
	NUM_FILL_STREAMS_NV                                                   = 0x8E29
	PRESENT_TIME_NV                                                       = 0x8E2A
	PRESENT_DURATION_NV                                                   = 0x8E2B
	DEPTH_COMPONENT16_NONLINEAR_NV                                        = 0x8E2C
	PROGRAM_MATRIX_EXT                                                    = 0x8E2D
	TRANSPOSE_PROGRAM_MATRIX_EXT                                          = 0x8E2E
	PROGRAM_MATRIX_STACK_DEPTH_EXT                                        = 0x8E2F
	TEXTURE_SWIZZLE_R                                                     = 0x8E42
	TEXTURE_SWIZZLE_R_EXT                                                 = 0x8E42
	TEXTURE_SWIZZLE_G                                                     = 0x8E43
	TEXTURE_SWIZZLE_G_EXT                                                 = 0x8E43
	TEXTURE_SWIZZLE_B                                                     = 0x8E44
	TEXTURE_SWIZZLE_B_EXT                                                 = 0x8E44
	TEXTURE_SWIZZLE_A                                                     = 0x8E45
	TEXTURE_SWIZZLE_A_EXT                                                 = 0x8E45
	TEXTURE_SWIZZLE_RGBA                                                  = 0x8E46
	TEXTURE_SWIZZLE_RGBA_EXT                                              = 0x8E46
	ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS                                   = 0x8E47
	ACTIVE_SUBROUTINE_MAX_LENGTH                                          = 0x8E48
	ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH                                  = 0x8E49
	NUM_COMPATIBLE_SUBROUTINES                                            = 0x8E4A
	COMPATIBLE_SUBROUTINES                                                = 0x8E4B
	QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION                              = 0x8E4C
	QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT                          = 0x8E4C
	FIRST_VERTEX_CONVENTION                                               = 0x8E4D
	FIRST_VERTEX_CONVENTION_EXT                                           = 0x8E4D
	FIRST_VERTEX_CONVENTION_OES                                           = 0x8E4D
	LAST_VERTEX_CONVENTION                                                = 0x8E4E
	LAST_VERTEX_CONVENTION_EXT                                            = 0x8E4E
	LAST_VERTEX_CONVENTION_OES                                            = 0x8E4E
	PROVOKING_VERTEX                                                      = 0x8E4F
	PROVOKING_VERTEX_EXT                                                  = 0x8E4F
	SAMPLE_POSITION                                                       = 0x8E50
	SAMPLE_POSITION_NV                                                    = 0x8E50
	SAMPLE_LOCATION_ARB                                                   = 0x8E50
	SAMPLE_LOCATION_NV                                                    = 0x8E50
	SAMPLE_MASK                                                           = 0x8E51
	SAMPLE_MASK_NV                                                        = 0x8E51
	SAMPLE_MASK_VALUE                                                     = 0x8E52
	SAMPLE_MASK_VALUE_NV                                                  = 0x8E52
	TEXTURE_BINDING_RENDERBUFFER_NV                                       = 0x8E53
	TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV                            = 0x8E54
	TEXTURE_RENDERBUFFER_NV                                               = 0x8E55
	SAMPLER_RENDERBUFFER_NV                                               = 0x8E56
	INT_SAMPLER_RENDERBUFFER_NV                                           = 0x8E57
	UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV                                  = 0x8E58
	MAX_SAMPLE_MASK_WORDS                                                 = 0x8E59
	MAX_SAMPLE_MASK_WORDS_NV                                              = 0x8E59
	MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV                                   = 0x8E5A
	MAX_GEOMETRY_SHADER_INVOCATIONS                                       = 0x8E5A
	MAX_GEOMETRY_SHADER_INVOCATIONS_EXT                                   = 0x8E5A
	MAX_GEOMETRY_SHADER_INVOCATIONS_OES                                   = 0x8E5A
	MIN_FRAGMENT_INTERPOLATION_OFFSET                                     = 0x8E5B
	MIN_FRAGMENT_INTERPOLATION_OFFSET_OES                                 = 0x8E5B
	MIN_FRAGMENT_INTERPOLATION_OFFSET_NV                                  = 0x8E5B
	MAX_FRAGMENT_INTERPOLATION_OFFSET                                     = 0x8E5C
	MAX_FRAGMENT_INTERPOLATION_OFFSET_OES                                 = 0x8E5C
	MAX_FRAGMENT_INTERPOLATION_OFFSET_NV                                  = 0x8E5C
	FRAGMENT_INTERPOLATION_OFFSET_BITS                                    = 0x8E5D
	FRAGMENT_INTERPOLATION_OFFSET_BITS_OES                                = 0x8E5D
	FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV                         = 0x8E5D
	MIN_PROGRAM_TEXTURE_GATHER_OFFSET                                     = 0x8E5E
	MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB                                 = 0x8E5E
	MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV                                  = 0x8E5E
	MAX_PROGRAM_TEXTURE_GATHER_OFFSET                                     = 0x8E5F
	MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB                                 = 0x8E5F
	MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV                                  = 0x8E5F
	MAX_MESH_UNIFORM_BLOCKS_NV                                            = 0x8E60
	MAX_MESH_TEXTURE_IMAGE_UNITS_NV                                       = 0x8E61
	MAX_MESH_IMAGE_UNIFORMS_NV                                            = 0x8E62
	MAX_MESH_UNIFORM_COMPONENTS_NV                                        = 0x8E63
	MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV                                    = 0x8E64
	MAX_MESH_ATOMIC_COUNTERS_NV                                           = 0x8E65
	MAX_MESH_SHADER_STORAGE_BLOCKS_NV                                     = 0x8E66
	MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV                               = 0x8E67
	MAX_TASK_UNIFORM_BLOCKS_NV                                            = 0x8E68
	MAX_TASK_TEXTURE_IMAGE_UNITS_NV                                       = 0x8E69
	MAX_TASK_IMAGE_UNIFORMS_NV                                            = 0x8E6A
	MAX_TASK_UNIFORM_COMPONENTS_NV                                        = 0x8E6B
	MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV                                    = 0x8E6C
	MAX_TASK_ATOMIC_COUNTERS_NV                                           = 0x8E6D
	MAX_TASK_SHADER_STORAGE_BLOCKS_NV                                     = 0x8E6E
	MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV                               = 0x8E6F
	MAX_TRANSFORM_FEEDBACK_BUFFERS                                        = 0x8E70
	MAX_VERTEX_STREAMS                                                    = 0x8E71
	PATCH_VERTICES                                                        = 0x8E72
	PATCH_VERTICES_EXT                                                    = 0x8E72
	PATCH_VERTICES_OES                                                    = 0x8E72
	PATCH_DEFAULT_INNER_LEVEL                                             = 0x8E73
	PATCH_DEFAULT_INNER_LEVEL_EXT                                         = 0x8E73
	PATCH_DEFAULT_OUTER_LEVEL                                             = 0x8E74
	PATCH_DEFAULT_OUTER_LEVEL_EXT                                         = 0x8E74
	TESS_CONTROL_OUTPUT_VERTICES                                          = 0x8E75
	TESS_CONTROL_OUTPUT_VERTICES_EXT                                      = 0x8E75
	TESS_CONTROL_OUTPUT_VERTICES_OES                                      = 0x8E75
	TESS_GEN_MODE                                                         = 0x8E76
	TESS_GEN_MODE_EXT                                                     = 0x8E76
	TESS_GEN_MODE_OES                                                     = 0x8E76
	TESS_GEN_SPACING                                                      = 0x8E77
	TESS_GEN_SPACING_EXT                                                  = 0x8E77
	TESS_GEN_SPACING_OES                                                  = 0x8E77
	TESS_GEN_VERTEX_ORDER                                                 = 0x8E78
	TESS_GEN_VERTEX_ORDER_EXT                                             = 0x8E78
	TESS_GEN_VERTEX_ORDER_OES                                             = 0x8E78
	TESS_GEN_POINT_MODE                                                   = 0x8E79
	TESS_GEN_POINT_MODE_EXT                                               = 0x8E79
	TESS_GEN_POINT_MODE_OES                                               = 0x8E79
	ISOLINES                                                              = 0x8E7A
	ISOLINES_EXT                                                          = 0x8E7A
	ISOLINES_OES                                                          = 0x8E7A
	FRACTIONAL_ODD                                                        = 0x8E7B
	FRACTIONAL_ODD_EXT                                                    = 0x8E7B
	FRACTIONAL_ODD_OES                                                    = 0x8E7B
	FRACTIONAL_EVEN                                                       = 0x8E7C
	FRACTIONAL_EVEN_EXT                                                   = 0x8E7C
	FRACTIONAL_EVEN_OES                                                   = 0x8E7C
	MAX_PATCH_VERTICES                                                    = 0x8E7D
	MAX_PATCH_VERTICES_EXT                                                = 0x8E7D
	MAX_PATCH_VERTICES_OES                                                = 0x8E7D
	MAX_TESS_GEN_LEVEL                                                    = 0x8E7E
	MAX_TESS_GEN_LEVEL_EXT                                                = 0x8E7E
	MAX_TESS_GEN_LEVEL_OES                                                = 0x8E7E
	MAX_TESS_CONTROL_UNIFORM_COMPONENTS                                   = 0x8E7F
	MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT                               = 0x8E7F
	MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES                               = 0x8E7F
	MAX_TESS_EVALUATION_UNIFORM_COMPONENTS                                = 0x8E80
	MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT                            = 0x8E80
	MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES                            = 0x8E80
	MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS                                  = 0x8E81
	MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT                              = 0x8E81
	MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES                              = 0x8E81
	MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS                               = 0x8E82
	MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT                           = 0x8E82
	MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES                           = 0x8E82
	MAX_TESS_CONTROL_OUTPUT_COMPONENTS                                    = 0x8E83
	MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT                                = 0x8E83
	MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES                                = 0x8E83
	MAX_TESS_PATCH_COMPONENTS                                             = 0x8E84
	MAX_TESS_PATCH_COMPONENTS_EXT                                         = 0x8E84
	MAX_TESS_PATCH_COMPONENTS_OES                                         = 0x8E84
	MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS                              = 0x8E85
	MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT                          = 0x8E85
	MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES                          = 0x8E85
	MAX_TESS_EVALUATION_OUTPUT_COMPONENTS                                 = 0x8E86
	MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT                             = 0x8E86
	MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES                             = 0x8E86
	TESS_EVALUATION_SHADER                                                = 0x8E87
	TESS_EVALUATION_SHADER_EXT                                            = 0x8E87
	TESS_EVALUATION_SHADER_OES                                            = 0x8E87
	TESS_CONTROL_SHADER                                                   = 0x8E88
	TESS_CONTROL_SHADER_EXT                                               = 0x8E88
	TESS_CONTROL_SHADER_OES                                               = 0x8E88
	MAX_TESS_CONTROL_UNIFORM_BLOCKS                                       = 0x8E89
	MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT                                   = 0x8E89
	MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES                                   = 0x8E89
	MAX_TESS_EVALUATION_UNIFORM_BLOCKS                                    = 0x8E8A
	MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT                                = 0x8E8A
	MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES                                = 0x8E8A
	COMPRESSED_RGBA_BPTC_UNORM                                            = 0x8E8C
	COMPRESSED_RGBA_BPTC_UNORM_ARB                                        = 0x8E8C
	COMPRESSED_RGBA_BPTC_UNORM_EXT                                        = 0x8E8C
	COMPRESSED_SRGB_ALPHA_BPTC_UNORM                                      = 0x8E8D
	COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB                                  = 0x8E8D
	COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT                                  = 0x8E8D
	COMPRESSED_RGB_BPTC_SIGNED_FLOAT                                      = 0x8E8E
	COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB                                  = 0x8E8E
	COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT                                  = 0x8E8E
	COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT                                    = 0x8E8F
	COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB                                = 0x8E8F
	COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT                                = 0x8E8F
	COVERAGE_COMPONENT_NV                                                 = 0x8ED0
	COVERAGE_COMPONENT4_NV                                                = 0x8ED1
	COVERAGE_ATTACHMENT_NV                                                = 0x8ED2
	COVERAGE_BUFFERS_NV                                                   = 0x8ED3
	COVERAGE_SAMPLES_NV                                                   = 0x8ED4
	COVERAGE_ALL_FRAGMENTS_NV                                             = 0x8ED5
	COVERAGE_EDGE_FRAGMENTS_NV                                            = 0x8ED6
	COVERAGE_AUTOMATIC_NV                                                 = 0x8ED7
	INCLUSIVE_EXT                                                         = 0x8F10
	EXCLUSIVE_EXT                                                         = 0x8F11
	WINDOW_RECTANGLE_EXT                                                  = 0x8F12
	WINDOW_RECTANGLE_MODE_EXT                                             = 0x8F13
	MAX_WINDOW_RECTANGLES_EXT                                             = 0x8F14
	NUM_WINDOW_RECTANGLES_EXT                                             = 0x8F15
	BUFFER_GPU_ADDRESS_NV                                                 = 0x8F1D
	VERTEX_ATTRIB_ARRAY_UNIFIED_NV                                        = 0x8F1E
	ELEMENT_ARRAY_UNIFIED_NV                                              = 0x8F1F
	VERTEX_ATTRIB_ARRAY_ADDRESS_NV                                        = 0x8F20
	VERTEX_ARRAY_ADDRESS_NV                                               = 0x8F21
	NORMAL_ARRAY_ADDRESS_NV                                               = 0x8F22
	COLOR_ARRAY_ADDRESS_NV                                                = 0x8F23
	INDEX_ARRAY_ADDRESS_NV                                                = 0x8F24
	TEXTURE_COORD_ARRAY_ADDRESS_NV                                        = 0x8F25
	EDGE_FLAG_ARRAY_ADDRESS_NV                                            = 0x8F26
	SECONDARY_COLOR_ARRAY_ADDRESS_NV                                      = 0x8F27
	FOG_COORD_ARRAY_ADDRESS_NV                                            = 0x8F28
	ELEMENT_ARRAY_ADDRESS_NV                                              = 0x8F29
	VERTEX_ATTRIB_ARRAY_LENGTH_NV                                         = 0x8F2A
	VERTEX_ARRAY_LENGTH_NV                                                = 0x8F2B
	NORMAL_ARRAY_LENGTH_NV                                                = 0x8F2C
	COLOR_ARRAY_LENGTH_NV                                                 = 0x8F2D
	INDEX_ARRAY_LENGTH_NV                                                 = 0x8F2E
	TEXTURE_COORD_ARRAY_LENGTH_NV                                         = 0x8F2F
	EDGE_FLAG_ARRAY_LENGTH_NV                                             = 0x8F30
	SECONDARY_COLOR_ARRAY_LENGTH_NV                                       = 0x8F31
	FOG_COORD_ARRAY_LENGTH_NV                                             = 0x8F32
	ELEMENT_ARRAY_LENGTH_NV                                               = 0x8F33
	GPU_ADDRESS_NV                                                        = 0x8F34
	MAX_SHADER_BUFFER_ADDRESS_NV                                          = 0x8F35
	COPY_READ_BUFFER                                                      = 0x8F36
	COPY_READ_BUFFER_NV                                                   = 0x8F36
	COPY_READ_BUFFER_BINDING                                              = 0x8F36
	COPY_WRITE_BUFFER                                                     = 0x8F37
	COPY_WRITE_BUFFER_NV                                                  = 0x8F37
	COPY_WRITE_BUFFER_BINDING                                             = 0x8F37
	MAX_IMAGE_UNITS                                                       = 0x8F38
	MAX_IMAGE_UNITS_EXT                                                   = 0x8F38
	MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS                         = 0x8F39
	MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT                     = 0x8F39
	MAX_COMBINED_SHADER_OUTPUT_RESOURCES                                  = 0x8F39
	IMAGE_BINDING_NAME                                                    = 0x8F3A
	IMAGE_BINDING_NAME_EXT                                                = 0x8F3A
	IMAGE_BINDING_LEVEL                                                   = 0x8F3B
	IMAGE_BINDING_LEVEL_EXT                                               = 0x8F3B
	IMAGE_BINDING_LAYERED                                                 = 0x8F3C
	IMAGE_BINDING_LAYERED_EXT                                             = 0x8F3C
	IMAGE_BINDING_LAYER                                                   = 0x8F3D
	IMAGE_BINDING_LAYER_EXT                                               = 0x8F3D
	IMAGE_BINDING_ACCESS                                                  = 0x8F3E
	IMAGE_BINDING_ACCESS_EXT                                              = 0x8F3E
	DRAW_INDIRECT_BUFFER                                                  = 0x8F3F
	DRAW_INDIRECT_UNIFIED_NV                                              = 0x8F40
	DRAW_INDIRECT_ADDRESS_NV                                              = 0x8F41
	DRAW_INDIRECT_LENGTH_NV                                               = 0x8F42
	DRAW_INDIRECT_BUFFER_BINDING                                          = 0x8F43
	MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV                                  = 0x8F44
	MAX_PROGRAM_SUBROUTINE_NUM_NV                                         = 0x8F45
	DOUBLE_MAT2                                                           = 0x8F46
	DOUBLE_MAT2_EXT                                                       = 0x8F46
	DOUBLE_MAT3                                                           = 0x8F47
	DOUBLE_MAT3_EXT                                                       = 0x8F47
	DOUBLE_MAT4                                                           = 0x8F48
	DOUBLE_MAT4_EXT                                                       = 0x8F48
	DOUBLE_MAT2x3                                                         = 0x8F49
	DOUBLE_MAT2x3_EXT                                                     = 0x8F49
	DOUBLE_MAT2x4                                                         = 0x8F4A
	DOUBLE_MAT2x4_EXT                                                     = 0x8F4A
	DOUBLE_MAT3x2                                                         = 0x8F4B
	DOUBLE_MAT3x2_EXT                                                     = 0x8F4B
	DOUBLE_MAT3x4                                                         = 0x8F4C
	DOUBLE_MAT3x4_EXT                                                     = 0x8F4C
	DOUBLE_MAT4x2                                                         = 0x8F4D
	DOUBLE_MAT4x2_EXT                                                     = 0x8F4D
	DOUBLE_MAT4x3                                                         = 0x8F4E
	DOUBLE_MAT4x3_EXT                                                     = 0x8F4E
	VERTEX_BINDING_BUFFER                                                 = 0x8F4F
	MALI_SHADER_BINARY_ARM                                                = 0x8F60
	MALI_PROGRAM_BINARY_ARM                                               = 0x8F61
	MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT                          = 0x8F63
	SHADER_PIXEL_LOCAL_STORAGE_EXT                                        = 0x8F64
	FETCH_PER_SAMPLE_ARM                                                  = 0x8F65
	FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM                             = 0x8F66
	MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT                               = 0x8F67
	TEXTURE_ASTC_DECODE_PRECISION_EXT                                     = 0x8F69
	TEXTURE_UNNORMALIZED_COORDINATES_ARM                                  = 0x8F6A
	RED_SNORM                                                             = 0x8F90
	RG_SNORM                                                              = 0x8F91
	RGB_SNORM                                                             = 0x8F92
	RGBA_SNORM                                                            = 0x8F93
	R8_SNORM                                                              = 0x8F94
	RG8_SNORM                                                             = 0x8F95
	RGB8_SNORM                                                            = 0x8F96
	RGBA8_SNORM                                                           = 0x8F97
	R16_SNORM                                                             = 0x8F98
	R16_SNORM_EXT                                                         = 0x8F98
	RG16_SNORM                                                            = 0x8F99
	RG16_SNORM_EXT                                                        = 0x8F99
	RGB16_SNORM                                                           = 0x8F9A
	RGB16_SNORM_EXT                                                       = 0x8F9A
	RGBA16_SNORM                                                          = 0x8F9B
	RGBA16_SNORM_EXT                                                      = 0x8F9B
	SIGNED_NORMALIZED                                                     = 0x8F9C
	PRIMITIVE_RESTART                                                     = 0x8F9D
	PRIMITIVE_RESTART_INDEX                                               = 0x8F9E
	MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB                             = 0x8F9F
	PERFMON_GLOBAL_MODE_QCOM                                              = 0x8FA0
	MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM                                = 0x8FA1
	BINNING_CONTROL_HINT_QCOM                                             = 0x8FB0
	CPU_OPTIMIZED_QCOM                                                    = 0x8FB1
	GPU_OPTIMIZED_QCOM                                                    = 0x8FB2
	RENDER_DIRECT_TO_FRAMEBUFFER_QCOM                                     = 0x8FB3
	GPU_DISJOINT_EXT                                                      = 0x8FBB
	SR8_EXT                                                               = 0x8FBD
	SRG8_EXT                                                              = 0x8FBE
	TEXTURE_FORMAT_SRGB_OVERRIDE_EXT                                      = 0x8FBF
	SHADER_BINARY_VIV                                                     = 0x8FC4
	INT8_NV                                                               = 0x8FE0
	INT8_VEC2_NV                                                          = 0x8FE1
	INT8_VEC3_NV                                                          = 0x8FE2
	INT8_VEC4_NV                                                          = 0x8FE3
	INT16_NV                                                              = 0x8FE4
	INT16_VEC2_NV                                                         = 0x8FE5
	INT16_VEC3_NV                                                         = 0x8FE6
	INT16_VEC4_NV                                                         = 0x8FE7
	INT64_VEC2_ARB                                                        = 0x8FE9
	INT64_VEC2_NV                                                         = 0x8FE9
	INT64_VEC3_ARB                                                        = 0x8FEA
	INT64_VEC3_NV                                                         = 0x8FEA
	INT64_VEC4_ARB                                                        = 0x8FEB
	INT64_VEC4_NV                                                         = 0x8FEB
	UNSIGNED_INT8_NV                                                      = 0x8FEC
	UNSIGNED_INT8_VEC2_NV                                                 = 0x8FED
	UNSIGNED_INT8_VEC3_NV                                                 = 0x8FEE
	UNSIGNED_INT8_VEC4_NV                                                 = 0x8FEF
	UNSIGNED_INT16_NV                                                     = 0x8FF0
	UNSIGNED_INT16_VEC2_NV                                                = 0x8FF1
	UNSIGNED_INT16_VEC3_NV                                                = 0x8FF2
	UNSIGNED_INT16_VEC4_NV                                                = 0x8FF3
	UNSIGNED_INT64_VEC2_ARB                                               = 0x8FF5
	UNSIGNED_INT64_VEC2_NV                                                = 0x8FF5
	UNSIGNED_INT64_VEC3_ARB                                               = 0x8FF6
	UNSIGNED_INT64_VEC3_NV                                                = 0x8FF6
	UNSIGNED_INT64_VEC4_ARB                                               = 0x8FF7
	UNSIGNED_INT64_VEC4_NV                                                = 0x8FF7
	FLOAT16_NV                                                            = 0x8FF8
	FLOAT16_VEC2_NV                                                       = 0x8FF9
	FLOAT16_VEC3_NV                                                       = 0x8FFA
	FLOAT16_VEC4_NV                                                       = 0x8FFB
	DOUBLE_VEC2                                                           = 0x8FFC
	DOUBLE_VEC2_EXT                                                       = 0x8FFC
	DOUBLE_VEC3                                                           = 0x8FFD
	DOUBLE_VEC3_EXT                                                       = 0x8FFD
	DOUBLE_VEC4                                                           = 0x8FFE
	DOUBLE_VEC4_EXT                                                       = 0x8FFE
	SAMPLER_BUFFER_AMD                                                    = 0x9001
	INT_SAMPLER_BUFFER_AMD                                                = 0x9002
	UNSIGNED_INT_SAMPLER_BUFFER_AMD                                       = 0x9003
	TESSELLATION_MODE_AMD                                                 = 0x9004
	TESSELLATION_FACTOR_AMD                                               = 0x9005
	DISCRETE_AMD                                                          = 0x9006
	CONTINUOUS_AMD                                                        = 0x9007
	TEXTURE_CUBE_MAP_ARRAY                                                = 0x9009
	TEXTURE_CUBE_MAP_ARRAY_ARB                                            = 0x9009
	TEXTURE_CUBE_MAP_ARRAY_EXT                                            = 0x9009
	TEXTURE_CUBE_MAP_ARRAY_OES                                            = 0x9009
	TEXTURE_BINDING_CUBE_MAP_ARRAY                                        = 0x900A
	TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB                                    = 0x900A
	TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT                                    = 0x900A
	TEXTURE_BINDING_CUBE_MAP_ARRAY_OES                                    = 0x900A
	PROXY_TEXTURE_CUBE_MAP_ARRAY                                          = 0x900B
	PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB                                      = 0x900B
	SAMPLER_CUBE_MAP_ARRAY                                                = 0x900C
	SAMPLER_CUBE_MAP_ARRAY_ARB                                            = 0x900C
	SAMPLER_CUBE_MAP_ARRAY_EXT                                            = 0x900C
	SAMPLER_CUBE_MAP_ARRAY_OES                                            = 0x900C
	SAMPLER_CUBE_MAP_ARRAY_SHADOW                                         = 0x900D
	SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB                                     = 0x900D
	SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT                                     = 0x900D
	SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES                                     = 0x900D
	INT_SAMPLER_CUBE_MAP_ARRAY                                            = 0x900E
	INT_SAMPLER_CUBE_MAP_ARRAY_ARB                                        = 0x900E
	INT_SAMPLER_CUBE_MAP_ARRAY_EXT                                        = 0x900E
	INT_SAMPLER_CUBE_MAP_ARRAY_OES                                        = 0x900E
	UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY                                   = 0x900F
	UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB                               = 0x900F
	UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT                               = 0x900F
	UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES                               = 0x900F
	ALPHA_SNORM                                                           = 0x9010
	LUMINANCE_SNORM                                                       = 0x9011
	LUMINANCE_ALPHA_SNORM                                                 = 0x9012
	INTENSITY_SNORM                                                       = 0x9013
	ALPHA8_SNORM                                                          = 0x9014
	LUMINANCE8_SNORM                                                      = 0x9015
	LUMINANCE8_ALPHA8_SNORM                                               = 0x9016
	INTENSITY8_SNORM                                                      = 0x9017
	ALPHA16_SNORM                                                         = 0x9018
	LUMINANCE16_SNORM                                                     = 0x9019
	LUMINANCE16_ALPHA16_SNORM                                             = 0x901A
	INTENSITY16_SNORM                                                     = 0x901B
	FACTOR_MIN_AMD                                                        = 0x901C
	FACTOR_MAX_AMD                                                        = 0x901D
	DEPTH_CLAMP_NEAR_AMD                                                  = 0x901E
	DEPTH_CLAMP_FAR_AMD                                                   = 0x901F
	VIDEO_BUFFER_NV                                                       = 0x9020
	VIDEO_BUFFER_BINDING_NV                                               = 0x9021
	FIELD_UPPER_NV                                                        = 0x9022
	FIELD_LOWER_NV                                                        = 0x9023
	NUM_VIDEO_CAPTURE_STREAMS_NV                                          = 0x9024
	NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV                                   = 0x9025
	VIDEO_CAPTURE_TO_422_SUPPORTED_NV                                     = 0x9026
	LAST_VIDEO_CAPTURE_STATUS_NV                                          = 0x9027
	VIDEO_BUFFER_PITCH_NV                                                 = 0x9028
	VIDEO_COLOR_CONVERSION_MATRIX_NV                                      = 0x9029
	VIDEO_COLOR_CONVERSION_MAX_NV                                         = 0x902A
	VIDEO_COLOR_CONVERSION_MIN_NV                                         = 0x902B
	VIDEO_COLOR_CONVERSION_OFFSET_NV                                      = 0x902C
	VIDEO_BUFFER_INTERNAL_FORMAT_NV                                       = 0x902D
	PARTIAL_SUCCESS_NV                                                    = 0x902E
	SUCCESS_NV                                                            = 0x902F
	FAILURE_NV                                                            = 0x9030
	YCBYCR8_422_NV                                                        = 0x9031
	YCBAYCR8A_4224_NV                                                     = 0x9032
	Z6Y10Z6CB10Z6Y10Z6CR10_422_NV                                         = 0x9033
	Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV                              = 0x9034
	Z4Y12Z4CB12Z4Y12Z4CR12_422_NV                                         = 0x9035
	Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV                              = 0x9036
	Z4Y12Z4CB12Z4CR12_444_NV                                              = 0x9037
	VIDEO_CAPTURE_FRAME_WIDTH_NV                                          = 0x9038
	VIDEO_CAPTURE_FRAME_HEIGHT_NV                                         = 0x9039
	VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV                                   = 0x903A
	VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV                                   = 0x903B
	VIDEO_CAPTURE_SURFACE_ORIGIN_NV                                       = 0x903C
	TEXTURE_COVERAGE_SAMPLES_NV                                           = 0x9045
	TEXTURE_COLOR_SAMPLES_NV                                              = 0x9046
	GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX                                  = 0x9047
	GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX                            = 0x9048
	GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX                          = 0x9049
	GPU_MEMORY_INFO_EVICTION_COUNT_NVX                                    = 0x904A
	GPU_MEMORY_INFO_EVICTED_MEMORY_NVX                                    = 0x904B
	IMAGE_1D                                                              = 0x904C
	IMAGE_1D_EXT                                                          = 0x904C
	IMAGE_2D                                                              = 0x904D
	IMAGE_2D_EXT                                                          = 0x904D
	IMAGE_3D                                                              = 0x904E
	IMAGE_3D_EXT                                                          = 0x904E
	IMAGE_2D_RECT                                                         = 0x904F
	IMAGE_2D_RECT_EXT                                                     = 0x904F
	IMAGE_CUBE                                                            = 0x9050
	IMAGE_CUBE_EXT                                                        = 0x9050
	IMAGE_BUFFER                                                          = 0x9051
	IMAGE_BUFFER_EXT                                                      = 0x9051
	IMAGE_BUFFER_OES                                                      = 0x9051
	IMAGE_1D_ARRAY                                                        = 0x9052
	IMAGE_1D_ARRAY_EXT                                                    = 0x9052
	IMAGE_2D_ARRAY                                                        = 0x9053
	IMAGE_2D_ARRAY_EXT                                                    = 0x9053
	IMAGE_CUBE_MAP_ARRAY                                                  = 0x9054
	IMAGE_CUBE_MAP_ARRAY_EXT                                              = 0x9054
	IMAGE_CUBE_MAP_ARRAY_OES                                              = 0x9054
	IMAGE_2D_MULTISAMPLE                                                  = 0x9055
	IMAGE_2D_MULTISAMPLE_EXT                                              = 0x9055
	IMAGE_2D_MULTISAMPLE_ARRAY                                            = 0x9056
	IMAGE_2D_MULTISAMPLE_ARRAY_EXT                                        = 0x9056
	INT_IMAGE_1D                                                          = 0x9057
	INT_IMAGE_1D_EXT                                                      = 0x9057
	INT_IMAGE_2D                                                          = 0x9058
	INT_IMAGE_2D_EXT                                                      = 0x9058
	INT_IMAGE_3D                                                          = 0x9059
	INT_IMAGE_3D_EXT                                                      = 0x9059
	INT_IMAGE_2D_RECT                                                     = 0x905A
	INT_IMAGE_2D_RECT_EXT                                                 = 0x905A
	INT_IMAGE_CUBE                                                        = 0x905B
	INT_IMAGE_CUBE_EXT                                                    = 0x905B
	INT_IMAGE_BUFFER                                                      = 0x905C
	INT_IMAGE_BUFFER_EXT                                                  = 0x905C
	INT_IMAGE_BUFFER_OES                                                  = 0x905C
	INT_IMAGE_1D_ARRAY                                                    = 0x905D
	INT_IMAGE_1D_ARRAY_EXT                                                = 0x905D
	INT_IMAGE_2D_ARRAY                                                    = 0x905E
	INT_IMAGE_2D_ARRAY_EXT                                                = 0x905E
	INT_IMAGE_CUBE_MAP_ARRAY                                              = 0x905F
	INT_IMAGE_CUBE_MAP_ARRAY_EXT                                          = 0x905F
	INT_IMAGE_CUBE_MAP_ARRAY_OES                                          = 0x905F
	INT_IMAGE_2D_MULTISAMPLE                                              = 0x9060
	INT_IMAGE_2D_MULTISAMPLE_EXT                                          = 0x9060
	INT_IMAGE_2D_MULTISAMPLE_ARRAY                                        = 0x9061
	INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT                                    = 0x9061
	UNSIGNED_INT_IMAGE_1D                                                 = 0x9062
	UNSIGNED_INT_IMAGE_1D_EXT                                             = 0x9062
	UNSIGNED_INT_IMAGE_2D                                                 = 0x9063
	UNSIGNED_INT_IMAGE_2D_EXT                                             = 0x9063
	UNSIGNED_INT_IMAGE_3D                                                 = 0x9064
	UNSIGNED_INT_IMAGE_3D_EXT                                             = 0x9064
	UNSIGNED_INT_IMAGE_2D_RECT                                            = 0x9065
	UNSIGNED_INT_IMAGE_2D_RECT_EXT                                        = 0x9065
	UNSIGNED_INT_IMAGE_CUBE                                               = 0x9066
	UNSIGNED_INT_IMAGE_CUBE_EXT                                           = 0x9066
	UNSIGNED_INT_IMAGE_BUFFER                                             = 0x9067
	UNSIGNED_INT_IMAGE_BUFFER_EXT                                         = 0x9067
	UNSIGNED_INT_IMAGE_BUFFER_OES                                         = 0x9067
	UNSIGNED_INT_IMAGE_1D_ARRAY                                           = 0x9068
	UNSIGNED_INT_IMAGE_1D_ARRAY_EXT                                       = 0x9068
	UNSIGNED_INT_IMAGE_2D_ARRAY                                           = 0x9069
	UNSIGNED_INT_IMAGE_2D_ARRAY_EXT                                       = 0x9069
	UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY                                     = 0x906A
	UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT                                 = 0x906A
	UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES                                 = 0x906A
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE                                     = 0x906B
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT                                 = 0x906B
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY                               = 0x906C
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT                           = 0x906C
	MAX_IMAGE_SAMPLES                                                     = 0x906D
	MAX_IMAGE_SAMPLES_EXT                                                 = 0x906D
	IMAGE_BINDING_FORMAT                                                  = 0x906E
	IMAGE_BINDING_FORMAT_EXT                                              = 0x906E
	RGB10_A2UI                                                            = 0x906F
	PATH_FORMAT_SVG_NV                                                    = 0x9070
	PATH_FORMAT_PS_NV                                                     = 0x9071
	STANDARD_FONT_NAME_NV                                                 = 0x9072
	SYSTEM_FONT_NAME_NV                                                   = 0x9073
	FILE_NAME_NV                                                          = 0x9074
	PATH_STROKE_WIDTH_NV                                                  = 0x9075
	PATH_END_CAPS_NV                                                      = 0x9076
	PATH_INITIAL_END_CAP_NV                                               = 0x9077
	PATH_TERMINAL_END_CAP_NV                                              = 0x9078
	PATH_JOIN_STYLE_NV                                                    = 0x9079
	PATH_MITER_LIMIT_NV                                                   = 0x907A
	PATH_DASH_CAPS_NV                                                     = 0x907B
	PATH_INITIAL_DASH_CAP_NV                                              = 0x907C
	PATH_TERMINAL_DASH_CAP_NV                                             = 0x907D
	PATH_DASH_OFFSET_NV                                                   = 0x907E
	PATH_CLIENT_LENGTH_NV                                                 = 0x907F
	PATH_FILL_MODE_NV                                                     = 0x9080
	PATH_FILL_MASK_NV                                                     = 0x9081
	PATH_FILL_COVER_MODE_NV                                               = 0x9082
	PATH_STROKE_COVER_MODE_NV                                             = 0x9083
	PATH_STROKE_MASK_NV                                                   = 0x9084
	COUNT_UP_NV                                                           = 0x9088
	COUNT_DOWN_NV                                                         = 0x9089
	PATH_OBJECT_BOUNDING_BOX_NV                                           = 0x908A
	CONVEX_HULL_NV                                                        = 0x908B
	BOUNDING_BOX_NV                                                       = 0x908D
	TRANSLATE_X_NV                                                        = 0x908E
	TRANSLATE_Y_NV                                                        = 0x908F
	TRANSLATE_2D_NV                                                       = 0x9090
	TRANSLATE_3D_NV                                                       = 0x9091
	AFFINE_2D_NV                                                          = 0x9092
	AFFINE_3D_NV                                                          = 0x9094
	TRANSPOSE_AFFINE_2D_NV                                                = 0x9096
	TRANSPOSE_AFFINE_3D_NV                                                = 0x9098
	UTF8_NV                                                               = 0x909A
	UTF16_NV                                                              = 0x909B
	BOUNDING_BOX_OF_BOUNDING_BOXES_NV                                     = 0x909C
	PATH_COMMAND_COUNT_NV                                                 = 0x909D
	PATH_COORD_COUNT_NV                                                   = 0x909E
	PATH_DASH_ARRAY_COUNT_NV                                              = 0x909F
	PATH_COMPUTED_LENGTH_NV                                               = 0x90A0
	PATH_FILL_BOUNDING_BOX_NV                                             = 0x90A1
	PATH_STROKE_BOUNDING_BOX_NV                                           = 0x90A2
	SQUARE_NV                                                             = 0x90A3
	ROUND_NV                                                              = 0x90A4
	TRIANGULAR_NV                                                         = 0x90A5
	BEVEL_NV                                                              = 0x90A6
	MITER_REVERT_NV                                                       = 0x90A7
	MITER_TRUNCATE_NV                                                     = 0x90A8
	SKIP_MISSING_GLYPH_NV                                                 = 0x90A9
	USE_MISSING_GLYPH_NV                                                  = 0x90AA
	PATH_ERROR_POSITION_NV                                                = 0x90AB
	PATH_FOG_GEN_MODE_NV                                                  = 0x90AC
	ACCUM_ADJACENT_PAIRS_NV                                               = 0x90AD
	ADJACENT_PAIRS_NV                                                     = 0x90AE
	FIRST_TO_REST_NV                                                      = 0x90AF
	PATH_GEN_MODE_NV                                                      = 0x90B0
	PATH_GEN_COEFF_NV                                                     = 0x90B1
	PATH_GEN_COLOR_FORMAT_NV                                              = 0x90B2
	PATH_GEN_COMPONENTS_NV                                                = 0x90B3
	PATH_DASH_OFFSET_RESET_NV                                             = 0x90B4
	MOVE_TO_RESETS_NV                                                     = 0x90B5
	MOVE_TO_CONTINUES_NV                                                  = 0x90B6
	PATH_STENCIL_FUNC_NV                                                  = 0x90B7
	PATH_STENCIL_REF_NV                                                   = 0x90B8
	PATH_STENCIL_VALUE_MASK_NV                                            = 0x90B9
	SCALED_RESOLVE_FASTEST_EXT                                            = 0x90BA
	SCALED_RESOLVE_NICEST_EXT                                             = 0x90BB
	MIN_MAP_BUFFER_ALIGNMENT                                              = 0x90BC
	PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV                                   = 0x90BD
	PATH_STENCIL_DEPTH_OFFSET_UNITS_NV                                    = 0x90BE
	PATH_COVER_DEPTH_FUNC_NV                                              = 0x90BF
	IMAGE_FORMAT_COMPATIBILITY_TYPE                                       = 0x90C7
	IMAGE_FORMAT_COMPATIBILITY_BY_SIZE                                    = 0x90C8
	IMAGE_FORMAT_COMPATIBILITY_BY_CLASS                                   = 0x90C9
	MAX_VERTEX_IMAGE_UNIFORMS                                             = 0x90CA
	MAX_TESS_CONTROL_IMAGE_UNIFORMS                                       = 0x90CB
	MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT                                   = 0x90CB
	MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES                                   = 0x90CB
	MAX_TESS_EVALUATION_IMAGE_UNIFORMS                                    = 0x90CC
	MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT                                = 0x90CC
	MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES                                = 0x90CC
	MAX_GEOMETRY_IMAGE_UNIFORMS                                           = 0x90CD
	MAX_GEOMETRY_IMAGE_UNIFORMS_EXT                                       = 0x90CD
	MAX_GEOMETRY_IMAGE_UNIFORMS_OES                                       = 0x90CD
	MAX_FRAGMENT_IMAGE_UNIFORMS                                           = 0x90CE
	MAX_COMBINED_IMAGE_UNIFORMS                                           = 0x90CF
	MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV                                   = 0x90D0
	MAX_DEEP_3D_TEXTURE_DEPTH_NV                                          = 0x90D1
	SHADER_STORAGE_BUFFER                                                 = 0x90D2
	SHADER_STORAGE_BUFFER_BINDING                                         = 0x90D3
	SHADER_STORAGE_BUFFER_START                                           = 0x90D4
	SHADER_STORAGE_BUFFER_SIZE                                            = 0x90D5
	MAX_VERTEX_SHADER_STORAGE_BLOCKS                                      = 0x90D6
	MAX_GEOMETRY_SHADER_STORAGE_BLOCKS                                    = 0x90D7
	MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT                                = 0x90D7
	MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES                                = 0x90D7
	MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS                                = 0x90D8
	MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT                            = 0x90D8
	MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES                            = 0x90D8
	MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS                             = 0x90D9
	MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT                         = 0x90D9
	MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES                         = 0x90D9
	MAX_FRAGMENT_SHADER_STORAGE_BLOCKS                                    = 0x90DA
	MAX_COMPUTE_SHADER_STORAGE_BLOCKS                                     = 0x90DB
	MAX_COMBINED_SHADER_STORAGE_BLOCKS                                    = 0x90DC
	MAX_SHADER_STORAGE_BUFFER_BINDINGS                                    = 0x90DD
	MAX_SHADER_STORAGE_BLOCK_SIZE                                         = 0x90DE
	SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT                                = 0x90DF
	SYNC_X11_FENCE_EXT                                                    = 0x90E1
	DEPTH_STENCIL_TEXTURE_MODE                                            = 0x90EA
	MAX_COMPUTE_WORK_GROUP_INVOCATIONS                                    = 0x90EB
	MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB                               = 0x90EB
	UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER                            = 0x90EC
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER                    = 0x90ED
	DISPATCH_INDIRECT_BUFFER                                              = 0x90EE
	DISPATCH_INDIRECT_BUFFER_BINDING                                      = 0x90EF
	COLOR_ATTACHMENT_EXT                                                  = 0x90F0
	MULTIVIEW_EXT                                                         = 0x90F1
	MAX_MULTIVIEW_BUFFERS_EXT                                             = 0x90F2
	CONTEXT_ROBUST_ACCESS                                                 = 0x90F3
	CONTEXT_ROBUST_ACCESS_EXT                                             = 0x90F3
	CONTEXT_ROBUST_ACCESS_KHR                                             = 0x90F3
	COMPUTE_PROGRAM_NV                                                    = 0x90FB
	COMPUTE_PROGRAM_PARAMETER_BUFFER_NV                                   = 0x90FC
	TEXTURE_2D_MULTISAMPLE                                                = 0x9100
	PROXY_TEXTURE_2D_MULTISAMPLE                                          = 0x9101
	TEXTURE_2D_MULTISAMPLE_ARRAY                                          = 0x9102
	TEXTURE_2D_MULTISAMPLE_ARRAY_OES                                      = 0x9102
	PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY                                    = 0x9103
	TEXTURE_BINDING_2D_MULTISAMPLE                                        = 0x9104
	TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY                                  = 0x9105
	TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES                              = 0x9105
	TEXTURE_SAMPLES                                                       = 0x9106
	TEXTURE_FIXED_SAMPLE_LOCATIONS                                        = 0x9107
	SAMPLER_2D_MULTISAMPLE                                                = 0x9108
	INT_SAMPLER_2D_MULTISAMPLE                                            = 0x9109
	UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE                                   = 0x910A
	SAMPLER_2D_MULTISAMPLE_ARRAY                                          = 0x910B
	SAMPLER_2D_MULTISAMPLE_ARRAY_OES                                      = 0x910B
	INT_SAMPLER_2D_MULTISAMPLE_ARRAY                                      = 0x910C
	INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES                                  = 0x910C
	UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY                             = 0x910D
	UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES                         = 0x910D
	MAX_COLOR_TEXTURE_SAMPLES                                             = 0x910E
	MAX_DEPTH_TEXTURE_SAMPLES                                             = 0x910F
	MAX_INTEGER_SAMPLES                                                   = 0x9110
	MAX_SERVER_WAIT_TIMEOUT                                               = 0x9111
	MAX_SERVER_WAIT_TIMEOUT_APPLE                                         = 0x9111
	OBJECT_TYPE                                                           = 0x9112
	OBJECT_TYPE_APPLE                                                     = 0x9112
	SYNC_CONDITION                                                        = 0x9113
	SYNC_CONDITION_APPLE                                                  = 0x9113
	SYNC_STATUS                                                           = 0x9114
	SYNC_STATUS_APPLE                                                     = 0x9114
	SYNC_FLAGS                                                            = 0x9115
	SYNC_FLAGS_APPLE                                                      = 0x9115
	SYNC_FENCE                                                            = 0x9116
	SYNC_FENCE_APPLE                                                      = 0x9116
	SYNC_GPU_COMMANDS_COMPLETE                                            = 0x9117
	SYNC_GPU_COMMANDS_COMPLETE_APPLE                                      = 0x9117
	UNSIGNALED                                                            = 0x9118
	UNSIGNALED_APPLE                                                      = 0x9118
	SIGNALED                                                              = 0x9119
	SIGNALED_APPLE                                                        = 0x9119
	ALREADY_SIGNALED                                                      = 0x911A
	ALREADY_SIGNALED_APPLE                                                = 0x911A
	TIMEOUT_EXPIRED                                                       = 0x911B
	TIMEOUT_EXPIRED_APPLE                                                 = 0x911B
	CONDITION_SATISFIED                                                   = 0x911C
	CONDITION_SATISFIED_APPLE                                             = 0x911C
	WAIT_FAILED                                                           = 0x911D
	WAIT_FAILED_APPLE                                                     = 0x911D
	BUFFER_ACCESS_FLAGS                                                   = 0x911F
	BUFFER_MAP_LENGTH                                                     = 0x9120
	BUFFER_MAP_OFFSET                                                     = 0x9121
	MAX_VERTEX_OUTPUT_COMPONENTS                                          = 0x9122
	MAX_GEOMETRY_INPUT_COMPONENTS                                         = 0x9123
	MAX_GEOMETRY_INPUT_COMPONENTS_EXT                                     = 0x9123
	MAX_GEOMETRY_INPUT_COMPONENTS_OES                                     = 0x9123
	MAX_GEOMETRY_OUTPUT_COMPONENTS                                        = 0x9124
	MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT                                    = 0x9124
	MAX_GEOMETRY_OUTPUT_COMPONENTS_OES                                    = 0x9124
	MAX_FRAGMENT_INPUT_COMPONENTS                                         = 0x9125
	CONTEXT_PROFILE_MASK                                                  = 0x9126
	UNPACK_COMPRESSED_BLOCK_WIDTH                                         = 0x9127
	UNPACK_COMPRESSED_BLOCK_HEIGHT                                        = 0x9128
	UNPACK_COMPRESSED_BLOCK_DEPTH                                         = 0x9129
	UNPACK_COMPRESSED_BLOCK_SIZE                                          = 0x912A
	PACK_COMPRESSED_BLOCK_WIDTH                                           = 0x912B
	PACK_COMPRESSED_BLOCK_HEIGHT                                          = 0x912C
	PACK_COMPRESSED_BLOCK_DEPTH                                           = 0x912D
	PACK_COMPRESSED_BLOCK_SIZE                                            = 0x912E
	TEXTURE_IMMUTABLE_FORMAT                                              = 0x912F
	TEXTURE_IMMUTABLE_FORMAT_EXT                                          = 0x912F
	SGX_PROGRAM_BINARY_IMG                                                = 0x9130
	RENDERBUFFER_SAMPLES_IMG                                              = 0x9133
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG                                = 0x9134
	MAX_SAMPLES_IMG                                                       = 0x9135
	TEXTURE_SAMPLES_IMG                                                   = 0x9136
	COMPRESSED_RGBA_PVRTC_2BPPV2_IMG                                      = 0x9137
	COMPRESSED_RGBA_PVRTC_4BPPV2_IMG                                      = 0x9138
	CUBIC_IMG                                                             = 0x9139
	CUBIC_MIPMAP_NEAREST_IMG                                              = 0x913A
	CUBIC_MIPMAP_LINEAR_IMG                                               = 0x913B
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG                 = 0x913C
	NUM_DOWNSAMPLE_SCALES_IMG                                             = 0x913D
	DOWNSAMPLE_SCALES_IMG                                                 = 0x913E
	FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG                              = 0x913F
	MAX_DEBUG_MESSAGE_LENGTH                                              = 0x9143
	MAX_DEBUG_MESSAGE_LENGTH_AMD                                          = 0x9143
	MAX_DEBUG_MESSAGE_LENGTH_ARB                                          = 0x9143
	MAX_DEBUG_MESSAGE_LENGTH_KHR                                          = 0x9143
	MAX_DEBUG_LOGGED_MESSAGES                                             = 0x9144
	MAX_DEBUG_LOGGED_MESSAGES_AMD                                         = 0x9144
	MAX_DEBUG_LOGGED_MESSAGES_ARB                                         = 0x9144
	MAX_DEBUG_LOGGED_MESSAGES_KHR                                         = 0x9144
	DEBUG_LOGGED_MESSAGES                                                 = 0x9145
	DEBUG_LOGGED_MESSAGES_AMD                                             = 0x9145
	DEBUG_LOGGED_MESSAGES_ARB                                             = 0x9145
	DEBUG_LOGGED_MESSAGES_KHR                                             = 0x9145
	DEBUG_SEVERITY_HIGH                                                   = 0x9146
	DEBUG_SEVERITY_HIGH_AMD                                               = 0x9146
	DEBUG_SEVERITY_HIGH_ARB                                               = 0x9146
	DEBUG_SEVERITY_HIGH_KHR                                               = 0x9146
	DEBUG_SEVERITY_MEDIUM                                                 = 0x9147
	DEBUG_SEVERITY_MEDIUM_AMD                                             = 0x9147
	DEBUG_SEVERITY_MEDIUM_ARB                                             = 0x9147
	DEBUG_SEVERITY_MEDIUM_KHR                                             = 0x9147
	DEBUG_SEVERITY_LOW                                                    = 0x9148
	DEBUG_SEVERITY_LOW_AMD                                                = 0x9148
	DEBUG_SEVERITY_LOW_ARB                                                = 0x9148
	DEBUG_SEVERITY_LOW_KHR                                                = 0x9148
	DEBUG_CATEGORY_API_ERROR_AMD                                          = 0x9149
	DEBUG_CATEGORY_WINDOW_SYSTEM_AMD                                      = 0x914A
	DEBUG_CATEGORY_DEPRECATION_AMD                                        = 0x914B
	DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD                                 = 0x914C
	DEBUG_CATEGORY_PERFORMANCE_AMD                                        = 0x914D
	DEBUG_CATEGORY_SHADER_COMPILER_AMD                                    = 0x914E
	DEBUG_CATEGORY_APPLICATION_AMD                                        = 0x914F
	DEBUG_CATEGORY_OTHER_AMD                                              = 0x9150
	BUFFER_OBJECT_EXT                                                     = 0x9151
	DATA_BUFFER_AMD                                                       = 0x9151
	PERFORMANCE_MONITOR_AMD                                               = 0x9152
	QUERY_OBJECT_AMD                                                      = 0x9153
	QUERY_OBJECT_EXT                                                      = 0x9153
	VERTEX_ARRAY_OBJECT_AMD                                               = 0x9154
	VERTEX_ARRAY_OBJECT_EXT                                               = 0x9154
	SAMPLER_OBJECT_AMD                                                    = 0x9155
	EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD                                    = 0x9160
	QUERY_BUFFER                                                          = 0x9192
	QUERY_BUFFER_AMD                                                      = 0x9192
	QUERY_BUFFER_BINDING                                                  = 0x9193
	QUERY_BUFFER_BINDING_AMD                                              = 0x9193
	QUERY_RESULT_NO_WAIT                                                  = 0x9194
	QUERY_RESULT_NO_WAIT_AMD                                              = 0x9194
	VIRTUAL_PAGE_SIZE_X_ARB                                               = 0x9195
	VIRTUAL_PAGE_SIZE_X_EXT                                               = 0x9195
	VIRTUAL_PAGE_SIZE_X_AMD                                               = 0x9195
	VIRTUAL_PAGE_SIZE_Y_ARB                                               = 0x9196
	VIRTUAL_PAGE_SIZE_Y_EXT                                               = 0x9196
	VIRTUAL_PAGE_SIZE_Y_AMD                                               = 0x9196
	VIRTUAL_PAGE_SIZE_Z_ARB                                               = 0x9197
	VIRTUAL_PAGE_SIZE_Z_EXT                                               = 0x9197
	VIRTUAL_PAGE_SIZE_Z_AMD                                               = 0x9197
	MAX_SPARSE_TEXTURE_SIZE_ARB                                           = 0x9198
	MAX_SPARSE_TEXTURE_SIZE_EXT                                           = 0x9198
	MAX_SPARSE_TEXTURE_SIZE_AMD                                           = 0x9198
	MAX_SPARSE_3D_TEXTURE_SIZE_ARB                                        = 0x9199
	MAX_SPARSE_3D_TEXTURE_SIZE_EXT                                        = 0x9199
	MAX_SPARSE_3D_TEXTURE_SIZE_AMD                                        = 0x9199
	MAX_SPARSE_ARRAY_TEXTURE_LAYERS                                       = 0x919A
	MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB                                   = 0x919A
	MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT                                   = 0x919A
	MIN_SPARSE_LEVEL_AMD                                                  = 0x919B
	MIN_LOD_WARNING_AMD                                                   = 0x919C
	TEXTURE_BUFFER_OFFSET                                                 = 0x919D
	TEXTURE_BUFFER_OFFSET_EXT                                             = 0x919D
	TEXTURE_BUFFER_OFFSET_OES                                             = 0x919D
	TEXTURE_BUFFER_SIZE                                                   = 0x919E
	TEXTURE_BUFFER_SIZE_EXT                                               = 0x919E
	TEXTURE_BUFFER_SIZE_OES                                               = 0x919E
	TEXTURE_BUFFER_OFFSET_ALIGNMENT                                       = 0x919F
	TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT                                   = 0x919F
	TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES                                   = 0x919F
	STREAM_RASTERIZATION_AMD                                              = 0x91A0
	VERTEX_ELEMENT_SWIZZLE_AMD                                            = 0x91A4
	VERTEX_ID_SWIZZLE_AMD                                                 = 0x91A5
	TEXTURE_SPARSE_ARB                                                    = 0x91A6
	TEXTURE_SPARSE_EXT                                                    = 0x91A6
	VIRTUAL_PAGE_SIZE_INDEX_ARB                                           = 0x91A7
	VIRTUAL_PAGE_SIZE_INDEX_EXT                                           = 0x91A7
	NUM_VIRTUAL_PAGE_SIZES_ARB                                            = 0x91A8
	NUM_VIRTUAL_PAGE_SIZES_EXT                                            = 0x91A8
	SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB                            = 0x91A9
	SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT                            = 0x91A9
	NUM_SPARSE_LEVELS_ARB                                                 = 0x91AA
	NUM_SPARSE_LEVELS_EXT                                                 = 0x91AA
	PIXELS_PER_SAMPLE_PATTERN_X_AMD                                       = 0x91AE
	PIXELS_PER_SAMPLE_PATTERN_Y_AMD                                       = 0x91AF
	MAX_SHADER_COMPILER_THREADS_KHR                                       = 0x91B0
	MAX_SHADER_COMPILER_THREADS_ARB                                       = 0x91B0
	COMPLETION_STATUS_KHR                                                 = 0x91B1
	COMPLETION_STATUS_ARB                                                 = 0x91B1
	RENDERBUFFER_STORAGE_SAMPLES_AMD                                      = 0x91B2
	MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD                                     = 0x91B3
	MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD                             = 0x91B4
	MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD                             = 0x91B5
	NUM_SUPPORTED_MULTISAMPLE_MODES_AMD                                   = 0x91B6
	SUPPORTED_MULTISAMPLE_MODES_AMD                                       = 0x91B7
	COMPUTE_SHADER                                                        = 0x91B9
	MAX_COMPUTE_UNIFORM_BLOCKS                                            = 0x91BB
	MAX_COMPUTE_TEXTURE_IMAGE_UNITS                                       = 0x91BC
	MAX_COMPUTE_IMAGE_UNIFORMS                                            = 0x91BD
	MAX_COMPUTE_WORK_GROUP_COUNT                                          = 0x91BE
	MAX_COMPUTE_WORK_GROUP_SIZE                                           = 0x91BF
	MAX_COMPUTE_FIXED_GROUP_SIZE_ARB                                      = 0x91BF
	FLOAT16_MAT2_AMD                                                      = 0x91C5
	FLOAT16_MAT3_AMD                                                      = 0x91C6
	FLOAT16_MAT4_AMD                                                      = 0x91C7
	FLOAT16_MAT2x3_AMD                                                    = 0x91C8
	FLOAT16_MAT2x4_AMD                                                    = 0x91C9
	FLOAT16_MAT3x2_AMD                                                    = 0x91CA
	FLOAT16_MAT3x4_AMD                                                    = 0x91CB
	FLOAT16_MAT4x2_AMD                                                    = 0x91CC
	FLOAT16_MAT4x3_AMD                                                    = 0x91CD
	UNPACK_FLIP_Y_WEBGL                                                   = 0x9240
	UNPACK_PREMULTIPLY_ALPHA_WEBGL                                        = 0x9241
	CONTEXT_LOST_WEBGL                                                    = 0x9242
	UNPACK_COLORSPACE_CONVERSION_WEBGL                                    = 0x9243
	BROWSER_DEFAULT_WEBGL                                                 = 0x9244
	SHADER_BINARY_DMP                                                     = 0x9250
	SMAPHS30_PROGRAM_BINARY_DMP                                           = 0x9251
	SMAPHS_PROGRAM_BINARY_DMP                                             = 0x9252
	DMP_PROGRAM_BINARY_DMP                                                = 0x9253
	GCCSO_SHADER_BINARY_FJ                                                = 0x9260
	COMPRESSED_R11_EAC                                                    = 0x9270
	COMPRESSED_R11_EAC_OES                                                = 0x9270
	COMPRESSED_SIGNED_R11_EAC                                             = 0x9271
	COMPRESSED_SIGNED_R11_EAC_OES                                         = 0x9271
	COMPRESSED_RG11_EAC                                                   = 0x9272
	COMPRESSED_RG11_EAC_OES                                               = 0x9272
	COMPRESSED_SIGNED_RG11_EAC                                            = 0x9273
	COMPRESSED_SIGNED_RG11_EAC_OES                                        = 0x9273
	COMPRESSED_RGB8_ETC2                                                  = 0x9274
	COMPRESSED_RGB8_ETC2_OES                                              = 0x9274
	COMPRESSED_SRGB8_ETC2                                                 = 0x9275
	COMPRESSED_SRGB8_ETC2_OES                                             = 0x9275
	COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2                              = 0x9276
	COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES                          = 0x9276
	COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2                             = 0x9277
	COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES                         = 0x9277
	COMPRESSED_RGBA8_ETC2_EAC                                             = 0x9278
	COMPRESSED_RGBA8_ETC2_EAC_OES                                         = 0x9278
	COMPRESSED_SRGB8_ALPHA8_ETC2_EAC                                      = 0x9279
	COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES                                  = 0x9279
	BLEND_PREMULTIPLIED_SRC_NV                                            = 0x9280
	BLEND_OVERLAP_NV                                                      = 0x9281
	UNCORRELATED_NV                                                       = 0x9282
	DISJOINT_NV                                                           = 0x9283
	CONJOINT_NV                                                           = 0x9284
	BLEND_ADVANCED_COHERENT_KHR                                           = 0x9285
	BLEND_ADVANCED_COHERENT_NV                                            = 0x9285
	SRC_NV                                                                = 0x9286
	DST_NV                                                                = 0x9287
	SRC_OVER_NV                                                           = 0x9288
	DST_OVER_NV                                                           = 0x9289
	SRC_IN_NV                                                             = 0x928A
	DST_IN_NV                                                             = 0x928B
	SRC_OUT_NV                                                            = 0x928C
	DST_OUT_NV                                                            = 0x928D
	SRC_ATOP_NV                                                           = 0x928E
	DST_ATOP_NV                                                           = 0x928F
	PLUS_NV                                                               = 0x9291
	PLUS_DARKER_NV                                                        = 0x9292
	MULTIPLY                                                              = 0x9294
	MULTIPLY_KHR                                                          = 0x9294
	MULTIPLY_NV                                                           = 0x9294
	SCREEN                                                                = 0x9295
	SCREEN_KHR                                                            = 0x9295
	SCREEN_NV                                                             = 0x9295
	OVERLAY                                                               = 0x9296
	OVERLAY_KHR                                                           = 0x9296
	OVERLAY_NV                                                            = 0x9296
	DARKEN                                                                = 0x9297
	DARKEN_KHR                                                            = 0x9297
	DARKEN_NV                                                             = 0x9297
	LIGHTEN                                                               = 0x9298
	LIGHTEN_KHR                                                           = 0x9298
	LIGHTEN_NV                                                            = 0x9298
	COLORDODGE                                                            = 0x9299
	COLORDODGE_KHR                                                        = 0x9299
	COLORDODGE_NV                                                         = 0x9299
	COLORBURN                                                             = 0x929A
	COLORBURN_KHR                                                         = 0x929A
	COLORBURN_NV                                                          = 0x929A
	HARDLIGHT                                                             = 0x929B
	HARDLIGHT_KHR                                                         = 0x929B
	HARDLIGHT_NV                                                          = 0x929B
	SOFTLIGHT                                                             = 0x929C
	SOFTLIGHT_KHR                                                         = 0x929C
	SOFTLIGHT_NV                                                          = 0x929C
	DIFFERENCE                                                            = 0x929E
	DIFFERENCE_KHR                                                        = 0x929E
	DIFFERENCE_NV                                                         = 0x929E
	MINUS_NV                                                              = 0x929F
	EXCLUSION                                                             = 0x92A0
	EXCLUSION_KHR                                                         = 0x92A0
	EXCLUSION_NV                                                          = 0x92A0
	CONTRAST_NV                                                           = 0x92A1
	INVERT_RGB_NV                                                         = 0x92A3
	LINEARDODGE_NV                                                        = 0x92A4
	LINEARBURN_NV                                                         = 0x92A5
	VIVIDLIGHT_NV                                                         = 0x92A6
	LINEARLIGHT_NV                                                        = 0x92A7
	PINLIGHT_NV                                                           = 0x92A8
	HARDMIX_NV                                                            = 0x92A9
	HSL_HUE                                                               = 0x92AD
	HSL_HUE_KHR                                                           = 0x92AD
	HSL_HUE_NV                                                            = 0x92AD
	HSL_SATURATION                                                        = 0x92AE
	HSL_SATURATION_KHR                                                    = 0x92AE
	HSL_SATURATION_NV                                                     = 0x92AE
	HSL_COLOR                                                             = 0x92AF
	HSL_COLOR_KHR                                                         = 0x92AF
	HSL_COLOR_NV                                                          = 0x92AF
	HSL_LUMINOSITY                                                        = 0x92B0
	HSL_LUMINOSITY_KHR                                                    = 0x92B0
	HSL_LUMINOSITY_NV                                                     = 0x92B0
	PLUS_CLAMPED_NV                                                       = 0x92B1
	PLUS_CLAMPED_ALPHA_NV                                                 = 0x92B2
	MINUS_CLAMPED_NV                                                      = 0x92B3
	INVERT_OVG_NV                                                         = 0x92B4
	MAX_LGPU_GPUS_NVX                                                     = 0x92BA
	MULTICAST_GPUS_NV                                                     = 0x92BA
	PURGED_CONTEXT_RESET_NV                                               = 0x92BB
	PRIMITIVE_BOUNDING_BOX_ARB                                            = 0x92BE
	PRIMITIVE_BOUNDING_BOX                                                = 0x92BE
	PRIMITIVE_BOUNDING_BOX_EXT                                            = 0x92BE
	PRIMITIVE_BOUNDING_BOX_OES                                            = 0x92BE
	ALPHA_TO_COVERAGE_DITHER_MODE_NV                                      = 0x92BF
	ATOMIC_COUNTER_BUFFER                                                 = 0x92C0
	ATOMIC_COUNTER_BUFFER_BINDING                                         = 0x92C1
	ATOMIC_COUNTER_BUFFER_START                                           = 0x92C2
	ATOMIC_COUNTER_BUFFER_SIZE                                            = 0x92C3
	ATOMIC_COUNTER_BUFFER_DATA_SIZE                                       = 0x92C4
	ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS                          = 0x92C5
	ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES                   = 0x92C6
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER                     = 0x92C7
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER               = 0x92C8
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER            = 0x92C9
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER                   = 0x92CA
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER                   = 0x92CB
	MAX_VERTEX_ATOMIC_COUNTER_BUFFERS                                     = 0x92CC
	MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS                               = 0x92CD
	MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT                           = 0x92CD
	MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES                           = 0x92CD
	MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS                            = 0x92CE
	MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT                        = 0x92CE
	MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES                        = 0x92CE
	MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS                                   = 0x92CF
	MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT                               = 0x92CF
	MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES                               = 0x92CF
	MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS                                   = 0x92D0
	MAX_COMBINED_ATOMIC_COUNTER_BUFFERS                                   = 0x92D1
	MAX_VERTEX_ATOMIC_COUNTERS                                            = 0x92D2
	MAX_TESS_CONTROL_ATOMIC_COUNTERS                                      = 0x92D3
	MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT                                  = 0x92D3
	MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES                                  = 0x92D3
	MAX_TESS_EVALUATION_ATOMIC_COUNTERS                                   = 0x92D4
	MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT                               = 0x92D4
	MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES                               = 0x92D4
	MAX_GEOMETRY_ATOMIC_COUNTERS                                          = 0x92D5
	MAX_GEOMETRY_ATOMIC_COUNTERS_EXT                                      = 0x92D5
	MAX_GEOMETRY_ATOMIC_COUNTERS_OES                                      = 0x92D5
	MAX_FRAGMENT_ATOMIC_COUNTERS                                          = 0x92D6
	MAX_COMBINED_ATOMIC_COUNTERS                                          = 0x92D7
	MAX_ATOMIC_COUNTER_BUFFER_SIZE                                        = 0x92D8
	ACTIVE_ATOMIC_COUNTER_BUFFERS                                         = 0x92D9
	UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX                                   = 0x92DA
	UNSIGNED_INT_ATOMIC_COUNTER                                           = 0x92DB
	MAX_ATOMIC_COUNTER_BUFFER_BINDINGS                                    = 0x92DC
	FRAGMENT_COVERAGE_TO_COLOR_NV                                         = 0x92DD
	FRAGMENT_COVERAGE_COLOR_NV                                            = 0x92DE
	MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV                                 = 0x92DF
	DEBUG_OUTPUT                                                          = 0x92E0
	DEBUG_OUTPUT_KHR                                                      = 0x92E0
	UNIFORM                                                               = 0x92E1
	UNIFORM_BLOCK                                                         = 0x92E2
	PROGRAM_INPUT                                                         = 0x92E3
	PROGRAM_OUTPUT                                                        = 0x92E4
	BUFFER_VARIABLE                                                       = 0x92E5
	SHADER_STORAGE_BLOCK                                                  = 0x92E6
	IS_PER_PATCH                                                          = 0x92E7
	IS_PER_PATCH_EXT                                                      = 0x92E7
	IS_PER_PATCH_OES                                                      = 0x92E7
	VERTEX_SUBROUTINE                                                     = 0x92E8
	TESS_CONTROL_SUBROUTINE                                               = 0x92E9
	TESS_EVALUATION_SUBROUTINE                                            = 0x92EA
	GEOMETRY_SUBROUTINE                                                   = 0x92EB
	FRAGMENT_SUBROUTINE                                                   = 0x92EC
	COMPUTE_SUBROUTINE                                                    = 0x92ED
	VERTEX_SUBROUTINE_UNIFORM                                             = 0x92EE
	TESS_CONTROL_SUBROUTINE_UNIFORM                                       = 0x92EF
	TESS_EVALUATION_SUBROUTINE_UNIFORM                                    = 0x92F0
	GEOMETRY_SUBROUTINE_UNIFORM                                           = 0x92F1
	FRAGMENT_SUBROUTINE_UNIFORM                                           = 0x92F2
	COMPUTE_SUBROUTINE_UNIFORM                                            = 0x92F3
	TRANSFORM_FEEDBACK_VARYING                                            = 0x92F4
	ACTIVE_RESOURCES                                                      = 0x92F5
	MAX_NAME_LENGTH                                                       = 0x92F6
	MAX_NUM_ACTIVE_VARIABLES                                              = 0x92F7
	MAX_NUM_COMPATIBLE_SUBROUTINES                                        = 0x92F8
	NAME_LENGTH                                                           = 0x92F9
	TYPE                                                                  = 0x92FA
	ARRAY_SIZE                                                            = 0x92FB
	OFFSET                                                                = 0x92FC
	BLOCK_INDEX                                                           = 0x92FD
	ARRAY_STRIDE                                                          = 0x92FE
	MATRIX_STRIDE                                                         = 0x92FF
	IS_ROW_MAJOR                                                          = 0x9300
	ATOMIC_COUNTER_BUFFER_INDEX                                           = 0x9301
	BUFFER_BINDING                                                        = 0x9302
	BUFFER_DATA_SIZE                                                      = 0x9303
	NUM_ACTIVE_VARIABLES                                                  = 0x9304
	ACTIVE_VARIABLES                                                      = 0x9305
	REFERENCED_BY_VERTEX_SHADER                                           = 0x9306
	REFERENCED_BY_TESS_CONTROL_SHADER                                     = 0x9307
	REFERENCED_BY_TESS_CONTROL_SHADER_EXT                                 = 0x9307
	REFERENCED_BY_TESS_CONTROL_SHADER_OES                                 = 0x9307
	REFERENCED_BY_TESS_EVALUATION_SHADER                                  = 0x9308
	REFERENCED_BY_TESS_EVALUATION_SHADER_EXT                              = 0x9308
	REFERENCED_BY_TESS_EVALUATION_SHADER_OES                              = 0x9308
	REFERENCED_BY_GEOMETRY_SHADER                                         = 0x9309
	REFERENCED_BY_GEOMETRY_SHADER_EXT                                     = 0x9309
	REFERENCED_BY_GEOMETRY_SHADER_OES                                     = 0x9309
	REFERENCED_BY_FRAGMENT_SHADER                                         = 0x930A
	REFERENCED_BY_COMPUTE_SHADER                                          = 0x930B
	TOP_LEVEL_ARRAY_SIZE                                                  = 0x930C
	TOP_LEVEL_ARRAY_STRIDE                                                = 0x930D
	LOCATION                                                              = 0x930E
	LOCATION_INDEX                                                        = 0x930F
	LOCATION_INDEX_EXT                                                    = 0x930F
	FRAMEBUFFER_DEFAULT_WIDTH                                             = 0x9310
	FRAMEBUFFER_DEFAULT_HEIGHT                                            = 0x9311
	FRAMEBUFFER_DEFAULT_LAYERS                                            = 0x9312
	FRAMEBUFFER_DEFAULT_LAYERS_EXT                                        = 0x9312
	FRAMEBUFFER_DEFAULT_LAYERS_OES                                        = 0x9312
	FRAMEBUFFER_DEFAULT_SAMPLES                                           = 0x9313
	FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS                            = 0x9314
	MAX_FRAMEBUFFER_WIDTH                                                 = 0x9315
	MAX_FRAMEBUFFER_HEIGHT                                                = 0x9316
	MAX_FRAMEBUFFER_LAYERS                                                = 0x9317
	MAX_FRAMEBUFFER_LAYERS_EXT                                            = 0x9317
	MAX_FRAMEBUFFER_LAYERS_OES                                            = 0x9317
	MAX_FRAMEBUFFER_SAMPLES                                               = 0x9318
	RASTER_MULTISAMPLE_EXT                                                = 0x9327
	RASTER_SAMPLES_EXT                                                    = 0x9328
	MAX_RASTER_SAMPLES_EXT                                                = 0x9329
	RASTER_FIXED_SAMPLE_LOCATIONS_EXT                                     = 0x932A
	MULTISAMPLE_RASTERIZATION_ALLOWED_EXT                                 = 0x932B
	EFFECTIVE_RASTER_SAMPLES_EXT                                          = 0x932C
	DEPTH_SAMPLES_NV                                                      = 0x932D
	STENCIL_SAMPLES_NV                                                    = 0x932E
	MIXED_DEPTH_SAMPLES_SUPPORTED_NV                                      = 0x932F
	MIXED_STENCIL_SAMPLES_SUPPORTED_NV                                    = 0x9330
	COVERAGE_MODULATION_TABLE_NV                                          = 0x9331
	COVERAGE_MODULATION_NV                                                = 0x9332
	COVERAGE_MODULATION_TABLE_SIZE_NV                                     = 0x9333
	WARP_SIZE_NV                                                          = 0x9339
	WARPS_PER_SM_NV                                                       = 0x933A
	SM_COUNT_NV                                                           = 0x933B
	FILL_RECTANGLE_NV                                                     = 0x933C
	SAMPLE_LOCATION_SUBPIXEL_BITS_ARB                                     = 0x933D
	SAMPLE_LOCATION_SUBPIXEL_BITS_NV                                      = 0x933D
	SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB                                  = 0x933E
	SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV                                   = 0x933E
	SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB                                 = 0x933F
	SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV                                  = 0x933F
	PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB                           = 0x9340
	PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV                            = 0x9340
	PROGRAMMABLE_SAMPLE_LOCATION_ARB                                      = 0x9341
	PROGRAMMABLE_SAMPLE_LOCATION_NV                                       = 0x9341
	FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB                         = 0x9342
	FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV                          = 0x9342
	FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB                            = 0x9343
	FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV                             = 0x9343
	MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB                            = 0x9344
	MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB                                   = 0x9345
	CONSERVATIVE_RASTERIZATION_NV                                         = 0x9346
	SUBPIXEL_PRECISION_BIAS_X_BITS_NV                                     = 0x9347
	SUBPIXEL_PRECISION_BIAS_Y_BITS_NV                                     = 0x9348
	MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV                                   = 0x9349
	LOCATION_COMPONENT                                                    = 0x934A
	TRANSFORM_FEEDBACK_BUFFER_INDEX                                       = 0x934B
	TRANSFORM_FEEDBACK_BUFFER_STRIDE                                      = 0x934C
	ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV                                   = 0x934D
	ALPHA_TO_COVERAGE_DITHER_ENABLE_NV                                    = 0x934E
	ALPHA_TO_COVERAGE_DITHER_DISABLE_NV                                   = 0x934F
	VIEWPORT_SWIZZLE_POSITIVE_X_NV                                        = 0x9350
	VIEWPORT_SWIZZLE_NEGATIVE_X_NV                                        = 0x9351
	VIEWPORT_SWIZZLE_POSITIVE_Y_NV                                        = 0x9352
	VIEWPORT_SWIZZLE_NEGATIVE_Y_NV                                        = 0x9353
	VIEWPORT_SWIZZLE_POSITIVE_Z_NV                                        = 0x9354
	VIEWPORT_SWIZZLE_NEGATIVE_Z_NV                                        = 0x9355
	VIEWPORT_SWIZZLE_POSITIVE_W_NV                                        = 0x9356
	VIEWPORT_SWIZZLE_NEGATIVE_W_NV                                        = 0x9357
	VIEWPORT_SWIZZLE_X_NV                                                 = 0x9358
	VIEWPORT_SWIZZLE_Y_NV                                                 = 0x9359
	VIEWPORT_SWIZZLE_Z_NV                                                 = 0x935A
	VIEWPORT_SWIZZLE_W_NV                                                 = 0x935B
	CLIP_ORIGIN                                                           = 0x935C
	CLIP_ORIGIN_EXT                                                       = 0x935C
	CLIP_DEPTH_MODE                                                       = 0x935D
	CLIP_DEPTH_MODE_EXT                                                   = 0x935D
	NEGATIVE_ONE_TO_ONE                                                   = 0x935E
	NEGATIVE_ONE_TO_ONE_EXT                                               = 0x935E
	ZERO_TO_ONE                                                           = 0x935F
	ZERO_TO_ONE_EXT                                                       = 0x935F
	CLEAR_TEXTURE                                                         = 0x9365
	TEXTURE_REDUCTION_MODE_ARB                                            = 0x9366
	TEXTURE_REDUCTION_MODE_EXT                                            = 0x9366
	WEIGHTED_AVERAGE_ARB                                                  = 0x9367
	WEIGHTED_AVERAGE_EXT                                                  = 0x9367
	FONT_GLYPHS_AVAILABLE_NV                                              = 0x9368
	FONT_TARGET_UNAVAILABLE_NV                                            = 0x9369
	FONT_UNAVAILABLE_NV                                                   = 0x936A
	FONT_UNINTELLIGIBLE_NV                                                = 0x936B
	STANDARD_FONT_FORMAT_NV                                               = 0x936C
	FRAGMENT_INPUT_NV                                                     = 0x936D
	UNIFORM_BUFFER_UNIFIED_NV                                             = 0x936E
	UNIFORM_BUFFER_ADDRESS_NV                                             = 0x936F
	UNIFORM_BUFFER_LENGTH_NV                                              = 0x9370
	MULTISAMPLES_NV                                                       = 0x9371
	SUPERSAMPLE_SCALE_X_NV                                                = 0x9372
	SUPERSAMPLE_SCALE_Y_NV                                                = 0x9373
	CONFORMANT_NV                                                         = 0x9374
	CONSERVATIVE_RASTER_DILATE_NV                                         = 0x9379
	CONSERVATIVE_RASTER_DILATE_RANGE_NV                                   = 0x937A
	CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV                             = 0x937B
	VIEWPORT_POSITION_W_SCALE_NV                                          = 0x937C
	VIEWPORT_POSITION_W_SCALE_X_COEFF_NV                                  = 0x937D
	VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV                                  = 0x937E
	REPRESENTATIVE_FRAGMENT_TEST_NV                                       = 0x937F
	NUM_SAMPLE_COUNTS                                                     = 0x9380
	MULTISAMPLE_LINE_WIDTH_RANGE_ARB                                      = 0x9381
	MULTISAMPLE_LINE_WIDTH_RANGE                                          = 0x9381
	MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB                                = 0x9382
	MULTISAMPLE_LINE_WIDTH_GRANULARITY                                    = 0x9382
	VIEW_CLASS_EAC_R11                                                    = 0x9383
	VIEW_CLASS_EAC_RG11                                                   = 0x9384
	VIEW_CLASS_ETC2_RGB                                                   = 0x9385
	VIEW_CLASS_ETC2_RGBA                                                  = 0x9386
	VIEW_CLASS_ETC2_EAC_RGBA                                              = 0x9387
	VIEW_CLASS_ASTC_4x4_RGBA                                              = 0x9388
	VIEW_CLASS_ASTC_5x4_RGBA                                              = 0x9389
	VIEW_CLASS_ASTC_5x5_RGBA                                              = 0x938A
	VIEW_CLASS_ASTC_6x5_RGBA                                              = 0x938B
	VIEW_CLASS_ASTC_6x6_RGBA                                              = 0x938C
	VIEW_CLASS_ASTC_8x5_RGBA                                              = 0x938D
	VIEW_CLASS_ASTC_8x6_RGBA                                              = 0x938E
	VIEW_CLASS_ASTC_8x8_RGBA                                              = 0x938F
	VIEW_CLASS_ASTC_10x5_RGBA                                             = 0x9390
	VIEW_CLASS_ASTC_10x6_RGBA                                             = 0x9391
	VIEW_CLASS_ASTC_10x8_RGBA                                             = 0x9392
	VIEW_CLASS_ASTC_10x10_RGBA                                            = 0x9393
	VIEW_CLASS_ASTC_12x10_RGBA                                            = 0x9394
	VIEW_CLASS_ASTC_12x12_RGBA                                            = 0x9395
	TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE                                 = 0x93A0
	BGRA8_EXT                                                             = 0x93A1
	TEXTURE_USAGE_ANGLE                                                   = 0x93A2
	FRAMEBUFFER_ATTACHMENT_ANGLE                                          = 0x93A3
	PACK_REVERSE_ROW_ORDER_ANGLE                                          = 0x93A4
	PROGRAM_BINARY_ANGLE                                                  = 0x93A6
	COMPRESSED_RGBA_ASTC_4x4                                              = 0x93B0
	COMPRESSED_RGBA_ASTC_4x4_KHR                                          = 0x93B0
	COMPRESSED_RGBA_ASTC_5x4                                              = 0x93B1
	COMPRESSED_RGBA_ASTC_5x4_KHR                                          = 0x93B1
	COMPRESSED_RGBA_ASTC_5x5                                              = 0x93B2
	COMPRESSED_RGBA_ASTC_5x5_KHR                                          = 0x93B2
	COMPRESSED_RGBA_ASTC_6x5                                              = 0x93B3
	COMPRESSED_RGBA_ASTC_6x5_KHR                                          = 0x93B3
	COMPRESSED_RGBA_ASTC_6x6                                              = 0x93B4
	COMPRESSED_RGBA_ASTC_6x6_KHR                                          = 0x93B4
	COMPRESSED_RGBA_ASTC_8x5                                              = 0x93B5
	COMPRESSED_RGBA_ASTC_8x5_KHR                                          = 0x93B5
	COMPRESSED_RGBA_ASTC_8x6                                              = 0x93B6
	COMPRESSED_RGBA_ASTC_8x6_KHR                                          = 0x93B6
	COMPRESSED_RGBA_ASTC_8x8                                              = 0x93B7
	COMPRESSED_RGBA_ASTC_8x8_KHR                                          = 0x93B7
	COMPRESSED_RGBA_ASTC_10x5                                             = 0x93B8
	COMPRESSED_RGBA_ASTC_10x5_KHR                                         = 0x93B8
	COMPRESSED_RGBA_ASTC_10x6                                             = 0x93B9
	COMPRESSED_RGBA_ASTC_10x6_KHR                                         = 0x93B9
	COMPRESSED_RGBA_ASTC_10x8                                             = 0x93BA
	COMPRESSED_RGBA_ASTC_10x8_KHR                                         = 0x93BA
	COMPRESSED_RGBA_ASTC_10x10                                            = 0x93BB
	COMPRESSED_RGBA_ASTC_10x10_KHR                                        = 0x93BB
	COMPRESSED_RGBA_ASTC_12x10                                            = 0x93BC
	COMPRESSED_RGBA_ASTC_12x10_KHR                                        = 0x93BC
	COMPRESSED_RGBA_ASTC_12x12                                            = 0x93BD
	COMPRESSED_RGBA_ASTC_12x12_KHR                                        = 0x93BD
	COMPRESSED_RGBA_ASTC_3x3x3_OES                                        = 0x93C0
	COMPRESSED_RGBA_ASTC_4x3x3_OES                                        = 0x93C1
	COMPRESSED_RGBA_ASTC_4x4x3_OES                                        = 0x93C2
	COMPRESSED_RGBA_ASTC_4x4x4_OES                                        = 0x93C3
	COMPRESSED_RGBA_ASTC_5x4x4_OES                                        = 0x93C4
	COMPRESSED_RGBA_ASTC_5x5x4_OES                                        = 0x93C5
	COMPRESSED_RGBA_ASTC_5x5x5_OES                                        = 0x93C6
	COMPRESSED_RGBA_ASTC_6x5x5_OES                                        = 0x93C7
	COMPRESSED_RGBA_ASTC_6x6x5_OES                                        = 0x93C8
	COMPRESSED_RGBA_ASTC_6x6x6_OES                                        = 0x93C9
	COMPRESSED_SRGB8_ALPHA8_ASTC_4x4                                      = 0x93D0
	COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR                                  = 0x93D0
	COMPRESSED_SRGB8_ALPHA8_ASTC_5x4                                      = 0x93D1
	COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR                                  = 0x93D1
	COMPRESSED_SRGB8_ALPHA8_ASTC_5x5                                      = 0x93D2
	COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR                                  = 0x93D2
	COMPRESSED_SRGB8_ALPHA8_ASTC_6x5                                      = 0x93D3
	COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR                                  = 0x93D3
	COMPRESSED_SRGB8_ALPHA8_ASTC_6x6                                      = 0x93D4
	COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR                                  = 0x93D4
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x5                                      = 0x93D5
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR                                  = 0x93D5
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x6                                      = 0x93D6
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR                                  = 0x93D6
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x8                                      = 0x93D7
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR                                  = 0x93D7
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x5                                     = 0x93D8
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR                                 = 0x93D8
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x6                                     = 0x93D9
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR                                 = 0x93D9
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x8                                     = 0x93DA
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR                                 = 0x93DA
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x10                                    = 0x93DB
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR                                = 0x93DB
	COMPRESSED_SRGB8_ALPHA8_ASTC_12x10                                    = 0x93DC
	COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR                                = 0x93DC
	COMPRESSED_SRGB8_ALPHA8_ASTC_12x12                                    = 0x93DD
	COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR                                = 0x93DD
	COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES                                = 0x93E0
	COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES                                = 0x93E1
	COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES                                = 0x93E2
	COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES                                = 0x93E3
	COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES                                = 0x93E4
	COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES                                = 0x93E5
	COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES                                = 0x93E6
	COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES                                = 0x93E7
	COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES                                = 0x93E8
	COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES                                = 0x93E9
	COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG                                = 0x93F0
	COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG                                = 0x93F1
	PERFQUERY_COUNTER_EVENT_INTEL                                         = 0x94F0
	PERFQUERY_COUNTER_DURATION_NORM_INTEL                                 = 0x94F1
	PERFQUERY_COUNTER_DURATION_RAW_INTEL                                  = 0x94F2
	PERFQUERY_COUNTER_THROUGHPUT_INTEL                                    = 0x94F3
	PERFQUERY_COUNTER_RAW_INTEL                                           = 0x94F4
	PERFQUERY_COUNTER_TIMESTAMP_INTEL                                     = 0x94F5
	PERFQUERY_COUNTER_DATA_UINT32_INTEL                                   = 0x94F8
	PERFQUERY_COUNTER_DATA_UINT64_INTEL                                   = 0x94F9
	PERFQUERY_COUNTER_DATA_FLOAT_INTEL                                    = 0x94FA
	PERFQUERY_COUNTER_DATA_DOUBLE_INTEL                                   = 0x94FB
	PERFQUERY_COUNTER_DATA_BOOL32_INTEL                                   = 0x94FC
	PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL                                 = 0x94FD
	PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL                               = 0x94FE
	PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL                               = 0x94FF
	PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL                                 = 0x9500
	LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT                         = 0x9530
	LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT                         = 0x9531
	SUBGROUP_SIZE_KHR                                                     = 0x9532
	SUBGROUP_SUPPORTED_STAGES_KHR                                         = 0x9533
	SUBGROUP_SUPPORTED_FEATURES_KHR                                       = 0x9534
	SUBGROUP_QUAD_ALL_STAGES_KHR                                          = 0x9535
	MAX_MESH_TOTAL_MEMORY_SIZE_NV                                         = 0x9536
	MAX_TASK_TOTAL_MEMORY_SIZE_NV                                         = 0x9537
	MAX_MESH_OUTPUT_VERTICES_NV                                           = 0x9538
	MAX_MESH_OUTPUT_PRIMITIVES_NV                                         = 0x9539
	MAX_TASK_OUTPUT_COUNT_NV                                              = 0x953A
	MAX_MESH_WORK_GROUP_SIZE_NV                                           = 0x953B
	MAX_TASK_WORK_GROUP_SIZE_NV                                           = 0x953C
	MAX_DRAW_MESH_TASKS_COUNT_NV                                          = 0x953D
	MESH_WORK_GROUP_SIZE_NV                                               = 0x953E
	TASK_WORK_GROUP_SIZE_NV                                               = 0x953F
	QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV                                   = 0x9540
	QUERY_RESOURCE_MEMTYPE_VIDMEM_NV                                      = 0x9542
	MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV                              = 0x9543
	QUERY_RESOURCE_SYS_RESERVED_NV                                        = 0x9544
	QUERY_RESOURCE_TEXTURE_NV                                             = 0x9545
	QUERY_RESOURCE_RENDERBUFFER_NV                                        = 0x9546
	QUERY_RESOURCE_BUFFEROBJECT_NV                                        = 0x9547
	PER_GPU_STORAGE_NV                                                    = 0x9548
	MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV                             = 0x9549
	UPLOAD_GPU_MASK_NVX                                                   = 0x954A
	CONSERVATIVE_RASTER_MODE_NV                                           = 0x954D
	CONSERVATIVE_RASTER_MODE_POST_SNAP_NV                                 = 0x954E
	CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV                        = 0x954F
	CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV                                  = 0x9550
	SHADER_BINARY_FORMAT_SPIR_V                                           = 0x9551
	SHADER_BINARY_FORMAT_SPIR_V_ARB                                       = 0x9551
	SPIR_V_BINARY                                                         = 0x9552
	SPIR_V_BINARY_ARB                                                     = 0x9552
	SPIR_V_EXTENSIONS                                                     = 0x9553
	NUM_SPIR_V_EXTENSIONS                                                 = 0x9554
	SCISSOR_TEST_EXCLUSIVE_NV                                             = 0x9555
	SCISSOR_BOX_EXCLUSIVE_NV                                              = 0x9556
	MAX_MESH_VIEWS_NV                                                     = 0x9557
	RENDER_GPU_MASK_NV                                                    = 0x9558
	MESH_SHADER_NV                                                        = 0x9559
	TASK_SHADER_NV                                                        = 0x955A
	SHADING_RATE_IMAGE_BINDING_NV                                         = 0x955B
	SHADING_RATE_IMAGE_TEXEL_WIDTH_NV                                     = 0x955C
	SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV                                    = 0x955D
	SHADING_RATE_IMAGE_PALETTE_SIZE_NV                                    = 0x955E
	MAX_COARSE_FRAGMENT_SAMPLES_NV                                        = 0x955F
	SHADING_RATE_IMAGE_NV                                                 = 0x9563
	SHADING_RATE_NO_INVOCATIONS_NV                                        = 0x9564
	SHADING_RATE_1_INVOCATION_PER_PIXEL_NV                                = 0x9565
	SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV                           = 0x9566
	SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV                           = 0x9567
	SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV                           = 0x9568
	SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV                           = 0x9569
	SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV                           = 0x956A
	SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV                           = 0x956B
	SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV                               = 0x956C
	SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV                               = 0x956D
	SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV                               = 0x956E
	SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV                              = 0x956F
	MESH_VERTICES_OUT_NV                                                  = 0x9579
	MESH_PRIMITIVES_OUT_NV                                                = 0x957A
	MESH_OUTPUT_TYPE_NV                                                   = 0x957B
	MESH_SUBROUTINE_NV                                                    = 0x957C
	TASK_SUBROUTINE_NV                                                    = 0x957D
	MESH_SUBROUTINE_UNIFORM_NV                                            = 0x957E
	TASK_SUBROUTINE_UNIFORM_NV                                            = 0x957F
	TEXTURE_TILING_EXT                                                    = 0x9580
	DEDICATED_MEMORY_OBJECT_EXT                                           = 0x9581
	NUM_TILING_TYPES_EXT                                                  = 0x9582
	TILING_TYPES_EXT                                                      = 0x9583
	OPTIMAL_TILING_EXT                                                    = 0x9584
	LINEAR_TILING_EXT                                                     = 0x9585
	HANDLE_TYPE_OPAQUE_FD_EXT                                             = 0x9586
	HANDLE_TYPE_OPAQUE_WIN32_EXT                                          = 0x9587
	HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT                                      = 0x9588
	HANDLE_TYPE_D3D12_TILEPOOL_EXT                                        = 0x9589
	HANDLE_TYPE_D3D12_RESOURCE_EXT                                        = 0x958A
	HANDLE_TYPE_D3D11_IMAGE_EXT                                           = 0x958B
	HANDLE_TYPE_D3D11_IMAGE_KMT_EXT                                       = 0x958C
	LAYOUT_GENERAL_EXT                                                    = 0x958D
	LAYOUT_COLOR_ATTACHMENT_EXT                                           = 0x958E
	LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT                                   = 0x958F
	LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT                                    = 0x9590
	LAYOUT_SHADER_READ_ONLY_EXT                                           = 0x9591
	LAYOUT_TRANSFER_SRC_EXT                                               = 0x9592
	LAYOUT_TRANSFER_DST_EXT                                               = 0x9593
	HANDLE_TYPE_D3D12_FENCE_EXT                                           = 0x9594
	D3D12_FENCE_VALUE_EXT                                                 = 0x9595
	TIMELINE_SEMAPHORE_VALUE_NV                                           = 0x9595
	NUM_DEVICE_UUIDS_EXT                                                  = 0x9596
	DEVICE_UUID_EXT                                                       = 0x9597
	DRIVER_UUID_EXT                                                       = 0x9598
	DEVICE_LUID_EXT                                                       = 0x9599
	DEVICE_NODE_MASK_EXT                                                  = 0x959A
	PROTECTED_MEMORY_OBJECT_EXT                                           = 0x959B
	UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV                            = 0x959C
	UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV                            = 0x959D
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV                    = 0x959E
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV                    = 0x959F
	REFERENCED_BY_MESH_SHADER_NV                                          = 0x95A0
	REFERENCED_BY_TASK_SHADER_NV                                          = 0x95A1
	MAX_MESH_WORK_GROUP_INVOCATIONS_NV                                    = 0x95A2
	MAX_TASK_WORK_GROUP_INVOCATIONS_NV                                    = 0x95A3
	ATTACHED_MEMORY_OBJECT_NV                                             = 0x95A4
	ATTACHED_MEMORY_OFFSET_NV                                             = 0x95A5
	MEMORY_ATTACHABLE_ALIGNMENT_NV                                        = 0x95A6
	MEMORY_ATTACHABLE_SIZE_NV                                             = 0x95A7
	MEMORY_ATTACHABLE_NV                                                  = 0x95A8
	DETACHED_MEMORY_INCARNATION_NV                                        = 0x95A9
	DETACHED_TEXTURES_NV                                                  = 0x95AA
	DETACHED_BUFFERS_NV                                                   = 0x95AB
	MAX_DETACHED_TEXTURES_NV                                              = 0x95AC
	MAX_DETACHED_BUFFERS_NV                                               = 0x95AD
	SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV                                  = 0x95AE
	SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV                              = 0x95AF
	SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV                             = 0x95B0
	SHADING_RATE_IMAGE_PER_PRIMITIVE_NV                                   = 0x95B1
	SHADING_RATE_IMAGE_PALETTE_COUNT_NV                                   = 0x95B2
	SEMAPHORE_TYPE_NV                                                     = 0x95B3
	SEMAPHORE_TYPE_BINARY_NV                                              = 0x95B4
	SEMAPHORE_TYPE_TIMELINE_NV                                            = 0x95B5
	MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV                            = 0x95B6
	FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR                          = 0x9630
	MAX_VIEWS_OVR                                                         = 0x9631
	FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR                    = 0x9632
	FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR                               = 0x9633
	GS_SHADER_BINARY_MTK                                                  = 0x9640
	GS_PROGRAM_BINARY_MTK                                                 = 0x9641
	MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT                       = 0x9650
	MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT                            = 0x9651
	FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = 0x9652
	TEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM                                  = 0x96A0
	FRAMEBUFFER_FETCH_NONCOHERENT_QCOM                                    = 0x96A2
	VALIDATE_SHADER_BINARY_QCOM                                           = 0x96A3
	SHADING_RATE_QCOM                                                     = 0x96A4
	SHADING_RATE_PRESERVE_ASPECT_RATIO_QCOM                               = 0x96A5
	SHADING_RATE_1X1_PIXELS_QCOM                                          = 0x96A6
	SHADING_RATE_1X2_PIXELS_QCOM                                          = 0x96A7
	SHADING_RATE_2X1_PIXELS_QCOM                                          = 0x96A8
	SHADING_RATE_2X2_PIXELS_QCOM                                          = 0x96A9
	SHADING_RATE_1X4_PIXELS_QCOM                                          = 0x96AA
	SHADING_RATE_4X1_PIXELS_QCOM                                          = 0x96AB
	SHADING_RATE_4X2_PIXELS_QCOM                                          = 0x96AC
	SHADING_RATE_2X4_PIXELS_QCOM                                          = 0x96AD
	SHADING_RATE_4X4_PIXELS_QCOM                                          = 0x96AE
	RASTER_POSITION_UNCLIPPED_IBM                                         = 0x19262
	CULL_VERTEX_IBM                                                       = 103050
	ALL_STATIC_DATA_IBM                                                   = 103060
	STATIC_VERTEX_ARRAY_IBM                                               = 103061
	VERTEX_ARRAY_LIST_IBM                                                 = 103070
	NORMAL_ARRAY_LIST_IBM                                                 = 103071
	COLOR_ARRAY_LIST_IBM                                                  = 103072
	INDEX_ARRAY_LIST_IBM                                                  = 103073
	TEXTURE_COORD_ARRAY_LIST_IBM                                          = 103074
	EDGE_FLAG_ARRAY_LIST_IBM                                              = 103075
	FOG_COORDINATE_ARRAY_LIST_IBM                                         = 103076
	SECONDARY_COLOR_ARRAY_LIST_IBM                                        = 103077
	VERTEX_ARRAY_LIST_STRIDE_IBM                                          = 103080
	NORMAL_ARRAY_LIST_STRIDE_IBM                                          = 103081
	COLOR_ARRAY_LIST_STRIDE_IBM                                           = 103082
	INDEX_ARRAY_LIST_STRIDE_IBM                                           = 103083
	TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM                                   = 103084
	EDGE_FLAG_ARRAY_LIST_STRIDE_IBM                                       = 103085
	FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM                                  = 103086
	SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM                                 = 103087
	PREFER_DOUBLEBUFFER_HINT_PGI                                          = 0x1A1F8
	CONSERVE_MEMORY_HINT_PGI                                              = 0x1A1FD
	RECLAIM_MEMORY_HINT_PGI                                               = 0x1A1FE
	NATIVE_GRAPHICS_HANDLE_PGI                                            = 0x1A202
	NATIVE_GRAPHICS_BEGIN_HINT_PGI                                        = 0x1A203
	NATIVE_GRAPHICS_END_HINT_PGI                                          = 0x1A204
	ALWAYS_FAST_HINT_PGI                                                  = 0x1A20C
	ALWAYS_SOFT_HINT_PGI                                                  = 0x1A20D
	ALLOW_DRAW_OBJ_HINT_PGI                                               = 0x1A20E
	ALLOW_DRAW_WIN_HINT_PGI                                               = 0x1A20F
	ALLOW_DRAW_FRG_HINT_PGI                                               = 0x1A210
	ALLOW_DRAW_MEM_HINT_PGI                                               = 0x1A211
	STRICT_DEPTHFUNC_HINT_PGI                                             = 0x1A216
	STRICT_LIGHTING_HINT_PGI                                              = 0x1A217
	STRICT_SCISSOR_HINT_PGI                                               = 0x1A218
	FULL_STIPPLE_HINT_PGI                                                 = 0x1A219
	CLIP_NEAR_HINT_PGI                                                    = 0x1A220
	CLIP_FAR_HINT_PGI                                                     = 0x1A221
	WIDE_LINE_HINT_PGI                                                    = 0x1A222
	BACK_NORMALS_HINT_PGI                                                 = 0x1A223
	VERTEX_DATA_HINT_PGI                                                  = 0x1A22A
	VERTEX_CONSISTENT_HINT_PGI                                            = 0x1A22B
	MATERIAL_SIDE_HINT_PGI                                                = 0x1A22C
	MAX_VERTEX_HINT_PGI                                                   = 0x1A22D
)
